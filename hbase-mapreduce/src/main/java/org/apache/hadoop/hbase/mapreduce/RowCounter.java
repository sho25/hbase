begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|AbstractHBaseTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|BasicParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|MissingOptionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FirstKeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|MultiRowRangeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|NullOutputFormat
import|;
end_import

begin_comment
comment|/**  * A job with a just a map phase to count rows. Map outputs table rows IF the  * input row has columns that have content.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|RowCounter
extends|extends
name|AbstractHBaseTool
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RowCounter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Name of this 'program'. */
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"rowcounter"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|JOB_NAME_CONF_KEY
init|=
literal|"mapreduce.job.name"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|EXPECTED_COUNT_KEY
init|=
name|RowCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".expected_count"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|OPT_START_TIME
init|=
literal|"starttime"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|OPT_END_TIME
init|=
literal|"endtime"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|OPT_RANGE
init|=
literal|"range"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|OPT_EXPECTED_COUNT
init|=
literal|"expectedCount"
decl_stmt|;
specifier|private
name|String
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MultiRowRangeFilter
operator|.
name|RowRange
argument_list|>
name|rowRangeList
decl_stmt|;
specifier|private
name|long
name|startTime
decl_stmt|;
specifier|private
name|long
name|endTime
decl_stmt|;
specifier|private
name|long
name|expectedCount
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Mapper that runs the count.    */
specifier|static
class|class
name|RowCounterMapper
extends|extends
name|TableMapper
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|>
block|{
comment|/** Counter enumeration to count the actual rows. */
specifier|public
specifier|static
enum|enum
name|Counters
block|{
name|ROWS
block|}
comment|/**      * Maps the data.      *      * @param row  The current table row key.      * @param values  The columns.      * @param context  The current context.      * @throws IOException When something is broken with the data.      * @see org.apache.hadoop.mapreduce.Mapper#map(Object, Object, Context)      */
annotation|@
name|Override
specifier|public
name|void
name|map
parameter_list|(
name|ImmutableBytesWritable
name|row
parameter_list|,
name|Result
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Count every row containing data, whether it's in qualifiers or values
name|context
operator|.
name|getCounter
argument_list|(
name|Counters
operator|.
name|ROWS
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sets up the actual job.    *    * @param conf  The current configuration.    * @return The newly created job.    * @throws IOException When setting up the job fails.    */
specifier|public
name|Job
name|createSubmittableJob
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|JOB_NAME_CONF_KEY
argument_list|,
name|NAME
operator|+
literal|"_"
operator|+
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|RowCounter
operator|.
name|class
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setCacheBlocks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setScanFilter
argument_list|(
name|scan
argument_list|,
name|rowRangeList
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|columnName
range|:
name|this
operator|.
name|columns
control|)
block|{
name|String
name|family
init|=
name|StringUtils
operator|.
name|substringBefore
argument_list|(
name|columnName
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
name|String
name|qualifier
init|=
name|StringUtils
operator|.
name|substringAfter
argument_list|(
name|columnName
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|qualifier
argument_list|)
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|expectedCount
operator|>=
literal|0
condition|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|EXPECTED_COUNT_KEY
argument_list|,
name|this
operator|.
name|expectedCount
argument_list|)
expr_stmt|;
block|}
name|scan
operator|.
name|setTimeRange
argument_list|(
name|startTime
argument_list|,
name|endTime
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|initTableMapperJob
argument_list|(
name|tableName
argument_list|,
name|scan
argument_list|,
name|RowCounterMapper
operator|.
name|class
argument_list|,
name|ImmutableBytesWritable
operator|.
name|class
argument_list|,
name|Result
operator|.
name|class
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|MultiRowRangeFilter
operator|.
name|RowRange
argument_list|>
name|parseRowRangeParameter
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|rangesSplit
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|";"
argument_list|)
operator|.
name|splitToList
argument_list|(
name|arg
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MultiRowRangeFilter
operator|.
name|RowRange
argument_list|>
name|rangeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|range
range|:
name|rangesSplit
control|)
block|{
if|if
condition|(
name|range
operator|!=
literal|null
operator|&&
operator|!
name|range
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|startEnd
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|splitToList
argument_list|(
name|range
argument_list|)
decl_stmt|;
if|if
condition|(
name|startEnd
operator|.
name|size
argument_list|()
operator|!=
literal|2
operator|||
name|startEnd
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Wrong range specification: "
operator|+
name|range
argument_list|)
throw|;
block|}
name|String
name|startKey
init|=
name|startEnd
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|endKey
init|=
name|startEnd
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|rangeList
operator|.
name|add
argument_list|(
operator|new
name|MultiRowRangeFilter
operator|.
name|RowRange
argument_list|(
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
name|startKey
argument_list|)
argument_list|,
literal|true
argument_list|,
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
name|endKey
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rangeList
return|;
block|}
comment|/**    * Sets filter {@link FilterBase} to the {@link Scan} instance.    * If provided rowRangeList contains more than one element,    * method sets filter which is instance of {@link MultiRowRangeFilter}.    * Otherwise, method sets filter which is instance of {@link FirstKeyOnlyFilter}.    * If rowRangeList contains exactly one element, startRow and stopRow are set to the scan.    * @param scan    * @param rowRangeList    */
specifier|private
specifier|static
name|void
name|setScanFilter
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|List
argument_list|<
name|MultiRowRangeFilter
operator|.
name|RowRange
argument_list|>
name|rowRangeList
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|rowRangeList
operator|==
literal|null
condition|?
literal|0
else|:
name|rowRangeList
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<=
literal|1
condition|)
block|{
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
name|MultiRowRangeFilter
operator|.
name|RowRange
name|range
init|=
name|rowRangeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|range
operator|.
name|getStartRow
argument_list|()
argument_list|)
expr_stmt|;
comment|//inclusive
name|scan
operator|.
name|setStopRow
argument_list|(
name|range
operator|.
name|getStopRow
argument_list|()
argument_list|)
expr_stmt|;
comment|//exclusive
block|}
elseif|else
if|if
condition|(
name|size
operator|>
literal|1
condition|)
block|{
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|MultiRowRangeFilter
argument_list|(
name|rowRangeList
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|printUsage
parameter_list|()
block|{
name|StringBuilder
name|footerBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|footerBuilder
operator|.
name|append
argument_list|(
literal|"For performance, consider the following configuration properties:\n"
argument_list|)
expr_stmt|;
name|footerBuilder
operator|.
name|append
argument_list|(
literal|"-Dhbase.client.scanner.caching=100\n"
argument_list|)
expr_stmt|;
name|footerBuilder
operator|.
name|append
argument_list|(
literal|"-Dmapreduce.map.speculative=false\n"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
literal|"hbase rowcounter<tablename> [options] [<column1><column2>...]"
argument_list|,
literal|"Options:"
argument_list|,
name|footerBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|printUsage
parameter_list|(
specifier|final
name|String
name|usageStr
parameter_list|,
specifier|final
name|String
name|usageHeader
parameter_list|,
specifier|final
name|String
name|usageFooter
parameter_list|)
block|{
name|HelpFormatter
name|helpFormatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|helpFormatter
operator|.
name|setWidth
argument_list|(
literal|120
argument_list|)
expr_stmt|;
name|helpFormatter
operator|.
name|setOptionComparator
argument_list|(
operator|new
name|AbstractHBaseTool
operator|.
name|OptionsOrderComparator
argument_list|()
argument_list|)
expr_stmt|;
name|helpFormatter
operator|.
name|setLongOptSeparator
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|helpFormatter
operator|.
name|printHelp
argument_list|(
name|usageStr
argument_list|,
name|usageHeader
argument_list|,
name|options
argument_list|,
name|usageFooter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addOptions
parameter_list|()
block|{
name|Option
name|startTimeOption
init|=
name|Option
operator|.
name|builder
argument_list|(
literal|null
argument_list|)
operator|.
name|valueSeparator
argument_list|(
literal|'='
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|true
argument_list|)
operator|.
name|desc
argument_list|(
literal|"starting time filter to start counting rows from."
argument_list|)
operator|.
name|longOpt
argument_list|(
name|OPT_START_TIME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Option
name|endTimeOption
init|=
name|Option
operator|.
name|builder
argument_list|(
literal|null
argument_list|)
operator|.
name|valueSeparator
argument_list|(
literal|'='
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|true
argument_list|)
operator|.
name|desc
argument_list|(
literal|"end time filter limit, to only count rows up to this timestamp."
argument_list|)
operator|.
name|longOpt
argument_list|(
name|OPT_END_TIME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Option
name|rangeOption
init|=
name|Option
operator|.
name|builder
argument_list|(
literal|null
argument_list|)
operator|.
name|valueSeparator
argument_list|(
literal|'='
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|true
argument_list|)
operator|.
name|desc
argument_list|(
literal|"[startKey],[endKey][;[startKey],[endKey]...]]"
argument_list|)
operator|.
name|longOpt
argument_list|(
name|OPT_RANGE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Option
name|expectedOption
init|=
name|Option
operator|.
name|builder
argument_list|(
literal|null
argument_list|)
operator|.
name|valueSeparator
argument_list|(
literal|'='
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|true
argument_list|)
operator|.
name|desc
argument_list|(
literal|"expected number of rows to be count."
argument_list|)
operator|.
name|longOpt
argument_list|(
name|OPT_EXPECTED_COUNT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addOption
argument_list|(
name|startTimeOption
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
name|endTimeOption
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
name|rangeOption
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
name|expectedOption
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|this
operator|.
name|tableName
operator|=
name|cmd
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_RANGE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|rowRangeList
operator|=
name|parseRowRangeParameter
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_RANGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|endTime
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_END_TIME
argument_list|)
operator|==
literal|null
condition|?
name|HConstants
operator|.
name|LATEST_TIMESTAMP
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_END_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|expectedCount
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_EXPECTED_COUNT
argument_list|)
operator|==
literal|null
condition|?
name|Long
operator|.
name|MIN_VALUE
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_EXPECTED_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_START_TIME
argument_list|)
operator|==
literal|null
condition|?
literal|0
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_START_TIME
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|cmd
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|argument
init|=
name|cmd
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|argument
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|argument
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|endTime
operator|<
name|startTime
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"--endtime="
operator|+
name|endTime
operator|+
literal|" needs to be greater than --starttime="
operator|+
name|startTime
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processOldArgs
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|copiedArgs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|args
operator|.
name|removeAll
argument_list|(
name|copiedArgs
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|arg
range|:
name|copiedArgs
control|)
block|{
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
operator|&&
name|arg
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|String
index|[]
name|kv
init|=
name|arg
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
name|kv
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|kv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|args
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|int
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|createSubmittableJob
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|boolean
name|success
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|long
name|expectedCount
init|=
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
name|EXPECTED_COUNT_KEY
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
operator|&&
name|expectedCount
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|final
name|Counter
name|counter
init|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|RowCounterMapper
operator|.
name|Counters
operator|.
name|ROWS
argument_list|)
decl_stmt|;
name|success
operator|=
name|expectedCount
operator|==
name|counter
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failing job because count of '"
operator|+
name|counter
operator|.
name|getValue
argument_list|()
operator|+
literal|"' does not match expected count of '"
operator|+
name|expectedCount
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|success
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
comment|/**    * Main entry point.    * @param args The command line parameters.    * @throws Exception When running the job fails.    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|RowCounter
argument_list|()
operator|.
name|doStaticMain
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|RowCounterCommandLineParser
extends|extends
name|BasicParser
block|{
annotation|@
name|Override
specifier|protected
name|void
name|checkRequiredOptions
parameter_list|()
throws|throws
name|MissingOptionException
block|{
if|if
condition|(
name|this
operator|.
name|cmd
operator|.
name|getArgList
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
operator|||
name|this
operator|.
name|cmd
operator|.
name|getArgList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MissingOptionException
argument_list|(
literal|"First argument must be a valid table name."
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|CommandLineParser
name|newParser
parameter_list|()
block|{
return|return
operator|new
name|RowCounterCommandLineParser
argument_list|()
return|;
block|}
block|}
end_class

end_unit

