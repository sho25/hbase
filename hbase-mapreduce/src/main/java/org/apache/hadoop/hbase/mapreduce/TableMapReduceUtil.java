begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|token
operator|.
name|TokenUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RegionSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_comment
comment|/**  * Utility for {@link TableMapper} and {@link TableReducer}  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|TableMapReduceUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TableMapReduceUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Use this before submitting a TableMap job. It will appropriately set up    * the job.    *    * @param table  The table name to read from.    * @param scan  The scan instance with the columns, time range etc.    * @param mapper  The mapper class to use.    * @param outputKeyClass  The class of the output key.    * @param outputValueClass  The class of the output value.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @throws IOException When setting up the details fails.    */
specifier|public
specifier|static
name|void
name|initTableMapperJob
parameter_list|(
name|String
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableMapperJob
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|mapper
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|job
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a TableMap job. It will appropriately set up    * the job.    *    * @param table  The table name to read from.    * @param scan  The scan instance with the columns, time range etc.    * @param mapper  The mapper class to use.    * @param outputKeyClass  The class of the output key.    * @param outputValueClass  The class of the output value.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @throws IOException When setting up the details fails.    */
specifier|public
specifier|static
name|void
name|initTableMapperJob
parameter_list|(
name|TableName
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableMapperJob
argument_list|(
name|table
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|scan
argument_list|,
name|mapper
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|job
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a TableMap job. It will appropriately set up    * the job.    *    * @param table Binary representation of the table name to read from.    * @param scan  The scan instance with the columns, time range etc.    * @param mapper  The mapper class to use.    * @param outputKeyClass  The class of the output key.    * @param outputValueClass  The class of the output value.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @throws IOException When setting up the details fails.    */
specifier|public
specifier|static
name|void
name|initTableMapperJob
parameter_list|(
name|byte
index|[]
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableMapperJob
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|table
argument_list|)
argument_list|,
name|scan
argument_list|,
name|mapper
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|job
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**     * Use this before submitting a TableMap job. It will appropriately set up     * the job.     *     * @param table  The table name to read from.     * @param scan  The scan instance with the columns, time range etc.     * @param mapper  The mapper class to use.     * @param outputKeyClass  The class of the output key.     * @param outputValueClass  The class of the output value.     * @param job  The current job to adjust.  Make sure the passed job is     * carrying all necessary HBase configuration.     * @param addDependencyJars upload HBase jars and jars for any of the configured     *           job classes via the distributed cache (tmpjars).     * @throws IOException When setting up the details fails.     */
specifier|public
specifier|static
name|void
name|initTableMapperJob
parameter_list|(
name|String
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|,
name|boolean
name|addDependencyJars
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableMapperJob
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|mapper
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|job
argument_list|,
name|addDependencyJars
argument_list|,
literal|true
argument_list|,
name|inputFormatClass
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a TableMap job. It will appropriately set up    * the job.    *    * @param table  The table name to read from.    * @param scan  The scan instance with the columns, time range etc.    * @param mapper  The mapper class to use.    * @param outputKeyClass  The class of the output key.    * @param outputValueClass  The class of the output value.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @param addDependencyJars upload HBase jars and jars for any of the configured    *           job classes via the distributed cache (tmpjars).    * @param initCredentials whether to initialize hbase auth credentials for the job    * @param inputFormatClass the input format    * @throws IOException When setting up the details fails.    */
specifier|public
specifier|static
name|void
name|initTableMapperJob
parameter_list|(
name|String
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|,
name|boolean
name|addDependencyJars
parameter_list|,
name|boolean
name|initCredentials
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|)
throws|throws
name|IOException
block|{
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|inputFormatClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputValueClass
operator|!=
literal|null
condition|)
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|outputValueClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputKeyClass
operator|!=
literal|null
condition|)
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|outputKeyClass
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|Put
operator|.
name|class
operator|.
name|equals
argument_list|(
name|outputValueClass
argument_list|)
condition|)
block|{
name|job
operator|.
name|setCombinerClass
argument_list|(
name|PutCombiner
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|HBaseConfiguration
operator|.
name|merge
argument_list|(
name|conf
argument_list|,
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableInputFormat
operator|.
name|INPUT_TABLE
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableInputFormat
operator|.
name|SCAN
argument_list|,
name|convertScanToString
argument_list|(
name|scan
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
literal|"io.serializations"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"io.serializations"
argument_list|)
argument_list|,
name|MutationSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ResultSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|CellSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|addDependencyJars
condition|)
block|{
name|addDependencyJars
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|initCredentials
condition|)
block|{
name|initCredentials
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Use this before submitting a TableMap job. It will appropriately set up    * the job.    *    * @param table Binary representation of the table name to read from.    * @param scan  The scan instance with the columns, time range etc.    * @param mapper  The mapper class to use.    * @param outputKeyClass  The class of the output key.    * @param outputValueClass  The class of the output value.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @param addDependencyJars upload HBase jars and jars for any of the configured    *           job classes via the distributed cache (tmpjars).    * @param inputFormatClass The class of the input format    * @throws IOException When setting up the details fails.    */
specifier|public
specifier|static
name|void
name|initTableMapperJob
parameter_list|(
name|byte
index|[]
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|,
name|boolean
name|addDependencyJars
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableMapperJob
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|table
argument_list|)
argument_list|,
name|scan
argument_list|,
name|mapper
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|job
argument_list|,
name|addDependencyJars
argument_list|,
name|inputFormatClass
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a TableMap job. It will appropriately set up    * the job.    *    * @param table Binary representation of the table name to read from.    * @param scan  The scan instance with the columns, time range etc.    * @param mapper  The mapper class to use.    * @param outputKeyClass  The class of the output key.    * @param outputValueClass  The class of the output value.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @param addDependencyJars upload HBase jars and jars for any of the configured    *           job classes via the distributed cache (tmpjars).    * @throws IOException When setting up the details fails.    */
specifier|public
specifier|static
name|void
name|initTableMapperJob
parameter_list|(
name|byte
index|[]
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|,
name|boolean
name|addDependencyJars
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableMapperJob
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|table
argument_list|)
argument_list|,
name|scan
argument_list|,
name|mapper
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|job
argument_list|,
name|addDependencyJars
argument_list|,
name|TableInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a TableMap job. It will appropriately set up    * the job.    *    * @param table The table name to read from.    * @param scan  The scan instance with the columns, time range etc.    * @param mapper  The mapper class to use.    * @param outputKeyClass  The class of the output key.    * @param outputValueClass  The class of the output value.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @param addDependencyJars upload HBase jars and jars for any of the configured    *           job classes via the distributed cache (tmpjars).    * @throws IOException When setting up the details fails.    */
specifier|public
specifier|static
name|void
name|initTableMapperJob
parameter_list|(
name|String
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|,
name|boolean
name|addDependencyJars
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableMapperJob
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|mapper
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|job
argument_list|,
name|addDependencyJars
argument_list|,
name|TableInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Enable a basic on-heap cache for these jobs. Any BlockCache implementation based on    * direct memory will likely cause the map tasks to OOM when opening the region. This    * is done here instead of in TableSnapshotRegionRecordReader in case an advanced user    * wants to override this behavior in their job.    */
specifier|public
specifier|static
name|void
name|resetCacheConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setFloat
argument_list|(
name|HConstants
operator|.
name|HFILE_BLOCK_CACHE_SIZE_KEY
argument_list|,
name|HConstants
operator|.
name|HFILE_BLOCK_CACHE_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|HConstants
operator|.
name|BUCKET_CACHE_SIZE_KEY
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|HConstants
operator|.
name|BUCKET_CACHE_IOENGINE_KEY
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets up the job for reading from one or more table snapshots, with one or more scans    * per snapshot.    * It bypasses hbase servers and read directly from snapshot files.    *    * @param snapshotScans     map of snapshot name to scans on that snapshot.    * @param mapper            The mapper class to use.    * @param outputKeyClass    The class of the output key.    * @param outputValueClass  The class of the output value.    * @param job               The current job to adjust.  Make sure the passed job is    *                          carrying all necessary HBase configuration.    * @param addDependencyJars upload HBase jars and jars for any of the configured    *                          job classes via the distributed cache (tmpjars).    */
specifier|public
specifier|static
name|void
name|initMultiTableSnapshotMapperJob
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Scan
argument_list|>
argument_list|>
name|snapshotScans
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|,
name|boolean
name|addDependencyJars
parameter_list|,
name|Path
name|tmpRestoreDir
parameter_list|)
throws|throws
name|IOException
block|{
name|MultiTableSnapshotInputFormat
operator|.
name|setInput
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|snapshotScans
argument_list|,
name|tmpRestoreDir
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|MultiTableSnapshotInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputValueClass
operator|!=
literal|null
condition|)
block|{
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|outputValueClass
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outputKeyClass
operator|!=
literal|null
condition|)
block|{
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|outputKeyClass
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|setMapperClass
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|HBaseConfiguration
operator|.
name|merge
argument_list|(
name|conf
argument_list|,
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|addDependencyJars
condition|)
block|{
name|addDependencyJars
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|addDependencyJarsForClasses
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|MetricRegistry
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|resetCacheConfig
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets up the job for reading from a table snapshot. It bypasses hbase servers and read directly    * from snapshot files.    * @param snapshotName The name of the snapshot (of a table) to read from.    * @param scan The scan instance with the columns, time range etc.    * @param mapper The mapper class to use.    * @param outputKeyClass The class of the output key.    * @param outputValueClass The class of the output value.    * @param job The current job to adjust. Make sure the passed job is carrying all necessary HBase    *          configuration.    * @param addDependencyJars upload HBase jars and jars for any of the configured job classes via    *          the distributed cache (tmpjars).    * @param tmpRestoreDir a temporary directory to copy the snapshot files into. Current user should    *          have write permissions to this directory, and this should not be a subdirectory of    *          rootdir. After the job is finished, restore directory can be deleted.    * @throws IOException When setting up the details fails.    * @see TableSnapshotInputFormat    */
specifier|public
specifier|static
name|void
name|initTableSnapshotMapperJob
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|,
name|boolean
name|addDependencyJars
parameter_list|,
name|Path
name|tmpRestoreDir
parameter_list|)
throws|throws
name|IOException
block|{
name|TableSnapshotInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
name|snapshotName
argument_list|,
name|tmpRestoreDir
argument_list|)
expr_stmt|;
name|initTableMapperJob
argument_list|(
name|snapshotName
argument_list|,
name|scan
argument_list|,
name|mapper
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|job
argument_list|,
name|addDependencyJars
argument_list|,
literal|false
argument_list|,
name|TableSnapshotInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|resetCacheConfig
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets up the job for reading from a table snapshot. It bypasses hbase servers    * and read directly from snapshot files.    *    * @param snapshotName The name of the snapshot (of a table) to read from.    * @param scan  The scan instance with the columns, time range etc.    * @param mapper  The mapper class to use.    * @param outputKeyClass  The class of the output key.    * @param outputValueClass  The class of the output value.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @param addDependencyJars upload HBase jars and jars for any of the configured    *           job classes via the distributed cache (tmpjars).    *    * @param tmpRestoreDir a temporary directory to copy the snapshot files into. Current user should    * have write permissions to this directory, and this should not be a subdirectory of rootdir.    * After the job is finished, restore directory can be deleted.    * @param splitAlgo algorithm to split    * @param numSplitsPerRegion how many input splits to generate per one region    * @throws IOException When setting up the details fails.    * @see TableSnapshotInputFormat    */
specifier|public
specifier|static
name|void
name|initTableSnapshotMapperJob
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|,
name|boolean
name|addDependencyJars
parameter_list|,
name|Path
name|tmpRestoreDir
parameter_list|,
name|RegionSplitter
operator|.
name|SplitAlgorithm
name|splitAlgo
parameter_list|,
name|int
name|numSplitsPerRegion
parameter_list|)
throws|throws
name|IOException
block|{
name|TableSnapshotInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
name|snapshotName
argument_list|,
name|tmpRestoreDir
argument_list|,
name|splitAlgo
argument_list|,
name|numSplitsPerRegion
argument_list|)
expr_stmt|;
name|initTableMapperJob
argument_list|(
name|snapshotName
argument_list|,
name|scan
argument_list|,
name|mapper
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|job
argument_list|,
name|addDependencyJars
argument_list|,
literal|false
argument_list|,
name|TableSnapshotInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|resetCacheConfig
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a Multi TableMap job. It will appropriately set    * up the job.    *    * @param scans The list of {@link Scan} objects to read from.    * @param mapper The mapper class to use.    * @param outputKeyClass The class of the output key.    * @param outputValueClass The class of the output value.    * @param job The current job to adjust. Make sure the passed job is carrying    *          all necessary HBase configuration.    * @throws IOException When setting up the details fails.    */
specifier|public
specifier|static
name|void
name|initTableMapperJob
parameter_list|(
name|List
argument_list|<
name|Scan
argument_list|>
name|scans
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableMapperJob
argument_list|(
name|scans
argument_list|,
name|mapper
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|job
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a Multi TableMap job. It will appropriately set    * up the job.    *    * @param scans The list of {@link Scan} objects to read from.    * @param mapper The mapper class to use.    * @param outputKeyClass The class of the output key.    * @param outputValueClass The class of the output value.    * @param job The current job to adjust. Make sure the passed job is carrying    *          all necessary HBase configuration.    * @param addDependencyJars upload HBase jars and jars for any of the    *          configured job classes via the distributed cache (tmpjars).    * @throws IOException When setting up the details fails.    */
specifier|public
specifier|static
name|void
name|initTableMapperJob
parameter_list|(
name|List
argument_list|<
name|Scan
argument_list|>
name|scans
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|,
name|boolean
name|addDependencyJars
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableMapperJob
argument_list|(
name|scans
argument_list|,
name|mapper
argument_list|,
name|outputKeyClass
argument_list|,
name|outputValueClass
argument_list|,
name|job
argument_list|,
name|addDependencyJars
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a Multi TableMap job. It will appropriately set    * up the job.    *    * @param scans The list of {@link Scan} objects to read from.    * @param mapper The mapper class to use.    * @param outputKeyClass The class of the output key.    * @param outputValueClass The class of the output value.    * @param job The current job to adjust. Make sure the passed job is carrying    *          all necessary HBase configuration.    * @param addDependencyJars upload HBase jars and jars for any of the    *          configured job classes via the distributed cache (tmpjars).    * @param initCredentials whether to initialize hbase auth credentials for the job    * @throws IOException When setting up the details fails.    */
specifier|public
specifier|static
name|void
name|initTableMapperJob
parameter_list|(
name|List
argument_list|<
name|Scan
argument_list|>
name|scans
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableMapper
argument_list|>
name|mapper
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputKeyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|outputValueClass
parameter_list|,
name|Job
name|job
parameter_list|,
name|boolean
name|addDependencyJars
parameter_list|,
name|boolean
name|initCredentials
parameter_list|)
throws|throws
name|IOException
block|{
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|MultiTableInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputValueClass
operator|!=
literal|null
condition|)
block|{
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|outputValueClass
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outputKeyClass
operator|!=
literal|null
condition|)
block|{
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|outputKeyClass
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|setMapperClass
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|HBaseConfiguration
operator|.
name|merge
argument_list|(
name|conf
argument_list|,
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|scanStrings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Scan
name|scan
range|:
name|scans
control|)
block|{
name|scanStrings
operator|.
name|add
argument_list|(
name|convertScanToString
argument_list|(
name|scan
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setStrings
argument_list|(
name|MultiTableInputFormat
operator|.
name|SCANS
argument_list|,
name|scanStrings
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|scanStrings
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|addDependencyJars
condition|)
block|{
name|addDependencyJars
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|initCredentials
condition|)
block|{
name|initCredentials
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|initCredentials
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|UserProvider
name|userProvider
init|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userProvider
operator|.
name|isHadoopSecurityEnabled
argument_list|()
condition|)
block|{
comment|// propagate delegation related props from launcher job to MR job
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
literal|"HADOOP_TOKEN_FILE_LOCATION"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"mapreduce.job.credentials.binary"
argument_list|,
name|System
operator|.
name|getenv
argument_list|(
literal|"HADOOP_TOKEN_FILE_LOCATION"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|userProvider
operator|.
name|isHBaseSecurityEnabled
argument_list|()
condition|)
block|{
try|try
block|{
comment|// init credentials for remote cluster
name|String
name|quorumAddress
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|TableOutputFormat
operator|.
name|QUORUM_ADDRESS
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|userProvider
operator|.
name|getCurrent
argument_list|()
decl_stmt|;
if|if
condition|(
name|quorumAddress
operator|!=
literal|null
condition|)
block|{
name|Configuration
name|peerConf
init|=
name|HBaseConfiguration
operator|.
name|createClusterConf
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|quorumAddress
argument_list|,
name|TableOutputFormat
operator|.
name|OUTPUT_CONF_PREFIX
argument_list|)
decl_stmt|;
name|Connection
name|peerConn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|peerConf
argument_list|)
decl_stmt|;
try|try
block|{
name|TokenUtil
operator|.
name|addTokenForJob
argument_list|(
name|peerConn
argument_list|,
name|user
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|peerConn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|TokenUtil
operator|.
name|addTokenForJob
argument_list|(
name|conn
argument_list|,
name|user
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted obtaining user authentication token"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Obtain an authentication token, for the specified cluster, on behalf of the current user    * and add it to the credentials for the given map reduce job.    *    * The quorumAddress is the key to the ZK ensemble, which contains:    * hbase.zookeeper.quorum, hbase.zookeeper.client.port and    * zookeeper.znode.parent    *    * @param job The job that requires the permission.    * @param quorumAddress string that contains the 3 required configuratins    * @throws IOException When the authentication token cannot be obtained.    * @deprecated Since 1.2.0, use {@link #initCredentialsForCluster(Job, Configuration)} instead.    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|void
name|initCredentialsForCluster
parameter_list|(
name|Job
name|job
parameter_list|,
name|String
name|quorumAddress
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|peerConf
init|=
name|HBaseConfiguration
operator|.
name|createClusterConf
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|quorumAddress
argument_list|)
decl_stmt|;
name|initCredentialsForCluster
argument_list|(
name|job
argument_list|,
name|peerConf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Obtain an authentication token, for the specified cluster, on behalf of the current user    * and add it to the credentials for the given map reduce job.    *    * @param job The job that requires the permission.    * @param conf The configuration to use in connecting to the peer cluster    * @throws IOException When the authentication token cannot be obtained.    */
specifier|public
specifier|static
name|void
name|initCredentialsForCluster
parameter_list|(
name|Job
name|job
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|UserProvider
name|userProvider
init|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userProvider
operator|.
name|isHBaseSecurityEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|Connection
name|peerConn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|TokenUtil
operator|.
name|addTokenForJob
argument_list|(
name|peerConn
argument_list|,
name|userProvider
operator|.
name|getCurrent
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|peerConn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted obtaining user authentication token"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Writes the given scan into a Base64 encoded string.    *    * @param scan  The scan to write out.    * @return The scan saved in a Base64 encoded string.    * @throws IOException When writing the scan fails.    */
specifier|public
specifier|static
name|String
name|convertScanToString
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientProtos
operator|.
name|Scan
name|proto
init|=
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|scan
argument_list|)
decl_stmt|;
return|return
name|Base64
operator|.
name|encodeBytes
argument_list|(
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Converts the given Base64 string back into a Scan instance.    *    * @param base64  The scan details.    * @return The newly created Scan instance.    * @throws IOException When reading the scan instance fails.    */
specifier|public
specifier|static
name|Scan
name|convertStringToScan
parameter_list|(
name|String
name|base64
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|decoded
init|=
name|Base64
operator|.
name|decode
argument_list|(
name|base64
argument_list|)
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|ClientProtos
operator|.
name|Scan
operator|.
name|parseFrom
argument_list|(
name|decoded
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Use this before submitting a TableReduce job. It will    * appropriately set up the JobConf.    *    * @param table  The output table.    * @param reducer  The reducer class to use.    * @param job  The current job to adjust.    * @throws IOException When determining the region count fails.    */
specifier|public
specifier|static
name|void
name|initTableReducerJob
parameter_list|(
name|String
name|table
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableReducer
argument_list|>
name|reducer
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableReducerJob
argument_list|(
name|table
argument_list|,
name|reducer
argument_list|,
name|job
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a TableReduce job. It will    * appropriately set up the JobConf.    *    * @param table  The output table.    * @param reducer  The reducer class to use.    * @param job  The current job to adjust.    * @param partitioner  Partitioner to use. Pass<code>null</code> to use    * default partitioner.    * @throws IOException When determining the region count fails.    */
specifier|public
specifier|static
name|void
name|initTableReducerJob
parameter_list|(
name|String
name|table
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableReducer
argument_list|>
name|reducer
parameter_list|,
name|Job
name|job
parameter_list|,
name|Class
name|partitioner
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableReducerJob
argument_list|(
name|table
argument_list|,
name|reducer
argument_list|,
name|job
argument_list|,
name|partitioner
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a TableReduce job. It will    * appropriately set up the JobConf.    *    * @param table  The output table.    * @param reducer  The reducer class to use.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @param partitioner  Partitioner to use. Pass<code>null</code> to use    * default partitioner.    * @param quorumAddress Distant cluster to write to; default is null for    * output to the cluster that is designated in<code>hbase-site.xml</code>.    * Set this String to the zookeeper ensemble of an alternate remote cluster    * when you would have the reduce write a cluster that is other than the    * default; e.g. copying tables between clusters, the source would be    * designated by<code>hbase-site.xml</code> and this param would have the    * ensemble address of the remote cluster.  The format to pass is particular.    * Pass<code>&lt;hbase.zookeeper.quorum&gt;:&lt;    *             hbase.zookeeper.client.port&gt;:&lt;zookeeper.znode.parent&gt;    *</code> such as<code>server,server2,server3:2181:/hbase</code>.    * @param serverClass redefined hbase.regionserver.class    * @param serverImpl redefined hbase.regionserver.impl    * @throws IOException When determining the region count fails.    */
specifier|public
specifier|static
name|void
name|initTableReducerJob
parameter_list|(
name|String
name|table
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableReducer
argument_list|>
name|reducer
parameter_list|,
name|Job
name|job
parameter_list|,
name|Class
name|partitioner
parameter_list|,
name|String
name|quorumAddress
parameter_list|,
name|String
name|serverClass
parameter_list|,
name|String
name|serverImpl
parameter_list|)
throws|throws
name|IOException
block|{
name|initTableReducerJob
argument_list|(
name|table
argument_list|,
name|reducer
argument_list|,
name|job
argument_list|,
name|partitioner
argument_list|,
name|quorumAddress
argument_list|,
name|serverClass
argument_list|,
name|serverImpl
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use this before submitting a TableReduce job. It will    * appropriately set up the JobConf.    *    * @param table  The output table.    * @param reducer  The reducer class to use.    * @param job  The current job to adjust.  Make sure the passed job is    * carrying all necessary HBase configuration.    * @param partitioner  Partitioner to use. Pass<code>null</code> to use    * default partitioner.    * @param quorumAddress Distant cluster to write to; default is null for    * output to the cluster that is designated in<code>hbase-site.xml</code>.    * Set this String to the zookeeper ensemble of an alternate remote cluster    * when you would have the reduce write a cluster that is other than the    * default; e.g. copying tables between clusters, the source would be    * designated by<code>hbase-site.xml</code> and this param would have the    * ensemble address of the remote cluster.  The format to pass is particular.    * Pass<code>&lt;hbase.zookeeper.quorum&gt;:&lt;    *             hbase.zookeeper.client.port&gt;:&lt;zookeeper.znode.parent&gt;    *</code> such as<code>server,server2,server3:2181:/hbase</code>.    * @param serverClass redefined hbase.regionserver.class    * @param serverImpl redefined hbase.regionserver.impl    * @param addDependencyJars upload HBase jars and jars for any of the configured    *           job classes via the distributed cache (tmpjars).    * @throws IOException When determining the region count fails.    */
specifier|public
specifier|static
name|void
name|initTableReducerJob
parameter_list|(
name|String
name|table
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|TableReducer
argument_list|>
name|reducer
parameter_list|,
name|Job
name|job
parameter_list|,
name|Class
name|partitioner
parameter_list|,
name|String
name|quorumAddress
parameter_list|,
name|String
name|serverClass
parameter_list|,
name|String
name|serverImpl
parameter_list|,
name|boolean
name|addDependencyJars
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|HBaseConfiguration
operator|.
name|merge
argument_list|(
name|conf
argument_list|,
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|TableOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|reducer
operator|!=
literal|null
condition|)
name|job
operator|.
name|setReducerClass
argument_list|(
name|reducer
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableOutputFormat
operator|.
name|OUTPUT_TABLE
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
literal|"io.serializations"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"io.serializations"
argument_list|)
argument_list|,
name|MutationSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ResultSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// If passed a quorum/ensemble address, pass it on to TableOutputFormat.
if|if
condition|(
name|quorumAddress
operator|!=
literal|null
condition|)
block|{
comment|// Calling this will validate the format
name|ZKConfig
operator|.
name|validateClusterKey
argument_list|(
name|quorumAddress
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableOutputFormat
operator|.
name|QUORUM_ADDRESS
argument_list|,
name|quorumAddress
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serverClass
operator|!=
literal|null
operator|&&
name|serverImpl
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|TableOutputFormat
operator|.
name|REGION_SERVER_CLASS
argument_list|,
name|serverClass
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableOutputFormat
operator|.
name|REGION_SERVER_IMPL
argument_list|,
name|serverImpl
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Writable
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|partitioner
operator|==
name|HRegionPartitioner
operator|.
name|class
condition|)
block|{
name|job
operator|.
name|setPartitionerClass
argument_list|(
name|HRegionPartitioner
operator|.
name|class
argument_list|)
expr_stmt|;
name|int
name|regions
init|=
name|MetaTableAccessor
operator|.
name|getRegionCount
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|job
operator|.
name|getNumReduceTasks
argument_list|()
operator|>
name|regions
condition|)
block|{
name|job
operator|.
name|setNumReduceTasks
argument_list|(
name|regions
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|partitioner
operator|!=
literal|null
condition|)
block|{
name|job
operator|.
name|setPartitionerClass
argument_list|(
name|partitioner
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|addDependencyJars
condition|)
block|{
name|addDependencyJars
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
name|initCredentials
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensures that the given number of reduce tasks for the given job    * configuration does not exceed the number of regions for the given table.    *    * @param table  The table to get the region count for.    * @param job  The current job to adjust.    * @throws IOException When retrieving the table details fails.    */
specifier|public
specifier|static
name|void
name|limitNumReduceTasks
parameter_list|(
name|String
name|table
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|regions
init|=
name|MetaTableAccessor
operator|.
name|getRegionCount
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|job
operator|.
name|getNumReduceTasks
argument_list|()
operator|>
name|regions
condition|)
name|job
operator|.
name|setNumReduceTasks
argument_list|(
name|regions
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the number of reduce tasks for the given job configuration to the    * number of regions the given table has.    *    * @param table  The table to get the region count for.    * @param job  The current job to adjust.    * @throws IOException When retrieving the table details fails.    */
specifier|public
specifier|static
name|void
name|setNumReduceTasks
parameter_list|(
name|String
name|table
parameter_list|,
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|job
operator|.
name|setNumReduceTasks
argument_list|(
name|MetaTableAccessor
operator|.
name|getRegionCount
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the number of rows to return and cache with each scanner iteration.    * Higher caching values will enable faster mapreduce jobs at the expense of    * requiring more heap to contain the cached rows.    *    * @param job The current job to adjust.    * @param batchSize The number of rows to return in batch with each scanner    * iteration.    */
specifier|public
specifier|static
name|void
name|setScannerCaching
parameter_list|(
name|Job
name|job
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.client.scanner.caching"
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add HBase and its dependencies (only) to the job configuration.    *<p>    * This is intended as a low-level API, facilitating code reuse between this    * class and its mapred counterpart. It also of use to external tools that    * need to build a MapReduce job that interacts with HBase but want    * fine-grained control over the jars shipped to the cluster.    *</p>    * @param conf The Configuration object to extend with dependencies.    * @see org.apache.hadoop.hbase.mapred.TableMapReduceUtil    * @see<a href="https://issues.apache.org/jira/browse/PIG-3285">PIG-3285</a>    */
specifier|public
specifier|static
name|void
name|addHBaseDependencyJars
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|addDependencyJarsForClasses
argument_list|(
name|conf
argument_list|,
comment|// explicitly pull a class from each module
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|class
argument_list|,
comment|// hbase-common
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|class
argument_list|,
comment|// hbase-protocol
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|class
argument_list|,
comment|// hbase-protocol-shaded
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
operator|.
name|class
argument_list|,
comment|// hbase-client
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
operator|.
name|class
argument_list|,
comment|// hbase-server
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompatibilityFactory
operator|.
name|class
argument_list|,
comment|// hbase-hadoop-compat
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|JobUtil
operator|.
name|class
argument_list|,
comment|// hbase-hadoop2-compat
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableMapper
operator|.
name|class
argument_list|,
comment|// hbase-mapreduce
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|impl
operator|.
name|FastLongHistogram
operator|.
name|class
argument_list|,
comment|// hbase-metrics
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Snapshot
operator|.
name|class
argument_list|,
comment|// hbase-metrics-api
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
operator|.
name|class
argument_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnsafeByteOperations
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|Tracer
operator|.
name|class
argument_list|,
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
operator|.
name|class
argument_list|,
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
operator|.
name|class
argument_list|,
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|Versioned
operator|.
name|class
argument_list|,
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonView
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a classpath string built from the content of the "tmpjars" value in {@code conf}.    * Also exposed to shell scripts via `bin/hbase mapredcp`.    */
specifier|public
specifier|static
name|String
name|buildDependencyClasspath
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must provide a configuration object."
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|conf
operator|.
name|getStringCollection
argument_list|(
literal|"tmpjars"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Configuration contains no tmpjars."
argument_list|)
throw|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|paths
control|)
block|{
comment|// entries can take the form 'file:/path/to/file.jar'.
name|int
name|idx
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Add the HBase dependency jars as well as jars for any of the configured    * job classes to the job configuration, so that JobClient will ship them    * to the cluster and add them to the DistributedCache.    */
specifier|public
specifier|static
name|void
name|addDependencyJars
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|addHBaseDependencyJars
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|addDependencyJarsForClasses
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
comment|// when making changes here, consider also mapred.TableMapReduceUtil
comment|// pull job classes
name|job
operator|.
name|getMapOutputKeyClass
argument_list|()
argument_list|,
name|job
operator|.
name|getMapOutputValueClass
argument_list|()
argument_list|,
name|job
operator|.
name|getInputFormatClass
argument_list|()
argument_list|,
name|job
operator|.
name|getOutputKeyClass
argument_list|()
argument_list|,
name|job
operator|.
name|getOutputValueClass
argument_list|()
argument_list|,
name|job
operator|.
name|getOutputFormatClass
argument_list|()
argument_list|,
name|job
operator|.
name|getPartitionerClass
argument_list|()
argument_list|,
name|job
operator|.
name|getCombinerClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Add the jars containing the given classes to the job's configuration    * such that JobClient will ship them to the cluster and add them to    * the DistributedCache.    * @deprecated rely on {@link #addDependencyJars(Job)} instead.    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|void
name|addDependencyJars
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|classes
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The addDependencyJars(Configuration, Class<?>...) method has been deprecated since it"
operator|+
literal|" is easy to use incorrectly. Most users should rely on addDependencyJars(Job) "
operator|+
literal|"instead. See HBASE-8386 for more details."
argument_list|)
expr_stmt|;
name|addDependencyJarsForClasses
argument_list|(
name|conf
argument_list|,
name|classes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add the jars containing the given classes to the job's configuration    * such that JobClient will ship them to the cluster and add them to    * the DistributedCache.    *    * N.B. that this method at most adds one jar per class given. If there is more than one    * jar available containing a class with the same name as a given class, we don't define    * which of those jars might be chosen.    *    * @param conf The Hadoop Configuration to modify    * @param classes will add just those dependencies needed to find the given classes    * @throws IOException if an underlying library call fails.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
name|void
name|addDependencyJarsForClasses
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|classes
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|jars
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add jars that are already in the tmpjars variable
name|jars
operator|.
name|addAll
argument_list|(
name|conf
operator|.
name|getStringCollection
argument_list|(
literal|"tmpjars"
argument_list|)
argument_list|)
expr_stmt|;
comment|// add jars as we find them to a map of contents jar name so that we can avoid
comment|// creating new jars for classes that have already been packaged.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|packagedClasses
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add jars containing the specified classes
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|classes
control|)
block|{
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
continue|continue;
name|Path
name|path
init|=
name|findOrCreateJar
argument_list|(
name|clazz
argument_list|,
name|localFs
argument_list|,
name|packagedClasses
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find jar for class "
operator|+
name|clazz
operator|+
literal|" in order to ship it to the cluster."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|localFs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not validate jar file "
operator|+
name|path
operator|+
literal|" for class "
operator|+
name|clazz
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|jars
operator|.
name|add
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jars
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|conf
operator|.
name|set
argument_list|(
literal|"tmpjars"
argument_list|,
name|StringUtils
operator|.
name|arrayToString
argument_list|(
name|jars
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|jars
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Finds the Jar for a class or creates it if it doesn't exist. If the class is in    * a directory in the classpath, it creates a Jar on the fly with the    * contents of the directory and returns the path to that Jar. If a Jar is    * created, it is created in the system temporary directory. Otherwise,    * returns an existing jar that contains a class of the same name. Maintains    * a mapping from jar contents to the tmp jar created.    * @param my_class the class to find.    * @param fs the FileSystem with which to qualify the returned path.    * @param packagedClasses a map of class name to path.    * @return a jar file that contains the class.    * @throws IOException    */
specifier|private
specifier|static
name|Path
name|findOrCreateJar
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|my_class
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|packagedClasses
parameter_list|)
throws|throws
name|IOException
block|{
comment|// attempt to locate an existing jar for the class.
name|String
name|jar
init|=
name|findContainingJar
argument_list|(
name|my_class
argument_list|,
name|packagedClasses
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|jar
operator|||
name|jar
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jar
operator|=
name|getJar
argument_list|(
name|my_class
argument_list|)
expr_stmt|;
name|updateMap
argument_list|(
name|jar
argument_list|,
name|packagedClasses
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|jar
operator|||
name|jar
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"For class %s, using jar %s"
argument_list|,
name|my_class
operator|.
name|getName
argument_list|()
argument_list|,
name|jar
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|jar
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Add entries to<code>packagedClasses</code> corresponding to class files    * contained in<code>jar</code>.    * @param jar The jar who's content to list.    * @param packagedClasses map[class -> jar]    */
specifier|private
specifier|static
name|void
name|updateMap
parameter_list|(
name|String
name|jar
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|packagedClasses
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|jar
operator|||
name|jar
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|ZipFile
name|zip
init|=
literal|null
decl_stmt|;
try|try
block|{
name|zip
operator|=
operator|new
name|ZipFile
argument_list|(
name|jar
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|?
extends|extends
name|ZipEntry
argument_list|>
name|iter
init|=
name|zip
operator|.
name|entries
argument_list|()
init|;
name|iter
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ZipEntry
name|entry
init|=
name|iter
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"class"
argument_list|)
condition|)
block|{
name|packagedClasses
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|jar
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|zip
condition|)
name|zip
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Find a jar that contains a class of the same name, if any. It will return    * a jar file, even if that is not the first thing on the class path that    * has a class with the same name. Looks first on the classpath and then in    * the<code>packagedClasses</code> map.    * @param my_class the class to find.    * @return a jar file that contains the class, or null.    * @throws IOException    */
specifier|private
specifier|static
name|String
name|findContainingJar
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|my_class
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|packagedClasses
parameter_list|)
throws|throws
name|IOException
block|{
name|ClassLoader
name|loader
init|=
name|my_class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|String
name|class_file
init|=
name|my_class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|".class"
decl_stmt|;
if|if
condition|(
name|loader
operator|!=
literal|null
condition|)
block|{
comment|// first search the classpath
for|for
control|(
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|itr
init|=
name|loader
operator|.
name|getResources
argument_list|(
name|class_file
argument_list|)
init|;
name|itr
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|URL
name|url
init|=
name|itr
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"jar"
operator|.
name|equals
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|toReturn
init|=
name|url
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|toReturn
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|toReturn
operator|=
name|toReturn
operator|.
name|substring
argument_list|(
literal|"file:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// URLDecoder is a misnamed class, since it actually decodes
comment|// x-www-form-urlencoded MIME type rather than actual
comment|// URL encoding (which the file path has). Therefore it would
comment|// decode +s to ' 's which is incorrect (spaces are actually
comment|// either unencoded or encoded as "%20"). Replace +s first, so
comment|// that they are kept sacred during the decoding process.
name|toReturn
operator|=
name|toReturn
operator|.
name|replaceAll
argument_list|(
literal|"\\+"
argument_list|,
literal|"%2B"
argument_list|)
expr_stmt|;
name|toReturn
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|toReturn
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
return|return
name|toReturn
operator|.
name|replaceAll
argument_list|(
literal|"!.*$"
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
block|}
comment|// now look in any jars we've packaged using JarFinder. Returns null when
comment|// no jar is found.
return|return
name|packagedClasses
operator|.
name|get
argument_list|(
name|class_file
argument_list|)
return|;
block|}
comment|/**    * Invoke 'getJar' on a custom JarFinder implementation. Useful for some job    * configuration contexts (HBASE-8140) and also for testing on MRv2.    * check if we have HADOOP-9426.    * @param my_class the class to find.    * @return a jar file that contains the class, or null.    */
specifier|private
specifier|static
name|String
name|getJar
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|my_class
parameter_list|)
block|{
name|String
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|JarFinder
operator|.
name|getJar
argument_list|(
name|my_class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// toss all other exceptions, related to reflection failure
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"getJar invocation failed."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

