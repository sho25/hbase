begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreFile
operator|.
name|BULKLOAD_TASK_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreFile
operator|.
name|BULKLOAD_TIME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreFile
operator|.
name|EXCLUDE_FROM_MINOR_COMPACTION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreFile
operator|.
name|MAJOR_COMPACTION_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|fs
operator|.
name|HFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileWriterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|BloomFilterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|MapReduceExtendedCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|partition
operator|.
name|TotalOrderPartitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Writes HFiles. Passed Cells must arrive in order.  * Writes current time as the sequence id for the file. Sets the major compacted  * attribute on created @{link {@link HFile}s. Calling write(null,null) will forcibly roll  * all HFiles being written.  *<p>  * Using this class as part of a MapReduce job is best done  * using {@link #configureIncrementalLoad(Job, TableDescriptor, RegionLocator)}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|HFileOutputFormat2
extends|extends
name|FileOutputFormat
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Cell
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HFileOutputFormat2
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
class|class
name|TableInfo
block|{
specifier|private
name|TableDescriptor
name|tableDesctiptor
decl_stmt|;
specifier|private
name|RegionLocator
name|regionLocator
decl_stmt|;
specifier|public
name|TableInfo
parameter_list|(
name|TableDescriptor
name|tableDesctiptor
parameter_list|,
name|RegionLocator
name|regionLocator
parameter_list|)
block|{
name|this
operator|.
name|tableDesctiptor
operator|=
name|tableDesctiptor
expr_stmt|;
name|this
operator|.
name|regionLocator
operator|=
name|regionLocator
expr_stmt|;
block|}
specifier|public
name|TableDescriptor
name|getTableDescriptor
parameter_list|()
block|{
return|return
name|tableDesctiptor
return|;
block|}
specifier|public
name|RegionLocator
name|getRegionLocator
parameter_list|()
block|{
return|return
name|regionLocator
return|;
block|}
block|}
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|tableSeparator
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|byte
index|[]
name|combineTableNameSuffix
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|suffix
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|add
argument_list|(
name|tableName
argument_list|,
name|tableSeparator
argument_list|,
name|suffix
argument_list|)
return|;
block|}
comment|// The following constants are private since these are used by
comment|// HFileOutputFormat2 to internally transfer data between job setup and
comment|// reducer run using conf.
comment|// These should not be changed by the client.
specifier|static
specifier|final
name|String
name|COMPRESSION_FAMILIES_CONF_KEY
init|=
literal|"hbase.hfileoutputformat.families.compression"
decl_stmt|;
specifier|static
specifier|final
name|String
name|BLOOM_TYPE_FAMILIES_CONF_KEY
init|=
literal|"hbase.hfileoutputformat.families.bloomtype"
decl_stmt|;
specifier|static
specifier|final
name|String
name|BLOOM_PARAM_FAMILIES_CONF_KEY
init|=
literal|"hbase.hfileoutputformat.families.bloomparam"
decl_stmt|;
specifier|static
specifier|final
name|String
name|BLOCK_SIZE_FAMILIES_CONF_KEY
init|=
literal|"hbase.mapreduce.hfileoutputformat.blocksize"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DATABLOCK_ENCODING_FAMILIES_CONF_KEY
init|=
literal|"hbase.mapreduce.hfileoutputformat.families.datablock.encoding"
decl_stmt|;
comment|// This constant is public since the client can modify this when setting
comment|// up their conf object and thus refer to this symbol.
comment|// It is present for backwards compatibility reasons. Use it only to
comment|// override the auto-detection of datablock encoding and compression.
specifier|public
specifier|static
specifier|final
name|String
name|DATABLOCK_ENCODING_OVERRIDE_CONF_KEY
init|=
literal|"hbase.mapreduce.hfileoutputformat.datablock.encoding"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMPRESSION_OVERRIDE_CONF_KEY
init|=
literal|"hbase.mapreduce.hfileoutputformat.compression"
decl_stmt|;
comment|/**    * Keep locality while generating HFiles for bulkload. See HBASE-12596    */
specifier|public
specifier|static
specifier|final
name|String
name|LOCALITY_SENSITIVE_CONF_KEY
init|=
literal|"hbase.bulkload.locality.sensitive.enabled"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|DEFAULT_LOCALITY_SENSITIVE
init|=
literal|true
decl_stmt|;
specifier|static
specifier|final
name|String
name|OUTPUT_TABLE_NAME_CONF_KEY
init|=
literal|"hbase.mapreduce.hfileoutputformat.table.name"
decl_stmt|;
specifier|static
specifier|final
name|String
name|MULTI_TABLE_HFILEOUTPUTFORMAT_CONF_KEY
init|=
literal|"hbase.mapreduce.use.multi.table.hfileoutputformat"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STORAGE_POLICY_PROPERTY
init|=
name|HStore
operator|.
name|BLOCK_STORAGE_POLICY_KEY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STORAGE_POLICY_PROPERTY_CF_PREFIX
init|=
name|STORAGE_POLICY_PROPERTY
operator|+
literal|"."
decl_stmt|;
annotation|@
name|Override
specifier|public
name|RecordWriter
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Cell
argument_list|>
name|getRecordWriter
parameter_list|(
specifier|final
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|createRecordWriter
argument_list|(
name|context
argument_list|,
name|this
operator|.
name|getOutputCommitter
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|byte
index|[]
name|getTableNameSuffixedWithFamily
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|)
block|{
return|return
name|combineTableNameSuffix
argument_list|(
name|tableName
argument_list|,
name|family
argument_list|)
return|;
block|}
specifier|static
parameter_list|<
name|V
extends|extends
name|Cell
parameter_list|>
name|RecordWriter
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|V
argument_list|>
name|createRecordWriter
parameter_list|(
specifier|final
name|TaskAttemptContext
name|context
parameter_list|,
specifier|final
name|OutputCommitter
name|committer
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the path of the temporary output file
specifier|final
name|Path
name|outputDir
init|=
operator|(
operator|(
name|FileOutputCommitter
operator|)
name|committer
operator|)
operator|.
name|getWorkPath
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|writeMultipleTables
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MULTI_TABLE_HFILEOUTPUTFORMAT_CONF_KEY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|String
name|writeTableNames
init|=
name|conf
operator|.
name|get
argument_list|(
name|OUTPUT_TABLE_NAME_CONF_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeTableNames
operator|==
literal|null
operator|||
name|writeTableNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Configuration parameter "
operator|+
name|OUTPUT_TABLE_NAME_CONF_KEY
operator|+
literal|" cannot be empty"
argument_list|)
throw|;
block|}
specifier|final
name|FileSystem
name|fs
init|=
name|outputDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// These configs. are from hbase-*.xml
specifier|final
name|long
name|maxsize
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MAX_FILESIZE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_MAX_FILE_SIZE
argument_list|)
decl_stmt|;
comment|// Invented config.  Add to hbase-*.xml if other than default compression.
specifier|final
name|String
name|defaultCompressionStr
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hfile.compression"
argument_list|,
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Algorithm
name|defaultCompression
init|=
name|HFileWriterImpl
operator|.
name|compressionByName
argument_list|(
name|defaultCompressionStr
argument_list|)
decl_stmt|;
name|String
name|compressionStr
init|=
name|conf
operator|.
name|get
argument_list|(
name|COMPRESSION_OVERRIDE_CONF_KEY
argument_list|)
decl_stmt|;
specifier|final
name|Algorithm
name|overriddenCompression
decl_stmt|;
if|if
condition|(
name|compressionStr
operator|!=
literal|null
condition|)
block|{
name|overriddenCompression
operator|=
name|Compression
operator|.
name|getCompressionAlgorithmByName
argument_list|(
name|compressionStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|overriddenCompression
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|boolean
name|compactionExclude
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.mapreduce.hfileoutputformat.compaction.exclude"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|allTableNames
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|writeTableNames
operator|.
name|split
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tableSeparator
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
comment|// create a map from column family to the compression algorithm
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Algorithm
argument_list|>
name|compressionMap
init|=
name|createFamilyCompressionMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|BloomType
argument_list|>
name|bloomTypeMap
init|=
name|createFamilyBloomTypeMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|bloomParamMap
init|=
name|createFamilyBloomParamMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|blockSizeMap
init|=
name|createFamilyBlockSizeMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|dataBlockEncodingStr
init|=
name|conf
operator|.
name|get
argument_list|(
name|DATABLOCK_ENCODING_OVERRIDE_CONF_KEY
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|DataBlockEncoding
argument_list|>
name|datablockEncodingMap
init|=
name|createFamilyDataBlockEncodingMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|DataBlockEncoding
name|overriddenEncoding
decl_stmt|;
if|if
condition|(
name|dataBlockEncodingStr
operator|!=
literal|null
condition|)
block|{
name|overriddenEncoding
operator|=
name|DataBlockEncoding
operator|.
name|valueOf
argument_list|(
name|dataBlockEncodingStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|overriddenEncoding
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|new
name|RecordWriter
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
comment|// Map of families to writers and how much has been output on the writer.
specifier|private
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|WriterLength
argument_list|>
name|writers
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|previousRow
init|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
decl_stmt|;
specifier|private
specifier|final
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|rollRequested
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|ImmutableBytesWritable
name|row
parameter_list|,
name|V
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
name|Cell
name|kv
init|=
name|cell
decl_stmt|;
comment|// null input == user explicitly wants to flush
if|if
condition|(
name|row
operator|==
literal|null
operator|&&
name|kv
operator|==
literal|null
condition|)
block|{
name|rollWriters
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|byte
index|[]
name|rowKey
init|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|kv
argument_list|)
decl_stmt|;
name|int
name|length
init|=
operator|(
name|PrivateCellUtil
operator|.
name|estimatedSerializedSizeOf
argument_list|(
name|kv
argument_list|)
operator|)
operator|-
name|Bytes
operator|.
name|SIZEOF_INT
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tableNameBytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|writeMultipleTables
condition|)
block|{
name|tableNameBytes
operator|=
name|MultiTableHFileOutputFormat
operator|.
name|getTableName
argument_list|(
name|row
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|tableNameBytes
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableNameBytes
argument_list|)
operator|.
name|getNameWithNamespaceInclAsString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|allTableNames
operator|.
name|contains
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|tableNameBytes
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"TableName '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableNameBytes
argument_list|)
operator|+
literal|"' not"
operator|+
literal|" expected"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|tableNameBytes
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|writeTableNames
argument_list|)
expr_stmt|;
block|}
name|String
name|tableName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|tableNameBytes
argument_list|)
decl_stmt|;
name|Path
name|tableRelPath
init|=
name|getTableRelativePath
argument_list|(
name|tableNameBytes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tableAndFamily
init|=
name|getTableNameSuffixedWithFamily
argument_list|(
name|tableNameBytes
argument_list|,
name|family
argument_list|)
decl_stmt|;
name|WriterLength
name|wl
init|=
name|this
operator|.
name|writers
operator|.
name|get
argument_list|(
name|tableAndFamily
argument_list|)
decl_stmt|;
comment|// If this is a new column family, verify that the directory exists
if|if
condition|(
name|wl
operator|==
literal|null
condition|)
block|{
name|Path
name|writerPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|writeMultipleTables
condition|)
block|{
name|writerPath
operator|=
operator|new
name|Path
argument_list|(
name|outputDir
argument_list|,
operator|new
name|Path
argument_list|(
name|tableRelPath
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writerPath
operator|=
operator|new
name|Path
argument_list|(
name|outputDir
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|mkdirs
argument_list|(
name|writerPath
argument_list|)
expr_stmt|;
name|configureStoragePolicy
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableAndFamily
argument_list|,
name|writerPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wl
operator|!=
literal|null
operator|&&
name|wl
operator|.
name|written
operator|+
name|length
operator|>=
name|maxsize
condition|)
block|{
name|this
operator|.
name|rollRequested
operator|=
literal|true
expr_stmt|;
block|}
comment|// This can only happen once a row is finished though
if|if
condition|(
name|rollRequested
operator|&&
name|Bytes
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|previousRow
argument_list|,
name|rowKey
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|rollWriters
argument_list|(
name|wl
argument_list|)
expr_stmt|;
block|}
comment|// create a new WAL writer, if necessary
if|if
condition|(
name|wl
operator|==
literal|null
operator|||
name|wl
operator|.
name|writer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|LOCALITY_SENSITIVE_CONF_KEY
argument_list|,
name|DEFAULT_LOCALITY_SENSITIVE
argument_list|)
condition|)
block|{
name|HRegionLocation
name|loc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tableName
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;                      RegionLocator locator =                        connection.getRegionLocator(TableName.valueOf(tableName)
block|)
block|)
block|{
name|loc
operator|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"There's something wrong when locating rowkey: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKey
argument_list|)
operator|+
literal|" for tablename: "
operator|+
name|tableName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|loc
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|==
name|loc
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"failed to get region location, so use default writer for rowkey: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|wl
operator|=
name|getNewWriter
argument_list|(
name|tableNameBytes
argument_list|,
name|family
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"first rowkey: ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKey
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|InetSocketAddress
name|initialIsa
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|loc
operator|.
name|getHostname
argument_list|()
argument_list|,
name|loc
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|initialIsa
operator|.
name|isUnresolved
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"failed to resolve bind address: "
operator|+
name|loc
operator|.
name|getHostname
argument_list|()
operator|+
literal|":"
operator|+
name|loc
operator|.
name|getPort
argument_list|()
operator|+
literal|", so use default writer"
argument_list|)
expr_stmt|;
block|}
name|wl
operator|=
name|getNewWriter
argument_list|(
name|tableNameBytes
argument_list|,
name|family
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"use favored nodes writer: "
operator|+
name|initialIsa
operator|.
name|getHostString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|wl
operator|=
name|getNewWriter
argument_list|(
name|tableNameBytes
argument_list|,
name|family
argument_list|,
name|conf
argument_list|,
operator|new
name|InetSocketAddress
index|[]
block|{
name|initialIsa
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|wl
operator|=
name|getNewWriter
argument_list|(
name|tableNameBytes
argument_list|,
name|family
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we now have the proper WAL writer. full steam ahead
name|PrivateCellUtil
operator|.
name|updateLatestStamp
argument_list|(
name|cell
argument_list|,
name|this
operator|.
name|now
argument_list|)
return|;
name|wl
operator|.
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|wl
operator|.
name|written
operator|+=
name|length
expr_stmt|;
comment|// Copy the row so we know when a row transition.
name|this
operator|.
name|previousRow
operator|=
name|rowKey
expr_stmt|;
block|}
specifier|private
name|Path
name|getTableRelativePath
parameter_list|(
name|byte
index|[]
name|tableNameBytes
parameter_list|)
block|{
name|String
name|tableName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|tableNameBytes
argument_list|)
decl_stmt|;
name|String
index|[]
name|tableNameParts
init|=
name|tableName
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|Path
name|tableRelPath
init|=
operator|new
name|Path
argument_list|(
name|tableName
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableNameParts
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|tableRelPath
operator|=
operator|new
name|Path
argument_list|(
name|tableRelPath
argument_list|,
name|tableName
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|tableRelPath
return|;
block|}
specifier|private
name|void
name|rollWriters
parameter_list|(
name|WriterLength
name|writerLength
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writerLength
operator|!=
literal|null
condition|)
block|{
name|closeWriter
argument_list|(
name|writerLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|WriterLength
name|wl
range|:
name|this
operator|.
name|writers
operator|.
name|values
argument_list|()
control|)
block|{
name|closeWriter
argument_list|(
name|wl
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|rollRequested
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|void
name|closeWriter
parameter_list|(
name|WriterLength
name|wl
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|wl
operator|.
name|writer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Writer="
operator|+
name|wl
operator|.
name|writer
operator|.
name|getPath
argument_list|()
operator|+
operator|(
operator|(
name|wl
operator|.
name|written
operator|==
literal|0
operator|)
condition|?
literal|""
else|:
literal|", wrote="
operator|+
name|wl
operator|.
name|written
operator|)
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|wl
operator|.
name|writer
argument_list|)
expr_stmt|;
block|}
name|wl
operator|.
name|writer
operator|=
literal|null
expr_stmt|;
name|wl
operator|.
name|written
operator|=
literal|0
expr_stmt|;
block|}
comment|/*        * Create a new StoreFile.Writer.        * @param family        * @return A WriterLength, containing a new StoreFile.Writer.        * @throws IOException        */
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"BX_UNBOXING_IMMEDIATELY_REBOXED"
argument_list|,
name|justification
operator|=
literal|"Not important"
argument_list|)
specifier|private
name|WriterLength
name|getNewWriter
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|InetSocketAddress
index|[]
name|favoredNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableAndFamily
init|=
name|getTableNameSuffixedWithFamily
argument_list|(
name|tableName
argument_list|,
name|family
argument_list|)
decl_stmt|;
name|Path
name|familydir
init|=
operator|new
name|Path
argument_list|(
name|outputDir
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeMultipleTables
condition|)
block|{
name|familydir
operator|=
operator|new
name|Path
argument_list|(
name|outputDir
argument_list|,
operator|new
name|Path
argument_list|(
name|getTableRelativePath
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|WriterLength
name|wl
init|=
operator|new
name|WriterLength
argument_list|()
decl_stmt|;
name|Algorithm
name|compression
init|=
name|overriddenCompression
decl_stmt|;
name|compression
operator|=
name|compression
operator|==
literal|null
condition|?
name|compressionMap
operator|.
name|get
argument_list|(
name|tableAndFamily
argument_list|)
else|:
name|compression
expr_stmt|;
name|compression
operator|=
name|compression
operator|==
literal|null
condition|?
name|defaultCompression
else|:
name|compression
expr_stmt|;
name|BloomType
name|bloomType
init|=
name|bloomTypeMap
operator|.
name|get
argument_list|(
name|tableAndFamily
argument_list|)
decl_stmt|;
name|bloomType
operator|=
name|bloomType
operator|==
literal|null
condition|?
name|BloomType
operator|.
name|NONE
else|:
name|bloomType
expr_stmt|;
name|String
name|bloomParam
init|=
name|bloomParamMap
operator|.
name|get
argument_list|(
name|tableAndFamily
argument_list|)
decl_stmt|;
if|if
condition|(
name|bloomType
operator|==
name|BloomType
operator|.
name|ROWPREFIX_FIXED_LENGTH
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|BloomFilterUtil
operator|.
name|PREFIX_LENGTH_KEY
argument_list|,
name|bloomParam
argument_list|)
expr_stmt|;
block|}
name|Integer
name|blockSize
init|=
name|blockSizeMap
operator|.
name|get
argument_list|(
name|tableAndFamily
argument_list|)
decl_stmt|;
name|blockSize
operator|=
name|blockSize
operator|==
literal|null
condition|?
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
else|:
name|blockSize
expr_stmt|;
name|DataBlockEncoding
name|encoding
init|=
name|overriddenEncoding
decl_stmt|;
name|encoding
operator|=
name|encoding
operator|==
literal|null
condition|?
name|datablockEncodingMap
operator|.
name|get
argument_list|(
name|tableAndFamily
argument_list|)
else|:
name|encoding
expr_stmt|;
name|encoding
operator|=
name|encoding
operator|==
literal|null
condition|?
name|DataBlockEncoding
operator|.
name|NONE
else|:
name|encoding
expr_stmt|;
name|HFileContextBuilder
name|contextBuilder
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withCompression
argument_list|(
name|compression
argument_list|)
operator|.
name|withChecksumType
argument_list|(
name|HStore
operator|.
name|getChecksumType
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|withBytesPerCheckSum
argument_list|(
name|HStore
operator|.
name|getBytesPerChecksum
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|withBlockSize
argument_list|(
name|blockSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|HFile
operator|.
name|getFormatVersion
argument_list|(
name|conf
argument_list|)
operator|>=
name|HFile
operator|.
name|MIN_FORMAT_VERSION_WITH_TAGS
condition|)
block|{
name|contextBuilder
operator|.
name|withIncludesTags
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|contextBuilder
operator|.
name|withDataBlockEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|HFileContext
name|hFileContext
init|=
name|contextBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|favoredNodes
condition|)
block|{
name|wl
operator|.
name|writer
operator|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|CacheConfig
operator|.
name|DISABLED
argument_list|,
name|fs
argument_list|)
operator|.
name|withOutputDir
argument_list|(
name|familydir
argument_list|)
operator|.
name|withBloomType
argument_list|(
name|bloomType
argument_list|)
operator|.
name|withComparator
argument_list|(
name|CellComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|hFileContext
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|wl
operator|.
name|writer
operator|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|CacheConfig
operator|.
name|DISABLED
argument_list|,
operator|new
name|HFileSystem
argument_list|(
name|fs
argument_list|)
argument_list|)
operator|.
name|withOutputDir
argument_list|(
name|familydir
argument_list|)
operator|.
name|withBloomType
argument_list|(
name|bloomType
argument_list|)
operator|.
name|withComparator
argument_list|(
name|CellComparator
operator|.
name|getInstance
argument_list|()
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|hFileContext
argument_list|)
operator|.
name|withFavoredNodes
argument_list|(
name|favoredNodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|writers
operator|.
name|put
argument_list|(
name|tableAndFamily
argument_list|,
name|wl
argument_list|)
expr_stmt|;
return|return
name|wl
return|;
block|}
specifier|private
name|void
name|close
parameter_list|(
specifier|final
name|StoreFileWriter
name|w
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
block|{
name|w
operator|.
name|appendFileInfo
argument_list|(
name|BULKLOAD_TIME_KEY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|appendFileInfo
argument_list|(
name|BULKLOAD_TASK_KEY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|context
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|appendFileInfo
argument_list|(
name|MAJOR_COMPACTION_KEY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|appendFileInfo
argument_list|(
name|EXCLUDE_FROM_MINOR_COMPACTION_KEY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|compactionExclude
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|appendTrackedTimestampsToMetadata
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|TaskAttemptContext
name|c
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|WriterLength
name|wl
range|:
name|this
operator|.
name|writers
operator|.
name|values
argument_list|()
control|)
block|{
name|close
argument_list|(
name|wl
operator|.
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/**    * Configure block storage policy for CF after the directory is created.    */
end_comment

begin_function
unit|static
name|void
name|configureStoragePolicy
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
name|byte
index|[]
name|tableAndFamily
parameter_list|,
name|Path
name|cfPath
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|conf
operator|||
literal|null
operator|==
name|fs
operator|||
literal|null
operator|==
name|tableAndFamily
operator|||
literal|null
operator|==
name|cfPath
condition|)
block|{
return|return;
block|}
name|String
name|policy
init|=
name|conf
operator|.
name|get
argument_list|(
name|STORAGE_POLICY_PROPERTY_CF_PREFIX
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableAndFamily
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|STORAGE_POLICY_PROPERTY
argument_list|)
argument_list|)
decl_stmt|;
name|FSUtils
operator|.
name|setStoragePolicy
argument_list|(
name|fs
argument_list|,
name|cfPath
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*    * Data structure to hold a Writer and amount of data written on it.    */
end_comment

begin_class
specifier|static
class|class
name|WriterLength
block|{
name|long
name|written
init|=
literal|0
decl_stmt|;
name|StoreFileWriter
name|writer
init|=
literal|null
decl_stmt|;
block|}
end_class

begin_comment
comment|/**    * Return the start keys of all of the regions in this table,    * as a list of ImmutableBytesWritable.    */
end_comment

begin_function
specifier|private
specifier|static
name|List
argument_list|<
name|ImmutableBytesWritable
argument_list|>
name|getRegionStartKeys
parameter_list|(
name|List
argument_list|<
name|RegionLocator
argument_list|>
name|regionLocators
parameter_list|,
name|boolean
name|writeMultipleTables
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|ImmutableBytesWritable
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionLocator
name|regionLocator
range|:
name|regionLocators
control|)
block|{
name|TableName
name|tableName
init|=
name|regionLocator
operator|.
name|getName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Looking up current regions for table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|byteKeys
init|=
name|regionLocator
operator|.
name|getStartKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|byteKey
range|:
name|byteKeys
control|)
block|{
name|byte
index|[]
name|fullKey
init|=
name|byteKey
decl_stmt|;
comment|//HFileOutputFormat2 use case
if|if
condition|(
name|writeMultipleTables
condition|)
block|{
comment|//MultiTableHFileOutputFormat use case
name|fullKey
operator|=
name|combineTableNameSuffix
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|,
name|byteKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SplitPoint startkey for table ["
operator|+
name|tableName
operator|+
literal|"]: ["
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|fullKey
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|fullKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
end_function

begin_comment
comment|/**    * Write out a {@link SequenceFile} that can be read by    * {@link TotalOrderPartitioner} that contains the split points in startKeys.    */
end_comment

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|private
specifier|static
name|void
name|writePartitions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|partitionsPath
parameter_list|,
name|List
argument_list|<
name|ImmutableBytesWritable
argument_list|>
name|startKeys
parameter_list|,
name|boolean
name|writeMultipleTables
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing partition information to "
operator|+
name|partitionsPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|startKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No regions passed"
argument_list|)
throw|;
block|}
comment|// We're generating a list of split points, and we don't ever
comment|// have keys< the first region (which has an empty start key)
comment|// so we need to remove it. Otherwise we would end up with an
comment|// empty reducer with index 0
name|TreeSet
argument_list|<
name|ImmutableBytesWritable
argument_list|>
name|sorted
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|startKeys
argument_list|)
decl_stmt|;
name|ImmutableBytesWritable
name|first
init|=
name|sorted
operator|.
name|first
argument_list|()
decl_stmt|;
if|if
condition|(
name|writeMultipleTables
condition|)
block|{
name|first
operator|=
operator|new
name|ImmutableBytesWritable
argument_list|(
name|MultiTableHFileOutputFormat
operator|.
name|getSuffix
argument_list|(
name|sorted
operator|.
name|first
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|first
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"First region of table should have empty start key. Instead has: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|first
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|sorted
operator|.
name|remove
argument_list|(
name|sorted
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write the actual file
name|FileSystem
name|fs
init|=
name|partitionsPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|partitionsPath
argument_list|,
name|ImmutableBytesWritable
operator|.
name|class
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|ImmutableBytesWritable
name|startKey
range|:
name|sorted
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|startKey
argument_list|,
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Configure a MapReduce Job to perform an incremental load into the given    * table. This    *<ul>    *<li>Inspects the table to configure a total order partitioner</li>    *<li>Uploads the partitions file to the cluster and adds it to the DistributedCache</li>    *<li>Sets the number of reduce tasks to match the current number of regions</li>    *<li>Sets the output key/value class to match HFileOutputFormat2's requirements</li>    *<li>Sets the reducer up to perform the appropriate sorting (either KeyValueSortReducer or    *     PutSortReducer)</li>    *</ul>    * The user should be sure to set the map output value class to either KeyValue or Put before    * running this function.    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|configureIncrementalLoad
parameter_list|(
name|Job
name|job
parameter_list|,
name|Table
name|table
parameter_list|,
name|RegionLocator
name|regionLocator
parameter_list|)
throws|throws
name|IOException
block|{
name|configureIncrementalLoad
argument_list|(
name|job
argument_list|,
name|table
operator|.
name|getDescriptor
argument_list|()
argument_list|,
name|regionLocator
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Configure a MapReduce Job to perform an incremental load into the given    * table. This    *<ul>    *<li>Inspects the table to configure a total order partitioner</li>    *<li>Uploads the partitions file to the cluster and adds it to the DistributedCache</li>    *<li>Sets the number of reduce tasks to match the current number of regions</li>    *<li>Sets the output key/value class to match HFileOutputFormat2's requirements</li>    *<li>Sets the reducer up to perform the appropriate sorting (either KeyValueSortReducer or    *     PutSortReducer)</li>    *</ul>    * The user should be sure to set the map output value class to either KeyValue or Put before    * running this function.    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|configureIncrementalLoad
parameter_list|(
name|Job
name|job
parameter_list|,
name|TableDescriptor
name|tableDescriptor
parameter_list|,
name|RegionLocator
name|regionLocator
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|TableInfo
argument_list|>
name|singleTableInfo
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|singleTableInfo
operator|.
name|add
argument_list|(
operator|new
name|TableInfo
argument_list|(
name|tableDescriptor
argument_list|,
name|regionLocator
argument_list|)
argument_list|)
expr_stmt|;
name|configureIncrementalLoad
argument_list|(
name|job
argument_list|,
name|singleTableInfo
argument_list|,
name|HFileOutputFormat2
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|configureIncrementalLoad
parameter_list|(
name|Job
name|job
parameter_list|,
name|List
argument_list|<
name|TableInfo
argument_list|>
name|multiTableInfo
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|cls
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|MapReduceExtendedCell
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|cls
argument_list|)
expr_stmt|;
if|if
condition|(
name|multiTableInfo
operator|.
name|stream
argument_list|()
operator|.
name|distinct
argument_list|()
operator|.
name|count
argument_list|()
operator|!=
name|multiTableInfo
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Duplicate entries found in TableInfo argument"
argument_list|)
throw|;
block|}
name|boolean
name|writeMultipleTables
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|MultiTableHFileOutputFormat
operator|.
name|class
operator|.
name|equals
argument_list|(
name|cls
argument_list|)
condition|)
block|{
name|writeMultipleTables
operator|=
literal|true
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MULTI_TABLE_HFILEOUTPUTFORMAT_CONF_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Based on the configured map output class, set the correct reducer to properly
comment|// sort the incoming values.
comment|// TODO it would be nice to pick one or the other of these formats.
if|if
condition|(
name|KeyValue
operator|.
name|class
operator|.
name|equals
argument_list|(
name|job
operator|.
name|getMapOutputValueClass
argument_list|()
argument_list|)
operator|||
name|MapReduceExtendedCell
operator|.
name|class
operator|.
name|equals
argument_list|(
name|job
operator|.
name|getMapOutputValueClass
argument_list|()
argument_list|)
condition|)
block|{
name|job
operator|.
name|setReducerClass
argument_list|(
name|CellSortReducer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Put
operator|.
name|class
operator|.
name|equals
argument_list|(
name|job
operator|.
name|getMapOutputValueClass
argument_list|()
argument_list|)
condition|)
block|{
name|job
operator|.
name|setReducerClass
argument_list|(
name|PutSortReducer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Text
operator|.
name|class
operator|.
name|equals
argument_list|(
name|job
operator|.
name|getMapOutputValueClass
argument_list|()
argument_list|)
condition|)
block|{
name|job
operator|.
name|setReducerClass
argument_list|(
name|TextSortReducer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown map output value type:"
operator|+
name|job
operator|.
name|getMapOutputValueClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
literal|"io.serializations"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"io.serializations"
argument_list|)
argument_list|,
name|MutationSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ResultSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|CellSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|LOCALITY_SENSITIVE_CONF_KEY
argument_list|,
name|DEFAULT_LOCALITY_SENSITIVE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"bulkload locality sensitive enabled"
argument_list|)
expr_stmt|;
block|}
comment|/* Now get the region start keys for every table required */
name|List
argument_list|<
name|String
argument_list|>
name|allTableNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|multiTableInfo
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionLocator
argument_list|>
name|regionLocators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|multiTableInfo
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|tableDescriptors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|multiTableInfo
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TableInfo
name|tableInfo
range|:
name|multiTableInfo
control|)
block|{
name|regionLocators
operator|.
name|add
argument_list|(
name|tableInfo
operator|.
name|getRegionLocator
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tn
init|=
name|writeMultipleTables
condition|?
name|tableInfo
operator|.
name|getRegionLocator
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNameWithNamespaceInclAsString
argument_list|()
else|:
name|tableInfo
operator|.
name|getRegionLocator
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
name|allTableNames
operator|.
name|add
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|tableDescriptors
operator|.
name|add
argument_list|(
name|tableInfo
operator|.
name|getTableDescriptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Record tablenames for creating writer by favored nodes, and decoding compression, block size and other attributes of columnfamily per table
name|conf
operator|.
name|set
argument_list|(
name|OUTPUT_TABLE_NAME_CONF_KEY
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|allTableNames
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|tableSeparator
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ImmutableBytesWritable
argument_list|>
name|startKeys
init|=
name|getRegionStartKeys
argument_list|(
name|regionLocators
argument_list|,
name|writeMultipleTables
argument_list|)
decl_stmt|;
comment|// Use table's region boundaries for TOP split points.
name|LOG
operator|.
name|info
argument_list|(
literal|"Configuring "
operator|+
name|startKeys
operator|.
name|size
argument_list|()
operator|+
literal|" reduce partitions "
operator|+
literal|"to match current region count for all tables"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
name|startKeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|configurePartitioner
argument_list|(
name|job
argument_list|,
name|startKeys
argument_list|,
name|writeMultipleTables
argument_list|)
expr_stmt|;
comment|// Set compression algorithms based on column families
name|conf
operator|.
name|set
argument_list|(
name|COMPRESSION_FAMILIES_CONF_KEY
argument_list|,
name|serializeColumnFamilyAttribute
argument_list|(
name|compressionDetails
argument_list|,
name|tableDescriptors
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|BLOCK_SIZE_FAMILIES_CONF_KEY
argument_list|,
name|serializeColumnFamilyAttribute
argument_list|(
name|blockSizeDetails
argument_list|,
name|tableDescriptors
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|BLOOM_TYPE_FAMILIES_CONF_KEY
argument_list|,
name|serializeColumnFamilyAttribute
argument_list|(
name|bloomTypeDetails
argument_list|,
name|tableDescriptors
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|BLOOM_PARAM_FAMILIES_CONF_KEY
argument_list|,
name|serializeColumnFamilyAttribute
argument_list|(
name|bloomParamDetails
argument_list|,
name|tableDescriptors
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DATABLOCK_ENCODING_FAMILIES_CONF_KEY
argument_list|,
name|serializeColumnFamilyAttribute
argument_list|(
name|dataBlockEncodingDetails
argument_list|,
name|tableDescriptors
argument_list|)
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|addDependencyJars
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|initCredentials
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental output configured for tables: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|allTableNames
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|configureIncrementalLoadMap
parameter_list|(
name|Job
name|job
parameter_list|,
name|TableDescriptor
name|tableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|MapReduceExtendedCell
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|HFileOutputFormat2
operator|.
name|class
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|TableDescriptor
argument_list|>
name|singleTableDescriptor
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|singleTableDescriptor
operator|.
name|add
argument_list|(
name|tableDescriptor
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OUTPUT_TABLE_NAME_CONF_KEY
argument_list|,
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set compression algorithms based on column families
name|conf
operator|.
name|set
argument_list|(
name|COMPRESSION_FAMILIES_CONF_KEY
argument_list|,
name|serializeColumnFamilyAttribute
argument_list|(
name|compressionDetails
argument_list|,
name|singleTableDescriptor
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|BLOCK_SIZE_FAMILIES_CONF_KEY
argument_list|,
name|serializeColumnFamilyAttribute
argument_list|(
name|blockSizeDetails
argument_list|,
name|singleTableDescriptor
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|BLOOM_TYPE_FAMILIES_CONF_KEY
argument_list|,
name|serializeColumnFamilyAttribute
argument_list|(
name|bloomTypeDetails
argument_list|,
name|singleTableDescriptor
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|BLOOM_PARAM_FAMILIES_CONF_KEY
argument_list|,
name|serializeColumnFamilyAttribute
argument_list|(
name|bloomParamDetails
argument_list|,
name|singleTableDescriptor
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DATABLOCK_ENCODING_FAMILIES_CONF_KEY
argument_list|,
name|serializeColumnFamilyAttribute
argument_list|(
name|dataBlockEncodingDetails
argument_list|,
name|singleTableDescriptor
argument_list|)
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|addDependencyJars
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|initCredentials
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental table "
operator|+
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
operator|+
literal|" output configured."
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Runs inside the task to deserialize column family to compression algorithm    * map from the configuration.    *    * @param conf to read the serialized values from    * @return a map from column family to the configured compression algorithm    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
specifier|static
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Algorithm
argument_list|>
name|createFamilyCompressionMap
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|stringMap
init|=
name|createFamilyConfValueMap
argument_list|(
name|conf
argument_list|,
name|COMPRESSION_FAMILIES_CONF_KEY
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Algorithm
argument_list|>
name|compressionMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|e
range|:
name|stringMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Algorithm
name|algorithm
init|=
name|HFileWriterImpl
operator|.
name|compressionByName
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|compressionMap
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|algorithm
argument_list|)
expr_stmt|;
block|}
return|return
name|compressionMap
return|;
block|}
end_function

begin_comment
comment|/**    * Runs inside the task to deserialize column family to bloom filter type    * map from the configuration.    *    * @param conf to read the serialized values from    * @return a map from column family to the the configured bloom filter type    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
specifier|static
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|BloomType
argument_list|>
name|createFamilyBloomTypeMap
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|stringMap
init|=
name|createFamilyConfValueMap
argument_list|(
name|conf
argument_list|,
name|BLOOM_TYPE_FAMILIES_CONF_KEY
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|BloomType
argument_list|>
name|bloomTypeMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|e
range|:
name|stringMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|BloomType
name|bloomType
init|=
name|BloomType
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|bloomTypeMap
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|bloomType
argument_list|)
expr_stmt|;
block|}
return|return
name|bloomTypeMap
return|;
block|}
end_function

begin_comment
comment|/**    * Runs inside the task to deserialize column family to bloom filter param    * map from the configuration.    *    * @param conf to read the serialized values from    * @return a map from column family to the the configured bloom filter param    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
specifier|static
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|createFamilyBloomParamMap
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|createFamilyConfValueMap
argument_list|(
name|conf
argument_list|,
name|BLOOM_PARAM_FAMILIES_CONF_KEY
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Runs inside the task to deserialize column family to block size    * map from the configuration.    *    * @param conf to read the serialized values from    * @return a map from column family to the configured block size    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
specifier|static
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|createFamilyBlockSizeMap
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|stringMap
init|=
name|createFamilyConfValueMap
argument_list|(
name|conf
argument_list|,
name|BLOCK_SIZE_FAMILIES_CONF_KEY
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|blockSizeMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|e
range|:
name|stringMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Integer
name|blockSize
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|blockSizeMap
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
block|}
return|return
name|blockSizeMap
return|;
block|}
end_function

begin_comment
comment|/**    * Runs inside the task to deserialize column family to data block encoding    * type map from the configuration.    *    * @param conf to read the serialized values from    * @return a map from column family to HFileDataBlockEncoder for the    *         configured data block type for the family    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
specifier|static
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|DataBlockEncoding
argument_list|>
name|createFamilyDataBlockEncodingMap
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|stringMap
init|=
name|createFamilyConfValueMap
argument_list|(
name|conf
argument_list|,
name|DATABLOCK_ENCODING_FAMILIES_CONF_KEY
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|DataBlockEncoding
argument_list|>
name|encoderMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|e
range|:
name|stringMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|encoderMap
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|DataBlockEncoding
operator|.
name|valueOf
argument_list|(
operator|(
name|e
operator|.
name|getValue
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|encoderMap
return|;
block|}
end_function

begin_comment
comment|/**    * Run inside the task to deserialize column family to given conf value map.    *    * @param conf to read the serialized values from    * @param confName conf key to read from the configuration    * @return a map of column family to the given configuration value    */
end_comment

begin_function
specifier|private
specifier|static
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|createFamilyConfValueMap
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|confName
parameter_list|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|confValMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|String
name|confVal
init|=
name|conf
operator|.
name|get
argument_list|(
name|confName
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|familyConf
range|:
name|confVal
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
control|)
block|{
name|String
index|[]
name|familySplit
init|=
name|familyConf
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|familySplit
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|confValMap
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|familySplit
index|[
literal|0
index|]
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|URLDecoder
operator|.
name|decode
argument_list|(
name|familySplit
index|[
literal|1
index|]
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|// will not happen with UTF-8 encoding
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|confValMap
return|;
block|}
end_function

begin_comment
comment|/**    * Configure<code>job</code> with a TotalOrderPartitioner, partitioning against    *<code>splitPoints</code>. Cleans up the partitions file after job exists.    */
end_comment

begin_function
specifier|static
name|void
name|configurePartitioner
parameter_list|(
name|Job
name|job
parameter_list|,
name|List
argument_list|<
name|ImmutableBytesWritable
argument_list|>
name|splitPoints
parameter_list|,
name|boolean
name|writeMultipleTables
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// create the partitions file
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|hbaseTmpFsDir
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|TEMPORARY_FS_DIRECTORY_KEY
argument_list|,
name|fs
operator|.
name|getHomeDirectory
argument_list|()
operator|+
literal|"/hbase-staging"
argument_list|)
decl_stmt|;
name|Path
name|partitionsPath
init|=
operator|new
name|Path
argument_list|(
name|hbaseTmpFsDir
argument_list|,
literal|"partitions_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|makeQualified
argument_list|(
name|partitionsPath
argument_list|)
expr_stmt|;
name|writePartitions
argument_list|(
name|conf
argument_list|,
name|partitionsPath
argument_list|,
name|splitPoints
argument_list|,
name|writeMultipleTables
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|partitionsPath
argument_list|)
expr_stmt|;
comment|// configure job to use it
name|job
operator|.
name|setPartitionerClass
argument_list|(
name|TotalOrderPartitioner
operator|.
name|class
argument_list|)
expr_stmt|;
name|TotalOrderPartitioner
operator|.
name|setPartitionFile
argument_list|(
name|conf
argument_list|,
name|partitionsPath
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"
argument_list|)
annotation|@
name|VisibleForTesting
specifier|static
name|String
name|serializeColumnFamilyAttribute
parameter_list|(
name|Function
argument_list|<
name|ColumnFamilyDescriptor
argument_list|,
name|String
argument_list|>
name|fn
parameter_list|,
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|allTables
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|StringBuilder
name|attributeValue
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TableDescriptor
name|tableDescriptor
range|:
name|allTables
control|)
block|{
if|if
condition|(
name|tableDescriptor
operator|==
literal|null
condition|)
block|{
comment|// could happen with mock table instance
comment|// CODEREVIEW: Can I set an empty string in conf if mock table instance?
return|return
literal|""
return|;
block|}
for|for
control|(
name|ColumnFamilyDescriptor
name|familyDescriptor
range|:
name|tableDescriptor
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|>
literal|0
condition|)
block|{
name|attributeValue
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
name|attributeValue
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|combineTableNameSuffix
argument_list|(
name|tableDescriptor
operator|.
name|getTableName
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|familyDescriptor
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|attributeValue
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|attributeValue
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|fn
operator|.
name|apply
argument_list|(
name|familyDescriptor
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Get rid of the last ampersand
return|return
name|attributeValue
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Serialize column family to compression algorithm map to configuration.    * Invoked while configuring the MR job for incremental load.    */
end_comment

begin_decl_stmt
annotation|@
name|VisibleForTesting
specifier|static
name|Function
argument_list|<
name|ColumnFamilyDescriptor
argument_list|,
name|String
argument_list|>
name|compressionDetails
init|=
name|familyDescriptor
lambda|->
name|familyDescriptor
operator|.
name|getCompressionType
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Serialize column family to block size map to configuration. Invoked while    * configuring the MR job for incremental load.    */
end_comment

begin_decl_stmt
annotation|@
name|VisibleForTesting
specifier|static
name|Function
argument_list|<
name|ColumnFamilyDescriptor
argument_list|,
name|String
argument_list|>
name|blockSizeDetails
init|=
name|familyDescriptor
lambda|->
name|String
operator|.
name|valueOf
argument_list|(
name|familyDescriptor
operator|.
name|getBlocksize
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Serialize column family to bloom type map to configuration. Invoked while    * configuring the MR job for incremental load.    */
end_comment

begin_decl_stmt
annotation|@
name|VisibleForTesting
specifier|static
name|Function
argument_list|<
name|ColumnFamilyDescriptor
argument_list|,
name|String
argument_list|>
name|bloomTypeDetails
init|=
name|familyDescriptor
lambda|->
block|{
name|String
name|bloomType
init|=
name|familyDescriptor
operator|.
name|getBloomFilterType
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|bloomType
operator|==
literal|null
condition|)
block|{
name|bloomType
operator|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_BLOOMFILTER
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
return|return
name|bloomType
return|;
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Serialize column family to bloom param map to configuration. Invoked while    * configuring the MR job for incremental load.    */
end_comment

begin_decl_stmt
annotation|@
name|VisibleForTesting
specifier|static
name|Function
argument_list|<
name|ColumnFamilyDescriptor
argument_list|,
name|String
argument_list|>
name|bloomParamDetails
init|=
name|familyDescriptor
lambda|->
block|{
name|BloomType
name|bloomType
init|=
name|familyDescriptor
operator|.
name|getBloomFilterType
argument_list|()
decl_stmt|;
name|String
name|bloomParam
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|bloomType
operator|==
name|BloomType
operator|.
name|ROWPREFIX_FIXED_LENGTH
condition|)
block|{
name|bloomParam
operator|=
name|familyDescriptor
operator|.
name|getConfigurationValue
argument_list|(
name|BloomFilterUtil
operator|.
name|PREFIX_LENGTH_KEY
argument_list|)
expr_stmt|;
block|}
return|return
name|bloomParam
return|;
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Serialize column family to data block encoding map to configuration.    * Invoked while configuring the MR job for incremental load.    */
end_comment

begin_decl_stmt
annotation|@
name|VisibleForTesting
specifier|static
name|Function
argument_list|<
name|ColumnFamilyDescriptor
argument_list|,
name|String
argument_list|>
name|dataBlockEncodingDetails
init|=
name|familyDescriptor
lambda|->
block|{
name|DataBlockEncoding
name|encoding
init|=
name|familyDescriptor
operator|.
name|getDataBlockEncoding
argument_list|()
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|encoding
operator|=
name|DataBlockEncoding
operator|.
name|NONE
expr_stmt|;
block|}
return|return
name|encoding
operator|.
name|toString
argument_list|()
return|;
block|}
decl_stmt|;
end_decl_stmt

unit|}
end_unit

