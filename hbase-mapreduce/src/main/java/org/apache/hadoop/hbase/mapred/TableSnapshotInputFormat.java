begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableSnapshotInputFormatImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RegionSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * TableSnapshotInputFormat allows a MapReduce job to run over a table snapshot. Further  * documentation available on {@link org.apache.hadoop.hbase.mapreduce.TableSnapshotInputFormat}.  *  * @see org.apache.hadoop.hbase.mapreduce.TableSnapshotInputFormat  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|TableSnapshotInputFormat
implements|implements
name|InputFormat
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|>
block|{
specifier|public
specifier|static
class|class
name|TableSnapshotRegionSplit
implements|implements
name|InputSplit
block|{
specifier|private
name|TableSnapshotInputFormatImpl
operator|.
name|InputSplit
name|delegate
decl_stmt|;
comment|// constructor for mapreduce framework / Writable
specifier|public
name|TableSnapshotRegionSplit
parameter_list|()
block|{
name|this
operator|.
name|delegate
operator|=
operator|new
name|TableSnapshotInputFormatImpl
operator|.
name|InputSplit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TableSnapshotRegionSplit
parameter_list|(
name|TableSnapshotInputFormatImpl
operator|.
name|InputSplit
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
specifier|public
name|TableSnapshotRegionSplit
parameter_list|(
name|HTableDescriptor
name|htd
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|locations
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Path
name|restoreDir
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
operator|new
name|TableSnapshotInputFormatImpl
operator|.
name|InputSplit
argument_list|(
name|htd
argument_list|,
name|regionInfo
argument_list|,
name|locations
argument_list|,
name|scan
argument_list|,
name|restoreDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|getLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|getLocations
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|TableSnapshotRecordReader
implements|implements
name|RecordReader
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|>
block|{
specifier|private
name|TableSnapshotInputFormatImpl
operator|.
name|RecordReader
name|delegate
decl_stmt|;
specifier|public
name|TableSnapshotRecordReader
parameter_list|(
name|TableSnapshotRegionSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|delegate
operator|=
operator|new
name|TableSnapshotInputFormatImpl
operator|.
name|RecordReader
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|initialize
argument_list|(
name|split
operator|.
name|delegate
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|ImmutableBytesWritable
name|key
parameter_list|,
name|Result
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|delegate
operator|.
name|nextKeyValue
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ImmutableBytesWritable
name|currentKey
init|=
name|delegate
operator|.
name|getCurrentKey
argument_list|()
decl_stmt|;
name|key
operator|.
name|set
argument_list|(
name|currentKey
operator|.
name|get
argument_list|()
argument_list|,
name|currentKey
operator|.
name|getOffset
argument_list|()
argument_list|,
name|currentKey
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|copyFrom
argument_list|(
name|delegate
operator|.
name|getCurrentValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|ImmutableBytesWritable
name|createKey
parameter_list|()
block|{
return|return
operator|new
name|ImmutableBytesWritable
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|Result
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|getPos
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|delegate
operator|.
name|getProgress
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|TableSnapshotInputFormatImpl
operator|.
name|InputSplit
argument_list|>
name|splits
init|=
name|TableSnapshotInputFormatImpl
operator|.
name|getSplits
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|InputSplit
index|[]
name|results
init|=
operator|new
name|InputSplit
index|[
name|splits
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|results
index|[
name|i
index|]
operator|=
operator|new
name|TableSnapshotRegionSplit
argument_list|(
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|TableSnapshotRecordReader
argument_list|(
operator|(
name|TableSnapshotRegionSplit
operator|)
name|split
argument_list|,
name|job
argument_list|)
return|;
block|}
comment|/**    * Configures the job to use TableSnapshotInputFormat to read from a snapshot.    * @param job the job to configure    * @param snapshotName the name of the snapshot to read from    * @param restoreDir a temporary directory to restore the snapshot into. Current user should    * have write permissions to this directory, and this should not be a subdirectory of rootdir.    * After the job is finished, restoreDir can be deleted.    * @throws IOException if an error occurs    */
specifier|public
specifier|static
name|void
name|setInput
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|String
name|snapshotName
parameter_list|,
name|Path
name|restoreDir
parameter_list|)
throws|throws
name|IOException
block|{
name|TableSnapshotInputFormatImpl
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
name|snapshotName
argument_list|,
name|restoreDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Configures the job to use TableSnapshotInputFormat to read from a snapshot.    * @param job the job to configure    * @param snapshotName the name of the snapshot to read from    * @param restoreDir a temporary directory to restore the snapshot into. Current user should    * have write permissions to this directory, and this should not be a subdirectory of rootdir.    * After the job is finished, restoreDir can be deleted.    * @param splitAlgo split algorithm to generate splits from region    * @param numSplitsPerRegion how many input splits to generate per one region    * @throws IOException if an error occurs    */
specifier|public
specifier|static
name|void
name|setInput
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|String
name|snapshotName
parameter_list|,
name|Path
name|restoreDir
parameter_list|,
name|RegionSplitter
operator|.
name|SplitAlgorithm
name|splitAlgo
parameter_list|,
name|int
name|numSplitsPerRegion
parameter_list|)
throws|throws
name|IOException
block|{
name|TableSnapshotInputFormatImpl
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
name|snapshotName
argument_list|,
name|restoreDir
argument_list|,
name|splitAlgo
argument_list|,
name|numSplitsPerRegion
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

