begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|MapFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|partition
operator|.
name|TotalOrderPartitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ordering
import|;
end_import

begin_class
specifier|public
class|class
name|HashTable
extends|extends
name|Configured
implements|implements
name|Tool
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HashTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BATCH_SIZE
init|=
literal|8000
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|HASH_BATCH_SIZE_CONF_KEY
init|=
literal|"hash.batch.size"
decl_stmt|;
specifier|final
specifier|static
name|String
name|PARTITIONS_FILE_NAME
init|=
literal|"partitions"
decl_stmt|;
specifier|final
specifier|static
name|String
name|MANIFEST_FILE_NAME
init|=
literal|"manifest"
decl_stmt|;
specifier|final
specifier|static
name|String
name|HASH_DATA_DIR
init|=
literal|"hashes"
decl_stmt|;
specifier|final
specifier|static
name|String
name|OUTPUT_DATA_FILE_PREFIX
init|=
literal|"part-r-"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TMP_MANIFEST_FILE_NAME
init|=
literal|"manifest.tmp"
decl_stmt|;
name|TableHash
name|tableHash
init|=
operator|new
name|TableHash
argument_list|()
decl_stmt|;
name|Path
name|destPath
decl_stmt|;
specifier|public
name|HashTable
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|TableHash
block|{
name|Path
name|hashDir
decl_stmt|;
name|String
name|tableName
decl_stmt|;
name|String
name|families
init|=
literal|null
decl_stmt|;
name|long
name|batchSize
init|=
name|DEFAULT_BATCH_SIZE
decl_stmt|;
name|int
name|numHashFiles
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|startRow
init|=
name|HConstants
operator|.
name|EMPTY_START_ROW
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
name|HConstants
operator|.
name|EMPTY_END_ROW
decl_stmt|;
name|int
name|scanBatch
init|=
literal|0
decl_stmt|;
name|int
name|versions
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|startTime
init|=
literal|0
decl_stmt|;
name|long
name|endTime
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|ImmutableBytesWritable
argument_list|>
name|partitions
decl_stmt|;
specifier|public
specifier|static
name|TableHash
name|read
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|hashDir
parameter_list|)
throws|throws
name|IOException
block|{
name|TableHash
name|tableHash
init|=
operator|new
name|TableHash
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|hashDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|tableHash
operator|.
name|hashDir
operator|=
name|hashDir
expr_stmt|;
name|tableHash
operator|.
name|readPropertiesFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|hashDir
argument_list|,
name|MANIFEST_FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|tableHash
operator|.
name|readPartitionFile
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|hashDir
argument_list|,
name|PARTITIONS_FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tableHash
return|;
block|}
name|void
name|writePropertiesFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
literal|"table"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|families
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setProperty
argument_list|(
literal|"columnFamilies"
argument_list|,
name|families
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setProperty
argument_list|(
literal|"targetBatchSize"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|batchSize
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
literal|"numHashFiles"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|numHashFiles
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isTableStartRow
argument_list|(
name|startRow
argument_list|)
condition|)
block|{
name|p
operator|.
name|setProperty
argument_list|(
literal|"startRowHex"
argument_list|,
name|Bytes
operator|.
name|toHex
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isTableEndRow
argument_list|(
name|stopRow
argument_list|)
condition|)
block|{
name|p
operator|.
name|setProperty
argument_list|(
literal|"stopRowHex"
argument_list|,
name|Bytes
operator|.
name|toHex
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scanBatch
operator|>
literal|0
condition|)
block|{
name|p
operator|.
name|setProperty
argument_list|(
literal|"scanBatch"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|scanBatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|versions
operator|>=
literal|0
condition|)
block|{
name|p
operator|.
name|setProperty
argument_list|(
literal|"versions"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|versions
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|startTime
operator|!=
literal|0
condition|)
block|{
name|p
operator|.
name|setProperty
argument_list|(
literal|"startTimestamp"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endTime
operator|!=
literal|0
condition|)
block|{
name|p
operator|.
name|setProperty
argument_list|(
literal|"endTimestamp"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|endTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|OutputStreamWriter
name|osw
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|p
operator|.
name|store
argument_list|(
name|osw
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|readPropertiesFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
init|)
block|{
try|try
init|(
name|InputStreamReader
name|isr
init|=
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|p
operator|.
name|load
argument_list|(
name|isr
argument_list|)
expr_stmt|;
block|}
block|}
name|tableName
operator|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
name|families
operator|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"columnFamilies"
argument_list|)
expr_stmt|;
name|batchSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"targetBatchSize"
argument_list|)
argument_list|)
expr_stmt|;
name|numHashFiles
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"numHashFiles"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|startRowHex
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"startRowHex"
argument_list|)
decl_stmt|;
if|if
condition|(
name|startRowHex
operator|!=
literal|null
condition|)
block|{
name|startRow
operator|=
name|Bytes
operator|.
name|fromHex
argument_list|(
name|startRowHex
argument_list|)
expr_stmt|;
block|}
name|String
name|stopRowHex
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"stopRowHex"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stopRowHex
operator|!=
literal|null
condition|)
block|{
name|stopRow
operator|=
name|Bytes
operator|.
name|fromHex
argument_list|(
name|stopRowHex
argument_list|)
expr_stmt|;
block|}
name|String
name|scanBatchString
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"scanBatch"
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanBatchString
operator|!=
literal|null
condition|)
block|{
name|scanBatch
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|scanBatchString
argument_list|)
expr_stmt|;
block|}
name|String
name|versionString
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"versions"
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionString
operator|!=
literal|null
condition|)
block|{
name|versions
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|versionString
argument_list|)
expr_stmt|;
block|}
name|String
name|startTimeString
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"startTimestamp"
argument_list|)
decl_stmt|;
if|if
condition|(
name|startTimeString
operator|!=
literal|null
condition|)
block|{
name|startTime
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|startTimeString
argument_list|)
expr_stmt|;
block|}
name|String
name|endTimeString
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"endTimestamp"
argument_list|)
decl_stmt|;
if|if
condition|(
name|endTimeString
operator|!=
literal|null
condition|)
block|{
name|endTime
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|endTimeString
argument_list|)
expr_stmt|;
block|}
block|}
name|Scan
name|initScan
parameter_list|()
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setCacheBlocks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|startTime
operator|!=
literal|0
operator|||
name|endTime
operator|!=
literal|0
condition|)
block|{
name|scan
operator|.
name|setTimeRange
argument_list|(
name|startTime
argument_list|,
name|endTime
operator|==
literal|0
condition|?
name|HConstants
operator|.
name|LATEST_TIMESTAMP
else|:
name|endTime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scanBatch
operator|>
literal|0
condition|)
block|{
name|scan
operator|.
name|setBatch
argument_list|(
name|scanBatch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|versions
operator|>=
literal|0
condition|)
block|{
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|versions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isTableStartRow
argument_list|(
name|startRow
argument_list|)
condition|)
block|{
name|scan
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isTableEndRow
argument_list|(
name|stopRow
argument_list|)
condition|)
block|{
name|scan
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|families
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|fam
range|:
name|families
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|fam
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|scan
return|;
block|}
comment|/**      * Choose partitions between row ranges to hash to a single output file      * Selects region boundaries that fall within the scan range, and groups them      * into the desired number of partitions.      */
name|void
name|selectPartitions
parameter_list|(
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
name|regionStartEndKeys
parameter_list|)
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|startKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regionStartEndKeys
operator|.
name|getFirst
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|regionStartKey
init|=
name|regionStartEndKeys
operator|.
name|getFirst
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|byte
index|[]
name|regionEndKey
init|=
name|regionStartEndKeys
operator|.
name|getSecond
argument_list|()
index|[
name|i
index|]
decl_stmt|;
comment|// if scan begins after this region, or starts before this region, then drop this region
comment|// in other words:
comment|//   IF (scan begins before the end of this region
comment|//      AND scan ends before the start of this region)
comment|//   THEN include this region
if|if
condition|(
operator|(
name|isTableStartRow
argument_list|(
name|startRow
argument_list|)
operator|||
name|isTableEndRow
argument_list|(
name|regionEndKey
argument_list|)
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|startRow
argument_list|,
name|regionEndKey
argument_list|)
operator|<
literal|0
operator|)
operator|&&
operator|(
name|isTableEndRow
argument_list|(
name|stopRow
argument_list|)
operator|||
name|isTableStartRow
argument_list|(
name|regionStartKey
argument_list|)
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|stopRow
argument_list|,
name|regionStartKey
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
name|startKeys
operator|.
name|add
argument_list|(
name|regionStartKey
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|numRegions
init|=
name|startKeys
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numHashFiles
operator|==
literal|0
condition|)
block|{
name|numHashFiles
operator|=
name|numRegions
operator|/
literal|100
expr_stmt|;
block|}
if|if
condition|(
name|numHashFiles
operator|==
literal|0
condition|)
block|{
name|numHashFiles
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|numHashFiles
operator|>
name|numRegions
condition|)
block|{
comment|// can't partition within regions
name|numHashFiles
operator|=
name|numRegions
expr_stmt|;
block|}
comment|// choose a subset of start keys to group regions into ranges
name|partitions
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numHashFiles
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// skip the first start key as it is not a partition between ranges.
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numHashFiles
condition|;
name|i
operator|++
control|)
block|{
name|int
name|splitIndex
init|=
call|(
name|int
call|)
argument_list|(
name|numRegions
operator|*
name|i
operator|/
name|numHashFiles
argument_list|)
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|startKeys
operator|.
name|get
argument_list|(
name|splitIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|writePartitionFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|path
argument_list|,
name|ImmutableBytesWritable
operator|.
name|class
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|partitions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|readPartitionFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ImmutableBytesWritable
name|key
init|=
operator|new
name|ImmutableBytesWritable
argument_list|()
decl_stmt|;
name|partitions
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|partitions
operator|.
name|add
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|key
operator|.
name|copyBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|Ordering
operator|.
name|natural
argument_list|()
operator|.
name|isOrdered
argument_list|(
name|partitions
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Partitions are not ordered!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName="
argument_list|)
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|families
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", families="
argument_list|)
operator|.
name|append
argument_list|(
name|families
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|", batchSize="
argument_list|)
operator|.
name|append
argument_list|(
name|batchSize
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", numHashFiles="
argument_list|)
operator|.
name|append
argument_list|(
name|numHashFiles
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isTableStartRow
argument_list|(
name|startRow
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", startRowHex="
argument_list|)
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toHex
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isTableEndRow
argument_list|(
name|stopRow
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", stopRowHex="
argument_list|)
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toHex
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scanBatch
operator|>=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", scanBatch="
argument_list|)
operator|.
name|append
argument_list|(
name|scanBatch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|versions
operator|>=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", versions="
argument_list|)
operator|.
name|append
argument_list|(
name|versions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|startTime
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"startTime="
argument_list|)
operator|.
name|append
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endTime
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"endTime="
argument_list|)
operator|.
name|append
argument_list|(
name|endTime
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|String
name|getDataFileName
parameter_list|(
name|int
name|hashFileIndex
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|HashTable
operator|.
name|OUTPUT_DATA_FILE_PREFIX
operator|+
literal|"%05d"
argument_list|,
name|hashFileIndex
argument_list|)
return|;
block|}
comment|/**      * Open a TableHash.Reader starting at the first hash at or after the given key.      * @throws IOException      */
specifier|public
name|Reader
name|newReader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ImmutableBytesWritable
name|startKey
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Reader
argument_list|(
name|conf
argument_list|,
name|startKey
argument_list|)
return|;
block|}
specifier|public
class|class
name|Reader
implements|implements
name|java
operator|.
name|io
operator|.
name|Closeable
block|{
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|int
name|hashFileIndex
decl_stmt|;
specifier|private
name|MapFile
operator|.
name|Reader
name|mapFileReader
decl_stmt|;
specifier|private
name|boolean
name|cachedNext
decl_stmt|;
specifier|private
name|ImmutableBytesWritable
name|key
decl_stmt|;
specifier|private
name|ImmutableBytesWritable
name|hash
decl_stmt|;
name|Reader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ImmutableBytesWritable
name|startKey
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|int
name|partitionIndex
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|partitions
argument_list|,
name|startKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitionIndex
operator|>=
literal|0
condition|)
block|{
comment|// if the key is equal to a partition, then go the file after that partition
name|hashFileIndex
operator|=
name|partitionIndex
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// if the key is between partitions, then go to the file between those partitions
name|hashFileIndex
operator|=
operator|-
literal|1
operator|-
name|partitionIndex
expr_stmt|;
block|}
name|openHashFile
argument_list|()
expr_stmt|;
comment|// MapFile's don't make it easy to seek() so that the subsequent next() returns
comment|// the desired key/value pair.  So we cache it for the first call of next().
name|hash
operator|=
operator|new
name|ImmutableBytesWritable
argument_list|()
expr_stmt|;
name|key
operator|=
operator|(
name|ImmutableBytesWritable
operator|)
name|mapFileReader
operator|.
name|getClosest
argument_list|(
name|startKey
argument_list|,
name|hash
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|cachedNext
operator|=
literal|false
expr_stmt|;
name|hash
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|cachedNext
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**        * Read the next key/hash pair.        * Returns true if such a pair exists and false when at the end of the data.        */
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cachedNext
condition|)
block|{
name|cachedNext
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
name|key
operator|=
operator|new
name|ImmutableBytesWritable
argument_list|()
expr_stmt|;
name|hash
operator|=
operator|new
name|ImmutableBytesWritable
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|hasNext
init|=
name|mapFileReader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasNext
condition|)
block|{
return|return
literal|true
return|;
block|}
name|hashFileIndex
operator|++
expr_stmt|;
if|if
condition|(
name|hashFileIndex
operator|<
name|TableHash
operator|.
name|this
operator|.
name|numHashFiles
condition|)
block|{
name|mapFileReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|openHashFile
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|key
operator|=
literal|null
expr_stmt|;
name|hash
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
comment|/**        * Get the current key        * @return the current key or null if there is no current key        */
specifier|public
name|ImmutableBytesWritable
name|getCurrentKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**        * Get the current hash        * @return the current hash or null if there is no current hash        */
specifier|public
name|ImmutableBytesWritable
name|getCurrentHash
parameter_list|()
block|{
return|return
name|hash
return|;
block|}
specifier|private
name|void
name|openHashFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|mapFileReader
operator|!=
literal|null
condition|)
block|{
name|mapFileReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Path
name|dataDir
init|=
operator|new
name|Path
argument_list|(
name|TableHash
operator|.
name|this
operator|.
name|hashDir
argument_list|,
name|HASH_DATA_DIR
argument_list|)
decl_stmt|;
name|Path
name|dataFile
init|=
operator|new
name|Path
argument_list|(
name|dataDir
argument_list|,
name|getDataFileName
argument_list|(
name|hashFileIndex
argument_list|)
argument_list|)
decl_stmt|;
name|mapFileReader
operator|=
operator|new
name|MapFile
operator|.
name|Reader
argument_list|(
name|dataFile
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|mapFileReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|boolean
name|isTableStartRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|row
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|isTableEndRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
name|row
argument_list|)
return|;
block|}
specifier|public
name|Job
name|createSubmittableJob
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|partitionsPath
init|=
operator|new
name|Path
argument_list|(
name|destPath
argument_list|,
name|PARTITIONS_FILE_NAME
argument_list|)
decl_stmt|;
name|generatePartitions
argument_list|(
name|partitionsPath
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
literal|"mapreduce.job.name"
argument_list|,
literal|"hashTable_"
operator|+
name|tableHash
operator|.
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|jobConf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setLong
argument_list|(
name|HASH_BATCH_SIZE_CONF_KEY
argument_list|,
name|tableHash
operator|.
name|batchSize
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|HashTable
operator|.
name|class
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|initTableMapperJob
argument_list|(
name|tableHash
operator|.
name|tableName
argument_list|,
name|tableHash
operator|.
name|initScan
argument_list|()
argument_list|,
name|HashMapper
operator|.
name|class
argument_list|,
name|ImmutableBytesWritable
operator|.
name|class
argument_list|,
name|ImmutableBytesWritable
operator|.
name|class
argument_list|,
name|job
argument_list|)
expr_stmt|;
comment|// use a TotalOrderPartitioner and reducers to group region output into hash files
name|job
operator|.
name|setPartitionerClass
argument_list|(
name|TotalOrderPartitioner
operator|.
name|class
argument_list|)
expr_stmt|;
name|TotalOrderPartitioner
operator|.
name|setPartitionFile
argument_list|(
name|jobConf
argument_list|,
name|partitionsPath
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|Reducer
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// identity reducer
name|job
operator|.
name|setNumReduceTasks
argument_list|(
name|tableHash
operator|.
name|numHashFiles
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|MapFileOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|destPath
argument_list|,
name|HASH_DATA_DIR
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
specifier|private
name|void
name|generatePartitions
parameter_list|(
name|Path
name|partitionsPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
name|regionKeys
init|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableHash
operator|.
name|tableName
argument_list|)
argument_list|)
operator|.
name|getStartEndKeys
argument_list|()
decl_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|tableHash
operator|.
name|selectPartitions
argument_list|(
name|regionKeys
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing "
operator|+
name|tableHash
operator|.
name|partitions
operator|.
name|size
argument_list|()
operator|+
literal|" partition keys to "
operator|+
name|partitionsPath
argument_list|)
expr_stmt|;
name|tableHash
operator|.
name|writePartitionFile
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|partitionsPath
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|ResultHasher
block|{
specifier|private
name|MessageDigest
name|digest
decl_stmt|;
specifier|private
name|boolean
name|batchStarted
init|=
literal|false
decl_stmt|;
specifier|private
name|ImmutableBytesWritable
name|batchStartKey
decl_stmt|;
specifier|private
name|ImmutableBytesWritable
name|batchHash
decl_stmt|;
specifier|private
name|long
name|batchSize
init|=
literal|0
decl_stmt|;
specifier|public
name|ResultHasher
parameter_list|()
block|{
try|try
block|{
name|digest
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|startBatch
parameter_list|(
name|ImmutableBytesWritable
name|row
parameter_list|)
block|{
if|if
condition|(
name|batchStarted
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot start new batch without finishing existing one."
argument_list|)
throw|;
block|}
name|batchStarted
operator|=
literal|true
expr_stmt|;
name|batchSize
operator|=
literal|0
expr_stmt|;
name|batchStartKey
operator|=
name|row
expr_stmt|;
name|batchHash
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|hashResult
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
if|if
condition|(
operator|!
name|batchStarted
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot add to batch that has not been started."
argument_list|)
throw|;
block|}
for|for
control|(
name|Cell
name|cell
range|:
name|result
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|int
name|rowLength
init|=
name|cell
operator|.
name|getRowLength
argument_list|()
decl_stmt|;
name|int
name|familyLength
init|=
name|cell
operator|.
name|getFamilyLength
argument_list|()
decl_stmt|;
name|int
name|qualifierLength
init|=
name|cell
operator|.
name|getQualifierLength
argument_list|()
decl_stmt|;
name|int
name|valueLength
init|=
name|cell
operator|.
name|getValueLength
argument_list|()
decl_stmt|;
name|digest
operator|.
name|update
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|rowLength
argument_list|)
expr_stmt|;
name|digest
operator|.
name|update
argument_list|(
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|familyLength
argument_list|)
expr_stmt|;
name|digest
operator|.
name|update
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|qualifierLength
argument_list|)
expr_stmt|;
name|long
name|ts
init|=
name|cell
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|8
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|digest
operator|.
name|update
argument_list|(
operator|(
name|byte
operator|)
name|ts
argument_list|)
expr_stmt|;
name|ts
operator|>>>=
literal|8
expr_stmt|;
block|}
name|digest
operator|.
name|update
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|valueLength
argument_list|)
expr_stmt|;
name|batchSize
operator|+=
name|rowLength
operator|+
name|familyLength
operator|+
name|qualifierLength
operator|+
literal|8
operator|+
name|valueLength
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|finishBatch
parameter_list|()
block|{
if|if
condition|(
operator|!
name|batchStarted
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot finish batch that has not started."
argument_list|)
throw|;
block|}
name|batchStarted
operator|=
literal|false
expr_stmt|;
name|batchHash
operator|=
operator|new
name|ImmutableBytesWritable
argument_list|(
name|digest
operator|.
name|digest
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isBatchStarted
parameter_list|()
block|{
return|return
name|batchStarted
return|;
block|}
specifier|public
name|ImmutableBytesWritable
name|getBatchStartKey
parameter_list|()
block|{
return|return
name|batchStartKey
return|;
block|}
specifier|public
name|ImmutableBytesWritable
name|getBatchHash
parameter_list|()
block|{
return|return
name|batchHash
return|;
block|}
specifier|public
name|long
name|getBatchSize
parameter_list|()
block|{
return|return
name|batchSize
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|HashMapper
extends|extends
name|TableMapper
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|>
block|{
specifier|private
name|ResultHasher
name|hasher
decl_stmt|;
specifier|private
name|long
name|targetBatchSize
decl_stmt|;
specifier|private
name|ImmutableBytesWritable
name|currentRow
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|targetBatchSize
operator|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|HASH_BATCH_SIZE_CONF_KEY
argument_list|,
name|DEFAULT_BATCH_SIZE
argument_list|)
expr_stmt|;
name|hasher
operator|=
operator|new
name|ResultHasher
argument_list|()
expr_stmt|;
name|TableSplit
name|split
init|=
operator|(
name|TableSplit
operator|)
name|context
operator|.
name|getInputSplit
argument_list|()
decl_stmt|;
name|hasher
operator|.
name|startBatch
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|split
operator|.
name|getStartRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|map
parameter_list|(
name|ImmutableBytesWritable
name|key
parameter_list|,
name|Result
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|currentRow
operator|==
literal|null
operator|||
operator|!
name|currentRow
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|currentRow
operator|=
operator|new
name|ImmutableBytesWritable
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// not immutable
if|if
condition|(
name|hasher
operator|.
name|getBatchSize
argument_list|()
operator|>=
name|targetBatchSize
condition|)
block|{
name|hasher
operator|.
name|finishBatch
argument_list|()
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|hasher
operator|.
name|getBatchStartKey
argument_list|()
argument_list|,
name|hasher
operator|.
name|getBatchHash
argument_list|()
argument_list|)
expr_stmt|;
name|hasher
operator|.
name|startBatch
argument_list|(
name|currentRow
argument_list|)
expr_stmt|;
block|}
block|}
name|hasher
operator|.
name|hashResult
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|hasher
operator|.
name|finishBatch
argument_list|()
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|hasher
operator|.
name|getBatchStartKey
argument_list|()
argument_list|,
name|hasher
operator|.
name|getBatchHash
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeTempManifestFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|tempManifestPath
init|=
operator|new
name|Path
argument_list|(
name|destPath
argument_list|,
name|TMP_MANIFEST_FILE_NAME
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|tempManifestPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|tableHash
operator|.
name|writePropertiesFile
argument_list|(
name|fs
argument_list|,
name|tempManifestPath
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|completeManifest
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|tempManifestPath
init|=
operator|new
name|Path
argument_list|(
name|destPath
argument_list|,
name|TMP_MANIFEST_FILE_NAME
argument_list|)
decl_stmt|;
name|Path
name|manifestPath
init|=
operator|new
name|Path
argument_list|(
name|destPath
argument_list|,
name|MANIFEST_FILE_NAME
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|tempManifestPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|tempManifestPath
argument_list|,
name|manifestPath
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|int
name|NUM_ARGS
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|(
specifier|final
name|String
name|errorMsg
parameter_list|)
block|{
if|if
condition|(
name|errorMsg
operator|!=
literal|null
operator|&&
name|errorMsg
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: "
operator|+
name|errorMsg
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: HashTable [options]<tablename><outputpath>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Options:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" batchsize     the target amount of bytes to hash in each batch"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"               rows are added to the batch until this size is reached"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"               (defaults to "
operator|+
name|DEFAULT_BATCH_SIZE
operator|+
literal|" bytes)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" numhashfiles  the number of hash files to create"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"               if set to fewer than number of regions then"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"               the job will create this number of reducers"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"               (defaults to 1/100 of regions -- at least 1)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" startrow      the start row"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" stoprow       the stop row"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" starttime     beginning of the time range (unixtime in millis)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"               without endtime means from starttime to forever"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" endtime       end of the time range.  Ignored if no starttime specified."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" scanbatch     scanner batch size to support intra row scans"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" versions      number of cell versions to include"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" families      comma-separated list of families to include"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Args:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" tablename     Name of the table to hash"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" outputpath    Filesystem path to put the output data"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Examples:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" To hash 'TestTable' in 32kB batches for a 1 hour window into 50 files:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" $ hbase "
operator|+
literal|"org.apache.hadoop.hbase.mapreduce.HashTable --batchsize=32000 --numhashfiles=50"
operator|+
literal|" --starttime=1265875194289 --endtime=1265878794289 --families=cf2,cf3"
operator|+
literal|" TestTable /hashes/testTable"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|doCommandLine
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
name|NUM_ARGS
condition|)
block|{
name|printUsage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
name|tableHash
operator|.
name|tableName
operator|=
name|args
index|[
name|args
operator|.
name|length
operator|-
literal|2
index|]
expr_stmt|;
name|destPath
operator|=
operator|new
name|Path
argument_list|(
name|args
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
operator|-
name|NUM_ARGS
condition|;
name|i
operator|++
control|)
block|{
name|String
name|cmd
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
operator|||
name|cmd
operator|.
name|startsWith
argument_list|(
literal|"--h"
argument_list|)
condition|)
block|{
name|printUsage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|batchSizeArgKey
init|=
literal|"--batchsize="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|batchSizeArgKey
argument_list|)
condition|)
block|{
name|tableHash
operator|.
name|batchSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|batchSizeArgKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|numHashFilesArgKey
init|=
literal|"--numhashfiles="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|numHashFilesArgKey
argument_list|)
condition|)
block|{
name|tableHash
operator|.
name|numHashFiles
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|numHashFilesArgKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|startRowArgKey
init|=
literal|"--startrow="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|startRowArgKey
argument_list|)
condition|)
block|{
name|tableHash
operator|.
name|startRow
operator|=
name|Bytes
operator|.
name|fromHex
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|startRowArgKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|stopRowArgKey
init|=
literal|"--stoprow="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|stopRowArgKey
argument_list|)
condition|)
block|{
name|tableHash
operator|.
name|stopRow
operator|=
name|Bytes
operator|.
name|fromHex
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|stopRowArgKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|startTimeArgKey
init|=
literal|"--starttime="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|startTimeArgKey
argument_list|)
condition|)
block|{
name|tableHash
operator|.
name|startTime
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|startTimeArgKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|endTimeArgKey
init|=
literal|"--endtime="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|endTimeArgKey
argument_list|)
condition|)
block|{
name|tableHash
operator|.
name|endTime
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|endTimeArgKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|scanBatchArgKey
init|=
literal|"--scanbatch="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|scanBatchArgKey
argument_list|)
condition|)
block|{
name|tableHash
operator|.
name|scanBatch
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|scanBatchArgKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|versionsArgKey
init|=
literal|"--versions="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|versionsArgKey
argument_list|)
condition|)
block|{
name|tableHash
operator|.
name|versions
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|versionsArgKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|familiesArgKey
init|=
literal|"--families="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|familiesArgKey
argument_list|)
condition|)
block|{
name|tableHash
operator|.
name|families
operator|=
name|cmd
operator|.
name|substring
argument_list|(
name|familiesArgKey
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|printUsage
argument_list|(
literal|"Invalid argument '"
operator|+
name|cmd
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|tableHash
operator|.
name|startTime
operator|!=
literal|0
operator|||
name|tableHash
operator|.
name|endTime
operator|!=
literal|0
operator|)
operator|&&
operator|(
name|tableHash
operator|.
name|startTime
operator|>=
name|tableHash
operator|.
name|endTime
operator|)
condition|)
block|{
name|printUsage
argument_list|(
literal|"Invalid time range filter: starttime="
operator|+
name|tableHash
operator|.
name|startTime
operator|+
literal|">=  endtime="
operator|+
name|tableHash
operator|.
name|endTime
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|printUsage
argument_list|(
literal|"Can't start because "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Main entry point.    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|HashTable
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|otherArgs
init|=
operator|new
name|GenericOptionsParser
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|args
argument_list|)
operator|.
name|getRemainingArgs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|doCommandLine
argument_list|(
name|otherArgs
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
name|Job
name|job
init|=
name|createSubmittableJob
argument_list|(
name|otherArgs
argument_list|)
decl_stmt|;
name|writeTempManifestFile
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Map-reduce job failed!"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|completeManifest
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

