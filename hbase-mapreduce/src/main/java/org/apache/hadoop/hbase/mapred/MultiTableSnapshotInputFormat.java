begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|MultiTableSnapshotInputFormatImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableSnapshotInputFormatImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * MultiTableSnapshotInputFormat generalizes {@link org.apache.hadoop.hbase.mapred  * .TableSnapshotInputFormat}  * allowing a MapReduce job to run over one or more table snapshots, with one or more scans  * configured for each.  * Internally, the input format delegates to {@link org.apache.hadoop.hbase.mapreduce  * .TableSnapshotInputFormat}  * and thus has the same performance advantages; see {@link org.apache.hadoop.hbase.mapreduce  * .TableSnapshotInputFormat} for  * more details.  * Usage is similar to TableSnapshotInputFormat, with the following exception:  * initMultiTableSnapshotMapperJob takes in a map  * from snapshot name to a collection of scans. For each snapshot in the map, each corresponding  * scan will be applied;  * the overall dataset for the job is defined by the concatenation of the regions and tables  * included in each snapshot/scan  * pair.  * {@link TableMapReduceUtil#initMultiTableSnapshotMapperJob(Map,  * Class, Class, Class, JobConf, boolean, Path)}  * can be used to configure the job.  *<pre>{@code  * Job job = new Job(conf);  * Map<String, Collection<Scan>> snapshotScans = ImmutableMap.of(  *    "snapshot1", ImmutableList.of(new Scan(Bytes.toBytes("a"), Bytes.toBytes("b"))),  *    "snapshot2", ImmutableList.of(new Scan(Bytes.toBytes("1"), Bytes.toBytes("2")))  * );  * Path restoreDir = new Path("/tmp/snapshot_restore_dir")  * TableMapReduceUtil.initTableSnapshotMapperJob(  *     snapshotScans, MyTableMapper.class, MyMapKeyOutput.class,  *      MyMapOutputValueWritable.class, job, true, restoreDir);  * }  *</pre>  * Internally, this input format restores each snapshot into a subdirectory of the given tmp  * directory. Input splits and  * record readers are created as described in {@link org.apache.hadoop.hbase.mapreduce  * .TableSnapshotInputFormat}  * (one per region).  * See {@link org.apache.hadoop.hbase.mapreduce.TableSnapshotInputFormat} for more notes on  * permissioning; the  * same caveats apply here.  *  * @see org.apache.hadoop.hbase.mapreduce.TableSnapshotInputFormat  * @see org.apache.hadoop.hbase.client.TableSnapshotScanner  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|MultiTableSnapshotInputFormat
extends|extends
name|TableSnapshotInputFormat
implements|implements
name|InputFormat
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|>
block|{
specifier|private
specifier|final
name|MultiTableSnapshotInputFormatImpl
name|delegate
decl_stmt|;
specifier|public
name|MultiTableSnapshotInputFormat
parameter_list|()
block|{
name|this
operator|.
name|delegate
operator|=
operator|new
name|MultiTableSnapshotInputFormatImpl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|TableSnapshotInputFormatImpl
operator|.
name|InputSplit
argument_list|>
name|splits
init|=
name|delegate
operator|.
name|getSplits
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|InputSplit
index|[]
name|results
init|=
operator|new
name|InputSplit
index|[
name|splits
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|results
index|[
name|i
index|]
operator|=
operator|new
name|TableSnapshotRegionSplit
argument_list|(
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|TableSnapshotRecordReader
argument_list|(
operator|(
name|TableSnapshotRegionSplit
operator|)
name|split
argument_list|,
name|job
argument_list|)
return|;
block|}
comment|/**    * Configure conf to read from snapshotScans, with snapshots restored to a subdirectory of    * restoreDir.    * Sets: {@link org.apache.hadoop.hbase.mapreduce    * .MultiTableSnapshotInputFormatImpl#RESTORE_DIRS_KEY},    * {@link org.apache.hadoop.hbase.mapreduce    * .MultiTableSnapshotInputFormatImpl#SNAPSHOT_TO_SCANS_KEY}    *    * @param conf    * @param snapshotScans    * @param restoreDir    * @throws IOException    */
specifier|public
specifier|static
name|void
name|setInput
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Scan
argument_list|>
argument_list|>
name|snapshotScans
parameter_list|,
name|Path
name|restoreDir
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|MultiTableSnapshotInputFormatImpl
argument_list|()
operator|.
name|setInput
argument_list|(
name|conf
argument_list|,
name|snapshotScans
argument_list|,
name|restoreDir
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

