begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet6Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|BufferedMutator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|BufferedMutatorParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestTableInputFormatBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestTableInputFormatBase
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testTableInputFormatBaseReverseDNSForIPv6
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|String
name|address
init|=
literal|"ipv6.google.com"
decl_stmt|;
name|String
name|localhost
init|=
literal|null
decl_stmt|;
name|InetAddress
name|addr
init|=
literal|null
decl_stmt|;
name|TableInputFormat
name|inputFormat
init|=
operator|new
name|TableInputFormat
argument_list|()
decl_stmt|;
try|try
block|{
name|localhost
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|address
argument_list|)
operator|.
name|getCanonicalHostName
argument_list|()
expr_stmt|;
name|addr
operator|=
name|Inet6Address
operator|.
name|getByName
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
comment|// google.com is down, we can probably forgive this test.
return|return;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Should retrun the hostname for this host "
operator|+
name|localhost
operator|+
literal|" addr : "
operator|+
name|addr
argument_list|)
expr_stmt|;
name|String
name|actualHostName
init|=
name|inputFormat
operator|.
name|reverseDNS
argument_list|(
name|addr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should retrun the hostname for this host. Expected : "
operator|+
name|localhost
operator|+
literal|" Actual : "
operator|+
name|actualHostName
argument_list|,
name|localhost
argument_list|,
name|actualHostName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonSuccessiveSplitsAreNotMerged
parameter_list|()
throws|throws
name|IOException
block|{
name|JobContext
name|context
init|=
name|mock
argument_list|(
name|JobContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConnectionUtils
operator|.
name|HBASE_CLIENT_CONNECTION_IMPL
argument_list|,
name|ConnectionForMergeTesting
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableInputFormat
operator|.
name|INPUT_TABLE
argument_list|,
literal|"testTable"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|TableInputFormatBase
operator|.
name|MAPREDUCE_INPUT_AUTOBALANCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TableInputFormat
name|tifExclude
init|=
operator|new
name|TableInputFormatForMergeTesting
argument_list|()
decl_stmt|;
name|tifExclude
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// split["b", "c"] is excluded, split["o", "p"] and split["p", "q"] are merged,
comment|// but split["a", "b"] and split["c", "d"] are not merged.
name|assertEquals
argument_list|(
name|ConnectionForMergeTesting
operator|.
name|START_KEYS
operator|.
name|length
operator|-
literal|1
operator|-
literal|1
argument_list|,
name|tifExclude
operator|.
name|getSplits
argument_list|(
name|context
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Subclass of {@link TableInputFormat} to use in {@link #testNonSuccessiveSplitsAreNotMerged}.    * This class overrides {@link TableInputFormatBase#includeRegionInSplit}    * to exclude specific splits.    */
specifier|private
specifier|static
class|class
name|TableInputFormatForMergeTesting
extends|extends
name|TableInputFormat
block|{
specifier|private
name|byte
index|[]
name|prefixStartKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|prefixEndKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
specifier|private
name|RegionSizeCalculator
name|sizeCalculator
decl_stmt|;
comment|/**      * Exclude regions which contain rows starting with "b".      */
annotation|@
name|Override
specifier|protected
name|boolean
name|includeRegionInSplit
parameter_list|(
specifier|final
name|byte
index|[]
name|startKey
parameter_list|,
specifier|final
name|byte
index|[]
name|endKey
parameter_list|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|startKey
argument_list|,
name|prefixEndKey
argument_list|)
operator|<
literal|0
operator|&&
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|prefixStartKey
argument_list|,
name|endKey
argument_list|)
operator|<
literal|0
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|endKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeTable
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initializeTable
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|ConnectionForMergeTesting
name|cft
init|=
operator|(
name|ConnectionForMergeTesting
operator|)
name|connection
decl_stmt|;
name|sizeCalculator
operator|=
name|cft
operator|.
name|getRegionSizeCalculator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|RegionSizeCalculator
name|createRegionSizeCalculator
parameter_list|(
name|RegionLocator
name|locator
parameter_list|,
name|Admin
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|sizeCalculator
return|;
block|}
block|}
comment|/**    * Connection class to use in {@link #testNonSuccessiveSplitsAreNotMerged}.    * This class returns mocked {@link Table}, {@link RegionLocator}, {@link RegionSizeCalculator},    * and {@link Admin}.    */
specifier|private
specifier|static
class|class
name|ConnectionForMergeTesting
implements|implements
name|Connection
block|{
specifier|public
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|SPLITS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"e"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"h"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"j"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"k"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"l"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"m"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"n"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"o"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"p"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"s"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"t"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"u"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"w"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"x"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"y"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"z"
argument_list|)
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|START_KEYS
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|END_KEYS
decl_stmt|;
static|static
block|{
name|START_KEYS
operator|=
operator|new
name|byte
index|[
name|SPLITS
operator|.
name|length
operator|+
literal|1
index|]
index|[]
expr_stmt|;
name|START_KEYS
index|[
literal|0
index|]
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SPLITS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|START_KEYS
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|SPLITS
index|[
name|i
index|]
expr_stmt|;
block|}
name|END_KEYS
operator|=
operator|new
name|byte
index|[
name|SPLITS
operator|.
name|length
operator|+
literal|1
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SPLITS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|END_KEYS
index|[
name|i
index|]
operator|=
name|SPLITS
index|[
name|i
index|]
expr_stmt|;
block|}
name|END_KEYS
index|[
name|SPLITS
operator|.
name|length
index|]
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|SIZE_MAP
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
static|static
block|{
for|for
control|(
name|byte
index|[]
name|startKey
range|:
name|START_KEYS
control|)
block|{
name|SIZE_MAP
operator|.
name|put
argument_list|(
name|startKey
argument_list|,
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
argument_list|)
expr_stmt|;
block|}
name|SIZE_MAP
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|200L
operator|*
literal|1024L
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|SIZE_MAP
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
literal|200L
operator|*
literal|1024L
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|SIZE_MAP
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|,
literal|200L
operator|*
literal|1024L
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|SIZE_MAP
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"o"
argument_list|)
argument_list|,
literal|200L
operator|*
literal|1024L
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|SIZE_MAP
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"p"
argument_list|)
argument_list|,
literal|200L
operator|*
literal|1024L
operator|*
literal|1024L
argument_list|)
expr_stmt|;
block|}
name|ConnectionForMergeTesting
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|getTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|Table
name|table
init|=
name|mock
argument_list|(
name|Table
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|getTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|BufferedMutator
name|getBufferedMutator
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|BufferedMutator
name|getBufferedMutator
parameter_list|(
name|BufferedMutatorParams
name|params
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|RegionLocator
name|getRegionLocator
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|locationMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|startKey
range|:
name|START_KEYS
control|)
block|{
name|HRegionLocation
name|hrl
init|=
operator|new
name|HRegionLocation
argument_list|(
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|startKey
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"localhost"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|locationMap
operator|.
name|put
argument_list|(
name|startKey
argument_list|,
name|hrl
argument_list|)
expr_stmt|;
block|}
name|RegionLocator
name|locator
init|=
name|mock
argument_list|(
name|RegionLocator
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HRegionLocation
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
index|[]
name|args
init|=
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|byte
index|[]
name|key
init|=
operator|(
name|byte
index|[]
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
return|return
name|locationMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|locator
operator|.
name|getStartEndKeys
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
argument_list|(
name|START_KEYS
argument_list|,
name|END_KEYS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|locator
return|;
block|}
specifier|public
name|RegionSizeCalculator
name|getRegionSizeCalculator
parameter_list|()
block|{
name|RegionSizeCalculator
name|sizeCalculator
init|=
name|mock
argument_list|(
name|RegionSizeCalculator
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|sizeCalculator
operator|.
name|getRegionSize
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
index|[]
name|args
init|=
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|byte
index|[]
name|regionId
init|=
operator|(
name|byte
index|[]
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|startKey
init|=
name|RegionInfo
operator|.
name|getStartKey
argument_list|(
name|regionId
argument_list|)
decl_stmt|;
return|return
name|SIZE_MAP
operator|.
name|get
argument_list|(
name|startKey
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|sizeCalculator
return|;
block|}
annotation|@
name|Override
specifier|public
name|Admin
name|getAdmin
parameter_list|()
throws|throws
name|IOException
block|{
name|Admin
name|admin
init|=
name|mock
argument_list|(
name|Admin
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// return non-null admin to pass null checks
return|return
name|admin
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableBuilder
name|getTableBuilder
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearRegionLocationCache
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|AsyncConnection
name|toAsyncConnection
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

