begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
operator|.
name|SCAN_ATTRIBUTES_TABLE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|BufferedMutator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|BufferedMutatorParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_comment
comment|/**  * Tests of MultiTableInputFormatBase.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMultiTableInputFormatBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestMultiTableInputFormatBase
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
comment|/**    * Test getSplits only puts up one Connection.    * In past it has put up many Connections. Each Connection setup comes with a fresh new cache    * so we have to do fresh hit on hbase:meta. Should only do one Connection when doing getSplits    * even if a MultiTableInputFormat.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testMRSplitsConnectionCount
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Make instance of MTIFB.
name|MultiTableInputFormatBase
name|mtif
init|=
operator|new
name|MultiTableInputFormatBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|super
operator|.
name|createRecordReader
argument_list|(
name|split
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// Pass it a mocked JobContext. Make the JC return our Configuration.
comment|// Load the Configuration so it returns our special Connection so we can interpolate
comment|// canned responses.
name|JobContext
name|mockedJobContext
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|JobContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|c
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|ConnectionUtils
operator|.
name|HBASE_CLIENT_CONNECTION_IMPL
argument_list|,
name|MRSplitsConnection
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockedJobContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// Invent a bunch of scans. Have each Scan go against a different table so a good spread.
name|List
argument_list|<
name|Scan
argument_list|>
name|scans
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
name|i
decl_stmt|;
name|scan
operator|.
name|setAttribute
argument_list|(
name|SCAN_ATTRIBUTES_TABLE_NAME
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|scans
operator|.
name|add
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
name|mtif
operator|.
name|setScans
argument_list|(
name|scans
argument_list|)
expr_stmt|;
comment|// Get splits. Assert that that more than one.
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|mtif
operator|.
name|getSplits
argument_list|(
name|mockedJobContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|splits
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Assert only one Connection was made (see the static counter we have in the mocked
comment|// Connection MRSplitsConnection Constructor.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MRSplitsConnection
operator|.
name|creations
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Connection to use above in Test.    */
specifier|public
specifier|static
class|class
name|MRSplitsConnection
implements|implements
name|Connection
block|{
specifier|private
specifier|final
name|Configuration
name|configuration
decl_stmt|;
specifier|static
specifier|final
name|AtomicInteger
name|creations
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|MRSplitsConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|configuration
operator|=
name|conf
expr_stmt|;
name|creations
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{      }
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|configuration
return|;
block|}
annotation|@
name|Override
specifier|public
name|BufferedMutator
name|getBufferedMutator
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|BufferedMutator
name|getBufferedMutator
parameter_list|(
name|BufferedMutatorParams
name|params
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionLocator
name|getRegionLocator
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Make up array of start keys. We start off w/ empty byte array.
specifier|final
name|byte
index|[]
index|[]
name|startKeys
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaa"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fff"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ggg"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hhh"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"iii"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"lll"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mmm"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"nnn"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ooo"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ppp"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qqq"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rrr"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"sss"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ttt"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"uuu"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"vvv"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzz"
argument_list|)
block|}
decl_stmt|;
comment|// Make an array of end keys. We end with the empty byte array.
specifier|final
name|byte
index|[]
index|[]
name|endKeys
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaa"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fff"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ggg"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hhh"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"iii"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"lll"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mmm"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"nnn"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ooo"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ppp"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qqq"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rrr"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"sss"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ttt"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"uuu"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"vvv"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzz"
argument_list|)
block|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
block|}
decl_stmt|;
comment|// Now make a map of start keys to HRegionLocations. Let the server namber derive from
comment|// the start key.
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|startKey
range|:
name|startKeys
control|)
block|{
name|HRegionLocation
name|hrl
init|=
operator|new
name|HRegionLocation
argument_list|(
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|startKey
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ServerName
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|startKey
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|startKey
argument_list|,
name|hrl
argument_list|)
expr_stmt|;
block|}
comment|// Get a list of the locations.
specifier|final
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
comment|// Now make a RegionLocator mock backed by the abpve map and list of locations.
name|RegionLocator
name|mockedRegionLocator
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RegionLocator
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockedRegionLocator
operator|.
name|getRegionLocation
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HRegionLocation
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
index|[]
name|args
init|=
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|byte
index|[]
name|key
init|=
operator|(
name|byte
index|[]
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
return|return
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockedRegionLocator
operator|.
name|getAllRegionLocations
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|locations
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockedRegionLocator
operator|.
name|getStartEndKeys
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
argument_list|(
name|startKeys
argument_list|,
name|endKeys
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockedRegionLocator
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|mockedRegionLocator
return|;
block|}
annotation|@
name|Override
specifier|public
name|Admin
name|getAdmin
parameter_list|()
throws|throws
name|IOException
block|{
name|Admin
name|admin
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Admin
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|admin
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|admin
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|getTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|Table
name|table
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Table
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{      }
annotation|@
name|Override
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableBuilder
name|getTableBuilder
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
block|{
return|return
name|Mockito
operator|.
name|mock
argument_list|(
name|TableBuilder
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearRegionLocationCache
parameter_list|()
block|{     }
block|}
block|}
end_class

end_unit

