begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This file was forked from hadoop/common/branches/branch-2@1350012.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestJarFinder
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestJarFinder
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testJar
parameter_list|()
throws|throws
name|Exception
block|{
comment|//picking a class that is for sure in a JAR in the classpath
name|String
name|jar
init|=
name|JarFinder
operator|.
name|getJar
argument_list|(
name|LoggerFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|jar
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|delete
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|length
argument_list|()
operator|<
literal|5
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Path [{0}] is too short, not deleting"
argument_list|,
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|children
init|=
name|file
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|child
range|:
name|children
control|)
block|{
name|delete
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Could not delete path [{0}]"
argument_list|,
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpandedClasspath
parameter_list|()
throws|throws
name|Exception
block|{
comment|//picking a class that is for sure in a directory in the classpath
comment|//in this case the JAR is created on the fly
name|String
name|jar
init|=
name|JarFinder
operator|.
name|getJar
argument_list|(
name|TestJarFinder
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|jar
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExistingManifest
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.dir"
argument_list|,
literal|"target/test-dir"
argument_list|)
argument_list|,
name|TestJarFinder
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-testExistingManifest"
argument_list|)
decl_stmt|;
name|delete
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|metaInfDir
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"META-INF"
argument_list|)
decl_stmt|;
name|metaInfDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|manifestFile
init|=
operator|new
name|File
argument_list|(
name|metaInfDir
argument_list|,
literal|"MANIFEST.MF"
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
operator|new
name|Manifest
argument_list|()
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|manifestFile
argument_list|)
decl_stmt|;
name|manifest
operator|.
name|write
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|File
name|propsFile
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"props.properties"
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
name|propsFile
argument_list|)
decl_stmt|;
operator|new
name|Properties
argument_list|()
operator|.
name|store
argument_list|(
name|writer
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|JarOutputStream
name|zos
init|=
operator|new
name|JarOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|JarFinder
operator|.
name|jarDir
argument_list|(
name|dir
argument_list|,
literal|""
argument_list|,
name|zos
argument_list|)
expr_stmt|;
name|JarInputStream
name|jis
init|=
operator|new
name|JarInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jis
operator|.
name|getManifest
argument_list|()
argument_list|)
expr_stmt|;
name|jis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoManifest
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.dir"
argument_list|,
literal|"target/test-dir"
argument_list|)
argument_list|,
name|TestJarFinder
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-testNoManifest"
argument_list|)
decl_stmt|;
name|delete
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|propsFile
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"props.properties"
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
name|propsFile
argument_list|)
decl_stmt|;
operator|new
name|Properties
argument_list|()
operator|.
name|store
argument_list|(
name|writer
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|JarOutputStream
name|zos
init|=
operator|new
name|JarOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|JarFinder
operator|.
name|jarDir
argument_list|(
name|dir
argument_list|,
literal|""
argument_list|,
name|zos
argument_list|)
expr_stmt|;
name|JarInputStream
name|jis
init|=
operator|new
name|JarInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jis
operator|.
name|getManifest
argument_list|()
argument_list|)
expr_stmt|;
name|jis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

