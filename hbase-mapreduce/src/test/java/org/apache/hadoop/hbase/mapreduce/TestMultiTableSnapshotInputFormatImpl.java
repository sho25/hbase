begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMultiTableSnapshotInputFormatImpl
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestMultiTableSnapshotInputFormatImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MultiTableSnapshotInputFormatImpl
name|subject
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Scan
argument_list|>
argument_list|>
name|snapshotScans
decl_stmt|;
specifier|private
name|Path
name|restoreDir
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|Path
name|rootDir
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|subject
operator|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|MultiTableSnapshotInputFormatImpl
argument_list|()
argument_list|)
expr_stmt|;
comment|// mock out restoreSnapshot
comment|// TODO: this is kind of meh; it'd be much nicer to just inject the RestoreSnapshotHelper
comment|// dependency into the
comment|// input format. However, we need a new RestoreSnapshotHelper per snapshot in the current
comment|// design, and it *also*
comment|// feels weird to introduce a RestoreSnapshotHelperFactory and inject that, which would
comment|// probably be the more "pure"
comment|// way of doing things. This is the lesser of two evils, perhaps?
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|this
operator|.
name|subject
argument_list|)
operator|.
name|restoreSnapshot
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
operator|new
name|Path
argument_list|(
literal|"file:///test-root-dir"
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|conf
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotScans
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|Collection
argument_list|<
name|Scan
argument_list|>
operator|>
name|of
argument_list|(
literal|"snapshot1"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"snapshot2"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"6"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|restoreDir
operator|=
operator|new
name|Path
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|"restore-dir"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|callSetInput
parameter_list|()
throws|throws
name|IOException
block|{
name|subject
operator|.
name|setInput
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|snapshotScans
argument_list|,
name|restoreDir
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|ScanWithEquals
argument_list|>
argument_list|>
name|toScanWithEquals
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Scan
argument_list|>
argument_list|>
name|snapshotScans
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|ScanWithEquals
argument_list|>
argument_list|>
name|rtn
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Scan
argument_list|>
argument_list|>
name|entry
range|:
name|snapshotScans
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ScanWithEquals
argument_list|>
name|scans
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Scan
name|scan
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|scans
operator|.
name|add
argument_list|(
operator|new
name|ScanWithEquals
argument_list|(
name|scan
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rtn
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|scans
argument_list|)
expr_stmt|;
block|}
return|return
name|rtn
return|;
block|}
specifier|public
specifier|static
class|class
name|ScanWithEquals
block|{
specifier|private
specifier|final
name|String
name|startRow
decl_stmt|;
specifier|private
specifier|final
name|String
name|stopRow
decl_stmt|;
comment|/**      * Creates a new instance of this class while copying all values.      *      * @param scan The scan instance to copy from.      * @throws java.io.IOException When copying the values fails.      */
specifier|public
name|ScanWithEquals
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|startRow
operator|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|ScanWithEquals
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ScanWithEquals
name|otherScan
init|=
operator|(
name|ScanWithEquals
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|startRow
argument_list|,
name|otherScan
operator|.
name|startRow
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|stopRow
argument_list|,
name|otherScan
operator|.
name|stopRow
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|toStringHelper
argument_list|(
name|this
argument_list|)
operator|.
name|add
argument_list|(
literal|"startRow"
argument_list|,
name|startRow
argument_list|)
operator|.
name|add
argument_list|(
literal|"stopRow"
argument_list|,
name|stopRow
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetInputSetsSnapshotToScans
parameter_list|()
throws|throws
name|Exception
block|{
name|callSetInput
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Scan
argument_list|>
argument_list|>
name|actual
init|=
name|subject
operator|.
name|getSnapshotsToScans
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// convert to scans we can use .equals on
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|ScanWithEquals
argument_list|>
argument_list|>
name|actualWithEquals
init|=
name|toScanWithEquals
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|ScanWithEquals
argument_list|>
argument_list|>
name|expectedWithEquals
init|=
name|toScanWithEquals
argument_list|(
name|snapshotScans
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedWithEquals
argument_list|,
name|actualWithEquals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetInputPushesRestoreDirectories
parameter_list|()
throws|throws
name|Exception
block|{
name|callSetInput
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|restoreDirs
init|=
name|subject
operator|.
name|getSnapshotDirs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|snapshotScans
operator|.
name|keySet
argument_list|()
argument_list|,
name|restoreDirs
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetInputCreatesRestoreDirectoriesUnderRootRestoreDir
parameter_list|()
throws|throws
name|Exception
block|{
name|callSetInput
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|restoreDirs
init|=
name|subject
operator|.
name|getSnapshotDirs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|snapshotDir
range|:
name|restoreDirs
operator|.
name|values
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|snapshotDir
operator|+
literal|" to be a child of "
operator|+
name|restoreDir
argument_list|,
name|restoreDir
argument_list|,
name|snapshotDir
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetInputRestoresSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
name|callSetInput
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|snapshotDirs
init|=
name|subject
operator|.
name|getSnapshotDirs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|entry
range|:
name|snapshotDirs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|verify
argument_list|(
name|this
operator|.
name|subject
argument_list|)
operator|.
name|restoreSnapshot
argument_list|(
name|eq
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|,
name|eq
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|eq
argument_list|(
name|this
operator|.
name|rootDir
argument_list|)
argument_list|,
name|eq
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

