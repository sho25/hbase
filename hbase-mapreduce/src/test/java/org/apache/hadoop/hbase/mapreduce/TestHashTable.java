begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * Basic test for the HashTable M/R tool  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHashTable
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestHashTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHashTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|column1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|column2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|column3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c3"
argument_list|)
decl_stmt|;
name|int
name|numRows
init|=
literal|100
decl_stmt|;
name|int
name|numRegions
init|=
literal|10
decl_stmt|;
name|int
name|numHashFiles
init|=
literal|3
decl_stmt|;
name|byte
index|[]
index|[]
name|splitRows
init|=
operator|new
name|byte
index|[
name|numRegions
operator|-
literal|1
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numRegions
condition|;
name|i
operator|++
control|)
block|{
name|splitRows
index|[
name|i
operator|-
literal|1
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|numRows
operator|*
name|i
operator|/
name|numRegions
argument_list|)
expr_stmt|;
block|}
name|long
name|timestamp
init|=
literal|1430764183454L
decl_stmt|;
comment|// put rows into the first table
name|Table
name|t1
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|family
argument_list|,
name|splitRows
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|column1
argument_list|,
name|column1
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|column2
argument_list|,
name|column2
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|column3
argument_list|,
name|column3
argument_list|)
expr_stmt|;
name|t1
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|t1
operator|.
name|close
argument_list|()
expr_stmt|;
name|HashTable
name|hashTable
init|=
operator|new
name|HashTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|testDir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDirOnTestFS
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|batchSize
init|=
literal|300
decl_stmt|;
name|int
name|code
init|=
name|hashTable
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--batchsize="
operator|+
name|batchSize
block|,
literal|"--numhashfiles="
operator|+
name|numHashFiles
block|,
literal|"--scanbatch=2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|,
name|testDir
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test job failed"
argument_list|,
literal|0
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|HashTable
operator|.
name|TableHash
name|tableHash
init|=
name|HashTable
operator|.
name|TableHash
operator|.
name|read
argument_list|(
name|fs
operator|.
name|getConf
argument_list|()
argument_list|,
name|testDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|tableHash
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|batchSize
argument_list|,
name|tableHash
operator|.
name|batchSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numHashFiles
argument_list|,
name|tableHash
operator|.
name|numHashFiles
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numHashFiles
operator|-
literal|1
argument_list|,
name|tableHash
operator|.
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ImmutableBytesWritable
name|bytes
range|:
name|tableHash
operator|.
name|partitions
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"partition: "
operator|+
name|Bytes
operator|.
name|toInt
argument_list|(
name|bytes
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ImmutableMap
argument_list|<
name|Integer
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|expectedHashes
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|ImmutableBytesWritable
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
operator|-
literal|1
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"714cb10a9e3b5569852980edd8c6ca2f"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|5
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"28d961d9252ce8f8d44a07b38d3e1d96"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|10
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"f6bbc4a224d8fd929b783a92599eaffa"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|15
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"522deb5d97f73a414ecc11457be46881"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|20
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"b026f2611aaa46f7110116d807545352"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|25
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"39ffc1a3094aa12a2e90ffd9cef2ce93"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|30
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"f6b4d75727ce9a30ac29e4f08f601666"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|35
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"422e2d2f1eb79a8f02171a705a42c090"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|40
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"559ad61c900fffefea0a15abf8a97bc3"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|45
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"23019084513eca41cee436b2a29611cb"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|50
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"b40467d222ddb4949b142fe145ee9edc"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|55
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"372bf89fcd8ca4b7ab3c1add9d07f7e4"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|60
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"69ae0585e6255de27dce974e332b8f8b"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|65
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"8029610044297aad0abdbecd485d8e59"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|70
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"de5f784f7f78987b6e57ecfd81c8646f"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|75
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"1cd757cc4e1715c8c3b1c24447a1ec56"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|80
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"f9a53aacfeb6142b08066615e7038095"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|85
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"89b872b7e639df32d3276b33928c0c91"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|90
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"45eeac0646d46a474ea0484175faed38"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|95
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|Bytes
operator|.
name|fromHex
argument_list|(
literal|"f57c447e32a08f4bf1abb2892839ac56"
argument_list|)
argument_list|)
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|ImmutableBytesWritable
argument_list|>
name|actualHashes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Path
name|dataDir
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
name|HashTable
operator|.
name|HASH_DATA_DIR
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numHashFiles
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|hashPath
init|=
operator|new
name|Path
argument_list|(
name|dataDir
argument_list|,
name|HashTable
operator|.
name|TableHash
operator|.
name|getDataFileName
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|MapFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|MapFile
operator|.
name|Reader
argument_list|(
name|hashPath
argument_list|,
name|fs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableBytesWritable
name|key
init|=
operator|new
name|ImmutableBytesWritable
argument_list|()
decl_stmt|;
name|ImmutableBytesWritable
name|hash
init|=
operator|new
name|ImmutableBytesWritable
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|hash
argument_list|)
condition|)
block|{
name|String
name|keyString
init|=
name|Bytes
operator|.
name|toHex
argument_list|(
name|key
operator|.
name|get
argument_list|()
argument_list|,
name|key
operator|.
name|getOffset
argument_list|()
argument_list|,
name|key
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Key: "
operator|+
operator|(
name|keyString
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"-1"
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|keyString
argument_list|,
literal|16
argument_list|)
operator|)
operator|+
literal|" Hash: "
operator|+
name|Bytes
operator|.
name|toHex
argument_list|(
name|hash
operator|.
name|get
argument_list|()
argument_list|,
name|hash
operator|.
name|getOffset
argument_list|()
argument_list|,
name|hash
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|intKey
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|intKey
operator|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|key
operator|.
name|get
argument_list|()
argument_list|,
name|key
operator|.
name|getOffset
argument_list|()
argument_list|,
name|key
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|actualHashes
operator|.
name|containsKey
argument_list|(
name|intKey
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"duplicate key in data files: "
operator|+
name|intKey
argument_list|)
expr_stmt|;
block|}
name|actualHashes
operator|.
name|put
argument_list|(
name|intKey
argument_list|,
operator|new
name|ImmutableBytesWritable
argument_list|(
name|hash
operator|.
name|copyBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|testDir
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Output file: "
operator|+
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|files
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data file: "
operator|+
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|expectedHashes
operator|.
name|equals
argument_list|(
name|actualHashes
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Diff: "
operator|+
name|Maps
operator|.
name|difference
argument_list|(
name|expectedHashes
argument_list|,
name|actualHashes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedHashes
argument_list|,
name|actualHashes
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|cleanupDataTestDirOnTestFS
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

