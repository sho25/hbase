begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|replication
operator|.
name|VerifyReplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotTestingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestVerifyReplication
extends|extends
name|TestReplicationBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestVerifyReplication
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestVerifyReplication
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PEER_ID
init|=
literal|"2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|peerTableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"peerTest"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Table
name|htable3
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanUp
argument_list|()
expr_stmt|;
name|utility2
operator|.
name|deleteTableData
argument_list|(
name|peerTableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TestReplicationBase
operator|.
name|setUpBeforeClass
argument_list|()
expr_stmt|;
name|TableDescriptor
name|peerTable
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|peerTableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|noRepfamName
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Connection
name|connection2
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
try|try
init|(
name|Admin
name|admin2
init|=
name|connection2
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin2
operator|.
name|createTable
argument_list|(
name|peerTable
argument_list|,
name|HBaseTestingUtility
operator|.
name|KEYS_FOR_HBA_CREATE_TABLE
argument_list|)
expr_stmt|;
block|}
name|htable3
operator|=
name|connection2
operator|.
name|getTable
argument_list|(
name|peerTableName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runVerifyReplication
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|expectedGoodRows
parameter_list|,
name|int
name|expectedBadRows
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|Job
name|job
init|=
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|createSubmittableJob
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf1
argument_list|)
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Job wasn't created, see the log"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Job failed, see the log"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedGoodRows
argument_list|,
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|VerifyReplication
operator|.
name|Verifier
operator|.
name|Counters
operator|.
name|GOODROWS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBadRows
argument_list|,
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|VerifyReplication
operator|.
name|Verifier
operator|.
name|Counters
operator|.
name|BADROWS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Do a small loading into a table, make sure the data is really the same, then run the    * VerifyReplication job to check the results. Do a second comparison where all the cells are    * different.    */
annotation|@
name|Test
specifier|public
name|void
name|testVerifyRepJob
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Populate the tables, at the same time it guarantees that the tables are
comment|// identical since it does the check
name|runSmallBatchTest
argument_list|()
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
name|PEER_ID
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|rs
init|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|rs
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|firstVal
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|firstVal
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|firstVal
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"diff data"
argument_list|)
argument_list|)
expr_stmt|;
name|htable2
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|htable2
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
block|}
comment|/**    * Load a row into a table, make sure the data is really the same, delete the row, make sure the    * delete marker is replicated, run verify replication with and without raw to check the results.    */
annotation|@
name|Test
specifier|public
name|void
name|testVerifyRepJobWithRawOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|familyname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam_raw"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_raw"
argument_list|)
decl_stmt|;
name|Table
name|lHtable1
init|=
literal|null
decl_stmt|;
name|Table
name|lHtable2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ColumnFamilyDescriptor
name|fam
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|familyname
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TableDescriptor
name|table
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|fam
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|scopes
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|f
range|:
name|table
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|scopes
operator|.
name|put
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|f
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Connection
name|connection1
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|Connection
name|connection2
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
try|try
init|(
name|Admin
name|admin1
init|=
name|connection1
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin1
operator|.
name|createTable
argument_list|(
name|table
argument_list|,
name|HBaseTestingUtility
operator|.
name|KEYS_FOR_HBA_CREATE_TABLE
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Admin
name|admin2
init|=
name|connection2
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin2
operator|.
name|createTable
argument_list|(
name|table
argument_list|,
name|HBaseTestingUtility
operator|.
name|KEYS_FOR_HBA_CREATE_TABLE
argument_list|)
expr_stmt|;
block|}
name|utility1
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|utility2
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|lHtable1
operator|=
name|utility1
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|lHtable2
operator|=
name|utility2
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|familyname
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|lHtable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for put replication"
argument_list|)
expr_stmt|;
block|}
name|Result
name|res
init|=
name|lHtable2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not available"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertArrayEquals
argument_list|(
name|res
operator|.
name|value
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|lHtable1
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for del replication"
argument_list|)
expr_stmt|;
block|}
name|Result
name|res
init|=
name|lHtable2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not deleted"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
comment|// Checking verifyReplication for the default behavior.
name|String
index|[]
name|argsWithoutRaw
init|=
operator|new
name|String
index|[]
block|{
name|PEER_ID
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|runVerifyReplication
argument_list|(
name|argsWithoutRaw
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Checking verifyReplication with raw
name|String
index|[]
name|argsWithRawAsTrue
init|=
operator|new
name|String
index|[]
block|{
literal|"--raw"
block|,
name|PEER_ID
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|runVerifyReplication
argument_list|(
name|argsWithRawAsTrue
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|lHtable1
operator|!=
literal|null
condition|)
block|{
name|lHtable1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lHtable2
operator|!=
literal|null
condition|)
block|{
name|lHtable2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// VerifyReplication should honor versions option
annotation|@
name|Test
specifier|public
name|void
name|testHBase14905
parameter_list|()
throws|throws
name|Exception
block|{
comment|// normal Batch tests
name|byte
index|[]
name|qualifierName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1002"
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1001"
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|ts
operator|+
literal|3
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1112"
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|readVersions
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner1
init|=
name|htable1
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
index|[]
name|res1
init|=
name|scanner1
operator|.
name|next
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|scanner1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res1
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|res1
index|[
literal|0
index|]
operator|.
name|getColumnCells
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|readVersions
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|scanner1
operator|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|res1
operator|=
name|scanner1
operator|.
name|next
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scanner1
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|res1
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Only got "
operator|+
name|res1
operator|.
name|length
operator|+
literal|" rows"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|cellNumber
init|=
name|res1
index|[
literal|0
index|]
operator|.
name|getColumnCells
argument_list|(
name|famName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|cellNumber
operator|!=
literal|3
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Only got "
operator|+
name|cellNumber
operator|+
literal|" cells"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for normal batch replication"
argument_list|)
expr_stmt|;
block|}
block|}
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|ts
operator|+
literal|4
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1111"
argument_list|)
argument_list|)
expr_stmt|;
name|htable2
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|ts
operator|+
literal|5
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1112"
argument_list|)
argument_list|)
expr_stmt|;
name|htable2
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|readVersions
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|scanner1
operator|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|res1
operator|=
name|scanner1
operator|.
name|next
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
name|scanner1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res1
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|res1
index|[
literal|0
index|]
operator|.
name|getColumnCells
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"--versions=100"
block|,
name|PEER_ID
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// VerifyReplication should honor versions option
annotation|@
name|Test
specifier|public
name|void
name|testVersionMismatchHBase14905
parameter_list|()
throws|throws
name|Exception
block|{
comment|// normal Batch tests
name|byte
index|[]
name|qualifierName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|ts
operator|+
literal|3
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v3"
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|readVersions
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner1
init|=
name|htable1
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
index|[]
name|res1
init|=
name|scanner1
operator|.
name|next
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|scanner1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res1
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|res1
index|[
literal|0
index|]
operator|.
name|getColumnCells
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|readVersions
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|scanner1
operator|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|res1
operator|=
name|scanner1
operator|.
name|next
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scanner1
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|res1
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Only got "
operator|+
name|res1
operator|.
name|length
operator|+
literal|" rows"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|cellNumber
init|=
name|res1
index|[
literal|0
index|]
operator|.
name|getColumnCells
argument_list|(
name|famName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|cellNumber
operator|!=
literal|3
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Only got "
operator|+
name|cellNumber
operator|+
literal|" cells"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for normal batch replication"
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
comment|// Disabling replication and modifying the particular version of the cell to validate the
comment|// feature.
name|hbaseAdmin
operator|.
name|disableReplicationPeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|put2
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v99"
argument_list|)
argument_list|)
expr_stmt|;
name|htable2
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|readVersions
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|scanner1
operator|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|res1
operator|=
name|scanner1
operator|.
name|next
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
name|scanner1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res1
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|res1
index|[
literal|0
index|]
operator|.
name|getColumnCells
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"--versions=100"
block|,
name|PEER_ID
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hbaseAdmin
operator|.
name|enableReplicationPeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerifyReplicationPrefixFiltering
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|prefixRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"prefixrow"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|prefixRow2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"secondrow"
argument_list|)
decl_stmt|;
name|loadData
argument_list|(
literal|"prefixrow"
argument_list|,
name|prefixRow
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
literal|"secondrow"
argument_list|,
name|prefixRow2
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
literal|"aaa"
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
literal|"zzz"
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|waitForReplication
argument_list|(
name|NB_ROWS_IN_BATCH
operator|*
literal|4
argument_list|,
name|NB_RETRIES
operator|*
literal|4
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"--row-prefixes=prefixrow,secondrow"
block|,
name|PEER_ID
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
name|NB_ROWS_IN_BATCH
operator|*
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerifyReplicationSnapshotArguments
parameter_list|()
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"--sourceSnapshotName=snapshot1"
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|assertFalse
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|args
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|doCommandLine
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--sourceSnapshotTmpDir=tmp"
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
expr_stmt|;
name|assertFalse
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|args
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|doCommandLine
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--sourceSnapshotName=snapshot1"
block|,
literal|"--sourceSnapshotTmpDir=tmp"
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
expr_stmt|;
name|assertTrue
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|args
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|doCommandLine
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--peerSnapshotName=snapshot1"
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
expr_stmt|;
name|assertFalse
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|args
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|doCommandLine
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--peerSnapshotTmpDir=/tmp/"
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
expr_stmt|;
name|assertFalse
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|args
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|doCommandLine
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--peerSnapshotName=snapshot1"
block|,
literal|"--peerSnapshotTmpDir=/tmp/"
block|,
literal|"--peerFSAddress=tempfs"
block|,
literal|"--peerHBaseRootAddress=hdfs://tempfs:50070/hbase/"
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
expr_stmt|;
name|assertTrue
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|args
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|doCommandLine
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--sourceSnapshotName=snapshot1"
block|,
literal|"--sourceSnapshotTmpDir=/tmp/"
block|,
literal|"--peerSnapshotName=snapshot2"
block|,
literal|"--peerSnapshotTmpDir=/tmp/"
block|,
literal|"--peerFSAddress=tempfs"
block|,
literal|"--peerHBaseRootAddress=hdfs://tempfs:50070/hbase/"
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
expr_stmt|;
name|assertTrue
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|args
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|doCommandLine
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkRestoreTmpDir
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|restoreTmpDir
parameter_list|,
name|int
name|expectedCount
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|subDirectories
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|restoreTmpDir
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|subDirectories
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|subDirectories
operator|.
name|length
argument_list|,
name|expectedCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedCount
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|subDirectories
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerifyReplicationWithSnapshotSupport
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Populate the tables, at the same time it guarantees that the tables are
comment|// identical since it does the check
name|runSmallBatchTest
argument_list|()
expr_stmt|;
comment|// Take source and target tables snapshot
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|String
name|sourceSnapshotName
init|=
literal|"sourceSnapshot-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|SnapshotTestingUtils
operator|.
name|createSnapshotAndValidate
argument_list|(
name|utility1
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|famName
argument_list|)
argument_list|,
name|sourceSnapshotName
argument_list|,
name|rootDir
argument_list|,
name|fs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Take target snapshot
name|Path
name|peerRootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|FileSystem
name|peerFs
init|=
name|peerRootDir
operator|.
name|getFileSystem
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|String
name|peerSnapshotName
init|=
literal|"peerSnapshot-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|SnapshotTestingUtils
operator|.
name|createSnapshotAndValidate
argument_list|(
name|utility2
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|famName
argument_list|)
argument_list|,
name|peerSnapshotName
argument_list|,
name|peerRootDir
argument_list|,
name|peerFs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|peerFSAddress
init|=
name|peerFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|temPath1
init|=
name|utility1
operator|.
name|getRandomDir
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|temPath2
init|=
literal|"/tmp"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"--sourceSnapshotName="
operator|+
name|sourceSnapshotName
block|,
literal|"--sourceSnapshotTmpDir="
operator|+
name|temPath1
block|,
literal|"--peerSnapshotName="
operator|+
name|peerSnapshotName
block|,
literal|"--peerSnapshotTmpDir="
operator|+
name|temPath2
block|,
literal|"--peerFSAddress="
operator|+
name|peerFSAddress
block|,
literal|"--peerHBaseRootAddress="
operator|+
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf2
argument_list|)
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkRestoreTmpDir
argument_list|(
name|conf1
argument_list|,
name|temPath1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkRestoreTmpDir
argument_list|(
name|conf2
argument_list|,
name|temPath2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|rs
init|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|rs
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|firstVal
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|firstVal
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|firstVal
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"diff data"
argument_list|)
argument_list|)
expr_stmt|;
name|htable2
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|htable2
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|sourceSnapshotName
operator|=
literal|"sourceSnapshot-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|createSnapshotAndValidate
argument_list|(
name|utility1
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|famName
argument_list|)
argument_list|,
name|sourceSnapshotName
argument_list|,
name|rootDir
argument_list|,
name|fs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|peerSnapshotName
operator|=
literal|"peerSnapshot-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|createSnapshotAndValidate
argument_list|(
name|utility2
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|famName
argument_list|)
argument_list|,
name|peerSnapshotName
argument_list|,
name|peerRootDir
argument_list|,
name|peerFs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--sourceSnapshotName="
operator|+
name|sourceSnapshotName
block|,
literal|"--sourceSnapshotTmpDir="
operator|+
name|temPath1
block|,
literal|"--peerSnapshotName="
operator|+
name|peerSnapshotName
block|,
literal|"--peerSnapshotTmpDir="
operator|+
name|temPath2
block|,
literal|"--peerFSAddress="
operator|+
name|peerFSAddress
block|,
literal|"--peerHBaseRootAddress="
operator|+
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf2
argument_list|)
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
expr_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
name|checkRestoreTmpDir
argument_list|(
name|conf1
argument_list|,
name|temPath1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkRestoreTmpDir
argument_list|(
name|conf2
argument_list|,
name|temPath2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerifyRepJobWithQuorumAddress
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Populate the tables, at the same time it guarantees that the tables are
comment|// identical since it does the check
name|runSmallBatchTest
argument_list|()
expr_stmt|;
comment|// with a quorum address (a cluster key)
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
name|utility2
operator|.
name|getClusterKey
argument_list|()
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|rs
init|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|rs
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|firstVal
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|firstVal
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|firstVal
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"diff data"
argument_list|)
argument_list|)
expr_stmt|;
name|htable2
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|htable2
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerifyRepJobWithQuorumAddressAndSnapshotSupport
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Populate the tables, at the same time it guarantees that the tables are
comment|// identical since it does the check
name|runSmallBatchTest
argument_list|()
expr_stmt|;
comment|// Take source and target tables snapshot
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|String
name|sourceSnapshotName
init|=
literal|"sourceSnapshot-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|SnapshotTestingUtils
operator|.
name|createSnapshotAndValidate
argument_list|(
name|utility1
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|famName
argument_list|)
argument_list|,
name|sourceSnapshotName
argument_list|,
name|rootDir
argument_list|,
name|fs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Take target snapshot
name|Path
name|peerRootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|FileSystem
name|peerFs
init|=
name|peerRootDir
operator|.
name|getFileSystem
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|String
name|peerSnapshotName
init|=
literal|"peerSnapshot-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|SnapshotTestingUtils
operator|.
name|createSnapshotAndValidate
argument_list|(
name|utility2
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|famName
argument_list|)
argument_list|,
name|peerSnapshotName
argument_list|,
name|peerRootDir
argument_list|,
name|peerFs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|peerFSAddress
init|=
name|peerFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tmpPath1
init|=
name|utility1
operator|.
name|getRandomDir
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tmpPath2
init|=
literal|"/tmp"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"--sourceSnapshotName="
operator|+
name|sourceSnapshotName
block|,
literal|"--sourceSnapshotTmpDir="
operator|+
name|tmpPath1
block|,
literal|"--peerSnapshotName="
operator|+
name|peerSnapshotName
block|,
literal|"--peerSnapshotTmpDir="
operator|+
name|tmpPath2
block|,
literal|"--peerFSAddress="
operator|+
name|peerFSAddress
block|,
literal|"--peerHBaseRootAddress="
operator|+
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf2
argument_list|)
block|,
name|utility2
operator|.
name|getClusterKey
argument_list|()
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkRestoreTmpDir
argument_list|(
name|conf1
argument_list|,
name|tmpPath1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkRestoreTmpDir
argument_list|(
name|conf2
argument_list|,
name|tmpPath2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|rs
init|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|rs
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|firstVal
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|firstVal
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|firstVal
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"diff data"
argument_list|)
argument_list|)
expr_stmt|;
name|htable2
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|htable2
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|sourceSnapshotName
operator|=
literal|"sourceSnapshot-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|createSnapshotAndValidate
argument_list|(
name|utility1
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|famName
argument_list|)
argument_list|,
name|sourceSnapshotName
argument_list|,
name|rootDir
argument_list|,
name|fs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|peerSnapshotName
operator|=
literal|"peerSnapshot-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|createSnapshotAndValidate
argument_list|(
name|utility2
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|famName
argument_list|)
argument_list|,
name|peerSnapshotName
argument_list|,
name|peerRootDir
argument_list|,
name|peerFs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--sourceSnapshotName="
operator|+
name|sourceSnapshotName
block|,
literal|"--sourceSnapshotTmpDir="
operator|+
name|tmpPath1
block|,
literal|"--peerSnapshotName="
operator|+
name|peerSnapshotName
block|,
literal|"--peerSnapshotTmpDir="
operator|+
name|tmpPath2
block|,
literal|"--peerFSAddress="
operator|+
name|peerFSAddress
block|,
literal|"--peerHBaseRootAddress="
operator|+
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf2
argument_list|)
block|,
name|utility2
operator|.
name|getClusterKey
argument_list|()
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
expr_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
name|checkRestoreTmpDir
argument_list|(
name|conf1
argument_list|,
name|tmpPath1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkRestoreTmpDir
argument_list|(
name|conf2
argument_list|,
name|tmpPath2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|runBatchCopyTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// normal Batch tests for htable1
name|loadData
argument_list|(
literal|""
argument_list|,
name|row
argument_list|,
name|noRepfamName
argument_list|)
expr_stmt|;
name|Scan
name|scan1
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner1
init|=
name|htable1
operator|.
name|getScanner
argument_list|(
name|scan1
argument_list|)
decl_stmt|;
name|Result
index|[]
name|res1
init|=
name|scanner1
operator|.
name|next
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|res1
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|result
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|scanner1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|,
name|res1
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Copy the data to htable3
name|htable3
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|Scan
name|scan2
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanner2
init|=
name|htable3
operator|.
name|getScanner
argument_list|(
name|scan2
argument_list|)
decl_stmt|;
name|Result
index|[]
name|res2
init|=
name|scanner2
operator|.
name|next
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|)
decl_stmt|;
name|scanner2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|,
name|res2
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerifyRepJobWithPeerTableName
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Populate the tables with same data
name|runBatchCopyTest
argument_list|()
expr_stmt|;
comment|// with a peerTableName along with quorum address (a cluster key)
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"--peerTableName="
operator|+
name|peerTableName
operator|.
name|getNameAsString
argument_list|()
block|,
name|utility2
operator|.
name|getClusterKey
argument_list|()
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|utility2
operator|.
name|deleteTableData
argument_list|(
name|peerTableName
argument_list|)
expr_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerifyRepJobWithPeerTableNameAndSnapshotSupport
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Populate the tables with same data
name|runBatchCopyTest
argument_list|()
expr_stmt|;
comment|// Take source and target tables snapshot
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|String
name|sourceSnapshotName
init|=
literal|"sourceSnapshot-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|SnapshotTestingUtils
operator|.
name|createSnapshotAndValidate
argument_list|(
name|utility1
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|noRepfamName
argument_list|)
argument_list|,
name|sourceSnapshotName
argument_list|,
name|rootDir
argument_list|,
name|fs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Take target snapshot
name|Path
name|peerRootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|FileSystem
name|peerFs
init|=
name|peerRootDir
operator|.
name|getFileSystem
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|String
name|peerSnapshotName
init|=
literal|"peerSnapshot-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|SnapshotTestingUtils
operator|.
name|createSnapshotAndValidate
argument_list|(
name|utility2
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|peerTableName
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|noRepfamName
argument_list|)
argument_list|,
name|peerSnapshotName
argument_list|,
name|peerRootDir
argument_list|,
name|peerFs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|peerFSAddress
init|=
name|peerFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tmpPath1
init|=
name|utility1
operator|.
name|getRandomDir
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tmpPath2
init|=
literal|"/tmp"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"--peerTableName="
operator|+
name|peerTableName
operator|.
name|getNameAsString
argument_list|()
block|,
literal|"--sourceSnapshotName="
operator|+
name|sourceSnapshotName
block|,
literal|"--sourceSnapshotTmpDir="
operator|+
name|tmpPath1
block|,
literal|"--peerSnapshotName="
operator|+
name|peerSnapshotName
block|,
literal|"--peerSnapshotTmpDir="
operator|+
name|tmpPath2
block|,
literal|"--peerFSAddress="
operator|+
name|peerFSAddress
block|,
literal|"--peerHBaseRootAddress="
operator|+
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf2
argument_list|)
block|,
name|utility2
operator|.
name|getClusterKey
argument_list|()
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkRestoreTmpDir
argument_list|(
name|conf1
argument_list|,
name|tmpPath1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkRestoreTmpDir
argument_list|(
name|conf2
argument_list|,
name|tmpPath2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|rs
init|=
name|htable3
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|rs
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|firstVal
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|firstVal
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|firstVal
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"diff data"
argument_list|)
argument_list|)
expr_stmt|;
name|htable3
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|htable3
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|sourceSnapshotName
operator|=
literal|"sourceSnapshot-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|createSnapshotAndValidate
argument_list|(
name|utility1
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|noRepfamName
argument_list|)
argument_list|,
name|sourceSnapshotName
argument_list|,
name|rootDir
argument_list|,
name|fs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|peerSnapshotName
operator|=
literal|"peerSnapshot-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|createSnapshotAndValidate
argument_list|(
name|utility2
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|peerTableName
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|noRepfamName
argument_list|)
argument_list|,
name|peerSnapshotName
argument_list|,
name|peerRootDir
argument_list|,
name|peerFs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--peerTableName="
operator|+
name|peerTableName
operator|.
name|getNameAsString
argument_list|()
block|,
literal|"--sourceSnapshotName="
operator|+
name|sourceSnapshotName
block|,
literal|"--sourceSnapshotTmpDir="
operator|+
name|tmpPath1
block|,
literal|"--peerSnapshotName="
operator|+
name|peerSnapshotName
block|,
literal|"--peerSnapshotTmpDir="
operator|+
name|tmpPath2
block|,
literal|"--peerFSAddress="
operator|+
name|peerFSAddress
block|,
literal|"--peerHBaseRootAddress="
operator|+
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf2
argument_list|)
block|,
name|utility2
operator|.
name|getClusterKey
argument_list|()
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
expr_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
name|checkRestoreTmpDir
argument_list|(
name|conf1
argument_list|,
name|tmpPath1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkRestoreTmpDir
argument_list|(
name|conf2
argument_list|,
name|tmpPath2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|htable3
operator|.
name|close
argument_list|()
expr_stmt|;
name|TestReplicationBase
operator|.
name|tearDownAfterClass
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

