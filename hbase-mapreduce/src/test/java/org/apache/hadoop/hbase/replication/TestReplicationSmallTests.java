begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|ReplicationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|replication
operator|.
name|VerifyReplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MultiVersionConcurrencyControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|Replication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|ReplicationSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|ReplicationSourceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotTestingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestReplicationSmallTests
extends|extends
name|TestReplicationBase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestReplicationSmallTests
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PEER_ID
init|=
literal|"2"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Starting and stopping replication can make us miss new logs,
comment|// rolling like this makes sure the most recent one gets added to the queue
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|r
range|:
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
name|utility1
operator|.
name|getAdmin
argument_list|()
operator|.
name|rollWALWriter
argument_list|(
name|r
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|rowCount
init|=
name|utility1
operator|.
name|countRows
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|utility1
operator|.
name|deleteTableData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// truncating the table will send one Delete per row to the slave cluster
comment|// in an async fashion, which is why we cannot just call deleteTableData on
comment|// utility2 since late writes could make it to the slave in some way.
comment|// Instead, we truncate the first table and wait for all the Deletes to
comment|// make it to the slave.
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|int
name|lastCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for truncate"
argument_list|)
expr_stmt|;
block|}
name|ResultScanner
name|scanner
init|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
index|[]
name|res
init|=
name|scanner
operator|.
name|next
argument_list|(
name|rowCount
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|res
operator|.
name|length
operator|<
name|lastCount
condition|)
block|{
name|i
operator|--
expr_stmt|;
comment|// Don't increment timeout if we make progress
block|}
name|lastCount
operator|=
name|res
operator|.
name|length
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Still got "
operator|+
name|res
operator|.
name|length
operator|+
literal|" rows"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
comment|/**    * Verify that version and column delete marker types are replicated    * correctly.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testDeleteTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testDeleteTypes"
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|v1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|v2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|v3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v3"
argument_list|)
decl_stmt|;
name|htable1
operator|=
name|utility1
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|long
name|t
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
comment|// create three versions for "row"
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|row
argument_list|,
name|t
argument_list|,
name|v1
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|row
argument_list|,
name|t
operator|+
literal|1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|row
argument_list|,
name|t
operator|+
literal|2
argument_list|,
name|v3
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for put replication"
argument_list|)
expr_stmt|;
block|}
name|Result
name|res
init|=
name|htable2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|size
argument_list|()
operator|<
literal|3
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rows not available"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertArrayEquals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|res
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|v3
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|res
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|res
operator|.
name|rawCells
argument_list|()
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|v1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// place a version delete marker (delete last version)
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|row
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for put replication"
argument_list|)
expr_stmt|;
block|}
name|Result
name|res
init|=
name|htable2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Version not deleted"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertArrayEquals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|res
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|v3
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|res
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|v2
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// place a column delete marker
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|famName
argument_list|,
name|row
argument_list|,
name|t
operator|+
literal|2
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
comment|// now *both* of the remaining version should be deleted
comment|// at the replica
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for del replication"
argument_list|)
expr_stmt|;
block|}
name|Result
name|res
init|=
name|htable2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rows not deleted"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
comment|/**    * Add a row, check it's replicated, delete it, check's gone    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSimplePutDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testSimplePutDelete"
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|htable1
operator|=
name|utility1
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for put replication"
argument_list|)
expr_stmt|;
block|}
name|Result
name|res
init|=
name|htable2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not available"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertArrayEquals
argument_list|(
name|res
operator|.
name|value
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|htable1
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for del replication"
argument_list|)
expr_stmt|;
block|}
name|Result
name|res
init|=
name|htable2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not deleted"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
comment|/**    * Try a small batch upload using the write buffer, check it's replicated    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSmallBatch
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testSmallBatch"
argument_list|)
expr_stmt|;
comment|// normal Batch tests
name|loadData
argument_list|(
literal|""
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanner1
init|=
name|htable1
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
index|[]
name|res1
init|=
name|scanner1
operator|.
name|next
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|)
decl_stmt|;
name|scanner1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|,
name|res1
operator|.
name|length
argument_list|)
expr_stmt|;
name|waitForReplication
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|,
name|NB_RETRIES
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|waitForReplication
parameter_list|(
name|int
name|expectedRows
parameter_list|,
name|int
name|retries
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Scan
name|scan
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retries
condition|;
name|i
operator|++
control|)
block|{
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|retries
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for normal batch replication"
argument_list|)
expr_stmt|;
block|}
name|ResultScanner
name|scanner
init|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
index|[]
name|res
init|=
name|scanner
operator|.
name|next
argument_list|(
name|expectedRows
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|length
operator|!=
name|expectedRows
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Only got "
operator|+
name|res
operator|.
name|length
operator|+
literal|" rows"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
specifier|private
name|void
name|loadData
parameter_list|(
name|String
name|prefix
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_ROWS_IN_BATCH
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|prefix
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|htable1
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test disable/enable replication, trying to insert, make sure nothing's    * replicated, enable it, the insert should be replicated    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testDisableEnable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test disabling replication
name|admin
operator|.
name|disablePeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
name|byte
index|[]
name|rowkey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"disable enable"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|rowkey
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowkey
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
name|Result
name|res
init|=
name|htable2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Replication wasn't disabled"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not replicated, let's wait a bit more..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test enable replication
name|admin
operator|.
name|enablePeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
name|Result
name|res
init|=
name|htable2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not available"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertArrayEquals
argument_list|(
name|res
operator|.
name|value
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"Waited too much time for put replication"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Integration test for TestReplicationAdmin, removes and re-add a peer    * cluster    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testAddAndRemoveClusters
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testAddAndRemoveClusters"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removePeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Won't be replicated"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|Result
name|res
init|=
name|htable2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Not supposed to be replicated"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not replicated, let's wait a bit more..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
block|}
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|utility2
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|addPeer
argument_list|(
name|PEER_ID
argument_list|,
name|rpc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
name|rowKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"do rep"
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding new row"
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|rowKey
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for put replication"
argument_list|)
expr_stmt|;
block|}
name|Result
name|res
init|=
name|htable2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not available"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertArrayEquals
argument_list|(
name|res
operator|.
name|value
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/**    * Do a more intense version testSmallBatch, one  that will trigger    * wal rolling and other non-trivial code paths    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testLoading
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing out rows to table1 in testLoading"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|NB_ROWS_IN_BIG_BATCH
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_ROWS_IN_BIG_BATCH
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|// The puts will be iterated through and flushed only when the buffer
comment|// size is reached.
name|htable1
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|htable1
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
index|[]
name|res
init|=
name|scanner
operator|.
name|next
argument_list|(
name|NB_ROWS_IN_BIG_BATCH
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|NB_ROWS_IN_BIG_BATCH
argument_list|,
name|res
operator|.
name|length
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Looking in table2 for replicated rows in testLoading"
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Retry more than NB_RETRIES.  As it was, retries were done in 5 seconds and we'd fail
comment|// sometimes.
specifier|final
name|long
name|retries
init|=
name|NB_RETRIES
operator|*
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retries
condition|;
name|i
operator|++
control|)
block|{
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scanner
operator|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|res
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|NB_ROWS_IN_BIG_BATCH
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|length
operator|!=
name|NB_ROWS_IN_BIG_BATCH
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|retries
operator|-
literal|1
condition|)
block|{
name|int
name|lastRow
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|res
control|)
block|{
name|int
name|currentRow
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
name|lastRow
operator|+
literal|1
init|;
name|row
operator|<
name|currentRow
condition|;
name|row
operator|++
control|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Row missing: "
operator|+
name|row
argument_list|)
expr_stmt|;
block|}
name|lastRow
operator|=
name|currentRow
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Last row: "
operator|+
name|lastRow
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Waited too much time for normal batch replication, "
operator|+
name|res
operator|.
name|length
operator|+
literal|" instead of "
operator|+
name|NB_ROWS_IN_BIG_BATCH
operator|+
literal|"; waited="
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Only got "
operator|+
name|res
operator|.
name|length
operator|+
literal|" rows... retrying"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
comment|/**    * Do a small loading into a table, make sure the data is really the same,    * then run the VerifyReplication job to check the results. Do a second    * comparison where all the cells are different.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testVerifyRepJob
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Populate the tables, at the same time it guarantees that the tables are
comment|// identical since it does the check
name|testSmallBatch
argument_list|()
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
name|PEER_ID
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|rs
init|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|rs
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|firstVal
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|firstVal
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|firstVal
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"diff data"
argument_list|)
argument_list|)
expr_stmt|;
name|htable2
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|htable2
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
block|}
comment|/**    * Load a row into a table, make sure the data is really the same,    * delete the row, make sure the delete marker is replicated,    * run verify replication with and without raw to check the results.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testVerifyRepJobWithRawOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|familyname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam_raw"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_raw"
argument_list|)
decl_stmt|;
name|Table
name|lHtable1
init|=
literal|null
decl_stmt|;
name|Table
name|lHtable2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HTableDescriptor
name|table
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|fam
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|familyname
argument_list|)
decl_stmt|;
name|fam
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|fam
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|table
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|scopes
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|HColumnDescriptor
name|f
range|:
name|table
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|scopes
operator|.
name|put
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|f
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Connection
name|connection1
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|Connection
name|connection2
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
try|try
init|(
name|Admin
name|admin1
init|=
name|connection1
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin1
operator|.
name|createTable
argument_list|(
name|table
argument_list|,
name|HBaseTestingUtility
operator|.
name|KEYS_FOR_HBA_CREATE_TABLE
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Admin
name|admin2
init|=
name|connection2
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin2
operator|.
name|createTable
argument_list|(
name|table
argument_list|,
name|HBaseTestingUtility
operator|.
name|KEYS_FOR_HBA_CREATE_TABLE
argument_list|)
expr_stmt|;
block|}
name|utility1
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|utility2
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|lHtable1
operator|=
name|utility1
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|lHtable2
operator|=
name|utility2
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|familyname
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|lHtable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for put replication"
argument_list|)
expr_stmt|;
block|}
name|Result
name|res
init|=
name|lHtable2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not available"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertArrayEquals
argument_list|(
name|res
operator|.
name|value
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|lHtable1
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for del replication"
argument_list|)
expr_stmt|;
block|}
name|Result
name|res
init|=
name|lHtable2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not deleted"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
comment|// Checking verifyReplication for the default behavior.
name|String
index|[]
name|argsWithoutRaw
init|=
operator|new
name|String
index|[]
block|{
name|PEER_ID
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|runVerifyReplication
argument_list|(
name|argsWithoutRaw
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Checking verifyReplication with raw
name|String
index|[]
name|argsWithRawAsTrue
init|=
operator|new
name|String
index|[]
block|{
literal|"--raw"
block|,
name|PEER_ID
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|runVerifyReplication
argument_list|(
name|argsWithRawAsTrue
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|lHtable1
operator|!=
literal|null
condition|)
block|{
name|lHtable1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lHtable2
operator|!=
literal|null
condition|)
block|{
name|lHtable2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|runVerifyReplication
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|expectedGoodRows
parameter_list|,
name|int
name|expectedBadRows
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|Job
name|job
init|=
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|createSubmittableJob
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf1
argument_list|)
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Job wasn't created, see the log"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Job failed, see the log"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedGoodRows
argument_list|,
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|VerifyReplication
operator|.
name|Verifier
operator|.
name|Counters
operator|.
name|GOODROWS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBadRows
argument_list|,
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|VerifyReplication
operator|.
name|Verifier
operator|.
name|Counters
operator|.
name|BADROWS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
comment|// VerifyReplication should honor versions option
specifier|public
name|void
name|testHBase14905
parameter_list|()
throws|throws
name|Exception
block|{
comment|// normal Batch tests
name|byte
index|[]
name|qualifierName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1002"
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1001"
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1112"
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner1
init|=
name|htable1
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
index|[]
name|res1
init|=
name|scanner1
operator|.
name|next
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|scanner1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res1
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|res1
index|[
literal|0
index|]
operator|.
name|getColumnCells
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|scanner1
operator|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|res1
operator|=
name|scanner1
operator|.
name|next
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scanner1
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|res1
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Only got "
operator|+
name|res1
operator|.
name|length
operator|+
literal|" rows"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|cellNumber
init|=
name|res1
index|[
literal|0
index|]
operator|.
name|getColumnCells
argument_list|(
name|famName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|cellNumber
operator|!=
literal|3
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Only got "
operator|+
name|cellNumber
operator|+
literal|" cells"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for normal batch replication"
argument_list|)
expr_stmt|;
block|}
block|}
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1111"
argument_list|)
argument_list|)
expr_stmt|;
name|htable2
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1112"
argument_list|)
argument_list|)
expr_stmt|;
name|htable2
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|scanner1
operator|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|res1
operator|=
name|scanner1
operator|.
name|next
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
name|scanner1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res1
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|res1
index|[
literal|0
index|]
operator|.
name|getColumnCells
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"--versions=100"
block|,
name|PEER_ID
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
comment|// VerifyReplication should honor versions option
specifier|public
name|void
name|testVersionMismatchHBase14905
parameter_list|()
throws|throws
name|Exception
block|{
comment|// normal Batch tests
name|byte
index|[]
name|qualifierName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|ts
operator|+
literal|3
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v3"
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner1
init|=
name|htable1
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
index|[]
name|res1
init|=
name|scanner1
operator|.
name|next
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|scanner1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res1
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|res1
index|[
literal|0
index|]
operator|.
name|getColumnCells
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|scanner1
operator|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|res1
operator|=
name|scanner1
operator|.
name|next
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scanner1
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|res1
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Only got "
operator|+
name|res1
operator|.
name|length
operator|+
literal|" rows"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|cellNumber
init|=
name|res1
index|[
literal|0
index|]
operator|.
name|getColumnCells
argument_list|(
name|famName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|cellNumber
operator|!=
literal|3
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Only got "
operator|+
name|cellNumber
operator|+
literal|" cells"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for normal batch replication"
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
comment|// Disabling replication and modifying the particular version of the cell to validate the feature.
name|admin
operator|.
name|disablePeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|put2
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v99"
argument_list|)
argument_list|)
expr_stmt|;
name|htable2
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|scanner1
operator|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|res1
operator|=
name|scanner1
operator|.
name|next
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
name|scanner1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res1
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|res1
index|[
literal|0
index|]
operator|.
name|getColumnCells
argument_list|(
name|famName
argument_list|,
name|qualifierName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"--versions=100"
block|,
name|PEER_ID
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|admin
operator|.
name|enablePeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test for HBASE-9038, Replication.scopeWALEdits would NPE if it wasn't filtering out    * the compaction WALEdit    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testCompactionWALEdits
parameter_list|()
throws|throws
name|Exception
block|{
name|WALProtos
operator|.
name|CompactionDescriptor
name|compactionDescriptor
init|=
name|WALProtos
operator|.
name|CompactionDescriptor
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
name|RegionInfo
name|hri
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|htable1
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|WALEdit
name|edit
init|=
name|WALEdit
operator|.
name|createCompaction
argument_list|(
name|hri
argument_list|,
name|compactionDescriptor
argument_list|)
decl_stmt|;
name|Replication
operator|.
name|scopeWALEdits
argument_list|(
operator|new
name|WALKey
argument_list|()
argument_list|,
name|edit
argument_list|,
name|htable1
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for HBASE-8663    * Create two new Tables with colfamilies enabled for replication then run    * ReplicationAdmin.listReplicated(). Finally verify the table:colfamilies. Note:    * TestReplicationAdmin is a better place for this testing but it would need mocks.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testVerifyListReplicatedTable
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testVerifyListReplicatedTable"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|tName
init|=
literal|"VerifyListReplicated_"
decl_stmt|;
specifier|final
name|String
name|colFam
init|=
literal|"cf1"
decl_stmt|;
specifier|final
name|int
name|numOfTables
init|=
literal|3
decl_stmt|;
name|Admin
name|hadmin
init|=
name|utility1
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|// Create Tables
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfTables
condition|;
name|i
operator|++
control|)
block|{
name|HTableDescriptor
name|ht
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tName
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|cfd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|colFam
argument_list|)
decl_stmt|;
name|cfd
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|ht
operator|.
name|addFamily
argument_list|(
name|cfd
argument_list|)
expr_stmt|;
name|hadmin
operator|.
name|createTable
argument_list|(
name|ht
argument_list|)
expr_stmt|;
block|}
comment|// verify the result
name|List
argument_list|<
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|replicationColFams
init|=
name|admin
operator|.
name|listReplicated
argument_list|()
decl_stmt|;
name|int
index|[]
name|match
init|=
operator|new
name|int
index|[
name|numOfTables
index|]
decl_stmt|;
comment|// array of 3 with init value of zero
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|replicationColFams
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|replicationEntry
init|=
name|replicationColFams
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|tn
init|=
name|replicationEntry
operator|.
name|get
argument_list|(
name|ReplicationAdmin
operator|.
name|TNAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|tn
operator|.
name|startsWith
argument_list|(
name|tName
argument_list|)
operator|)
operator|&&
name|replicationEntry
operator|.
name|get
argument_list|(
name|ReplicationAdmin
operator|.
name|CFNAME
argument_list|)
operator|.
name|equals
argument_list|(
name|colFam
argument_list|)
condition|)
block|{
name|int
name|m
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tn
operator|.
name|substring
argument_list|(
name|tn
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// get the last digit
name|match
index|[
name|m
index|]
operator|++
expr_stmt|;
comment|// should only increase once
block|}
block|}
comment|// check the matching result
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|match
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"listReplicated() does not match table "
operator|+
name|i
argument_list|,
operator|(
name|match
index|[
name|i
index|]
operator|==
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// drop tables
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfTables
condition|;
name|i
operator|++
control|)
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tName
operator|+
name|i
argument_list|)
decl_stmt|;
name|hadmin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|hadmin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
name|hadmin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    *  Test for HBase-15259 WALEdits under replay will also be replicated    * */
annotation|@
name|Test
specifier|public
name|void
name|testReplicationInReplay
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|htable1
operator|.
name|getName
argument_list|()
decl_stmt|;
name|HRegion
name|region
init|=
name|utility1
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RegionInfo
name|hri
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|fam
range|:
name|htable1
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getFamiliesKeys
argument_list|()
control|)
block|{
name|scopes
operator|.
name|put
argument_list|(
name|fam
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|MultiVersionConcurrencyControl
name|mvcc
init|=
operator|new
name|MultiVersionConcurrencyControl
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|utility1
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getServerWith
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|WAL
name|wal
init|=
name|utility1
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|index
argument_list|)
operator|.
name|getWAL
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|rowName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testReplicationInReplay"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v"
argument_list|)
decl_stmt|;
name|WALEdit
name|edit
init|=
operator|new
name|WALEdit
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|edit
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowName
argument_list|,
name|famName
argument_list|,
name|qualifier
argument_list|,
name|now
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|WALKey
name|walKey
init|=
operator|new
name|WALKey
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|now
argument_list|,
name|mvcc
argument_list|,
name|scopes
argument_list|)
decl_stmt|;
name|wal
operator|.
name|append
argument_list|(
name|hri
argument_list|,
name|walKey
argument_list|,
name|edit
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|Result
name|res
init|=
name|htable2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Not supposed to be replicated for "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|res
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Row not replicated, let's wait a bit more..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testVerifyReplicationPrefixFiltering
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|prefixRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"prefixrow"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|prefixRow2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"secondrow"
argument_list|)
decl_stmt|;
name|loadData
argument_list|(
literal|"prefixrow"
argument_list|,
name|prefixRow
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
literal|"secondrow"
argument_list|,
name|prefixRow2
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
literal|"aaa"
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
literal|"zzz"
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|waitForReplication
argument_list|(
name|NB_ROWS_IN_BATCH
operator|*
literal|4
argument_list|,
name|NB_RETRIES
operator|*
literal|4
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"--row-prefixes=prefixrow,secondrow"
block|,
name|PEER_ID
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|runVerifyReplication
argument_list|(
name|args
argument_list|,
name|NB_ROWS_IN_BATCH
operator|*
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testVerifyReplicationSnapshotArguments
parameter_list|()
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"--sourceSnapshotName=snapshot1"
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|assertFalse
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|args
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|doCommandLine
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--sourceSnapshotTmpDir=tmp"
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
expr_stmt|;
name|assertFalse
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|args
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|doCommandLine
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--sourceSnapshotName=snapshot1"
block|,
literal|"--sourceSnapshotTmpDir=tmp"
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
expr_stmt|;
name|assertTrue
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|args
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|doCommandLine
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--peerSnapshotName=snapshot1"
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
expr_stmt|;
name|assertFalse
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|args
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|doCommandLine
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--peerSnapshotTmpDir=/tmp/"
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
expr_stmt|;
name|assertFalse
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|args
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|doCommandLine
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--peerSnapshotName=snapshot1"
block|,
literal|"--peerSnapshotTmpDir=/tmp/"
block|,
literal|"--peerFSAddress=tempfs"
block|,
literal|"--peerHBaseRootAddress=hdfs://tempfs:50070/hbase/"
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
expr_stmt|;
name|assertTrue
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|args
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|doCommandLine
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--sourceSnapshotName=snapshot1"
block|,
literal|"--sourceSnapshotTmpDir=/tmp/"
block|,
literal|"--peerSnapshotName=snapshot2"
block|,
literal|"--peerSnapshotTmpDir=/tmp/"
block|,
literal|"--peerFSAddress=tempfs"
block|,
literal|"--peerHBaseRootAddress=hdfs://tempfs:50070/hbase/"
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
expr_stmt|;
name|assertTrue
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|args
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|doCommandLine
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testVerifyReplicationWithSnapshotSupport
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Populate the tables, at the same time it guarantees that the tables are
comment|// identical since it does the check
name|testSmallBatch
argument_list|()
expr_stmt|;
comment|// Take source and target tables snapshot
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|String
name|sourceSnapshotName
init|=
literal|"sourceSnapshot-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|SnapshotTestingUtils
operator|.
name|createSnapshotAndValidate
argument_list|(
name|utility1
operator|.
name|getHBaseAdmin
argument_list|()
argument_list|,
name|tableName
argument_list|,
operator|new
name|String
argument_list|(
name|famName
argument_list|)
argument_list|,
name|sourceSnapshotName
argument_list|,
name|rootDir
argument_list|,
name|fs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Take target snapshot
name|Path
name|peerRootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|FileSystem
name|peerFs
init|=
name|peerRootDir
operator|.
name|getFileSystem
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|String
name|peerSnapshotName
init|=
literal|"peerSnapshot-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|SnapshotTestingUtils
operator|.
name|createSnapshotAndValidate
argument_list|(
name|utility2
operator|.
name|getHBaseAdmin
argument_list|()
argument_list|,
name|tableName
argument_list|,
operator|new
name|String
argument_list|(
name|famName
argument_list|)
argument_list|,
name|peerSnapshotName
argument_list|,
name|peerRootDir
argument_list|,
name|peerFs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|peerFSAddress
init|=
name|peerFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|temPath1
init|=
name|utility1
operator|.
name|getRandomDir
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|temPath2
init|=
literal|"/tmp2"
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"--sourceSnapshotName="
operator|+
name|sourceSnapshotName
block|,
literal|"--sourceSnapshotTmpDir="
operator|+
name|temPath1
block|,
literal|"--peerSnapshotName="
operator|+
name|peerSnapshotName
block|,
literal|"--peerSnapshotTmpDir="
operator|+
name|temPath2
block|,
literal|"--peerFSAddress="
operator|+
name|peerFSAddress
block|,
literal|"--peerHBaseRootAddress="
operator|+
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf2
argument_list|)
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|Job
name|job
init|=
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|createSubmittableJob
argument_list|(
name|conf1
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Job wasn't created, see the log"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Job failed, see the log"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|,
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|VerifyReplication
operator|.
name|Verifier
operator|.
name|Counters
operator|.
name|GOODROWS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|VerifyReplication
operator|.
name|Verifier
operator|.
name|Counters
operator|.
name|BADROWS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|rs
init|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|rs
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|firstVal
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|firstVal
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|firstVal
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"diff data"
argument_list|)
argument_list|)
expr_stmt|;
name|htable2
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|htable2
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|sourceSnapshotName
operator|=
literal|"sourceSnapshot-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|createSnapshotAndValidate
argument_list|(
name|utility1
operator|.
name|getHBaseAdmin
argument_list|()
argument_list|,
name|tableName
argument_list|,
operator|new
name|String
argument_list|(
name|famName
argument_list|)
argument_list|,
name|sourceSnapshotName
argument_list|,
name|rootDir
argument_list|,
name|fs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|peerSnapshotName
operator|=
literal|"peerSnapshot-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|createSnapshotAndValidate
argument_list|(
name|utility2
operator|.
name|getHBaseAdmin
argument_list|()
argument_list|,
name|tableName
argument_list|,
operator|new
name|String
argument_list|(
name|famName
argument_list|)
argument_list|,
name|peerSnapshotName
argument_list|,
name|peerRootDir
argument_list|,
name|peerFs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"--sourceSnapshotName="
operator|+
name|sourceSnapshotName
block|,
literal|"--sourceSnapshotTmpDir="
operator|+
name|temPath1
block|,
literal|"--peerSnapshotName="
operator|+
name|peerSnapshotName
block|,
literal|"--peerSnapshotTmpDir="
operator|+
name|temPath2
block|,
literal|"--peerFSAddress="
operator|+
name|peerFSAddress
block|,
literal|"--peerHBaseRootAddress="
operator|+
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf2
argument_list|)
block|,
literal|"2"
block|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
expr_stmt|;
name|job
operator|=
operator|new
name|VerifyReplication
argument_list|()
operator|.
name|createSubmittableJob
argument_list|(
name|conf1
argument_list|,
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Job wasn't created, see the log"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Job failed, see the log"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|VerifyReplication
operator|.
name|Verifier
operator|.
name|Counters
operator|.
name|GOODROWS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|,
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|VerifyReplication
operator|.
name|Verifier
operator|.
name|Counters
operator|.
name|BADROWS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyWALRecovery
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numRs
init|=
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// for each RS, create an empty wal with same walGroupId
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|emptyWalPaths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRs
condition|;
name|i
operator|++
control|)
block|{
name|RegionInfo
name|regionInfo
init|=
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|htable1
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|WAL
name|wal
init|=
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
operator|.
name|getWAL
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|Path
name|currentWalPath
init|=
name|AbstractFSWALProvider
operator|.
name|getCurrentFileName
argument_list|(
name|wal
argument_list|)
decl_stmt|;
name|String
name|walGroupId
init|=
name|AbstractFSWALProvider
operator|.
name|getWALPrefixFromWALName
argument_list|(
name|currentWalPath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|emptyWalPath
init|=
operator|new
name|Path
argument_list|(
name|utility1
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
name|walGroupId
operator|+
literal|"."
operator|+
name|ts
argument_list|)
decl_stmt|;
name|utility1
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|emptyWalPath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|emptyWalPaths
operator|.
name|add
argument_list|(
name|emptyWalPath
argument_list|)
expr_stmt|;
block|}
comment|// inject our empty wal into the replication queue
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRs
condition|;
name|i
operator|++
control|)
block|{
name|Replication
name|replicationService
init|=
operator|(
name|Replication
operator|)
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
operator|.
name|getReplicationSourceService
argument_list|()
decl_stmt|;
name|replicationService
operator|.
name|preLogRoll
argument_list|(
literal|null
argument_list|,
name|emptyWalPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|replicationService
operator|.
name|postLogRoll
argument_list|(
literal|null
argument_list|,
name|emptyWalPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// wait for ReplicationSource to start reading from our empty wal
name|waitForLogAdvance
argument_list|(
name|numRs
argument_list|,
name|emptyWalPaths
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// roll the original wal, which enqueues a new wal behind our empty wal
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRs
condition|;
name|i
operator|++
control|)
block|{
name|RegionInfo
name|regionInfo
init|=
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|htable1
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|WAL
name|wal
init|=
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
operator|.
name|getWAL
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|wal
operator|.
name|rollWriter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// ReplicationSource should advance past the empty wal, or else the test will fail
name|waitForLogAdvance
argument_list|(
name|numRs
argument_list|,
name|emptyWalPaths
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// we're now writing to the new wal
comment|// if everything works, the source should've stopped reading from the empty wal, and start
comment|// replicating from the new wal
name|testSimplePutDelete
argument_list|()
expr_stmt|;
block|}
comment|/**    * Waits for the ReplicationSource to start reading from the given paths    * @param numRs number of regionservers    * @param emptyWalPaths path for each regionserver    * @param invert if true, waits until ReplicationSource is NOT reading from the given paths    */
specifier|private
name|void
name|waitForLogAdvance
parameter_list|(
specifier|final
name|int
name|numRs
parameter_list|,
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|emptyWalPaths
parameter_list|,
specifier|final
name|boolean
name|invert
parameter_list|)
throws|throws
name|Exception
block|{
name|Waiter
operator|.
name|waitFor
argument_list|(
name|conf1
argument_list|,
literal|10000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRs
condition|;
name|i
operator|++
control|)
block|{
name|Replication
name|replicationService
init|=
operator|(
name|Replication
operator|)
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
operator|.
name|getReplicationSourceService
argument_list|()
decl_stmt|;
for|for
control|(
name|ReplicationSourceInterface
name|rsi
range|:
name|replicationService
operator|.
name|getReplicationManager
argument_list|()
operator|.
name|getSources
argument_list|()
control|)
block|{
name|ReplicationSource
name|source
init|=
operator|(
name|ReplicationSource
operator|)
name|rsi
decl_stmt|;
if|if
condition|(
operator|!
name|invert
operator|&&
operator|!
name|emptyWalPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|source
operator|.
name|getCurrentPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|invert
operator|&&
name|emptyWalPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|source
operator|.
name|getCurrentPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

