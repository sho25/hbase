begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MapReduceTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MapReduceTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestTableInputFormatScan
extends|extends
name|TestTableInputFormatScanBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestTableInputFormatScan
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Tests a MR scan using specific number of mappers. The test table has 26 regions,    */
annotation|@
name|Test
specifier|public
name|void
name|testGetSplits
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|testNumOfSplits
argument_list|(
literal|1
argument_list|,
literal|26
argument_list|)
expr_stmt|;
name|testNumOfSplits
argument_list|(
literal|3
argument_list|,
literal|78
argument_list|)
expr_stmt|;
block|}
comment|/**    * Runs a MR to test TIF using specific number of mappers. The test table has 26 regions,    */
annotation|@
name|Test
specifier|public
name|void
name|testSpecifiedNumOfMappersMR
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|testNumOfSplitsMR
argument_list|(
literal|2
argument_list|,
literal|52
argument_list|)
expr_stmt|;
name|testNumOfSplitsMR
argument_list|(
literal|4
argument_list|,
literal|104
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if autoBalance create correct splits    */
annotation|@
name|Test
specifier|public
name|void
name|testAutoBalanceSplits
parameter_list|()
throws|throws
name|IOException
block|{
name|testAutobalanceNumOfSplit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanFromConfiguration
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|testScanFromConfiguration
argument_list|(
literal|"bba"
argument_list|,
literal|"bbd"
argument_list|,
literal|"bbc"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

