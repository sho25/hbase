begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|ssl
operator|.
name|KeyStoreTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|ExportUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|Import
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|VisibilityLabelsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HBaseKerberosUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HadoopSecurityEnabledUserProviderForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessControlLists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|SecureTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|SecureTestUtil
operator|.
name|AccessTestAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|Authorizations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|CellVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSecureExport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSecureExport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|MiniKdc
name|KDC
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|File
name|KEYTAB_FILE
init|=
operator|new
name|File
argument_list|(
name|UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"keytab"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|USERNAME
decl_stmt|;
specifier|private
specifier|static
name|String
name|SERVER_PRINCIPAL
decl_stmt|;
specifier|private
specifier|static
name|String
name|HTTP_PRINCIPAL
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FAMILYA_STRING
init|=
literal|"fma"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FAMILYB_STRING
init|=
literal|"fma"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILYA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|FAMILYA_STRING
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILYB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|FAMILYB_STRING
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row3"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUAL
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOCALHOST
init|=
literal|"localhost"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|NOW
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// user granted with all global permission
specifier|private
specifier|static
specifier|final
name|String
name|USER_ADMIN
init|=
literal|"admin"
decl_stmt|;
comment|// user is table owner. will have all permissions on table
specifier|private
specifier|static
specifier|final
name|String
name|USER_OWNER
init|=
literal|"owner"
decl_stmt|;
comment|// user with rx permissions.
specifier|private
specifier|static
specifier|final
name|String
name|USER_RX
init|=
literal|"rxuser"
decl_stmt|;
comment|// user with exe-only permissions.
specifier|private
specifier|static
specifier|final
name|String
name|USER_XO
init|=
literal|"xouser"
decl_stmt|;
comment|// user with read-only permissions.
specifier|private
specifier|static
specifier|final
name|String
name|USER_RO
init|=
literal|"rouser"
decl_stmt|;
comment|// user with no permissions
specifier|private
specifier|static
specifier|final
name|String
name|USER_NONE
init|=
literal|"noneuser"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PRIVATE
init|=
literal|"private"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONFIDENTIAL
init|=
literal|"confidential"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SECRET
init|=
literal|"secret"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOPSECRET
init|=
literal|"topsecret"
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|void
name|setUpKdcServer
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|conf
init|=
name|MiniKdc
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|put
argument_list|(
name|MiniKdc
operator|.
name|DEBUG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|File
name|kdcFile
init|=
operator|new
name|File
argument_list|(
name|UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"kdc"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|KDC
operator|=
operator|new
name|MiniKdc
argument_list|(
name|conf
argument_list|,
name|kdcFile
argument_list|)
expr_stmt|;
name|KDC
operator|.
name|start
argument_list|()
expr_stmt|;
name|USERNAME
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
name|SERVER_PRINCIPAL
operator|=
name|USERNAME
operator|+
literal|"/"
operator|+
name|LOCALHOST
expr_stmt|;
name|HTTP_PRINCIPAL
operator|=
literal|"HTTP/"
operator|+
name|LOCALHOST
expr_stmt|;
name|KDC
operator|.
name|createPrincipal
argument_list|(
name|KEYTAB_FILE
argument_list|,
name|SERVER_PRINCIPAL
argument_list|,
name|HTTP_PRINCIPAL
argument_list|,
name|USER_ADMIN
operator|+
literal|"/"
operator|+
name|LOCALHOST
argument_list|,
name|USER_OWNER
operator|+
literal|"/"
operator|+
name|LOCALHOST
argument_list|,
name|USER_RX
operator|+
literal|"/"
operator|+
name|LOCALHOST
argument_list|,
name|USER_RO
operator|+
literal|"/"
operator|+
name|LOCALHOST
argument_list|,
name|USER_XO
operator|+
literal|"/"
operator|+
name|LOCALHOST
argument_list|,
name|USER_NONE
operator|+
literal|"/"
operator|+
name|LOCALHOST
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|User
name|getUserByLogin
parameter_list|(
specifier|final
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|User
operator|.
name|create
argument_list|(
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|getPrinciple
argument_list|(
name|user
argument_list|)
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getPrinciple
parameter_list|(
specifier|final
name|String
name|user
parameter_list|)
block|{
return|return
name|user
operator|+
literal|"/"
operator|+
name|LOCALHOST
operator|+
literal|"@"
operator|+
name|KDC
operator|.
name|getRealm
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|setUpClusterKdc
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseKerberosUtils
operator|.
name|setKeytabFileForTesting
argument_list|(
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseKerberosUtils
operator|.
name|setPrincipalForTesting
argument_list|(
name|SERVER_PRINCIPAL
operator|+
literal|"@"
operator|+
name|KDC
operator|.
name|getRealm
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseKerberosUtils
operator|.
name|setSecuredConfiguration
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// if we drop support for hadoop-2.4.0 and hadoop-2.4.1,
comment|// the following key should be changed.
comment|// 1) DFS_NAMENODE_USER_NAME_KEY -> DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
comment|// 2) DFS_DATANODE_USER_NAME_KEY -> DFS_DATANODE_KERBEROS_PRINCIPAL_KEY
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_USER_NAME_KEY
argument_list|,
name|SERVER_PRINCIPAL
operator|+
literal|"@"
operator|+
name|KDC
operator|.
name|getRealm
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_USER_NAME_KEY
argument_list|,
name|SERVER_PRINCIPAL
operator|+
literal|"@"
operator|+
name|KDC
operator|.
name|getRealm
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KEYTAB_FILE_KEY
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_KEYTAB_FILE_KEY
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// set yarn principal
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|,
name|SERVER_PRINCIPAL
operator|+
literal|"@"
operator|+
name|KDC
operator|.
name|getRealm
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PRINCIPAL
argument_list|,
name|SERVER_PRINCIPAL
operator|+
literal|"@"
operator|+
name|KDC
operator|.
name|getRealm
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|HTTP_PRINCIPAL
operator|+
literal|"@"
operator|+
name|KDC
operator|.
name|getRealm
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HTTP_POLICY_KEY
argument_list|,
name|HttpConfig
operator|.
name|Policy
operator|.
name|HTTPS_ONLY
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
argument_list|,
name|LOCALHOST
operator|+
literal|":0"
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTPS_ADDRESS_KEY
argument_list|,
name|LOCALHOST
operator|+
literal|":0"
argument_list|)
expr_stmt|;
name|File
name|keystoresDir
init|=
operator|new
name|File
argument_list|(
name|UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"keystore"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|keystoresDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
name|sslConfDir
init|=
name|KeyStoreTestUtil
operator|.
name|getClasspathDir
argument_list|(
name|TestSecureExport
operator|.
name|class
argument_list|)
decl_stmt|;
name|KeyStoreTestUtil
operator|.
name|setupSSLConfig
argument_list|(
name|keystoresDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|sslConfDir
argument_list|,
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"ignore.secure.ports.for.testing"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|)
operator|+
literal|","
operator|+
name|Export
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|addLabels
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|users
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
throws|throws
name|Exception
block|{
name|PrivilegedExceptionAction
argument_list|<
name|VisibilityLabelsProtos
operator|.
name|VisibilityLabelsResponse
argument_list|>
name|action
init|=
parameter_list|()
lambda|->
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|VisibilityClient
operator|.
name|addLabels
argument_list|(
name|conn
argument_list|,
name|labels
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|labels
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|user
range|:
name|users
control|)
block|{
name|VisibilityClient
operator|.
name|setAuths
argument_list|(
name|conn
argument_list|,
name|labels
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|labels
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|t
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
decl_stmt|;
name|getUserByLogin
argument_list|(
name|USER_ADMIN
argument_list|)
operator|.
name|runAs
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|announce
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{   }
specifier|private
specifier|static
name|void
name|clearOutput
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sets the security firstly for getting the correct default realm.    * @throws Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UserProvider
operator|.
name|setUserProviderForTesting
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|HadoopSecurityEnabledUserProviderForTesting
operator|.
name|class
argument_list|)
expr_stmt|;
name|setUpKdcServer
argument_list|()
expr_stmt|;
name|SecureTestUtil
operator|.
name|enableSecurity
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|AccessControlConstants
operator|.
name|EXEC_PERMISSION_CHECKS_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|VisibilityTestUtil
operator|.
name|enableVisiblityLabels
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|verifyConfiguration
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|setUpClusterKdc
argument_list|()
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|VisibilityConstants
operator|.
name|LABELS_TABLE_NAME
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|waitTableEnabled
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|,
literal|50000
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|waitTableEnabled
argument_list|(
name|VisibilityConstants
operator|.
name|LABELS_TABLE_NAME
argument_list|,
literal|50000
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|grantGlobal
argument_list|(
name|UTIL
argument_list|,
name|USER_ADMIN
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|EXEC
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|addLabels
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|USER_OWNER
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|PRIVATE
argument_list|,
name|CONFIDENTIAL
argument_list|,
name|SECRET
argument_list|,
name|TOPSECRET
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|KDC
operator|!=
literal|null
condition|)
block|{
name|KDC
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test the ExportEndpoint's access levels. The {@link Export} test is ignored    * since the access exceptions cannot be collected from the mappers.    *    * @throws java.io.IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testAccessCase
parameter_list|()
throws|throws
name|IOException
throws|,
name|Throwable
block|{
specifier|final
name|String
name|exportTable
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|TableDescriptor
name|exportHtd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILYA
argument_list|)
argument_list|)
operator|.
name|setOwnerString
argument_list|(
name|USER_OWNER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SecureTestUtil
operator|.
name|createTable
argument_list|(
name|UTIL
argument_list|,
name|exportHtd
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"s"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|grantOnTable
argument_list|(
name|UTIL
argument_list|,
name|USER_RO
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|exportTable
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|grantOnTable
argument_list|(
name|UTIL
argument_list|,
name|USER_RX
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|exportTable
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|EXEC
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|grantOnTable
argument_list|(
name|UTIL
argument_list|,
name|USER_XO
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|exportTable
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|EXEC
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|AccessControlLists
operator|.
name|getTablePermissions
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|exportTable
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AccessTestAction
name|putAction
init|=
parameter_list|()
lambda|->
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual_0"
argument_list|)
argument_list|,
name|NOW
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual_1"
argument_list|)
argument_list|,
name|NOW
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Table
name|t
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|exportTable
argument_list|)
argument_list|)
init|)
block|{
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
decl_stmt|;
comment|// no hdfs access.
name|SecureTestUtil
operator|.
name|verifyAllowed
argument_list|(
name|putAction
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_ADMIN
argument_list|)
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_OWNER
argument_list|)
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|verifyDenied
argument_list|(
name|putAction
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_RO
argument_list|)
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_XO
argument_list|)
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_RX
argument_list|)
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_NONE
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|openDir
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"testAccessCase"
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|openDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|openDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|output
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|openDir
argument_list|,
literal|"output"
argument_list|)
argument_list|)
decl_stmt|;
name|AccessTestAction
name|exportAction
init|=
parameter_list|()
lambda|->
block|{
try|try
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
name|exportTable
operator|,
name|output
operator|.
name|toString
argument_list|()
block|}
empty_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Export
operator|.
name|Response
argument_list|>
name|result
init|=
name|Export
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|long
name|rowCount
init|=
literal|0
decl_stmt|;
name|long
name|cellCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Export
operator|.
name|Response
name|r
range|:
name|result
operator|.
name|values
argument_list|()
control|)
block|{
name|rowCount
operator|+=
name|r
operator|.
name|getRowCount
argument_list|()
expr_stmt|;
name|cellCount
operator|+=
name|r
operator|.
name|getCellCount
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cellCount
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
decl||
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|clearOutput
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|SecureTestUtil
operator|.
name|verifyDenied
argument_list|(
name|exportAction
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_RO
argument_list|)
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_XO
argument_list|)
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_NONE
argument_list|)
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|verifyAllowed
argument_list|(
name|exportAction
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_ADMIN
argument_list|)
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_OWNER
argument_list|)
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_RX
argument_list|)
argument_list|)
expr_stmt|;
name|AccessTestAction
name|deleteAction
init|=
parameter_list|()
lambda|->
block|{
name|UTIL
operator|.
name|deleteTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|exportTable
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
decl_stmt|;
name|SecureTestUtil
operator|.
name|verifyAllowed
argument_list|(
name|deleteAction
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_OWNER
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|openDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVisibilityLabels
parameter_list|()
throws|throws
name|IOException
throws|,
name|Throwable
block|{
specifier|final
name|String
name|exportTable
init|=
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_export"
decl_stmt|;
specifier|final
name|String
name|importTable
init|=
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_import"
decl_stmt|;
specifier|final
name|TableDescriptor
name|exportHtd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|exportTable
argument_list|)
argument_list|)
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILYA
argument_list|)
argument_list|)
operator|.
name|setOwnerString
argument_list|(
name|USER_OWNER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SecureTestUtil
operator|.
name|createTable
argument_list|(
name|UTIL
argument_list|,
name|exportHtd
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"s"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|AccessTestAction
name|putAction
init|=
parameter_list|()
lambda|->
block|{
name|Put
name|p1
init|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
decl_stmt|;
name|p1
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|NOW
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|CellVisibility
argument_list|(
name|SECRET
argument_list|)
argument_list|)
expr_stmt|;
name|Put
name|p2
init|=
operator|new
name|Put
argument_list|(
name|ROW2
argument_list|)
decl_stmt|;
name|p2
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|NOW
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|CellVisibility
argument_list|(
name|PRIVATE
operator|+
literal|"& "
operator|+
name|CONFIDENTIAL
argument_list|)
argument_list|)
expr_stmt|;
name|Put
name|p3
init|=
operator|new
name|Put
argument_list|(
name|ROW3
argument_list|)
decl_stmt|;
name|p3
operator|.
name|addColumn
argument_list|(
name|FAMILYA
argument_list|,
name|QUAL
argument_list|,
name|NOW
argument_list|,
name|QUAL
argument_list|)
expr_stmt|;
name|p3
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|CellVisibility
argument_list|(
literal|"!"
operator|+
name|CONFIDENTIAL
operator|+
literal|"& "
operator|+
name|TOPSECRET
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Table
name|t
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|exportTable
argument_list|)
argument_list|)
init|)
block|{
name|t
operator|.
name|put
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p3
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
decl_stmt|;
name|SecureTestUtil
operator|.
name|verifyAllowed
argument_list|(
name|putAction
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_OWNER
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|labelsAndRowCounts
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|labelsAndRowCounts
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SECRET
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|labelsAndRowCounts
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|PRIVATE
argument_list|,
name|CONFIDENTIAL
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|labelsAndRowCounts
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPSECRET
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|labelsAndRowCounts
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPSECRET
argument_list|,
name|CONFIDENTIAL
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|labelsAndRowCounts
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TOPSECRET
argument_list|,
name|CONFIDENTIAL
argument_list|,
name|PRIVATE
argument_list|,
name|SECRET
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Pair
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|labelsAndRowCount
range|:
name|labelsAndRowCounts
control|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
name|labelsAndRowCount
operator|.
name|getFirst
argument_list|()
decl_stmt|;
specifier|final
name|int
name|rowCount
init|=
name|labelsAndRowCount
operator|.
name|getSecond
argument_list|()
decl_stmt|;
comment|//create a open permission directory.
specifier|final
name|Path
name|openDir
init|=
operator|new
name|Path
argument_list|(
literal|"testAccessCase"
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|openDir
operator|.
name|getFileSystem
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|openDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|openDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|output
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|openDir
argument_list|,
literal|"output"
argument_list|)
argument_list|)
decl_stmt|;
name|AccessTestAction
name|exportAction
init|=
parameter_list|()
lambda|->
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|labels
operator|.
name|forEach
argument_list|(
name|v
lambda|->
name|buf
operator|.
name|append
argument_list|(
name|v
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|deleteCharAt
argument_list|(
name|buf
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-D "
operator|+
name|ExportUtils
operator|.
name|EXPORT_VISIBILITY_LABELS
operator|+
literal|"="
operator|+
name|buf
operator|.
name|toString
argument_list|()
operator|,
name|exportTable
operator|,
name|output
operator|.
name|toString
argument_list|()
operator|,
block|}
empty_stmt|;
name|Export
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
decl||
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|SecureTestUtil
operator|.
name|verifyAllowed
argument_list|(
name|exportAction
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_OWNER
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TableDescriptor
name|importHtd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|importTable
argument_list|)
argument_list|)
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILYB
argument_list|)
argument_list|)
operator|.
name|setOwnerString
argument_list|(
name|USER_OWNER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SecureTestUtil
operator|.
name|createTable
argument_list|(
name|UTIL
argument_list|,
name|importHtd
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"s"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|AccessTestAction
name|importAction
init|=
parameter_list|()
lambda|->
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-D"
operator|+
name|Import
operator|.
name|CF_RENAME_PROP
operator|+
literal|"="
operator|+
name|FAMILYA_STRING
operator|+
literal|":"
operator|+
name|FAMILYB_STRING
operator|,
name|importTable
operator|,
name|output
operator|.
name|toString
argument_list|()
block|}
empty_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Import
argument_list|()
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
decl_stmt|;
name|SecureTestUtil
operator|.
name|verifyAllowed
argument_list|(
name|importAction
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_OWNER
argument_list|)
argument_list|)
expr_stmt|;
name|AccessTestAction
name|scanAction
init|=
parameter_list|()
lambda|->
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setAuthorizations
argument_list|(
operator|new
name|Authorizations
argument_list|(
name|labels
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Table
name|table
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|importHtd
operator|.
name|getTableName
argument_list|()
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
operator|++
name|count
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|rowCount
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
decl_stmt|;
name|SecureTestUtil
operator|.
name|verifyAllowed
argument_list|(
name|scanAction
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_OWNER
argument_list|)
argument_list|)
expr_stmt|;
name|AccessTestAction
name|deleteAction
init|=
parameter_list|()
lambda|->
block|{
name|UTIL
operator|.
name|deleteTable
argument_list|(
name|importHtd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
decl_stmt|;
name|SecureTestUtil
operator|.
name|verifyAllowed
argument_list|(
name|deleteAction
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_OWNER
argument_list|)
argument_list|)
expr_stmt|;
name|clearOutput
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
name|AccessTestAction
name|deleteAction
init|=
parameter_list|()
lambda|->
block|{
name|UTIL
operator|.
name|deleteTable
argument_list|(
name|exportHtd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
decl_stmt|;
name|SecureTestUtil
operator|.
name|verifyAllowed
argument_list|(
name|deleteAction
argument_list|,
name|getUserByLogin
argument_list|(
name|USER_OWNER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

