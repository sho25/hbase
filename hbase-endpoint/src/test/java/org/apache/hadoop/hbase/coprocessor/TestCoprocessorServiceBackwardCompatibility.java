begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|DummyRegionServerEndpointProtos
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Tests to ensure that 2.0 is backward compatible in loading CoprocessorService.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestCoprocessorServiceBackwardCompatibility
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestCoprocessorServiceBackwardCompatibility
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|CONF
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MASTER
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|REGIONSERVER
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|REGION
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
class|class
name|DummyCoprocessorService
extends|extends
name|DummyService
implements|implements
name|CoprocessorService
implements|,
name|SingletonCoprocessorService
block|{
comment|// depending on the value passed thru DummyRequest, the following fields would be incremented
comment|// value == MASTER
specifier|static
name|int
name|numMaster
init|=
literal|0
decl_stmt|;
comment|// value == REGIONSERVER
specifier|static
name|int
name|numRegionServer
init|=
literal|0
decl_stmt|;
comment|// value == REGION
specifier|static
name|int
name|numRegion
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Service
name|getService
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dummyCall
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DummyRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|DummyResponse
argument_list|>
name|callback
parameter_list|)
block|{
name|callback
operator|.
name|run
argument_list|(
name|DummyResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setValue
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getValue
argument_list|()
operator|==
name|MASTER
condition|)
block|{
name|numMaster
operator|+=
name|request
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|getValue
argument_list|()
operator|==
name|REGIONSERVER
condition|)
block|{
name|numRegionServer
operator|+=
name|request
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|getValue
argument_list|()
operator|==
name|REGION
condition|)
block|{
name|numRegion
operator|+=
name|request
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dummyThrow
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DummyRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|DummyResponse
argument_list|>
name|callback
parameter_list|)
block|{     }
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|CONF
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|CONF
operator|.
name|setStrings
argument_list|(
name|CoprocessorHost
operator|.
name|MASTER_COPROCESSOR_CONF_KEY
argument_list|,
name|DummyCoprocessorService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setStrings
argument_list|(
name|CoprocessorHost
operator|.
name|REGIONSERVER_COPROCESSOR_CONF_KEY
argument_list|,
name|DummyCoprocessorService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setStrings
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|DummyCoprocessorService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfter
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCoprocessorServiceLoadedByMaster
parameter_list|()
throws|throws
name|Throwable
block|{
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|coprocessorService
argument_list|()
operator|.
name|callBlockingMethod
argument_list|(
name|DummyCoprocessorService
operator|.
name|getDescriptor
argument_list|()
operator|.
name|findMethodByName
argument_list|(
literal|"dummyCall"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|DummyRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setValue
argument_list|(
name|MASTER
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|DummyResponse
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MASTER
argument_list|,
name|DummyCoprocessorService
operator|.
name|numMaster
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|coprocessorService
argument_list|(
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|.
name|callBlockingMethod
argument_list|(
name|DummyCoprocessorService
operator|.
name|getDescriptor
argument_list|()
operator|.
name|findMethodByName
argument_list|(
literal|"dummyCall"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|DummyRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setValue
argument_list|(
name|REGIONSERVER
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|DummyResponse
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REGIONSERVER
argument_list|,
name|DummyCoprocessorService
operator|.
name|numRegionServer
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"hbase:meta"
argument_list|)
argument_list|)
operator|.
name|batchCoprocessorService
argument_list|(
name|DummyCoprocessorService
operator|.
name|getDescriptor
argument_list|()
operator|.
name|findMethodByName
argument_list|(
literal|"dummyCall"
argument_list|)
argument_list|,
name|DummyRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setValue
argument_list|(
name|REGION
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|DummyResponse
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REGION
argument_list|,
name|DummyCoprocessorService
operator|.
name|numRegion
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

