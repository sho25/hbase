begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|LongStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|AsyncAggregationClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|LongColumnInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|AggregateImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|CoprocessorTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|,
name|CoprocessorTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAsyncAggregationClient
block|{
specifier|private
specifier|static
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestAsyncAggregationClient"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|CF
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CF"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|CQ
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CQ"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|CQ2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CQ2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|COUNT
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
name|AsyncConnection
name|CONN
decl_stmt|;
specifier|private
specifier|static
name|RawAsyncTable
name|TABLE
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|AggregateImplementation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
literal|8
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|111
init|;
name|i
operator|<
literal|999
condition|;
name|i
operator|+=
literal|111
control|)
block|{
name|splitKeys
index|[
name|i
operator|/
literal|111
operator|-
literal|1
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|UTIL
operator|.
name|createTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|CF
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|CONN
operator|=
name|ConnectionFactory
operator|.
name|createAsyncConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|TABLE
operator|=
name|CONN
operator|.
name|getRawTable
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|TABLE
operator|.
name|putAll
argument_list|(
name|LongStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|COUNT
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|l
lambda|->
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|l
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|l
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|l
operator|*
name|l
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|CONN
operator|.
name|close
argument_list|()
expr_stmt|;
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMax
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|assertEquals
argument_list|(
name|COUNT
operator|-
literal|1
argument_list|,
name|AsyncAggregationClient
operator|.
name|max
argument_list|(
name|TABLE
argument_list|,
operator|new
name|LongColumnInterpreter
argument_list|()
argument_list|,
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMin
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|AsyncAggregationClient
operator|.
name|min
argument_list|(
name|TABLE
argument_list|,
operator|new
name|LongColumnInterpreter
argument_list|()
argument_list|,
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCount
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|assertEquals
argument_list|(
name|COUNT
argument_list|,
name|AsyncAggregationClient
operator|.
name|rowCount
argument_list|(
name|TABLE
argument_list|,
operator|new
name|LongColumnInterpreter
argument_list|()
argument_list|,
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSum
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|assertEquals
argument_list|(
name|COUNT
operator|*
operator|(
name|COUNT
operator|-
literal|1
operator|)
operator|/
literal|2
argument_list|,
name|AsyncAggregationClient
operator|.
name|sum
argument_list|(
name|TABLE
argument_list|,
operator|new
name|LongColumnInterpreter
argument_list|()
argument_list|,
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|double
name|DELTA
init|=
literal|1E
operator|-
literal|3
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testAvg
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|assertEquals
argument_list|(
operator|(
name|COUNT
operator|-
literal|1
operator|)
operator|/
literal|2.0
argument_list|,
name|AsyncAggregationClient
operator|.
name|avg
argument_list|(
name|TABLE
argument_list|,
operator|new
name|LongColumnInterpreter
argument_list|()
argument_list|,
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStd
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|double
name|avgSq
init|=
name|LongStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|COUNT
argument_list|)
operator|.
name|map
argument_list|(
name|l
lambda|->
name|l
operator|*
name|l
argument_list|)
operator|.
name|reduce
argument_list|(
parameter_list|(
name|l1
parameter_list|,
name|l2
parameter_list|)
lambda|->
name|l1
operator|+
name|l2
argument_list|)
operator|.
name|getAsLong
argument_list|()
operator|/
operator|(
name|double
operator|)
name|COUNT
decl_stmt|;
name|double
name|avg
init|=
operator|(
name|COUNT
operator|-
literal|1
operator|)
operator|/
literal|2.0
decl_stmt|;
name|double
name|std
init|=
name|Math
operator|.
name|sqrt
argument_list|(
name|avgSq
operator|-
name|avg
operator|*
name|avg
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|std
argument_list|,
name|AsyncAggregationClient
operator|.
name|std
argument_list|(
name|TABLE
argument_list|,
operator|new
name|LongColumnInterpreter
argument_list|()
argument_list|,
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMedian
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|long
name|halfSum
init|=
name|COUNT
operator|*
operator|(
name|COUNT
operator|-
literal|1
operator|)
operator|/
literal|4
decl_stmt|;
name|long
name|median
init|=
literal|0L
decl_stmt|;
name|long
name|sum
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|sum
operator|+=
name|i
expr_stmt|;
if|if
condition|(
name|sum
operator|>
name|halfSum
condition|)
block|{
name|median
operator|=
name|i
operator|-
literal|1
expr_stmt|;
break|break;
block|}
block|}
name|assertEquals
argument_list|(
name|median
argument_list|,
name|AsyncAggregationClient
operator|.
name|median
argument_list|(
name|TABLE
argument_list|,
operator|new
name|LongColumnInterpreter
argument_list|()
argument_list|,
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMedianWithWeight
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|long
name|halfSum
init|=
name|LongStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|COUNT
argument_list|)
operator|.
name|map
argument_list|(
name|l
lambda|->
name|l
operator|*
name|l
argument_list|)
operator|.
name|reduce
argument_list|(
parameter_list|(
name|l1
parameter_list|,
name|l2
parameter_list|)
lambda|->
name|l1
operator|+
name|l2
argument_list|)
operator|.
name|getAsLong
argument_list|()
operator|/
literal|2
decl_stmt|;
name|long
name|median
init|=
literal|0L
decl_stmt|;
name|long
name|sum
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|sum
operator|+=
name|i
operator|*
name|i
expr_stmt|;
if|if
condition|(
name|sum
operator|>
name|halfSum
condition|)
block|{
name|median
operator|=
name|i
operator|-
literal|1
expr_stmt|;
break|break;
block|}
block|}
name|assertEquals
argument_list|(
name|median
argument_list|,
name|AsyncAggregationClient
operator|.
name|median
argument_list|(
name|TABLE
argument_list|,
operator|new
name|LongColumnInterpreter
argument_list|()
argument_list|,
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ
argument_list|)
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ2
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

