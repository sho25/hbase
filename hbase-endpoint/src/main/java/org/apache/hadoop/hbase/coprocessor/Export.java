begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|ExportUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|Import
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|ResultSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|DelegationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ExportProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|token
operator|.
name|FsDelegationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteStringer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|DefaultCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Export an HBase table. Writes content to sequence files up in HDFS. Use  * {@link Import} to read it back in again. It is implemented by the endpoint  * technique.  *  * @see org.apache.hadoop.hbase.mapreduce.Export  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|COPROC
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|Export
extends|extends
name|ExportProtos
operator|.
name|ExportService
implements|implements
name|RegionCoprocessor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Export
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|CompressionCodec
argument_list|>
name|DEFAULT_CODEC
init|=
name|DefaultCodec
operator|.
name|class
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SequenceFile
operator|.
name|CompressionType
name|DEFAULT_TYPE
init|=
name|SequenceFile
operator|.
name|CompressionType
operator|.
name|RECORD
decl_stmt|;
specifier|private
name|RegionCoprocessorEnvironment
name|env
init|=
literal|null
decl_stmt|;
specifier|private
name|UserProvider
name|userProvider
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Response
argument_list|>
name|response
init|=
name|run
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|response
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Response
argument_list|>
name|run
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
index|[]
name|otherArgs
init|=
operator|new
name|GenericOptionsParser
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
operator|.
name|getRemainingArgs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ExportUtils
operator|.
name|isValidArguements
argument_list|(
name|args
argument_list|)
condition|)
block|{
name|ExportUtils
operator|.
name|usage
argument_list|(
literal|"Wrong number of arguments: "
operator|+
name|ArrayUtils
operator|.
name|getLength
argument_list|(
name|otherArgs
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Triple
argument_list|<
name|TableName
argument_list|,
name|Scan
argument_list|,
name|Path
argument_list|>
name|arguments
init|=
name|ExportUtils
operator|.
name|getArgumentsFromCommandLine
argument_list|(
name|conf
argument_list|,
name|otherArgs
argument_list|)
decl_stmt|;
return|return
name|run
argument_list|(
name|conf
argument_list|,
name|arguments
operator|.
name|getFirst
argument_list|()
argument_list|,
name|arguments
operator|.
name|getSecond
argument_list|()
argument_list|,
name|arguments
operator|.
name|getThird
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Response
argument_list|>
name|run
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|Throwable
block|{
name|FileSystem
name|fs
init|=
name|dir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|UserProvider
name|userProvider
init|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|checkDir
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|FsDelegationToken
name|fsDelegationToken
init|=
operator|new
name|FsDelegationToken
argument_list|(
name|userProvider
argument_list|,
literal|"renewer"
argument_list|)
decl_stmt|;
name|fsDelegationToken
operator|.
name|acquireDelegationToken
argument_list|(
name|fs
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|ExportProtos
operator|.
name|ExportRequest
name|request
init|=
name|getConfiguredRequest
argument_list|(
name|conf
argument_list|,
name|dir
argument_list|,
name|scan
argument_list|,
name|fsDelegationToken
operator|.
name|getUserToken
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|con
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|table
operator|=
name|con
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Response
argument_list|>
name|result
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|table
operator|.
name|coprocessorService
argument_list|(
name|ExportProtos
operator|.
name|ExportService
operator|.
name|class
argument_list|,
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|,
parameter_list|(
name|ExportProtos
operator|.
name|ExportService
name|service
parameter_list|)
lambda|->
block|{
name|ServerRpcController
name|controller
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|ExportProtos
operator|.
name|ExportResponse
argument_list|>
name|rval
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|CoprocessorRpcUtils
operator|.
name|BlockingRpcCallback
argument_list|<
name|ExportProtos
operator|.
name|ExportResponse
argument_list|>
name|rpcCallback
init|=
operator|new
name|CoprocessorRpcUtils
operator|.
name|BlockingRpcCallback
argument_list|<>
argument_list|()
decl_stmt|;
name|service
operator|.
name|export
argument_list|(
name|controller
argument_list|,
name|request
argument_list|,
name|rpcCallback
argument_list|)
expr_stmt|;
if|if
condition|(
name|controller
operator|.
name|failedOnException
argument_list|()
condition|)
block|{
throw|throw
name|controller
operator|.
name|getFailedOn
argument_list|()
throw|;
block|}
return|return
name|rpcCallback
operator|.
name|get
argument_list|()
return|;
block|}
argument_list|)
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|result
operator|.
name|put
argument_list|(
name|k
argument_list|,
operator|new
name|Response
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
name|fsDelegationToken
operator|.
name|releaseDelegationToken
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|getCompression
parameter_list|(
specifier|final
name|ExportProtos
operator|.
name|ExportRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|hasCompressed
argument_list|()
condition|)
block|{
return|return
name|request
operator|.
name|getCompressed
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
name|SequenceFile
operator|.
name|CompressionType
name|getCompressionType
parameter_list|(
specifier|final
name|ExportProtos
operator|.
name|ExportRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|hasCompressType
argument_list|()
condition|)
block|{
return|return
name|SequenceFile
operator|.
name|CompressionType
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getCompressType
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|DEFAULT_TYPE
return|;
block|}
block|}
specifier|private
specifier|static
name|CompressionCodec
name|getCompressionCodec
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|ExportProtos
operator|.
name|ExportRequest
name|request
parameter_list|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|CompressionCodec
argument_list|>
name|codecClass
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasCompressCodec
argument_list|()
condition|)
block|{
name|codecClass
operator|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|request
operator|.
name|getCompressCodec
argument_list|()
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|CompressionCodec
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|codecClass
operator|=
name|DEFAULT_CODEC
expr_stmt|;
block|}
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|codecClass
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Compression codec "
operator|+
name|request
operator|.
name|getCompressCodec
argument_list|()
operator|+
literal|" was not found."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|SequenceFile
operator|.
name|Writer
operator|.
name|Option
name|getOutputPath
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|RegionInfo
name|info
parameter_list|,
specifier|final
name|ExportProtos
operator|.
name|ExportRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|request
operator|.
name|getOutputPath
argument_list|()
argument_list|,
literal|"export-"
operator|+
name|info
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|file
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|file
operator|+
literal|" exists"
argument_list|)
throw|;
block|}
return|return
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|file
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|SequenceFile
operator|.
name|Writer
operator|.
name|Option
argument_list|>
name|getWriterOptions
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|RegionInfo
name|info
parameter_list|,
specifier|final
name|ExportProtos
operator|.
name|ExportRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SequenceFile
operator|.
name|Writer
operator|.
name|Option
argument_list|>
name|rval
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|rval
operator|.
name|add
argument_list|(
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|rval
operator|.
name|add
argument_list|(
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|Result
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|rval
operator|.
name|add
argument_list|(
name|getOutputPath
argument_list|(
name|conf
argument_list|,
name|info
argument_list|,
name|request
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getCompression
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|rval
operator|.
name|add
argument_list|(
name|SequenceFile
operator|.
name|Writer
operator|.
name|compression
argument_list|(
name|getCompressionType
argument_list|(
name|request
argument_list|)
argument_list|,
name|getCompressionCodec
argument_list|(
name|conf
argument_list|,
name|request
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rval
operator|.
name|add
argument_list|(
name|SequenceFile
operator|.
name|Writer
operator|.
name|compression
argument_list|(
name|SequenceFile
operator|.
name|CompressionType
operator|.
name|NONE
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rval
return|;
block|}
specifier|private
specifier|static
name|ExportProtos
operator|.
name|ExportResponse
name|processData
parameter_list|(
specifier|final
name|Region
name|region
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|UserProvider
name|userProvider
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|,
specifier|final
name|Token
name|userToken
parameter_list|,
specifier|final
name|List
argument_list|<
name|SequenceFile
operator|.
name|Writer
operator|.
name|Option
argument_list|>
name|opts
parameter_list|)
throws|throws
name|IOException
block|{
name|ScanCoprocessor
name|cp
init|=
operator|new
name|ScanCoprocessor
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|RegionScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
init|(
name|RegionOp
name|regionOp
init|=
operator|new
name|RegionOp
argument_list|(
name|region
argument_list|)
init|;
name|SecureWriter
name|out
operator|=
operator|new
name|SecureWriter
argument_list|(
name|conf
argument_list|,
name|userProvider
argument_list|,
name|userToken
argument_list|,
name|opts
argument_list|)
init|)
block|{
name|scanner
operator|=
name|cp
operator|.
name|checkScannerOpen
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|ImmutableBytesWritable
name|key
init|=
operator|new
name|ImmutableBytesWritable
argument_list|()
decl_stmt|;
name|long
name|rowCount
init|=
literal|0
decl_stmt|;
name|long
name|cellCount
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|hasMore
decl_stmt|;
do|do
block|{
name|boolean
name|bypass
init|=
name|cp
operator|.
name|preScannerNext
argument_list|(
name|scanner
argument_list|,
name|results
argument_list|,
name|scan
operator|.
name|getBatch
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bypass
condition|)
block|{
name|hasMore
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|hasMore
operator|=
name|scanner
operator|.
name|nextRaw
argument_list|(
name|cells
argument_list|)
expr_stmt|;
if|if
condition|(
name|cells
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Cell
name|firstCell
init|=
name|cells
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|firstCell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|firstCell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|firstCell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Why the RegionScanner#nextRaw returns the data of different"
operator|+
literal|" rows?? first row="
operator|+
name|Bytes
operator|.
name|toHex
argument_list|(
name|firstCell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|firstCell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|firstCell
operator|.
name|getRowLength
argument_list|()
argument_list|)
operator|+
literal|", current row="
operator|+
name|Bytes
operator|.
name|toHex
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|results
operator|.
name|add
argument_list|(
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|)
argument_list|)
expr_stmt|;
name|cells
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cp
operator|.
name|postScannerNext
argument_list|(
name|scanner
argument_list|,
name|results
argument_list|,
name|scan
operator|.
name|getBatch
argument_list|()
argument_list|,
name|hasMore
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Result
name|r
range|:
name|results
control|)
block|{
name|key
operator|.
name|set
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|r
argument_list|)
expr_stmt|;
operator|++
name|rowCount
expr_stmt|;
name|cellCount
operator|+=
name|r
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|hasMore
condition|)
do|;
return|return
name|ExportProtos
operator|.
name|ExportResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRowCount
argument_list|(
name|rowCount
argument_list|)
operator|.
name|setCellCount
argument_list|(
name|cellCount
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
finally|finally
block|{
name|cp
operator|.
name|checkScannerClose
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkDir
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The "
operator|+
name|dir
operator|+
literal|" exists"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create the "
operator|+
name|dir
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|ExportProtos
operator|.
name|ExportRequest
name|getConfiguredRequest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|dir
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|,
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|userToken
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|compressed
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|compressionType
init|=
name|conf
operator|.
name|get
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_TYPE
argument_list|,
name|DEFAULT_TYPE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|compressionCodec
init|=
name|conf
operator|.
name|get
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_CODEC
argument_list|,
name|DEFAULT_CODEC
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|DelegationToken
name|protoToken
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|userToken
operator|!=
literal|null
condition|)
block|{
name|protoToken
operator|=
name|DelegationToken
operator|.
name|newBuilder
argument_list|()
operator|.
name|setIdentifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|userToken
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setPassword
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|userToken
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setKind
argument_list|(
name|userToken
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setService
argument_list|(
name|userToken
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"compressed="
operator|+
name|compressed
operator|+
literal|", compression type="
operator|+
name|compressionType
operator|+
literal|", compression codec="
operator|+
name|compressionCodec
operator|+
literal|", userToken="
operator|+
name|userToken
argument_list|)
expr_stmt|;
name|ExportProtos
operator|.
name|ExportRequest
operator|.
name|Builder
name|builder
init|=
name|ExportProtos
operator|.
name|ExportRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setScan
argument_list|(
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|scan
argument_list|)
argument_list|)
operator|.
name|setOutputPath
argument_list|(
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setCompressed
argument_list|(
name|compressed
argument_list|)
operator|.
name|setCompressCodec
argument_list|(
name|compressionCodec
argument_list|)
operator|.
name|setCompressType
argument_list|(
name|compressionType
argument_list|)
decl_stmt|;
if|if
condition|(
name|protoToken
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setFsToken
argument_list|(
name|protoToken
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|environment
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|environment
operator|instanceof
name|RegionCoprocessorEnvironment
condition|)
block|{
name|env
operator|=
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|environment
expr_stmt|;
name|userProvider
operator|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|env
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CoprocessorException
argument_list|(
literal|"Must be loaded on a table region!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Service
argument_list|>
name|getServices
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|export
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ExportProtos
operator|.
name|ExportRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|ExportProtos
operator|.
name|ExportResponse
argument_list|>
name|done
parameter_list|)
block|{
name|Region
name|region
init|=
name|env
operator|.
name|getRegion
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|env
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
literal|"io.serializations"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"io.serializations"
argument_list|)
argument_list|,
name|ResultSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Scan
name|scan
init|=
name|validateKey
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|Token
name|userToken
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|userProvider
operator|.
name|isHadoopSecurityEnabled
argument_list|()
operator|&&
operator|!
name|request
operator|.
name|hasFsToken
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Hadoop security is enable, but no found of user token"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|userProvider
operator|.
name|isHadoopSecurityEnabled
argument_list|()
condition|)
block|{
name|userToken
operator|=
operator|new
name|Token
argument_list|(
name|request
operator|.
name|getFsToken
argument_list|()
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|request
operator|.
name|getFsToken
argument_list|()
operator|.
name|getPassword
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|request
operator|.
name|getFsToken
argument_list|()
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|request
operator|.
name|getFsToken
argument_list|()
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ExportProtos
operator|.
name|ExportResponse
name|response
init|=
name|processData
argument_list|(
name|region
argument_list|,
name|conf
argument_list|,
name|userProvider
argument_list|,
name|scan
argument_list|,
name|userToken
argument_list|,
name|getWriterOptions
argument_list|(
name|conf
argument_list|,
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|request
argument_list|)
argument_list|)
decl_stmt|;
name|done
operator|.
name|run
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|CoprocessorRpcUtils
operator|.
name|setControllerException
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Scan
name|validateKey
parameter_list|(
specifier|final
name|RegionInfo
name|region
parameter_list|,
specifier|final
name|ExportProtos
operator|.
name|ExportRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|request
operator|.
name|getScan
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|regionStartKey
init|=
name|region
operator|.
name|getStartKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|originStartKey
init|=
name|scan
operator|.
name|getStartRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|originStartKey
operator|==
literal|null
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|originStartKey
argument_list|,
name|regionStartKey
argument_list|)
operator|<
literal|0
condition|)
block|{
name|scan
operator|.
name|withStartRow
argument_list|(
name|regionStartKey
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|regionEndKey
init|=
name|region
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|originEndKey
init|=
name|scan
operator|.
name|getStopRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|originEndKey
operator|==
literal|null
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|originEndKey
argument_list|,
name|regionEndKey
argument_list|)
operator|>
literal|0
condition|)
block|{
name|scan
operator|.
name|withStartRow
argument_list|(
name|regionEndKey
argument_list|)
expr_stmt|;
block|}
return|return
name|scan
return|;
block|}
specifier|private
specifier|static
class|class
name|RegionOp
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|Region
name|region
decl_stmt|;
name|RegionOp
parameter_list|(
specifier|final
name|Region
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|region
operator|.
name|startRegionOperation
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|region
operator|.
name|closeRegionOperation
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ScanCoprocessor
block|{
specifier|private
specifier|final
name|HRegion
name|region
decl_stmt|;
name|ScanCoprocessor
parameter_list|(
specifier|final
name|Region
name|region
parameter_list|)
block|{
name|this
operator|.
name|region
operator|=
operator|(
name|HRegion
operator|)
name|region
expr_stmt|;
block|}
name|RegionScanner
name|checkScannerOpen
parameter_list|(
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionScanner
name|scanner
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|==
literal|null
condition|)
block|{
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preScannerOpen
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postScannerOpen
argument_list|(
name|scan
argument_list|,
name|scanner
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to open region scanner"
argument_list|)
throw|;
block|}
return|return
name|scanner
return|;
block|}
name|void
name|checkScannerClose
parameter_list|(
specifier|final
name|InternalScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|==
literal|null
condition|)
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preScannerClose
argument_list|(
name|s
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postScannerClose
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|preScannerNext
parameter_list|(
specifier|final
name|InternalScanner
name|s
parameter_list|,
specifier|final
name|List
argument_list|<
name|Result
argument_list|>
name|results
parameter_list|,
specifier|final
name|int
name|limit
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|Boolean
name|bypass
init|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|preScannerNext
argument_list|(
name|s
argument_list|,
name|results
argument_list|,
name|limit
argument_list|)
decl_stmt|;
return|return
name|bypass
operator|==
literal|null
condition|?
literal|false
else|:
name|bypass
return|;
block|}
block|}
name|boolean
name|postScannerNext
parameter_list|(
specifier|final
name|InternalScanner
name|s
parameter_list|,
specifier|final
name|List
argument_list|<
name|Result
argument_list|>
name|results
parameter_list|,
specifier|final
name|int
name|limit
parameter_list|,
name|boolean
name|hasMore
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|postScannerNext
argument_list|(
name|s
argument_list|,
name|results
argument_list|,
name|limit
argument_list|,
name|hasMore
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|SecureWriter
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|PrivilegedWriter
name|privilegedWriter
decl_stmt|;
name|SecureWriter
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|UserProvider
name|userProvider
parameter_list|,
specifier|final
name|Token
name|userToken
parameter_list|,
specifier|final
name|List
argument_list|<
name|SequenceFile
operator|.
name|Writer
operator|.
name|Option
argument_list|>
name|opts
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|getActiveUser
argument_list|(
name|userProvider
argument_list|,
name|userToken
argument_list|)
decl_stmt|;
try|try
block|{
name|SequenceFile
operator|.
name|Writer
name|sequenceFileWriter
init|=
name|user
operator|.
name|runAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|SequenceFile
operator|.
name|Writer
argument_list|>
call|)
argument_list|()
operator|->
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|opts
operator|.
name|toArray
argument_list|(
operator|new
name|SequenceFile
operator|.
name|Writer
operator|.
name|Option
index|[
name|opts
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|privilegedWriter
operator|=
operator|new
name|PrivilegedWriter
argument_list|(
name|user
argument_list|,
name|sequenceFileWriter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|void
name|append
parameter_list|(
specifier|final
name|Object
name|key
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|privilegedWriter
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|User
name|getActiveUser
parameter_list|(
specifier|final
name|UserProvider
name|userProvider
parameter_list|,
specifier|final
name|Token
name|userToken
parameter_list|)
throws|throws
name|IOException
block|{
name|User
name|user
init|=
name|RpcServer
operator|.
name|getRequestUser
argument_list|()
operator|.
name|orElse
argument_list|(
name|userProvider
operator|.
name|getCurrent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
operator|&&
name|userToken
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No found of user credentials, but a token was got from user request"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|user
operator|!=
literal|null
operator|&&
name|userToken
operator|!=
literal|null
condition|)
block|{
name|user
operator|.
name|addToken
argument_list|(
name|userToken
argument_list|)
expr_stmt|;
block|}
return|return
name|user
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|privilegedWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PrivilegedWriter
implements|implements
name|PrivilegedExceptionAction
argument_list|<
name|Boolean
argument_list|>
implements|,
name|Closeable
block|{
specifier|private
specifier|final
name|User
name|user
decl_stmt|;
specifier|private
specifier|final
name|SequenceFile
operator|.
name|Writer
name|out
decl_stmt|;
specifier|private
name|Object
name|key
decl_stmt|;
specifier|private
name|Object
name|value
decl_stmt|;
name|PrivilegedWriter
parameter_list|(
specifier|final
name|User
name|user
parameter_list|,
specifier|final
name|SequenceFile
operator|.
name|Writer
name|out
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
name|void
name|append
parameter_list|(
specifier|final
name|Object
name|key
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
try|try
block|{
name|user
operator|.
name|runAs
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|out
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
specifier|static
class|class
name|Response
block|{
specifier|private
specifier|final
name|long
name|rowCount
decl_stmt|;
specifier|private
specifier|final
name|long
name|cellCount
decl_stmt|;
specifier|private
name|Response
parameter_list|(
name|ExportProtos
operator|.
name|ExportResponse
name|r
parameter_list|)
block|{
name|this
operator|.
name|rowCount
operator|=
name|r
operator|.
name|getRowCount
argument_list|()
expr_stmt|;
name|this
operator|.
name|cellCount
operator|=
name|r
operator|.
name|getCellCount
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getRowCount
parameter_list|()
block|{
return|return
name|rowCount
return|;
block|}
specifier|public
name|long
name|getCellCount
parameter_list|()
block|{
return|return
name|cellCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|35
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|append
argument_list|(
literal|"rowCount="
argument_list|)
operator|.
name|append
argument_list|(
name|rowCount
argument_list|)
operator|.
name|append
argument_list|(
literal|", cellCount="
argument_list|)
operator|.
name|append
argument_list|(
name|cellCount
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

