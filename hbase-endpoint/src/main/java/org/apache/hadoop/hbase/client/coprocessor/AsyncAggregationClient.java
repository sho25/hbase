begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|AggregationHelper
operator|.
name|getParsedGenericInstance
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|AggregationHelper
operator|.
name|validateArgAndGetPB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FutureUtils
operator|.
name|addListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AdvancedScanResultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncTable
operator|.
name|CoprocessorCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ColumnInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AggregateProtos
operator|.
name|AggregateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AggregateProtos
operator|.
name|AggregateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AggregateProtos
operator|.
name|AggregateService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * This client class is for invoking the aggregate functions deployed on the Region Server side via  * the AggregateService. This class will implement the supporting functionality for  * summing/processing the individual results obtained from the AggregateService for each region.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
specifier|final
class|class
name|AsyncAggregationClient
block|{
specifier|private
name|AsyncAggregationClient
parameter_list|()
block|{}
specifier|private
specifier|static
specifier|abstract
class|class
name|AbstractAggregationCallback
parameter_list|<
name|T
parameter_list|>
implements|implements
name|CoprocessorCallback
argument_list|<
name|AggregateResponse
argument_list|>
block|{
specifier|private
specifier|final
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|future
decl_stmt|;
specifier|protected
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
specifier|private
name|void
name|completeExceptionally
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|finished
condition|)
block|{
return|return;
block|}
name|finished
operator|=
literal|true
expr_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|AbstractAggregationCallback
parameter_list|(
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|future
parameter_list|)
block|{
name|this
operator|.
name|future
operator|=
name|future
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onRegionError
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onError
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|aggregate
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|AggregateResponse
name|resp
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onRegionComplete
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|AggregateResponse
name|resp
parameter_list|)
block|{
try|try
block|{
name|aggregate
argument_list|(
name|region
argument_list|,
name|resp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|T
name|getFinalResult
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onComplete
parameter_list|()
block|{
if|if
condition|(
name|finished
condition|)
block|{
return|return;
block|}
name|finished
operator|=
literal|true
expr_stmt|;
name|future
operator|.
name|complete
argument_list|(
name|getFinalResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|,
name|P
extends|extends
name|Message
parameter_list|,
name|Q
extends|extends
name|Message
parameter_list|,
name|T
extends|extends
name|Message
parameter_list|>
name|R
name|getCellValueFromProto
parameter_list|(
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|T
argument_list|>
name|ci
parameter_list|,
name|AggregateResponse
name|resp
parameter_list|,
name|int
name|firstPartIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|Q
name|q
init|=
name|getParsedGenericInstance
argument_list|(
name|ci
operator|.
name|getClass
argument_list|()
argument_list|,
literal|3
argument_list|,
name|resp
operator|.
name|getFirstPart
argument_list|(
name|firstPartIndex
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ci
operator|.
name|getCellValueFromProto
argument_list|(
name|q
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|,
name|P
extends|extends
name|Message
parameter_list|,
name|Q
extends|extends
name|Message
parameter_list|,
name|T
extends|extends
name|Message
parameter_list|>
name|S
name|getPromotedValueFromProto
parameter_list|(
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|T
argument_list|>
name|ci
parameter_list|,
name|AggregateResponse
name|resp
parameter_list|,
name|int
name|firstPartIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|T
name|t
init|=
name|getParsedGenericInstance
argument_list|(
name|ci
operator|.
name|getClass
argument_list|()
argument_list|,
literal|4
argument_list|,
name|resp
operator|.
name|getFirstPart
argument_list|(
name|firstPartIndex
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ci
operator|.
name|getPromotedValueFromProto
argument_list|(
name|t
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|nullToEmpty
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
name|b
operator|!=
literal|null
condition|?
name|b
else|:
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|,
name|P
extends|extends
name|Message
parameter_list|,
name|Q
extends|extends
name|Message
parameter_list|,
name|T
extends|extends
name|Message
parameter_list|>
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|max
parameter_list|(
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
parameter_list|,
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|T
argument_list|>
name|ci
parameter_list|,
name|Scan
name|scan
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|AggregateRequest
name|req
decl_stmt|;
try|try
block|{
name|req
operator|=
name|validateArgAndGetPB
argument_list|(
name|scan
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
name|AbstractAggregationCallback
argument_list|<
name|R
argument_list|>
name|callback
init|=
operator|new
name|AbstractAggregationCallback
argument_list|<
name|R
argument_list|>
argument_list|(
name|future
argument_list|)
block|{
specifier|private
name|R
name|max
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|aggregate
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|AggregateResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|resp
operator|.
name|getFirstPartCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|R
name|result
init|=
name|getCellValueFromProto
argument_list|(
name|ci
argument_list|,
name|resp
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|max
operator|==
literal|null
operator|||
operator|(
name|result
operator|!=
literal|null
operator|&&
name|ci
operator|.
name|compare
argument_list|(
name|max
argument_list|,
name|result
argument_list|)
operator|<
literal|0
operator|)
condition|)
block|{
name|max
operator|=
name|result
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|R
name|getFinalResult
parameter_list|()
block|{
return|return
name|max
return|;
block|}
block|}
decl_stmt|;
name|table
operator|.
expr|<
name|AggregateService
operator|,
name|AggregateResponse
operator|>
name|coprocessorService
argument_list|(
name|AggregateService
operator|::
name|newStub
argument_list|,
parameter_list|(
name|stub
parameter_list|,
name|controller
parameter_list|,
name|rpcCallback
parameter_list|)
lambda|->
name|stub
operator|.
name|getMax
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|rpcCallback
argument_list|)
argument_list|,
name|callback
argument_list|)
operator|.
name|fromRow
argument_list|(
name|nullToEmpty
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|)
argument_list|,
name|scan
operator|.
name|includeStartRow
argument_list|()
argument_list|)
operator|.
name|toRow
argument_list|(
name|nullToEmpty
argument_list|(
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|)
argument_list|,
name|scan
operator|.
name|includeStopRow
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|,
name|P
extends|extends
name|Message
parameter_list|,
name|Q
extends|extends
name|Message
parameter_list|,
name|T
extends|extends
name|Message
parameter_list|>
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|min
parameter_list|(
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
parameter_list|,
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|T
argument_list|>
name|ci
parameter_list|,
name|Scan
name|scan
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|AggregateRequest
name|req
decl_stmt|;
try|try
block|{
name|req
operator|=
name|validateArgAndGetPB
argument_list|(
name|scan
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
name|AbstractAggregationCallback
argument_list|<
name|R
argument_list|>
name|callback
init|=
operator|new
name|AbstractAggregationCallback
argument_list|<
name|R
argument_list|>
argument_list|(
name|future
argument_list|)
block|{
specifier|private
name|R
name|min
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|aggregate
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|AggregateResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|resp
operator|.
name|getFirstPartCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|R
name|result
init|=
name|getCellValueFromProto
argument_list|(
name|ci
argument_list|,
name|resp
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|==
literal|null
operator|||
operator|(
name|result
operator|!=
literal|null
operator|&&
name|ci
operator|.
name|compare
argument_list|(
name|min
argument_list|,
name|result
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
name|min
operator|=
name|result
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|R
name|getFinalResult
parameter_list|()
block|{
return|return
name|min
return|;
block|}
block|}
decl_stmt|;
name|table
operator|.
expr|<
name|AggregateService
operator|,
name|AggregateResponse
operator|>
name|coprocessorService
argument_list|(
name|AggregateService
operator|::
name|newStub
argument_list|,
parameter_list|(
name|stub
parameter_list|,
name|controller
parameter_list|,
name|rpcCallback
parameter_list|)
lambda|->
name|stub
operator|.
name|getMin
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|rpcCallback
argument_list|)
argument_list|,
name|callback
argument_list|)
operator|.
name|fromRow
argument_list|(
name|nullToEmpty
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|)
argument_list|,
name|scan
operator|.
name|includeStartRow
argument_list|()
argument_list|)
operator|.
name|toRow
argument_list|(
name|nullToEmpty
argument_list|(
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|)
argument_list|,
name|scan
operator|.
name|includeStopRow
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|,
name|P
extends|extends
name|Message
parameter_list|,
name|Q
extends|extends
name|Message
parameter_list|,
name|T
extends|extends
name|Message
parameter_list|>
name|CompletableFuture
argument_list|<
name|Long
argument_list|>
name|rowCount
parameter_list|(
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
parameter_list|,
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|T
argument_list|>
name|ci
parameter_list|,
name|Scan
name|scan
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Long
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|AggregateRequest
name|req
decl_stmt|;
try|try
block|{
name|req
operator|=
name|validateArgAndGetPB
argument_list|(
name|scan
argument_list|,
name|ci
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
name|AbstractAggregationCallback
argument_list|<
name|Long
argument_list|>
name|callback
init|=
operator|new
name|AbstractAggregationCallback
argument_list|<
name|Long
argument_list|>
argument_list|(
name|future
argument_list|)
block|{
specifier|private
name|long
name|count
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|aggregate
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|AggregateResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
name|count
operator|+=
name|resp
operator|.
name|getFirstPart
argument_list|(
literal|0
argument_list|)
operator|.
name|asReadOnlyByteBuffer
argument_list|()
operator|.
name|getLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Long
name|getFinalResult
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
decl_stmt|;
name|table
operator|.
expr|<
name|AggregateService
operator|,
name|AggregateResponse
operator|>
name|coprocessorService
argument_list|(
name|AggregateService
operator|::
name|newStub
argument_list|,
parameter_list|(
name|stub
parameter_list|,
name|controller
parameter_list|,
name|rpcCallback
parameter_list|)
lambda|->
name|stub
operator|.
name|getRowNum
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|rpcCallback
argument_list|)
argument_list|,
name|callback
argument_list|)
operator|.
name|fromRow
argument_list|(
name|nullToEmpty
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|)
argument_list|,
name|scan
operator|.
name|includeStartRow
argument_list|()
argument_list|)
operator|.
name|toRow
argument_list|(
name|nullToEmpty
argument_list|(
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|)
argument_list|,
name|scan
operator|.
name|includeStopRow
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|,
name|P
extends|extends
name|Message
parameter_list|,
name|Q
extends|extends
name|Message
parameter_list|,
name|T
extends|extends
name|Message
parameter_list|>
name|CompletableFuture
argument_list|<
name|S
argument_list|>
name|sum
parameter_list|(
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
parameter_list|,
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|T
argument_list|>
name|ci
parameter_list|,
name|Scan
name|scan
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|S
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|AggregateRequest
name|req
decl_stmt|;
try|try
block|{
name|req
operator|=
name|validateArgAndGetPB
argument_list|(
name|scan
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
name|AbstractAggregationCallback
argument_list|<
name|S
argument_list|>
name|callback
init|=
operator|new
name|AbstractAggregationCallback
argument_list|<
name|S
argument_list|>
argument_list|(
name|future
argument_list|)
block|{
specifier|private
name|S
name|sum
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|aggregate
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|AggregateResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|resp
operator|.
name|getFirstPartCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|S
name|s
init|=
name|getPromotedValueFromProto
argument_list|(
name|ci
argument_list|,
name|resp
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|sum
operator|=
name|ci
operator|.
name|add
argument_list|(
name|sum
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|S
name|getFinalResult
parameter_list|()
block|{
return|return
name|sum
return|;
block|}
block|}
decl_stmt|;
name|table
operator|.
expr|<
name|AggregateService
operator|,
name|AggregateResponse
operator|>
name|coprocessorService
argument_list|(
name|AggregateService
operator|::
name|newStub
argument_list|,
parameter_list|(
name|stub
parameter_list|,
name|controller
parameter_list|,
name|rpcCallback
parameter_list|)
lambda|->
name|stub
operator|.
name|getSum
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|rpcCallback
argument_list|)
argument_list|,
name|callback
argument_list|)
operator|.
name|fromRow
argument_list|(
name|nullToEmpty
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|)
argument_list|,
name|scan
operator|.
name|includeStartRow
argument_list|()
argument_list|)
operator|.
name|toRow
argument_list|(
name|nullToEmpty
argument_list|(
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|)
argument_list|,
name|scan
operator|.
name|includeStopRow
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|,
name|P
extends|extends
name|Message
parameter_list|,
name|Q
extends|extends
name|Message
parameter_list|,
name|T
extends|extends
name|Message
parameter_list|>
name|CompletableFuture
argument_list|<
name|Double
argument_list|>
name|avg
parameter_list|(
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
parameter_list|,
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|T
argument_list|>
name|ci
parameter_list|,
name|Scan
name|scan
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Double
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|AggregateRequest
name|req
decl_stmt|;
try|try
block|{
name|req
operator|=
name|validateArgAndGetPB
argument_list|(
name|scan
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
name|AbstractAggregationCallback
argument_list|<
name|Double
argument_list|>
name|callback
init|=
operator|new
name|AbstractAggregationCallback
argument_list|<
name|Double
argument_list|>
argument_list|(
name|future
argument_list|)
block|{
specifier|private
name|S
name|sum
decl_stmt|;
name|long
name|count
init|=
literal|0L
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|aggregate
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|AggregateResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|resp
operator|.
name|getFirstPartCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sum
operator|=
name|ci
operator|.
name|add
argument_list|(
name|sum
argument_list|,
name|getPromotedValueFromProto
argument_list|(
name|ci
argument_list|,
name|resp
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|+=
name|resp
operator|.
name|getSecondPart
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
operator|.
name|getLong
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Double
name|getFinalResult
parameter_list|()
block|{
return|return
name|ci
operator|.
name|divideForAvg
argument_list|(
name|sum
argument_list|,
name|count
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|table
operator|.
expr|<
name|AggregateService
operator|,
name|AggregateResponse
operator|>
name|coprocessorService
argument_list|(
name|AggregateService
operator|::
name|newStub
argument_list|,
parameter_list|(
name|stub
parameter_list|,
name|controller
parameter_list|,
name|rpcCallback
parameter_list|)
lambda|->
name|stub
operator|.
name|getAvg
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|rpcCallback
argument_list|)
argument_list|,
name|callback
argument_list|)
operator|.
name|fromRow
argument_list|(
name|nullToEmpty
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|)
argument_list|,
name|scan
operator|.
name|includeStartRow
argument_list|()
argument_list|)
operator|.
name|toRow
argument_list|(
name|nullToEmpty
argument_list|(
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|)
argument_list|,
name|scan
operator|.
name|includeStopRow
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|,
name|P
extends|extends
name|Message
parameter_list|,
name|Q
extends|extends
name|Message
parameter_list|,
name|T
extends|extends
name|Message
parameter_list|>
name|CompletableFuture
argument_list|<
name|Double
argument_list|>
name|std
parameter_list|(
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
parameter_list|,
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|T
argument_list|>
name|ci
parameter_list|,
name|Scan
name|scan
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Double
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|AggregateRequest
name|req
decl_stmt|;
try|try
block|{
name|req
operator|=
name|validateArgAndGetPB
argument_list|(
name|scan
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
name|AbstractAggregationCallback
argument_list|<
name|Double
argument_list|>
name|callback
init|=
operator|new
name|AbstractAggregationCallback
argument_list|<
name|Double
argument_list|>
argument_list|(
name|future
argument_list|)
block|{
specifier|private
name|S
name|sum
decl_stmt|;
specifier|private
name|S
name|sumSq
decl_stmt|;
specifier|private
name|long
name|count
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|aggregate
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|AggregateResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|resp
operator|.
name|getFirstPartCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sum
operator|=
name|ci
operator|.
name|add
argument_list|(
name|sum
argument_list|,
name|getPromotedValueFromProto
argument_list|(
name|ci
argument_list|,
name|resp
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|sumSq
operator|=
name|ci
operator|.
name|add
argument_list|(
name|sumSq
argument_list|,
name|getPromotedValueFromProto
argument_list|(
name|ci
argument_list|,
name|resp
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|+=
name|resp
operator|.
name|getSecondPart
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
operator|.
name|getLong
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Double
name|getFinalResult
parameter_list|()
block|{
name|double
name|avg
init|=
name|ci
operator|.
name|divideForAvg
argument_list|(
name|sum
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|double
name|avgSq
init|=
name|ci
operator|.
name|divideForAvg
argument_list|(
name|sumSq
argument_list|,
name|count
argument_list|)
decl_stmt|;
return|return
name|Math
operator|.
name|sqrt
argument_list|(
name|avgSq
operator|-
name|avg
operator|*
name|avg
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|table
operator|.
expr|<
name|AggregateService
operator|,
name|AggregateResponse
operator|>
name|coprocessorService
argument_list|(
name|AggregateService
operator|::
name|newStub
argument_list|,
parameter_list|(
name|stub
parameter_list|,
name|controller
parameter_list|,
name|rpcCallback
parameter_list|)
lambda|->
name|stub
operator|.
name|getStd
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|rpcCallback
argument_list|)
argument_list|,
name|callback
argument_list|)
operator|.
name|fromRow
argument_list|(
name|nullToEmpty
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|)
argument_list|,
name|scan
operator|.
name|includeStartRow
argument_list|()
argument_list|)
operator|.
name|toRow
argument_list|(
name|nullToEmpty
argument_list|(
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|)
argument_list|,
name|scan
operator|.
name|includeStopRow
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|future
return|;
block|}
comment|// the map key is the startRow of the region
specifier|private
specifier|static
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|,
name|P
extends|extends
name|Message
parameter_list|,
name|Q
extends|extends
name|Message
parameter_list|,
name|T
extends|extends
name|Message
parameter_list|>
name|CompletableFuture
argument_list|<
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|S
argument_list|>
argument_list|>
name|sumByRegion
parameter_list|(
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
parameter_list|,
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|T
argument_list|>
name|ci
parameter_list|,
name|Scan
name|scan
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|S
argument_list|>
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|S
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|AggregateRequest
name|req
decl_stmt|;
try|try
block|{
name|req
operator|=
name|validateArgAndGetPB
argument_list|(
name|scan
argument_list|,
name|ci
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
name|int
name|firstPartIndex
init|=
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|scan
operator|.
name|getFamilies
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|AbstractAggregationCallback
argument_list|<
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|S
argument_list|>
argument_list|>
name|callback
init|=
operator|new
name|AbstractAggregationCallback
argument_list|<
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|S
argument_list|>
argument_list|>
argument_list|(
name|future
argument_list|)
block|{
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|S
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|aggregate
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|AggregateResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|resp
operator|.
name|getFirstPartCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|region
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|getPromotedValueFromProto
argument_list|(
name|ci
argument_list|,
name|resp
argument_list|,
name|firstPartIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|S
argument_list|>
name|getFinalResult
parameter_list|()
block|{
return|return
name|map
return|;
block|}
block|}
decl_stmt|;
name|table
operator|.
expr|<
name|AggregateService
operator|,
name|AggregateResponse
operator|>
name|coprocessorService
argument_list|(
name|AggregateService
operator|::
name|newStub
argument_list|,
parameter_list|(
name|stub
parameter_list|,
name|controller
parameter_list|,
name|rpcCallback
parameter_list|)
lambda|->
name|stub
operator|.
name|getMedian
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|rpcCallback
argument_list|)
argument_list|,
name|callback
argument_list|)
operator|.
name|fromRow
argument_list|(
name|nullToEmpty
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|)
argument_list|,
name|scan
operator|.
name|includeStartRow
argument_list|()
argument_list|)
operator|.
name|toRow
argument_list|(
name|nullToEmpty
argument_list|(
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|)
argument_list|,
name|scan
operator|.
name|includeStopRow
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|,
name|P
extends|extends
name|Message
parameter_list|,
name|Q
extends|extends
name|Message
parameter_list|,
name|T
extends|extends
name|Message
parameter_list|>
name|void
name|findMedian
parameter_list|(
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|future
parameter_list|,
name|AsyncTable
argument_list|<
name|AdvancedScanResultConsumer
argument_list|>
name|table
parameter_list|,
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|T
argument_list|>
name|ci
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|S
argument_list|>
name|sumByRegion
parameter_list|)
block|{
name|double
name|halfSum
init|=
name|ci
operator|.
name|divideForAvg
argument_list|(
name|sumByRegion
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|reduce
argument_list|(
name|ci
operator|::
name|add
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|2L
argument_list|)
decl_stmt|;
name|S
name|movingSum
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|startRow
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|S
argument_list|>
name|entry
range|:
name|sumByRegion
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|startRow
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|S
name|newMovingSum
init|=
name|ci
operator|.
name|add
argument_list|(
name|movingSum
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|divideForAvg
argument_list|(
name|newMovingSum
argument_list|,
literal|1L
argument_list|)
operator|>
name|halfSum
condition|)
block|{
break|break;
block|}
name|movingSum
operator|=
name|newMovingSum
expr_stmt|;
block|}
if|if
condition|(
name|startRow
operator|!=
literal|null
condition|)
block|{
name|scan
operator|.
name|withStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
block|}
comment|// we can not pass movingSum directly to an anonymous class as it is not final.
name|S
name|baseSum
init|=
name|movingSum
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|scan
operator|.
name|getFamilies
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|byte
index|[]
name|weightQualifier
init|=
name|qualifiers
operator|.
name|last
argument_list|()
decl_stmt|;
name|byte
index|[]
name|valueQualifier
init|=
name|qualifiers
operator|.
name|first
argument_list|()
decl_stmt|;
name|table
operator|.
name|scan
argument_list|(
name|scan
argument_list|,
operator|new
name|AdvancedScanResultConsumer
argument_list|()
block|{
specifier|private
name|S
name|sum
init|=
name|baseSum
decl_stmt|;
specifier|private
name|R
name|value
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onNext
parameter_list|(
name|Result
index|[]
name|results
parameter_list|,
name|ScanController
name|controller
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|Result
name|result
range|:
name|results
control|)
block|{
name|Cell
name|weightCell
init|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|family
argument_list|,
name|weightQualifier
argument_list|)
decl_stmt|;
name|R
name|weight
init|=
name|ci
operator|.
name|getValue
argument_list|(
name|family
argument_list|,
name|weightQualifier
argument_list|,
name|weightCell
argument_list|)
decl_stmt|;
name|sum
operator|=
name|ci
operator|.
name|add
argument_list|(
name|sum
argument_list|,
name|ci
operator|.
name|castToReturnType
argument_list|(
name|weight
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ci
operator|.
name|divideForAvg
argument_list|(
name|sum
argument_list|,
literal|1L
argument_list|)
operator|>
name|halfSum
condition|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|NoSuchElementException
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|controller
operator|.
name|terminate
argument_list|()
expr_stmt|;
return|return;
block|}
name|Cell
name|valueCell
init|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|family
argument_list|,
name|valueQualifier
argument_list|)
decl_stmt|;
name|value
operator|=
name|ci
operator|.
name|getValue
argument_list|(
name|family
argument_list|,
name|valueQualifier
argument_list|,
name|valueCell
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|controller
operator|.
name|terminate
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onError
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onComplete
parameter_list|()
block|{
if|if
condition|(
operator|!
name|future
operator|.
name|isDone
argument_list|()
condition|)
block|{
comment|// we should not reach here as the future should be completed in onNext.
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|NoSuchElementException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|,
name|P
extends|extends
name|Message
parameter_list|,
name|Q
extends|extends
name|Message
parameter_list|,
name|T
extends|extends
name|Message
parameter_list|>
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|median
parameter_list|(
name|AsyncTable
argument_list|<
name|AdvancedScanResultConsumer
argument_list|>
name|table
parameter_list|,
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|T
argument_list|>
name|ci
parameter_list|,
name|Scan
name|scan
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|sumByRegion
argument_list|(
name|table
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
argument_list|,
parameter_list|(
name|sumByRegion
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sumByRegion
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|NoSuchElementException
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|findMedian
argument_list|(
name|future
argument_list|,
name|table
argument_list|,
name|ci
argument_list|,
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|scan
operator|.
name|getClass
argument_list|()
argument_list|,
name|scan
argument_list|)
argument_list|,
name|sumByRegion
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
block|}
end_class

end_unit

