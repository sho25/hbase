begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ColumnInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AggregateProtos
operator|.
name|AggregateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Helper class for constructing aggregation request and response.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|AggregationHelper
block|{
comment|/**    * @param scan    * @param canFamilyBeAbsent whether column family can be absent in familyMap of scan    */
specifier|private
specifier|static
name|void
name|validateParameters
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|boolean
name|canFamilyBeAbsent
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|scan
operator|==
literal|null
operator|||
operator|(
name|Bytes
operator|.
name|equals
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|)
operator|&&
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|)
operator|||
operator|(
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|)
operator|>
literal|0
operator|)
operator|&&
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Agg client Exception: Startrow should be smaller than Stoprow"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|canFamilyBeAbsent
condition|)
block|{
if|if
condition|(
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"There must be only one family."
argument_list|)
throw|;
block|}
block|}
block|}
specifier|static
parameter_list|<
name|R
parameter_list|,
name|S
parameter_list|,
name|P
extends|extends
name|Message
parameter_list|,
name|Q
extends|extends
name|Message
parameter_list|,
name|T
extends|extends
name|Message
parameter_list|>
name|AggregateRequest
name|validateArgAndGetPB
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|ColumnInterpreter
argument_list|<
name|R
argument_list|,
name|S
argument_list|,
name|P
argument_list|,
name|Q
argument_list|,
name|T
argument_list|>
name|ci
parameter_list|,
name|boolean
name|canFamilyBeAbsent
parameter_list|)
throws|throws
name|IOException
block|{
name|validateParameters
argument_list|(
name|scan
argument_list|,
name|canFamilyBeAbsent
argument_list|)
expr_stmt|;
specifier|final
name|AggregateRequest
operator|.
name|Builder
name|requestBuilder
init|=
name|AggregateRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|requestBuilder
operator|.
name|setInterpreterClassName
argument_list|(
name|ci
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|P
name|columnInterpreterSpecificData
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|columnInterpreterSpecificData
operator|=
name|ci
operator|.
name|getRequestData
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|requestBuilder
operator|.
name|setInterpreterSpecificBytes
argument_list|(
name|columnInterpreterSpecificData
operator|.
name|toByteString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|requestBuilder
operator|.
name|setScan
argument_list|(
name|ProtobufUtil
operator|.
name|toScan
argument_list|(
name|scan
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|requestBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Get an instance of the argument type declared in a class's signature. The argument type is    * assumed to be a PB Message subclass, and the instance is created using parseFrom method on the    * passed ByteString.    * @param runtimeClass the runtime type of the class    * @param position the position of the argument in the class declaration    * @param b the ByteString which should be parsed to get the instance created    * @return the instance    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Used server-side too by Aggregation Coprocesor Endpoint. Undo this interdependence. TODO.
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Message
parameter_list|>
name|T
name|getParsedGenericInstance
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|runtimeClass
parameter_list|,
name|int
name|position
parameter_list|,
name|ByteString
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|Type
name|type
init|=
name|runtimeClass
operator|.
name|getGenericSuperclass
argument_list|()
decl_stmt|;
name|Type
name|argType
init|=
operator|(
operator|(
name|ParameterizedType
operator|)
name|type
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
name|position
index|]
decl_stmt|;
name|Class
argument_list|<
name|T
argument_list|>
name|classType
init|=
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|argType
decl_stmt|;
name|T
name|inst
decl_stmt|;
try|try
block|{
name|Method
name|m
init|=
name|classType
operator|.
name|getMethod
argument_list|(
literal|"parseFrom"
argument_list|,
name|ByteString
operator|.
name|class
argument_list|)
decl_stmt|;
name|inst
operator|=
operator|(
name|T
operator|)
name|m
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|inst
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

