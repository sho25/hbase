begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Perform read/write to the replication queue storage.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
interface|interface
name|ReplicationQueueStorage
block|{
comment|/**    * Remove a replication queue for a given regionserver.    * @param serverName the name of the regionserver    * @param queueId a String that identifies the queue.    */
name|void
name|removeQueue
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Add a new WAL file to the given queue for a given regionserver. If the queue does not exist it    * is created.    * @param serverName the name of the regionserver    * @param queueId a String that identifies the queue.    * @param fileName name of the WAL    */
name|void
name|addWAL
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Remove an WAL file from the given queue for a given regionserver.    * @param serverName the name of the regionserver    * @param queueId a String that identifies the queue.    * @param fileName name of the WAL    */
name|void
name|removeWAL
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Set the current position for a specific WAL in a given queue for a given regionserver.    * @param serverName the name of the regionserver    * @param queueId a String that identifies the queue    * @param fileName name of the WAL    * @param position the current position in the file. Will ignore if less than or equal to 0.    * @param lastSeqIds map with {encodedRegionName, sequenceId} pairs for serial replication.    */
name|void
name|setWALPosition
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|,
name|String
name|fileName
parameter_list|,
name|long
name|position
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|lastSeqIds
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Read the max sequence id of the specific region for a given peer. For serial replication, we    * need the max sequenced id to decide whether we can push the next entries.    * @param encodedRegionName the encoded region name    * @param peerId peer id    * @return the max sequence id of the specific region for a given peer.    */
name|long
name|getLastSequenceId
parameter_list|(
name|String
name|encodedRegionName
parameter_list|,
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Set the max sequence id of a bunch of regions for a given peer. Will be called when setting up    * a serial replication peer.    * @param peerId peer id    * @param lastSeqIds map with {encodedRegionName, sequenceId} pairs for serial replication.    */
name|void
name|setLastSequenceIds
parameter_list|(
name|String
name|peerId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|lastSeqIds
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Remove all the max sequence id record for the given peer.    * @param peerId peer id    */
name|void
name|removeLastSequenceIds
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Remove the max sequence id record for the given peer and regions.    * @param peerId peer id    * @param encodedRegionNames the encoded region names    */
name|void
name|removeLastSequenceIds
parameter_list|(
name|String
name|peerId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|encodedRegionNames
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Get the current position for a specific WAL in a given queue for a given regionserver.    * @param serverName the name of the regionserver    * @param queueId a String that identifies the queue    * @param fileName name of the WAL    * @return the current position in the file    */
name|long
name|getWALPosition
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Get a list of all WALs in the given queue on the given region server.    * @param serverName the server name of the region server that owns the queue    * @param queueId a String that identifies the queue    * @return a list of WALs    */
name|List
argument_list|<
name|String
argument_list|>
name|getWALsInQueue
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Get a list of all queues for the specified region server.    * @param serverName the server name of the region server that owns the set of queues    * @return a list of queueIds    */
name|List
argument_list|<
name|String
argument_list|>
name|getAllQueues
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Change ownership for the queue identified by queueId and belongs to a dead region server.    * @param sourceServerName the name of the dead region server    * @param destServerName the name of the target region server    * @param queueId the id of the queue    * @return the new PeerId and A SortedSet of WALs in its queue    */
name|Pair
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|claimQueue
parameter_list|(
name|ServerName
name|sourceServerName
parameter_list|,
name|String
name|queueId
parameter_list|,
name|ServerName
name|destServerName
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Remove the record of region server if the queue is empty.    */
name|void
name|removeReplicatorIfQueueIsEmpty
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Get a list of all region servers that have outstanding replication queues. These servers could    * be alive, dead or from a previous run of the cluster.    * @return a list of server names    */
name|List
argument_list|<
name|ServerName
argument_list|>
name|getListOfReplicators
parameter_list|()
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Load all wals in all replication queues. This method guarantees to return a snapshot which    * contains all WALs at the start of this call even there is concurrent queue failover. However,    * some newly created WALs during the call may not be included.    */
name|Set
argument_list|<
name|String
argument_list|>
name|getAllWALs
parameter_list|()
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Add a peer to hfile reference queue if peer does not exist.    * @param peerId peer cluster id to be added    * @throws ReplicationException if fails to add a peer id to hfile reference queue    */
name|void
name|addPeerToHFileRefs
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Remove a peer from hfile reference queue.    * @param peerId peer cluster id to be removed    */
name|void
name|removePeerFromHFileRefs
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Add new hfile references to the queue.    * @param peerId peer cluster id to which the hfiles need to be replicated    * @param pairs list of pairs of { HFile location in staging dir, HFile path in region dir which    *          will be added in the queue }    * @throws ReplicationException if fails to add a hfile reference    */
name|void
name|addHFileRefs
parameter_list|(
name|String
name|peerId
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|>
name|pairs
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Remove hfile references from the queue.    * @param peerId peer cluster id from which this hfile references needs to be removed    * @param files list of hfile references to be removed    */
name|void
name|removeHFileRefs
parameter_list|(
name|String
name|peerId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Get list of all peers from hfile reference queue.    * @return a list of peer ids    */
name|List
argument_list|<
name|String
argument_list|>
name|getAllPeersFromHFileRefsQueue
parameter_list|()
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Get a list of all hfile references in the given peer.    * @param peerId a String that identifies the peer    * @return a list of hfile references    */
name|List
argument_list|<
name|String
argument_list|>
name|getReplicableHFiles
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
function_decl|;
comment|/**    * Load all hfile references in all replication queues. This method guarantees to return a    * snapshot which contains all hfile references at the start of this call. However, some newly    * created hfile references during the call may not be included.    */
name|Set
argument_list|<
name|String
argument_list|>
name|getAllHFileRefs
parameter_list|()
throws|throws
name|ReplicationException
function_decl|;
block|}
end_interface

end_unit

