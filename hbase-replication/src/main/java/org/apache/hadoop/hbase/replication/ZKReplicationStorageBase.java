begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZNodePaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
import|;
end_import

begin_comment
comment|/**  * This is a base class for maintaining replication related data,for example, peer, queue, etc, in  * zookeeper.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|ZKReplicationStorageBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_ZNODE
init|=
literal|"zookeeper.znode.replication"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_ZNODE_DEFAULT
init|=
literal|"replication"
decl_stmt|;
comment|/** The name of the base znode that contains all replication state. */
specifier|protected
specifier|final
name|String
name|replicationZNode
decl_stmt|;
specifier|protected
specifier|final
name|ZKWatcher
name|zookeeper
decl_stmt|;
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|ZKReplicationStorageBase
parameter_list|(
name|ZKWatcher
name|zookeeper
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|zookeeper
operator|=
name|zookeeper
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|replicationZNode
operator|=
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|zookeeper
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|REPLICATION_ZNODE
argument_list|,
name|REPLICATION_ZNODE_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Serialized protobuf of<code>state</code> with pb magic prefix prepended suitable for use as    * content of a peer-state znode under a peer cluster id as in    * /hbase/replication/peers/PEER_ID/peer-state.    */
specifier|protected
specifier|static
name|byte
index|[]
name|toByteArray
parameter_list|(
specifier|final
name|ReplicationProtos
operator|.
name|ReplicationState
operator|.
name|State
name|state
parameter_list|)
block|{
name|ReplicationProtos
operator|.
name|ReplicationState
name|msg
init|=
name|ReplicationProtos
operator|.
name|ReplicationState
operator|.
name|newBuilder
argument_list|()
operator|.
name|setState
argument_list|(
name|state
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// There is no toByteArray on this pb Message?
comment|// 32 bytes is default which seems fair enough here.
try|try
init|(
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|)
block|{
name|CodedOutputStream
name|cos
init|=
name|CodedOutputStream
operator|.
name|newInstance
argument_list|(
name|baos
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|msg
operator|.
name|writeTo
argument_list|(
name|cos
argument_list|)
expr_stmt|;
name|cos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|baos
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

