begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|ReplicationPeerConfigUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|log
operator|.
name|HBaseMarkers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReplicationPeerZKImpl
extends|extends
name|ReplicationStateZKBase
implements|implements
name|ReplicationPeer
implements|,
name|Abortable
implements|,
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplicationPeerZKImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|ReplicationPeerConfig
name|peerConfig
decl_stmt|;
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
specifier|volatile
name|PeerState
name|peerState
decl_stmt|;
specifier|private
specifier|volatile
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCFs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ReplicationPeerConfigListener
argument_list|>
name|peerConfigListeners
decl_stmt|;
comment|/**    * Constructor that takes all the objects required to communicate with the specified peer, except    * for the region server addresses.    * @param conf configuration object to this peer    * @param id string representation of this peer's identifier    * @param peerConfig configuration for the replication peer    */
specifier|public
name|ReplicationPeerZKImpl
parameter_list|(
name|ZKWatcher
name|zkWatcher
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|id
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|,
name|Abortable
name|abortable
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|super
argument_list|(
name|zkWatcher
argument_list|,
name|conf
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|peerConfig
operator|=
name|peerConfig
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|peerConfigListeners
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|private
name|PeerState
name|readPeerState
parameter_list|()
throws|throws
name|ReplicationException
block|{
try|try
block|{
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zookeeper
argument_list|,
name|this
operator|.
name|getPeerStateNode
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|peerState
operator|=
name|isStateEnabled
argument_list|(
name|data
argument_list|)
condition|?
name|PeerState
operator|.
name|ENABLED
else|:
name|PeerState
operator|.
name|DISABLED
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
decl||
name|KeeperException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Get and deserialize peer state data from zookeeper failed: "
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|peerState
return|;
block|}
specifier|private
name|ReplicationPeerConfig
name|readPeerConfig
parameter_list|()
throws|throws
name|ReplicationException
block|{
try|try
block|{
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zookeeper
argument_list|,
name|this
operator|.
name|getPeerNode
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|peerConfig
operator|=
name|ReplicationPeerConfigUtil
operator|.
name|parsePeerFrom
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DeserializationException
decl||
name|KeeperException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Get and deserialize peer config date from zookeeper failed: "
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|peerConfig
return|;
block|}
annotation|@
name|Override
specifier|public
name|PeerState
name|getPeerState
parameter_list|()
block|{
return|return
name|peerState
return|;
block|}
annotation|@
name|Override
specifier|public
name|PeerState
name|getPeerState
parameter_list|(
name|boolean
name|loadFromBackingStore
parameter_list|)
throws|throws
name|ReplicationException
block|{
if|if
condition|(
name|loadFromBackingStore
condition|)
block|{
return|return
name|readPeerState
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|peerState
return|;
block|}
block|}
comment|/**    * Get the identifier of this peer    * @return string representation of the id (short)    */
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**    * Get the peer config object    * @return the ReplicationPeerConfig for this peer    */
annotation|@
name|Override
specifier|public
name|ReplicationPeerConfig
name|getPeerConfig
parameter_list|()
block|{
return|return
name|peerConfig
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReplicationPeerConfig
name|getPeerConfig
parameter_list|(
name|boolean
name|loadFromBackingStore
parameter_list|)
throws|throws
name|ReplicationException
block|{
if|if
condition|(
name|loadFromBackingStore
condition|)
block|{
return|return
name|readPeerConfig
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|peerConfig
return|;
block|}
block|}
comment|/**    * Get the configuration object required to communicate with this peer    * @return configuration object    */
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/**    * Get replicable (table, cf-list) map of this peer    * @return the replicable (table, cf-list) map    */
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getTableCFs
parameter_list|()
block|{
name|this
operator|.
name|tableCFs
operator|=
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|tableCFs
return|;
block|}
comment|/**    * Get replicable namespace set of this peer    * @return the replicable namespaces set    */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNamespaces
parameter_list|()
block|{
return|return
name|this
operator|.
name|peerConfig
operator|.
name|getNamespaces
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPeerBandwidth
parameter_list|()
block|{
return|return
name|this
operator|.
name|peerConfig
operator|.
name|getBandwidth
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerPeerConfigListener
parameter_list|(
name|ReplicationPeerConfigListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|peerConfigListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|triggerPeerConfigChange
parameter_list|(
name|ReplicationPeerConfig
name|newPeerConfig
parameter_list|)
block|{
for|for
control|(
name|ReplicationPeerConfigListener
name|listener
range|:
name|this
operator|.
name|peerConfigListeners
control|)
block|{
name|listener
operator|.
name|peerConfigUpdated
argument_list|(
name|newPeerConfig
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|HBaseMarkers
operator|.
name|FATAL
argument_list|,
literal|"The ReplicationPeer corresponding to peer "
operator|+
name|peerConfig
operator|+
literal|" was aborted for the following reason(s):"
operator|+
name|why
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
comment|// Currently the replication peer is never "Aborted", we just log when the
comment|// abort method is called.
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO: stop zkw?
block|}
comment|/**    * Parse the raw data from ZK to get a peer's state    * @param bytes raw ZK data    * @return True if the passed in<code>bytes</code> are those of a pb serialized ENABLED state.    * @throws DeserializationException if parsing the state fails    */
specifier|public
specifier|static
name|boolean
name|isStateEnabled
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
name|ReplicationProtos
operator|.
name|ReplicationState
operator|.
name|State
name|state
init|=
name|parseStateFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
return|return
name|ReplicationProtos
operator|.
name|ReplicationState
operator|.
name|State
operator|.
name|ENABLED
operator|==
name|state
return|;
block|}
comment|/**    * @param bytes Content of a state znode.    * @return State parsed from the passed bytes.    * @throws DeserializationException if a ProtoBuf operation fails    */
specifier|private
specifier|static
name|ReplicationProtos
operator|.
name|ReplicationState
operator|.
name|State
name|parseStateFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
name|ProtobufUtil
operator|.
name|expectPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|int
name|pbLen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|ReplicationProtos
operator|.
name|ReplicationState
operator|.
name|Builder
name|builder
init|=
name|ReplicationProtos
operator|.
name|ReplicationState
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ReplicationProtos
operator|.
name|ReplicationState
name|state
decl_stmt|;
try|try
block|{
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|bytes
argument_list|,
name|pbLen
argument_list|,
name|bytes
operator|.
name|length
operator|-
name|pbLen
argument_list|)
expr_stmt|;
name|state
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|state
operator|.
name|getState
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

