begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CollectionUtils
operator|.
name|nullToEmpty
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
operator|.
name|ZKUtilOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZNodePaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|BadVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NoNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NodeExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NotEmptyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * ZK based replication queue storage.  *<p>  * The base znode for each regionserver is the regionserver name. For example:  *  *<pre>  * /hbase/replication/rs/hostname.example.org,6020,1234  *</pre>  *  * Within this znode, the region server maintains a set of WAL replication queues. These queues are  * represented by child znodes named using there give queue id. For example:  *  *<pre>  * /hbase/replication/rs/hostname.example.org,6020,1234/1  * /hbase/replication/rs/hostname.example.org,6020,1234/2  *</pre>  *  * Each queue has one child znode for every WAL that still needs to be replicated. The value of  * these WAL child znodes is the latest position that has been replicated. This position is updated  * every time a WAL entry is replicated. For example:  *  *<pre>  * /hbase/replication/rs/hostname.example.org,6020,1234/1/23522342.23422 [VALUE: 254]  *</pre>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|ZKReplicationQueueStorage
extends|extends
name|ZKReplicationStorageBase
implements|implements
name|ReplicationQueueStorage
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZKReplicationQueueStorage
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_ZNODE_REPLICATION_HFILE_REFS_KEY
init|=
literal|"zookeeper.znode.replication.hfile.refs"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_ZNODE_REPLICATION_HFILE_REFS_DEFAULT
init|=
literal|"hfile-refs"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_ZNODE_REPLICATION_REGIONS_KEY
init|=
literal|"zookeeper.znode.replication.regions"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_ZNODE_REPLICATION_REGIONS_DEFAULT
init|=
literal|"regions"
decl_stmt|;
comment|/**    * The name of the znode that contains all replication queues    */
specifier|private
specifier|final
name|String
name|queuesZNode
decl_stmt|;
comment|/**    * The name of the znode that contains queues of hfile references to be replicated    */
specifier|private
specifier|final
name|String
name|hfileRefsZNode
decl_stmt|;
specifier|private
specifier|final
name|String
name|regionsZNode
decl_stmt|;
specifier|public
name|ZKReplicationQueueStorage
parameter_list|(
name|ZKWatcher
name|zookeeper
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|zookeeper
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|queuesZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication.rs"
argument_list|,
literal|"rs"
argument_list|)
decl_stmt|;
name|String
name|hfileRefsZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
name|ZOOKEEPER_ZNODE_REPLICATION_HFILE_REFS_KEY
argument_list|,
name|ZOOKEEPER_ZNODE_REPLICATION_HFILE_REFS_DEFAULT
argument_list|)
decl_stmt|;
name|this
operator|.
name|queuesZNode
operator|=
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|replicationZNode
argument_list|,
name|queuesZNodeName
argument_list|)
expr_stmt|;
name|this
operator|.
name|hfileRefsZNode
operator|=
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|replicationZNode
argument_list|,
name|hfileRefsZNodeName
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionsZNode
operator|=
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|replicationZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|ZOOKEEPER_ZNODE_REPLICATION_REGIONS_KEY
argument_list|,
name|ZOOKEEPER_ZNODE_REPLICATION_REGIONS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getRsNode
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|queuesZNode
argument_list|,
name|serverName
operator|.
name|getServerName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|String
name|getQueueNode
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|)
block|{
return|return
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|getRsNode
argument_list|(
name|serverName
argument_list|)
argument_list|,
name|queueId
argument_list|)
return|;
block|}
specifier|private
name|String
name|getFileNode
parameter_list|(
name|String
name|queueNode
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
return|return
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|queueNode
argument_list|,
name|fileName
argument_list|)
return|;
block|}
specifier|private
name|String
name|getFileNode
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
return|return
name|getFileNode
argument_list|(
name|getQueueNode
argument_list|(
name|serverName
argument_list|,
name|queueId
argument_list|)
argument_list|,
name|fileName
argument_list|)
return|;
block|}
comment|/**    *<p>    * Put all regions under /hbase/replication/regions znode will lead to too many children because    * of the huge number of regions in real production environment. So here we will distribute the    * znodes to multiple directories.    *</p>    *<p>    * So the final znode path will be format like this:    *    *<pre>    * /hbase/replication/regions/dd/04/e76a6966d4ffa908ed0586764767-100    *</pre>    *    * Here the full encoded region name is dd04e76a6966d4ffa908ed0586764767, and we use the first two    * characters 'dd' as the first level directory name, and use the next two characters '04' as the    * second level directory name, and the rest part as the prefix of the znode, and the suffix '100'    * is the peer id.    *</p>    * @param encodedRegionName the encoded region name.    * @param peerId peer id for replication.    * @return ZNode path to persist the max sequence id that we've pushed for the given region and    *         peer.    */
annotation|@
name|VisibleForTesting
name|String
name|getSerialReplicationRegionPeerNode
parameter_list|(
name|String
name|encodedRegionName
parameter_list|,
name|String
name|peerId
parameter_list|)
block|{
if|if
condition|(
name|encodedRegionName
operator|==
literal|null
operator|||
name|encodedRegionName
operator|.
name|length
argument_list|()
operator|!=
name|RegionInfo
operator|.
name|MD5_HEX_LENGTH
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid encoded region name: "
operator|+
name|encodedRegionName
operator|+
literal|", length should be 32."
argument_list|)
throw|;
block|}
return|return
operator|new
name|StringBuilder
argument_list|(
name|regionsZNode
argument_list|)
operator|.
name|append
argument_list|(
name|ZNodePaths
operator|.
name|ZNODE_PATH_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|encodedRegionName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|ZNodePaths
operator|.
name|ZNODE_PATH_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|encodedRegionName
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|ZNodePaths
operator|.
name|ZNODE_PATH_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|encodedRegionName
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|peerId
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeQueue
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|zookeeper
argument_list|,
name|getQueueNode
argument_list|(
name|serverName
argument_list|,
name|queueId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to delete queue (serverName="
operator|+
name|serverName
operator|+
literal|", queueId="
operator|+
name|queueId
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addWAL
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zookeeper
argument_list|,
name|getFileNode
argument_list|(
name|serverName
argument_list|,
name|queueId
argument_list|,
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to add wal to queue (serverName="
operator|+
name|serverName
operator|+
literal|", queueId="
operator|+
name|queueId
operator|+
literal|", fileName="
operator|+
name|fileName
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeWAL
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|String
name|fileNode
init|=
name|getFileNode
argument_list|(
name|serverName
argument_list|,
name|queueId
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|zookeeper
argument_list|,
name|fileNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} already deleted when removing log"
argument_list|,
name|fileNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to remove wal from queue (serverName="
operator|+
name|serverName
operator|+
literal|", queueId="
operator|+
name|queueId
operator|+
literal|", fileName="
operator|+
name|fileName
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|addLastSeqIdsToOps
parameter_list|(
name|String
name|queueId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|lastSeqIds
parameter_list|,
name|List
argument_list|<
name|ZKUtilOp
argument_list|>
name|listOfOps
parameter_list|)
throws|throws
name|KeeperException
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|lastSeqEntry
range|:
name|lastSeqIds
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|peerId
init|=
operator|new
name|ReplicationQueueInfo
argument_list|(
name|queueId
argument_list|)
operator|.
name|getPeerId
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getSerialReplicationRegionPeerNode
argument_list|(
name|lastSeqEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|peerId
argument_list|)
decl_stmt|;
comment|/*        * Make sure the existence of path        * /hbase/replication/regions/<hash>/<encoded-region-name>-<peer-id>. As the javadoc in        * multiOrSequential() method said, if received a NodeExistsException, all operations will        * fail. So create the path here, and in fact, no need to add this operation to listOfOps,        * because only need to make sure that update file position and sequence id atomically.        */
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zookeeper
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|// Persist the max sequence id of region to zookeeper.
name|listOfOps
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|setData
argument_list|(
name|path
argument_list|,
name|ZKUtil
operator|.
name|positionToByteArray
argument_list|(
name|lastSeqEntry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setWALPosition
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|,
name|String
name|fileName
parameter_list|,
name|long
name|position
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|lastSeqIds
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
name|List
argument_list|<
name|ZKUtilOp
argument_list|>
name|listOfOps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|position
operator|>
literal|0
condition|)
block|{
name|listOfOps
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|setData
argument_list|(
name|getFileNode
argument_list|(
name|serverName
argument_list|,
name|queueId
argument_list|,
name|fileName
argument_list|)
argument_list|,
name|ZKUtil
operator|.
name|positionToByteArray
argument_list|(
name|position
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Persist the max sequence id(s) of regions for serial replication atomically.
name|addLastSeqIdsToOps
argument_list|(
name|queueId
argument_list|,
name|lastSeqIds
argument_list|,
name|listOfOps
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zookeeper
argument_list|,
name|listOfOps
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to set log position (serverName="
operator|+
name|serverName
operator|+
literal|", queueId="
operator|+
name|queueId
operator|+
literal|", fileName="
operator|+
name|fileName
operator|+
literal|", position="
operator|+
name|position
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastSequenceId
parameter_list|(
name|String
name|encodedRegionName
parameter_list|,
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|byte
index|[]
name|data
decl_stmt|;
try|try
block|{
name|data
operator|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zookeeper
argument_list|,
name|getSerialReplicationRegionPeerNode
argument_list|(
name|encodedRegionName
argument_list|,
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get the last sequence id(region="
operator|+
name|encodedRegionName
operator|+
literal|", peerId="
operator|+
name|peerId
operator|+
literal|")"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|ZKUtil
operator|.
name|parseWALPositionFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|de
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to parse log position (region="
operator|+
name|encodedRegionName
operator|+
literal|", peerId="
operator|+
name|peerId
operator|+
literal|"), data="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|HConstants
operator|.
name|NO_SEQNUM
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLastSequenceIds
parameter_list|(
name|String
name|peerId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|lastSeqIds
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
name|List
argument_list|<
name|ZKUtilOp
argument_list|>
name|listOfOps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|addLastSeqIdsToOps
argument_list|(
name|peerId
argument_list|,
name|lastSeqIds
argument_list|,
name|listOfOps
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zookeeper
argument_list|,
name|listOfOps
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to set last sequence ids, peerId="
operator|+
name|peerId
operator|+
literal|", lastSeqIds.size="
operator|+
name|lastSeqIds
operator|.
name|size
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getWALPosition
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|byte
index|[]
name|bytes
decl_stmt|;
try|try
block|{
name|bytes
operator|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zookeeper
argument_list|,
name|getFileNode
argument_list|(
name|serverName
argument_list|,
name|queueId
argument_list|,
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get log position (serverName="
operator|+
name|serverName
operator|+
literal|", queueId="
operator|+
name|queueId
operator|+
literal|", fileName="
operator|+
name|fileName
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|ZKUtil
operator|.
name|parseWALPositionFrom
argument_list|(
name|bytes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|de
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed parse log position (serverName={}, queueId={}, fileName={})"
argument_list|,
name|serverName
argument_list|,
name|queueId
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
comment|// if we can not parse the position, start at the beginning of the wal file again
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|claimQueue
parameter_list|(
name|ServerName
name|sourceServerName
parameter_list|,
name|String
name|queueId
parameter_list|,
name|ServerName
name|destServerName
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Atomically moving {}/{}'s WALs to {}"
argument_list|,
name|sourceServerName
argument_list|,
name|queueId
argument_list|,
name|destServerName
argument_list|)
expr_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zookeeper
argument_list|,
name|getRsNode
argument_list|(
name|destServerName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Claim queue queueId="
operator|+
name|queueId
operator|+
literal|" from "
operator|+
name|sourceServerName
operator|+
literal|" to "
operator|+
name|destServerName
operator|+
literal|" failed when creating the node for "
operator|+
name|destServerName
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|String
name|oldQueueNode
init|=
name|getQueueNode
argument_list|(
name|sourceServerName
argument_list|,
name|queueId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|wals
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zookeeper
argument_list|,
name|oldQueueNode
argument_list|)
decl_stmt|;
name|String
name|newQueueId
init|=
name|queueId
operator|+
literal|"-"
operator|+
name|sourceServerName
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|wals
argument_list|)
condition|)
block|{
name|ZKUtil
operator|.
name|deleteNodeFailSilent
argument_list|(
name|zookeeper
argument_list|,
name|oldQueueNode
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed empty {}/{}"
argument_list|,
name|sourceServerName
argument_list|,
name|queueId
argument_list|)
expr_stmt|;
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|newQueueId
argument_list|,
name|Collections
operator|.
name|emptySortedSet
argument_list|()
argument_list|)
return|;
block|}
name|String
name|newQueueNode
init|=
name|getQueueNode
argument_list|(
name|destServerName
argument_list|,
name|newQueueId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ZKUtilOp
argument_list|>
name|listOfOps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|logQueue
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// create the new cluster znode
name|listOfOps
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|newQueueNode
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
comment|// get the offset of the logs and set it to new znodes
for|for
control|(
name|String
name|wal
range|:
name|wals
control|)
block|{
name|String
name|oldWalNode
init|=
name|getFileNode
argument_list|(
name|oldQueueNode
argument_list|,
name|wal
argument_list|)
decl_stmt|;
name|byte
index|[]
name|logOffset
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|oldWalNode
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating {} with data {}"
argument_list|,
name|wal
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|logOffset
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|newWalNode
init|=
name|getFileNode
argument_list|(
name|newQueueNode
argument_list|,
name|wal
argument_list|)
decl_stmt|;
name|listOfOps
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|newWalNode
argument_list|,
name|logOffset
argument_list|)
argument_list|)
expr_stmt|;
name|listOfOps
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|deleteNodeFailSilent
argument_list|(
name|oldWalNode
argument_list|)
argument_list|)
expr_stmt|;
name|logQueue
operator|.
name|add
argument_list|(
name|wal
argument_list|)
expr_stmt|;
block|}
comment|// add delete op for peer
name|listOfOps
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|deleteNodeFailSilent
argument_list|(
name|oldQueueNode
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"The multi list size is {}"
argument_list|,
name|listOfOps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zookeeper
argument_list|,
name|listOfOps
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Atomically moved {}/{}'s WALs to {}"
argument_list|,
name|sourceServerName
argument_list|,
name|queueId
argument_list|,
name|destServerName
argument_list|)
expr_stmt|;
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|newQueueId
argument_list|,
name|logQueue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
decl||
name|NodeExistsException
decl||
name|NotEmptyException
decl||
name|BadVersionException
name|e
parameter_list|)
block|{
comment|// Multi call failed; it looks like some other regionserver took away the logs.
comment|// These exceptions mean that zk tells us the request can not be execute so it is safe to just
comment|// return a null. For other types of exception should be thrown out to notify the upper layer.
name|LOG
operator|.
name|info
argument_list|(
literal|"Claim queue queueId={} from {} to {} failed with {}, someone else took the log?"
argument_list|,
name|queueId
argument_list|,
name|sourceServerName
argument_list|,
name|destServerName
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Claim queue queueId="
operator|+
name|queueId
operator|+
literal|" from "
operator|+
name|sourceServerName
operator|+
literal|" to "
operator|+
name|destServerName
operator|+
literal|" failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeReplicatorIfQueueIsEmpty
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
name|ZKUtil
operator|.
name|deleteNodeFailSilent
argument_list|(
name|zookeeper
argument_list|,
name|getRsNode
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotEmptyException
name|e
parameter_list|)
block|{
comment|// keep silence to avoid logging too much.
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to remove replicator for "
operator|+
name|serverName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|ServerName
argument_list|>
name|getListOfReplicators0
parameter_list|()
throws|throws
name|KeeperException
block|{
return|return
name|nullToEmpty
argument_list|(
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zookeeper
argument_list|,
name|queuesZNode
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ServerName
operator|::
name|parseServerName
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|getListOfReplicators
parameter_list|()
throws|throws
name|ReplicationException
block|{
try|try
block|{
return|return
name|getListOfReplicators0
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get list of replicators"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getWALsInQueue0
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|)
throws|throws
name|KeeperException
block|{
return|return
name|nullToEmpty
argument_list|(
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zookeeper
argument_list|,
name|getQueueNode
argument_list|(
name|serverName
argument_list|,
name|queueId
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getWALsInQueue
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
return|return
name|getWALsInQueue0
argument_list|(
name|serverName
argument_list|,
name|queueId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get wals in queue (serverName="
operator|+
name|serverName
operator|+
literal|", queueId="
operator|+
name|queueId
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getAllQueues0
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|KeeperException
block|{
return|return
name|nullToEmpty
argument_list|(
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zookeeper
argument_list|,
name|getRsNode
argument_list|(
name|serverName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllQueues
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
return|return
name|getAllQueues0
argument_list|(
name|serverName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get all queues (serverName="
operator|+
name|serverName
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// will be overridden in UTs
annotation|@
name|VisibleForTesting
specifier|protected
name|int
name|getQueuesZNodeCversion
parameter_list|()
throws|throws
name|KeeperException
block|{
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|ZKUtil
operator|.
name|getDataNoWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|queuesZNode
argument_list|,
name|stat
argument_list|)
expr_stmt|;
return|return
name|stat
operator|.
name|getCversion
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAllWALs
parameter_list|()
throws|throws
name|ReplicationException
block|{
try|try
block|{
for|for
control|(
name|int
name|retry
init|=
literal|0
init|;
condition|;
name|retry
operator|++
control|)
block|{
name|int
name|v0
init|=
name|getQueuesZNodeCversion
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|rss
init|=
name|getListOfReplicators0
argument_list|()
decl_stmt|;
if|if
condition|(
name|rss
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Didn't find a RegionServer that replicates, won't prevent deletions."
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|wals
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|rs
range|:
name|rss
control|)
block|{
for|for
control|(
name|String
name|queueId
range|:
name|getAllQueues0
argument_list|(
name|rs
argument_list|)
control|)
block|{
name|wals
operator|.
name|addAll
argument_list|(
name|getWALsInQueue0
argument_list|(
name|rs
argument_list|,
name|queueId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|v1
init|=
name|getQueuesZNodeCversion
argument_list|()
decl_stmt|;
if|if
condition|(
name|v0
operator|==
name|v1
condition|)
block|{
return|return
name|wals
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Replication queue node cversion changed from %d to %d, retry = %d"
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|retry
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get all wals"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getHFileRefsPeerNode
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
return|return
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|hfileRefsZNode
argument_list|,
name|peerId
argument_list|)
return|;
block|}
specifier|private
name|String
name|getHFileNode
parameter_list|(
name|String
name|peerNode
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
return|return
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|peerNode
argument_list|,
name|fileName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addPeerToHFileRefs
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|String
name|peerNode
init|=
name|getHFileRefsPeerNode
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zookeeper
argument_list|,
name|peerNode
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding peer {} to hfile reference queue."
argument_list|,
name|peerId
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zookeeper
argument_list|,
name|peerNode
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to add peer "
operator|+
name|peerId
operator|+
literal|" to hfile reference queue."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removePeerFromHFileRefs
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|String
name|peerNode
init|=
name|getHFileRefsPeerNode
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zookeeper
argument_list|,
name|peerNode
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Peer {} not found in hfile reference queue."
argument_list|,
name|peerNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing peer {} from hfile reference queue."
argument_list|,
name|peerNode
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|zookeeper
argument_list|,
name|peerNode
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to remove peer "
operator|+
name|peerId
operator|+
literal|" from hfile reference queue."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addHFileRefs
parameter_list|(
name|String
name|peerId
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|>
name|pairs
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|String
name|peerNode
init|=
name|getHFileRefsPeerNode
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding hfile references {} in queue {}"
argument_list|,
name|pairs
argument_list|,
name|peerNode
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ZKUtilOp
argument_list|>
name|listOfOps
init|=
name|pairs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getSecond
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|n
lambda|->
name|getHFileNode
argument_list|(
name|peerNode
argument_list|,
name|n
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|f
lambda|->
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|f
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"The multi list size for adding hfile references in zk for node {} is {}"
argument_list|,
name|peerNode
argument_list|,
name|listOfOps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|listOfOps
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to add hfile reference to peer "
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeHFileRefs
parameter_list|(
name|String
name|peerId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|String
name|peerNode
init|=
name|getHFileRefsPeerNode
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing hfile references {} from queue {}"
argument_list|,
name|files
argument_list|,
name|peerNode
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ZKUtilOp
argument_list|>
name|listOfOps
init|=
name|files
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|n
lambda|->
name|getHFileNode
argument_list|(
name|peerNode
argument_list|,
name|n
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|ZKUtilOp
operator|::
name|deleteNodeFailSilent
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"The multi list size for removing hfile references in zk for node {} is {}"
argument_list|,
name|peerNode
argument_list|,
name|listOfOps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|listOfOps
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to remove hfile reference from peer "
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getAllPeersFromHFileRefsQueue0
parameter_list|()
throws|throws
name|KeeperException
block|{
return|return
name|nullToEmpty
argument_list|(
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zookeeper
argument_list|,
name|hfileRefsZNode
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllPeersFromHFileRefsQueue
parameter_list|()
throws|throws
name|ReplicationException
block|{
try|try
block|{
return|return
name|getAllPeersFromHFileRefsQueue0
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get list of all peers in hfile references node."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getReplicableHFiles0
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|KeeperException
block|{
return|return
name|nullToEmpty
argument_list|(
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|getHFileRefsPeerNode
argument_list|(
name|peerId
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getReplicableHFiles
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
return|return
name|getReplicableHFiles0
argument_list|(
name|peerId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get list of hfile references for peer "
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// will be overridden in UTs
annotation|@
name|VisibleForTesting
specifier|protected
name|int
name|getHFileRefsZNodeCversion
parameter_list|()
throws|throws
name|ReplicationException
block|{
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|getDataNoWatch
argument_list|(
name|zookeeper
argument_list|,
name|hfileRefsZNode
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get stat of replication hfile references node."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|stat
operator|.
name|getCversion
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAllHFileRefs
parameter_list|()
throws|throws
name|ReplicationException
block|{
try|try
block|{
for|for
control|(
name|int
name|retry
init|=
literal|0
init|;
condition|;
name|retry
operator|++
control|)
block|{
name|int
name|v0
init|=
name|getHFileRefsZNodeCversion
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|peers
init|=
name|getAllPeersFromHFileRefsQueue
argument_list|()
decl_stmt|;
if|if
condition|(
name|peers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Didn't find any peers with hfile references, won't prevent deletions."
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|hfileRefs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|peer
range|:
name|peers
control|)
block|{
name|hfileRefs
operator|.
name|addAll
argument_list|(
name|getReplicableHFiles0
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|v1
init|=
name|getHFileRefsZNodeCversion
argument_list|()
decl_stmt|;
if|if
condition|(
name|v0
operator|==
name|v1
condition|)
block|{
return|return
name|hfileRefs
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Replication hfile references node cversion changed from %d to %d, retry = %d"
argument_list|,
name|v0
argument_list|,
name|v1
argument_list|,
name|retry
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get all hfile refs"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

