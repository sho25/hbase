begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationUtils
operator|.
name|PEER_STATE_DISABLED_BYTES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationUtils
operator|.
name|PEER_STATE_ENABLED_BYTES
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|ReplicationPeerConfigUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Table based replication peer storage.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|TableReplicationPeerStorage
extends|extends
name|TableReplicationStorageBase
implements|implements
name|ReplicationPeerStorage
block|{
specifier|public
name|TableReplicationPeerStorage
parameter_list|(
name|ZKWatcher
name|zookeeper
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|zookeeper
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addPeer
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|,
name|boolean
name|enabled
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|peerId
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY_PEER
argument_list|,
name|QUALIFIER_PEER_CONFIG
argument_list|,
name|ReplicationPeerConfigUtil
operator|.
name|toByteArray
argument_list|(
name|peerConfig
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY_PEER
argument_list|,
name|QUALIFIER_PEER_STATE
argument_list|,
name|enabled
condition|?
name|PEER_STATE_ENABLED_BYTES
else|:
name|PEER_STATE_DISABLED_BYTES
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to add peer "
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removePeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|peerId
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to remove peer "
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// TODO make it to be a checkExistAndMutate operation.
specifier|private
name|boolean
name|peerExist
parameter_list|(
name|String
name|peerId
parameter_list|,
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|peerId
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY_PEER
argument_list|,
name|QUALIFIER_PEER_STATE
argument_list|)
expr_stmt|;
return|return
name|table
operator|.
name|exists
argument_list|(
name|get
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPeerState
parameter_list|(
name|String
name|peerId
parameter_list|,
name|boolean
name|enabled
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
if|if
condition|(
operator|!
name|peerExist
argument_list|(
name|peerId
argument_list|,
name|table
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Peer "
operator|+
name|peerId
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|peerId
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY_PEER
argument_list|,
name|QUALIFIER_PEER_STATE
argument_list|,
name|enabled
condition|?
name|PEER_STATE_ENABLED_BYTES
else|:
name|PEER_STATE_DISABLED_BYTES
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to set peer state, peerId="
operator|+
name|peerId
operator|+
literal|", state="
operator|+
name|enabled
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updatePeerConfig
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
if|if
condition|(
operator|!
name|peerExist
argument_list|(
name|peerId
argument_list|,
name|table
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Peer "
operator|+
name|peerId
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|peerId
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY_PEER
argument_list|,
name|QUALIFIER_PEER_CONFIG
argument_list|,
name|ReplicationPeerConfigUtil
operator|.
name|toByteArray
argument_list|(
name|peerConfig
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to update peer configuration, peerId="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPeerIds
parameter_list|()
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|FAMILY_PEER
argument_list|,
name|QUALIFIER_PEER_STATE
argument_list|)
decl_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|peerIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|peerIds
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|peerIds
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to list peers"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPeerEnabled
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|peerId
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY_PEER
argument_list|,
name|QUALIFIER_PEER_STATE
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Peer "
operator|+
name|peerId
operator|+
literal|" does not found"
argument_list|)
throw|;
block|}
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|PEER_STATE_ENABLED_BYTES
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY_PEER
argument_list|,
name|QUALIFIER_PEER_STATE
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to read the peer state, peerId="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ReplicationPeerConfig
name|getPeerConfig
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|peerId
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY_PEER
argument_list|,
name|QUALIFIER_PEER_CONFIG
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Peer "
operator|+
name|peerId
operator|+
literal|" does not found"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|data
init|=
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY_PEER
argument_list|,
name|QUALIFIER_PEER_CONFIG
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Replication peer config data shouldn't be empty, peerId="
operator|+
name|peerId
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|ReplicationPeerConfigUtil
operator|.
name|parsePeerFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to parse replication peer config for peer with id="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to read the peer configuration in hbase:replication, peerId="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

