begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * This class is a ZooKeeper implementation of the ReplicationTracker interface. This class is  * responsible for handling replication events that are defined in the ReplicationListener  * interface.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReplicationTrackerZKImpl
extends|extends
name|ReplicationStateZKBase
implements|implements
name|ReplicationTracker
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationTrackerZKImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// All about stopping
specifier|private
specifier|final
name|Stoppable
name|stopper
decl_stmt|;
comment|// listeners to be notified
specifier|private
specifier|final
name|List
argument_list|<
name|ReplicationListener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// List of all the other region servers in this cluster
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|otherRegionServers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ReplicationPeers
name|replicationPeers
decl_stmt|;
specifier|public
name|ReplicationTrackerZKImpl
parameter_list|(
name|ZKWatcher
name|zookeeper
parameter_list|,
specifier|final
name|ReplicationPeers
name|replicationPeers
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Abortable
name|abortable
parameter_list|,
name|Stoppable
name|stopper
parameter_list|)
block|{
name|super
argument_list|(
name|zookeeper
argument_list|,
name|conf
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationPeers
operator|=
name|replicationPeers
expr_stmt|;
name|this
operator|.
name|stopper
operator|=
name|stopper
expr_stmt|;
name|this
operator|.
name|zookeeper
operator|.
name|registerListener
argument_list|(
operator|new
name|OtherRegionServerWatcher
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|zookeeper
operator|.
name|registerListener
argument_list|(
operator|new
name|PeersWatcher
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerListener
parameter_list|(
name|ReplicationListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeListener
parameter_list|(
name|ReplicationListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return a snapshot of the current region servers.    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getListOfRegionServers
parameter_list|()
block|{
name|refreshOtherRegionServersList
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|otherRegionServers
init|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|otherRegionServers
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**    * Watcher used to be notified of the other region server's death in the local cluster. It    * initiates the process to transfer the queues if it is able to grab the lock.    */
specifier|public
class|class
name|OtherRegionServerWatcher
extends|extends
name|ZKListener
block|{
comment|/**      * Construct a ZooKeeper event listener.      */
specifier|public
name|OtherRegionServerWatcher
parameter_list|(
name|ZKWatcher
name|watcher
parameter_list|)
block|{
name|super
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called when a new node has been created.      * @param path full path of the new node      */
annotation|@
name|Override
specifier|public
name|void
name|nodeCreated
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|refreshListIfRightPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called when a node has been deleted      * @param path full path of the deleted node      */
annotation|@
name|Override
specifier|public
name|void
name|nodeDeleted
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|stopper
operator|.
name|isStopped
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|cont
init|=
name|refreshListIfRightPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cont
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|path
operator|+
literal|" znode expired, triggering replicatorRemoved event"
argument_list|)
expr_stmt|;
for|for
control|(
name|ReplicationListener
name|rl
range|:
name|listeners
control|)
block|{
name|rl
operator|.
name|regionServerRemoved
argument_list|(
name|getZNodeName
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Called when an existing node has a child node added or removed.      * @param path full path of the node whose children have changed      */
annotation|@
name|Override
specifier|public
name|void
name|nodeChildrenChanged
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|stopper
operator|.
name|isStopped
argument_list|()
condition|)
block|{
return|return;
block|}
name|refreshListIfRightPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|refreshListIfRightPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
name|this
operator|.
name|watcher
operator|.
name|znodePaths
operator|.
name|rsZNode
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|refreshOtherRegionServersList
argument_list|()
return|;
block|}
block|}
comment|/**    * Watcher used to follow the creation and deletion of peer clusters.    */
specifier|public
class|class
name|PeersWatcher
extends|extends
name|ZKListener
block|{
comment|/**      * Construct a ZooKeeper event listener.      */
specifier|public
name|PeersWatcher
parameter_list|(
name|ZKWatcher
name|watcher
parameter_list|)
block|{
name|super
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called when a node has been deleted      * @param path full path of the deleted node      */
annotation|@
name|Override
specifier|public
name|void
name|nodeDeleted
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|peers
init|=
name|refreshPeersList
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|peers
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isPeerPath
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|String
name|id
init|=
name|getZNodeName
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|path
operator|+
literal|" znode expired, triggering peerRemoved event"
argument_list|)
expr_stmt|;
for|for
control|(
name|ReplicationListener
name|rl
range|:
name|listeners
control|)
block|{
name|rl
operator|.
name|peerRemoved
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Called when an existing node has a child node added or removed.      * @param path full path of the node whose children have changed      */
annotation|@
name|Override
specifier|public
name|void
name|nodeChildrenChanged
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|peers
init|=
name|refreshPeersList
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|peers
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|path
operator|+
literal|" znode expired, triggering peerListChanged event"
argument_list|)
expr_stmt|;
for|for
control|(
name|ReplicationListener
name|rl
range|:
name|listeners
control|)
block|{
name|rl
operator|.
name|peerListChanged
argument_list|(
name|peers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Verify if this event is meant for us, and if so then get the latest peers' list from ZK. Also    * reset the watches.    * @param path path to check against    * @return A list of peers' identifiers if the event concerns this watcher, else null.    */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|refreshPeersList
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
name|getPeersZNode
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|this
operator|.
name|replicationPeers
operator|.
name|getAllPeerIds
argument_list|()
return|;
block|}
specifier|private
name|String
name|getPeersZNode
parameter_list|()
block|{
return|return
name|this
operator|.
name|peersZNode
return|;
block|}
comment|/**    * Extracts the znode name of a peer cluster from a ZK path    * @param fullPath Path to extract the id from    * @return the id or an empty string if path is invalid    */
specifier|private
name|String
name|getZNodeName
parameter_list|(
name|String
name|fullPath
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|fullPath
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
return|return
name|parts
operator|.
name|length
operator|>
literal|0
condition|?
name|parts
index|[
name|parts
operator|.
name|length
operator|-
literal|1
index|]
else|:
literal|""
return|;
block|}
comment|/**    * Reads the list of region servers from ZK and atomically clears our local view of it and    * replaces it with the updated list.    * @return true if the local list of the other region servers was updated with the ZK data (even    *         if it was empty), false if the data was missing in ZK    */
specifier|private
name|boolean
name|refreshOtherRegionServersList
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newRsList
init|=
name|getRegisteredRegionServers
argument_list|()
decl_stmt|;
if|if
condition|(
name|newRsList
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|otherRegionServers
init|)
block|{
name|otherRegionServers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|otherRegionServers
operator|.
name|addAll
argument_list|(
name|newRsList
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Get a list of all the other region servers in this cluster and set a watch    * @return a list of server nanes    */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getRegisteredRegionServers
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|ZKUtil
operator|.
name|listChildrenAndWatchThem
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|zookeeper
operator|.
name|znodePaths
operator|.
name|rsZNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Get list of registered region servers"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

