begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Table based replication queue storage.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|TableReplicationQueueStorage
extends|extends
name|TableReplicationStorageBase
implements|implements
name|ReplicationQueueStorage
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TableReplicationQueueStorage
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|TableReplicationQueueStorage
parameter_list|(
name|ZKWatcher
name|zookeeper
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|zookeeper
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Serialize the {fileName, position} pair into a byte array.    */
specifier|private
specifier|static
name|byte
index|[]
name|makeByteArray
parameter_list|(
name|String
name|fileName
parameter_list|,
name|long
name|position
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|Bytes
operator|.
name|SIZEOF_INT
operator|+
name|fileName
operator|.
name|length
argument_list|()
operator|+
name|Bytes
operator|.
name|SIZEOF_LONG
index|]
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|pos
operator|=
name|Bytes
operator|.
name|putInt
argument_list|(
name|data
argument_list|,
name|pos
argument_list|,
name|fileName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|=
name|Bytes
operator|.
name|putBytes
argument_list|(
name|data
argument_list|,
name|pos
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|fileName
argument_list|)
argument_list|,
literal|0
argument_list|,
name|fileName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|=
name|Bytes
operator|.
name|putLong
argument_list|(
name|data
argument_list|,
name|pos
argument_list|,
name|position
argument_list|)
expr_stmt|;
assert|assert
name|pos
operator|==
name|data
operator|.
name|length
assert|;
return|return
name|data
return|;
block|}
comment|/**    * Deserialize the byte array into a {filename, position} pair.    */
specifier|private
specifier|static
name|Pair
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|parseFileNameAndPosition
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The byte array shouldn't be null"
argument_list|)
throw|;
block|}
name|int
name|pos
init|=
name|offset
decl_stmt|;
name|int
name|len
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|data
argument_list|,
name|pos
argument_list|,
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|Bytes
operator|.
name|SIZEOF_INT
expr_stmt|;
if|if
condition|(
name|pos
operator|+
name|len
operator|>
name|data
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"offset ("
operator|+
name|pos
operator|+
literal|") + length ("
operator|+
name|len
operator|+
literal|") exceed the"
operator|+
literal|" capacity of the array: "
operator|+
name|data
operator|.
name|length
argument_list|)
throw|;
block|}
name|String
name|fileName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|Bytes
operator|.
name|copy
argument_list|(
name|data
argument_list|,
name|pos
argument_list|,
name|len
argument_list|)
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|len
expr_stmt|;
name|long
name|position
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|data
argument_list|,
name|pos
argument_list|,
name|Bytes
operator|.
name|SIZEOF_LONG
argument_list|)
decl_stmt|;
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|fileName
argument_list|,
name|position
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeQueue
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|getServerNameRowKey
argument_list|(
name|serverName
argument_list|)
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY_QUEUE
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|queueId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete all<fileName, position> pairs.
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY_WAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|queueId
argument_list|)
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to remove wal from queue, serverName="
operator|+
name|serverName
operator|+
literal|", queueId="
operator|+
name|queueId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addWAL
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|getServerNameRowKey
argument_list|(
name|serverName
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY_RS_STATE
argument_list|,
name|QUALIFIER_STATE_ENABLED
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY_QUEUE
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|queueId
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY_WAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|queueId
argument_list|)
argument_list|,
name|makeByteArray
argument_list|(
name|fileName
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to add wal to queue, serverName="
operator|+
name|serverName
operator|+
literal|", queueId="
operator|+
name|queueId
operator|+
literal|", fileName="
operator|+
name|fileName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeWAL
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|Optional
argument_list|<
name|WALCell
argument_list|>
name|walCell
init|=
name|getWALsInQueue0
argument_list|(
name|table
argument_list|,
name|serverName
argument_list|,
name|queueId
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|w
lambda|->
name|w
operator|.
name|fileNameMatch
argument_list|(
name|fileName
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|walCell
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|getServerNameRowKey
argument_list|(
name|walCell
operator|.
name|get
argument_list|()
operator|.
name|serverName
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY_WAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|queueId
argument_list|)
argument_list|,
name|walCell
operator|.
name|get
argument_list|()
operator|.
name|cellTimestamp
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|fileName
operator|+
literal|" has already been deleted when removing log"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to remove wal from queue, serverName="
operator|+
name|serverName
operator|+
literal|", queueId="
operator|+
name|queueId
operator|+
literal|", fileName="
operator|+
name|fileName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setWALPosition
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|,
name|String
name|fileName
parameter_list|,
name|long
name|position
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|lastSeqIds
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|Optional
argument_list|<
name|WALCell
argument_list|>
name|walCell
init|=
name|getWALsInQueue0
argument_list|(
name|table
argument_list|,
name|serverName
argument_list|,
name|queueId
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|w
lambda|->
name|w
operator|.
name|fileNameMatch
argument_list|(
name|fileName
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|walCell
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|getServerNameRowKey
argument_list|(
name|serverName
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY_WAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|walCell
operator|.
name|get
argument_list|()
operator|.
name|queueId
argument_list|)
argument_list|,
name|walCell
operator|.
name|get
argument_list|()
operator|.
name|cellTimestamp
argument_list|,
name|makeByteArray
argument_list|(
name|fileName
argument_list|,
name|position
argument_list|)
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Update the last pushed sequence id for each region in a batch.
name|String
name|peerId
init|=
name|ReplicationUtils
operator|.
name|parsePeerIdFromQueueId
argument_list|(
name|queueId
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastSeqIds
operator|!=
literal|null
operator|&&
name|lastSeqIds
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|lastSeqIds
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Put
name|regionPut
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|peerId
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY_REGIONS
argument_list|,
name|getRegionQualifier
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|regionPut
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"WAL file "
operator|+
name|fileName
operator|+
literal|" does not found under queue "
operator|+
name|queueId
operator|+
literal|" for server "
operator|+
name|serverName
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to set wal position and last sequence ids, serverName="
operator|+
name|serverName
operator|+
literal|", queueId="
operator|+
name|queueId
operator|+
literal|", fileName="
operator|+
name|fileName
operator|+
literal|", position="
operator|+
name|position
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastSequenceId
parameter_list|(
name|String
name|encodedRegionName
parameter_list|,
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|peerId
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY_REGIONS
argument_list|,
name|getRegionQualifier
argument_list|(
name|encodedRegionName
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|listCells
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|HConstants
operator|.
name|NO_SEQNUM
return|;
block|}
return|return
name|Bytes
operator|.
name|toLong
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY_REGIONS
argument_list|,
name|getRegionQualifier
argument_list|(
name|encodedRegionName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get last sequence id, region="
operator|+
name|encodedRegionName
operator|+
literal|", peerId="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getWALPosition
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|Optional
argument_list|<
name|WALCell
argument_list|>
name|walCell
init|=
name|getWALsInQueue0
argument_list|(
name|table
argument_list|,
name|serverName
argument_list|,
name|queueId
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|w
lambda|->
name|w
operator|.
name|fileNameMatch
argument_list|(
name|fileName
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|walCell
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|walCell
operator|.
name|get
argument_list|()
operator|.
name|position
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"WAL "
operator|+
name|fileName
operator|+
literal|" does not found under queue "
operator|+
name|queueId
operator|+
literal|" for server "
operator|+
name|serverName
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get wal position. serverName="
operator|+
name|serverName
operator|+
literal|", queueId="
operator|+
name|queueId
operator|+
literal|", fileName="
operator|+
name|fileName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Each cell in column wal:{queueId} will be parsed to a WALCell. The WALCell will be more    * friendly to upper layer.    */
specifier|private
specifier|static
specifier|final
class|class
name|WALCell
block|{
name|ServerName
name|serverName
decl_stmt|;
name|String
name|queueId
decl_stmt|;
name|String
name|wal
decl_stmt|;
name|long
name|position
decl_stmt|;
name|long
name|cellTimestamp
decl_stmt|;
comment|// Timestamp of the cell
specifier|private
name|WALCell
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|,
name|String
name|wal
parameter_list|,
name|long
name|position
parameter_list|,
name|long
name|cellTimestamp
parameter_list|)
block|{
name|this
operator|.
name|serverName
operator|=
name|serverName
expr_stmt|;
name|this
operator|.
name|queueId
operator|=
name|queueId
expr_stmt|;
name|this
operator|.
name|wal
operator|=
name|wal
expr_stmt|;
name|this
operator|.
name|position
operator|=
name|position
expr_stmt|;
name|this
operator|.
name|cellTimestamp
operator|=
name|cellTimestamp
expr_stmt|;
block|}
specifier|public
specifier|static
name|WALCell
name|create
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
name|ServerName
name|serverName
init|=
name|ServerName
operator|.
name|parseServerName
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|queueId
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|fileAndPos
init|=
name|parseFileNameAndPosition
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|WALCell
argument_list|(
name|serverName
argument_list|,
name|queueId
argument_list|,
name|fileAndPos
operator|.
name|getFirst
argument_list|()
argument_list|,
name|fileAndPos
operator|.
name|getSecond
argument_list|()
argument_list|,
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|fileNameMatch
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|equals
argument_list|(
name|wal
argument_list|,
name|fileName
argument_list|)
return|;
block|}
block|}
comment|/**    * Parse the WALCell list from a HBase result.    */
specifier|private
name|List
argument_list|<
name|WALCell
argument_list|>
name|result2WALCells
parameter_list|(
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|WALCell
argument_list|>
name|wals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|listCells
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|listCells
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|r
operator|.
name|listCells
argument_list|()
control|)
block|{
name|wals
operator|.
name|add
argument_list|(
name|WALCell
operator|.
name|create
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|wals
return|;
block|}
comment|/**    * List all WALs for the specific region server and queueId.    */
specifier|private
name|List
argument_list|<
name|WALCell
argument_list|>
name|getWALsInQueue0
parameter_list|(
name|Table
name|table
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getServerNameRowKey
argument_list|(
name|serverName
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY_WAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|queueId
argument_list|)
argument_list|)
operator|.
name|readAllVersions
argument_list|()
decl_stmt|;
return|return
name|result2WALCells
argument_list|(
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getWALsInQueue
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|String
name|queueId
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
return|return
name|getWALsInQueue0
argument_list|(
name|table
argument_list|,
name|serverName
argument_list|,
name|queueId
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|p
lambda|->
name|p
operator|.
name|wal
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get wals in queue. serverName="
operator|+
name|serverName
operator|+
literal|", queueId="
operator|+
name|queueId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllQueues
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getServerNameRowKey
argument_list|(
name|serverName
argument_list|)
argument_list|)
operator|.
name|addFamily
argument_list|(
name|FAMILY_QUEUE
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|listCells
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|listCells
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Cell
name|c
range|:
name|r
operator|.
name|listCells
argument_list|()
control|)
block|{
name|String
name|queue
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|c
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|c
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|queues
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get all queues. serverName="
operator|+
name|serverName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|claimQueue
parameter_list|(
name|ServerName
name|sourceServerName
parameter_list|,
name|String
name|queueId
parameter_list|,
name|ServerName
name|destServerName
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Atomically moving "
operator|+
name|sourceServerName
operator|+
literal|"/"
operator|+
name|queueId
operator|+
literal|"'s WALs to "
operator|+
name|destServerName
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
comment|// Create an enabled region server for destination.
name|byte
index|[]
name|destServerNameRowKey
init|=
name|getServerNameRowKey
argument_list|(
name|destServerName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|srcServerNameRowKey
init|=
name|getServerNameRowKey
argument_list|(
name|sourceServerName
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|destServerNameRowKey
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY_RS_STATE
argument_list|,
name|QUALIFIER_STATE_ENABLED
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|WALCell
argument_list|>
name|wals
init|=
name|getWALsInQueue0
argument_list|(
name|table
argument_list|,
name|sourceServerName
argument_list|,
name|queueId
argument_list|)
decl_stmt|;
name|String
name|newQueueId
init|=
name|queueId
operator|+
literal|"-"
operator|+
name|sourceServerName
decl_stmt|;
comment|// Remove the queue in source region server if wal set of the queue is empty.
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|wals
argument_list|)
condition|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|srcServerNameRowKey
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY_QUEUE
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|queueId
argument_list|)
argument_list|)
operator|.
name|addColumns
argument_list|(
name|FAMILY_WAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|queueId
argument_list|)
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed "
operator|+
name|sourceServerName
operator|+
literal|"/"
operator|+
name|queueId
operator|+
literal|" since it's empty"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|newQueueId
argument_list|,
name|Collections
operator|.
name|emptySortedSet
argument_list|()
argument_list|)
return|;
block|}
comment|// Transfer all wals from source region server to destination region server in a batch.
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// a. Create queue for destination server.
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|Put
argument_list|(
name|destServerNameRowKey
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY_QUEUE
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|newQueueId
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|logQueue
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|WALCell
name|wal
range|:
name|wals
control|)
block|{
name|byte
index|[]
name|data
init|=
name|makeByteArray
argument_list|(
name|wal
operator|.
name|wal
argument_list|,
name|wal
operator|.
name|cellTimestamp
argument_list|)
decl_stmt|;
comment|// b. Add wal to destination server.
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|Put
argument_list|(
name|destServerNameRowKey
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY_WAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|newQueueId
argument_list|)
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|// c. Remove wal from source server.
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|Delete
argument_list|(
name|srcServerNameRowKey
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY_WAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|queueId
argument_list|)
argument_list|,
name|wal
operator|.
name|cellTimestamp
argument_list|)
argument_list|)
expr_stmt|;
name|logQueue
operator|.
name|add
argument_list|(
name|wal
operator|.
name|wal
argument_list|)
expr_stmt|;
block|}
comment|// d. Remove the queue of source server.
name|mutations
operator|.
name|add
argument_list|(
operator|new
name|Delete
argument_list|(
name|srcServerNameRowKey
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY_QUEUE
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|queueId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
name|mutations
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|mutations
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|boolean
name|allSuccess
init|=
name|Stream
operator|.
name|of
argument_list|(
name|results
argument_list|)
operator|.
name|allMatch
argument_list|(
name|r
lambda|->
name|r
operator|!=
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allSuccess
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Claim queue queueId="
operator|+
name|queueId
operator|+
literal|" from "
operator|+
name|sourceServerName
operator|+
literal|" to "
operator|+
name|destServerName
operator|+
literal|" failed, not all mutations success."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Atomically moved "
operator|+
name|sourceServerName
operator|+
literal|"/"
operator|+
name|queueId
operator|+
literal|"'s WALs to "
operator|+
name|destServerName
argument_list|)
expr_stmt|;
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|newQueueId
argument_list|,
name|logQueue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Claim queue queueId="
operator|+
name|queueId
operator|+
literal|" from "
operator|+
name|sourceServerName
operator|+
literal|" to "
operator|+
name|destServerName
operator|+
literal|" failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeReplicatorIfQueueIsEmpty
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|ReplicationException
block|{
comment|// TODO Make this to be a checkAndDelete, and provide a UT for it.
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getServerNameRowKey
argument_list|(
name|serverName
argument_list|)
argument_list|)
operator|.
name|addFamily
argument_list|(
name|FAMILY_WAL
argument_list|)
operator|.
name|readAllVersions
argument_list|()
decl_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|listCells
argument_list|()
operator|==
literal|null
operator|||
name|r
operator|.
name|listCells
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|getServerNameRowKey
argument_list|(
name|serverName
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to remove replicator when queue is empty, serverName="
operator|+
name|serverName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|getListOfReplicators
parameter_list|()
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|FAMILY_RS_STATE
argument_list|,
name|QUALIFIER_STATE_ENABLED
argument_list|)
operator|.
name|readVersions
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
if|if
condition|(
name|r
operator|.
name|listCells
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Cell
name|firstCell
init|=
name|r
operator|.
name|listCells
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|serverName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|firstCell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|firstCell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|firstCell
operator|.
name|getRowLength
argument_list|()
argument_list|)
decl_stmt|;
name|serverNames
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|parseServerName
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|serverNames
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get list of replicators"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAllWALs
parameter_list|()
throws|throws
name|ReplicationException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|walSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|addFamily
argument_list|(
name|FAMILY_WAL
argument_list|)
operator|.
name|readAllVersions
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|result2WALCells
argument_list|(
name|r
argument_list|)
operator|.
name|forEach
argument_list|(
name|w
lambda|->
name|walSet
operator|.
name|add
argument_list|(
name|w
operator|.
name|wal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|walSet
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get all wals"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addPeerToHFileRefs
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
comment|// Need to do nothing.
block|}
annotation|@
name|Override
specifier|public
name|void
name|removePeerFromHFileRefs
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
comment|// Need to do nothing.
block|}
annotation|@
name|Override
specifier|public
name|void
name|addHFileRefs
parameter_list|(
name|String
name|peerId
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
argument_list|>
name|pairs
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
name|p
range|:
name|pairs
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|peerId
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY_HFILE_REFS
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|p
operator|.
name|getSecond
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to add hfile refs, peerId="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeHFileRefs
parameter_list|(
name|String
name|peerId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|peerId
argument_list|)
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY_HFILE_REFS
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|deletes
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|delete
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to remove hfile refs, peerId="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllPeersFromHFileRefsQueue
parameter_list|()
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|peers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|addFamily
argument_list|(
name|FAMILY_HFILE_REFS
argument_list|)
decl_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
if|if
condition|(
name|r
operator|.
name|listCells
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Cell
name|firstCell
init|=
name|r
operator|.
name|listCells
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|peerId
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|firstCell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|firstCell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|firstCell
operator|.
name|getRowLength
argument_list|()
argument_list|)
decl_stmt|;
name|peers
operator|.
name|add
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|peers
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Faield to get all peers by reading hbase:replication meta"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getReplicableHFiles
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|peerId
argument_list|)
argument_list|)
operator|.
name|addFamily
argument_list|(
name|FAMILY_HFILE_REFS
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|hfiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|listCells
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Cell
name|c
range|:
name|r
operator|.
name|listCells
argument_list|()
control|)
block|{
name|hfiles
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|c
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|c
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|hfiles
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get replicable hfiles, peerId="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAllHFileRefs
parameter_list|()
throws|throws
name|ReplicationException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getReplicationMetaTable
argument_list|()
init|)
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|addFamily
argument_list|(
name|FAMILY_HFILE_REFS
argument_list|)
decl_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|hfileSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
for|for
control|(
name|Cell
name|c
range|:
name|r
operator|.
name|listCells
argument_list|()
control|)
block|{
name|String
name|hfile
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|c
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|c
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
decl_stmt|;
name|hfileSet
operator|.
name|add
argument_list|(
name|hfile
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|hfileSet
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Failed to get all hfile refs"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

