begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseZKTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestZKReplicationPeerStorage
block|{
specifier|private
specifier|static
specifier|final
name|HBaseZKTestingUtility
name|UTIL
init|=
operator|new
name|HBaseZKTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ZKReplicationPeerStorage
name|STORAGE
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|STORAGE
operator|=
operator|new
name|ZKReplicationPeerStorage
argument_list|(
name|UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|UTIL
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|randNamespaces
parameter_list|(
name|Random
name|rand
parameter_list|)
block|{
return|return
name|Stream
operator|.
name|generate
argument_list|(
parameter_list|()
lambda|->
name|Long
operator|.
name|toHexString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|limit
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|randTableCFs
parameter_list|(
name|Random
name|rand
parameter_list|)
block|{
name|int
name|size
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|toHexString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cfs
init|=
name|Stream
operator|.
name|generate
argument_list|(
parameter_list|()
lambda|->
name|Long
operator|.
name|toHexString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|limit
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|tn
argument_list|,
name|cfs
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|private
name|ReplicationPeerConfig
name|getConfig
parameter_list|(
name|int
name|seed
parameter_list|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
return|return
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterKey
argument_list|(
name|Long
operator|.
name|toHexString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setReplicationEndpointImpl
argument_list|(
name|Long
operator|.
name|toHexString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setNamespaces
argument_list|(
name|randNamespaces
argument_list|(
name|rand
argument_list|)
argument_list|)
operator|.
name|setExcludeNamespaces
argument_list|(
name|randNamespaces
argument_list|(
name|rand
argument_list|)
argument_list|)
operator|.
name|setTableCFsMap
argument_list|(
name|randTableCFs
argument_list|(
name|rand
argument_list|)
argument_list|)
operator|.
name|setReplicateAllUserTables
argument_list|(
name|rand
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|setBandwidth
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|void
name|assertSetEquals
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|expected
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|actual
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|==
literal|null
operator|||
name|expected
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|actual
operator|==
literal|null
operator|||
name|actual
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|.
name|forEach
argument_list|(
name|s
lambda|->
name|assertTrue
argument_list|(
name|actual
operator|.
name|contains
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertMapEquals
parameter_list|(
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expected
parameter_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|actual
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|==
literal|null
operator|||
name|expected
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|actual
operator|==
literal|null
operator|||
name|actual
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|.
name|forEach
argument_list|(
parameter_list|(
name|expectedTn
parameter_list|,
name|expectedCFs
parameter_list|)
lambda|->
block|{
name|List
argument_list|<
name|String
argument_list|>
name|actualCFs
init|=
name|actual
operator|.
name|get
argument_list|(
name|expectedTn
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedCFs
operator|==
literal|null
operator|||
name|expectedCFs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|actual
operator|.
name|containsKey
argument_list|(
name|expectedTn
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actualCFs
operator|==
literal|null
operator|||
name|actualCFs
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|actualCFs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCFs
operator|.
name|size
argument_list|()
argument_list|,
name|actualCFs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|expectedIt
init|=
name|expectedCFs
operator|.
name|iterator
argument_list|()
init|,
name|actualIt
init|=
name|actualCFs
operator|.
name|iterator
argument_list|()
init|;
name|expectedIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|assertEquals
argument_list|(
name|expectedIt
operator|.
name|next
argument_list|()
argument_list|,
name|actualIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertConfigEquals
parameter_list|(
name|ReplicationPeerConfig
name|expected
parameter_list|,
name|ReplicationPeerConfig
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getClusterKey
argument_list|()
argument_list|,
name|actual
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getReplicationEndpointImpl
argument_list|()
argument_list|,
name|actual
operator|.
name|getReplicationEndpointImpl
argument_list|()
argument_list|)
expr_stmt|;
name|assertSetEquals
argument_list|(
name|expected
operator|.
name|getNamespaces
argument_list|()
argument_list|,
name|actual
operator|.
name|getNamespaces
argument_list|()
argument_list|)
expr_stmt|;
name|assertSetEquals
argument_list|(
name|expected
operator|.
name|getExcludeNamespaces
argument_list|()
argument_list|,
name|actual
operator|.
name|getExcludeNamespaces
argument_list|()
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|expected
operator|.
name|getTableCFsMap
argument_list|()
argument_list|,
name|actual
operator|.
name|getTableCFsMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|expected
operator|.
name|getExcludeTableCFsMap
argument_list|()
argument_list|,
name|actual
operator|.
name|getExcludeTableCFsMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|,
name|actual
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getBandwidth
argument_list|()
argument_list|,
name|actual
operator|.
name|getBandwidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|ReplicationException
block|{
name|int
name|peerCount
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|peerCount
condition|;
name|i
operator|++
control|)
block|{
name|STORAGE
operator|.
name|addPeer
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|getConfig
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
operator|%
literal|2
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|peerIds
init|=
name|STORAGE
operator|.
name|listPeerIds
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|peerCount
argument_list|,
name|peerIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|peerId
range|:
name|peerIds
control|)
block|{
name|int
name|seed
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
name|assertConfigEquals
argument_list|(
name|getConfig
argument_list|(
name|seed
argument_list|)
argument_list|,
name|STORAGE
operator|.
name|getPeerConfig
argument_list|(
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|peerCount
condition|;
name|i
operator|++
control|)
block|{
name|STORAGE
operator|.
name|updatePeerConfig
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|getConfig
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|peerId
range|:
name|peerIds
control|)
block|{
name|int
name|seed
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
name|assertConfigEquals
argument_list|(
name|getConfig
argument_list|(
name|seed
operator|+
literal|1
argument_list|)
argument_list|,
name|STORAGE
operator|.
name|getPeerConfig
argument_list|(
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|peerCount
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
operator|%
literal|2
operator|==
literal|0
argument_list|,
name|STORAGE
operator|.
name|isPeerEnabled
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|peerCount
condition|;
name|i
operator|++
control|)
block|{
name|STORAGE
operator|.
name|setPeerState
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
operator|%
literal|2
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|peerCount
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
operator|%
literal|2
operator|!=
literal|0
argument_list|,
name|STORAGE
operator|.
name|isPeerEnabled
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|toRemove
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|peerCount
operator|/
literal|2
argument_list|)
decl_stmt|;
name|STORAGE
operator|.
name|removePeer
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
name|peerIds
operator|=
name|STORAGE
operator|.
name|listPeerIds
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|peerCount
operator|-
literal|1
argument_list|,
name|peerIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|peerIds
operator|.
name|contains
argument_list|(
name|toRemove
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|STORAGE
operator|.
name|getPeerConfig
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw a ReplicationException when get peer config of a peerId"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
name|e
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

