begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Tests for testing methods added in HBASE-9093. This set of tests is meant  * to test the {@linkplain Mutation#setWriteToWal(boolean)}  * and {@linkplain Mutation#getWriteToWal()} methods which provide  * a compatibility layer with HBase versions< 95's client side WAL semantics.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestPutWriteToWal
block|{
specifier|private
name|Put
name|put
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
literal|"test"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteToWal
parameter_list|()
block|{
name|put
operator|.
name|setWriteToWal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Durability
operator|.
name|USE_DEFAULT
argument_list|,
name|put
operator|.
name|getDurability
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoWriteToWal
parameter_list|()
block|{
name|put
operator|.
name|setWriteToWal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|,
name|put
operator|.
name|getDurability
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteToWalSwitch
parameter_list|()
block|{
name|put
operator|.
name|setWriteToWal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|,
name|put
operator|.
name|getDurability
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|setWriteToWal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Durability
operator|.
name|USE_DEFAULT
argument_list|,
name|put
operator|.
name|getDurability
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutCopy
parameter_list|()
block|{
name|put
operator|.
name|setWriteToWal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Put
name|putCopy1
init|=
operator|new
name|Put
argument_list|(
name|put
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|,
name|putCopy1
operator|.
name|getDurability
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|setWriteToWal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Put
name|putCopy2
init|=
operator|new
name|Put
argument_list|(
name|put
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Durability
operator|.
name|USE_DEFAULT
argument_list|,
name|putCopy2
operator|.
name|getDurability
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

