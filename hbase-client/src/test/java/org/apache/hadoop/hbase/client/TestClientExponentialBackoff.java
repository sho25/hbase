begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|backoff
operator|.
name|ExponentialClientBackoffPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|backoff
operator|.
name|ServerStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TestClientExponentialBackoff
block|{
name|ServerName
name|server
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ServerName
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|regionname
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region"
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testNulls
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ExponentialClientBackoffPolicy
name|backoff
init|=
operator|new
name|ExponentialClientBackoffPolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|backoff
operator|.
name|getBackoffTime
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// server name doesn't matter to calculation, but check it now anyways
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|backoff
operator|.
name|getBackoffTime
argument_list|(
name|server
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|backoff
operator|.
name|getBackoffTime
argument_list|(
name|server
argument_list|,
name|regionname
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// check when no stats for the region yet
name|ServerStatistics
name|stats
init|=
operator|new
name|ServerStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|backoff
operator|.
name|getBackoffTime
argument_list|(
name|server
argument_list|,
name|regionname
argument_list|,
name|stats
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxLoad
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ExponentialClientBackoffPolicy
name|backoff
init|=
operator|new
name|ExponentialClientBackoffPolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ServerStatistics
name|stats
init|=
operator|new
name|ServerStatistics
argument_list|()
decl_stmt|;
name|update
argument_list|(
name|stats
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExponentialClientBackoffPolicy
operator|.
name|DEFAULT_MAX_BACKOFF
argument_list|,
name|backoff
operator|.
name|getBackoffTime
argument_list|(
name|server
argument_list|,
name|regionname
argument_list|,
name|stats
argument_list|)
argument_list|)
expr_stmt|;
comment|// another policy with a different max timeout
name|long
name|max
init|=
literal|100
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|ExponentialClientBackoffPolicy
operator|.
name|MAX_BACKOFF_KEY
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|ExponentialClientBackoffPolicy
name|backoffShortTimeout
init|=
operator|new
name|ExponentialClientBackoffPolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|max
argument_list|,
name|backoffShortTimeout
operator|.
name|getBackoffTime
argument_list|(
name|server
argument_list|,
name|regionname
argument_list|,
name|stats
argument_list|)
argument_list|)
expr_stmt|;
comment|// test beyond 100 still doesn't exceed the max
name|update
argument_list|(
name|stats
argument_list|,
literal|101
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExponentialClientBackoffPolicy
operator|.
name|DEFAULT_MAX_BACKOFF
argument_list|,
name|backoff
operator|.
name|getBackoffTime
argument_list|(
name|server
argument_list|,
name|regionname
argument_list|,
name|stats
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|max
argument_list|,
name|backoffShortTimeout
operator|.
name|getBackoffTime
argument_list|(
name|server
argument_list|,
name|regionname
argument_list|,
name|stats
argument_list|)
argument_list|)
expr_stmt|;
comment|// and that when we are below 100, its less than the max timeout
name|update
argument_list|(
name|stats
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|backoff
operator|.
name|getBackoffTime
argument_list|(
name|server
argument_list|,
name|regionname
argument_list|,
name|stats
argument_list|)
operator|<
name|ExponentialClientBackoffPolicy
operator|.
name|DEFAULT_MAX_BACKOFF
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|backoffShortTimeout
operator|.
name|getBackoffTime
argument_list|(
name|server
argument_list|,
name|regionname
argument_list|,
name|stats
argument_list|)
operator|<
name|max
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure that we get results in the order that we expect - backoff for a load of 1 should    * less than backoff for 10, which should be less than that for 50.    */
annotation|@
name|Test
specifier|public
name|void
name|testResultOrdering
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// make the max timeout really high so we get differentiation between load factors
name|conf
operator|.
name|setLong
argument_list|(
name|ExponentialClientBackoffPolicy
operator|.
name|MAX_BACKOFF_KEY
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|ExponentialClientBackoffPolicy
name|backoff
init|=
operator|new
name|ExponentialClientBackoffPolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ServerStatistics
name|stats
init|=
operator|new
name|ServerStatistics
argument_list|()
decl_stmt|;
name|long
name|previous
init|=
name|backoff
operator|.
name|getBackoffTime
argument_list|(
name|server
argument_list|,
name|regionname
argument_list|,
name|stats
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|update
argument_list|(
name|stats
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|long
name|next
init|=
name|backoff
operator|.
name|getBackoffTime
argument_list|(
name|server
argument_list|,
name|regionname
argument_list|,
name|stats
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Previous backoff time"
operator|+
name|previous
operator|+
literal|">= "
operator|+
name|next
operator|+
literal|", the next backoff time for "
operator|+
literal|"load "
operator|+
name|i
argument_list|,
name|previous
operator|<
name|next
argument_list|)
expr_stmt|;
name|previous
operator|=
name|next
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|update
parameter_list|(
name|ServerStatistics
name|stats
parameter_list|,
name|int
name|load
parameter_list|)
block|{
name|ClientProtos
operator|.
name|RegionLoadStats
name|stat
init|=
name|ClientProtos
operator|.
name|RegionLoadStats
operator|.
name|newBuilder
argument_list|()
operator|.
name|setMemstoreLoad
argument_list|(
name|load
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stats
operator|.
name|update
argument_list|(
name|regionname
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

