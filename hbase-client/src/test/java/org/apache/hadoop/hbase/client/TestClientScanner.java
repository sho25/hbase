begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_comment
comment|/**  * Test the ClientScanner.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestClientScanner
block|{
name|Scan
name|scan
decl_stmt|;
name|ExecutorService
name|pool
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
name|ClusterConnection
name|clusterConn
decl_stmt|;
name|RpcRetryingCallerFactory
name|rpcFactory
decl_stmt|;
name|RpcControllerFactory
name|controllerFactory
decl_stmt|;
annotation|@
name|Before
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|clusterConn
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ClusterConnection
operator|.
name|class
argument_list|)
expr_stmt|;
name|rpcFactory
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RpcRetryingCallerFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|controllerFactory
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RpcControllerFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|pool
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|clusterConn
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|pool
condition|)
block|{
name|pool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MockClientScanner
extends|extends
name|ClientScanner
block|{
specifier|private
name|boolean
name|rpcFinished
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|rpcFinishedFired
init|=
literal|false
decl_stmt|;
specifier|public
name|MockClientScanner
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
name|ClusterConnection
name|connection
parameter_list|,
name|RpcRetryingCallerFactory
name|rpcFactory
parameter_list|,
name|RpcControllerFactory
name|controllerFactory
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|int
name|primaryOperationTimeout
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|scan
argument_list|,
name|tableName
argument_list|,
name|connection
argument_list|,
name|rpcFactory
argument_list|,
name|controllerFactory
argument_list|,
name|pool
argument_list|,
name|primaryOperationTimeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|nextScanner
parameter_list|(
name|int
name|nbRows
parameter_list|,
specifier|final
name|boolean
name|done
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|rpcFinished
condition|)
block|{
return|return
name|super
operator|.
name|nextScanner
argument_list|(
name|nbRows
argument_list|,
name|done
argument_list|)
return|;
block|}
comment|// Enforce that we don't short-circuit more than once
if|if
condition|(
name|rpcFinishedFired
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected nextScanner to only be called once after "
operator|+
literal|" short-circuit was triggered."
argument_list|)
throw|;
block|}
name|rpcFinishedFired
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ScannerCallableWithReplicas
name|getScannerCallable
parameter_list|(
name|byte
index|[]
name|localStartKey
parameter_list|,
name|int
name|nbRows
parameter_list|)
block|{
name|scan
operator|.
name|setStartRow
argument_list|(
name|localStartKey
argument_list|)
expr_stmt|;
name|ScannerCallable
name|s
init|=
operator|new
name|ScannerCallable
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getTable
argument_list|()
argument_list|,
name|scan
argument_list|,
name|this
operator|.
name|scanMetrics
argument_list|,
name|this
operator|.
name|rpcControllerFactory
argument_list|)
decl_stmt|;
name|s
operator|.
name|setCaching
argument_list|(
name|nbRows
argument_list|)
expr_stmt|;
name|ScannerCallableWithReplicas
name|sr
init|=
operator|new
name|ScannerCallableWithReplicas
argument_list|(
name|getTable
argument_list|()
argument_list|,
name|getConnection
argument_list|()
argument_list|,
name|s
argument_list|,
name|pool
argument_list|,
name|primaryOperationTimeout
argument_list|,
name|scan
argument_list|,
name|getRetries
argument_list|()
argument_list|,
name|scannerTimeout
argument_list|,
name|caching
argument_list|,
name|conf
argument_list|,
name|caller
argument_list|)
decl_stmt|;
return|return
name|sr
return|;
block|}
specifier|public
name|void
name|setRpcFinished
parameter_list|(
name|boolean
name|rpcFinished
parameter_list|)
block|{
name|this
operator|.
name|rpcFinished
operator|=
name|rpcFinished
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initCache
parameter_list|()
block|{
name|initSyncCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|next
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|nextWithSyncCache
argument_list|()
return|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testNoResultsHint
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Result
index|[]
name|results
init|=
operator|new
name|Result
index|[
literal|1
index|]
decl_stmt|;
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
literal|"row"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cf"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cq"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Type
operator|.
name|Maximum
argument_list|)
decl_stmt|;
name|results
index|[
literal|0
index|]
operator|=
name|Result
operator|.
name|create
argument_list|(
operator|new
name|Cell
index|[]
block|{
name|kv1
block|}
argument_list|)
expr_stmt|;
name|RpcRetryingCaller
argument_list|<
name|Result
index|[]
argument_list|>
name|caller
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RpcRetryingCaller
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rpcFactory
operator|.
expr|<
name|Result
index|[]
operator|>
name|newCaller
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|caller
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|caller
operator|.
name|callWithoutRetries
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|RetryingCallable
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Result
index|[]
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Result
index|[]
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|ScannerCallableWithReplicas
name|callable
init|=
name|invocation
operator|.
name|getArgumentAt
argument_list|(
literal|0
argument_list|,
name|ScannerCallableWithReplicas
operator|.
name|class
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|count
condition|)
block|{
case|case
literal|0
case|:
comment|// initialize
case|case
literal|2
case|:
comment|// close
name|count
operator|++
expr_stmt|;
return|return
literal|null
return|;
case|case
literal|1
case|:
name|count
operator|++
expr_stmt|;
name|callable
operator|.
name|setHasMoreResultsContext
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|results
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected only 2 invocations"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Set a much larger cache and buffer size than we'll provide
name|scan
operator|.
name|setCaching
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
literal|1000
operator|*
literal|1000
argument_list|)
expr_stmt|;
try|try
init|(
name|MockClientScanner
name|scanner
init|=
operator|new
name|MockClientScanner
argument_list|(
name|conf
argument_list|,
name|scan
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table"
argument_list|)
argument_list|,
name|clusterConn
argument_list|,
name|rpcFactory
argument_list|,
name|controllerFactory
argument_list|,
name|pool
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
init|)
block|{
name|scanner
operator|.
name|setRpcFinished
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|Mockito
operator|.
name|inOrder
argument_list|(
name|caller
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|loadCache
argument_list|()
expr_stmt|;
comment|// One more call due to initializeScannerInConstruction()
name|inOrder
operator|.
name|verify
argument_list|(
name|caller
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|callWithoutRetries
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|RetryingCallable
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scanner
operator|.
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|scanner
operator|.
name|cache
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|CellScanner
name|cs
init|=
name|r
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kv1
argument_list|,
name|cs
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testSizeLimit
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Result
index|[]
name|results
init|=
operator|new
name|Result
index|[
literal|1
index|]
decl_stmt|;
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
literal|"row"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cf"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cq"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Type
operator|.
name|Maximum
argument_list|)
decl_stmt|;
name|results
index|[
literal|0
index|]
operator|=
name|Result
operator|.
name|create
argument_list|(
operator|new
name|Cell
index|[]
block|{
name|kv1
block|}
argument_list|)
expr_stmt|;
name|RpcRetryingCaller
argument_list|<
name|Result
index|[]
argument_list|>
name|caller
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RpcRetryingCaller
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rpcFactory
operator|.
expr|<
name|Result
index|[]
operator|>
name|newCaller
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|caller
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|caller
operator|.
name|callWithoutRetries
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|RetryingCallable
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Result
index|[]
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Result
index|[]
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|ScannerCallableWithReplicas
name|callable
init|=
name|invocation
operator|.
name|getArgumentAt
argument_list|(
literal|0
argument_list|,
name|ScannerCallableWithReplicas
operator|.
name|class
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|count
condition|)
block|{
case|case
literal|0
case|:
comment|// initialize
case|case
literal|2
case|:
comment|// close
name|count
operator|++
expr_stmt|;
return|return
literal|null
return|;
case|case
literal|1
case|:
name|count
operator|++
expr_stmt|;
name|callable
operator|.
name|setHasMoreResultsContext
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|callable
operator|.
name|setServerHasMoreResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|results
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected only 2 invocations"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rpcFactory
operator|.
expr|<
name|Result
index|[]
operator|>
name|newCaller
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|caller
argument_list|)
expr_stmt|;
comment|// Set a much larger cache
name|scan
operator|.
name|setCaching
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// The single key-value will exit the loop
name|scan
operator|.
name|setMaxResultSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
init|(
name|MockClientScanner
name|scanner
init|=
operator|new
name|MockClientScanner
argument_list|(
name|conf
argument_list|,
name|scan
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table"
argument_list|)
argument_list|,
name|clusterConn
argument_list|,
name|rpcFactory
argument_list|,
name|controllerFactory
argument_list|,
name|pool
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
init|)
block|{
comment|// Due to initializeScannerInConstruction()
name|Mockito
operator|.
name|verify
argument_list|(
name|caller
argument_list|)
operator|.
name|callWithoutRetries
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|RetryingCallable
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|Mockito
operator|.
name|inOrder
argument_list|(
name|caller
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|loadCache
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|caller
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|callWithoutRetries
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|RetryingCallable
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scanner
operator|.
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|scanner
operator|.
name|cache
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|CellScanner
name|cs
init|=
name|r
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kv1
argument_list|,
name|cs
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testCacheLimit
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
literal|"row1"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cf"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cq"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Type
operator|.
name|Maximum
argument_list|)
decl_stmt|,
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
literal|"row2"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cf"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cq"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Type
operator|.
name|Maximum
argument_list|)
decl_stmt|,
name|kv3
init|=
operator|new
name|KeyValue
argument_list|(
literal|"row3"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cf"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cq"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Type
operator|.
name|Maximum
argument_list|)
decl_stmt|;
specifier|final
name|Result
index|[]
name|results
init|=
operator|new
name|Result
index|[]
block|{
name|Result
operator|.
name|create
argument_list|(
operator|new
name|Cell
index|[]
block|{
name|kv1
block|}
argument_list|)
block|,
name|Result
operator|.
name|create
argument_list|(
operator|new
name|Cell
index|[]
block|{
name|kv2
block|}
argument_list|)
block|,
name|Result
operator|.
name|create
argument_list|(
operator|new
name|Cell
index|[]
block|{
name|kv3
block|}
argument_list|)
block|}
decl_stmt|;
name|RpcRetryingCaller
argument_list|<
name|Result
index|[]
argument_list|>
name|caller
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RpcRetryingCaller
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rpcFactory
operator|.
expr|<
name|Result
index|[]
operator|>
name|newCaller
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|caller
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|caller
operator|.
name|callWithoutRetries
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|RetryingCallable
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Result
index|[]
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Result
index|[]
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|ScannerCallableWithReplicas
name|callable
init|=
name|invocation
operator|.
name|getArgumentAt
argument_list|(
literal|0
argument_list|,
name|ScannerCallableWithReplicas
operator|.
name|class
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|count
condition|)
block|{
case|case
literal|0
case|:
comment|// initialize
case|case
literal|2
case|:
comment|// close
name|count
operator|++
expr_stmt|;
return|return
literal|null
return|;
case|case
literal|1
case|:
name|count
operator|++
expr_stmt|;
name|callable
operator|.
name|setHasMoreResultsContext
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|callable
operator|.
name|setServerHasMoreResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|results
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected only 2 invocations"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rpcFactory
operator|.
expr|<
name|Result
index|[]
operator|>
name|newCaller
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|caller
argument_list|)
expr_stmt|;
comment|// Set a small cache
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Set a very large size
name|scan
operator|.
name|setMaxResultSize
argument_list|(
literal|1000
operator|*
literal|1000
argument_list|)
expr_stmt|;
try|try
init|(
name|MockClientScanner
name|scanner
init|=
operator|new
name|MockClientScanner
argument_list|(
name|conf
argument_list|,
name|scan
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table"
argument_list|)
argument_list|,
name|clusterConn
argument_list|,
name|rpcFactory
argument_list|,
name|controllerFactory
argument_list|,
name|pool
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
init|)
block|{
comment|// Due to initializeScannerInConstruction()
name|Mockito
operator|.
name|verify
argument_list|(
name|caller
argument_list|)
operator|.
name|callWithoutRetries
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|RetryingCallable
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|Mockito
operator|.
name|inOrder
argument_list|(
name|caller
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|loadCache
argument_list|()
expr_stmt|;
comment|// Ensures that possiblyNextScanner isn't called at the end which would trigger
comment|// another call to callWithoutRetries
name|inOrder
operator|.
name|verify
argument_list|(
name|caller
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|callWithoutRetries
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|RetryingCallable
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scanner
operator|.
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|scanner
operator|.
name|cache
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|CellScanner
name|cs
init|=
name|r
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kv1
argument_list|,
name|cs
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|scanner
operator|.
name|cache
operator|.
name|poll
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|cs
operator|=
name|r
operator|.
name|cellScanner
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kv2
argument_list|,
name|cs
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|scanner
operator|.
name|cache
operator|.
name|poll
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|cs
operator|=
name|r
operator|.
name|cellScanner
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kv3
argument_list|,
name|cs
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testNoMoreResults
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Result
index|[]
name|results
init|=
operator|new
name|Result
index|[
literal|1
index|]
decl_stmt|;
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
literal|"row"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cf"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cq"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Type
operator|.
name|Maximum
argument_list|)
decl_stmt|;
name|results
index|[
literal|0
index|]
operator|=
name|Result
operator|.
name|create
argument_list|(
operator|new
name|Cell
index|[]
block|{
name|kv1
block|}
argument_list|)
expr_stmt|;
name|RpcRetryingCaller
argument_list|<
name|Result
index|[]
argument_list|>
name|caller
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RpcRetryingCaller
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rpcFactory
operator|.
expr|<
name|Result
index|[]
operator|>
name|newCaller
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|caller
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|caller
operator|.
name|callWithoutRetries
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|RetryingCallable
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Result
index|[]
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Result
index|[]
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|ScannerCallableWithReplicas
name|callable
init|=
name|invocation
operator|.
name|getArgumentAt
argument_list|(
literal|0
argument_list|,
name|ScannerCallableWithReplicas
operator|.
name|class
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|count
condition|)
block|{
case|case
literal|0
case|:
comment|// initialize
case|case
literal|2
case|:
comment|// close
name|count
operator|++
expr_stmt|;
return|return
literal|null
return|;
case|case
literal|1
case|:
name|count
operator|++
expr_stmt|;
name|callable
operator|.
name|setHasMoreResultsContext
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|callable
operator|.
name|setServerHasMoreResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|results
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected only 2 invocations"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rpcFactory
operator|.
expr|<
name|Result
index|[]
operator|>
name|newCaller
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|caller
argument_list|)
expr_stmt|;
comment|// Set a much larger cache and buffer size than we'll provide
name|scan
operator|.
name|setCaching
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
literal|1000
operator|*
literal|1000
argument_list|)
expr_stmt|;
try|try
init|(
name|MockClientScanner
name|scanner
init|=
operator|new
name|MockClientScanner
argument_list|(
name|conf
argument_list|,
name|scan
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table"
argument_list|)
argument_list|,
name|clusterConn
argument_list|,
name|rpcFactory
argument_list|,
name|controllerFactory
argument_list|,
name|pool
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
init|)
block|{
comment|// Due to initializeScannerInConstruction()
name|Mockito
operator|.
name|verify
argument_list|(
name|caller
argument_list|)
operator|.
name|callWithoutRetries
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|RetryingCallable
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|setRpcFinished
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|Mockito
operator|.
name|inOrder
argument_list|(
name|caller
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|loadCache
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|caller
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|callWithoutRetries
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|RetryingCallable
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scanner
operator|.
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|scanner
operator|.
name|cache
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|CellScanner
name|cs
init|=
name|r
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kv1
argument_list|,
name|cs
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testMoreResults
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Result
index|[]
name|results1
init|=
operator|new
name|Result
index|[
literal|1
index|]
decl_stmt|;
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
literal|"row"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cf"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cq"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Type
operator|.
name|Maximum
argument_list|)
decl_stmt|;
name|results1
index|[
literal|0
index|]
operator|=
name|Result
operator|.
name|create
argument_list|(
operator|new
name|Cell
index|[]
block|{
name|kv1
block|}
argument_list|)
expr_stmt|;
specifier|final
name|Result
index|[]
name|results2
init|=
operator|new
name|Result
index|[
literal|1
index|]
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
literal|"row2"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cf"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"cq"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Type
operator|.
name|Maximum
argument_list|)
decl_stmt|;
name|results2
index|[
literal|0
index|]
operator|=
name|Result
operator|.
name|create
argument_list|(
operator|new
name|Cell
index|[]
block|{
name|kv2
block|}
argument_list|)
expr_stmt|;
name|RpcRetryingCaller
argument_list|<
name|Result
index|[]
argument_list|>
name|caller
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RpcRetryingCaller
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rpcFactory
operator|.
expr|<
name|Result
index|[]
operator|>
name|newCaller
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|caller
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|caller
operator|.
name|callWithoutRetries
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|RetryingCallable
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Result
index|[]
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Result
index|[]
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|ScannerCallableWithReplicas
name|callable
init|=
name|invocation
operator|.
name|getArgumentAt
argument_list|(
literal|0
argument_list|,
name|ScannerCallableWithReplicas
operator|.
name|class
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|count
condition|)
block|{
case|case
literal|0
case|:
comment|// initialize
case|case
literal|3
case|:
comment|// close
name|count
operator|++
expr_stmt|;
return|return
literal|null
return|;
case|case
literal|1
case|:
name|count
operator|++
expr_stmt|;
name|callable
operator|.
name|setHasMoreResultsContext
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|callable
operator|.
name|setServerHasMoreResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|results1
return|;
case|case
literal|2
case|:
name|count
operator|++
expr_stmt|;
comment|// The server reports back false WRT more results
name|callable
operator|.
name|setHasMoreResultsContext
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|callable
operator|.
name|setServerHasMoreResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|results2
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected only 2 invocations"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Set a much larger cache and buffer size than we'll provide
name|scan
operator|.
name|setCaching
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
literal|1000
operator|*
literal|1000
argument_list|)
expr_stmt|;
try|try
init|(
name|MockClientScanner
name|scanner
init|=
operator|new
name|MockClientScanner
argument_list|(
name|conf
argument_list|,
name|scan
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table"
argument_list|)
argument_list|,
name|clusterConn
argument_list|,
name|rpcFactory
argument_list|,
name|controllerFactory
argument_list|,
name|pool
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
init|)
block|{
comment|// Due to initializeScannerInConstruction()
name|Mockito
operator|.
name|verify
argument_list|(
name|caller
argument_list|)
operator|.
name|callWithoutRetries
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|RetryingCallable
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|Mockito
operator|.
name|inOrder
argument_list|(
name|caller
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|loadCache
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|caller
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|callWithoutRetries
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|RetryingCallable
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scanner
operator|.
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|scanner
operator|.
name|cache
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|CellScanner
name|cs
init|=
name|r
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kv1
argument_list|,
name|cs
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|setRpcFinished
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|inOrder
operator|=
name|Mockito
operator|.
name|inOrder
argument_list|(
name|caller
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|loadCache
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|caller
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|callWithoutRetries
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|RetryingCallable
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|scanner
operator|.
name|cache
operator|.
name|poll
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|cs
operator|=
name|r
operator|.
name|cellScanner
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kv2
argument_list|,
name|cs
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

