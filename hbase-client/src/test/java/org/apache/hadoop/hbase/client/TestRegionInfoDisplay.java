begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionInfoDisplay
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRegionInfoDisplay
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testRegionDetailsForDisplay
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|startKey
init|=
operator|new
name|byte
index|[]
block|{
literal|0x01
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|}
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
operator|new
name|byte
index|[]
block|{
literal|0x01
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x04
block|}
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.display.keys"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|RegionInfo
name|ri
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|startKey
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|endKey
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|checkEquality
argument_list|(
name|ri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// check HRIs with non-default replicaId
name|ri
operator|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|startKey
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|endKey
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|checkEquality
argument_list|(
name|ri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|RegionInfoDisplay
operator|.
name|HIDDEN_END_KEY
argument_list|,
name|RegionInfoDisplay
operator|.
name|getEndKeyForDisplay
argument_list|(
name|ri
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|RegionInfoDisplay
operator|.
name|HIDDEN_START_KEY
argument_list|,
name|RegionInfoDisplay
operator|.
name|getStartKeyForDisplay
argument_list|(
name|ri
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|RegionState
name|state
init|=
name|RegionState
operator|.
name|createForTesting
argument_list|(
name|convert
argument_list|(
name|ri
argument_list|)
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|)
decl_stmt|;
name|String
name|descriptiveNameForDisplay
init|=
name|RegionInfoDisplay
operator|.
name|getDescriptiveNameFromRegionStateForDisplay
argument_list|(
name|state
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|originalDescriptive
init|=
name|state
operator|.
name|toDescriptiveString
argument_list|()
decl_stmt|;
name|checkDescriptiveNameEquality
argument_list|(
name|descriptiveNameForDisplay
argument_list|,
name|originalDescriptive
argument_list|,
name|startKey
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.display.keys"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|endKey
argument_list|,
name|RegionInfoDisplay
operator|.
name|getEndKeyForDisplay
argument_list|(
name|ri
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|startKey
argument_list|,
name|RegionInfoDisplay
operator|.
name|getStartKeyForDisplay
argument_list|(
name|ri
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|originalDescriptive
argument_list|,
name|RegionInfoDisplay
operator|.
name|getDescriptiveNameFromRegionStateForDisplay
argument_list|(
name|state
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkDescriptiveNameEquality
parameter_list|(
name|String
name|descriptiveNameForDisplay
parameter_list|,
name|String
name|origDesc
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|)
block|{
comment|// except for the "hidden-start-key" substring everything else should exactly match
name|String
name|firstPart
init|=
name|descriptiveNameForDisplay
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|descriptiveNameForDisplay
operator|.
name|indexOf
argument_list|(
operator|new
name|String
argument_list|(
name|RegionInfoDisplay
operator|.
name|HIDDEN_START_KEY
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|secondPart
init|=
name|descriptiveNameForDisplay
operator|.
name|substring
argument_list|(
name|descriptiveNameForDisplay
operator|.
name|indexOf
argument_list|(
operator|new
name|String
argument_list|(
name|RegionInfoDisplay
operator|.
name|HIDDEN_START_KEY
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
operator|+
name|RegionInfoDisplay
operator|.
name|HIDDEN_START_KEY
operator|.
name|length
argument_list|)
decl_stmt|;
name|String
name|firstPartOrig
init|=
name|origDesc
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|origDesc
operator|.
name|indexOf
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|startKey
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|secondPartOrig
init|=
name|origDesc
operator|.
name|substring
argument_list|(
name|origDesc
operator|.
name|indexOf
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|startKey
argument_list|)
argument_list|)
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|startKey
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|firstPart
operator|.
name|equals
argument_list|(
name|firstPartOrig
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|secondPart
operator|.
name|equals
argument_list|(
name|secondPartOrig
argument_list|)
operator|)
assert|;
block|}
specifier|private
name|void
name|checkEquality
parameter_list|(
name|RegionInfo
name|ri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|modifiedRegionName
init|=
name|RegionInfoDisplay
operator|.
name|getRegionNameForDisplay
argument_list|(
name|ri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|modifiedRegionName
argument_list|)
operator|+
literal|" "
operator|+
name|ri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|modifiedRegionNameParts
init|=
name|RegionInfo
operator|.
name|parseRegionName
argument_list|(
name|modifiedRegionName
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|regionNameParts
init|=
name|RegionInfo
operator|.
name|parseRegionName
argument_list|(
name|ri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
comment|//same number of parts
assert|assert
operator|(
name|modifiedRegionNameParts
operator|.
name|length
operator|==
name|regionNameParts
operator|.
name|length
operator|)
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regionNameParts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// all parts should match except for [1] where in the modified one,
comment|// we should have "hidden_start_key"
if|if
condition|(
name|i
operator|!=
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|i
operator|+
literal|" "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|regionNameParts
index|[
name|i
index|]
argument_list|)
operator|+
literal|" "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|modifiedRegionNameParts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|regionNameParts
index|[
name|i
index|]
argument_list|,
name|modifiedRegionNameParts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|i
operator|+
literal|" "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|regionNameParts
index|[
name|i
index|]
argument_list|)
operator|+
literal|" "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|modifiedRegionNameParts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|regionNameParts
index|[
name|i
index|]
argument_list|,
name|modifiedRegionNameParts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|modifiedRegionNameParts
index|[
literal|1
index|]
argument_list|,
name|RegionInfoDisplay
operator|.
name|getStartKeyForDisplay
argument_list|(
name|ri
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|HRegionInfo
name|convert
parameter_list|(
name|RegionInfo
name|ri
parameter_list|)
block|{
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|ri
operator|.
name|getTable
argument_list|()
argument_list|,
name|ri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|ri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|ri
operator|.
name|isSplit
argument_list|()
argument_list|,
name|ri
operator|.
name|getRegionId
argument_list|()
argument_list|)
decl_stmt|;
name|hri
operator|.
name|setOffline
argument_list|(
name|ri
operator|.
name|isOffline
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|hri
return|;
block|}
block|}
end_class

end_unit

