begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PoolMap
operator|.
name|PoolType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|PoolMapTestBase
block|{
specifier|protected
name|PoolMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|poolMap
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|POOL_SIZE
init|=
literal|3
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|poolMap
operator|=
operator|new
name|PoolMap
argument_list|<>
argument_list|(
name|getPoolType
argument_list|()
argument_list|,
name|POOL_SIZE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|poolMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|PoolType
name|getPoolType
parameter_list|()
function_decl|;
specifier|protected
name|void
name|runThread
parameter_list|(
specifier|final
name|String
name|randomKey
parameter_list|,
specifier|final
name|String
name|randomValue
parameter_list|,
specifier|final
name|String
name|expectedValue
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|AtomicBoolean
name|matchFound
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|poolMap
operator|.
name|put
argument_list|(
name|randomKey
argument_list|,
name|randomValue
argument_list|)
expr_stmt|;
name|String
name|actualValue
init|=
name|poolMap
operator|.
name|get
argument_list|(
name|randomKey
argument_list|)
decl_stmt|;
name|matchFound
operator|.
name|set
argument_list|(
name|expectedValue
operator|==
literal|null
condition|?
name|actualValue
operator|==
literal|null
else|:
name|expectedValue
operator|.
name|equals
argument_list|(
name|actualValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|matchFound
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

