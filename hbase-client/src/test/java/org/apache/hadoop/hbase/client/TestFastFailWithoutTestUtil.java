begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|SyncFailedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedChannelException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|ConnectionClosingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|PreemptiveFastFailException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SmallTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestFastFailWithoutTestUtil
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFastFailWithoutTestUtil
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testInterceptorFactoryMethods
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_FAST_FAIL_MODE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RetryingCallerInterceptorFactory
name|interceptorFactory
init|=
operator|new
name|RetryingCallerInterceptorFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RetryingCallerInterceptor
name|interceptorBeforeCast
init|=
name|interceptorFactory
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"We should be getting a PreemptiveFastFailInterceptor"
argument_list|,
name|interceptorBeforeCast
operator|instanceof
name|PreemptiveFastFailInterceptor
argument_list|)
expr_stmt|;
name|PreemptiveFastFailInterceptor
name|interceptor
init|=
operator|(
name|PreemptiveFastFailInterceptor
operator|)
name|interceptorBeforeCast
decl_stmt|;
name|RetryingCallerInterceptorContext
name|contextBeforeCast
init|=
name|interceptor
operator|.
name|createEmptyContext
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"We should be getting a FastFailInterceptorContext since we are interacting with the"
operator|+
literal|" PreemptiveFastFailInterceptor"
argument_list|,
name|contextBeforeCast
operator|instanceof
name|FastFailInterceptorContext
argument_list|)
expr_stmt|;
name|FastFailInterceptorContext
name|context
init|=
operator|(
name|FastFailInterceptorContext
operator|)
name|contextBeforeCast
decl_stmt|;
name|assertTrue
argument_list|(
name|context
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
name|interceptorFactory
operator|=
operator|new
name|RetryingCallerInterceptorFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|interceptorBeforeCast
operator|=
name|interceptorFactory
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"We should be getting a NoOpRetryableCallerInterceptor since we disabled PFFE"
argument_list|,
name|interceptorBeforeCast
operator|instanceof
name|NoOpRetryableCallerInterceptor
argument_list|)
expr_stmt|;
name|contextBeforeCast
operator|=
name|interceptorBeforeCast
operator|.
name|createEmptyContext
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"We should be getting a NoOpRetryingInterceptorContext from NoOpRetryableCallerInterceptor"
argument_list|,
name|contextBeforeCast
operator|instanceof
name|NoOpRetryingInterceptorContext
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterceptorContextClear
parameter_list|()
block|{
name|PreemptiveFastFailInterceptor
name|interceptor
init|=
name|createPreemptiveInterceptor
argument_list|()
decl_stmt|;
name|FastFailInterceptorContext
name|context
init|=
operator|(
name|FastFailInterceptorContext
operator|)
name|interceptor
operator|.
name|createEmptyContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|getCouldNotCommunicateWithServer
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|didTry
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getFailureInfo
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getServer
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getTries
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterceptorContextPrepare
parameter_list|()
throws|throws
name|IOException
block|{
name|PreemptiveFastFailInterceptor
name|interceptor
init|=
name|TestFastFailWithoutTestUtil
operator|.
name|createPreemptiveInterceptor
argument_list|()
decl_stmt|;
name|FastFailInterceptorContext
name|context
init|=
operator|(
name|FastFailInterceptorContext
operator|)
name|interceptor
operator|.
name|createEmptyContext
argument_list|()
decl_stmt|;
name|RetryingCallable
argument_list|<
name|?
argument_list|>
name|callable
init|=
operator|new
name|RegionServerCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|(
name|int
name|callTimeout
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|HRegionLocation
name|getLocation
parameter_list|()
block|{
return|return
operator|new
name|HRegionLocation
argument_list|(
literal|null
argument_list|,
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|,
literal|987654321
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|context
operator|.
name|prepare
argument_list|(
name|callable
argument_list|)
expr_stmt|;
name|ServerName
name|server
init|=
name|getSomeServerName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getServer
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|context
operator|.
name|clear
argument_list|()
expr_stmt|;
name|context
operator|.
name|prepare
argument_list|(
name|callable
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getServer
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterceptorIntercept50Times
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|testInterceptorIntercept
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testInterceptorIntercept
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|long
name|CLEANUP_TIMEOUT
init|=
literal|50
decl_stmt|;
name|long
name|FAST_FAIL_THRESHOLD
init|=
literal|10
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_FAST_FAIL_MODE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_FAST_FAIL_CLEANUP_MS_DURATION_MS
argument_list|,
name|CLEANUP_TIMEOUT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_FAST_FAIL_THREASHOLD_MS
argument_list|,
name|FAST_FAIL_THRESHOLD
argument_list|)
expr_stmt|;
name|PreemptiveFastFailInterceptor
name|interceptor
init|=
name|TestFastFailWithoutTestUtil
operator|.
name|createPreemptiveInterceptor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FastFailInterceptorContext
name|context
init|=
operator|(
name|FastFailInterceptorContext
operator|)
name|interceptor
operator|.
name|createEmptyContext
argument_list|()
decl_stmt|;
name|RetryingCallable
argument_list|<
name|?
argument_list|>
name|callable
init|=
name|getDummyRetryingCallable
argument_list|(
name|getSomeServerName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Lets simulate some work flow here.
name|int
name|tries
init|=
literal|0
decl_stmt|;
name|context
operator|.
name|prepare
argument_list|(
name|callable
argument_list|,
name|tries
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|intercept
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|handleFailure
argument_list|(
name|context
argument_list|,
operator|new
name|ConnectException
argument_list|(
literal|"Failed to connect to server"
argument_list|)
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|updateFailureInfo
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Interceptor should have updated didTry to true"
argument_list|,
name|context
operator|.
name|didTry
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The call shouldn't have been successful if there was a ConnectException"
argument_list|,
name|context
operator|.
name|getCouldNotCommunicateWithServer
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Once a failure is identified, the first time the FailureInfo is generated for the server,"
operator|+
literal|" but it is not assigned to the context yet. It would be assigned on the next"
operator|+
literal|" intercept."
argument_list|,
name|context
operator|.
name|getFailureInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getTries
argument_list|()
argument_list|,
name|tries
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"We are still in the first attempt and so we dont set this variable to true yet."
argument_list|,
name|context
operator|.
name|isRetryDespiteFastFailMode
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|FAST_FAIL_THRESHOLD
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// We sleep so as to make sure that
comment|// we
comment|// actually consider this server as a
comment|// dead server in the next attempt.
name|tries
operator|++
expr_stmt|;
name|context
operator|.
name|prepare
argument_list|(
name|callable
argument_list|,
name|tries
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|intercept
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|handleFailure
argument_list|(
name|context
argument_list|,
operator|new
name|ConnectException
argument_list|(
literal|"Failed to connect to server"
argument_list|)
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|updateFailureInfo
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"didTru should remain true"
argument_list|,
name|context
operator|.
name|didTry
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The call shouldn't have been successful if there was a ConnectException"
argument_list|,
name|context
operator|.
name|getCouldNotCommunicateWithServer
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"The context this time is updated with a failureInfo, since we already gave it a try."
argument_list|,
name|context
operator|.
name|getFailureInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getTries
argument_list|()
argument_list|,
name|tries
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Since we are alone here we would be given the permission to retryDespiteFailures."
argument_list|,
name|context
operator|.
name|isRetryDespiteFastFailMode
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|CLEANUP_TIMEOUT
argument_list|)
expr_stmt|;
comment|// Lets try and cleanup the data in the fast
comment|// fail failure maps.
name|tries
operator|++
expr_stmt|;
name|context
operator|.
name|clear
argument_list|()
expr_stmt|;
name|context
operator|.
name|prepare
argument_list|(
name|callable
argument_list|,
name|tries
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|occasionallyCleanupFailureInformation
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"The cleanup should have cleared the server"
argument_list|,
name|interceptor
operator|.
name|repeatedFailuresMap
operator|.
name|get
argument_list|(
name|context
operator|.
name|getServer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|intercept
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|handleFailure
argument_list|(
name|context
argument_list|,
operator|new
name|ConnectException
argument_list|(
literal|"Failed to connect to server"
argument_list|)
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|updateFailureInfo
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"didTru should remain true"
argument_list|,
name|context
operator|.
name|didTry
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The call shouldn't have been successful if there was a ConnectException"
argument_list|,
name|context
operator|.
name|getCouldNotCommunicateWithServer
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"The failureInfo is cleared off from the maps."
argument_list|,
name|context
operator|.
name|getFailureInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getTries
argument_list|()
argument_list|,
name|tries
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Since we are alone here we would be given the permission to retryDespiteFailures."
argument_list|,
name|context
operator|.
name|isRetryDespiteFastFailMode
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|RetryingCallable
argument_list|<
name|T
argument_list|>
name|getDummyRetryingCallable
parameter_list|(
name|ServerName
name|someServerName
parameter_list|)
block|{
return|return
operator|new
name|RegionServerCallable
argument_list|<
name|T
argument_list|>
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|T
name|call
parameter_list|(
name|int
name|callTimeout
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|HRegionLocation
name|getLocation
parameter_list|()
block|{
return|return
operator|new
name|HRegionLocation
argument_list|(
literal|null
argument_list|,
name|serverName
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExceptionsIdentifiedByInterceptor
parameter_list|()
throws|throws
name|IOException
block|{
name|Throwable
index|[]
name|networkexceptions
init|=
operator|new
name|Throwable
index|[]
block|{
operator|new
name|ConnectException
argument_list|(
literal|"Mary is unwell"
argument_list|)
block|,
operator|new
name|SocketTimeoutException
argument_list|(
literal|"Mike is too late"
argument_list|)
block|,
operator|new
name|ClosedChannelException
argument_list|()
block|,
operator|new
name|SyncFailedException
argument_list|(
literal|"Dave is not on the same page"
argument_list|)
block|,
operator|new
name|TimeoutException
argument_list|(
literal|"Mike is late again"
argument_list|)
block|,
operator|new
name|EOFException
argument_list|(
literal|"This is the end... "
argument_list|)
block|,
operator|new
name|ConnectionClosingException
argument_list|(
literal|"Its closing"
argument_list|)
block|}
decl_stmt|;
specifier|final
name|String
name|INDUCED
init|=
literal|"Induced"
decl_stmt|;
name|Throwable
index|[]
name|nonNetworkExceptions
init|=
operator|new
name|Throwable
index|[]
block|{
operator|new
name|IOException
argument_list|(
literal|"Bob died"
argument_list|)
block|,
operator|new
name|RemoteException
argument_list|(
literal|"Bob's cousin died"
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|NoSuchMethodError
argument_list|(
name|INDUCED
argument_list|)
block|,
operator|new
name|NullPointerException
argument_list|(
name|INDUCED
argument_list|)
block|,
operator|new
name|DoNotRetryIOException
argument_list|(
name|INDUCED
argument_list|)
block|,
operator|new
name|Error
argument_list|(
name|INDUCED
argument_list|)
block|}
decl_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|long
name|CLEANUP_TIMEOUT
init|=
literal|0
decl_stmt|;
name|long
name|FAST_FAIL_THRESHOLD
init|=
literal|1000000
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_FAST_FAIL_MODE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_FAST_FAIL_CLEANUP_MS_DURATION_MS
argument_list|,
name|CLEANUP_TIMEOUT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_FAST_FAIL_THREASHOLD_MS
argument_list|,
name|FAST_FAIL_THRESHOLD
argument_list|)
expr_stmt|;
for|for
control|(
name|Throwable
name|e
range|:
name|networkexceptions
control|)
block|{
name|PreemptiveFastFailInterceptor
name|interceptor
init|=
name|TestFastFailWithoutTestUtil
operator|.
name|createPreemptiveInterceptor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FastFailInterceptorContext
name|context
init|=
operator|(
name|FastFailInterceptorContext
operator|)
name|interceptor
operator|.
name|createEmptyContext
argument_list|()
decl_stmt|;
name|RetryingCallable
argument_list|<
name|?
argument_list|>
name|callable
init|=
name|getDummyRetryingCallable
argument_list|(
name|getSomeServerName
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|prepare
argument_list|(
name|callable
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|intercept
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|handleFailure
argument_list|(
name|context
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|updateFailureInfo
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The call shouldn't have been successful if there was a ConnectException"
argument_list|,
name|context
operator|.
name|getCouldNotCommunicateWithServer
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Throwable
name|e
range|:
name|nonNetworkExceptions
control|)
block|{
try|try
block|{
name|PreemptiveFastFailInterceptor
name|interceptor
init|=
name|TestFastFailWithoutTestUtil
operator|.
name|createPreemptiveInterceptor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FastFailInterceptorContext
name|context
init|=
operator|(
name|FastFailInterceptorContext
operator|)
name|interceptor
operator|.
name|createEmptyContext
argument_list|()
decl_stmt|;
name|RetryingCallable
argument_list|<
name|?
argument_list|>
name|callable
init|=
name|getDummyRetryingCallable
argument_list|(
name|getSomeServerName
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|prepare
argument_list|(
name|callable
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|intercept
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|handleFailure
argument_list|(
name|context
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|updateFailureInfo
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The call shouldn't have been successful if there was a ConnectException"
argument_list|,
name|context
operator|.
name|getCouldNotCommunicateWithServer
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodError
name|t
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Exception not induced"
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|INDUCED
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|t
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Exception not induced"
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|INDUCED
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|t
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Exception not induced"
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|INDUCED
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|t
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Exception not induced"
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|INDUCED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|static
name|PreemptiveFastFailInterceptor
name|createPreemptiveInterceptor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_FAST_FAIL_MODE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RetryingCallerInterceptorFactory
name|interceptorFactory
init|=
operator|new
name|RetryingCallerInterceptorFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RetryingCallerInterceptor
name|interceptorBeforeCast
init|=
name|interceptorFactory
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|(
name|PreemptiveFastFailInterceptor
operator|)
name|interceptorBeforeCast
return|;
block|}
specifier|static
name|PreemptiveFastFailInterceptor
name|createPreemptiveInterceptor
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_FAST_FAIL_MODE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|createPreemptiveInterceptor
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testPreemptiveFastFailException50Times
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|testPreemptiveFastFailException
argument_list|()
expr_stmt|;
block|}
block|}
comment|/***    * This test tries to create a thread interleaving of the 2 threads trying to do a     * Retrying operation using a {@link PreemptiveFastFailInterceptor}. The goal here is to make sure    * that the second thread will be attempting the operation while the first thread is in the    * process of making an attempt after it has marked the server in fast fail.     *     * The thread execution is as follows :    * The PreemptiveFastFailInterceptor is extended in this test to achieve a good interleaving    * behavior without using any thread sleeps.    *     *              Privileged Thread 1                         NonPrivileged Thread 2    *                                                  *  Retry 0 :   intercept                   *                                                  *  Retry 0 :   handleFailure    *                      latches[0].countdown    *                      latches2[0].await    *                                                                          latches[0].await    *                                                    intercept                 : Retry 0    *     *                                                    handleFailure             : Retry 0    *     *                                                    updateFailureinfo         : Retry 0    *                                                                          latches2[0].countdown    *                                                                              *  Retry 0 :   updateFailureInfo    *      *  Retry 1 : intercept    *      *  Retry 1 :   handleFailure    *                      latches[1].countdown    *                      latches2[1].await    *         *                                                                          latches[1].await    *                                                    intercept                 : Retry 1    *                                                        (throws PFFE)    *                                                    handleFailure             : Retry 1    *                                           *                                                    updateFailureinfo         : Retry 1    *                                                                          latches2[1].countdown    *  Retry 1 :   updateFailureInfo    *      *     *  See getInterceptor() for more details on the interceptor implementation to make sure this    *  thread interleaving is achieved.    *      *  We need 2 sets of latches of size MAX_RETRIES. We use an AtomicInteger done to make sure that    *  we short circuit the Thread 1 after we hit the PFFE on Thread 2    *      *      * @throws InterruptedException    * @throws ExecutionException    */
specifier|private
name|void
name|testPreemptiveFastFailException
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting up the counters to start the test"
argument_list|)
expr_stmt|;
name|priviRetryCounter
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nonPriviRetryCounter
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|done
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|RETRIES
condition|;
name|i
operator|++
control|)
block|{
name|latches
index|[
name|i
index|]
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|latches2
index|[
name|i
index|]
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|PreemptiveFastFailInterceptor
name|interceptor
init|=
name|getInterceptor
argument_list|()
decl_stmt|;
specifier|final
name|RpcRetryingCaller
argument_list|<
name|Void
argument_list|>
name|priviCaller
init|=
name|getRpcRetryingCaller
argument_list|(
name|PAUSE_TIME
argument_list|,
name|RETRIES
argument_list|,
name|interceptor
argument_list|)
decl_stmt|;
specifier|final
name|RpcRetryingCaller
argument_list|<
name|Void
argument_list|>
name|nonPriviCaller
init|=
name|getRpcRetryingCaller
argument_list|(
name|PAUSE_TIME
argument_list|,
name|RETRIES
argument_list|,
name|interceptor
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submitting the thread 1"
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Boolean
argument_list|>
name|priviFuture
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|isPriviThreadLocal
operator|.
name|get
argument_list|()
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|priviCaller
operator|.
name|callWithRetries
argument_list|(
name|getRetryingCallable
argument_list|(
name|serverName
argument_list|,
name|exception
argument_list|)
argument_list|,
name|CLEANUP_TIMEOUT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|PreemptiveFastFailException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submitting the thread 2"
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Boolean
argument_list|>
name|nonPriviFuture
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|isPriviThreadLocal
operator|.
name|get
argument_list|()
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nonPriviCaller
operator|.
name|callWithRetries
argument_list|(
name|getRetryingCallable
argument_list|(
name|serverName
argument_list|,
name|exception
argument_list|)
argument_list|,
name|CLEANUP_TIMEOUT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PreemptiveFastFailException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for Thread 2 to finish"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nonPriviFuture
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for Thread 1 to finish"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|priviFuture
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now that the server in fast fail mode. Lets try to make contact with the
comment|// server with a third thread. And make sure that when there is no
comment|// exception,
comment|// the fast fail gets cleared up.
name|assertTrue
argument_list|(
name|interceptor
operator|.
name|isServerInFailureMap
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RpcRetryingCaller
argument_list|<
name|Void
argument_list|>
name|priviCallerNew
init|=
name|getRpcRetryingCaller
argument_list|(
name|PAUSE_TIME
argument_list|,
name|RETRIES
argument_list|,
name|interceptor
argument_list|)
decl_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|priviCallerNew
operator|.
name|callWithRetries
argument_list|(
name|getRetryingCallable
argument_list|(
name|serverName
argument_list|,
literal|null
argument_list|)
argument_list|,
name|CLEANUP_TIMEOUT
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The server was supposed to be removed from the map"
argument_list|,
name|interceptor
operator|.
name|isServerInFailureMap
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
comment|/**    * Some timeouts to make the test execution resonable.    */
specifier|final
name|int
name|PAUSE_TIME
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|RETRIES
init|=
literal|3
decl_stmt|;
specifier|final
name|int
name|CLEANUP_TIMEOUT
init|=
literal|10000
decl_stmt|;
specifier|final
name|long
name|FAST_FAIL_THRESHOLD
init|=
name|PAUSE_TIME
operator|/
literal|1
decl_stmt|;
comment|/**    * The latches necessary to make the thread interleaving possible.    */
specifier|final
name|CountDownLatch
index|[]
name|latches
init|=
operator|new
name|CountDownLatch
index|[
name|RETRIES
operator|+
literal|1
index|]
decl_stmt|;
specifier|final
name|CountDownLatch
index|[]
name|latches2
init|=
operator|new
name|CountDownLatch
index|[
name|RETRIES
operator|+
literal|1
index|]
decl_stmt|;
specifier|final
name|AtomicInteger
name|done
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * Global retry counters that give us an idea about which iteration of the retry we are in    */
specifier|final
name|AtomicInteger
name|priviRetryCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|nonPriviRetryCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|ServerName
name|serverName
init|=
name|getSomeServerName
argument_list|()
decl_stmt|;
comment|/**    * The variable which is used as an identifier within the 2 threads.    */
specifier|public
specifier|final
name|ThreadLocal
argument_list|<
name|AtomicBoolean
argument_list|>
name|isPriviThreadLocal
init|=
operator|new
name|ThreadLocal
argument_list|<
name|AtomicBoolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AtomicBoolean
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|Exception
name|exception
init|=
operator|new
name|ConnectionClosingException
argument_list|(
literal|"The current connection is closed"
argument_list|)
decl_stmt|;
specifier|public
name|PreemptiveFastFailInterceptor
name|getInterceptor
parameter_list|()
block|{
specifier|final
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_FAST_FAIL_MODE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_FAST_FAIL_CLEANUP_MS_DURATION_MS
argument_list|,
name|CLEANUP_TIMEOUT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_FAST_FAIL_THREASHOLD_MS
argument_list|,
name|FAST_FAIL_THRESHOLD
argument_list|)
expr_stmt|;
return|return
operator|new
name|PreemptiveFastFailInterceptor
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|updateFailureInfo
parameter_list|(
name|RetryingCallerInterceptorContext
name|context
parameter_list|)
block|{
name|boolean
name|pffe
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|isPriviThreadLocal
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
name|pffe
operator|=
operator|!
operator|(
operator|(
name|FastFailInterceptorContext
operator|)
name|context
operator|)
operator|.
name|isRetryDespiteFastFailMode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isPriviThreadLocal
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Thread 2 should be done by 2 iterations. We should short circuit Thread 1 because
comment|// Thread 2 would be dead and can't do a countdown.
if|if
condition|(
name|done
operator|.
name|get
argument_list|()
operator|<=
literal|1
condition|)
block|{
name|latches2
index|[
name|priviRetryCounter
operator|.
name|get
argument_list|()
index|]
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
name|super
operator|.
name|updateFailureInfo
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isPriviThreadLocal
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|pffe
condition|)
name|done
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|latches2
index|[
name|nonPriviRetryCounter
operator|.
name|get
argument_list|()
index|]
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|intercept
parameter_list|(
name|RetryingCallerInterceptorContext
name|context
parameter_list|)
throws|throws
name|PreemptiveFastFailException
block|{
if|if
condition|(
operator|!
name|isPriviThreadLocal
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|latches
index|[
name|nonPriviRetryCounter
operator|.
name|getAndIncrement
argument_list|()
index|]
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
name|super
operator|.
name|intercept
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleFailure
parameter_list|(
name|RetryingCallerInterceptorContext
name|context
parameter_list|,
name|Throwable
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|handleFailure
argument_list|(
name|context
argument_list|,
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPriviThreadLocal
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
name|latches
index|[
name|priviRetryCounter
operator|.
name|getAndIncrement
argument_list|()
index|]
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
specifier|public
name|RpcRetryingCaller
argument_list|<
name|Void
argument_list|>
name|getRpcRetryingCaller
parameter_list|(
name|int
name|pauseTime
parameter_list|,
name|int
name|retries
parameter_list|,
name|RetryingCallerInterceptor
name|interceptor
parameter_list|)
block|{
return|return
operator|new
name|RpcRetryingCaller
argument_list|<
name|Void
argument_list|>
argument_list|(
name|pauseTime
argument_list|,
name|retries
argument_list|,
name|interceptor
argument_list|,
literal|9
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Void
name|callWithRetries
parameter_list|(
name|RetryingCallable
argument_list|<
name|Void
argument_list|>
name|callable
parameter_list|,
name|int
name|callTimeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|RuntimeException
block|{
name|Void
name|ret
init|=
name|super
operator|.
name|callWithRetries
argument_list|(
name|callable
argument_list|,
name|callTimeout
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
block|}
return|;
block|}
specifier|protected
specifier|static
name|ServerName
name|getSomeServerName
parameter_list|()
block|{
return|return
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|,
literal|987654321
argument_list|)
return|;
block|}
specifier|private
name|RegionServerCallable
argument_list|<
name|Void
argument_list|>
name|getRetryingCallable
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|new
name|RegionServerCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|prepare
parameter_list|(
name|boolean
name|reload
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|location
operator|=
operator|new
name|HRegionLocation
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|(
name|int
name|callTimeout
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
throw|throw
name|e
throw|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|HRegionLocation
name|getLocation
parameter_list|()
block|{
return|return
operator|new
name|HRegionLocation
argument_list|(
literal|null
argument_list|,
name|serverName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|throwable
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|boolean
name|retrying
parameter_list|)
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
specifier|public
name|long
name|sleep
parameter_list|(
name|long
name|pause
parameter_list|,
name|int
name|tries
parameter_list|)
block|{
return|return
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
name|pause
argument_list|,
name|tries
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

