begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorUtils
operator|.
name|TableDescriptorDelta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestTableDescriptorUtils
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestTableDescriptorUtils
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testDelta
parameter_list|()
block|{
name|ColumnFamilyDescriptor
name|cf1
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"cf1"
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|cf2
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"cf2"
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|cf3
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"cf3"
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|cf4
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"cf4"
argument_list|)
decl_stmt|;
name|TableDescriptor
name|td
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|setColumnFamilies
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|cf1
argument_list|,
name|cf2
argument_list|,
name|cf3
argument_list|,
name|cf4
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TableDescriptorDelta
name|selfCompare
init|=
name|TableDescriptorUtils
operator|.
name|computeDelta
argument_list|(
name|td
argument_list|,
name|td
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|selfCompare
operator|.
name|getColumnsAdded
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|selfCompare
operator|.
name|getColumnsDeleted
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|selfCompare
operator|.
name|getColumnsModified
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnFamilyDescriptor
name|modCf2
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|cf2
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|5
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ColumnFamilyDescriptor
name|modCf3
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|cf3
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|5
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ColumnFamilyDescriptor
name|cf5
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"cf5"
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|cf6
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"cf6"
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|cf7
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"cf7"
argument_list|)
decl_stmt|;
name|TableDescriptor
name|newTd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|td
argument_list|)
operator|.
name|removeColumnFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
argument_list|)
operator|.
name|modifyColumnFamily
argument_list|(
name|modCf2
argument_list|)
operator|.
name|modifyColumnFamily
argument_list|(
name|modCf3
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|cf5
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|cf6
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|cf7
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TableDescriptorDelta
name|delta
init|=
name|TableDescriptorUtils
operator|.
name|computeDelta
argument_list|(
name|td
argument_list|,
name|newTd
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|delta
operator|.
name|getColumnsAdded
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|delta
operator|.
name|getColumnsDeleted
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|delta
operator|.
name|getColumnsModified
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TableDescriptorDelta
name|inverseDelta
init|=
name|TableDescriptorUtils
operator|.
name|computeDelta
argument_list|(
name|newTd
argument_list|,
name|td
argument_list|)
decl_stmt|;
comment|// Equality here relies on implementation detail of the returned Set being a TreeSet
name|assertEquals
argument_list|(
name|delta
operator|.
name|getColumnsDeleted
argument_list|()
argument_list|,
name|inverseDelta
operator|.
name|getColumnsAdded
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|delta
operator|.
name|getColumnsAdded
argument_list|()
argument_list|,
name|inverseDelta
operator|.
name|getColumnsDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|delta
operator|.
name|getColumnsModified
argument_list|()
argument_list|,
name|inverseDelta
operator|.
name|getColumnsModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

