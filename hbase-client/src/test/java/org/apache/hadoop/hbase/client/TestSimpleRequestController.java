begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RequestController
operator|.
name|ReturnCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSimpleRequestController
block|{
specifier|private
specifier|static
specifier|final
name|TableName
name|DUMMY_TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"DUMMY_TABLE"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DUMMY_BYTES_1
init|=
literal|"DUMMY_BYTES_1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DUMMY_BYTES_2
init|=
literal|"DUMMY_BYTES_2"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DUMMY_BYTES_3
init|=
literal|"DUMMY_BYTES_3"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ServerName
name|SN
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"s1:1,1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ServerName
name|SN2
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"s2:2,2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HRegionInfo
name|HRI1
init|=
operator|new
name|HRegionInfo
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|DUMMY_BYTES_1
argument_list|,
name|DUMMY_BYTES_2
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HRegionInfo
name|HRI2
init|=
operator|new
name|HRegionInfo
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|DUMMY_BYTES_2
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HRegionInfo
name|HRI3
init|=
operator|new
name|HRegionInfo
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|DUMMY_BYTES_3
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HRegionLocation
name|LOC1
init|=
operator|new
name|HRegionLocation
argument_list|(
name|HRI1
argument_list|,
name|SN
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HRegionLocation
name|LOC2
init|=
operator|new
name|HRegionLocation
argument_list|(
name|HRI2
argument_list|,
name|SN
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HRegionLocation
name|LOC3
init|=
operator|new
name|HRegionLocation
argument_list|(
name|HRI3
argument_list|,
name|SN2
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testIllegalRequestHeapSize
parameter_list|()
block|{
name|testIllegalArgument
argument_list|(
name|SimpleRequestController
operator|.
name|HBASE_CLIENT_MAX_PERREQUEST_HEAPSIZE
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalRsTasks
parameter_list|()
block|{
name|testIllegalArgument
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_MAX_PERSERVER_TASKS
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalRegionTasks
parameter_list|()
block|{
name|testIllegalArgument
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_MAX_PERREGION_TASKS
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalSubmittedSize
parameter_list|()
block|{
name|testIllegalArgument
argument_list|(
name|SimpleRequestController
operator|.
name|HBASE_CLIENT_MAX_SUBMIT_HEAPSIZE
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalRequestRows
parameter_list|()
block|{
name|testIllegalArgument
argument_list|(
name|SimpleRequestController
operator|.
name|HBASE_CLIENT_MAX_PERREQUEST_ROWS
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testIllegalArgument
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
try|try
block|{
name|SimpleRequestController
name|controller
init|=
operator|new
name|SimpleRequestController
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"The "
operator|+
name|key
operator|+
literal|" must be bigger than zero"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
block|}
specifier|private
specifier|static
name|Put
name|createPut
parameter_list|(
name|long
name|maxHeapSizePerRequest
parameter_list|)
block|{
return|return
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|maxHeapSizePerRequest
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTaskCheckerHost
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|maxTotalConcurrentTasks
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|maxConcurrentTasksPerServer
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|maxConcurrentTasksPerRegion
init|=
literal|1
decl_stmt|;
specifier|final
name|AtomicLong
name|tasksInProgress
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|AtomicInteger
argument_list|>
name|taskCounterPerServer
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|AtomicInteger
argument_list|>
name|taskCounterPerRegion
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|SimpleRequestController
operator|.
name|TaskCountChecker
name|countChecker
init|=
operator|new
name|SimpleRequestController
operator|.
name|TaskCountChecker
argument_list|(
name|maxTotalConcurrentTasks
argument_list|,
name|maxConcurrentTasksPerServer
argument_list|,
name|maxConcurrentTasksPerRegion
argument_list|,
name|tasksInProgress
argument_list|,
name|taskCounterPerServer
argument_list|,
name|taskCounterPerRegion
argument_list|)
decl_stmt|;
specifier|final
name|long
name|maxHeapSizePerRequest
init|=
literal|2
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// unlimiited
name|SimpleRequestController
operator|.
name|RequestHeapSizeChecker
name|sizeChecker
init|=
operator|new
name|SimpleRequestController
operator|.
name|RequestHeapSizeChecker
argument_list|(
name|maxHeapSizePerRequest
argument_list|)
decl_stmt|;
name|RequestController
operator|.
name|Checker
name|checker
init|=
name|SimpleRequestController
operator|.
name|newChecker
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|countChecker
argument_list|,
name|sizeChecker
argument_list|)
argument_list|)
decl_stmt|;
name|ReturnCode
name|loc1Code
init|=
name|checker
operator|.
name|canTakeRow
argument_list|(
name|LOC1
argument_list|,
name|createPut
argument_list|(
name|maxHeapSizePerRequest
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|loc1Code
argument_list|)
expr_stmt|;
name|ReturnCode
name|loc1Code_2
init|=
name|checker
operator|.
name|canTakeRow
argument_list|(
name|LOC1
argument_list|,
name|createPut
argument_list|(
name|maxHeapSizePerRequest
argument_list|)
argument_list|)
decl_stmt|;
comment|// rejected for size
name|assertNotEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|loc1Code_2
argument_list|)
expr_stmt|;
name|ReturnCode
name|loc2Code
init|=
name|checker
operator|.
name|canTakeRow
argument_list|(
name|LOC2
argument_list|,
name|createPut
argument_list|(
name|maxHeapSizePerRequest
argument_list|)
argument_list|)
decl_stmt|;
comment|// rejected for size
name|assertNotEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|loc2Code
argument_list|)
expr_stmt|;
comment|// fill the task slots for LOC3.
name|taskCounterPerRegion
operator|.
name|put
argument_list|(
name|LOC3
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|taskCounterPerServer
operator|.
name|put
argument_list|(
name|LOC3
operator|.
name|getServerName
argument_list|()
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|ReturnCode
name|loc3Code
init|=
name|checker
operator|.
name|canTakeRow
argument_list|(
name|LOC3
argument_list|,
name|createPut
argument_list|(
literal|1L
argument_list|)
argument_list|)
decl_stmt|;
comment|// rejected for count
name|assertNotEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|loc3Code
argument_list|)
expr_stmt|;
comment|// release the task slots for LOC3.
name|taskCounterPerRegion
operator|.
name|put
argument_list|(
name|LOC3
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|taskCounterPerServer
operator|.
name|put
argument_list|(
name|LOC3
operator|.
name|getServerName
argument_list|()
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ReturnCode
name|loc3Code_2
init|=
name|checker
operator|.
name|canTakeRow
argument_list|(
name|LOC3
argument_list|,
name|createPut
argument_list|(
literal|1L
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|loc3Code_2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestHeapSizeChecker
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|long
name|maxHeapSizePerRequest
init|=
literal|2
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|SimpleRequestController
operator|.
name|RequestHeapSizeChecker
name|checker
init|=
operator|new
name|SimpleRequestController
operator|.
name|RequestHeapSizeChecker
argument_list|(
name|maxHeapSizePerRequest
argument_list|)
decl_stmt|;
comment|// inner state is unchanged.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|code
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC1
argument_list|,
name|maxHeapSizePerRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|code
operator|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC2
argument_list|,
name|maxHeapSizePerRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
comment|// accept the data located on LOC1 region.
name|ReturnCode
name|acceptCode
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC1
argument_list|,
name|maxHeapSizePerRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|acceptCode
argument_list|)
expr_stmt|;
name|checker
operator|.
name|notifyFinal
argument_list|(
name|acceptCode
argument_list|,
name|LOC1
argument_list|,
name|maxHeapSizePerRequest
argument_list|)
expr_stmt|;
comment|// the sn server reachs the limit.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|code
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC1
argument_list|,
name|maxHeapSizePerRequest
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|code
operator|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC2
argument_list|,
name|maxHeapSizePerRequest
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
comment|// the request to sn2 server should be accepted.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|code
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC3
argument_list|,
name|maxHeapSizePerRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
name|checker
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|code
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC1
argument_list|,
name|maxHeapSizePerRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|code
operator|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC2
argument_list|,
name|maxHeapSizePerRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestRowsChecker
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|long
name|maxRowCount
init|=
literal|100
decl_stmt|;
name|SimpleRequestController
operator|.
name|RequestRowsChecker
name|checker
init|=
operator|new
name|SimpleRequestController
operator|.
name|RequestRowsChecker
argument_list|(
name|maxRowCount
argument_list|)
decl_stmt|;
specifier|final
name|long
name|heapSizeOfRow
init|=
literal|100
decl_stmt|;
comment|//unused
comment|// inner state is unchanged.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|code
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC1
argument_list|,
name|heapSizeOfRow
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|code
operator|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC2
argument_list|,
name|heapSizeOfRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
comment|// accept the data located on LOC1 region.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|maxRowCount
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|acceptCode
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC1
argument_list|,
name|heapSizeOfRow
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|acceptCode
argument_list|)
expr_stmt|;
name|checker
operator|.
name|notifyFinal
argument_list|(
name|acceptCode
argument_list|,
name|LOC1
argument_list|,
name|heapSizeOfRow
argument_list|)
expr_stmt|;
block|}
comment|// the sn server reachs the limit.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|code
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC1
argument_list|,
name|heapSizeOfRow
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|code
operator|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC2
argument_list|,
name|heapSizeOfRow
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
comment|// the request to sn2 server should be accepted.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|code
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC3
argument_list|,
name|heapSizeOfRow
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
name|checker
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|code
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC1
argument_list|,
name|heapSizeOfRow
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|code
operator|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC2
argument_list|,
name|heapSizeOfRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubmittedSizeChecker
parameter_list|()
block|{
specifier|final
name|long
name|maxHeapSizeSubmit
init|=
literal|2
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|SimpleRequestController
operator|.
name|SubmittedSizeChecker
name|checker
init|=
operator|new
name|SimpleRequestController
operator|.
name|SubmittedSizeChecker
argument_list|(
name|maxHeapSizeSubmit
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|include
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC1
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|include
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|checker
operator|.
name|notifyFinal
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|LOC1
argument_list|,
name|maxHeapSizeSubmit
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|include
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC1
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|END
argument_list|,
name|include
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|include
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC2
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|END
argument_list|,
name|include
argument_list|)
expr_stmt|;
block|}
name|checker
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|include
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC1
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|include
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTaskCountChecker
parameter_list|()
throws|throws
name|InterruptedIOException
block|{
name|long
name|heapSizeOfRow
init|=
literal|12345
decl_stmt|;
name|int
name|maxTotalConcurrentTasks
init|=
literal|100
decl_stmt|;
name|int
name|maxConcurrentTasksPerServer
init|=
literal|2
decl_stmt|;
name|int
name|maxConcurrentTasksPerRegion
init|=
literal|1
decl_stmt|;
name|AtomicLong
name|tasksInProgress
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|AtomicInteger
argument_list|>
name|taskCounterPerServer
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|AtomicInteger
argument_list|>
name|taskCounterPerRegion
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|SimpleRequestController
operator|.
name|TaskCountChecker
name|checker
init|=
operator|new
name|SimpleRequestController
operator|.
name|TaskCountChecker
argument_list|(
name|maxTotalConcurrentTasks
argument_list|,
name|maxConcurrentTasksPerServer
argument_list|,
name|maxConcurrentTasksPerRegion
argument_list|,
name|tasksInProgress
argument_list|,
name|taskCounterPerServer
argument_list|,
name|taskCounterPerRegion
argument_list|)
decl_stmt|;
comment|// inner state is unchanged.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|code
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC1
argument_list|,
name|heapSizeOfRow
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
comment|// add LOC1 region.
name|ReturnCode
name|code
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC1
argument_list|,
name|heapSizeOfRow
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|checker
operator|.
name|notifyFinal
argument_list|(
name|code
argument_list|,
name|LOC1
argument_list|,
name|heapSizeOfRow
argument_list|)
expr_stmt|;
comment|// fill the task slots for LOC1.
name|taskCounterPerRegion
operator|.
name|put
argument_list|(
name|LOC1
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|taskCounterPerServer
operator|.
name|put
argument_list|(
name|LOC1
operator|.
name|getServerName
argument_list|()
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// the region was previously accepted, so it must be accpted now.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|maxConcurrentTasksPerRegion
operator|*
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|includeCode
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC1
argument_list|,
name|heapSizeOfRow
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|includeCode
argument_list|)
expr_stmt|;
name|checker
operator|.
name|notifyFinal
argument_list|(
name|includeCode
argument_list|,
name|LOC1
argument_list|,
name|heapSizeOfRow
argument_list|)
expr_stmt|;
block|}
comment|// fill the task slots for LOC3.
name|taskCounterPerRegion
operator|.
name|put
argument_list|(
name|LOC3
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|taskCounterPerServer
operator|.
name|put
argument_list|(
name|LOC3
operator|.
name|getServerName
argument_list|()
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// no task slots.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|maxConcurrentTasksPerRegion
operator|*
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|excludeCode
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC3
argument_list|,
name|heapSizeOfRow
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|excludeCode
argument_list|)
expr_stmt|;
name|checker
operator|.
name|notifyFinal
argument_list|(
name|excludeCode
argument_list|,
name|LOC3
argument_list|,
name|heapSizeOfRow
argument_list|)
expr_stmt|;
block|}
comment|// release the tasks for LOC3.
name|taskCounterPerRegion
operator|.
name|put
argument_list|(
name|LOC3
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|taskCounterPerServer
operator|.
name|put
argument_list|(
name|LOC3
operator|.
name|getServerName
argument_list|()
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// add LOC3 region.
name|ReturnCode
name|code3
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC3
argument_list|,
name|heapSizeOfRow
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|code3
argument_list|)
expr_stmt|;
name|checker
operator|.
name|notifyFinal
argument_list|(
name|code3
argument_list|,
name|LOC3
argument_list|,
name|heapSizeOfRow
argument_list|)
expr_stmt|;
comment|// the region was previously accepted, so it must be accpted now.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|maxConcurrentTasksPerRegion
operator|*
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|includeCode
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC3
argument_list|,
name|heapSizeOfRow
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|includeCode
argument_list|)
expr_stmt|;
name|checker
operator|.
name|notifyFinal
argument_list|(
name|includeCode
argument_list|,
name|LOC3
argument_list|,
name|heapSizeOfRow
argument_list|)
expr_stmt|;
block|}
name|checker
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// the region was previously accepted,
comment|// but checker have reseted and task slots for LOC1 is full.
comment|// So it must be rejected now.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|maxConcurrentTasksPerRegion
operator|*
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|ReturnCode
name|includeCode
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|LOC1
argument_list|,
name|heapSizeOfRow
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|includeCode
argument_list|)
expr_stmt|;
name|checker
operator|.
name|notifyFinal
argument_list|(
name|includeCode
argument_list|,
name|LOC1
argument_list|,
name|heapSizeOfRow
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWaitForMaximumCurrentTasks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|max
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|SimpleRequestController
name|controller
init|=
operator|new
name|SimpleRequestController
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|tasks
init|=
name|controller
operator|.
name|tasksInProgress
decl_stmt|;
name|Runnable
name|runnable
init|=
parameter_list|()
lambda|->
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|controller
operator|.
name|waitForMaximumCurrentTasks
argument_list|(
name|max
operator|.
name|get
argument_list|()
argument_list|,
literal|123
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedIOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// First test that our runnable thread only exits when tasks is zero.
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Now assert we stay running if max == zero and tasks is> 0.
name|barrier
operator|.
name|reset
argument_list|()
expr_stmt|;
name|tasks
operator|.
name|set
argument_list|(
literal|1000000
argument_list|)
expr_stmt|;
name|t
operator|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
while|while
condition|(
name|tasks
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|t
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|tasks
operator|.
name|set
argument_list|(
name|tasks
operator|.
name|get
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

