begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * The purpose of this test is to make sure the region exception won't corrupt the results  * of batch. The prescription is shown below.  * 1) honor the action result rather than region exception. If the action have both of true result  * and region exception, the action is fine as the exception is caused by other actions  * which are in the same region.  * 2) honor the action exception rather than region exception. If the action have both of action  * exception and region exception, we deal with the action exception only. If we also  * handle the region exception for the same action, it will introduce the negative count of  * actions in progress. The AsyncRequestFuture#waitUntilDone will block forever.  *  * This bug can be reproduced by real use case. see TestMalformedCellFromClient(in branch-1.4+).  * It uses the batch of RowMutations to present the bug. Given that the batch of RowMutations is  * only supported by branch-1.4+, perhaps the branch-1.3 and branch-1.2 won't encounter this issue.  * We still backport the fix to branch-1.3 and branch-1.2 in case we ignore some write paths.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAsyncProcessWithRegionException
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAsyncProcessWithRegionException
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Result
name|EMPTY_RESULT
init|=
name|Result
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IOException
name|IOE
init|=
operator|new
name|IOException
argument_list|(
literal|"YOU CAN'T PASS"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Configuration
name|CONF
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|DUMMY_TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"DUMMY_TABLE"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|GOOD_ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"GOOD_ROW"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|BAD_ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BAD_ROW"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|BAD_ROW_WITHOUT_ACTION_EXCEPTION
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BAD_ROW_WITHOUT_ACTION_EXCEPTION"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"FAMILY"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ServerName
name|SERVER_NAME
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"s1,1,1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|RegionInfo
name|REGION_INFO
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|DUMMY_TABLE
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HRegionLocation
name|REGION_LOCATION
init|=
operator|new
name|HRegionLocation
argument_list|(
name|REGION_INFO
argument_list|,
name|SERVER_NAME
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
block|{
comment|// disable the retry
name|CONF
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuccessivePut
parameter_list|()
throws|throws
name|Exception
block|{
name|MyAsyncProcess
name|ap
init|=
operator|new
name|MyAsyncProcess
argument_list|(
name|createHConnection
argument_list|()
argument_list|,
name|CONF
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
operator|new
name|Put
argument_list|(
name|GOOD_ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|FAMILY
argument_list|,
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|expectedSize
init|=
name|puts
operator|.
name|size
argument_list|()
decl_stmt|;
name|AsyncRequestFuture
name|arf
init|=
name|ap
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|puts
argument_list|)
decl_stmt|;
name|arf
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
name|Object
index|[]
name|result
init|=
name|arf
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|r
range|:
name|result
control|)
block|{
name|assertEquals
argument_list|(
name|Result
operator|.
name|class
argument_list|,
name|r
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|puts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertActionsInProgress
argument_list|(
name|arf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailedPut
parameter_list|()
throws|throws
name|Exception
block|{
name|MyAsyncProcess
name|ap
init|=
operator|new
name|MyAsyncProcess
argument_list|(
name|createHConnection
argument_list|()
argument_list|,
name|CONF
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
operator|new
name|Put
argument_list|(
name|GOOD_ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|FAMILY
argument_list|,
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
comment|// this put should fail
name|puts
operator|.
name|add
argument_list|(
operator|new
name|Put
argument_list|(
name|BAD_ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|FAMILY
argument_list|,
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|expectedSize
init|=
name|puts
operator|.
name|size
argument_list|()
decl_stmt|;
name|AsyncRequestFuture
name|arf
init|=
name|ap
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|puts
argument_list|)
decl_stmt|;
name|arf
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
comment|// There is a failed puts
name|assertError
argument_list|(
name|arf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Object
index|[]
name|result
init|=
name|arf
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Result
operator|.
name|class
argument_list|,
name|result
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
index|[
literal|1
index|]
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|puts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertActionsInProgress
argument_list|(
name|arf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailedPutWithoutActionException
parameter_list|()
throws|throws
name|Exception
block|{
name|MyAsyncProcess
name|ap
init|=
operator|new
name|MyAsyncProcess
argument_list|(
name|createHConnection
argument_list|()
argument_list|,
name|CONF
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
operator|new
name|Put
argument_list|(
name|GOOD_ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|FAMILY
argument_list|,
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
comment|// this put should fail
name|puts
operator|.
name|add
argument_list|(
operator|new
name|Put
argument_list|(
name|BAD_ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|FAMILY
argument_list|,
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
comment|// this put should fail, and it won't have action exception
name|puts
operator|.
name|add
argument_list|(
operator|new
name|Put
argument_list|(
name|BAD_ROW_WITHOUT_ACTION_EXCEPTION
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|FAMILY
argument_list|,
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|expectedSize
init|=
name|puts
operator|.
name|size
argument_list|()
decl_stmt|;
name|AsyncRequestFuture
name|arf
init|=
name|ap
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|puts
argument_list|)
decl_stmt|;
name|arf
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
comment|// There are two failed puts
name|assertError
argument_list|(
name|arf
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Object
index|[]
name|result
init|=
name|arf
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Result
operator|.
name|class
argument_list|,
name|result
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
index|[
literal|1
index|]
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
index|[
literal|2
index|]
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|puts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertActionsInProgress
argument_list|(
name|arf
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertError
parameter_list|(
name|AsyncRequestFuture
name|arf
parameter_list|,
name|int
name|expectedCountOfFailure
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|arf
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
name|RetriesExhaustedWithDetailsException
name|e
init|=
name|arf
operator|.
name|getErrors
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Throwable
argument_list|>
name|errors
init|=
name|e
operator|.
name|getCauses
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedCountOfFailure
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Throwable
name|t
range|:
name|errors
control|)
block|{
name|assertTrue
argument_list|(
name|t
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertActionsInProgress
parameter_list|(
name|AsyncRequestFuture
name|arf
parameter_list|)
block|{
if|if
condition|(
name|arf
operator|instanceof
name|AsyncRequestFutureImpl
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|AsyncRequestFutureImpl
operator|)
name|arf
operator|)
operator|.
name|getNumberOfActionsInProgress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|ConnectionImplementation
name|createHConnection
parameter_list|()
throws|throws
name|IOException
block|{
name|ConnectionImplementation
name|hc
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ConnectionImplementation
operator|.
name|class
argument_list|)
decl_stmt|;
name|NonceGenerator
name|ng
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NonceGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hc
operator|.
name|getNonceGenerator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ng
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hc
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CONF
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hc
operator|.
name|getConnectionConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ConnectionConfiguration
argument_list|(
name|CONF
argument_list|)
argument_list|)
expr_stmt|;
name|setMockLocation
argument_list|(
name|hc
argument_list|,
name|GOOD_ROW
argument_list|,
operator|new
name|RegionLocations
argument_list|(
name|REGION_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
name|setMockLocation
argument_list|(
name|hc
argument_list|,
name|BAD_ROW
argument_list|,
operator|new
name|RegionLocations
argument_list|(
name|REGION_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hc
operator|.
name|locateRegions
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|DUMMY_TABLE
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|REGION_LOCATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|hc
return|;
block|}
specifier|private
specifier|static
name|void
name|setMockLocation
parameter_list|(
name|ConnectionImplementation
name|hc
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|RegionLocations
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|hc
operator|.
name|locateRegion
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|DUMMY_TABLE
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|row
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hc
operator|.
name|locateRegion
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|DUMMY_TABLE
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|row
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|MyAsyncProcess
extends|extends
name|AsyncProcess
block|{
specifier|private
specifier|final
name|ExecutorService
name|service
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|MyAsyncProcess
parameter_list|(
name|ConnectionImplementation
name|hc
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|hc
argument_list|,
name|conf
argument_list|,
operator|new
name|RpcRetryingCallerFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|RpcControllerFactory
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AsyncRequestFuture
name|submit
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|rows
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
return|return
name|submit
argument_list|(
name|AsyncProcessTask
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPool
argument_list|(
name|service
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setRowAccess
argument_list|(
name|rows
argument_list|)
operator|.
name|setSubmittedRows
argument_list|(
name|AsyncProcessTask
operator|.
name|SubmittedRows
operator|.
name|NORMAL
argument_list|)
operator|.
name|setNeedResults
argument_list|(
literal|true
argument_list|)
operator|.
name|setRpcTimeout
argument_list|(
name|HConstants
operator|.
name|DEFAULT_HBASE_RPC_TIMEOUT
argument_list|)
operator|.
name|setOperationTimeout
argument_list|(
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_OPERATION_TIMEOUT
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RpcRetryingCaller
argument_list|<
name|AbstractResponse
argument_list|>
name|createCaller
parameter_list|(
name|CancellableRegionServerCallable
name|callable
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
block|{
name|MultiServerCallable
name|callable1
init|=
operator|(
name|MultiServerCallable
operator|)
name|callable
decl_stmt|;
name|MultiResponse
name|mr
init|=
operator|new
name|MultiResponse
argument_list|()
decl_stmt|;
name|callable1
operator|.
name|getMulti
argument_list|()
operator|.
name|actions
operator|.
name|forEach
argument_list|(
parameter_list|(
name|regionName
parameter_list|,
name|actions
parameter_list|)
lambda|->
block|{
name|actions
operator|.
name|forEach
argument_list|(
name|action
lambda|->
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|action
operator|.
name|getAction
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|,
name|GOOD_ROW
argument_list|)
condition|)
block|{
name|mr
operator|.
name|add
argument_list|(
name|regionName
argument_list|,
name|action
operator|.
name|getOriginalIndex
argument_list|()
argument_list|,
name|EMPTY_RESULT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|action
operator|.
name|getAction
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|,
name|BAD_ROW
argument_list|)
condition|)
block|{
name|mr
operator|.
name|add
argument_list|(
name|regionName
argument_list|,
name|action
operator|.
name|getOriginalIndex
argument_list|()
argument_list|,
name|IOE
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|mr
operator|.
name|addException
argument_list|(
name|REGION_INFO
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|IOE
argument_list|)
expr_stmt|;
return|return
operator|new
name|RpcRetryingCallerImpl
argument_list|<
name|AbstractResponse
argument_list|>
argument_list|(
literal|100
argument_list|,
literal|500
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|AbstractResponse
name|callWithoutRetries
parameter_list|(
name|RetryingCallable
argument_list|<
name|AbstractResponse
argument_list|>
name|callable
parameter_list|,
name|int
name|callTimeout
parameter_list|)
block|{
try|try
block|{
comment|// sleep one second in order for threadpool to start another thread instead of reusing
comment|// existing one.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// pass
block|}
return|return
name|mr
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

