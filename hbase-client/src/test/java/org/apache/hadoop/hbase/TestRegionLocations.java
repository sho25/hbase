begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionLocations
block|{
name|ServerName
name|sn0
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"host0"
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|ServerName
name|sn1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"host1"
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|ServerName
name|sn2
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"host2"
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|ServerName
name|sn3
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"host3"
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|HRegionInfo
name|info0
init|=
name|hri
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|HRegionInfo
name|info1
init|=
name|hri
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|HRegionInfo
name|info2
init|=
name|hri
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|HRegionInfo
name|info9
init|=
name|hri
argument_list|(
literal|9
argument_list|)
decl_stmt|;
name|long
name|regionId1
init|=
literal|1000
decl_stmt|;
name|long
name|regionId2
init|=
literal|2000
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSizeMethods
parameter_list|()
block|{
name|RegionLocations
name|list
init|=
operator|new
name|RegionLocations
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|numNonNullElements
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
name|hrll
argument_list|(
operator|(
name|HRegionLocation
operator|)
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|numNonNullElements
argument_list|()
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info0
init|=
name|hri
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|list
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|numNonNullElements
argument_list|()
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info9
init|=
name|hri
argument_list|(
literal|9
argument_list|)
decl_stmt|;
name|list
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info9
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|numNonNullElements
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
literal|null
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info9
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|numNonNullElements
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HRegionInfo
name|hri
parameter_list|(
name|int
name|replicaId
parameter_list|)
block|{
return|return
name|hri
argument_list|(
name|regionId1
argument_list|,
name|replicaId
argument_list|)
return|;
block|}
specifier|private
name|HRegionInfo
name|hri
parameter_list|(
name|long
name|regionId
parameter_list|,
name|int
name|replicaId
parameter_list|)
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|startKey
init|=
name|HConstants
operator|.
name|EMPTY_START_ROW
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|HConstants
operator|.
name|EMPTY_END_ROW
decl_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|table
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
literal|false
argument_list|,
name|regionId
argument_list|,
name|replicaId
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
specifier|private
name|HRegionLocation
name|hrl
parameter_list|(
name|HRegionInfo
name|hri
parameter_list|,
name|ServerName
name|sn
parameter_list|)
block|{
return|return
operator|new
name|HRegionLocation
argument_list|(
name|hri
argument_list|,
name|sn
argument_list|)
return|;
block|}
specifier|private
name|HRegionLocation
name|hrl
parameter_list|(
name|HRegionInfo
name|hri
parameter_list|,
name|ServerName
name|sn
parameter_list|,
name|long
name|seqNum
parameter_list|)
block|{
return|return
operator|new
name|HRegionLocation
argument_list|(
name|hri
argument_list|,
name|sn
argument_list|,
name|seqNum
argument_list|)
return|;
block|}
specifier|private
name|RegionLocations
name|hrll
parameter_list|(
name|HRegionLocation
modifier|...
name|locations
parameter_list|)
block|{
return|return
operator|new
name|RegionLocations
argument_list|(
name|locations
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveByServer
parameter_list|()
block|{
name|RegionLocations
name|list
decl_stmt|;
comment|// test remove from empty list
name|list
operator|=
operator|new
name|RegionLocations
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|==
name|list
operator|.
name|removeByServer
argument_list|(
name|sn0
argument_list|)
argument_list|)
expr_stmt|;
comment|// test remove from single element list
name|list
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|==
name|list
operator|.
name|removeByServer
argument_list|(
name|sn1
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|list
operator|.
name|removeByServer
argument_list|(
name|sn0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|numNonNullElements
argument_list|()
argument_list|)
expr_stmt|;
comment|// test remove from multi element list
name|list
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn0
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn1
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info2
argument_list|,
name|sn2
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info9
argument_list|,
name|sn2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|==
name|list
operator|.
name|removeByServer
argument_list|(
name|sn3
argument_list|)
argument_list|)
expr_stmt|;
comment|// no region is mapped to sn3
name|list
operator|=
name|list
operator|.
name|removeByServer
argument_list|(
name|sn0
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn1
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn2
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|2
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn2
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|9
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test multi-element remove from multi element list
name|list
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn1
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn1
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info2
argument_list|,
name|sn0
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info9
argument_list|,
name|sn0
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|list
operator|.
name|removeByServer
argument_list|(
name|sn0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn1
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn1
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove
parameter_list|()
block|{
name|RegionLocations
name|list
decl_stmt|;
comment|// test remove from empty list
name|list
operator|=
operator|new
name|RegionLocations
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|==
name|list
operator|.
name|remove
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test remove from single element list
name|list
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|==
name|list
operator|.
name|remove
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|list
operator|.
name|remove
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// test remove from multi element list
name|list
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn0
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn1
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info2
argument_list|,
name|sn2
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info9
argument_list|,
name|sn2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|==
name|list
operator|.
name|remove
argument_list|(
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// no region is mapped to sn3
name|list
operator|=
name|list
operator|.
name|remove
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn1
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn2
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|2
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn2
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|9
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
name|list
operator|.
name|remove
argument_list|(
name|hrl
argument_list|(
name|info9
argument_list|,
name|sn2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn1
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn2
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|2
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
comment|// test multi-element remove from multi element list
name|list
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn1
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn1
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info2
argument_list|,
name|sn0
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info9
argument_list|,
name|sn0
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|list
operator|.
name|remove
argument_list|(
name|hrl
argument_list|(
name|info9
argument_list|,
name|sn0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn1
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn1
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn0
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|2
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateLocation
parameter_list|()
block|{
name|RegionLocations
name|list
decl_stmt|;
comment|// test add to empty list
name|list
operator|=
operator|new
name|RegionLocations
argument_list|()
expr_stmt|;
name|list
operator|=
name|list
operator|.
name|updateLocation
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn1
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn1
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test add to non-empty list
name|list
operator|=
name|list
operator|.
name|updateLocation
argument_list|(
name|hrl
argument_list|(
name|info9
argument_list|,
name|sn3
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn3
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|9
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
name|list
operator|.
name|updateLocation
argument_list|(
name|hrl
argument_list|(
name|info2
argument_list|,
name|sn2
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn2
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|2
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test update greater SeqNum
name|list
operator|=
name|list
operator|.
name|updateLocation
argument_list|(
name|hrl
argument_list|(
name|info2
argument_list|,
name|sn3
argument_list|,
literal|11
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn3
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|2
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn3
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|9
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test update equal SeqNum
name|list
operator|=
name|list
operator|.
name|updateLocation
argument_list|(
name|hrl
argument_list|(
name|info2
argument_list|,
name|sn1
argument_list|,
literal|11
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// should not update
name|assertEquals
argument_list|(
name|sn3
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|2
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn3
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|9
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
name|list
operator|.
name|updateLocation
argument_list|(
name|hrl
argument_list|(
name|info2
argument_list|,
name|sn1
argument_list|,
literal|11
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// should update
name|assertEquals
argument_list|(
name|sn1
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|2
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn3
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|9
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test force update
name|list
operator|=
name|list
operator|.
name|updateLocation
argument_list|(
name|hrl
argument_list|(
name|info2
argument_list|,
name|sn2
argument_list|,
literal|9
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// should update
name|assertEquals
argument_list|(
name|sn2
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|2
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn3
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|9
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeLocations
parameter_list|()
block|{
name|RegionLocations
name|list1
decl_stmt|,
name|list2
decl_stmt|;
comment|// test merge empty lists
name|list1
operator|=
operator|new
name|RegionLocations
argument_list|()
expr_stmt|;
name|list2
operator|=
operator|new
name|RegionLocations
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|list1
operator|==
name|list1
operator|.
name|mergeLocations
argument_list|(
name|list2
argument_list|)
argument_list|)
expr_stmt|;
comment|// test merge non-empty and empty
name|list2
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn0
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|=
name|list1
operator|.
name|mergeLocations
argument_list|(
name|list2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn0
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test merge empty and non empty
name|list1
operator|=
name|hrll
argument_list|()
expr_stmt|;
name|list1
operator|=
name|list2
operator|.
name|mergeLocations
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn0
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test merge non intersecting
name|list1
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn0
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn1
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info2
argument_list|,
name|sn2
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|=
name|list2
operator|.
name|mergeLocations
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn0
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn1
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// the size is taken from the argument list to merge
comment|// do the other way merge as well
name|list1
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn0
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn1
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info2
argument_list|,
name|sn2
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|=
name|list1
operator|.
name|mergeLocations
argument_list|(
name|list2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn0
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn1
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn2
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|2
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test intersecting lists same seqNum
name|list1
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn0
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn1
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn2
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn2
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info9
argument_list|,
name|sn3
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|=
name|list2
operator|.
name|mergeLocations
argument_list|(
name|list1
argument_list|)
expr_stmt|;
comment|// list1 should override
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn0
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn1
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// do the other way
name|list1
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn0
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn1
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn2
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn2
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info9
argument_list|,
name|sn3
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|=
name|list1
operator|.
name|mergeLocations
argument_list|(
name|list2
argument_list|)
expr_stmt|;
comment|// list2 should override
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|list1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn2
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn2
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn3
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|9
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test intersecting lists different seqNum
name|list1
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn0
argument_list|,
literal|10
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn2
argument_list|,
literal|11
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn2
argument_list|,
literal|11
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info9
argument_list|,
name|sn3
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|=
name|list1
operator|.
name|mergeLocations
argument_list|(
name|list2
argument_list|)
expr_stmt|;
comment|// list2 should override because of seqNum
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|list1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn2
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn2
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn3
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|9
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// do the other way
name|list1
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn0
argument_list|,
literal|10
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn2
argument_list|,
literal|11
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn2
argument_list|,
literal|11
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info9
argument_list|,
name|sn3
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|=
name|list1
operator|.
name|mergeLocations
argument_list|(
name|list2
argument_list|)
expr_stmt|;
comment|// list2 should override
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|list1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn2
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn2
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn3
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|9
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeLocationsWithDifferentRegionId
parameter_list|()
block|{
name|RegionLocations
name|list1
decl_stmt|,
name|list2
decl_stmt|;
comment|// test merging two lists. But the list2 contains region replicas with a different region id
name|HRegionInfo
name|info0
init|=
name|hri
argument_list|(
name|regionId1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|HRegionInfo
name|info1
init|=
name|hri
argument_list|(
name|regionId1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|HRegionInfo
name|info2
init|=
name|hri
argument_list|(
name|regionId2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|list1
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info2
argument_list|,
name|sn1
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn2
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn2
argument_list|)
argument_list|)
expr_stmt|;
name|list1
operator|=
name|list2
operator|.
name|mergeLocations
argument_list|(
name|list1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn1
argument_list|,
name|list1
operator|.
name|getRegionLocation
argument_list|(
literal|2
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|list1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// try the other way merge
name|list1
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info2
argument_list|,
name|sn1
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|=
name|hrll
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn2
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn2
argument_list|)
argument_list|)
expr_stmt|;
name|list2
operator|=
name|list1
operator|.
name|mergeLocations
argument_list|(
name|list2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|list2
operator|.
name|getRegionLocation
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|list2
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|list2
operator|.
name|getRegionLocation
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateLocationWithDifferentRegionId
parameter_list|()
block|{
name|RegionLocations
name|list
decl_stmt|;
name|HRegionInfo
name|info0
init|=
name|hri
argument_list|(
name|regionId1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|HRegionInfo
name|info1
init|=
name|hri
argument_list|(
name|regionId2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|HRegionInfo
name|info2
init|=
name|hri
argument_list|(
name|regionId1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|list
operator|=
operator|new
name|RegionLocations
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn1
argument_list|)
argument_list|,
name|hrl
argument_list|(
name|info2
argument_list|,
name|sn1
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
name|list
operator|.
name|updateLocation
argument_list|(
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn2
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// force update
comment|// the other locations should be removed now
name|assertNull
argument_list|(
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn2
argument_list|,
name|list
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConstructWithNullElements
parameter_list|()
block|{
comment|// RegionLocations can contain null elements as well. These null elements can
name|RegionLocations
name|list
init|=
operator|new
name|RegionLocations
argument_list|(
operator|(
name|HRegionLocation
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|numNonNullElements
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|RegionLocations
argument_list|(
literal|null
argument_list|,
name|hrl
argument_list|(
name|info1
argument_list|,
name|sn0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|numNonNullElements
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|RegionLocations
argument_list|(
name|hrl
argument_list|(
name|info0
argument_list|,
name|sn0
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|numNonNullElements
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|RegionLocations
argument_list|(
literal|null
argument_list|,
name|hrl
argument_list|(
name|info2
argument_list|,
name|sn0
argument_list|)
argument_list|,
literal|null
argument_list|,
name|hrl
argument_list|(
name|info9
argument_list|,
name|sn0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|numNonNullElements
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|RegionLocations
argument_list|(
literal|null
argument_list|,
name|hrl
argument_list|(
name|info2
argument_list|,
name|sn0
argument_list|)
argument_list|,
literal|null
argument_list|,
name|hrl
argument_list|(
name|info9
argument_list|,
name|sn0
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|numNonNullElements
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|RegionLocations
argument_list|(
literal|null
argument_list|,
name|hrl
argument_list|(
name|info2
argument_list|,
name|sn0
argument_list|)
argument_list|,
literal|null
argument_list|,
name|hrl
argument_list|(
name|info9
argument_list|,
name|sn0
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|numNonNullElements
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

