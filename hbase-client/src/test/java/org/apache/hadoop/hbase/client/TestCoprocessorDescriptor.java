begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestCoprocessorDescriptor
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestCoprocessorDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCoprocessorDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testBuild
parameter_list|()
block|{
name|String
name|className
init|=
literal|"className"
decl_stmt|;
name|String
name|path
init|=
literal|"path"
decl_stmt|;
name|int
name|priority
init|=
literal|100
decl_stmt|;
name|String
name|propertyKey
init|=
literal|"propertyKey"
decl_stmt|;
name|String
name|propertyValue
init|=
literal|"propertyValue"
decl_stmt|;
name|CoprocessorDescriptor
name|cp
init|=
name|CoprocessorDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|className
argument_list|)
operator|.
name|setJarPath
argument_list|(
name|path
argument_list|)
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
operator|.
name|setProperty
argument_list|(
name|propertyKey
argument_list|,
name|propertyValue
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|className
argument_list|,
name|cp
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|cp
operator|.
name|getJarPath
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|priority
argument_list|,
name|cp
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cp
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|propertyValue
argument_list|,
name|cp
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|propertyKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetCoprocessor
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|propertyKey
init|=
literal|"propertyKey"
decl_stmt|;
name|List
argument_list|<
name|CoprocessorDescriptor
argument_list|>
name|cps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|className
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"className0"
argument_list|,
literal|"className1"
argument_list|,
literal|"className2"
argument_list|)
control|)
block|{
name|String
name|path
init|=
literal|"path"
decl_stmt|;
name|int
name|priority
init|=
name|Math
operator|.
name|abs
argument_list|(
name|className
operator|.
name|hashCode
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|propertyValue
init|=
literal|"propertyValue"
decl_stmt|;
name|cps
operator|.
name|add
argument_list|(
name|CoprocessorDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|className
argument_list|)
operator|.
name|setJarPath
argument_list|(
name|path
argument_list|)
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
operator|.
name|setProperty
argument_list|(
name|propertyKey
argument_list|,
name|propertyValue
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TableDescriptor
name|tableDescriptor
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCoprocessors
argument_list|(
name|cps
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|CoprocessorDescriptor
name|cp
range|:
name|cps
control|)
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CoprocessorDescriptor
name|that
range|:
name|tableDescriptor
operator|.
name|getCoprocessorDescriptors
argument_list|()
control|)
block|{
if|if
condition|(
name|cp
operator|.
name|getClassName
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|cp
operator|.
name|getJarPath
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|that
operator|.
name|getJarPath
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cp
operator|.
name|getPriority
argument_list|()
argument_list|,
name|that
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cp
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|that
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cp
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|propertyKey
argument_list|)
argument_list|,
name|that
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|propertyKey
argument_list|)
argument_list|)
expr_stmt|;
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
name|fail
argument_list|(
literal|"expect:"
operator|+
name|cp
operator|+
literal|", actual:"
operator|+
name|tableDescriptor
operator|.
name|getCoprocessorDescriptors
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

