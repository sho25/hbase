begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|BuilderStyleTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestReplicationPeerConfig
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestReplicationPeerConfig
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|TableName
name|TABLE_A
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"replication"
argument_list|,
literal|"testA"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|TableName
name|TABLE_B
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"replication"
argument_list|,
literal|"testB"
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testClassMethodsAreBuilderStyle
parameter_list|()
block|{
comment|/* ReplicationPeerConfig should have a builder style setup where setXXX/addXXX methods      * can be chainable together:      * . For example:      * ReplicationPeerConfig htd      *   = new ReplicationPeerConfig()      *     .setFoo(foo)      *     .setBar(bar)      *     .setBuz(buz)      *      * This test ensures that all methods starting with "set" returns the declaring object      */
name|BuilderStyleTest
operator|.
name|assertClassesAreBuilderStyle
argument_list|(
name|ReplicationPeerConfig
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNeedToReplicateWithReplicatingAll
parameter_list|()
block|{
name|ReplicationPeerConfig
name|peerConfig
decl_stmt|;
name|ReplicationPeerConfig
operator|.
name|ReplicationPeerConfigBuilderImpl
name|builder
init|=
operator|new
name|ReplicationPeerConfig
operator|.
name|ReplicationPeerConfigBuilderImpl
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// 1. replication_all flag is true, no namespaces and table-cfs config
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2. replicate_all flag is true, and config in excludedTableCfs
name|builder
operator|.
name|setExcludeNamespaces
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// empty map
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExcludeTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
comment|// table testB
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TABLE_B
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExcludeTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
comment|// table testA
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TABLE_A
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExcludeTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3. replicate_all flag is true, and config in excludeNamespaces
name|builder
operator|.
name|setExcludeTableCFsMap
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// empty set
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExcludeNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
comment|// namespace default
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExcludeNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
comment|// namespace replication
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
literal|"replication"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExcludeNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4. replicate_all flag is true, and config excludeNamespaces and excludedTableCfs both
comment|// Namespaces config doesn't conflict with table-cfs config
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
literal|"replication"
argument_list|)
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TABLE_A
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExcludeTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExcludeNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
comment|// Namespaces config conflicts with table-cfs config
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TABLE_A
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExcludeTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExcludeNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
literal|"replication"
argument_list|)
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TABLE_B
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExcludeTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setExcludeNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNeedToReplicateWithoutReplicatingAll
parameter_list|()
block|{
name|ReplicationPeerConfig
name|peerConfig
decl_stmt|;
name|ReplicationPeerConfig
operator|.
name|ReplicationPeerConfigBuilderImpl
name|builder
init|=
operator|new
name|ReplicationPeerConfig
operator|.
name|ReplicationPeerConfigBuilderImpl
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// 1. replication_all flag is false, no namespaces and table-cfs config
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2. replicate_all flag is false, and only config table-cfs in peer
comment|// empty map
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
comment|// table testB
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TABLE_B
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
comment|// table testA
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TABLE_A
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3. replication_all flag is false, and only config namespace in peer
name|builder
operator|.
name|setTableCFsMap
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// empty set
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
comment|// namespace default
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
comment|// namespace replication
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
literal|"replication"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4. replicate_all flag is false, and config namespaces and table-cfs both
comment|// Namespaces config doesn't conflict with table-cfs config
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
literal|"replication"
argument_list|)
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TABLE_A
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
comment|// Namespaces config conflicts with table-cfs config
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TABLE_A
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
literal|"replication"
argument_list|)
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TABLE_B
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|peerConfig
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|peerConfig
operator|.
name|needToReplicate
argument_list|(
name|TABLE_A
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

