begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestInterfaceAlign
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestInterfaceAlign
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Test methods name match up    */
annotation|@
name|Test
specifier|public
name|void
name|testAdminWithAsyncAdmin
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|adminMethodNames
init|=
name|getMethodNames
argument_list|(
name|Admin
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|asyncAdminMethodNames
init|=
name|getMethodNames
argument_list|(
name|AsyncAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Remove some special methods
name|adminMethodNames
operator|.
name|remove
argument_list|(
literal|"getOperationTimeout"
argument_list|)
expr_stmt|;
name|adminMethodNames
operator|.
name|remove
argument_list|(
literal|"getSyncWaitTimeout"
argument_list|)
expr_stmt|;
name|adminMethodNames
operator|.
name|remove
argument_list|(
literal|"getConnection"
argument_list|)
expr_stmt|;
name|adminMethodNames
operator|.
name|remove
argument_list|(
literal|"getConfiguration"
argument_list|)
expr_stmt|;
name|adminMethodNames
operator|.
name|removeAll
argument_list|(
name|getMethodNames
argument_list|(
name|Abortable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|adminMethodNames
operator|.
name|removeAll
argument_list|(
name|getMethodNames
argument_list|(
name|Closeable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|adminMethodNames
operator|.
name|forEach
argument_list|(
name|method
lambda|->
block|{
name|boolean
name|contains
init|=
name|asyncAdminMethodNames
operator|.
name|contains
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|endsWith
argument_list|(
literal|"Async"
argument_list|)
condition|)
block|{
name|contains
operator|=
name|asyncAdminMethodNames
operator|.
name|contains
argument_list|(
name|method
operator|.
name|replace
argument_list|(
literal|"Async"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Admin method "
operator|+
name|method
operator|+
literal|" should in AsyncAdmin too"
argument_list|,
name|contains
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|asyncAdminMethodNames
operator|.
name|forEach
argument_list|(
name|method
lambda|->
block|{
name|boolean
name|contains
init|=
name|adminMethodNames
operator|.
name|contains
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|contains
condition|)
block|{
name|contains
operator|=
name|adminMethodNames
operator|.
name|contains
argument_list|(
name|method
operator|+
literal|"Async"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"AsyncAdmin method "
operator|+
name|method
operator|+
literal|" should in Admin too"
argument_list|,
name|contains
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|String
argument_list|>
name|getMethodNames
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
block|{
comment|// DON'T use the getDeclaredMethods as we want to check the Public APIs only.
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|c
operator|.
name|getMethods
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|m
lambda|->
operator|!
name|isDeprecated
argument_list|(
name|m
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|m
lambda|->
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Method
operator|::
name|getName
argument_list|)
operator|.
name|distinct
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isDeprecated
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|Annotation
index|[]
name|annotations
init|=
name|method
operator|.
name|getDeclaredAnnotations
argument_list|()
decl_stmt|;
for|for
control|(
name|Annotation
name|annotation
range|:
name|annotations
control|)
block|{
if|if
condition|(
name|annotation
operator|instanceof
name|Deprecated
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

