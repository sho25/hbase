begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRowComparator
block|{
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|DEFAULT_ROWS
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|1
argument_list|,
literal|9
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|String
operator|::
name|valueOf
argument_list|)
operator|.
name|map
argument_list|(
name|Bytes
operator|::
name|toBytes
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testPut
parameter_list|()
block|{
name|test
argument_list|(
name|row
lambda|->
operator|new
name|Put
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDelete
parameter_list|()
block|{
name|test
argument_list|(
name|row
lambda|->
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppend
parameter_list|()
block|{
name|test
argument_list|(
name|row
lambda|->
operator|new
name|Append
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrement
parameter_list|()
block|{
name|test
argument_list|(
name|row
lambda|->
operator|new
name|Increment
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|test
argument_list|(
name|row
lambda|->
operator|new
name|Get
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Row
parameter_list|>
name|void
name|test
parameter_list|(
name|Function
argument_list|<
name|byte
index|[]
argument_list|,
name|T
argument_list|>
name|f
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|DEFAULT_ROWS
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|f
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
do|do
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|rows
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|needShuffle
argument_list|(
name|rows
argument_list|)
condition|)
do|;
name|Collections
operator|.
name|sort
argument_list|(
name|rows
argument_list|,
name|Row
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|assertSort
argument_list|(
name|rows
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|needShuffle
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|rows
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|rows
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_ROWS
operator|.
name|size
argument_list|()
argument_list|,
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|DEFAULT_ROWS
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|DEFAULT_ROWS
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|rows
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|void
name|assertSort
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|rows
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|rows
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_ROWS
operator|.
name|size
argument_list|()
argument_list|,
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|DEFAULT_ROWS
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|DEFAULT_ROWS
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|rows
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

