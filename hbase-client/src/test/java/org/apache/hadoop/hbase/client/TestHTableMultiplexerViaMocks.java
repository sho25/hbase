begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTableMultiplexer
operator|.
name|FlushWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTableMultiplexer
operator|.
name|PutStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doCallRealMethod
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHTableMultiplexerViaMocks
block|{
specifier|private
specifier|static
specifier|final
name|int
name|NUM_RETRIES
init|=
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_RETRIES_NUMBER
decl_stmt|;
specifier|private
name|HTableMultiplexer
name|mockMultiplexer
decl_stmt|;
specifier|private
name|ClusterConnection
name|mockConnection
decl_stmt|;
specifier|private
name|HRegionLocation
name|mockRegionLocation
decl_stmt|;
specifier|private
name|HRegionInfo
name|mockRegionInfo
decl_stmt|;
specifier|private
name|TableName
name|tableName
decl_stmt|;
specifier|private
name|Put
name|put
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setupTest
parameter_list|()
block|{
name|mockMultiplexer
operator|=
name|mock
argument_list|(
name|HTableMultiplexer
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockConnection
operator|=
name|mock
argument_list|(
name|ClusterConnection
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockRegionLocation
operator|=
name|mock
argument_list|(
name|HRegionLocation
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockRegionInfo
operator|=
name|mock
argument_list|(
name|HRegionInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"my_table"
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|getBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|getBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"v11"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|getBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"q2"
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"v12"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|getBytes
argument_list|(
literal|"f2"
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|getBytes
argument_list|(
literal|"v21"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Call the real put(TableName, Put, int) method
name|when
argument_list|(
name|mockMultiplexer
operator|.
name|put
argument_list|(
name|any
argument_list|(
name|TableName
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Put
operator|.
name|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
comment|// Return the mocked ClusterConnection
name|when
argument_list|(
name|mockMultiplexer
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockConnection
argument_list|)
expr_stmt|;
comment|// Return the regionInfo from the region location
name|when
argument_list|(
name|mockRegionLocation
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockRegionInfo
argument_list|)
expr_stmt|;
comment|// Make sure this RegionInfo points to our table
name|when
argument_list|(
name|mockRegionInfo
operator|.
name|getTable
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|useCacheOnInitialPut
parameter_list|()
throws|throws
name|Exception
block|{
name|mockMultiplexer
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|put
argument_list|,
name|NUM_RETRIES
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockMultiplexer
argument_list|)
operator|.
name|_put
argument_list|(
name|tableName
argument_list|,
name|put
argument_list|,
name|NUM_RETRIES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonNullLocationQueuesPut
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|LinkedBlockingQueue
argument_list|<
name|PutStatus
argument_list|>
name|queue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Call the real method for _put(TableName, Put, int, boolean)
name|when
argument_list|(
name|mockMultiplexer
operator|.
name|_put
argument_list|(
name|any
argument_list|(
name|TableName
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Put
operator|.
name|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
comment|// Return a region location
name|when
argument_list|(
name|mockConnection
operator|.
name|getRegionLocation
argument_list|(
name|tableName
argument_list|,
name|put
operator|.
name|getRow
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockRegionLocation
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockMultiplexer
operator|.
name|getQueue
argument_list|(
name|mockRegionLocation
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Put should have been queued"
argument_list|,
name|mockMultiplexer
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|put
argument_list|,
name|NUM_RETRIES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|PutStatus
name|ps
init|=
name|queue
operator|.
name|take
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|put
argument_list|,
name|ps
operator|.
name|put
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mockRegionInfo
argument_list|,
name|ps
operator|.
name|regionInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ignoreCacheOnRetriedPut
parameter_list|()
throws|throws
name|Exception
block|{
name|FlushWorker
name|mockFlushWorker
init|=
name|mock
argument_list|(
name|FlushWorker
operator|.
name|class
argument_list|)
decl_stmt|;
name|ScheduledExecutorService
name|mockExecutor
init|=
name|mock
argument_list|(
name|ScheduledExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|retryInQueue
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|totalFailedPuts
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxRetryInQueue
init|=
literal|20
decl_stmt|;
specifier|final
name|long
name|delay
init|=
literal|100L
decl_stmt|;
specifier|final
name|PutStatus
name|ps
init|=
operator|new
name|PutStatus
argument_list|(
name|mockRegionInfo
argument_list|,
name|put
argument_list|,
name|NUM_RETRIES
argument_list|)
decl_stmt|;
comment|// Call the real resubmitFailedPut(PutStatus, HRegionLocation) method
name|when
argument_list|(
name|mockFlushWorker
operator|.
name|resubmitFailedPut
argument_list|(
name|any
argument_list|(
name|PutStatus
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|HRegionLocation
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
comment|// Succeed on the re-submit without caching
name|when
argument_list|(
name|mockMultiplexer
operator|.
name|_put
argument_list|(
name|tableName
argument_list|,
name|put
argument_list|,
name|NUM_RETRIES
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Stub out the getters for resubmitFailedPut(PutStatus, HRegionLocation)
name|when
argument_list|(
name|mockFlushWorker
operator|.
name|getExecutor
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockExecutor
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFlushWorker
operator|.
name|getNextDelay
argument_list|(
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFlushWorker
operator|.
name|getMultiplexer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockMultiplexer
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFlushWorker
operator|.
name|getRetryInQueue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|retryInQueue
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFlushWorker
operator|.
name|getMaxRetryInQueue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|maxRetryInQueue
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFlushWorker
operator|.
name|getTotalFailedPutCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|totalFailedPuts
argument_list|)
expr_stmt|;
comment|// When a Runnable is scheduled, run that Runnable
name|when
argument_list|(
name|mockExecutor
operator|.
name|schedule
argument_list|(
name|any
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|delay
argument_list|)
argument_list|,
name|eq
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Before we run this, should have one retry in progress.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|retryInQueue
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|args
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Argument should be an instance of Runnable"
argument_list|,
name|args
index|[
literal|0
index|]
operator|instanceof
name|Runnable
argument_list|)
expr_stmt|;
name|Runnable
name|runnable
init|=
operator|(
name|Runnable
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The put should be rescheduled
name|assertTrue
argument_list|(
literal|"Put should have been rescheduled"
argument_list|,
name|mockFlushWorker
operator|.
name|resubmitFailedPut
argument_list|(
name|ps
argument_list|,
name|mockRegionLocation
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockMultiplexer
argument_list|)
operator|.
name|_put
argument_list|(
name|tableName
argument_list|,
name|put
argument_list|,
name|NUM_RETRIES
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|totalFailedPuts
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Net result should be zero (added one before rerunning, subtracted one after running).
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|retryInQueue
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testConnectionClosing
parameter_list|()
throws|throws
name|IOException
block|{
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|mockMultiplexer
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// If the connection is not closed
name|when
argument_list|(
name|mockConnection
operator|.
name|isClosed
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mockMultiplexer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// We should close it
name|verify
argument_list|(
name|mockConnection
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testClosingAlreadyClosedConnection
parameter_list|()
throws|throws
name|IOException
block|{
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|mockMultiplexer
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// If the connection is already closed
name|when
argument_list|(
name|mockConnection
operator|.
name|isClosed
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mockMultiplexer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// We should not close it again
name|verify
argument_list|(
name|mockConnection
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return UTF-8 byte representation for {@code str}    */
specifier|private
specifier|static
name|byte
index|[]
name|getBytes
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
return|;
block|}
block|}
end_class

end_unit

