begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SmallTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestConnectionId
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestConnectionId
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|testConfig
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
name|User
name|testUser1
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|testConfig
argument_list|,
literal|"test"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"testgroup"
block|}
argument_list|)
decl_stmt|;
specifier|private
name|User
name|testUser2
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|testConfig
argument_list|,
literal|"test"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"testgroup"
block|}
argument_list|)
decl_stmt|;
specifier|private
name|String
name|serviceName
init|=
literal|"test"
decl_stmt|;
specifier|private
name|InetSocketAddress
name|address
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|999
argument_list|)
decl_stmt|;
specifier|private
name|ConnectionId
name|connectionId1
init|=
operator|new
name|ConnectionId
argument_list|(
name|testUser1
argument_list|,
name|serviceName
argument_list|,
name|address
argument_list|)
decl_stmt|;
specifier|private
name|ConnectionId
name|connectionId2
init|=
operator|new
name|ConnectionId
argument_list|(
name|testUser2
argument_list|,
name|serviceName
argument_list|,
name|address
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testGetServiceName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|connectionId1
operator|.
name|getServiceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAddress
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|address
argument_list|,
name|connectionId1
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|address
argument_list|,
name|connectionId2
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTicket
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|testUser1
argument_list|,
name|connectionId1
operator|.
name|getTicket
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|testUser2
argument_list|,
name|connectionId1
operator|.
name|getTicket
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|String
name|expectedString
init|=
literal|"0.0.0.0/0.0.0.0:999/test/test (auth:SIMPLE)"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedString
argument_list|,
name|connectionId1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if the over-ridden equals method satisfies all the properties    * (reflexive, symmetry, transitive and null)    * along with their hashcode    */
annotation|@
name|Test
specifier|public
name|void
name|testEqualsWithHashCode
parameter_list|()
block|{
comment|// Test the Reflexive Property
name|assertTrue
argument_list|(
name|connectionId1
operator|.
name|equals
argument_list|(
name|connectionId1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test the Symmetry Property
name|ConnectionId
name|connectionId
init|=
operator|new
name|ConnectionId
argument_list|(
name|testUser1
argument_list|,
name|serviceName
argument_list|,
name|address
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|connectionId
operator|.
name|equals
argument_list|(
name|connectionId1
argument_list|)
operator|&&
name|connectionId1
operator|.
name|equals
argument_list|(
name|connectionId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|connectionId
operator|.
name|hashCode
argument_list|()
argument_list|,
name|connectionId1
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test the Transitive Property
name|ConnectionId
name|connectionId3
init|=
operator|new
name|ConnectionId
argument_list|(
name|testUser1
argument_list|,
name|serviceName
argument_list|,
name|address
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|connectionId1
operator|.
name|equals
argument_list|(
name|connectionId
argument_list|)
operator|&&
name|connectionId
operator|.
name|equals
argument_list|(
name|connectionId3
argument_list|)
operator|&&
name|connectionId1
operator|.
name|equals
argument_list|(
name|connectionId3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|connectionId
operator|.
name|hashCode
argument_list|()
argument_list|,
name|connectionId3
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test For null
name|assertFalse
argument_list|(
name|connectionId1
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test different instances of same class
name|assertFalse
argument_list|(
name|connectionId1
operator|.
name|equals
argument_list|(
name|connectionId2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the hashcode for same object and different object with both hashcode    * function and static hashcode function    */
annotation|@
name|Test
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
name|int
name|testHashCode
init|=
name|connectionId1
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|int
name|expectedHashCode
init|=
name|ConnectionId
operator|.
name|hashCode
argument_list|(
name|testUser1
argument_list|,
name|serviceName
argument_list|,
name|address
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedHashCode
argument_list|,
name|testHashCode
argument_list|)
expr_stmt|;
comment|// Make sure two objects are not same and test for hashcode
name|assertNotEquals
argument_list|(
name|connectionId1
argument_list|,
name|connectionId2
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|connectionId1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|connectionId2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

