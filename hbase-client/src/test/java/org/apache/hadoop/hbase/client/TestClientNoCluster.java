begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|HBaseZeroCopyByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|NotImplementedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionTooBusyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|BulkLoadHFileRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|BulkLoadHFileResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ClientService
operator|.
name|BlockingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MultiRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MultiResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|RegionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|RegionActionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ResultOrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerStoppedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * Test client behavior w/o setting up a cluster.  * Mock up cluster emissions.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestClientNoCluster
extends|extends
name|Configured
implements|implements
name|Tool
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestClientNoCluster
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ServerName
name|META_SERVERNAME
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"meta.example.org"
argument_list|,
literal|16010
argument_list|,
literal|12345
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// Run my HConnection overrides.  Use my little HConnectionImplementation below which
comment|// allows me insert mocks and also use my Registry below rather than the default zk based
comment|// one so tests run faster and don't have zk dependency.
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.client.registry.impl"
argument_list|,
name|SimpleRegistry
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Simple cluster registry inserted in place of our usual zookeeper based one.    */
specifier|static
class|class
name|SimpleRegistry
implements|implements
name|Registry
block|{
specifier|final
name|ServerName
name|META_HOST
init|=
name|META_SERVERNAME
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|HConnection
name|connection
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|RegionLocations
name|getMetaRegionLocation
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|RegionLocations
argument_list|(
operator|new
name|HRegionLocation
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
name|META_HOST
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getClusterId
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|CLUSTER_ID_DEFAULT
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTableOnlineState
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|boolean
name|enabled
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|enabled
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCurrentNrHRS
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|1
return|;
block|}
block|}
comment|/**    * Remove the @Ignore to try out timeout and retry asettings    * @throws IOException    */
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testTimeoutAndRetries
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|localConfig
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// This override mocks up our exists/get call to throw a RegionServerStoppedException.
name|localConfig
operator|.
name|set
argument_list|(
literal|"hbase.client.connection.impl"
argument_list|,
name|RpcTimeoutConnection
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|localConfig
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|Throwable
name|t
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Start"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// An exists call turns into a get w/ a flag.
name|table
operator|.
name|exists
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
comment|// I expect this exception.
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|t
operator|=
name|e
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
comment|// This is the old, unwanted behavior.  If we get here FAIL!!!
name|fail
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Stop"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that operation timeout prevails over rpc default timeout and retries, etc.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testRocTimeout
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|localConfig
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// This override mocks up our exists/get call to throw a RegionServerStoppedException.
name|localConfig
operator|.
name|set
argument_list|(
literal|"hbase.client.connection.impl"
argument_list|,
name|RpcTimeoutConnection
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|pause
init|=
literal|10
decl_stmt|;
name|localConfig
operator|.
name|setInt
argument_list|(
literal|"hbase.client.pause"
argument_list|,
name|pause
argument_list|)
expr_stmt|;
name|localConfig
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Set the operation timeout to be< the pause.  Expectation is that after first pause, we will
comment|// fail out of the rpc because the rpc timeout will have been set to the operation tiemout
comment|// and it has expired.  Otherwise, if this functionality is broke, all retries will be run --
comment|// all ten of them -- and we'll get the RetriesExhaustedException exception.
name|localConfig
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_META_OPERATION_TIMEOUT
argument_list|,
name|pause
operator|-
literal|1
argument_list|)
expr_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|localConfig
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|Throwable
name|t
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// An exists call turns into a get w/ a flag.
name|table
operator|.
name|exists
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
comment|// I expect this exception.
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|t
operator|=
name|e
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
comment|// This is the old, unwanted behavior.  If we get here FAIL!!!
name|fail
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|t
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoNotRetryMetaScanner
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.client.connection.impl"
argument_list|,
name|RegionServerStoppedOnScannerOpenConnection
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|this
operator|.
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoNotRetryOnScanNext
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.client.connection.impl"
argument_list|,
name|RegionServerStoppedOnScannerOpenConnection
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Go against meta else we will try to find first region for the table on construction which
comment|// means we'll have to do a bunch more mocking.  Tests that go against meta only should be
comment|// good for a bit of testing.
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
name|result
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionServerStoppedOnScannerOpen
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.client.connection.impl"
argument_list|,
name|RegionServerStoppedOnScannerOpenConnection
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Go against meta else we will try to find first region for the table on construction which
comment|// means we'll have to do a bunch more mocking.  Tests that go against meta only should be
comment|// good for a bit of testing.
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
name|result
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Override to shutdown going to zookeeper for cluster id and meta location.    */
specifier|static
class|class
name|ScanOpenNextThenExceptionThenRecoverConnection
extends|extends
name|ConnectionManager
operator|.
name|HConnectionImplementation
block|{
specifier|final
name|ClientService
operator|.
name|BlockingInterface
name|stub
decl_stmt|;
name|ScanOpenNextThenExceptionThenRecoverConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|managed
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|managed
argument_list|)
expr_stmt|;
comment|// Mock up my stub so open scanner returns a scanner id and then on next, we throw
comment|// exceptions for three times and then after that, we return no more to scan.
name|this
operator|.
name|stub
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ClientService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
expr_stmt|;
name|long
name|sid
init|=
literal|12345L
decl_stmt|;
try|try
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|stub
operator|.
name|scan
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|ClientProtos
operator|.
name|ScanRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ClientProtos
operator|.
name|ScanResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setScannerId
argument_list|(
name|sid
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|ServiceException
argument_list|(
operator|new
name|RegionServerStoppedException
argument_list|(
literal|"From Mockito"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ClientProtos
operator|.
name|ScanResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setScannerId
argument_list|(
name|sid
argument_list|)
operator|.
name|setMoreResults
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BlockingInterface
name|getClient
parameter_list|(
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|stub
return|;
block|}
block|}
comment|/**    * Override to shutdown going to zookeeper for cluster id and meta location.    */
specifier|static
class|class
name|RegionServerStoppedOnScannerOpenConnection
extends|extends
name|ConnectionManager
operator|.
name|HConnectionImplementation
block|{
specifier|final
name|ClientService
operator|.
name|BlockingInterface
name|stub
decl_stmt|;
name|RegionServerStoppedOnScannerOpenConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|managed
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|managed
argument_list|)
expr_stmt|;
comment|// Mock up my stub so open scanner returns a scanner id and then on next, we throw
comment|// exceptions for three times and then after that, we return no more to scan.
name|this
operator|.
name|stub
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ClientService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
expr_stmt|;
name|long
name|sid
init|=
literal|12345L
decl_stmt|;
try|try
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|stub
operator|.
name|scan
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|ClientProtos
operator|.
name|ScanRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ClientProtos
operator|.
name|ScanResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setScannerId
argument_list|(
name|sid
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|ServiceException
argument_list|(
operator|new
name|RegionServerStoppedException
argument_list|(
literal|"From Mockito"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ClientProtos
operator|.
name|ScanResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setScannerId
argument_list|(
name|sid
argument_list|)
operator|.
name|setMoreResults
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BlockingInterface
name|getClient
parameter_list|(
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|stub
return|;
block|}
block|}
comment|/**    * Override to check we are setting rpc timeout right.    */
specifier|static
class|class
name|RpcTimeoutConnection
extends|extends
name|ConnectionManager
operator|.
name|HConnectionImplementation
block|{
specifier|final
name|ClientService
operator|.
name|BlockingInterface
name|stub
decl_stmt|;
name|RpcTimeoutConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|managed
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|managed
argument_list|)
expr_stmt|;
comment|// Mock up my stub so an exists call -- which turns into a get -- throws an exception
name|this
operator|.
name|stub
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ClientService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|stub
operator|.
name|get
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|ClientProtos
operator|.
name|GetRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|ServiceException
argument_list|(
operator|new
name|RegionServerStoppedException
argument_list|(
literal|"From Mockito"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BlockingInterface
name|getClient
parameter_list|(
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|stub
return|;
block|}
block|}
comment|/**    * Fake many regionservers and many regions on a connection implementation.    */
specifier|static
class|class
name|ManyServersManyRegionsConnection
extends|extends
name|ConnectionManager
operator|.
name|HConnectionImplementation
block|{
comment|// All access should be synchronized
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ClientService
operator|.
name|BlockingInterface
argument_list|>
name|serversByClient
decl_stmt|;
comment|/**      * Map of faked-up rows of a 'meta table'.      */
specifier|final
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|meta
decl_stmt|;
specifier|final
name|AtomicLong
name|sequenceids
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
name|ManyServersManyRegionsConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|managed
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|managed
argument_list|,
name|pool
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|int
name|serverCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.test.servers"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|this
operator|.
name|serversByClient
operator|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|ClientService
operator|.
name|BlockingInterface
argument_list|>
argument_list|(
name|serverCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|meta
operator|=
name|makeMeta
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.test.tablename"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|BIG_USER_TABLE
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.test.regions"
argument_list|,
literal|100
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.test.namespace.span"
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|serverCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ClientService
operator|.
name|BlockingInterface
name|getClient
parameter_list|(
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if (!sn.toString().startsWith("meta")) LOG.info(sn);
name|ClientService
operator|.
name|BlockingInterface
name|stub
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|serversByClient
init|)
block|{
name|stub
operator|=
name|this
operator|.
name|serversByClient
operator|.
name|get
argument_list|(
name|sn
argument_list|)
expr_stmt|;
if|if
condition|(
name|stub
operator|==
literal|null
condition|)
block|{
name|stub
operator|=
operator|new
name|FakeServer
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|meta
argument_list|,
name|sequenceids
argument_list|)
expr_stmt|;
name|this
operator|.
name|serversByClient
operator|.
name|put
argument_list|(
name|sn
argument_list|,
name|stub
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|stub
return|;
block|}
block|}
specifier|static
name|MultiResponse
name|doMultiResponse
parameter_list|(
specifier|final
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|meta
parameter_list|,
specifier|final
name|AtomicLong
name|sequenceids
parameter_list|,
specifier|final
name|MultiRequest
name|request
parameter_list|)
block|{
comment|// Make a response to match the request.  Act like there were no failures.
name|ClientProtos
operator|.
name|MultiResponse
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|MultiResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
comment|// Per Region.
name|RegionActionResult
operator|.
name|Builder
name|regionActionResultBuilder
init|=
name|RegionActionResult
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ResultOrException
operator|.
name|Builder
name|roeBuilder
init|=
name|ResultOrException
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionAction
name|regionAction
range|:
name|request
operator|.
name|getRegionActionList
argument_list|()
control|)
block|{
name|regionActionResultBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Per Action in a Region.
for|for
control|(
name|ClientProtos
operator|.
name|Action
name|action
range|:
name|regionAction
operator|.
name|getActionList
argument_list|()
control|)
block|{
name|roeBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Return empty Result and proper index as result.
name|roeBuilder
operator|.
name|setResult
argument_list|(
name|ClientProtos
operator|.
name|Result
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
name|roeBuilder
operator|.
name|setIndex
argument_list|(
name|action
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|regionActionResultBuilder
operator|.
name|addResultOrException
argument_list|(
name|roeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addRegionActionResult
argument_list|(
name|regionActionResultBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Fake 'server'.    * Implements the ClientService responding as though it were a 'server' (presumes a new    * ClientService.BlockingInterface made per server).    */
specifier|static
class|class
name|FakeServer
implements|implements
name|ClientService
operator|.
name|BlockingInterface
block|{
specifier|private
name|AtomicInteger
name|multiInvocationsCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|meta
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|sequenceids
decl_stmt|;
specifier|private
specifier|final
name|long
name|multiPause
decl_stmt|;
specifier|private
specifier|final
name|int
name|tooManyMultiRequests
decl_stmt|;
name|FakeServer
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|meta
parameter_list|,
specifier|final
name|AtomicLong
name|sequenceids
parameter_list|)
block|{
name|this
operator|.
name|meta
operator|=
name|meta
expr_stmt|;
name|this
operator|.
name|sequenceids
operator|=
name|sequenceids
expr_stmt|;
comment|// Pause to simulate the server taking time applying the edits.  This will drive up the
comment|// number of threads used over in client.
name|this
operator|.
name|multiPause
operator|=
name|c
operator|.
name|getLong
argument_list|(
literal|"hbase.test.multi.pause.when.done"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|tooManyMultiRequests
operator|=
name|c
operator|.
name|getInt
argument_list|(
literal|"hbase.test.multi.too.many"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|GetResponse
name|get
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|boolean
name|metaRegion
init|=
name|isMetaRegion
argument_list|(
name|request
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|request
operator|.
name|getRegion
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|metaRegion
condition|)
block|{
return|return
name|doGetResponse
argument_list|(
name|request
argument_list|)
return|;
block|}
return|return
name|doMetaGetResponse
argument_list|(
name|meta
argument_list|,
name|request
argument_list|)
return|;
block|}
specifier|private
name|GetResponse
name|doGetResponse
parameter_list|(
name|GetRequest
name|request
parameter_list|)
block|{
name|ClientProtos
operator|.
name|Result
operator|.
name|Builder
name|resultBuilder
init|=
name|ClientProtos
operator|.
name|Result
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ByteString
name|row
init|=
name|request
operator|.
name|getGet
argument_list|()
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|resultBuilder
operator|.
name|addCell
argument_list|(
name|getStartCode
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|GetResponse
operator|.
name|Builder
name|builder
init|=
name|GetResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setResult
argument_list|(
name|resultBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MutateResponse
name|mutate
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MutateRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ScanResponse
name|scan
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ScanRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
comment|// Presume it is a scan of meta for now. Not all scans provide a region spec expecting
comment|// the server to keep reference by scannerid.  TODO.
return|return
name|doMetaScanResponse
argument_list|(
name|meta
argument_list|,
name|sequenceids
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BulkLoadHFileResponse
name|bulkLoadHFile
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|BulkLoadHFileRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|CoprocessorServiceResponse
name|execService
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CoprocessorServiceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|MultiResponse
name|multi
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MultiRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|int
name|concurrentInvocations
init|=
name|this
operator|.
name|multiInvocationsCount
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|concurrentInvocations
operator|>=
name|tooManyMultiRequests
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
operator|new
name|RegionTooBusyException
argument_list|(
literal|"concurrentInvocations="
operator|+
name|concurrentInvocations
argument_list|)
argument_list|)
throw|;
block|}
name|Threads
operator|.
name|sleep
argument_list|(
name|multiPause
argument_list|)
expr_stmt|;
return|return
name|doMultiResponse
argument_list|(
name|meta
argument_list|,
name|sequenceids
argument_list|,
name|request
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|multiInvocationsCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|ScanResponse
name|doMetaScanResponse
parameter_list|(
specifier|final
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|meta
parameter_list|,
specifier|final
name|AtomicLong
name|sequenceids
parameter_list|,
specifier|final
name|ScanRequest
name|request
parameter_list|)
block|{
name|ScanResponse
operator|.
name|Builder
name|builder
init|=
name|ScanResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|int
name|max
init|=
name|request
operator|.
name|getNumberOfRows
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|tail
init|=
name|request
operator|.
name|hasScan
argument_list|()
condition|?
name|meta
operator|.
name|tailMap
argument_list|(
name|request
operator|.
name|getScan
argument_list|()
operator|.
name|getStartRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
else|:
name|meta
decl_stmt|;
name|ClientProtos
operator|.
name|Result
operator|.
name|Builder
name|resultBuilder
init|=
name|ClientProtos
operator|.
name|Result
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|e
range|:
name|tail
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Can be 0 on open of a scanner -- i.e. rpc to setup scannerid only.
if|if
condition|(
name|max
operator|<=
literal|0
condition|)
break|break;
if|if
condition|(
operator|++
name|count
operator|>
name|max
condition|)
break|break;
name|HRegionInfo
name|hri
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|ByteString
name|row
init|=
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|resultBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resultBuilder
operator|.
name|addCell
argument_list|(
name|getRegionInfo
argument_list|(
name|row
argument_list|,
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|resultBuilder
operator|.
name|addCell
argument_list|(
name|getServer
argument_list|(
name|row
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getSecond
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|resultBuilder
operator|.
name|addCell
argument_list|(
name|getStartCode
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addResults
argument_list|(
name|resultBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set more to false if we are on the last region in table.
if|if
condition|(
name|hri
operator|.
name|getEndKey
argument_list|()
operator|.
name|length
operator|<=
literal|0
condition|)
name|builder
operator|.
name|setMoreResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
else|else
name|builder
operator|.
name|setMoreResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// If no scannerid, set one.
name|builder
operator|.
name|setScannerId
argument_list|(
name|request
operator|.
name|hasScannerId
argument_list|()
condition|?
name|request
operator|.
name|getScannerId
argument_list|()
else|:
name|sequenceids
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|static
name|GetResponse
name|doMetaGetResponse
parameter_list|(
specifier|final
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|meta
parameter_list|,
specifier|final
name|GetRequest
name|request
parameter_list|)
block|{
name|ClientProtos
operator|.
name|Result
operator|.
name|Builder
name|resultBuilder
init|=
name|ClientProtos
operator|.
name|Result
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ByteString
name|row
init|=
name|request
operator|.
name|getGet
argument_list|()
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|p
init|=
name|meta
operator|.
name|get
argument_list|(
name|row
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getGet
argument_list|()
operator|.
name|getClosestRowBefore
argument_list|()
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
name|row
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|head
init|=
name|bytes
operator|!=
literal|null
condition|?
name|meta
operator|.
name|headMap
argument_list|(
name|bytes
argument_list|)
else|:
name|meta
decl_stmt|;
name|p
operator|=
name|head
operator|==
literal|null
condition|?
literal|null
else|:
name|head
operator|.
name|get
argument_list|(
name|head
operator|.
name|lastKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|resultBuilder
operator|.
name|addCell
argument_list|(
name|getRegionInfo
argument_list|(
name|row
argument_list|,
name|p
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|resultBuilder
operator|.
name|addCell
argument_list|(
name|getServer
argument_list|(
name|row
argument_list|,
name|p
operator|.
name|getSecond
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|resultBuilder
operator|.
name|addCell
argument_list|(
name|getStartCode
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|GetResponse
operator|.
name|Builder
name|builder
init|=
name|GetResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setResult
argument_list|(
name|resultBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * @param name region name or encoded region name.    * @param type    * @return True if we are dealing with a hbase:meta region.    */
specifier|static
name|boolean
name|isMetaRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|name
parameter_list|,
specifier|final
name|RegionSpecifierType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|REGION_NAME
case|:
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|name
argument_list|)
return|;
case|case
name|ENCODED_REGION_NAME
case|:
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|name
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|ByteString
name|CATALOG_FAMILY_BYTESTRING
init|=
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ByteString
name|REGIONINFO_QUALIFIER_BYTESTRING
init|=
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ByteString
name|SERVER_QUALIFIER_BYTESTRING
init|=
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
specifier|static
name|CellProtos
operator|.
name|Cell
operator|.
name|Builder
name|getBaseCellBuilder
parameter_list|(
specifier|final
name|ByteString
name|row
parameter_list|)
block|{
name|CellProtos
operator|.
name|Cell
operator|.
name|Builder
name|cellBuilder
init|=
name|CellProtos
operator|.
name|Cell
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|cellBuilder
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|cellBuilder
operator|.
name|setFamily
argument_list|(
name|CATALOG_FAMILY_BYTESTRING
argument_list|)
expr_stmt|;
name|cellBuilder
operator|.
name|setTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cellBuilder
return|;
block|}
specifier|static
name|CellProtos
operator|.
name|Cell
name|getRegionInfo
parameter_list|(
specifier|final
name|ByteString
name|row
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
name|CellProtos
operator|.
name|Cell
operator|.
name|Builder
name|cellBuilder
init|=
name|getBaseCellBuilder
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|cellBuilder
operator|.
name|setQualifier
argument_list|(
name|REGIONINFO_QUALIFIER_BYTESTRING
argument_list|)
expr_stmt|;
name|cellBuilder
operator|.
name|setValue
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|hri
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cellBuilder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|static
name|CellProtos
operator|.
name|Cell
name|getServer
parameter_list|(
specifier|final
name|ByteString
name|row
parameter_list|,
specifier|final
name|ServerName
name|sn
parameter_list|)
block|{
name|CellProtos
operator|.
name|Cell
operator|.
name|Builder
name|cellBuilder
init|=
name|getBaseCellBuilder
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|cellBuilder
operator|.
name|setQualifier
argument_list|(
name|SERVER_QUALIFIER_BYTESTRING
argument_list|)
expr_stmt|;
name|cellBuilder
operator|.
name|setValue
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|sn
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cellBuilder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|static
name|CellProtos
operator|.
name|Cell
name|getStartCode
parameter_list|(
specifier|final
name|ByteString
name|row
parameter_list|)
block|{
name|CellProtos
operator|.
name|Cell
operator|.
name|Builder
name|cellBuilder
init|=
name|getBaseCellBuilder
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|cellBuilder
operator|.
name|setQualifier
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO:
name|cellBuilder
operator|.
name|setValue
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|META_SERVERNAME
operator|.
name|getStartcode
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cellBuilder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|BIG_USER_TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"t"
argument_list|)
decl_stmt|;
comment|/**    * Format passed integer.  Zero-pad.    * Copied from hbase-server PE class and small amendment.  Make them share.    * @param number    * @return Returns zero-prefixed 10-byte wide decimal version of passed    * number (Does absolute in case number is negative).    */
specifier|private
specifier|static
name|byte
index|[]
name|format
parameter_list|(
specifier|final
name|long
name|number
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
name|long
name|d
init|=
name|number
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|b
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|b
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|d
operator|%
literal|10
operator|)
operator|+
literal|'0'
argument_list|)
expr_stmt|;
name|d
operator|/=
literal|10
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
comment|/**    * @param count    * @param namespaceSpan    * @return<code>count</code> regions    */
specifier|private
specifier|static
name|HRegionInfo
index|[]
name|makeHRegionInfos
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|int
name|count
parameter_list|,
specifier|final
name|long
name|namespaceSpan
parameter_list|)
block|{
name|byte
index|[]
name|startKey
init|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
decl_stmt|;
name|long
name|interval
init|=
name|namespaceSpan
operator|/
name|count
decl_stmt|;
name|HRegionInfo
index|[]
name|hris
init|=
operator|new
name|HRegionInfo
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|endKey
operator|=
name|format
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startKey
operator|=
name|endKey
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|count
operator|-
literal|1
condition|)
name|endKey
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
else|else
name|endKey
operator|=
name|format
argument_list|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
name|interval
argument_list|)
expr_stmt|;
block|}
name|hris
index|[
name|i
index|]
operator|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
expr_stmt|;
block|}
return|return
name|hris
return|;
block|}
comment|/**    * @param count    * @return Return<code>count</code> servernames.    */
specifier|private
specifier|static
name|ServerName
index|[]
name|makeServerNames
parameter_list|(
specifier|final
name|int
name|count
parameter_list|)
block|{
name|ServerName
index|[]
name|sns
init|=
operator|new
name|ServerName
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|sns
index|[
name|i
index|]
operator|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|""
operator|+
name|i
operator|+
literal|".example.org"
argument_list|,
literal|16010
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|sns
return|;
block|}
comment|/**    * Comparator for meta row keys.    */
specifier|private
specifier|static
class|class
name|MetaRowsComparator
implements|implements
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
block|{
specifier|private
specifier|final
name|KeyValue
operator|.
name|KVComparator
name|delegate
init|=
operator|new
name|KeyValue
operator|.
name|MetaComparator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|byte
index|[]
name|right
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|compareRows
argument_list|(
name|left
argument_list|,
literal|0
argument_list|,
name|left
operator|.
name|length
argument_list|,
name|right
argument_list|,
literal|0
argument_list|,
name|right
operator|.
name|length
argument_list|)
return|;
block|}
block|}
comment|/**    * Create up a map that is keyed by meta row name and whose value is the HRegionInfo and    * ServerName to return for this row.    * @return Map with faked hbase:meta content in it.    */
specifier|static
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|makeMeta
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|int
name|regionCount
parameter_list|,
specifier|final
name|long
name|namespaceSpan
parameter_list|,
specifier|final
name|int
name|serverCount
parameter_list|)
block|{
comment|// I need a comparator for meta rows so we sort properly.
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|meta
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
argument_list|(
operator|new
name|MetaRowsComparator
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionInfo
index|[]
name|hris
init|=
name|makeHRegionInfos
argument_list|(
name|tableName
argument_list|,
name|regionCount
argument_list|,
name|namespaceSpan
argument_list|)
decl_stmt|;
name|ServerName
index|[]
name|serverNames
init|=
name|makeServerNames
argument_list|(
name|serverCount
argument_list|)
decl_stmt|;
name|int
name|per
init|=
name|regionCount
operator|/
name|serverCount
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|hris
control|)
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|p
init|=
operator|new
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|(
name|hri
argument_list|,
name|serverNames
index|[
name|count
operator|++
operator|/
name|per
index|]
argument_list|)
decl_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|meta
return|;
block|}
comment|/**    * Code for each 'client' to run.    *    * @param id    * @param c    * @param sharedConnection    * @throws IOException    */
specifier|static
name|void
name|cycle
parameter_list|(
name|int
name|id
parameter_list|,
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|HConnection
name|sharedConnection
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableInterface
name|table
init|=
name|sharedConnection
operator|.
name|getTable
argument_list|(
name|BIG_USER_TABLE
argument_list|)
decl_stmt|;
name|table
operator|.
name|setAutoFlushTo
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|long
name|namespaceSpan
init|=
name|c
operator|.
name|getLong
argument_list|(
literal|"hbase.test.namespace.span"
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|int
name|printInterval
init|=
literal|100000
decl_stmt|;
name|Random
name|rd
init|=
operator|new
name|Random
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|boolean
name|get
init|=
name|c
operator|.
name|getBoolean
argument_list|(
literal|"hbase.test.do.gets"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|Stopwatch
name|stopWatch
init|=
operator|new
name|Stopwatch
argument_list|()
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|namespaceSpan
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|b
init|=
name|format
argument_list|(
name|rd
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|get
condition|)
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|b
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|%
name|printInterval
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Put "
operator|+
name|printInterval
operator|+
literal|"/"
operator|+
name|stopWatch
operator|.
name|elapsedMillis
argument_list|()
argument_list|)
expr_stmt|;
name|stopWatch
operator|.
name|reset
argument_list|()
expr_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished a cycle putting "
operator|+
name|namespaceSpan
operator|+
literal|" in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|arg0
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|errCode
init|=
literal|0
decl_stmt|;
comment|// TODO: Make command options.
comment|// How many servers to fake.
specifier|final
name|int
name|servers
init|=
literal|1
decl_stmt|;
comment|// How many regions to put on the faked servers.
specifier|final
name|int
name|regions
init|=
literal|100000
decl_stmt|;
comment|// How many 'keys' in the faked regions.
specifier|final
name|long
name|namespaceSpan
init|=
literal|50000000
decl_stmt|;
comment|// How long to take to pause after doing a put; make this long if you want to fake a struggling
comment|// server.
specifier|final
name|long
name|multiPause
init|=
literal|0
decl_stmt|;
comment|// Check args make basic sense.
if|if
condition|(
operator|(
name|namespaceSpan
operator|<
name|regions
operator|)
operator|||
operator|(
name|regions
operator|<
name|servers
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"namespaceSpan="
operator|+
name|namespaceSpan
operator|+
literal|" must be> regions="
operator|+
name|regions
operator|+
literal|" which must be> servers="
operator|+
name|servers
argument_list|)
throw|;
block|}
comment|// Set my many servers and many regions faking connection in place.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
literal|"hbase.client.connection.impl"
argument_list|,
name|ManyServersManyRegionsConnection
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Use simple kv registry rather than zk
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
literal|"hbase.client.registry.impl"
argument_list|,
name|SimpleRegistry
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// When to report fails.  Default is we report the 10th.  This means we'll see log everytime
comment|// an exception is thrown -- usually RegionTooBusyException when we have more than
comment|// hbase.test.multi.too.many requests outstanding at any time.
name|getConf
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.client.start.log.errors.counter"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Ugly but this is only way to pass in configs.into ManyServersManyRegionsConnection class.
name|getConf
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.test.regions"
argument_list|,
name|regions
argument_list|)
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
literal|"hbase.test.namespace.span"
argument_list|,
name|namespaceSpan
argument_list|)
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
literal|"hbase.test.servers"
argument_list|,
name|servers
argument_list|)
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
literal|"hbase.test.tablename"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|BIG_USER_TABLE
argument_list|)
argument_list|)
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
literal|"hbase.test.multi.pause.when.done"
argument_list|,
name|multiPause
argument_list|)
expr_stmt|;
comment|// Let there be ten outstanding requests at a time before we throw RegionBusyException.
name|getConf
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.test.multi.too.many"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|int
name|clients
init|=
literal|2
decl_stmt|;
comment|// Have them all share the same connection so they all share the same instance of
comment|// ManyServersManyRegionsConnection so I can keep an eye on how many requests by server.
specifier|final
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|Threads
operator|.
name|getNamedThreadFactory
argument_list|(
literal|"p"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Executors.newFixedThreadPool(servers * 10, Threads.getNamedThreadFactory("p"));
comment|// Share a connection so I can keep counts in the 'server' on concurrency.
specifier|final
name|HConnection
name|sharedConnection
init|=
name|HConnectionManager
operator|.
name|createConnection
argument_list|(
name|getConf
argument_list|()
comment|/*, pool*/
argument_list|)
decl_stmt|;
try|try
block|{
name|Thread
index|[]
name|ts
init|=
operator|new
name|Thread
index|[
name|clients
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ts
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|id
init|=
name|j
decl_stmt|;
name|ts
index|[
name|j
index|]
operator|=
operator|new
name|Thread
argument_list|(
literal|""
operator|+
name|j
argument_list|)
block|{
specifier|final
name|Configuration
name|c
init|=
name|getConf
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|cycle
argument_list|(
name|id
argument_list|,
name|c
argument_list|,
name|sharedConnection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|ts
index|[
name|j
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ts
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|ts
index|[
name|j
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|sharedConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|errCode
return|;
block|}
comment|/**    * Run a client instance against a faked up server.    * @param args TODO    * @throws Exception    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|exit
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
operator|new
name|TestClientNoCluster
argument_list|()
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

