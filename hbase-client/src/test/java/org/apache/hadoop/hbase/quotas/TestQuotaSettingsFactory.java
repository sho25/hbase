begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|Quotas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|SpaceLimitRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|SpaceQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|Throttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|TimedQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test class for {@link QuotaSettingsFactory}.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestQuotaSettingsFactory
block|{
annotation|@
name|Test
specifier|public
name|void
name|testAllQuotasAddedToList
parameter_list|()
block|{
specifier|final
name|SpaceQuota
name|spaceQuota
init|=
name|SpaceQuota
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSoftLimit
argument_list|(
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|50L
argument_list|)
comment|// 50G
operator|.
name|setViolationPolicy
argument_list|(
name|QuotaProtos
operator|.
name|SpaceViolationPolicy
operator|.
name|DISABLE
argument_list|)
comment|// Disable the table
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|long
name|readLimit
init|=
literal|1000
decl_stmt|;
specifier|final
name|long
name|writeLimit
init|=
literal|500
decl_stmt|;
specifier|final
name|Throttle
name|throttle
init|=
name|Throttle
operator|.
name|newBuilder
argument_list|()
comment|// 1000 read reqs/min
operator|.
name|setReadNum
argument_list|(
name|TimedQuota
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSoftLimit
argument_list|(
name|readLimit
argument_list|)
operator|.
name|setTimeUnit
argument_list|(
name|HBaseProtos
operator|.
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
comment|// 500 write reqs/min
operator|.
name|setWriteNum
argument_list|(
name|TimedQuota
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSoftLimit
argument_list|(
name|writeLimit
argument_list|)
operator|.
name|setTimeUnit
argument_list|(
name|HBaseProtos
operator|.
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Quotas
name|quotas
init|=
name|Quotas
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSpace
argument_list|(
name|spaceQuota
argument_list|)
comment|// Set the FS quotas
operator|.
name|setThrottle
argument_list|(
name|throttle
argument_list|)
comment|// Set some RPC limits
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"my_table"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|QuotaSettings
argument_list|>
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|fromTableQuotas
argument_list|(
name|tn
argument_list|,
name|quotas
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|settings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|seenRead
init|=
literal|false
decl_stmt|;
name|boolean
name|seenWrite
init|=
literal|false
decl_stmt|;
name|boolean
name|seenSpace
init|=
literal|false
decl_stmt|;
for|for
control|(
name|QuotaSettings
name|setting
range|:
name|settings
control|)
block|{
if|if
condition|(
name|setting
operator|instanceof
name|ThrottleSettings
condition|)
block|{
name|ThrottleSettings
name|throttleSettings
init|=
operator|(
name|ThrottleSettings
operator|)
name|setting
decl_stmt|;
switch|switch
condition|(
name|throttleSettings
operator|.
name|getThrottleType
argument_list|()
condition|)
block|{
case|case
name|READ_NUMBER
case|:
name|assertFalse
argument_list|(
literal|"Should not have multiple read quotas"
argument_list|,
name|seenRead
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|readLimit
argument_list|,
name|throttleSettings
operator|.
name|getSoftLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|throttleSettings
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tn
argument_list|,
name|throttleSettings
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Username should be null"
argument_list|,
name|throttleSettings
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Namespace should be null"
argument_list|,
name|throttleSettings
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|seenRead
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|WRITE_NUMBER
case|:
name|assertFalse
argument_list|(
literal|"Should not have multiple write quotas"
argument_list|,
name|seenWrite
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|writeLimit
argument_list|,
name|throttleSettings
operator|.
name|getSoftLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|throttleSettings
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tn
argument_list|,
name|throttleSettings
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Username should be null"
argument_list|,
name|throttleSettings
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Namespace should be null"
argument_list|,
name|throttleSettings
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|seenWrite
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"Unexpected throttle type: "
operator|+
name|throttleSettings
operator|.
name|getThrottleType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|setting
operator|instanceof
name|SpaceLimitSettings
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Should not have multiple space quotas"
argument_list|,
name|seenSpace
argument_list|)
expr_stmt|;
name|SpaceLimitSettings
name|spaceLimit
init|=
operator|(
name|SpaceLimitSettings
operator|)
name|setting
decl_stmt|;
name|assertEquals
argument_list|(
name|tn
argument_list|,
name|spaceLimit
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Username should be null"
argument_list|,
name|spaceLimit
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Namespace should be null"
argument_list|,
name|spaceLimit
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"SpaceLimitSettings should have a SpaceQuota"
argument_list|,
name|spaceLimit
operator|.
name|getProto
argument_list|()
operator|.
name|hasQuota
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|spaceQuota
argument_list|,
name|spaceLimit
operator|.
name|getProto
argument_list|()
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|seenSpace
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unexpected QuotaSettings implementation: "
operator|+
name|setting
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Should have seen a read quota"
argument_list|,
name|seenRead
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have seen a write quota"
argument_list|,
name|seenWrite
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have seen a space quota"
argument_list|,
name|seenSpace
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNeitherTableNorNamespace
parameter_list|()
block|{
specifier|final
name|SpaceQuota
name|spaceQuota
init|=
name|SpaceQuota
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSoftLimit
argument_list|(
literal|1L
argument_list|)
operator|.
name|setViolationPolicy
argument_list|(
name|QuotaProtos
operator|.
name|SpaceViolationPolicy
operator|.
name|DISABLE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|QuotaSettingsFactory
operator|.
name|fromSpace
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|spaceQuota
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBothTableAndNamespace
parameter_list|()
block|{
specifier|final
name|SpaceQuota
name|spaceQuota
init|=
name|SpaceQuota
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSoftLimit
argument_list|(
literal|1L
argument_list|)
operator|.
name|setViolationPolicy
argument_list|(
name|QuotaProtos
operator|.
name|SpaceViolationPolicy
operator|.
name|DISABLE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|QuotaSettingsFactory
operator|.
name|fromSpace
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"bar"
argument_list|,
name|spaceQuota
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpaceLimitSettings
parameter_list|()
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|sizeLimit
init|=
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|75
decl_stmt|;
comment|// 75GB
specifier|final
name|SpaceViolationPolicy
name|violationPolicy
init|=
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
decl_stmt|;
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tableName
argument_list|,
name|sizeLimit
argument_list|,
name|violationPolicy
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"QuotaSettings should not be null"
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be an instance of SpaceLimitSettings"
argument_list|,
name|settings
operator|instanceof
name|SpaceLimitSettings
argument_list|)
expr_stmt|;
name|SpaceLimitSettings
name|spaceLimitSettings
init|=
operator|(
name|SpaceLimitSettings
operator|)
name|settings
decl_stmt|;
name|SpaceLimitRequest
name|protoRequest
init|=
name|spaceLimitSettings
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Request should have a SpaceQuota"
argument_list|,
name|protoRequest
operator|.
name|hasQuota
argument_list|()
argument_list|)
expr_stmt|;
name|SpaceQuota
name|quota
init|=
name|protoRequest
operator|.
name|getQuota
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sizeLimit
argument_list|,
name|quota
operator|.
name|getSoftLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|violationPolicy
argument_list|,
name|ProtobufUtil
operator|.
name|toViolationPolicy
argument_list|(
name|quota
operator|.
name|getViolationPolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

