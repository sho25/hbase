begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|HIGH_QOS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|NORMAL_QOS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|SYSTEMTABLE_QOS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE_NAME_STR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|AdminService
operator|.
name|Interface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|StopServerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|StopServerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetProcedureResultRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetProcedureResultResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ShutdownRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ShutdownResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|StopMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|StopMasterResponse
import|;
end_import

begin_comment
comment|/**  * Confirm that we will set the priority in {@link HBaseRpcController} for several admin operations.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAsyncAdminRpcPriority
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAsyncAdminRpcPriority
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|CONF
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
name|MasterService
operator|.
name|Interface
name|masterStub
decl_stmt|;
specifier|private
name|AdminService
operator|.
name|Interface
name|adminStub
decl_stmt|;
specifier|private
name|AsyncConnection
name|conn
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|masterStub
operator|=
name|mock
argument_list|(
name|MasterService
operator|.
name|Interface
operator|.
name|class
argument_list|)
expr_stmt|;
name|adminStub
operator|=
name|mock
argument_list|(
name|AdminService
operator|.
name|Interface
operator|.
name|class
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|RpcCallback
argument_list|<
name|GetProcedureResultResponse
argument_list|>
name|done
init|=
name|invocation
operator|.
name|getArgument
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|done
operator|.
name|run
argument_list|(
name|GetProcedureResultResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setState
argument_list|(
name|GetProcedureResultResponse
operator|.
name|State
operator|.
name|FINISHED
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|masterStub
argument_list|)
operator|.
name|getProcedureResult
argument_list|(
name|any
argument_list|(
name|HBaseRpcController
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|GetProcedureResultRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|RpcCallback
argument_list|<
name|CreateTableResponse
argument_list|>
name|done
init|=
name|invocation
operator|.
name|getArgument
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|done
operator|.
name|run
argument_list|(
name|CreateTableResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
literal|1L
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|masterStub
argument_list|)
operator|.
name|createTable
argument_list|(
name|any
argument_list|(
name|HBaseRpcController
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|CreateTableRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|RpcCallback
argument_list|<
name|ShutdownResponse
argument_list|>
name|done
init|=
name|invocation
operator|.
name|getArgument
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|done
operator|.
name|run
argument_list|(
name|ShutdownResponse
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|masterStub
argument_list|)
operator|.
name|shutdown
argument_list|(
name|any
argument_list|(
name|HBaseRpcController
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ShutdownRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|RpcCallback
argument_list|<
name|StopMasterResponse
argument_list|>
name|done
init|=
name|invocation
operator|.
name|getArgument
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|done
operator|.
name|run
argument_list|(
name|StopMasterResponse
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|masterStub
argument_list|)
operator|.
name|stopMaster
argument_list|(
name|any
argument_list|(
name|HBaseRpcController
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|StopMasterRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|RpcCallback
argument_list|<
name|StopServerResponse
argument_list|>
name|done
init|=
name|invocation
operator|.
name|getArgument
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|done
operator|.
name|run
argument_list|(
name|StopServerResponse
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|adminStub
argument_list|)
operator|.
name|stopServer
argument_list|(
name|any
argument_list|(
name|HBaseRpcController
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|StopServerRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|new
name|AsyncConnectionImpl
argument_list|(
name|CONF
argument_list|,
operator|new
name|DoNothingConnectionRegistry
argument_list|(
name|CONF
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|CONF
argument_list|)
operator|.
name|getCurrent
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|CompletableFuture
argument_list|<
name|MasterService
operator|.
name|Interface
argument_list|>
name|getMasterStub
parameter_list|()
block|{
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|masterStub
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Interface
name|getAdminStub
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|adminStub
return|;
block|}
block|}
expr_stmt|;
block|}
specifier|private
name|HBaseRpcController
name|assertPriority
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
return|return
name|argThat
argument_list|(
operator|new
name|ArgumentMatcher
argument_list|<
name|HBaseRpcController
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|)
block|{
return|return
name|controller
operator|.
name|getPriority
argument_list|()
operator|==
name|priority
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateNormalTable
parameter_list|()
block|{
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"cf"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|masterStub
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|createTable
argument_list|(
name|assertPriority
argument_list|(
name|NORMAL_QOS
argument_list|)
argument_list|,
name|any
argument_list|(
name|CreateTableRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// a bit strange as we can not do this in production but anyway, just a client mock to confirm
comment|// that we pass the correct priority
annotation|@
name|Test
specifier|public
name|void
name|testCreateSystemTable
parameter_list|()
block|{
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|SYSTEM_NAMESPACE_NAME_STR
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"cf"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|masterStub
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|createTable
argument_list|(
name|assertPriority
argument_list|(
name|SYSTEMTABLE_QOS
argument_list|)
argument_list|,
name|any
argument_list|(
name|CreateTableRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// a bit strange as we can not do this in production but anyway, just a client mock to confirm
comment|// that we pass the correct priority
annotation|@
name|Test
specifier|public
name|void
name|testCreateMetaTable
parameter_list|()
block|{
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"cf"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|masterStub
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|createTable
argument_list|(
name|assertPriority
argument_list|(
name|SYSTEMTABLE_QOS
argument_list|)
argument_list|,
name|any
argument_list|(
name|CreateTableRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShutdown
parameter_list|()
block|{
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|shutdown
argument_list|()
operator|.
name|join
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|masterStub
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|shutdown
argument_list|(
name|assertPriority
argument_list|(
name|HIGH_QOS
argument_list|)
argument_list|,
name|any
argument_list|(
name|ShutdownRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStopMaster
parameter_list|()
block|{
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|stopMaster
argument_list|()
operator|.
name|join
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|masterStub
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|stopMaster
argument_list|(
name|assertPriority
argument_list|(
name|HIGH_QOS
argument_list|)
argument_list|,
name|any
argument_list|(
name|StopMasterRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStopRegionServer
parameter_list|()
block|{
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|stopRegionServer
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"rs"
argument_list|,
literal|16010
argument_list|,
literal|12345
argument_list|)
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|adminStub
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|stopServer
argument_list|(
name|assertPriority
argument_list|(
name|HIGH_QOS
argument_list|)
argument_list|,
name|any
argument_list|(
name|StopServerRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

