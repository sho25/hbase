begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|ClientExceptionsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|TimeoutIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestIPCUtil
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestIPCUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Throwable
name|create
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|InvocationTargetException
throws|,
name|NoSuchMethodException
block|{
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|c
init|=
name|clazz
operator|.
name|getDeclaredConstructor
argument_list|()
decl_stmt|;
name|c
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// fall through
block|}
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|c
init|=
name|clazz
operator|.
name|getDeclaredConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|c
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|newInstance
argument_list|(
literal|"error"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// fall through
block|}
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|c
init|=
name|clazz
operator|.
name|getDeclaredConstructor
argument_list|(
name|Throwable
operator|.
name|class
argument_list|)
decl_stmt|;
name|c
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|newInstance
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"error"
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// fall through
block|}
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|c
init|=
name|clazz
operator|.
name|getDeclaredConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Throwable
operator|.
name|class
argument_list|)
decl_stmt|;
name|c
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|newInstance
argument_list|(
literal|"error"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"error"
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// fall through
block|}
name|Constructor
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|c
init|=
name|clazz
operator|.
name|getDeclaredConstructor
argument_list|(
name|Throwable
operator|.
name|class
argument_list|,
name|Throwable
operator|.
name|class
argument_list|)
decl_stmt|;
name|c
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|c
operator|.
name|newInstance
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"error"
argument_list|)
argument_list|,
literal|"error"
argument_list|)
return|;
block|}
comment|/**    * See HBASE-21862, it is very important to keep the original exception type for connection    * exceptions.    */
annotation|@
name|Test
specifier|public
name|void
name|testWrapConnectionException
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|clazz
range|:
name|ClientExceptionsUtil
operator|.
name|getConnectionExceptionTypes
argument_list|()
control|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|create
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|InetSocketAddress
name|addr
init|=
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|12345
argument_list|)
decl_stmt|;
for|for
control|(
name|Throwable
name|exception
range|:
name|exceptions
control|)
block|{
if|if
condition|(
name|exception
operator|instanceof
name|TimeoutException
condition|)
block|{
name|assertThat
argument_list|(
name|IPCUtil
operator|.
name|wrapException
argument_list|(
name|addr
argument_list|,
name|exception
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|TimeoutIOException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|IPCUtil
operator|.
name|wrapException
argument_list|(
name|addr
argument_list|,
name|exception
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|exception
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

