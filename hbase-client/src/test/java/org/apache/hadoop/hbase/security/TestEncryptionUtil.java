begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|KeyProviderForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|aes
operator|.
name|AES
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestEncryptionUtil
block|{
annotation|@
name|Test
specifier|public
name|void
name|testKeyWrapping
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up the key provider for testing to resolve a key for our test subject
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// we don't need HBaseConfiguration for this
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|CRYPTO_KEYPROVIDER_CONF_KEY
argument_list|,
name|KeyProviderForTesting
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// generate a test key
name|byte
index|[]
name|keyBytes
init|=
operator|new
name|byte
index|[
name|AES
operator|.
name|KEY_LENGTH
index|]
decl_stmt|;
operator|new
name|SecureRandom
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|keyBytes
argument_list|)
expr_stmt|;
name|String
name|algorithm
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|CRYPTO_KEY_ALGORITHM_CONF_KEY
argument_list|,
name|HConstants
operator|.
name|CIPHER_AES
argument_list|)
decl_stmt|;
name|Key
name|key
init|=
operator|new
name|SecretKeySpec
argument_list|(
name|keyBytes
argument_list|,
name|algorithm
argument_list|)
decl_stmt|;
comment|// wrap the test key
name|byte
index|[]
name|wrappedKeyBytes
init|=
name|EncryptionUtil
operator|.
name|wrapKey
argument_list|(
name|conf
argument_list|,
literal|"hbase"
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wrappedKeyBytes
argument_list|)
expr_stmt|;
comment|// unwrap
name|Key
name|unwrappedKey
init|=
name|EncryptionUtil
operator|.
name|unwrapKey
argument_list|(
name|conf
argument_list|,
literal|"hbase"
argument_list|,
name|wrappedKeyBytes
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|unwrappedKey
argument_list|)
expr_stmt|;
comment|// only secretkeyspec supported for now
name|assertTrue
argument_list|(
name|unwrappedKey
operator|instanceof
name|SecretKeySpec
argument_list|)
expr_stmt|;
comment|// did we get back what we wrapped?
name|assertTrue
argument_list|(
literal|"Unwrapped key bytes do not match original"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|keyBytes
argument_list|,
name|unwrappedKey
operator|.
name|getEncoded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// unwrap with an incorrect key
try|try
block|{
name|EncryptionUtil
operator|.
name|unwrapKey
argument_list|(
name|conf
argument_list|,
literal|"other"
argument_list|,
name|wrappedKeyBytes
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Unwrap with incorrect key did not throw KeyException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWALKeyWrapping
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up the key provider for testing to resolve a key for our test subject
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// we don't need HBaseConfiguration for this
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|CRYPTO_KEYPROVIDER_CONF_KEY
argument_list|,
name|KeyProviderForTesting
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// generate a test key
name|byte
index|[]
name|keyBytes
init|=
operator|new
name|byte
index|[
name|AES
operator|.
name|KEY_LENGTH
index|]
decl_stmt|;
operator|new
name|SecureRandom
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|keyBytes
argument_list|)
expr_stmt|;
name|String
name|algorithm
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|CRYPTO_WAL_ALGORITHM_CONF_KEY
argument_list|,
name|HConstants
operator|.
name|CIPHER_AES
argument_list|)
decl_stmt|;
name|Key
name|key
init|=
operator|new
name|SecretKeySpec
argument_list|(
name|keyBytes
argument_list|,
name|algorithm
argument_list|)
decl_stmt|;
comment|// wrap the test key
name|byte
index|[]
name|wrappedKeyBytes
init|=
name|EncryptionUtil
operator|.
name|wrapKey
argument_list|(
name|conf
argument_list|,
literal|"hbase"
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wrappedKeyBytes
argument_list|)
expr_stmt|;
comment|// unwrap
name|Key
name|unwrappedKey
init|=
name|EncryptionUtil
operator|.
name|unwrapWALKey
argument_list|(
name|conf
argument_list|,
literal|"hbase"
argument_list|,
name|wrappedKeyBytes
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|unwrappedKey
argument_list|)
expr_stmt|;
comment|// only secretkeyspec supported for now
name|assertTrue
argument_list|(
name|unwrappedKey
operator|instanceof
name|SecretKeySpec
argument_list|)
expr_stmt|;
comment|// did we get back what we wrapped?
name|assertTrue
argument_list|(
literal|"Unwrapped key bytes do not match original"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|keyBytes
argument_list|,
name|unwrappedKey
operator|.
name|getEncoded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|KeyException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testWALKeyWrappingWithIncorrectKey
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up the key provider for testing to resolve a key for our test subject
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// we don't need HBaseConfiguration for this
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|CRYPTO_KEYPROVIDER_CONF_KEY
argument_list|,
name|KeyProviderForTesting
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// generate a test key
name|byte
index|[]
name|keyBytes
init|=
operator|new
name|byte
index|[
name|AES
operator|.
name|KEY_LENGTH
index|]
decl_stmt|;
operator|new
name|SecureRandom
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|keyBytes
argument_list|)
expr_stmt|;
name|String
name|algorithm
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|CRYPTO_WAL_ALGORITHM_CONF_KEY
argument_list|,
name|HConstants
operator|.
name|CIPHER_AES
argument_list|)
decl_stmt|;
name|Key
name|key
init|=
operator|new
name|SecretKeySpec
argument_list|(
name|keyBytes
argument_list|,
name|algorithm
argument_list|)
decl_stmt|;
comment|// wrap the test key
name|byte
index|[]
name|wrappedKeyBytes
init|=
name|EncryptionUtil
operator|.
name|wrapKey
argument_list|(
name|conf
argument_list|,
literal|"hbase"
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wrappedKeyBytes
argument_list|)
expr_stmt|;
comment|// unwrap with an incorrect key
name|EncryptionUtil
operator|.
name|unwrapWALKey
argument_list|(
name|conf
argument_list|,
literal|"other"
argument_list|,
name|wrappedKeyBytes
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

