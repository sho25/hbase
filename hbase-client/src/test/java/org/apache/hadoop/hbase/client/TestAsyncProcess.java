begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncProcess
operator|.
name|AsyncRequestFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestAsyncProcess
block|{
specifier|private
specifier|static
specifier|final
name|TableName
name|DUMMY_TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"DUMMY_TABLE"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DUMMY_BYTES_1
init|=
literal|"DUMMY_BYTES_1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DUMMY_BYTES_2
init|=
literal|"DUMMY_BYTES_2"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DUMMY_BYTES_3
init|=
literal|"DUMMY_BYTES_3"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAILS
init|=
literal|"FAILS"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ServerName
name|sn
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"localhost:10,1254"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ServerName
name|sn2
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"localhost:140,12540"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HRegionInfo
name|hri1
init|=
operator|new
name|HRegionInfo
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|DUMMY_BYTES_1
argument_list|,
name|DUMMY_BYTES_2
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HRegionInfo
name|hri2
init|=
operator|new
name|HRegionInfo
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|DUMMY_BYTES_2
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HRegionInfo
name|hri3
init|=
operator|new
name|HRegionInfo
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|DUMMY_BYTES_3
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HRegionLocation
name|loc1
init|=
operator|new
name|HRegionLocation
argument_list|(
name|hri1
argument_list|,
name|sn
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HRegionLocation
name|loc2
init|=
operator|new
name|HRegionLocation
argument_list|(
name|hri2
argument_list|,
name|sn
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HRegionLocation
name|loc3
init|=
operator|new
name|HRegionLocation
argument_list|(
name|hri3
argument_list|,
name|sn2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|success
init|=
literal|"success"
decl_stmt|;
specifier|private
specifier|static
name|Exception
name|failure
init|=
operator|new
name|Exception
argument_list|(
literal|"failure"
argument_list|)
decl_stmt|;
specifier|static
class|class
name|MyAsyncProcess
extends|extends
name|AsyncProcess
block|{
specifier|final
name|AtomicInteger
name|nbMultiResponse
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|nbActions
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|public
name|List
argument_list|<
name|AsyncRequestFuture
argument_list|>
name|allReqs
init|=
operator|new
name|ArrayList
argument_list|<
name|AsyncRequestFuture
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
parameter_list|<
name|Res
parameter_list|>
name|AsyncRequestFutureImpl
argument_list|<
name|Res
argument_list|>
name|createAsyncRequestFuture
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|List
argument_list|<
name|Action
argument_list|<
name|Row
argument_list|>
argument_list|>
name|actions
parameter_list|,
name|long
name|nonceGroup
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|Batch
operator|.
name|Callback
argument_list|<
name|Res
argument_list|>
name|callback
parameter_list|,
name|Object
index|[]
name|results
parameter_list|,
name|boolean
name|needResults
parameter_list|)
block|{
comment|// Test HTable has tableName of null, so pass DUMMY_TABLE
name|AsyncRequestFutureImpl
argument_list|<
name|Res
argument_list|>
name|r
init|=
name|super
operator|.
name|createAsyncRequestFuture
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|actions
argument_list|,
name|nonceGroup
argument_list|,
name|pool
argument_list|,
name|callback
argument_list|,
name|results
argument_list|,
name|needResults
argument_list|)
decl_stmt|;
name|r
operator|.
name|hardRetryLimit
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|allReqs
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|long
name|getRetriesRequested
parameter_list|()
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AsyncRequestFuture
name|ars
range|:
name|allReqs
control|)
block|{
if|if
condition|(
name|ars
operator|instanceof
name|AsyncProcess
operator|.
name|AsyncRequestFutureImpl
condition|)
block|{
name|result
operator|+=
operator|(
literal|1
operator|-
operator|(
operator|(
name|AsyncRequestFutureImpl
argument_list|<
name|?
argument_list|>
operator|)
name|ars
operator|)
operator|.
name|hardRetryLimit
operator|.
name|get
argument_list|()
operator|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|static
class|class
name|CountingThreadFactory
implements|implements
name|ThreadFactory
block|{
specifier|final
name|AtomicInteger
name|nbThreads
decl_stmt|;
name|ThreadFactory
name|realFactory
init|=
name|Threads
operator|.
name|newDaemonThreadFactory
argument_list|(
literal|"test-TestAsyncProcess"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|nbThreads
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|realFactory
operator|.
name|newThread
argument_list|(
name|r
argument_list|)
return|;
block|}
name|CountingThreadFactory
parameter_list|(
name|AtomicInteger
name|nbThreads
parameter_list|)
block|{
name|this
operator|.
name|nbThreads
operator|=
name|nbThreads
expr_stmt|;
block|}
block|}
specifier|public
name|MyAsyncProcess
parameter_list|(
name|ClusterConnection
name|hc
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|hc
argument_list|,
name|conf
argument_list|,
operator|new
name|AtomicInteger
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MyAsyncProcess
parameter_list|(
name|ClusterConnection
name|hc
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|AtomicInteger
name|nbThreads
parameter_list|)
block|{
name|super
argument_list|(
name|hc
argument_list|,
name|conf
argument_list|,
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|CountingThreadFactory
argument_list|(
name|nbThreads
argument_list|)
argument_list|)
argument_list|,
operator|new
name|RpcRetryingCallerFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|false
argument_list|,
operator|new
name|RpcControllerFactory
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MyAsyncProcess
parameter_list|(
name|ClusterConnection
name|hc
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|useGlobalErrors
parameter_list|)
block|{
name|super
argument_list|(
name|hc
argument_list|,
name|conf
argument_list|,
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|CountingThreadFactory
argument_list|(
operator|new
name|AtomicInteger
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|RpcRetryingCallerFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
name|useGlobalErrors
argument_list|,
operator|new
name|RpcControllerFactory
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|Res
parameter_list|>
name|AsyncRequestFuture
name|submit
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|rows
parameter_list|,
name|boolean
name|atLeastOne
parameter_list|,
name|Callback
argument_list|<
name|Res
argument_list|>
name|callback
parameter_list|,
name|boolean
name|needResults
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
comment|// We use results in tests to check things, so override to always save them.
return|return
name|super
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|rows
argument_list|,
name|atLeastOne
argument_list|,
name|callback
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RpcRetryingCaller
argument_list|<
name|MultiResponse
argument_list|>
name|createCaller
parameter_list|(
name|MultiServerCallable
argument_list|<
name|Row
argument_list|>
name|callable
parameter_list|)
block|{
specifier|final
name|MultiResponse
name|mr
init|=
name|createMultiResponse
argument_list|(
name|callable
operator|.
name|getMulti
argument_list|()
argument_list|,
name|nbMultiResponse
argument_list|,
name|nbActions
argument_list|)
decl_stmt|;
return|return
operator|new
name|RpcRetryingCaller
argument_list|<
name|MultiResponse
argument_list|>
argument_list|(
literal|100
argument_list|,
literal|10
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|MultiResponse
name|callWithoutRetries
parameter_list|(
name|RetryingCallable
argument_list|<
name|MultiResponse
argument_list|>
name|callable
parameter_list|,
name|int
name|callTimeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|RuntimeException
block|{
try|try
block|{
comment|// sleep one second in order for threadpool to start another thread instead of reusing
comment|// existing one.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore error
block|}
return|return
name|mr
return|;
block|}
block|}
return|;
block|}
block|}
specifier|static
name|MultiResponse
name|createMultiResponse
parameter_list|(
specifier|final
name|MultiAction
argument_list|<
name|Row
argument_list|>
name|multi
parameter_list|,
name|AtomicInteger
name|nbMultiResponse
parameter_list|,
name|AtomicInteger
name|nbActions
parameter_list|)
block|{
specifier|final
name|MultiResponse
name|mr
init|=
operator|new
name|MultiResponse
argument_list|()
decl_stmt|;
name|nbMultiResponse
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Action
argument_list|<
name|Row
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|multi
operator|.
name|actions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|regionName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|Action
argument_list|<
name|Row
argument_list|>
name|a
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|nbActions
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|FAILS
argument_list|,
name|a
operator|.
name|getAction
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
condition|)
block|{
name|mr
operator|.
name|add
argument_list|(
name|regionName
argument_list|,
name|a
operator|.
name|getOriginalIndex
argument_list|()
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mr
operator|.
name|add
argument_list|(
name|regionName
argument_list|,
name|a
operator|.
name|getOriginalIndex
argument_list|()
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|mr
return|;
block|}
comment|/**    * Returns our async process.    */
specifier|static
class|class
name|MyConnectionImpl
extends|extends
name|ConnectionManager
operator|.
name|HConnectionImplementation
block|{
specifier|final
name|AtomicInteger
name|nbThreads
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
static|static
block|{
name|c
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|MyConnectionImpl
parameter_list|()
block|{
name|super
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|MyConnectionImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HRegionLocation
name|locateRegion
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
name|loc1
return|;
block|}
block|}
comment|/**    * Returns our async process.    */
specifier|static
class|class
name|MyConnectionImpl2
extends|extends
name|MyConnectionImpl
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|hrl
decl_stmt|;
specifier|final
name|boolean
name|usedRegions
index|[]
decl_stmt|;
specifier|protected
name|MyConnectionImpl2
parameter_list|(
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|hrl
parameter_list|)
block|{
name|super
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|this
operator|.
name|hrl
operator|=
name|hrl
expr_stmt|;
name|this
operator|.
name|usedRegions
operator|=
operator|new
name|boolean
index|[
name|hrl
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HRegionLocation
name|locateRegion
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HRegionLocation
name|hr
range|:
name|hrl
control|)
block|{
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|hr
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|)
condition|)
block|{
name|usedRegions
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|hr
return|;
block|}
name|i
operator|++
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|ClusterConnection
name|hc
init|=
name|createHConnection
argument_list|()
decl_stmt|;
name|AsyncProcess
name|ap
init|=
operator|new
name|MyAsyncProcess
argument_list|(
name|hc
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ap
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|puts
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|puts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubmitWithCB
parameter_list|()
throws|throws
name|Exception
block|{
name|ClusterConnection
name|hc
init|=
name|createHConnection
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|updateCalled
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Batch
operator|.
name|Callback
argument_list|<
name|Object
argument_list|>
name|cb
init|=
operator|new
name|Batch
operator|.
name|Callback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|update
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|Object
name|result
parameter_list|)
block|{
name|updateCalled
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|AsyncProcess
name|ap
init|=
operator|new
name|MyAsyncProcess
argument_list|(
name|hc
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AsyncRequestFuture
name|ars
init|=
name|ap
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|puts
argument_list|,
literal|false
argument_list|,
name|cb
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|puts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ars
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|updateCalled
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubmitBusyRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|ClusterConnection
name|hc
init|=
name|createHConnection
argument_list|()
decl_stmt|;
name|AsyncProcess
name|ap
init|=
operator|new
name|MyAsyncProcess
argument_list|(
name|hc
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ap
operator|.
name|incTaskCounters
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|hri1
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|,
name|sn
argument_list|)
expr_stmt|;
name|ap
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|puts
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|puts
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ap
operator|.
name|decTaskCounters
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|hri1
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|,
name|sn
argument_list|)
expr_stmt|;
name|ap
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|puts
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|puts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubmitBusyRegionServer
parameter_list|()
throws|throws
name|Exception
block|{
name|ClusterConnection
name|hc
init|=
name|createHConnection
argument_list|()
decl_stmt|;
name|AsyncProcess
name|ap
init|=
operator|new
name|MyAsyncProcess
argument_list|(
name|hc
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ap
operator|.
name|taskCounterPerServer
operator|.
name|put
argument_list|(
name|sn2
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
name|ap
operator|.
name|maxConcurrentTasksPerServer
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|//<== this one won't be taken, the rs is busy
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|//<== this one will make it, the region is already in
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|//<== new region, but the rs is ok
name|ap
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|puts
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|" puts="
operator|+
name|puts
argument_list|,
literal|1
argument_list|,
name|puts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ap
operator|.
name|taskCounterPerServer
operator|.
name|put
argument_list|(
name|sn2
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
name|ap
operator|.
name|maxConcurrentTasksPerServer
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ap
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|puts
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|puts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFail
parameter_list|()
throws|throws
name|Exception
block|{
name|MyAsyncProcess
name|ap
init|=
operator|new
name|MyAsyncProcess
argument_list|(
name|createHConnection
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|Put
name|p
init|=
name|createPut
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|AsyncRequestFuture
name|ars
init|=
name|ap
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|puts
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|puts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ars
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
name|verifyResult
argument_list|(
name|ars
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|ap
operator|.
name|getRetriesRequested
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ars
operator|.
name|getErrors
argument_list|()
operator|.
name|exceptions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"was: "
operator|+
name|ars
operator|.
name|getErrors
argument_list|()
operator|.
name|exceptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|failure
operator|.
name|equals
argument_list|(
name|ars
operator|.
name|getErrors
argument_list|()
operator|.
name|exceptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"was: "
operator|+
name|ars
operator|.
name|getErrors
argument_list|()
operator|.
name|exceptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|failure
operator|.
name|equals
argument_list|(
name|ars
operator|.
name|getErrors
argument_list|()
operator|.
name|exceptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ars
operator|.
name|getFailedOperations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"was: "
operator|+
name|ars
operator|.
name|getFailedOperations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|p
operator|.
name|equals
argument_list|(
name|ars
operator|.
name|getFailedOperations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubmitTrue
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|AsyncProcess
name|ap
init|=
operator|new
name|MyAsyncProcess
argument_list|(
name|createHConnection
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ap
operator|.
name|tasksInProgress
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
specifier|final
name|AtomicInteger
name|ai
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ap
operator|.
name|taskCounterPerRegion
operator|.
name|put
argument_list|(
name|hri1
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|ai
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|checkPoint
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|checkPoint2
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|checkPoint
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: this is timing-dependent
name|ai
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|ap
operator|.
name|tasksInProgress
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|checkPoint2
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|Put
name|p
init|=
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|ap
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|puts
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|puts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|ap
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|puts
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|puts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|checkPoint
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|checkPoint2
operator|.
name|get
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailAndSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|MyAsyncProcess
name|ap
init|=
operator|new
name|MyAsyncProcess
argument_list|(
name|createHConnection
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|AsyncRequestFuture
name|ars
init|=
name|ap
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|puts
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|puts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ars
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
name|verifyResult
argument_list|(
name|ars
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ap
operator|.
name|getRetriesRequested
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ars
operator|.
name|getErrors
argument_list|()
operator|.
name|actions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait for AP to be free. While ars might have the result, ap counters are decreased later.
name|ap
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
name|ars
operator|=
name|ap
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|puts
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|puts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ars
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ap
operator|.
name|getRetriesRequested
argument_list|()
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|ars
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|MyAsyncProcess
name|ap
init|=
operator|new
name|MyAsyncProcess
argument_list|(
name|createHConnection
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|AsyncRequestFuture
name|ars
init|=
name|ap
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|puts
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ars
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
name|verifyResult
argument_list|(
name|ars
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ap
operator|.
name|getRetriesRequested
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ars
operator|.
name|getFailedOperations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxTask
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AsyncProcess
name|ap
init|=
operator|new
name|MyAsyncProcess
argument_list|(
name|createHConnection
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|ap
operator|.
name|incTaskCounters
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"dummy"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|sn
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Thread
name|myThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|myThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|ap
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|puts
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"We should have been interrupted."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedIOException
name|expected
parameter_list|)
block|{     }
specifier|final
name|long
name|sleepTime
init|=
literal|2000
decl_stmt|;
name|Thread
name|t2
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Threads
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
while|while
condition|(
name|ap
operator|.
name|tasksInProgress
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ap
operator|.
name|decTaskCounters
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"dummy"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|sn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ap
operator|.
name|submit
argument_list|(
name|DUMMY_TABLE
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Row
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|//Adds 100 to secure us against approximate timing.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|start
operator|+
literal|100L
operator|+
name|sleepTime
operator|>
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ClusterConnection
name|createHConnection
parameter_list|()
throws|throws
name|IOException
block|{
name|ClusterConnection
name|hc
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ClusterConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hc
operator|.
name|getRegionLocation
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|DUMMY_TABLE
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|DUMMY_BYTES_1
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|loc1
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hc
operator|.
name|locateRegion
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|DUMMY_TABLE
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|DUMMY_BYTES_1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|loc1
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hc
operator|.
name|getRegionLocation
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|DUMMY_TABLE
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|DUMMY_BYTES_2
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|loc2
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hc
operator|.
name|locateRegion
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|DUMMY_TABLE
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|DUMMY_BYTES_2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|loc2
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hc
operator|.
name|getRegionLocation
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|DUMMY_TABLE
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|DUMMY_BYTES_3
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|loc2
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hc
operator|.
name|locateRegion
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|DUMMY_TABLE
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|DUMMY_BYTES_3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|loc3
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hc
operator|.
name|getRegionLocation
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|DUMMY_TABLE
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|FAILS
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|loc2
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hc
operator|.
name|locateRegion
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|DUMMY_TABLE
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|FAILS
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|loc2
argument_list|)
expr_stmt|;
name|NonceGenerator
name|ng
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NonceGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hc
operator|.
name|getNonceGenerator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ng
argument_list|)
expr_stmt|;
return|return
name|hc
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHTablePutSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|HTable
name|ht
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HTable
operator|.
name|class
argument_list|)
decl_stmt|;
name|ht
operator|.
name|ap
operator|=
operator|new
name|MyAsyncProcess
argument_list|(
name|createHConnection
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ht
operator|.
name|getWriteBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ht
operator|.
name|getWriteBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doHTableFailedPut
parameter_list|(
name|boolean
name|bufferOn
parameter_list|)
throws|throws
name|Exception
block|{
name|HTable
name|ht
init|=
operator|new
name|HTable
argument_list|()
decl_stmt|;
name|MyAsyncProcess
name|ap
init|=
operator|new
name|MyAsyncProcess
argument_list|(
name|createHConnection
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ht
operator|.
name|ap
operator|=
name|ap
expr_stmt|;
name|ht
operator|.
name|setAutoFlush
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|bufferOn
condition|)
block|{
name|ht
operator|.
name|setWriteBufferSize
argument_list|(
literal|1024L
operator|*
literal|1024L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ht
operator|.
name|setWriteBufferSize
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
name|Put
name|put
init|=
name|createPut
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|ht
operator|.
name|currentWriteBufferSize
argument_list|)
expr_stmt|;
try|try
block|{
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
if|if
condition|(
name|bufferOn
condition|)
block|{
name|ht
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|expected
parameter_list|)
block|{     }
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|ht
operator|.
name|currentWriteBufferSize
argument_list|)
expr_stmt|;
comment|// The table should have sent one request, maybe after multiple attempts
name|AsyncRequestFuture
name|ars
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AsyncRequestFuture
name|someReqs
range|:
name|ap
operator|.
name|allReqs
control|)
block|{
if|if
condition|(
name|someReqs
operator|.
name|getResults
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
continue|continue;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ars
operator|==
literal|null
argument_list|)
expr_stmt|;
name|ars
operator|=
name|someReqs
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ars
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|ars
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// This should not raise any exception, puts have been 'received' before by the catch.
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHTableFailedPutWithBuffer
parameter_list|()
throws|throws
name|Exception
block|{
name|doHTableFailedPut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHTableFailedPutWithoutBuffer
parameter_list|()
throws|throws
name|Exception
block|{
name|doHTableFailedPut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHTableFailedPutAndNewPut
parameter_list|()
throws|throws
name|Exception
block|{
name|HTable
name|ht
init|=
operator|new
name|HTable
argument_list|()
decl_stmt|;
name|MyAsyncProcess
name|ap
init|=
operator|new
name|MyAsyncProcess
argument_list|(
name|createHConnection
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ht
operator|.
name|ap
operator|=
name|ap
expr_stmt|;
name|ht
operator|.
name|setAutoFlush
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ht
operator|.
name|setWriteBufferSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
name|createPut
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|ap
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
comment|// Let's do all the retries.
comment|// We're testing that we're behaving as we were behaving in 0.94: sending exceptions in the
comment|//  doPut if it fails.
comment|// This said, it's not a very easy going behavior. For example, when we insert a list of
comment|//  puts, we may raise an exception in the middle of the list. It's then up to the caller to
comment|//  manage what was inserted, what was tried but failed, and what was not even tried.
name|p
operator|=
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ht
operator|.
name|writeAsyncBuffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ht
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|expected
parameter_list|)
block|{     }
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"the put should not been inserted."
argument_list|,
literal|0
argument_list|,
name|ht
operator|.
name|writeAsyncBuffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithNoClearOnFail
parameter_list|()
throws|throws
name|IOException
block|{
name|HTable
name|ht
init|=
operator|new
name|HTable
argument_list|()
decl_stmt|;
name|ht
operator|.
name|ap
operator|=
operator|new
name|MyAsyncProcess
argument_list|(
name|createHConnection
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ht
operator|.
name|setAutoFlush
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
name|createPut
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ht
operator|.
name|writeAsyncBuffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ht
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedWithDetailsException
name|expected
parameter_list|)
block|{     }
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ht
operator|.
name|writeAsyncBuffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedWithDetailsException
name|expected
parameter_list|)
block|{     }
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ht
operator|.
name|writeAsyncBuffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBatch
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HTable
name|ht
init|=
operator|new
name|HTable
argument_list|()
decl_stmt|;
name|ht
operator|.
name|connection
operator|=
operator|new
name|MyConnectionImpl
argument_list|()
expr_stmt|;
name|ht
operator|.
name|multiAp
operator|=
operator|new
name|MyAsyncProcess
argument_list|(
name|ht
operator|.
name|connection
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|//<=== the bad apple, position 4
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|//<=== another bad apple, position 6
name|Object
index|[]
name|res
init|=
operator|new
name|Object
index|[
name|puts
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
try|try
block|{
name|ht
operator|.
name|processBatch
argument_list|(
name|puts
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|expected
parameter_list|)
block|{     }
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
index|[
literal|0
index|]
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
index|[
literal|1
index|]
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
index|[
literal|2
index|]
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
index|[
literal|3
index|]
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
index|[
literal|4
index|]
argument_list|,
name|failure
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
index|[
literal|5
index|]
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
index|[
literal|6
index|]
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testErrorsServers
parameter_list|()
throws|throws
name|IOException
block|{
name|HTable
name|ht
init|=
operator|new
name|HTable
argument_list|()
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|ConnectionManager
operator|.
name|RETRIES_BY_SERVER_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// set default writeBufferSize
name|ht
operator|.
name|setWriteBufferSize
argument_list|(
name|configuration
operator|.
name|getLong
argument_list|(
literal|"hbase.client.write.buffer"
argument_list|,
literal|2097152
argument_list|)
argument_list|)
expr_stmt|;
name|ht
operator|.
name|connection
operator|=
operator|new
name|MyConnectionImpl
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|MyAsyncProcess
name|ap
init|=
operator|new
name|MyAsyncProcess
argument_list|(
name|ht
operator|.
name|connection
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ht
operator|.
name|ap
operator|=
name|ap
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ht
operator|.
name|ap
operator|.
name|createServerErrorTracker
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ht
operator|.
name|ap
operator|.
name|serverTrackerTimeout
operator|>
literal|200
argument_list|)
expr_stmt|;
name|ht
operator|.
name|ap
operator|.
name|serverTrackerTimeout
operator|=
literal|1
expr_stmt|;
name|Put
name|p
init|=
name|createPut
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ht
operator|.
name|setAutoFlush
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
try|try
block|{
name|ht
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedWithDetailsException
name|expected
parameter_list|)
block|{     }
comment|// Checking that the ErrorsServers came into play and didn't make us stop immediately
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ap
operator|.
name|getRetriesRequested
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test simulates multiple regions on 2 servers. We should have 2 multi requests and    *  2 threads: 1 per server, this whatever the number of regions.    */
annotation|@
name|Test
specifier|public
name|void
name|testThreadCreation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NB_REGS
init|=
literal|100
decl_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|hrls
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|(
name|NB_REGS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Get
argument_list|>
name|gets
init|=
operator|new
name|ArrayList
argument_list|<
name|Get
argument_list|>
argument_list|(
name|NB_REGS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_REGS
condition|;
name|i
operator|++
control|)
block|{
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|DUMMY_TABLE
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|*
literal|10L
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|*
literal|10L
operator|+
literal|9L
argument_list|)
argument_list|,
literal|false
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|HRegionLocation
name|hrl
init|=
operator|new
name|HRegionLocation
argument_list|(
name|hri
argument_list|,
name|i
operator|%
literal|2
operator|==
literal|0
condition|?
name|sn
else|:
name|sn2
argument_list|)
decl_stmt|;
name|hrls
operator|.
name|add
argument_list|(
name|hrl
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|*
literal|10L
argument_list|)
argument_list|)
decl_stmt|;
name|gets
operator|.
name|add
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
name|HTable
name|ht
init|=
operator|new
name|HTable
argument_list|()
decl_stmt|;
name|MyConnectionImpl2
name|con
init|=
operator|new
name|MyConnectionImpl2
argument_list|(
name|hrls
argument_list|)
decl_stmt|;
name|ht
operator|.
name|connection
operator|=
name|con
expr_stmt|;
name|MyAsyncProcess
name|ap
init|=
operator|new
name|MyAsyncProcess
argument_list|(
name|con
argument_list|,
name|conf
argument_list|,
name|con
operator|.
name|nbThreads
argument_list|)
decl_stmt|;
name|ht
operator|.
name|multiAp
operator|=
name|ap
expr_stmt|;
name|ht
operator|.
name|batch
argument_list|(
name|gets
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ap
operator|.
name|nbActions
operator|.
name|get
argument_list|()
argument_list|,
name|NB_REGS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1 multi response per server"
argument_list|,
literal|2
argument_list|,
name|ap
operator|.
name|nbMultiResponse
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1 thread per server"
argument_list|,
literal|2
argument_list|,
name|con
operator|.
name|nbThreads
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|nbReg
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_REGS
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|con
operator|.
name|usedRegions
index|[
name|i
index|]
condition|)
name|nbReg
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nbReg="
operator|+
name|nbReg
argument_list|,
name|nbReg
argument_list|,
name|NB_REGS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyResult
parameter_list|(
name|AsyncRequestFuture
name|ars
parameter_list|,
name|boolean
modifier|...
name|expected
parameter_list|)
block|{
name|Object
index|[]
name|actual
init|=
name|ars
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|actual
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
operator|!
operator|(
name|actual
index|[
name|i
index|]
operator|instanceof
name|Throwable
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param regCnt  the region: 1 to 3.    * @param success if true, the put will succeed.    * @return a put    */
specifier|private
name|Put
name|createPut
parameter_list|(
name|int
name|regCnt
parameter_list|,
name|boolean
name|success
parameter_list|)
block|{
name|Put
name|p
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|p
operator|=
operator|new
name|Put
argument_list|(
name|FAILS
argument_list|)
expr_stmt|;
block|}
else|else
switch|switch
condition|(
name|regCnt
condition|)
block|{
case|case
literal|1
case|:
name|p
operator|=
operator|new
name|Put
argument_list|(
name|DUMMY_BYTES_1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|p
operator|=
operator|new
name|Put
argument_list|(
name|DUMMY_BYTES_2
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|p
operator|=
operator|new
name|Put
argument_list|(
name|DUMMY_BYTES_3
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown "
operator|+
name|regCnt
argument_list|)
throw|;
block|}
name|p
operator|.
name|add
argument_list|(
name|DUMMY_BYTES_1
argument_list|,
name|DUMMY_BYTES_1
argument_list|,
name|DUMMY_BYTES_1
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
block|}
end_class

end_unit

