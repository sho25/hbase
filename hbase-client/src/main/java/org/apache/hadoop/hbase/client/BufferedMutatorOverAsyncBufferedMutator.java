begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FutureUtils
operator|.
name|addListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * {@link BufferedMutator} implementation based on {@link AsyncBufferedMutator}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|BufferedMutatorOverAsyncBufferedMutator
implements|implements
name|BufferedMutator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BufferedMutatorOverAsyncBufferedMutator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AsyncBufferedMutator
name|mutator
decl_stmt|;
specifier|private
specifier|final
name|ExceptionListener
name|listener
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
init|=
name|ConcurrentHashMap
operator|.
name|newKeySet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|bufferedSize
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentLinkedQueue
argument_list|<
name|Pair
argument_list|<
name|Mutation
argument_list|,
name|Throwable
argument_list|>
argument_list|>
name|errors
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|BufferedMutatorOverAsyncBufferedMutator
parameter_list|(
name|AsyncBufferedMutator
name|mutator
parameter_list|,
name|ExceptionListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|mutator
operator|=
name|mutator
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getName
parameter_list|()
block|{
return|return
name|mutator
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|mutator
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutate
parameter_list|(
name|Mutation
name|mutation
parameter_list|)
throws|throws
name|IOException
block|{
name|mutate
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|mutation
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Pattern
name|ADDR_MSG_MATCHER
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"Call to (\\S+) failed"
argument_list|)
decl_stmt|;
comment|// not always work, so may return an empty string
specifier|private
name|String
name|getHostnameAndPort
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|ADDR_MSG_MATCHER
operator|.
name|matcher
argument_list|(
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
specifier|private
name|RetriesExhaustedWithDetailsException
name|makeError
parameter_list|()
block|{
name|List
argument_list|<
name|Row
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Throwable
argument_list|>
name|throwables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|hostnameAndPorts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|Pair
argument_list|<
name|Mutation
argument_list|,
name|Throwable
argument_list|>
name|pair
init|=
name|errors
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|rows
operator|.
name|add
argument_list|(
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|throwables
operator|.
name|add
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
name|hostnameAndPorts
operator|.
name|add
argument_list|(
name|getHostnameAndPort
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RetriesExhaustedWithDetailsException
argument_list|(
name|throwables
argument_list|,
name|rows
argument_list|,
name|hostnameAndPorts
argument_list|)
return|;
block|}
specifier|private
name|void
name|internalFlush
parameter_list|()
throws|throws
name|RetriesExhaustedWithDetailsException
block|{
comment|// should get the future array before calling mutator.flush, otherwise we may hit an infinite
comment|// wait, since someone may add new future to the map after we calling the flush.
name|CompletableFuture
argument_list|<
name|?
argument_list|>
index|[]
name|toWait
init|=
name|futures
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
argument_list|<
name|?
argument_list|>
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|mutator
operator|.
name|flush
argument_list|()
expr_stmt|;
try|try
block|{
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|toWait
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompletionException
name|e
parameter_list|)
block|{
comment|// just ignore, we will record the actual error in the errors field
name|LOG
operator|.
name|debug
argument_list|(
literal|"Flush failed, you should get an exception thrown to your code"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RetriesExhaustedWithDetailsException
name|error
init|=
name|makeError
argument_list|()
decl_stmt|;
name|listener
operator|.
name|onException
argument_list|(
name|error
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutate
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Mutation
argument_list|>
name|mutations
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|fs
init|=
name|mutator
operator|.
name|mutate
argument_list|(
name|mutations
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|fs
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|toComplete
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|toComplete
argument_list|)
expr_stmt|;
name|Mutation
name|mutation
init|=
name|mutations
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|heapSize
init|=
name|mutation
operator|.
name|heapSize
argument_list|()
decl_stmt|;
name|bufferedSize
operator|.
name|addAndGet
argument_list|(
name|heapSize
argument_list|)
expr_stmt|;
name|addListener
argument_list|(
name|fs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
parameter_list|(
name|r
parameter_list|,
name|e
parameter_list|)
lambda|->
block|{
name|futures
operator|.
name|remove
argument_list|(
name|toComplete
argument_list|)
expr_stmt|;
name|bufferedSize
operator|.
name|addAndGet
argument_list|(
operator|-
name|heapSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|newPair
argument_list|(
name|mutation
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|toComplete
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toComplete
operator|.
name|complete
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|bufferedSize
operator|.
name|get
argument_list|()
operator|>
name|mutator
operator|.
name|getWriteBufferSize
argument_list|()
operator|*
literal|2
condition|)
block|{
comment|// We have too many mutations which are not completed yet, let's call a flush to release the
comment|// memory to prevent OOM
comment|// We use buffer size * 2 is because that, the async buffered mutator will flush
comment|// automatically when the write buffer size limit is reached, so usually we do not need to
comment|// call flush explicitly if the buffered size is only a little larger than the buffer size
comment|// limit. But if the buffered size is too large(2 times of the buffer size), we still need
comment|// to block here to prevent OOM.
name|internalFlush
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RetriesExhaustedWithDetailsException
name|error
init|=
name|makeError
argument_list|()
decl_stmt|;
name|listener
operator|.
name|onException
argument_list|(
name|error
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|internalFlush
argument_list|()
expr_stmt|;
name|mutator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|internalFlush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getWriteBufferSize
parameter_list|()
block|{
return|return
name|mutator
operator|.
name|getWriteBufferSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRpcTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
comment|// no effect
block|}
annotation|@
name|Override
specifier|public
name|void
name|setOperationTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
comment|// no effect
block|}
block|}
end_class

end_unit

