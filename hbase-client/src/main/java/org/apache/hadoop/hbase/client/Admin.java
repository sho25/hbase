begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FutureUtils
operator|.
name|get
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CacheEvictionStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|ReplicationPeerConfigUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|TableCFs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|security
operator|.
name|SecurityCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaSnapshotView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|FailedLogCloseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|SyncReplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|GetUserPermissionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|UserPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|HBaseSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RestoreSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|UnknownSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * The administrative API for HBase. Obtain an instance from {@link Connection#getAdmin()} and  * call {@link #close()} when done.  *<p>Admin can be used to create, drop, list, enable and disable and otherwise modify tables,  * as well as perform other administrative operations.  *  * @see ConnectionFactory  * @see Connection  * @see Table  * @since 0.99.0  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
interface|interface
name|Admin
extends|extends
name|Abortable
extends|,
name|Closeable
block|{
comment|/**    * Return the operation timeout for a rpc call.    * @see #getSyncWaitTimeout()    */
name|int
name|getOperationTimeout
parameter_list|()
function_decl|;
comment|/**    * Return the blocking wait time for an asynchronous operation. Can be configured by    * {@code hbase.client.sync.wait.timeout.msec}.    *<p/>    * For several operations, such as createTable, deleteTable, etc, the rpc call will finish right    * after we schedule a procedure at master side, so the timeout will not be controlled by the    * above {@link #getOperationTimeout()}. And timeout value here tells you how much time we will    * wait until the procedure at master side is finished.    *<p/>    * In general, you can consider that the implementation for XXXX method is just a    * XXXXAsync().get(getSyncWaitTimeout(), TimeUnit.MILLISECONDS).    * @see #getOperationTimeout()    */
name|int
name|getSyncWaitTimeout
parameter_list|()
function_decl|;
annotation|@
name|Override
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
function_decl|;
annotation|@
name|Override
name|boolean
name|isAborted
parameter_list|()
function_decl|;
comment|/**    * @return Connection used by this object.    */
name|Connection
name|getConnection
parameter_list|()
function_decl|;
comment|/**    * @param tableName Table to check.    * @return<code>true</code> if table exists already.    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|tableExists
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * List all the userspace tables.    *    * @return a list of TableDescriptors    * @throws IOException if a remote or network exception occurs    */
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|listTableDescriptors
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * List all the userspace tables that match the given pattern.    *    * @param pattern The compiled regular expression to match against    * @return a list of TableDescriptors    * @throws IOException if a remote or network exception occurs    * @see #listTableDescriptors()    */
specifier|default
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|listTableDescriptors
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listTableDescriptors
argument_list|(
name|pattern
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * List all the tables matching the given pattern.    *    * @param pattern The compiled regular expression to match against    * @param includeSysTables<code>false</code> to match only against userspace tables    * @return a list of TableDescriptors    * @throws IOException if a remote or network exception occurs    * @see #listTableDescriptors()    */
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|listTableDescriptors
parameter_list|(
name|Pattern
name|pattern
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * List all of the names of userspace tables.    *    * @return TableName[] table names    * @throws IOException if a remote or network exception occurs    */
name|TableName
index|[]
name|listTableNames
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * List all of the names of userspace tables.    * @param pattern The regular expression to match against    * @return array of table names    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|TableName
index|[]
name|listTableNames
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listTableNames
argument_list|(
name|pattern
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * List all of the names of userspace tables.    * @param pattern The regular expression to match against    * @param includeSysTables<code>false</code> to match only against userspace tables    * @return TableName[] table names    * @throws IOException if a remote or network exception occurs    */
name|TableName
index|[]
name|listTableNames
parameter_list|(
name|Pattern
name|pattern
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get a table descriptor.    *    * @param tableName as a {@link TableName}    * @return the tableDescriptor    * @throws org.apache.hadoop.hbase.TableNotFoundException    * @throws IOException if a remote or network exception occurs    */
name|TableDescriptor
name|getDescriptor
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|TableNotFoundException
throws|,
name|IOException
function_decl|;
comment|/**    * Creates a new table. Synchronous operation.    *    * @param desc table descriptor for table    * @throws IllegalArgumentException if the table name is reserved    * @throws org.apache.hadoop.hbase.MasterNotRunningException if master is not running    * @throws org.apache.hadoop.hbase.TableExistsException if table already exists (If concurrent    * threads, the table may have been created between test-for-existence and attempt-at-creation).    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|createTable
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|createTableAsync
argument_list|(
name|desc
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new table with the specified number of regions.  The start key specified will become    * the end key of the first region of the table, and the end key specified will become the start    * key of the last region of the table (the first region has a null start key and the last region    * has a null end key). BigInteger math will be used to divide the key range specified into enough    * segments to make the required number of total regions. Synchronous operation.    *    * @param desc table descriptor for table    * @param startKey beginning of key range    * @param endKey end of key range    * @param numRegions the total number of regions to create    * @throws IOException if a remote or network exception occurs    * @throws IllegalArgumentException if the table name is reserved    * @throws org.apache.hadoop.hbase.MasterNotRunningException if master is not running    * @throws org.apache.hadoop.hbase.TableExistsException if table already exists (If concurrent    * threads, the table may have been created between test-for-existence and attempt-at-creation).    */
name|void
name|createTable
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|int
name|numRegions
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Creates a new table with an initial set of empty regions defined by the specified split keys.    * The total number of regions created will be the number of split keys plus one. Synchronous    * operation. Note : Avoid passing empty split key.    *    * @param desc table descriptor for table    * @param splitKeys array of split keys for the initial regions of the table    * @throws IllegalArgumentException if the table name is reserved, if the split keys are repeated    * and if the split key has empty byte array.    * @throws org.apache.hadoop.hbase.MasterNotRunningException if master is not running    * @throws org.apache.hadoop.hbase.TableExistsException if table already exists (If concurrent    * threads, the table may have been created between test-for-existence and attempt-at-creation).    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|createTable
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|,
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|createTableAsync
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new table but does not block and wait for it to come online. You can use    * Future.get(long, TimeUnit) to wait on the operation to complete. It may throw    * ExecutionException if there was an error while executing the operation or TimeoutException in    * case the wait timeout was not long enough to allow the operation to complete.    *<p/>    * Throws IllegalArgumentException Bad table name, if the split keys are repeated and if the split    * key has empty byte array.    * @param desc table descriptor for table    * @throws IOException if a remote or network exception occurs    * @return the result of the async creation. You can use Future.get(long, TimeUnit) to wait on the    *         operation to complete.    */
name|Future
argument_list|<
name|Void
argument_list|>
name|createTableAsync
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Creates a new table but does not block and wait for it to come online.    * You can use Future.get(long, TimeUnit) to wait on the operation to complete.    * It may throw ExecutionException if there was an error while executing the operation    * or TimeoutException in case the wait timeout was not long enough to allow the    * operation to complete.    * Throws IllegalArgumentException Bad table name, if the split keys    *    are repeated and if the split key has empty byte array.    *    * @param desc table descriptor for table    * @param splitKeys keys to check if the table has been created with all split keys    * @throws IOException if a remote or network exception occurs    * @return the result of the async creation. You can use Future.get(long, TimeUnit) to wait on the    *         operation to complete.    */
name|Future
argument_list|<
name|Void
argument_list|>
name|createTableAsync
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|,
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Deletes a table. Synchronous operation.    * @param tableName name of table to delete    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|deleteTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|deleteTableAsync
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes the table but does not block and wait for it to be completely removed.    * You can use Future.get(long, TimeUnit) to wait on the operation to complete.    * It may throw ExecutionException if there was an error while executing the operation    * or TimeoutException in case the wait timeout was not long enough to allow the    * operation to complete.    *    * @param tableName name of table to delete    * @throws IOException if a remote or network exception occurs    * @return the result of the async delete. You can use Future.get(long, TimeUnit)    *    to wait on the operation to complete.    */
name|Future
argument_list|<
name|Void
argument_list|>
name|deleteTableAsync
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Truncate a table. Synchronous operation.    * @param tableName name of table to truncate    * @param preserveSplits<code>true</code> if the splits should be preserved    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|truncateTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|boolean
name|preserveSplits
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|truncateTableAsync
argument_list|(
name|tableName
argument_list|,
name|preserveSplits
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Truncate the table but does not block and wait for it to be completely enabled. You can use    * Future.get(long, TimeUnit) to wait on the operation to complete. It may throw    * ExecutionException if there was an error while executing the operation or TimeoutException in    * case the wait timeout was not long enough to allow the operation to complete.    * @param tableName name of table to delete    * @param preserveSplits<code>true</code> if the splits should be preserved    * @throws IOException if a remote or network exception occurs    * @return the result of the async truncate. You can use Future.get(long, TimeUnit) to wait on the    *         operation to complete.    */
name|Future
argument_list|<
name|Void
argument_list|>
name|truncateTableAsync
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|boolean
name|preserveSplits
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Enable a table. May timeout. Use {@link #enableTableAsync(org.apache.hadoop.hbase.TableName)}    * and {@link #isTableEnabled(org.apache.hadoop.hbase.TableName)} instead. The table has to be in    * disabled state for it to be enabled.    * @param tableName name of the table    * @throws IOException There could be couple types of    *           IOException TableNotFoundException means the table doesn't exist.    *           TableNotDisabledException means the table isn't in disabled state.    * @see #isTableEnabled(org.apache.hadoop.hbase.TableName)    * @see #disableTable(org.apache.hadoop.hbase.TableName)    * @see #enableTableAsync(org.apache.hadoop.hbase.TableName)    */
specifier|default
name|void
name|enableTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|enableTableAsync
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Enable the table but does not block and wait for it to be completely enabled.    * You can use Future.get(long, TimeUnit) to wait on the operation to complete.    * It may throw ExecutionException if there was an error while executing the operation    * or TimeoutException in case the wait timeout was not long enough to allow the    * operation to complete.    *    * @param tableName name of table to delete    * @throws IOException if a remote or network exception occurs    * @return the result of the async enable. You can use Future.get(long, TimeUnit)    *    to wait on the operation to complete.    */
name|Future
argument_list|<
name|Void
argument_list|>
name|enableTableAsync
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Disable the table but does not block and wait for it to be completely disabled.    * You can use Future.get(long, TimeUnit) to wait on the operation to complete.    * It may throw ExecutionException if there was an error while executing the operation    * or TimeoutException in case the wait timeout was not long enough to allow the    * operation to complete.    *    * @param tableName name of table to delete    * @throws IOException if a remote or network exception occurs    * @return the result of the async disable. You can use Future.get(long, TimeUnit)    *    to wait on the operation to complete.    */
name|Future
argument_list|<
name|Void
argument_list|>
name|disableTableAsync
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Disable table and wait on completion. May timeout eventually. Use    * {@link #disableTableAsync(org.apache.hadoop.hbase.TableName)} and    * {@link #isTableDisabled(org.apache.hadoop.hbase.TableName)} instead. The table has to be in    * enabled state for it to be disabled.    * @param tableName    * @throws IOException There could be couple types of IOException TableNotFoundException means the    *           table doesn't exist. TableNotEnabledException means the table isn't in enabled state.    */
specifier|default
name|void
name|disableTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|disableTableAsync
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param tableName name of table to check    * @return<code>true</code> if table is on-line    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|isTableEnabled
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * @param tableName name of table to check    * @return<code>true</code> if table is off-line    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|isTableDisabled
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * @param tableName name of table to check    * @return<code>true</code> if all regions of the table are available    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|isTableAvailable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Add a column family to an existing table. Synchronous operation. Use    * {@link #addColumnFamilyAsync(TableName, ColumnFamilyDescriptor)} instead because it returns a    * {@link Future} from which you can learn whether success or failure.    * @param tableName name of the table to add column family to    * @param columnFamily column family descriptor of column family to be added    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|addColumnFamily
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ColumnFamilyDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|addColumnFamilyAsync
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a column family to an existing table. Asynchronous operation.    * You can use Future.get(long, TimeUnit) to wait on the operation to complete.    * It may throw ExecutionException if there was an error while executing the operation    * or TimeoutException in case the wait timeout was not long enough to allow the    * operation to complete.    *    * @param tableName name of the table to add column family to    * @param columnFamily column family descriptor of column family to be added    * @throws IOException if a remote or network exception occurs    * @return the result of the async add column family. You can use Future.get(long, TimeUnit) to    *         wait on the operation to complete.    */
name|Future
argument_list|<
name|Void
argument_list|>
name|addColumnFamilyAsync
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ColumnFamilyDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Delete a column family from a table. Synchronous operation. Use    * {@link #deleteColumnFamily(TableName, byte[])} instead because it returns a {@link Future} from    * which you can learn whether success or failure.    * @param tableName name of table    * @param columnFamily name of column family to be deleted    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|deleteColumnFamily
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|deleteColumnFamilyAsync
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete a column family from a table. Asynchronous operation.    * You can use Future.get(long, TimeUnit) to wait on the operation to complete.    * It may throw ExecutionException if there was an error while executing the operation    * or TimeoutException in case the wait timeout was not long enough to allow the    * operation to complete.    *    * @param tableName name of table    * @param columnFamily name of column family to be deleted    * @throws IOException if a remote or network exception occurs    * @return the result of the async delete column family. You can use Future.get(long, TimeUnit) to    *         wait on the operation to complete.    */
name|Future
argument_list|<
name|Void
argument_list|>
name|deleteColumnFamilyAsync
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Modify an existing column family on a table. Synchronous operation. Use    * {@link #modifyColumnFamilyAsync(TableName, ColumnFamilyDescriptor)} instead because it returns    * a {@link Future} from which you can learn whether success or failure.    * @param tableName name of table    * @param columnFamily new column family descriptor to use    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|modifyColumnFamily
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ColumnFamilyDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|modifyColumnFamilyAsync
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modify an existing column family on a table. Asynchronous operation.    * You can use Future.get(long, TimeUnit) to wait on the operation to complete.    * It may throw ExecutionException if there was an error while executing the operation    * or TimeoutException in case the wait timeout was not long enough to allow the    * operation to complete.    *    * @param tableName name of table    * @param columnFamily new column family descriptor to use    * @throws IOException if a remote or network exception occurs    * @return the result of the async modify column family. You can use Future.get(long, TimeUnit) to    *         wait on the operation to complete.    */
name|Future
argument_list|<
name|Void
argument_list|>
name|modifyColumnFamilyAsync
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ColumnFamilyDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get all the online regions on a region server.    *    * @return List of {@link RegionInfo}    * @throws IOException if a remote or network exception occurs    */
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getRegions
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Flush a table. Synchronous operation.    *    * @param tableName table to flush    * @throws IOException if a remote or network exception occurs    */
name|void
name|flush
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Flush an individual region. Synchronous operation.    *    * @param regionName region to flush    * @throws IOException if a remote or network exception occurs    */
name|void
name|flushRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Flush all regions on the region server. Synchronous operation.    * @param serverName the region server name to flush    * @throws IOException if a remote or network exception occurs    */
name|void
name|flushRegionServer
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Compact a table. Asynchronous operation in that this method requests that a    * Compaction run and then it returns. It does not wait on the completion of Compaction    * (it can take a while).    *    * @param tableName table to compact    * @throws IOException if a remote or network exception occurs    */
name|void
name|compact
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Compact an individual region. Asynchronous operation in that this method requests that a    * Compaction run and then it returns. It does not wait on the completion of Compaction    * (it can take a while).    *    * @param regionName region to compact    * @throws IOException if a remote or network exception occurs    */
name|void
name|compactRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Compact a column family within a table. Asynchronous operation in that this method requests    * that a Compaction run and then it returns. It does not wait on the completion of Compaction    * (it can take a while).    *    * @param tableName table to compact    * @param columnFamily column family within a table    * @throws IOException if a remote or network exception occurs    */
name|void
name|compact
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Compact a column family within a region. Asynchronous operation in that this method requests    * that a Compaction run and then it returns. It does not wait on the completion of Compaction    * (it can take a while).    *    * @param regionName region to compact    * @param columnFamily column family within a region    * @throws IOException if a remote or network exception occurs    */
name|void
name|compactRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Compact a table.  Asynchronous operation in that this method requests that a    * Compaction run and then it returns. It does not wait on the completion of Compaction    * (it can take a while).    *    * @param tableName table to compact    * @param compactType {@link org.apache.hadoop.hbase.client.CompactType}    * @throws IOException if a remote or network exception occurs    * @throws InterruptedException    */
name|void
name|compact
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|CompactType
name|compactType
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
function_decl|;
comment|/**    * Compact a column family within a table.  Asynchronous operation in that this method    * requests that a Compaction run and then it returns. It does not wait on the    * completion of Compaction (it can take a while).    *    * @param tableName table to compact    * @param columnFamily column family within a table    * @param compactType {@link org.apache.hadoop.hbase.client.CompactType}    * @throws IOException if not a mob column family or if a remote or network exception occurs    * @throws InterruptedException    */
name|void
name|compact
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|,
name|CompactType
name|compactType
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
function_decl|;
comment|/**    * Major compact a table. Asynchronous operation in that this method requests    * that a Compaction run and then it returns. It does not wait on the completion of Compaction    * (it can take a while).    *    * @param tableName table to major compact    * @throws IOException if a remote or network exception occurs    */
name|void
name|majorCompact
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Major compact a table or an individual region. Asynchronous operation in that this method requests    * that a Compaction run and then it returns. It does not wait on the completion of Compaction    * (it can take a while).    *    * @param regionName region to major compact    * @throws IOException if a remote or network exception occurs    */
name|void
name|majorCompactRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Major compact a column family within a table. Asynchronous operation in that this method requests    * that a Compaction run and then it returns. It does not wait on the completion of Compaction    * (it can take a while).    *    * @param tableName table to major compact    * @param columnFamily column family within a table    * @throws IOException if a remote or network exception occurs    */
name|void
name|majorCompact
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Major compact a column family within region. Asynchronous operation in that this method requests    * that a Compaction run and then it returns. It does not wait on the completion of Compaction    * (it can take a while).    *    * @param regionName egion to major compact    * @param columnFamily column family within a region    * @throws IOException if a remote or network exception occurs    */
name|void
name|majorCompactRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Major compact a table.  Asynchronous operation in that this method requests that a    * Compaction run and then it returns. It does not wait on the completion of Compaction    * (it can take a while).    *    * @param tableName table to compact    * @param compactType {@link org.apache.hadoop.hbase.client.CompactType}    * @throws IOException if a remote or network exception occurs    * @throws InterruptedException    */
name|void
name|majorCompact
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|CompactType
name|compactType
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
function_decl|;
comment|/**    * Major compact a column family within a table.  Asynchronous operation in that this method requests that a    * Compaction run and then it returns. It does not wait on the completion of Compaction    * (it can take a while).    *    * @param tableName table to compact    * @param columnFamily column family within a table    * @param compactType {@link org.apache.hadoop.hbase.client.CompactType}    * @throws IOException if not a mob column family or if a remote or network exception occurs    * @throws InterruptedException    */
name|void
name|majorCompact
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|,
name|CompactType
name|compactType
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
function_decl|;
comment|/**    * Turn the compaction on or off. Disabling compactions will also interrupt any currently ongoing    * compactions. This state is ephemeral. The setting will be lost on restart. Compaction    * can also be enabled/disabled by modifying configuration hbase.regionserver.compaction.enabled    * in hbase-site.xml.    *    * @param switchState     Set to<code>true</code> to enable,<code>false</code> to disable.    * @param serverNamesList list of region servers.    * @return Previous compaction states for region servers    * @throws IOException if a remote or network exception occurs    */
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Boolean
argument_list|>
name|compactionSwitch
parameter_list|(
name|boolean
name|switchState
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|serverNamesList
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Compact all regions on the region server. Asynchronous operation in that this method requests    * that a Compaction run and then it returns. It does not wait on the completion of Compaction (it    * can take a while).    * @param serverName the region server name    * @throws IOException if a remote or network exception occurs    */
name|void
name|compactRegionServer
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Major compact all regions on the region server. Asynchronous operation in that this method    * requests that a Compaction run and then it returns. It does not wait on the completion of    * Compaction (it can take a while).    * @param serverName the region server name    * @throws IOException if a remote or network exception occurs    */
name|void
name|majorCompactRegionServer
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Move the region<code>encodedRegionName</code> to a random server.    * @param encodedRegionName The encoded region name; i.e. the hash that makes up the region name    *          suffix: e.g. if regionname is    *<code>TestTable,0094429456,1289497600452.527db22f95c8a9e0116f0cc13c680396.</code>,    *          then the encoded region name is:<code>527db22f95c8a9e0116f0cc13c680396</code>.    * @throws IOException if we can't find a region named<code>encodedRegionName</code>    */
name|void
name|move
parameter_list|(
name|byte
index|[]
name|encodedRegionName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Move the region<code>rencodedRegionName</code> to<code>destServerName</code>.    * @param encodedRegionName The encoded region name; i.e. the hash that makes up the region name    *          suffix: e.g. if regionname is    *<code>TestTable,0094429456,1289497600452.527db22f95c8a9e0116f0cc13c680396.</code>,    *          then the encoded region name is:<code>527db22f95c8a9e0116f0cc13c680396</code>.    * @param destServerName The servername of the destination regionserver. If passed the empty byte    *          array we'll assign to a random server. A server name is made of host, port and    *          startcode. Here is an example:<code> host187.example.com,60020,1289493121758</code>    * @throws IOException if we can't find a region named<code>encodedRegionName</code>    * @deprecated since 2.2.0 and will be removed in 4.0.0. Use {@link #move(byte[], ServerName)}    *   instead. And if you want to move the region to a random server, please use    *   {@link #move(byte[])}.    * @see<a href="https://issues.apache.org/jira/browse/HBASE-22108">HBASE-22108</a>    */
annotation|@
name|Deprecated
specifier|default
name|void
name|move
parameter_list|(
name|byte
index|[]
name|encodedRegionName
parameter_list|,
name|byte
index|[]
name|destServerName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|destServerName
operator|==
literal|null
operator|||
name|destServerName
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|move
argument_list|(
name|encodedRegionName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|move
argument_list|(
name|encodedRegionName
argument_list|,
name|ServerName
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|destServerName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Move the region<code>encodedRegionName</code> to<code>destServerName</code>.    * @param encodedRegionName The encoded region name; i.e. the hash that makes up the region name    *          suffix: e.g. if regionname is    *<code>TestTable,0094429456,1289497600452.527db22f95c8a9e0116f0cc13c680396.</code>,    *          then the encoded region name is:<code>527db22f95c8a9e0116f0cc13c680396</code>.    * @param destServerName The servername of the destination regionserver. A server name is made of    *          host, port and startcode. Here is an example:    *<code> host187.example.com,60020,1289493121758</code>    * @throws IOException if we can't find a region named<code>encodedRegionName</code>    */
name|void
name|move
parameter_list|(
name|byte
index|[]
name|encodedRegionName
parameter_list|,
name|ServerName
name|destServerName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Assign a Region.    * @param regionName Region name to assign.    * @throws IOException if a remote or network exception occurs    */
name|void
name|assign
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Unassign a region from current hosting regionserver.  Region will then be assigned to a    * regionserver chosen at random.  Region could be reassigned back to the same server.  Use {@link    * #move(byte[], ServerName)} if you want to control the region movement.    *    * @param regionName Region to unassign. Will clear any existing RegionPlan if one found.    * @param force If<code>true</code>, force unassign (Will remove region from regions-in-transition too if    * present. If results in double assignment use hbck -fix to resolve. To be used by experts).    * @throws IOException if a remote or network exception occurs    */
name|void
name|unassign
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Offline specified region from master's in-memory state. It will not attempt to reassign the    * region as in unassign. This API can be used when a region not served by any region server and    * still online as per Master's in memory state. If this API is incorrectly used on active region    * then master will loose track of that region. This is a special method that should be used by    * experts or hbck.    *    * @param regionName Region to offline.    * @throws IOException if a remote or network exception occurs    */
name|void
name|offline
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Turn the load balancer on or off.    * @param onOrOff Set to<code>true</code> to enable,<code>false</code> to disable.    * @param synchronous If<code>true</code>, it waits until current balance() call, if outstanding,    *          to return.    * @return Previous balancer value    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|balancerSwitch
parameter_list|(
name|boolean
name|onOrOff
parameter_list|,
name|boolean
name|synchronous
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Invoke the balancer.  Will run the balancer and if regions to move, it will go ahead and do the    * reassignments.  Can NOT run for various reasons.  Check logs.    *    * @return<code>true</code> if balancer ran,<code>false</code> otherwise.    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|balance
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Invoke the balancer.  Will run the balancer and if regions to move, it will    * go ahead and do the reassignments. If there is region in transition, force parameter of true    * would still run balancer. Can *not* run for other reasons.  Check    * logs.    * @param force whether we should force balance even if there is region in transition    * @return<code>true</code> if balancer ran,<code>false</code> otherwise.    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|balance
parameter_list|(
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Query the current state of the balancer.    *    * @return<code>true</code> if the balancer is enabled,<code>false</code> otherwise.    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|isBalancerEnabled
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Clear all the blocks corresponding to this table from BlockCache. For expert-admins.    * Calling this API will drop all the cached blocks specific to a table from BlockCache.    * This can significantly impact the query performance as the subsequent queries will    * have to retrieve the blocks from underlying filesystem.    *    * @param tableName table to clear block cache    * @return CacheEvictionStats related to the eviction    * @throws IOException if a remote or network exception occurs    */
name|CacheEvictionStats
name|clearBlockCache
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Invoke region normalizer. Can NOT run for various reasons.  Check logs.    *    * @return<code>true</code> if region normalizer ran,<code>false</code> otherwise.    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|normalize
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Query the current state of the region normalizer.    *    * @return<code>true</code> if region normalizer is enabled,<code>false</code> otherwise.    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|isNormalizerEnabled
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Turn region normalizer on or off.    *    * @return Previous normalizer value    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|normalizerSwitch
parameter_list|(
name|boolean
name|on
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Enable/Disable the catalog janitor/    *    * @param onOrOff if<code>true</code> enables the catalog janitor    * @return the previous state    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|catalogJanitorSwitch
parameter_list|(
name|boolean
name|onOrOff
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Ask for a scan of the catalog table.    *    * @return the number of entries cleaned    * @throws IOException if a remote or network exception occurs    */
name|int
name|runCatalogJanitor
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Query on the catalog janitor state (Enabled/Disabled?).    *    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|isCatalogJanitorEnabled
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Enable/Disable the cleaner chore.    *    * @param onOrOff if<code>true</code> enables the cleaner chore    * @return the previous state    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|cleanerChoreSwitch
parameter_list|(
name|boolean
name|onOrOff
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Ask for cleaner chore to run.    *    * @return<code>true</code> if cleaner chore ran,<code>false</code> otherwise    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|runCleanerChore
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Query on the cleaner chore state (Enabled/Disabled?).    *    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|isCleanerChoreEnabled
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Merge two regions. Asynchronous operation.    * @param nameOfRegionA encoded or full name of region a    * @param nameOfRegionB encoded or full name of region b    * @param forcible<code>true</code> if do a compulsory merge, otherwise we will only merge two    *          adjacent regions    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|Future
argument_list|<
name|Void
argument_list|>
name|mergeRegionsAsync
parameter_list|(
name|byte
index|[]
name|nameOfRegionA
parameter_list|,
name|byte
index|[]
name|nameOfRegionB
parameter_list|,
name|boolean
name|forcible
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|nameofRegionsToMerge
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|nameofRegionsToMerge
index|[
literal|0
index|]
operator|=
name|nameOfRegionA
expr_stmt|;
name|nameofRegionsToMerge
index|[
literal|1
index|]
operator|=
name|nameOfRegionB
expr_stmt|;
return|return
name|mergeRegionsAsync
argument_list|(
name|nameofRegionsToMerge
argument_list|,
name|forcible
argument_list|)
return|;
block|}
comment|/**    * Merge regions. Asynchronous operation.    *<p/>    * You may get a {@code DoNotRetryIOException} if you pass more than two regions in but the master    * does not support merging more than two regions. At least till 2.2.0, we still only support    * merging two regions.    * @param nameofRegionsToMerge encoded or full name of daughter regions    * @param forcible<code>true</code> if do a compulsory merge, otherwise we will only merge    *          adjacent regions    * @throws IOException if a remote or network exception occurs    */
name|Future
argument_list|<
name|Void
argument_list|>
name|mergeRegionsAsync
parameter_list|(
name|byte
index|[]
index|[]
name|nameofRegionsToMerge
parameter_list|,
name|boolean
name|forcible
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Split a table. The method will execute split action for each region in table.    * @param tableName table to split    * @throws IOException if a remote or network exception occurs    */
name|void
name|split
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Split a table.    * @param tableName table to split    * @param splitPoint the explicit position to split on    * @throws IOException if a remote or network exception occurs    */
name|void
name|split
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|splitPoint
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Split an individual region. Asynchronous operation.    * @param regionName region to split    * @throws IOException if a remote or network exception occurs    */
name|Future
argument_list|<
name|Void
argument_list|>
name|splitRegionAsync
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Split an individual region. Asynchronous operation.    * @param regionName region to split    * @param splitPoint the explicit position to split on    * @throws IOException if a remote or network exception occurs    */
name|Future
argument_list|<
name|Void
argument_list|>
name|splitRegionAsync
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|byte
index|[]
name|splitPoint
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Modify an existing table, more IRB friendly version.    * @param td modified description of the table    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|modifyTable
parameter_list|(
name|TableDescriptor
name|td
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|modifyTableAsync
argument_list|(
name|td
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modify an existing table, more IRB (ruby) friendly version. Asynchronous operation. This means    * that it may be a while before your schema change is updated across all of the table. You can    * use Future.get(long, TimeUnit) to wait on the operation to complete. It may throw    * ExecutionException if there was an error while executing the operation or TimeoutException in    * case the wait timeout was not long enough to allow the operation to complete.    * @param td description of the table    * @throws IOException if a remote or network exception occurs    * @return the result of the async modify. You can use Future.get(long, TimeUnit) to wait on the    *         operation to complete    */
name|Future
argument_list|<
name|Void
argument_list|>
name|modifyTableAsync
parameter_list|(
name|TableDescriptor
name|td
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Shuts down the HBase cluster.    *<p/>    * Notice that, a success shutdown call may ends with an error since the remote server has already    * been shutdown.    * @throws IOException if a remote or network exception occurs    */
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Shuts down the current HBase master only. Does not shutdown the cluster.    *<p/>    * Notice that, a success stopMaster call may ends with an error since the remote server has    * already been shutdown.    * @throws IOException if a remote or network exception occurs    * @see #shutdown()    */
name|void
name|stopMaster
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Check whether Master is in maintenance mode.    *    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|isMasterInMaintenanceMode
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Stop the designated regionserver.    *    * @param hostnamePort Hostname and port delimited by a<code>:</code> as in    *<code>example.org:1234</code>    * @throws IOException if a remote or network exception occurs    */
name|void
name|stopRegionServer
parameter_list|(
name|String
name|hostnamePort
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get whole cluster metrics, containing status about:    *<pre>    * hbase version    * cluster id    * primary/backup master(s)    * master's coprocessors    * live/dead regionservers    * balancer    * regions in transition    *</pre>    * @return cluster metrics    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|ClusterMetrics
name|getClusterMetrics
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|ClusterMetrics
operator|.
name|Option
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get cluster status with a set of {@link Option} to get desired status.    * @return cluster status    * @throws IOException if a remote or network exception occurs    */
name|ClusterMetrics
name|getClusterMetrics
parameter_list|(
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * @return current master server name    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|ServerName
name|getMaster
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|MASTER
argument_list|)
argument_list|)
operator|.
name|getMasterName
argument_list|()
return|;
block|}
comment|/**    * @return current backup master list    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|getBackupMasters
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|BACKUP_MASTERS
argument_list|)
argument_list|)
operator|.
name|getBackupMasterNames
argument_list|()
return|;
block|}
comment|/**    * @return current live region servers list    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|getRegionServers
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**    * Get {@link RegionMetrics} of all regions hosted on a regionserver.    *    * @param serverName region server from which {@link RegionMetrics} is required.    * @return a {@link RegionMetrics} list of all regions hosted on a region server    * @throws IOException if a remote or network exception occurs    */
name|List
argument_list|<
name|RegionMetrics
argument_list|>
name|getRegionMetrics
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get {@link RegionMetrics} of all regions hosted on a regionserver for a table.    *    * @param serverName region server from which {@link RegionMetrics} is required.    * @param tableName get {@link RegionMetrics} of regions belonging to the table    * @return region metrics map of all regions of a table hosted on a region server    * @throws IOException if a remote or network exception occurs    */
name|List
argument_list|<
name|RegionMetrics
argument_list|>
name|getRegionMetrics
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * @return Configuration used by the instance.    */
name|Configuration
name|getConfiguration
parameter_list|()
function_decl|;
comment|/**    * Create a new namespace. Blocks until namespace has been successfully created or an exception is    * thrown.    * @param descriptor descriptor which describes the new namespace.    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|createNamespace
parameter_list|(
name|NamespaceDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|createNamespaceAsync
argument_list|(
name|descriptor
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new namespace.    * @param descriptor descriptor which describes the new namespace    * @return the result of the async create namespace operation. Use Future.get(long, TimeUnit) to    *         wait on the operation to complete.    * @throws IOException if a remote or network exception occurs    */
name|Future
argument_list|<
name|Void
argument_list|>
name|createNamespaceAsync
parameter_list|(
name|NamespaceDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Modify an existing namespace. Blocks until namespace has been successfully modified or an    * exception is thrown.    * @param descriptor descriptor which describes the new namespace    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|modifyNamespace
parameter_list|(
name|NamespaceDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|modifyNamespaceAsync
argument_list|(
name|descriptor
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modify an existing namespace.    * @param descriptor descriptor which describes the new namespace    * @return the result of the async modify namespace operation. Use Future.get(long, TimeUnit) to    *         wait on the operation to complete.    * @throws IOException if a remote or network exception occurs    */
name|Future
argument_list|<
name|Void
argument_list|>
name|modifyNamespaceAsync
parameter_list|(
name|NamespaceDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Delete an existing namespace. Only empty namespaces (no tables) can be removed. Blocks until    * namespace has been successfully deleted or an exception is thrown.    * @param name namespace name    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|deleteNamespace
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|deleteNamespaceAsync
argument_list|(
name|name
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete an existing namespace. Only empty namespaces (no tables) can be removed.    * @param name namespace name    * @return the result of the async delete namespace operation. Use Future.get(long, TimeUnit) to    *         wait on the operation to complete.    * @throws IOException if a remote or network exception occurs    */
name|Future
argument_list|<
name|Void
argument_list|>
name|deleteNamespaceAsync
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get a namespace descriptor by name.    * @param name name of namespace descriptor    * @return A descriptor    * @throws org.apache.hadoop.hbase.NamespaceNotFoundException    * @throws IOException if a remote or network exception occurs    */
name|NamespaceDescriptor
name|getNamespaceDescriptor
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NamespaceNotFoundException
throws|,
name|IOException
function_decl|;
comment|/**    * List available namespaces    *    * @return List of namespace names    * @throws IOException if a remote or network exception occurs    */
name|String
index|[]
name|listNamespaces
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * List available namespace descriptors    *    * @return List of descriptors    * @throws IOException if a remote or network exception occurs    */
name|NamespaceDescriptor
index|[]
name|listNamespaceDescriptors
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Get list of table descriptors by namespace.    * @param name namespace name    * @return returns a list of TableDescriptors    * @throws IOException if a remote or network exception occurs    */
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|listTableDescriptorsByNamespace
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get list of table names by namespace.    * @param name namespace name    * @return The list of table names in the namespace    * @throws IOException if a remote or network exception occurs    */
name|TableName
index|[]
name|listTableNamesByNamespace
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get the regions of a given table.    *    * @param tableName the name of the table    * @return List of {@link RegionInfo}.    * @throws IOException if a remote or network exception occurs    */
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getRegions
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
name|void
name|close
parameter_list|()
function_decl|;
comment|/**    * Get tableDescriptors.    *    * @param tableNames List of table names    * @return returns a list of TableDescriptors    * @throws IOException if a remote or network exception occurs    */
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|listTableDescriptors
parameter_list|(
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Abort a procedure.    *<p/>    * Do not use. Usually it is ignored but if not, it can do more damage than good. See hbck2.    * @param procId ID of the procedure to abort    * @param mayInterruptIfRunning if the proc completed at least one step, should it be aborted?    * @return<code>true</code> if aborted,<code>false</code> if procedure already completed or does    *         not exist    * @throws IOException if a remote or network exception occurs    * @deprecated since 2.1.1 and will be removed in 4.0.0.    * @see<a href="https://issues.apache.org/jira/browse/HBASE-21223">HBASE-21223</a>    */
annotation|@
name|Deprecated
specifier|default
name|boolean
name|abortProcedure
parameter_list|(
name|long
name|procId
parameter_list|,
name|boolean
name|mayInterruptIfRunning
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|get
argument_list|(
name|abortProcedureAsync
argument_list|(
name|procId
argument_list|,
name|mayInterruptIfRunning
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
comment|/**    * Abort a procedure but does not block and wait for completion.    * You can use Future.get(long, TimeUnit) to wait on the operation to complete.    * It may throw ExecutionException if there was an error while executing the operation    * or TimeoutException in case the wait timeout was not long enough to allow the    * operation to complete.    * Do not use. Usually it is ignored but if not, it can do more damage than good. See hbck2.    *    * @param procId ID of the procedure to abort    * @param mayInterruptIfRunning if the proc completed at least one step, should it be aborted?    * @return<code>true</code> if aborted,<code>false</code> if procedure already completed or does not exist    * @throws IOException if a remote or network exception occurs    * @deprecated since 2.1.1 and will be removed in 4.0.0.    * @see<a href="https://issues.apache.org/jira/browse/HBASE-21223">HBASE-21223</a>    */
annotation|@
name|Deprecated
name|Future
argument_list|<
name|Boolean
argument_list|>
name|abortProcedureAsync
parameter_list|(
name|long
name|procId
parameter_list|,
name|boolean
name|mayInterruptIfRunning
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get procedures.    * @return procedure list in JSON    * @throws IOException if a remote or network exception occurs    */
name|String
name|getProcedures
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Get locks.    * @return lock list in JSON    * @throws IOException if a remote or network exception occurs    */
name|String
name|getLocks
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Roll the log writer. I.e. for filesystem based write ahead logs, start writing to a new file.    *    * Note that the actual rolling of the log writer is asynchronous and may not be complete when    * this method returns. As a side effect of this call, the named region server may schedule    * store flushes at the request of the wal.    *    * @param serverName The servername of the regionserver.    * @throws IOException if a remote or network exception occurs    * @throws org.apache.hadoop.hbase.regionserver.wal.FailedLogCloseException    */
name|void
name|rollWALWriter
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
throws|,
name|FailedLogCloseException
function_decl|;
comment|/**    * Helper that delegates to getClusterMetrics().getMasterCoprocessorNames().    * @return an array of master coprocessors    * @see org.apache.hadoop.hbase.ClusterMetrics#getMasterCoprocessorNames()    */
specifier|default
name|List
argument_list|<
name|String
argument_list|>
name|getMasterCoprocessorNames
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|MASTER_COPROCESSORS
argument_list|)
argument_list|)
operator|.
name|getMasterCoprocessorNames
argument_list|()
return|;
block|}
comment|/**    * Get the current compaction state of a table. It could be in a major compaction, a minor    * compaction, both, or none.    *    * @param tableName table to examine    * @return the current compaction state    * @throws IOException if a remote or network exception occurs    */
name|CompactionState
name|getCompactionState
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get the current compaction state of a table. It could be in a compaction, or none.    *    * @param tableName table to examine    * @param compactType {@link org.apache.hadoop.hbase.client.CompactType}    * @return the current compaction state    * @throws IOException if a remote or network exception occurs    */
name|CompactionState
name|getCompactionState
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|CompactType
name|compactType
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get the current compaction state of region. It could be in a major compaction, a minor    * compaction, both, or none.    *    * @param regionName region to examine    * @return the current compaction state    * @throws IOException if a remote or network exception occurs    */
name|CompactionState
name|getCompactionStateForRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get the timestamp of the last major compaction for the passed table    *    * The timestamp of the oldest HFile resulting from a major compaction of that table,    * or 0 if no such HFile could be found.    *    * @param tableName table to examine    * @return the last major compaction timestamp or 0    * @throws IOException if a remote or network exception occurs    */
name|long
name|getLastMajorCompactionTimestamp
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get the timestamp of the last major compaction for the passed region.    *    * The timestamp of the oldest HFile resulting from a major compaction of that region,    * or 0 if no such HFile could be found.    *    * @param regionName region to examine    * @return the last major compaction timestamp or 0    * @throws IOException if a remote or network exception occurs    */
name|long
name|getLastMajorCompactionTimestampForRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Take a snapshot for the given table. If the table is enabled, a FLUSH-type snapshot will be    * taken. If the table is disabled, an offline snapshot is taken. Snapshots are taken    * sequentially even when requested concurrently, across all tables. Snapshots are considered    * unique based on<b>the name of the snapshot</b>. Attempts to take a snapshot with the same    * name (even a different type or with different parameters) will fail with a    * {@link org.apache.hadoop.hbase.snapshot.SnapshotCreationException} indicating the duplicate    * naming. Snapshot names follow the same naming constraints as tables in HBase. See    * {@link org.apache.hadoop.hbase.TableName#isLegalFullyQualifiedTableName(byte[])}.    * @param snapshotName name of the snapshot to be created    * @param tableName name of the table for which snapshot is created    * @throws IOException if a remote or network exception occurs    * @throws org.apache.hadoop.hbase.snapshot.SnapshotCreationException if snapshot creation failed    * @throws IllegalArgumentException if the snapshot request is formatted incorrectly    */
specifier|default
name|void
name|snapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|SnapshotCreationException
throws|,
name|IllegalArgumentException
block|{
name|snapshot
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|SnapshotType
operator|.
name|FLUSH
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create typed snapshot of the table. Snapshots are considered unique based on<b>the name of the    * snapshot</b>. Snapshots are taken sequentially even when requested concurrently, across    * all tables. Attempts to take a snapshot with the same name (even a different type or with    * different parameters) will fail with a {@link SnapshotCreationException} indicating the    * duplicate naming. Snapshot names follow the same naming constraints as tables in HBase. See    * {@link org.apache.hadoop.hbase.TableName#isLegalFullyQualifiedTableName(byte[])}.    * @param snapshotName name to give the snapshot on the filesystem. Must be unique from all other    *          snapshots stored on the cluster    * @param tableName name of the table to snapshot    * @param type type of snapshot to take    * @throws IOException we fail to reach the master    * @throws SnapshotCreationException if snapshot creation failed    * @throws IllegalArgumentException if the snapshot request is formatted incorrectly    */
specifier|default
name|void
name|snapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|SnapshotType
name|type
parameter_list|)
throws|throws
name|IOException
throws|,
name|SnapshotCreationException
throws|,
name|IllegalArgumentException
block|{
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create typed snapshot of the table. Snapshots are considered unique based on<b>the name of the    * snapshot</b>. Snapshots are taken sequentially even when requested concurrently, across    * all tables. Attempts to take a snapshot with the same name (even a different type or with    * different parameters) will fail with a {@link SnapshotCreationException} indicating the    * duplicate naming. Snapshot names follow the same naming constraints as tables in HBase. See    * {@link org.apache.hadoop.hbase.TableName#isLegalFullyQualifiedTableName(byte[])}.    * Snapshot can live with ttl seconds.    *    * @param snapshotName  name to give the snapshot on the filesystem. Must be unique from all other    *                      snapshots stored on the cluster    * @param tableName     name of the table to snapshot    * @param type          type of snapshot to take    * @param snapshotProps snapshot additional properties e.g. TTL    * @throws IOException               we fail to reach the master    * @throws SnapshotCreationException if snapshot creation failed    * @throws IllegalArgumentException  if the snapshot request is formatted incorrectly    */
specifier|default
name|void
name|snapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|SnapshotType
name|type
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|snapshotProps
parameter_list|)
throws|throws
name|IOException
throws|,
name|SnapshotCreationException
throws|,
name|IllegalArgumentException
block|{
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|type
argument_list|,
name|snapshotProps
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create typed snapshot of the table. Snapshots are considered unique based on<b>the name of the    * snapshot</b>. Snapshots are taken sequentially even when requested concurrently, across    * all tables. Attempts to take a snapshot with the same name (even a different type or with    * different parameters) will fail with a {@link SnapshotCreationException} indicating the    * duplicate naming. Snapshot names follow the same naming constraints as tables in HBase. See    * {@link org.apache.hadoop.hbase.TableName#isLegalFullyQualifiedTableName(byte[])}.    * Snapshot can live with ttl seconds.    *    * @param snapshotName  name to give the snapshot on the filesystem. Must be unique from all other    *                      snapshots stored on the cluster    * @param tableName     name of the table to snapshot    * @param snapshotProps snapshot additional properties e.g. TTL    * @throws IOException               we fail to reach the master    * @throws SnapshotCreationException if snapshot creation failed    * @throws IllegalArgumentException  if the snapshot request is formatted incorrectly    */
specifier|default
name|void
name|snapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|snapshotProps
parameter_list|)
throws|throws
name|IOException
throws|,
name|SnapshotCreationException
throws|,
name|IllegalArgumentException
block|{
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|SnapshotType
operator|.
name|FLUSH
argument_list|,
name|snapshotProps
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Take a snapshot and wait for the server to complete that snapshot (blocking). Snapshots are    * considered unique based on<b>the name of the snapshot</b>. Snapshots are taken sequentially    * even when requested concurrently, across all tables. Attempts to take a snapshot with the same    * name (even a different type or with different parameters) will fail with a    * {@link SnapshotCreationException} indicating the duplicate naming. Snapshot names follow the    * same naming constraints as tables in HBase. See    * {@link org.apache.hadoop.hbase.TableName#isLegalFullyQualifiedTableName(byte[])}. You should    * probably use {@link #snapshot(String, org.apache.hadoop.hbase.TableName)} unless you are sure    * about the type of snapshot that you want to take.    * @param snapshot snapshot to take    * @throws IOException or we lose contact with the master.    * @throws SnapshotCreationException if snapshot failed to be taken    * @throws IllegalArgumentException if the snapshot request is formatted incorrectly    */
name|void
name|snapshot
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
throws|,
name|SnapshotCreationException
throws|,
name|IllegalArgumentException
function_decl|;
comment|/**    * Take a snapshot without waiting for the server to complete that snapshot (asynchronous).    * Snapshots are considered unique based on<b>the name of the snapshot</b>. Snapshots are taken    * sequentially even when requested concurrently, across all tables.    *    * @param snapshot snapshot to take    * @throws IOException if the snapshot did not succeed or we lose contact with the master.    * @throws SnapshotCreationException if snapshot creation failed    * @throws IllegalArgumentException if the snapshot request is formatted incorrectly    */
name|Future
argument_list|<
name|Void
argument_list|>
name|snapshotAsync
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
throws|,
name|SnapshotCreationException
function_decl|;
comment|/**    * Check the current state of the passed snapshot. There are three possible states:<ol>    *<li>running - returns<tt>false</tt></li><li>finished - returns<tt>true</tt></li>    *<li>finished with error - throws the exception that caused the snapshot to fail</li></ol> The    * cluster only knows about the most recent snapshot. Therefore, if another snapshot has been    * run/started since the snapshot you are checking, you will receive an {@link    * org.apache.hadoop.hbase.snapshot.UnknownSnapshotException}.    *    * @param snapshot description of the snapshot to check    * @return<tt>true</tt> if the snapshot is completed,<tt>false</tt> if the snapshot is still    * running    * @throws IOException if we have a network issue    * @throws org.apache.hadoop.hbase.snapshot.HBaseSnapshotException if the snapshot failed    * @throws org.apache.hadoop.hbase.snapshot.UnknownSnapshotException if the requested snapshot is    * unknown    */
name|boolean
name|isSnapshotFinished
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
throws|,
name|HBaseSnapshotException
throws|,
name|UnknownSnapshotException
function_decl|;
comment|/**    * Restore the specified snapshot on the original table. (The table must be disabled) If the    * "hbase.snapshot.restore.take.failsafe.snapshot" configuration property is set to    *<code>true</code>, a snapshot of the current table is taken before executing the restore    * operation. In case of restore failure, the failsafe snapshot will be restored. If the restore    * completes without problem the failsafe snapshot is deleted.    * @param snapshotName name of the snapshot to restore    * @throws IOException if a remote or network exception occurs    * @throws RestoreSnapshotException if snapshot failed to be restored    * @throws IllegalArgumentException if the restore request is formatted incorrectly    */
name|void
name|restoreSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
throws|,
name|RestoreSnapshotException
function_decl|;
comment|/**    * Restore the specified snapshot on the original table. (The table must be disabled) If    * 'takeFailSafeSnapshot' is set to<code>true</code>, a snapshot of the current table is taken    * before executing the restore operation. In case of restore failure, the failsafe snapshot will    * be restored. If the restore completes without problem the failsafe snapshot is deleted. The    * failsafe snapshot name is configurable by using the property    * "hbase.snapshot.restore.failsafe.name".    * @param snapshotName name of the snapshot to restore    * @param takeFailSafeSnapshot<code>true</code> if the failsafe snapshot should be taken    * @throws IOException if a remote or network exception occurs    * @throws RestoreSnapshotException if snapshot failed to be restored    * @throws IllegalArgumentException if the restore request is formatted incorrectly    */
specifier|default
name|void
name|restoreSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|boolean
name|takeFailSafeSnapshot
parameter_list|)
throws|throws
name|IOException
throws|,
name|RestoreSnapshotException
block|{
name|restoreSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|takeFailSafeSnapshot
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Restore the specified snapshot on the original table. (The table must be disabled) If    * 'takeFailSafeSnapshot' is set to<code>true</code>, a snapshot of the current table is taken    * before executing the restore operation. In case of restore failure, the failsafe snapshot will    * be restored. If the restore completes without problem the failsafe snapshot is deleted. The    * failsafe snapshot name is configurable by using the property    * "hbase.snapshot.restore.failsafe.name".    * @param snapshotName name of the snapshot to restore    * @param takeFailSafeSnapshot<code>true</code> if the failsafe snapshot should be taken    * @param restoreAcl<code>true</code> to restore acl of snapshot    * @throws IOException if a remote or network exception occurs    * @throws RestoreSnapshotException if snapshot failed to be restored    * @throws IllegalArgumentException if the restore request is formatted incorrectly    */
name|void
name|restoreSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|boolean
name|takeFailSafeSnapshot
parameter_list|,
name|boolean
name|restoreAcl
parameter_list|)
throws|throws
name|IOException
throws|,
name|RestoreSnapshotException
function_decl|;
comment|/**    * Create a new table by cloning the snapshot content.    * @param snapshotName name of the snapshot to be cloned    * @param tableName name of the table where the snapshot will be restored    * @throws IOException if a remote or network exception occurs    * @throws TableExistsException if table to be created already exists    * @throws RestoreSnapshotException if snapshot failed to be cloned    * @throws IllegalArgumentException if the specified table has not a valid name    */
specifier|default
name|void
name|cloneSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|TableExistsException
throws|,
name|RestoreSnapshotException
block|{
name|cloneSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new table by cloning the snapshot content.    * @param snapshotName name of the snapshot to be cloned    * @param tableName name of the table where the snapshot will be restored    * @param restoreAcl<code>true</code> to clone acl into newly created table    * @throws IOException if a remote or network exception occurs    * @throws TableExistsException if table to be created already exists    * @throws RestoreSnapshotException if snapshot failed to be cloned    * @throws IllegalArgumentException if the specified table has not a valid name    */
specifier|default
name|void
name|cloneSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|boolean
name|restoreAcl
parameter_list|)
throws|throws
name|IOException
throws|,
name|TableExistsException
throws|,
name|RestoreSnapshotException
block|{
name|get
argument_list|(
name|cloneSnapshotAsync
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|restoreAcl
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new table by cloning the snapshot content, but does not block and wait for it to be    * completely cloned. You can use Future.get(long, TimeUnit) to wait on the operation to complete.    * It may throw ExecutionException if there was an error while executing the operation or    * TimeoutException in case the wait timeout was not long enough to allow the operation to    * complete.    * @param snapshotName name of the snapshot to be cloned    * @param tableName name of the table where the snapshot will be restored    * @throws IOException if a remote or network exception occurs    * @throws TableExistsException if table to be cloned already exists    * @return the result of the async clone snapshot. You can use Future.get(long, TimeUnit) to wait    *         on the operation to complete.    */
specifier|default
name|Future
argument_list|<
name|Void
argument_list|>
name|cloneSnapshotAsync
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|TableExistsException
block|{
return|return
name|cloneSnapshotAsync
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Create a new table by cloning the snapshot content.    * @param snapshotName name of the snapshot to be cloned    * @param tableName name of the table where the snapshot will be restored    * @param restoreAcl<code>true</code> to clone acl into newly created table    * @throws IOException if a remote or network exception occurs    * @throws TableExistsException if table to be created already exists    * @throws RestoreSnapshotException if snapshot failed to be cloned    * @throws IllegalArgumentException if the specified table has not a valid name    */
name|Future
argument_list|<
name|Void
argument_list|>
name|cloneSnapshotAsync
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|boolean
name|restoreAcl
parameter_list|)
throws|throws
name|IOException
throws|,
name|TableExistsException
throws|,
name|RestoreSnapshotException
function_decl|;
comment|/**    * Execute a distributed procedure on a cluster.    *    * @param signature A distributed procedure is uniquely identified by its signature (default the    * root ZK node name of the procedure).    * @param instance The instance name of the procedure. For some procedures, this parameter is    * optional.    * @param props Property/Value pairs of properties passing to the procedure    * @throws IOException if a remote or network exception occurs    */
name|void
name|execProcedure
parameter_list|(
name|String
name|signature
parameter_list|,
name|String
name|instance
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Execute a distributed procedure on a cluster.    *    * @param signature A distributed procedure is uniquely identified by its signature (default the    * root ZK node name of the procedure).    * @param instance The instance name of the procedure. For some procedures, this parameter is    * optional.    * @param props Property/Value pairs of properties passing to the procedure    * @return data returned after procedure execution. null if no return data.    * @throws IOException if a remote or network exception occurs    */
name|byte
index|[]
name|execProcedureWithReturn
parameter_list|(
name|String
name|signature
parameter_list|,
name|String
name|instance
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Check the current state of the specified procedure. There are three possible states:<ol>    *<li>running - returns<tt>false</tt></li><li>finished - returns<tt>true</tt></li>    *<li>finished with error - throws the exception that caused the procedure to fail</li></ol>    *    * @param signature The signature that uniquely identifies a procedure    * @param instance The instance name of the procedure    * @param props Property/Value pairs of properties passing to the procedure    * @return<code>true</code> if the specified procedure is finished successfully,<code>false</code> if it is still running    * @throws IOException if the specified procedure finished with error    */
name|boolean
name|isProcedureFinished
parameter_list|(
name|String
name|signature
parameter_list|,
name|String
name|instance
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * List completed snapshots.    *    * @return a list of snapshot descriptors for completed snapshots    * @throws IOException if a network error occurs    */
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|listSnapshots
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * List all the completed snapshots matching the given pattern.    *    * @param pattern The compiled regular expression to match against    * @return list of SnapshotDescription    * @throws IOException if a remote or network exception occurs    */
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|listSnapshots
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * List all the completed snapshots matching the given table name regular expression and snapshot    * name regular expression.    * @param tableNamePattern The compiled table name regular expression to match against    * @param snapshotNamePattern The compiled snapshot name regular expression to match against    * @return list of completed SnapshotDescription    * @throws IOException if a remote or network exception occurs    */
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|listTableSnapshots
parameter_list|(
name|Pattern
name|tableNamePattern
parameter_list|,
name|Pattern
name|snapshotNamePattern
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Delete an existing snapshot.    *    * @param snapshotName name of the snapshot    * @throws IOException if a remote or network exception occurs    */
name|void
name|deleteSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Delete existing snapshots whose names match the pattern passed.    *    * @param pattern pattern for names of the snapshot to match    * @throws IOException if a remote or network exception occurs    */
name|void
name|deleteSnapshots
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Delete all existing snapshots matching the given table name regular expression and snapshot    * name regular expression.    * @param tableNamePattern The compiled table name regular expression to match against    * @param snapshotNamePattern The compiled snapshot name regular expression to match against    * @throws IOException if a remote or network exception occurs    */
name|void
name|deleteTableSnapshots
parameter_list|(
name|Pattern
name|tableNamePattern
parameter_list|,
name|Pattern
name|snapshotNamePattern
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Apply the new quota settings.    *    * @param quota the quota settings    * @throws IOException if a remote or network exception occurs    */
name|void
name|setQuota
parameter_list|(
name|QuotaSettings
name|quota
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * List the quotas based on the filter.    * @param filter the quota settings filter    * @return the QuotaSetting list    * @throws IOException if a remote or network exception occurs    */
name|List
argument_list|<
name|QuotaSettings
argument_list|>
name|getQuota
parameter_list|(
name|QuotaFilter
name|filter
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Creates and returns a {@link com.google.protobuf.RpcChannel} instance connected to the active    * master.<p> The obtained {@link com.google.protobuf.RpcChannel} instance can be used to access    * a published coprocessor {@link com.google.protobuf.Service} using standard protobuf service    * invocations:</p><div style="background-color: #cccccc; padding: 2px">    *<blockquote><pre>    * CoprocessorRpcChannel channel = myAdmin.coprocessorService();    * MyService.BlockingInterface service = MyService.newBlockingStub(channel);    * MyCallRequest request = MyCallRequest.newBuilder()    *     ...    *     .build();    * MyCallResponse response = service.myCall(null, request);    *</pre></blockquote></div>    *    * @return A MasterCoprocessorRpcChannel instance    * @deprecated since 3.0.0, will removed in 4.0.0. This is too low level, please stop using it any    *             more. Use the coprocessorService methods in {@link AsyncAdmin} instead.    */
annotation|@
name|Deprecated
name|CoprocessorRpcChannel
name|coprocessorService
parameter_list|()
function_decl|;
comment|/**    * Creates and returns a {@link com.google.protobuf.RpcChannel} instance    * connected to the passed region server.    *    *<p>    * The obtained {@link com.google.protobuf.RpcChannel} instance can be used to access a published    * coprocessor {@link com.google.protobuf.Service} using standard protobuf service invocations:    *</p>    *    *<div style="background-color: #cccccc; padding: 2px">    *<blockquote><pre>    * CoprocessorRpcChannel channel = myAdmin.coprocessorService(serverName);    * MyService.BlockingInterface service = MyService.newBlockingStub(channel);    * MyCallRequest request = MyCallRequest.newBuilder()    *     ...    *     .build();    * MyCallResponse response = service.myCall(null, request);    *</pre></blockquote></div>    *    * @param serverName the server name to which the endpoint call is made    * @return A RegionServerCoprocessorRpcChannel instance    * @deprecated since 3.0.0, will removed in 4.0.0. This is too low level, please stop using it any    *             more. Use the coprocessorService methods in {@link AsyncAdmin} instead.    */
annotation|@
name|Deprecated
name|CoprocessorRpcChannel
name|coprocessorService
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
function_decl|;
comment|/**    * Update the configuration and trigger an online config change    * on the regionserver.    * @param server : The server whose config needs to be updated.    * @throws IOException if a remote or network exception occurs    */
name|void
name|updateConfiguration
parameter_list|(
name|ServerName
name|server
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Update the configuration and trigger an online config change    * on all the regionservers.    * @throws IOException if a remote or network exception occurs    */
name|void
name|updateConfiguration
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Get the info port of the current master if one is available.    * @return master info port    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|int
name|getMasterInfoPort
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|MASTER_INFO_PORT
argument_list|)
argument_list|)
operator|.
name|getMasterInfoPort
argument_list|()
return|;
block|}
comment|/**    * Return the set of supported security capabilities.    * @throws IOException if a remote or network exception occurs    * @throws UnsupportedOperationException    */
name|List
argument_list|<
name|SecurityCapability
argument_list|>
name|getSecurityCapabilities
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Turn the split switch on or off.    * @param enabled enabled or not    * @param synchronous If<code>true</code>, it waits until current split() call, if outstanding,    *          to return.    * @return Previous switch value    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|splitSwitch
parameter_list|(
name|boolean
name|enabled
parameter_list|,
name|boolean
name|synchronous
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Turn the merge switch on or off.    * @param enabled enabled or not    * @param synchronous If<code>true</code>, it waits until current merge() call, if outstanding,    *          to return.    * @return Previous switch value    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|mergeSwitch
parameter_list|(
name|boolean
name|enabled
parameter_list|,
name|boolean
name|synchronous
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Query the current state of the split switch.    * @return<code>true</code> if the switch is enabled,<code>false</code> otherwise.    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|isSplitEnabled
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Query the current state of the merge switch.    * @return<code>true</code> if the switch is enabled,<code>false</code> otherwise.    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|isMergeEnabled
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Add a new replication peer for replicating data to slave cluster.    * @param peerId a short name that identifies the peer    * @param peerConfig configuration for the replication peer    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|addReplicationPeer
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|IOException
block|{
name|addReplicationPeer
argument_list|(
name|peerId
argument_list|,
name|peerConfig
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a new replication peer for replicating data to slave cluster.    * @param peerId a short name that identifies the peer    * @param peerConfig configuration for the replication peer    * @param enabled peer state, true if ENABLED and false if DISABLED    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|addReplicationPeer
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|,
name|boolean
name|enabled
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|addReplicationPeerAsync
argument_list|(
name|peerId
argument_list|,
name|peerConfig
argument_list|,
name|enabled
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a new replication peer but does not block and wait for it.    *<p/>    * You can use Future.get(long, TimeUnit) to wait on the operation to complete. It may throw    * ExecutionException if there was an error while executing the operation or TimeoutException in    * case the wait timeout was not long enough to allow the operation to complete.    * @param peerId a short name that identifies the peer    * @param peerConfig configuration for the replication peer    * @return the result of the async operation    * @throws IOException IOException if a remote or network exception occurs    */
specifier|default
name|Future
argument_list|<
name|Void
argument_list|>
name|addReplicationPeerAsync
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|addReplicationPeerAsync
argument_list|(
name|peerId
argument_list|,
name|peerConfig
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Add a new replication peer but does not block and wait for it.    *<p>    * You can use Future.get(long, TimeUnit) to wait on the operation to complete. It may throw    * ExecutionException if there was an error while executing the operation or TimeoutException in    * case the wait timeout was not long enough to allow the operation to complete.    * @param peerId a short name that identifies the peer    * @param peerConfig configuration for the replication peer    * @param enabled peer state, true if ENABLED and false if DISABLED    * @return the result of the async operation    * @throws IOException IOException if a remote or network exception occurs    */
name|Future
argument_list|<
name|Void
argument_list|>
name|addReplicationPeerAsync
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|,
name|boolean
name|enabled
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Remove a peer and stop the replication.    * @param peerId a short name that identifies the peer    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|removeReplicationPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|removeReplicationPeerAsync
argument_list|(
name|peerId
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove a replication peer but does not block and wait for it.    *<p>    * You can use Future.get(long, TimeUnit) to wait on the operation to complete. It may throw    * ExecutionException if there was an error while executing the operation or TimeoutException in    * case the wait timeout was not long enough to allow the operation to complete.    * @param peerId a short name that identifies the peer    * @return the result of the async operation    * @throws IOException IOException if a remote or network exception occurs    */
name|Future
argument_list|<
name|Void
argument_list|>
name|removeReplicationPeerAsync
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Restart the replication stream to the specified peer.    * @param peerId a short name that identifies the peer    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|enableReplicationPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|enableReplicationPeerAsync
argument_list|(
name|peerId
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Enable a replication peer but does not block and wait for it.    *<p>    * You can use Future.get(long, TimeUnit) to wait on the operation to complete. It may throw    * ExecutionException if there was an error while executing the operation or TimeoutException in    * case the wait timeout was not long enough to allow the operation to complete.    * @param peerId a short name that identifies the peer    * @return the result of the async operation    * @throws IOException IOException if a remote or network exception occurs    */
name|Future
argument_list|<
name|Void
argument_list|>
name|enableReplicationPeerAsync
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Stop the replication stream to the specified peer.    * @param peerId a short name that identifies the peer    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|disableReplicationPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|disableReplicationPeerAsync
argument_list|(
name|peerId
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Disable a replication peer but does not block and wait for it.    *<p/>    * You can use Future.get(long, TimeUnit) to wait on the operation to complete. It may throw    * ExecutionException if there was an error while executing the operation or TimeoutException in    * case the wait timeout was not long enough to allow the operation to complete.    * @param peerId a short name that identifies the peer    * @return the result of the async operation    * @throws IOException IOException if a remote or network exception occurs    */
name|Future
argument_list|<
name|Void
argument_list|>
name|disableReplicationPeerAsync
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Returns the configured ReplicationPeerConfig for the specified peer.    * @param peerId a short name that identifies the peer    * @return ReplicationPeerConfig for the peer    * @throws IOException if a remote or network exception occurs    */
name|ReplicationPeerConfig
name|getReplicationPeerConfig
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Update the peerConfig for the specified peer.    * @param peerId a short name that identifies the peer    * @param peerConfig new config for the replication peer    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|updateReplicationPeerConfig
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|updateReplicationPeerConfigAsync
argument_list|(
name|peerId
argument_list|,
name|peerConfig
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update the peerConfig for the specified peer but does not block and wait for it.    *<p/>    * You can use Future.get(long, TimeUnit) to wait on the operation to complete. It may throw    * ExecutionException if there was an error while executing the operation or TimeoutException in    * case the wait timeout was not long enough to allow the operation to complete.    * @param peerId a short name that identifies the peer    * @param peerConfig new config for the replication peer    * @return the result of the async operation    * @throws IOException IOException if a remote or network exception occurs    */
name|Future
argument_list|<
name|Void
argument_list|>
name|updateReplicationPeerConfigAsync
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Append the replicable table column family config from the specified peer.    * @param id a short that identifies the cluster    * @param tableCfs A map from tableName to column family names    * @throws ReplicationException if tableCfs has conflict with existing config    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|appendReplicationPeerTableCFs
parameter_list|(
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
parameter_list|)
throws|throws
name|ReplicationException
throws|,
name|IOException
block|{
if|if
condition|(
name|tableCfs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"tableCfs is null"
argument_list|)
throw|;
block|}
name|ReplicationPeerConfig
name|peerConfig
init|=
name|getReplicationPeerConfig
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ReplicationPeerConfig
name|newPeerConfig
init|=
name|ReplicationPeerConfigUtil
operator|.
name|appendTableCFsToReplicationPeerConfig
argument_list|(
name|tableCfs
argument_list|,
name|peerConfig
argument_list|)
decl_stmt|;
name|updateReplicationPeerConfig
argument_list|(
name|id
argument_list|,
name|newPeerConfig
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove some table-cfs from config of the specified peer.    * @param id a short name that identifies the cluster    * @param tableCfs A map from tableName to column family names    * @throws ReplicationException if tableCfs has conflict with existing config    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|removeReplicationPeerTableCFs
parameter_list|(
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
parameter_list|)
throws|throws
name|ReplicationException
throws|,
name|IOException
block|{
if|if
condition|(
name|tableCfs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"tableCfs is null"
argument_list|)
throw|;
block|}
name|ReplicationPeerConfig
name|peerConfig
init|=
name|getReplicationPeerConfig
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ReplicationPeerConfig
name|newPeerConfig
init|=
name|ReplicationPeerConfigUtil
operator|.
name|removeTableCFsFromReplicationPeerConfig
argument_list|(
name|tableCfs
argument_list|,
name|peerConfig
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|updateReplicationPeerConfig
argument_list|(
name|id
argument_list|,
name|newPeerConfig
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return a list of replication peers.    * @return a list of replication peers description    * @throws IOException if a remote or network exception occurs    */
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
name|listReplicationPeers
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Return a list of replication peers.    * @param pattern The compiled regular expression to match peer id    * @return a list of replication peers description    * @throws IOException if a remote or network exception occurs    */
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
name|listReplicationPeers
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Transit current cluster to a new state in a synchronous replication peer.    * @param peerId a short name that identifies the peer    * @param state a new state of current cluster    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|void
name|transitReplicationPeerSyncReplicationState
parameter_list|(
name|String
name|peerId
parameter_list|,
name|SyncReplicationState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|transitReplicationPeerSyncReplicationStateAsync
argument_list|(
name|peerId
argument_list|,
name|state
argument_list|)
argument_list|,
name|getSyncWaitTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Transit current cluster to a new state in a synchronous replication peer. But does not block    * and wait for it.    *<p>    * You can use Future.get(long, TimeUnit) to wait on the operation to complete. It may throw    * ExecutionException if there was an error while executing the operation or TimeoutException in    * case the wait timeout was not long enough to allow the operation to complete.    * @param peerId a short name that identifies the peer    * @param state a new state of current cluster    * @throws IOException if a remote or network exception occurs    */
name|Future
argument_list|<
name|Void
argument_list|>
name|transitReplicationPeerSyncReplicationStateAsync
parameter_list|(
name|String
name|peerId
parameter_list|,
name|SyncReplicationState
name|state
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get the current cluster state in a synchronous replication peer.    * @param peerId a short name that identifies the peer    * @return the current cluster state    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|SyncReplicationState
name|getReplicationPeerSyncReplicationState
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
name|peers
init|=
name|listReplicationPeers
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|peerId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|peers
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|peers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPeerId
argument_list|()
operator|.
name|equals
argument_list|(
name|peerId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Replication peer "
operator|+
name|peerId
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
return|return
name|peers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSyncReplicationState
argument_list|()
return|;
block|}
comment|/**    * Mark region server(s) as decommissioned to prevent additional regions from getting    * assigned to them. Optionally unload the regions on the servers. If there are multiple servers    * to be decommissioned, decommissioning them at the same time can prevent wasteful region    * movements. Region unloading is asynchronous.    * @param servers The list of servers to decommission.    * @param offload True to offload the regions from the decommissioned servers    * @throws IOException if a remote or network exception occurs    */
name|void
name|decommissionRegionServers
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|,
name|boolean
name|offload
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * List region servers marked as decommissioned, which can not be assigned regions.    * @return List of decommissioned region servers.    * @throws IOException if a remote or network exception occurs    */
name|List
argument_list|<
name|ServerName
argument_list|>
name|listDecommissionedRegionServers
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Remove decommission marker from a region server to allow regions assignments.    * Load regions onto the server if a list of regions is given. Region loading is    * asynchronous.    * @param server The server to recommission.    * @param encodedRegionNames Regions to load onto the server.    * @throws IOException if a remote or network exception occurs    */
name|void
name|recommissionRegionServer
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|encodedRegionNames
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Find all table and column families that are replicated from this cluster    * @return the replicated table-cfs list of this cluster.    * @throws IOException if a remote or network exception occurs    */
name|List
argument_list|<
name|TableCFs
argument_list|>
name|listReplicatedTableCFs
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Enable a table's replication switch.    * @param tableName name of the table    * @throws IOException if a remote or network exception occurs    */
name|void
name|enableTableReplication
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Disable a table's replication switch.    * @param tableName name of the table    * @throws IOException if a remote or network exception occurs    */
name|void
name|disableTableReplication
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Clear compacting queues on a regionserver.    * @param serverName the region server name    * @param queues the set of queue name    * @throws IOException if a remote or network exception occurs    * @throws InterruptedException    */
name|void
name|clearCompactionQueues
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|queues
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
function_decl|;
comment|/**    * List dead region servers.    * @return List of dead region servers.    */
specifier|default
name|List
argument_list|<
name|ServerName
argument_list|>
name|listDeadServers
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|DEAD_SERVERS
argument_list|)
argument_list|)
operator|.
name|getDeadServerNames
argument_list|()
return|;
block|}
comment|/**    * Clear dead region servers from master.    * @param servers list of dead region servers.    * @throws IOException if a remote or network exception occurs    * @return List of servers that are not cleared    */
name|List
argument_list|<
name|ServerName
argument_list|>
name|clearDeadServers
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Create a new table by cloning the existent table schema.    * @param tableName name of the table to be cloned    * @param newTableName name of the new table where the table will be created    * @param preserveSplits True if the splits should be preserved    * @throws IOException if a remote or network exception occurs    */
name|void
name|cloneTableSchema
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|TableName
name|newTableName
parameter_list|,
name|boolean
name|preserveSplits
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Switch the rpc throttle enable state.    * @param enable Set to<code>true</code> to enable,<code>false</code> to disable.    * @return Previous rpc throttle enabled value    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|switchRpcThrottle
parameter_list|(
name|boolean
name|enable
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get if the rpc throttle is enabled.    * @return True if rpc throttle is enabled    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|isRpcThrottleEnabled
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Switch the exceed throttle quota. If enabled, user/table/namespace throttle quota    * can be exceeded if region server has availble quota.    * @param enable Set to<code>true</code> to enable,<code>false</code> to disable.    * @return Previous exceed throttle enabled value    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|exceedThrottleQuotaSwitch
parameter_list|(
specifier|final
name|boolean
name|enable
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Fetches the table sizes on the filesystem as tracked by the HBase Master.    * @throws IOException if a remote or network exception occurs    */
name|Map
argument_list|<
name|TableName
argument_list|,
name|Long
argument_list|>
name|getSpaceQuotaTableSizes
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Fetches the observed {@link SpaceQuotaSnapshotView}s observed by a RegionServer.    * @throws IOException if a remote or network exception occurs    */
name|Map
argument_list|<
name|TableName
argument_list|,
name|?
extends|extends
name|SpaceQuotaSnapshotView
argument_list|>
name|getRegionServerSpaceQuotaSnapshots
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Returns the Master's view of a quota on the given {@code namespace} or null if the Master has    * no quota information on that namespace.    * @throws IOException if a remote or network exception occurs    */
name|SpaceQuotaSnapshotView
name|getCurrentSpaceQuotaSnapshot
parameter_list|(
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Returns the Master's view of a quota on the given {@code tableName} or null if the Master has    * no quota information on that table.    * @throws IOException if a remote or network exception occurs    */
name|SpaceQuotaSnapshotView
name|getCurrentSpaceQuotaSnapshot
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Grants user specific permissions    * @param userPermission user name and the specific permission    * @param mergeExistingPermissions If set to false, later granted permissions will override    *          previous granted permissions. otherwise, it'll merge with previous granted    *          permissions.    * @throws IOException if a remote or network exception occurs    */
name|void
name|grant
parameter_list|(
name|UserPermission
name|userPermission
parameter_list|,
name|boolean
name|mergeExistingPermissions
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Revokes user specific permissions    * @param userPermission user name and the specific permission    * @throws IOException if a remote or network exception occurs    */
name|void
name|revoke
parameter_list|(
name|UserPermission
name|userPermission
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get the global/namespace/table permissions for user    * @param getUserPermissionsRequest A request contains which user, global, namespace or table    *          permissions needed    * @return The user and permission list    * @throws IOException if a remote or network exception occurs    */
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserPermissions
parameter_list|(
name|GetUserPermissionsRequest
name|getUserPermissionsRequest
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Check if the user has specific permissions    * @param userName the user name    * @param permissions the specific permission list    * @return True if user has the specific permissions    * @throws IOException if a remote or network exception occurs    */
name|List
argument_list|<
name|Boolean
argument_list|>
name|hasUserPermissions
parameter_list|(
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|Permission
argument_list|>
name|permissions
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Check if call user has specific permissions    * @param permissions the specific permission list    * @return True if user has the specific permissions    * @throws IOException if a remote or network exception occurs    */
specifier|default
name|List
argument_list|<
name|Boolean
argument_list|>
name|hasUserPermissions
parameter_list|(
name|List
argument_list|<
name|Permission
argument_list|>
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|hasUserPermissions
argument_list|(
literal|null
argument_list|,
name|permissions
argument_list|)
return|;
block|}
comment|/**    * Turn on or off the auto snapshot cleanup based on TTL.    *    * @param on Set to<code>true</code> to enable,<code>false</code> to disable.    * @param synchronous If<code>true</code>, it waits until current snapshot cleanup is completed,    *   if outstanding.    * @return Previous auto snapshot cleanup value    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|snapshotCleanupSwitch
parameter_list|(
specifier|final
name|boolean
name|on
parameter_list|,
specifier|final
name|boolean
name|synchronous
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Query the current state of the auto snapshot cleanup based on TTL.    *    * @return<code>true</code> if the auto snapshot cleanup is enabled,    *<code>false</code> otherwise.    * @throws IOException if a remote or network exception occurs    */
name|boolean
name|isSnapshotCleanupEnabled
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

