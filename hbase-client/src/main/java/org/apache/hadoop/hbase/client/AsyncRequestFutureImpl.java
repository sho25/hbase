begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CallQueueTooBigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RetryImmediatelyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|trace
operator|.
name|TraceUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|backoff
operator|.
name|ServerStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|ClientExceptionsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|Tracer
import|;
end_import

begin_comment
comment|/**  * The context, and return value, for a single submit/submitAll call.  * Note on how this class (one AP submit) works. Initially, all requests are split into groups  * by server; request is sent to each server in parallel; the RPC calls are not async so a  * thread per server is used. Every time some actions fail, regions/locations might have  * changed, so we re-group them by server and region again and send these groups in parallel  * too. The result, in case of retries, is a "tree" of threads, with parent exiting after  * scheduling children. This is why lots of code doesn't require any synchronization.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|AsyncRequestFutureImpl
parameter_list|<
name|CResult
parameter_list|>
implements|implements
name|AsyncRequestFuture
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AsyncRequestFutureImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RetryingTimeTracker
name|tracker
decl_stmt|;
comment|/**    * Runnable (that can be submitted to thread pool) that waits for when it's time    * to issue replica calls, finds region replicas, groups the requests by replica and    * issues the calls (on separate threads, via sendMultiAction).    * This is done on a separate thread because we don't want to wait on user thread for    * our asynchronous call, and usually we have to wait before making replica calls.    */
specifier|private
specifier|final
class|class
name|ReplicaCallIssuingRunnable
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Action
argument_list|>
name|initialActions
decl_stmt|;
specifier|public
name|ReplicaCallIssuingRunnable
parameter_list|(
name|List
argument_list|<
name|Action
argument_list|>
name|initialActions
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|initialActions
operator|=
name|initialActions
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|asyncProcess
operator|.
name|primaryCallTimeoutMicroseconds
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|done
operator|=
name|waitUntilDone
argument_list|(
name|startTime
operator|*
literal|1000L
operator|+
name|asyncProcess
operator|.
name|primaryCallTimeoutMicroseconds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Replica thread was interrupted - no replica calls: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|done
condition|)
return|return;
comment|// Done within primary timeout
name|Map
argument_list|<
name|ServerName
argument_list|,
name|MultiAction
argument_list|>
name|actionsByServer
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Action
argument_list|>
name|unknownLocActions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|replicaGetIndices
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|addReplicaActions
argument_list|(
name|i
argument_list|,
name|actionsByServer
argument_list|,
name|unknownLocActions
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|replicaGetIndice
range|:
name|replicaGetIndices
control|)
block|{
name|addReplicaActions
argument_list|(
name|replicaGetIndice
argument_list|,
name|actionsByServer
argument_list|,
name|unknownLocActions
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|actionsByServer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sendMultiAction
argument_list|(
name|actionsByServer
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
name|unknownLocActions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|unknownLocActions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|actionsByServer
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Action
name|action
range|:
name|unknownLocActions
control|)
block|{
name|addReplicaActionsAgain
argument_list|(
name|action
argument_list|,
name|actionsByServer
argument_list|)
expr_stmt|;
block|}
comment|// Some actions may have completely failed, they are handled inside addAgain.
if|if
condition|(
operator|!
name|actionsByServer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sendMultiAction
argument_list|(
name|actionsByServer
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Add replica actions to action map by server.      * @param index Index of the original action.      * @param actionsByServer The map by server to add it to.      */
specifier|private
name|void
name|addReplicaActions
parameter_list|(
name|int
name|index
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|MultiAction
argument_list|>
name|actionsByServer
parameter_list|,
name|List
argument_list|<
name|Action
argument_list|>
name|unknownReplicaActions
parameter_list|)
block|{
if|if
condition|(
name|results
index|[
name|index
index|]
operator|!=
literal|null
condition|)
return|return;
comment|// opportunistic. Never goes from non-null to null.
name|Action
name|action
init|=
name|initialActions
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|RegionLocations
name|loc
init|=
name|findAllLocationsOrFail
argument_list|(
name|action
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|==
literal|null
condition|)
return|return;
name|HRegionLocation
index|[]
name|locs
init|=
name|loc
operator|.
name|getRegionLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|locs
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No replicas found for "
operator|+
name|action
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
synchronized|synchronized
init|(
name|replicaResultLock
init|)
block|{
comment|// Don't run replica calls if the original has finished. We could do it e.g. if
comment|// original has already failed before first replica call (unlikely given retries),
comment|// but that would require additional synchronization w.r.t. returning to caller.
if|if
condition|(
name|results
index|[
name|index
index|]
operator|!=
literal|null
condition|)
return|return;
comment|// We set the number of calls here. After that any path must call setResult/setError.
comment|// True even for replicas that are not found - if we refuse to send we MUST set error.
name|results
index|[
name|index
index|]
operator|=
operator|new
name|ReplicaResultState
argument_list|(
name|locs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|locs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Action
name|replicaAction
init|=
operator|new
name|Action
argument_list|(
name|action
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|locs
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|asyncProcess
operator|.
name|addAction
argument_list|(
name|locs
index|[
name|i
index|]
operator|.
name|getServerName
argument_list|()
argument_list|,
name|locs
index|[
name|i
index|]
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|replicaAction
argument_list|,
name|actionsByServer
argument_list|,
name|nonceGroup
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unknownReplicaActions
operator|.
name|add
argument_list|(
name|replicaAction
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addReplicaActionsAgain
parameter_list|(
name|Action
name|action
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|MultiAction
argument_list|>
name|actionsByServer
parameter_list|)
block|{
if|if
condition|(
name|action
operator|.
name|getReplicaId
argument_list|()
operator|==
name|RegionReplicaUtil
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Cannot have default replica here"
argument_list|)
throw|;
block|}
name|HRegionLocation
name|loc
init|=
name|getReplicaLocationOrFail
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|==
literal|null
condition|)
return|return;
name|asyncProcess
operator|.
name|addAction
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|,
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|action
argument_list|,
name|actionsByServer
argument_list|,
name|nonceGroup
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Runnable (that can be submitted to thread pool) that submits MultiAction to a    * single server. The server call is synchronous, therefore we do it on a thread pool.    */
annotation|@
name|VisibleForTesting
specifier|final
class|class
name|SingleServerRequestRunnable
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|MultiAction
name|multiAction
decl_stmt|;
specifier|private
specifier|final
name|int
name|numAttempt
decl_stmt|;
specifier|private
specifier|final
name|ServerName
name|server
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|CancellableRegionServerCallable
argument_list|>
name|callsInProgress
decl_stmt|;
annotation|@
name|VisibleForTesting
name|SingleServerRequestRunnable
parameter_list|(
name|MultiAction
name|multiAction
parameter_list|,
name|int
name|numAttempt
parameter_list|,
name|ServerName
name|server
parameter_list|,
name|Set
argument_list|<
name|CancellableRegionServerCallable
argument_list|>
name|callsInProgress
parameter_list|)
block|{
name|this
operator|.
name|multiAction
operator|=
name|multiAction
expr_stmt|;
name|this
operator|.
name|numAttempt
operator|=
name|numAttempt
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|callsInProgress
operator|=
name|callsInProgress
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|AbstractResponse
name|res
init|=
literal|null
decl_stmt|;
name|CancellableRegionServerCallable
name|callable
init|=
name|currentCallable
decl_stmt|;
try|try
block|{
comment|// setup the callable based on the actions, if we don't have one already from the request
if|if
condition|(
name|callable
operator|==
literal|null
condition|)
block|{
name|callable
operator|=
name|createCallable
argument_list|(
name|server
argument_list|,
name|tableName
argument_list|,
name|multiAction
argument_list|)
expr_stmt|;
block|}
name|RpcRetryingCaller
argument_list|<
name|AbstractResponse
argument_list|>
name|caller
init|=
name|asyncProcess
operator|.
name|createCaller
argument_list|(
name|callable
argument_list|,
name|rpcTimeout
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|callsInProgress
operator|!=
literal|null
condition|)
block|{
name|callsInProgress
operator|.
name|add
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
name|res
operator|=
name|caller
operator|.
name|callWithoutRetries
argument_list|(
name|callable
argument_list|,
name|operationTimeout
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
comment|// Cancelled
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// The service itself failed . It may be an error coming from the communication
comment|//   layer, but, as well, a functional error raised by the server.
name|receiveGlobalFailure
argument_list|(
name|multiAction
argument_list|,
name|server
argument_list|,
name|numAttempt
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// This should not happen. Let's log& retry anyway.
name|LOG
operator|.
name|error
argument_list|(
literal|"#"
operator|+
name|asyncProcess
operator|.
name|id
operator|+
literal|", Caught throwable while calling. This is unexpected."
operator|+
literal|" Retrying. Server is "
operator|+
name|server
operator|+
literal|", tableName="
operator|+
name|tableName
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|receiveGlobalFailure
argument_list|(
name|multiAction
argument_list|,
name|server
argument_list|,
name|numAttempt
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|res
operator|.
name|type
argument_list|()
operator|==
name|AbstractResponse
operator|.
name|ResponseType
operator|.
name|MULTI
condition|)
block|{
comment|// Normal case: we received an answer from the server, and it's not an exception.
name|receiveMultiAction
argument_list|(
name|multiAction
argument_list|,
name|server
argument_list|,
operator|(
name|MultiResponse
operator|)
name|res
argument_list|,
name|numAttempt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|results
operator|!=
literal|null
condition|)
block|{
name|SingleResponse
name|singleResponse
init|=
operator|(
name|SingleResponse
operator|)
name|res
decl_stmt|;
name|results
index|[
literal|0
index|]
operator|=
name|singleResponse
operator|.
name|getEntry
argument_list|()
expr_stmt|;
block|}
name|decActionCounter
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Something really bad happened. We are on the send thread that will now die.
name|LOG
operator|.
name|error
argument_list|(
literal|"Internal AsyncProcess #"
operator|+
name|asyncProcess
operator|.
name|id
operator|+
literal|" error for "
operator|+
name|tableName
operator|+
literal|" processing for "
operator|+
name|server
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
finally|finally
block|{
name|asyncProcess
operator|.
name|decTaskCounters
argument_list|(
name|multiAction
operator|.
name|getRegions
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
if|if
condition|(
name|callsInProgress
operator|!=
literal|null
operator|&&
name|callable
operator|!=
literal|null
operator|&&
name|res
operator|!=
literal|null
condition|)
block|{
name|callsInProgress
operator|.
name|remove
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|final
name|Batch
operator|.
name|Callback
argument_list|<
name|CResult
argument_list|>
name|callback
decl_stmt|;
specifier|private
specifier|final
name|BatchErrors
name|errors
decl_stmt|;
specifier|private
specifier|final
name|ConnectionImplementation
operator|.
name|ServerErrorTracker
name|errorsByServer
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|pool
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|CancellableRegionServerCallable
argument_list|>
name|callsInProgress
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|actionsInProgress
init|=
operator|new
name|AtomicLong
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|/**    * The lock controls access to results. It is only held when populating results where    * there might be several callers (eventual consistency gets). For other requests,    * there's one unique call going on per result index.    */
specifier|private
specifier|final
name|Object
name|replicaResultLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/**    * Result array.  Null if results are not needed. Otherwise, each index corresponds to    * the action index in initial actions submitted. For most request types, has null-s for    * requests that are not done, and result/exception for those that are done.    * For eventual-consistency gets, initially the same applies; at some point, replica calls    * might be started, and ReplicaResultState is put at the corresponding indices. The    * returning calls check the type to detect when this is the case. After all calls are done,    * ReplicaResultState-s are replaced with results for the user.    */
specifier|private
specifier|final
name|Object
index|[]
name|results
decl_stmt|;
comment|/**    * Indices of replica gets in results. If null, all or no actions are replica-gets.    */
specifier|private
specifier|final
name|int
index|[]
name|replicaGetIndices
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|hasAnyReplicaGets
decl_stmt|;
specifier|private
specifier|final
name|long
name|nonceGroup
decl_stmt|;
specifier|private
specifier|final
name|CancellableRegionServerCallable
name|currentCallable
decl_stmt|;
specifier|private
specifier|final
name|int
name|operationTimeout
decl_stmt|;
specifier|private
specifier|final
name|int
name|rpcTimeout
decl_stmt|;
specifier|private
specifier|final
name|AsyncProcess
name|asyncProcess
decl_stmt|;
comment|/**    * For {@link AsyncRequestFutureImpl#manageError(int, Row, Retry, Throwable, ServerName)}. Only    * used to make logging more clear, we don't actually care why we don't retry.    */
specifier|public
enum|enum
name|Retry
block|{
name|YES
block|,
name|NO_LOCATION_PROBLEM
block|,
name|NO_NOT_RETRIABLE
block|,
name|NO_RETRIES_EXHAUSTED
block|,
name|NO_OTHER_SUCCEEDED
block|}
comment|/** Sync point for calls to multiple replicas for the same user request (Get).    * Created and put in the results array (we assume replica calls require results) when    * the replica calls are launched. See results for details of this process.    * POJO, all fields are public. To modify them, the object itself is locked. */
specifier|private
specifier|static
class|class
name|ReplicaResultState
block|{
specifier|public
name|ReplicaResultState
parameter_list|(
name|int
name|callCount
parameter_list|)
block|{
name|this
operator|.
name|callCount
operator|=
name|callCount
expr_stmt|;
block|}
comment|/** Number of calls outstanding, or 0 if a call succeeded (even with others outstanding). */
name|int
name|callCount
decl_stmt|;
comment|/** Errors for which it is not decided whether we will report them to user. If one of the      * calls succeeds, we will discard the errors that may have happened in the other calls. */
name|BatchErrors
name|replicaErrors
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[call count "
operator|+
name|callCount
operator|+
literal|"; errors "
operator|+
name|replicaErrors
operator|+
literal|"]"
return|;
block|}
block|}
specifier|public
name|AsyncRequestFutureImpl
parameter_list|(
name|AsyncProcessTask
name|task
parameter_list|,
name|List
argument_list|<
name|Action
argument_list|>
name|actions
parameter_list|,
name|long
name|nonceGroup
parameter_list|,
name|AsyncProcess
name|asyncProcess
parameter_list|)
block|{
name|this
operator|.
name|pool
operator|=
name|task
operator|.
name|getPool
argument_list|()
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|task
operator|.
name|getCallback
argument_list|()
expr_stmt|;
name|this
operator|.
name|nonceGroup
operator|=
name|nonceGroup
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|task
operator|.
name|getTableName
argument_list|()
expr_stmt|;
name|this
operator|.
name|actionsInProgress
operator|.
name|set
argument_list|(
name|actions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|getResults
argument_list|()
operator|==
literal|null
condition|)
block|{
name|results
operator|=
name|task
operator|.
name|getNeedResults
argument_list|()
condition|?
operator|new
name|Object
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
else|:
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|task
operator|.
name|getResults
argument_list|()
operator|.
name|length
operator|!=
name|actions
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"results.length"
argument_list|)
throw|;
block|}
name|this
operator|.
name|results
operator|=
name|task
operator|.
name|getResults
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|this
operator|.
name|results
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|results
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|replicaGetIndices
init|=
literal|null
decl_stmt|;
name|boolean
name|hasAnyReplicaGets
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
condition|)
block|{
comment|// Check to see if any requests might require replica calls.
comment|// We expect that many requests will consist of all or no multi-replica gets; in such
comment|// cases we would just use a boolean (hasAnyReplicaGets). If there's a mix, we will
comment|// store the list of action indexes for which replica gets are possible, and set
comment|// hasAnyReplicaGets to true.
name|boolean
name|hasAnyNonReplicaReqs
init|=
literal|false
decl_stmt|;
name|int
name|posInList
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Action
name|action
range|:
name|actions
control|)
block|{
name|boolean
name|isReplicaGet
init|=
name|AsyncProcess
operator|.
name|isReplicaGet
argument_list|(
name|action
operator|.
name|getAction
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isReplicaGet
condition|)
block|{
name|hasAnyReplicaGets
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|hasAnyNonReplicaReqs
condition|)
block|{
comment|// Mixed case
if|if
condition|(
name|replicaGetIndices
operator|==
literal|null
condition|)
block|{
name|replicaGetIndices
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|actions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|replicaGetIndices
operator|.
name|add
argument_list|(
name|posInList
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|hasAnyNonReplicaReqs
condition|)
block|{
comment|// The first non-multi-replica request in the action list.
name|hasAnyNonReplicaReqs
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|posInList
operator|>
literal|0
condition|)
block|{
comment|// Add all the previous requests to the index lists. We know they are all
comment|// replica-gets because this is the first non-multi-replica request in the list.
name|replicaGetIndices
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|actions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|posInList
condition|;
operator|++
name|i
control|)
block|{
name|replicaGetIndices
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|++
name|posInList
expr_stmt|;
block|}
block|}
name|this
operator|.
name|hasAnyReplicaGets
operator|=
name|hasAnyReplicaGets
expr_stmt|;
if|if
condition|(
name|replicaGetIndices
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|replicaGetIndices
operator|=
operator|new
name|int
index|[
name|replicaGetIndices
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|el
range|:
name|replicaGetIndices
control|)
block|{
name|this
operator|.
name|replicaGetIndices
index|[
name|i
operator|++
index|]
operator|=
name|el
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|replicaGetIndices
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|callsInProgress
operator|=
operator|!
name|hasAnyReplicaGets
condition|?
literal|null
else|:
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|CancellableRegionServerCallable
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|asyncProcess
operator|=
name|asyncProcess
expr_stmt|;
name|this
operator|.
name|errorsByServer
operator|=
name|createServerErrorTracker
argument_list|()
expr_stmt|;
name|this
operator|.
name|errors
operator|=
operator|(
name|asyncProcess
operator|.
name|globalErrors
operator|!=
literal|null
operator|)
condition|?
name|asyncProcess
operator|.
name|globalErrors
else|:
operator|new
name|BatchErrors
argument_list|()
expr_stmt|;
name|this
operator|.
name|operationTimeout
operator|=
name|task
operator|.
name|getOperationTimeout
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcTimeout
operator|=
name|task
operator|.
name|getRpcTimeout
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentCallable
operator|=
name|task
operator|.
name|getCallable
argument_list|()
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|getCallable
argument_list|()
operator|==
literal|null
condition|)
block|{
name|tracker
operator|=
operator|new
name|RetryingTimeTracker
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|Set
argument_list|<
name|CancellableRegionServerCallable
argument_list|>
name|getCallsInProgress
parameter_list|()
block|{
return|return
name|callsInProgress
return|;
block|}
annotation|@
name|VisibleForTesting
name|SingleServerRequestRunnable
name|createSingleServerRequest
parameter_list|(
name|MultiAction
name|multiAction
parameter_list|,
name|int
name|numAttempt
parameter_list|,
name|ServerName
name|server
parameter_list|,
name|Set
argument_list|<
name|CancellableRegionServerCallable
argument_list|>
name|callsInProgress
parameter_list|)
block|{
return|return
operator|new
name|SingleServerRequestRunnable
argument_list|(
name|multiAction
argument_list|,
name|numAttempt
argument_list|,
name|server
argument_list|,
name|callsInProgress
argument_list|)
return|;
block|}
comment|/**    * Group a list of actions per region servers, and send them.    *    * @param currentActions - the list of row to submit    * @param numAttempt - the current numAttempt (first attempt is 1)    */
name|void
name|groupAndSendMultiAction
parameter_list|(
name|List
argument_list|<
name|Action
argument_list|>
name|currentActions
parameter_list|,
name|int
name|numAttempt
parameter_list|)
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|MultiAction
argument_list|>
name|actionsByServer
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|isReplica
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|Action
argument_list|>
name|unknownReplicaActions
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Action
name|action
range|:
name|currentActions
control|)
block|{
name|RegionLocations
name|locs
init|=
name|findAllLocationsOrFail
argument_list|(
name|action
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|locs
operator|==
literal|null
condition|)
continue|continue;
name|boolean
name|isReplicaAction
init|=
operator|!
name|RegionReplicaUtil
operator|.
name|isDefaultReplica
argument_list|(
name|action
operator|.
name|getReplicaId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isReplica
operator|&&
operator|!
name|isReplicaAction
condition|)
block|{
comment|// This is the property of the current implementation, not a requirement.
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Replica and non-replica actions in the same retry"
argument_list|)
throw|;
block|}
name|isReplica
operator|=
name|isReplicaAction
expr_stmt|;
name|HRegionLocation
name|loc
init|=
name|locs
operator|.
name|getRegionLocation
argument_list|(
name|action
operator|.
name|getReplicaId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|==
literal|null
operator|||
name|loc
operator|.
name|getServerName
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isReplica
condition|)
block|{
if|if
condition|(
name|unknownReplicaActions
operator|==
literal|null
condition|)
block|{
name|unknownReplicaActions
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|unknownReplicaActions
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: relies on primary location always being fetched
name|manageLocationError
argument_list|(
name|action
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|byte
index|[]
name|regionName
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|AsyncProcess
operator|.
name|addAction
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|,
name|regionName
argument_list|,
name|action
argument_list|,
name|actionsByServer
argument_list|,
name|nonceGroup
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|doStartReplica
init|=
operator|(
name|numAttempt
operator|==
literal|1
operator|&&
operator|!
name|isReplica
operator|&&
name|hasAnyReplicaGets
operator|)
decl_stmt|;
name|boolean
name|hasUnknown
init|=
name|unknownReplicaActions
operator|!=
literal|null
operator|&&
operator|!
name|unknownReplicaActions
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|actionsByServer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If this is a first attempt to group and send, no replicas, we need replica thread.
name|sendMultiAction
argument_list|(
name|actionsByServer
argument_list|,
name|numAttempt
argument_list|,
operator|(
name|doStartReplica
operator|&&
operator|!
name|hasUnknown
operator|)
condition|?
name|currentActions
else|:
literal|null
argument_list|,
name|numAttempt
operator|>
literal|1
operator|&&
operator|!
name|hasUnknown
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasUnknown
condition|)
block|{
name|actionsByServer
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Action
name|action
range|:
name|unknownReplicaActions
control|)
block|{
name|HRegionLocation
name|loc
init|=
name|getReplicaLocationOrFail
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|==
literal|null
condition|)
continue|continue;
name|byte
index|[]
name|regionName
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|AsyncProcess
operator|.
name|addAction
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|,
name|regionName
argument_list|,
name|action
argument_list|,
name|actionsByServer
argument_list|,
name|nonceGroup
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|actionsByServer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sendMultiAction
argument_list|(
name|actionsByServer
argument_list|,
name|numAttempt
argument_list|,
name|doStartReplica
condition|?
name|currentActions
else|:
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|HRegionLocation
name|getReplicaLocationOrFail
parameter_list|(
name|Action
name|action
parameter_list|)
block|{
comment|// We are going to try get location once again. For each action, we'll do it once
comment|// from cache, because the previous calls in the loop might populate it.
name|int
name|replicaId
init|=
name|action
operator|.
name|getReplicaId
argument_list|()
decl_stmt|;
name|RegionLocations
name|locs
init|=
name|findAllLocationsOrFail
argument_list|(
name|action
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|locs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|// manageError already called
name|HRegionLocation
name|loc
init|=
name|locs
operator|.
name|getRegionLocation
argument_list|(
name|replicaId
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|==
literal|null
operator|||
name|loc
operator|.
name|getServerName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|locs
operator|=
name|findAllLocationsOrFail
argument_list|(
name|action
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|locs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|// manageError already called
name|loc
operator|=
name|locs
operator|.
name|getRegionLocation
argument_list|(
name|replicaId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|loc
operator|==
literal|null
operator|||
name|loc
operator|.
name|getServerName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|manageLocationError
argument_list|(
name|action
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|loc
return|;
block|}
specifier|private
name|void
name|manageLocationError
parameter_list|(
name|Action
name|action
parameter_list|,
name|Exception
name|ex
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Cannot get replica "
operator|+
name|action
operator|.
name|getReplicaId
argument_list|()
operator|+
literal|" location for "
operator|+
name|action
operator|.
name|getAction
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex
operator|==
literal|null
condition|)
block|{
name|ex
operator|=
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|manageError
argument_list|(
name|action
operator|.
name|getOriginalIndex
argument_list|()
argument_list|,
name|action
operator|.
name|getAction
argument_list|()
argument_list|,
name|Retry
operator|.
name|NO_LOCATION_PROBLEM
argument_list|,
name|ex
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RegionLocations
name|findAllLocationsOrFail
parameter_list|(
name|Action
name|action
parameter_list|,
name|boolean
name|useCache
parameter_list|)
block|{
if|if
condition|(
name|action
operator|.
name|getAction
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"#"
operator|+
name|asyncProcess
operator|.
name|id
operator|+
literal|", row cannot be null"
argument_list|)
throw|;
name|RegionLocations
name|loc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|loc
operator|=
name|asyncProcess
operator|.
name|connection
operator|.
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|action
operator|.
name|getAction
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|,
name|useCache
argument_list|,
literal|true
argument_list|,
name|action
operator|.
name|getReplicaId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|manageLocationError
argument_list|(
name|action
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|loc
return|;
block|}
comment|/**    * Send a multi action structure to the servers, after a delay depending on the attempt    * number. Asynchronous.    *    * @param actionsByServer the actions structured by regions    * @param numAttempt the attempt number.    * @param actionsForReplicaThread original actions for replica thread; null on non-first call.    */
name|void
name|sendMultiAction
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|MultiAction
argument_list|>
name|actionsByServer
parameter_list|,
name|int
name|numAttempt
parameter_list|,
name|List
argument_list|<
name|Action
argument_list|>
name|actionsForReplicaThread
parameter_list|,
name|boolean
name|reuseThread
parameter_list|)
block|{
comment|// Run the last item on the same thread if we are already on a send thread.
comment|// We hope most of the time it will be the only item, so we can cut down on threads.
name|int
name|actionsRemaining
init|=
name|actionsByServer
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// This iteration is by server (the HRegionLocation comparator is by server portion only).
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|MultiAction
argument_list|>
name|e
range|:
name|actionsByServer
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ServerName
name|server
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|MultiAction
name|multiAction
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|?
extends|extends
name|Runnable
argument_list|>
name|runnables
init|=
name|getNewMultiActionRunnable
argument_list|(
name|server
argument_list|,
name|multiAction
argument_list|,
name|numAttempt
argument_list|)
decl_stmt|;
comment|// make sure we correctly count the number of runnables before we try to reuse the send
comment|// thread, in case we had to split the request into different runnables because of backoff
if|if
condition|(
name|runnables
operator|.
name|size
argument_list|()
operator|>
name|actionsRemaining
condition|)
block|{
name|actionsRemaining
operator|=
name|runnables
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|// run all the runnables
comment|// HBASE-17475: Do not reuse the thread after stack reach a certain depth to prevent stack overflow
comment|// for now, we use HConstants.DEFAULT_HBASE_CLIENT_RETRIES_NUMBER to control the depth
for|for
control|(
name|Runnable
name|runnable
range|:
name|runnables
control|)
block|{
if|if
condition|(
operator|(
operator|--
name|actionsRemaining
operator|==
literal|0
operator|)
operator|&&
name|reuseThread
operator|&&
name|numAttempt
operator|%
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_RETRIES_NUMBER
operator|!=
literal|0
condition|)
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|pool
operator|.
name|submit
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|RejectedExecutionException
condition|)
block|{
comment|// This should never happen. But as the pool is provided by the end user,
comment|// let's secure this a little.
name|LOG
operator|.
name|warn
argument_list|(
literal|"#"
operator|+
name|asyncProcess
operator|.
name|id
operator|+
literal|", the task was rejected by the pool. This is unexpected."
operator|+
literal|" Server is "
operator|+
name|server
operator|.
name|getServerName
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// see #HBASE-14359 for more details
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught unexpected exception/error: "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|asyncProcess
operator|.
name|decTaskCounters
argument_list|(
name|multiAction
operator|.
name|getRegions
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
comment|// We're likely to fail again, but this will increment the attempt counter,
comment|// so it will finish.
name|receiveGlobalFailure
argument_list|(
name|multiAction
argument_list|,
name|server
argument_list|,
name|numAttempt
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|actionsForReplicaThread
operator|!=
literal|null
condition|)
block|{
name|startWaitingForReplicaCalls
argument_list|(
name|actionsForReplicaThread
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Collection
argument_list|<
name|?
extends|extends
name|Runnable
argument_list|>
name|getNewMultiActionRunnable
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|MultiAction
name|multiAction
parameter_list|,
name|int
name|numAttempt
parameter_list|)
block|{
comment|// no stats to manage, just do the standard action
if|if
condition|(
name|asyncProcess
operator|.
name|connection
operator|.
name|getStatisticsTracker
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|asyncProcess
operator|.
name|connection
operator|.
name|getConnectionMetrics
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|asyncProcess
operator|.
name|connection
operator|.
name|getConnectionMetrics
argument_list|()
operator|.
name|incrNormalRunners
argument_list|()
expr_stmt|;
block|}
name|asyncProcess
operator|.
name|incTaskCounters
argument_list|(
name|multiAction
operator|.
name|getRegions
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|SingleServerRequestRunnable
name|runnable
init|=
name|createSingleServerRequest
argument_list|(
name|multiAction
argument_list|,
name|numAttempt
argument_list|,
name|server
argument_list|,
name|callsInProgress
argument_list|)
decl_stmt|;
name|Tracer
name|tracer
init|=
name|Tracer
operator|.
name|curThreadTracer
argument_list|()
decl_stmt|;
if|if
condition|(
name|tracer
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|runnable
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|tracer
operator|.
name|wrap
argument_list|(
name|runnable
argument_list|,
literal|"AsyncProcess.sendMultiAction"
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// group the actions by the amount of delay
name|Map
argument_list|<
name|Long
argument_list|,
name|DelayingRunner
argument_list|>
name|actions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|multiAction
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// split up the actions
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Action
argument_list|>
argument_list|>
name|e
range|:
name|multiAction
operator|.
name|actions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Long
name|backoff
init|=
name|getBackoff
argument_list|(
name|server
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|DelayingRunner
name|runner
init|=
name|actions
operator|.
name|get
argument_list|(
name|backoff
argument_list|)
decl_stmt|;
if|if
condition|(
name|runner
operator|==
literal|null
condition|)
block|{
name|actions
operator|.
name|put
argument_list|(
name|backoff
argument_list|,
operator|new
name|DelayingRunner
argument_list|(
name|backoff
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|runner
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Runnable
argument_list|>
name|toReturn
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|actions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DelayingRunner
name|runner
range|:
name|actions
operator|.
name|values
argument_list|()
control|)
block|{
name|asyncProcess
operator|.
name|incTaskCounters
argument_list|(
name|runner
operator|.
name|getActions
argument_list|()
operator|.
name|getRegions
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|String
name|traceText
init|=
literal|"AsyncProcess.sendMultiAction"
decl_stmt|;
name|Runnable
name|runnable
init|=
name|createSingleServerRequest
argument_list|(
name|runner
operator|.
name|getActions
argument_list|()
argument_list|,
name|numAttempt
argument_list|,
name|server
argument_list|,
name|callsInProgress
argument_list|)
decl_stmt|;
comment|// use a delay runner only if we need to sleep for some time
if|if
condition|(
name|runner
operator|.
name|getSleepTime
argument_list|()
operator|>
literal|0
condition|)
block|{
name|runner
operator|.
name|setRunner
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
name|traceText
operator|=
literal|"AsyncProcess.clientBackoff.sendMultiAction"
expr_stmt|;
name|runnable
operator|=
name|runner
expr_stmt|;
if|if
condition|(
name|asyncProcess
operator|.
name|connection
operator|.
name|getConnectionMetrics
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|asyncProcess
operator|.
name|connection
operator|.
name|getConnectionMetrics
argument_list|()
operator|.
name|incrDelayRunners
argument_list|()
expr_stmt|;
name|asyncProcess
operator|.
name|connection
operator|.
name|getConnectionMetrics
argument_list|()
operator|.
name|updateDelayInterval
argument_list|(
name|runner
operator|.
name|getSleepTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|asyncProcess
operator|.
name|connection
operator|.
name|getConnectionMetrics
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|asyncProcess
operator|.
name|connection
operator|.
name|getConnectionMetrics
argument_list|()
operator|.
name|incrNormalRunners
argument_list|()
expr_stmt|;
block|}
block|}
name|runnable
operator|=
name|TraceUtil
operator|.
name|wrap
argument_list|(
name|runnable
argument_list|,
name|traceText
argument_list|)
expr_stmt|;
name|toReturn
operator|.
name|add
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
return|return
name|toReturn
return|;
block|}
comment|/**    * @param server server location where the target region is hosted    * @param regionName name of the region which we are going to write some data    * @return the amount of time the client should wait until it submit a request to the    * specified server and region    */
specifier|private
name|Long
name|getBackoff
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|ServerStatisticTracker
name|tracker
init|=
name|asyncProcess
operator|.
name|connection
operator|.
name|getStatisticsTracker
argument_list|()
decl_stmt|;
name|ServerStatistics
name|stats
init|=
name|tracker
operator|.
name|getStats
argument_list|(
name|server
argument_list|)
decl_stmt|;
return|return
name|asyncProcess
operator|.
name|connection
operator|.
name|getBackoffPolicy
argument_list|()
operator|.
name|getBackoffTime
argument_list|(
name|server
argument_list|,
name|regionName
argument_list|,
name|stats
argument_list|)
return|;
block|}
comment|/**    * Starts waiting to issue replica calls on a different thread; or issues them immediately.    */
specifier|private
name|void
name|startWaitingForReplicaCalls
parameter_list|(
name|List
argument_list|<
name|Action
argument_list|>
name|actionsForReplicaThread
parameter_list|)
block|{
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|ReplicaCallIssuingRunnable
name|replicaRunnable
init|=
operator|new
name|ReplicaCallIssuingRunnable
argument_list|(
name|actionsForReplicaThread
argument_list|,
name|startTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|asyncProcess
operator|.
name|primaryCallTimeoutMicroseconds
operator|==
literal|0
condition|)
block|{
comment|// Start replica calls immediately.
name|replicaRunnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Start the thread that may kick off replica gets.
comment|// TODO: we could do it on the same thread, but it's a user thread, might be a bad idea.
try|try
block|{
name|pool
operator|.
name|submit
argument_list|(
name|replicaRunnable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ree
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"#"
operator|+
name|asyncProcess
operator|.
name|id
operator|+
literal|", replica task was rejected by the pool - no replica calls"
argument_list|,
name|ree
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Check that we can retry acts accordingly: logs, set the error status.    *    * @param originalIndex the position in the list sent    * @param row           the row    * @param canRetry      if false, we won't retry whatever the settings.    * @param throwable     the throwable, if any (can be null)    * @param server        the location, if any (can be null)    * @return true if the action can be retried, false otherwise.    */
name|Retry
name|manageError
parameter_list|(
name|int
name|originalIndex
parameter_list|,
name|Row
name|row
parameter_list|,
name|Retry
name|canRetry
parameter_list|,
name|Throwable
name|throwable
parameter_list|,
name|ServerName
name|server
parameter_list|)
block|{
if|if
condition|(
name|canRetry
operator|==
name|Retry
operator|.
name|YES
operator|&&
name|throwable
operator|!=
literal|null
operator|&&
name|throwable
operator|instanceof
name|DoNotRetryIOException
condition|)
block|{
name|canRetry
operator|=
name|Retry
operator|.
name|NO_NOT_RETRIABLE
expr_stmt|;
block|}
if|if
condition|(
name|canRetry
operator|!=
name|Retry
operator|.
name|YES
condition|)
block|{
comment|// Batch.Callback<Res> was not called on failure in 0.94. We keep this.
name|setError
argument_list|(
name|originalIndex
argument_list|,
name|row
argument_list|,
name|throwable
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isActionComplete
argument_list|(
name|originalIndex
argument_list|,
name|row
argument_list|)
condition|)
block|{
name|canRetry
operator|=
name|Retry
operator|.
name|NO_OTHER_SUCCEEDED
expr_stmt|;
block|}
return|return
name|canRetry
return|;
block|}
comment|/**    * Resubmit all the actions from this multiaction after a failure.    *    * @param rsActions  the actions still to do from the initial list    * @param server   the destination    * @param numAttempt the number of attempts so far    * @param t the throwable (if any) that caused the resubmit    */
specifier|private
name|void
name|receiveGlobalFailure
parameter_list|(
name|MultiAction
name|rsActions
parameter_list|,
name|ServerName
name|server
parameter_list|,
name|int
name|numAttempt
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|errorsByServer
operator|.
name|reportServerError
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|Retry
name|canRetry
init|=
name|errorsByServer
operator|.
name|canTryMore
argument_list|(
name|numAttempt
argument_list|)
condition|?
name|Retry
operator|.
name|YES
else|:
name|Retry
operator|.
name|NO_RETRIES_EXHAUSTED
decl_stmt|;
if|if
condition|(
name|tableName
operator|==
literal|null
operator|&&
name|ClientExceptionsUtil
operator|.
name|isMetaClearingException
argument_list|(
name|t
argument_list|)
condition|)
block|{
comment|// tableName is null when we made a cross-table RPC call.
name|asyncProcess
operator|.
name|connection
operator|.
name|clearCaches
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|int
name|failed
init|=
literal|0
decl_stmt|,
name|stopped
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Action
argument_list|>
name|toReplay
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Action
argument_list|>
argument_list|>
name|e
range|:
name|rsActions
operator|.
name|actions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|regionName
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAction
argument_list|()
operator|.
name|getRow
argument_list|()
decl_stmt|;
comment|// Do not use the exception for updating cache because it might be coming from
comment|// any of the regions in the MultiAction.
try|try
block|{
if|if
condition|(
name|tableName
operator|!=
literal|null
condition|)
block|{
name|asyncProcess
operator|.
name|connection
operator|.
name|updateCachedLocations
argument_list|(
name|tableName
argument_list|,
name|regionName
argument_list|,
name|row
argument_list|,
name|ClientExceptionsUtil
operator|.
name|isMetaClearingException
argument_list|(
name|t
argument_list|)
condition|?
literal|null
else|:
name|t
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// That should never happen, but if it did, we want to make sure
comment|// we still process errors
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't update cached region locations: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Action
name|action
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Retry
name|retry
init|=
name|manageError
argument_list|(
name|action
operator|.
name|getOriginalIndex
argument_list|()
argument_list|,
name|action
operator|.
name|getAction
argument_list|()
argument_list|,
name|canRetry
argument_list|,
name|t
argument_list|,
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|retry
operator|==
name|Retry
operator|.
name|YES
condition|)
block|{
name|toReplay
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|retry
operator|==
name|Retry
operator|.
name|NO_OTHER_SUCCEEDED
condition|)
block|{
operator|++
name|stopped
expr_stmt|;
block|}
else|else
block|{
operator|++
name|failed
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|toReplay
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logNoResubmit
argument_list|(
name|server
argument_list|,
name|numAttempt
argument_list|,
name|rsActions
operator|.
name|size
argument_list|()
argument_list|,
name|t
argument_list|,
name|failed
argument_list|,
name|stopped
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resubmit
argument_list|(
name|server
argument_list|,
name|toReplay
argument_list|,
name|numAttempt
argument_list|,
name|rsActions
operator|.
name|size
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Log as much info as possible, and, if there is something to replay,    * submit it again after a back off sleep.    */
specifier|private
name|void
name|resubmit
parameter_list|(
name|ServerName
name|oldServer
parameter_list|,
name|List
argument_list|<
name|Action
argument_list|>
name|toReplay
parameter_list|,
name|int
name|numAttempt
parameter_list|,
name|int
name|failureCount
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
comment|// We have something to replay. We're going to sleep a little before.
comment|// We have two contradicting needs here:
comment|//  1) We want to get the new location after having slept, as it may change.
comment|//  2) We want to take into account the location when calculating the sleep time.
comment|//  3) If all this is just because the response needed to be chunked try again FAST.
comment|// It should be possible to have some heuristics to take the right decision. Short term,
comment|//  we go for one.
name|boolean
name|retryImmediately
init|=
name|throwable
operator|instanceof
name|RetryImmediatelyException
decl_stmt|;
name|int
name|nextAttemptNumber
init|=
name|retryImmediately
condition|?
name|numAttempt
else|:
name|numAttempt
operator|+
literal|1
decl_stmt|;
name|long
name|backOffTime
decl_stmt|;
if|if
condition|(
name|retryImmediately
condition|)
block|{
name|backOffTime
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|throwable
operator|instanceof
name|CallQueueTooBigException
condition|)
block|{
comment|// Give a special check on CQTBE, see #HBASE-17114
name|backOffTime
operator|=
name|errorsByServer
operator|.
name|calculateBackoffTime
argument_list|(
name|oldServer
argument_list|,
name|asyncProcess
operator|.
name|pauseForCQTBE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|backOffTime
operator|=
name|errorsByServer
operator|.
name|calculateBackoffTime
argument_list|(
name|oldServer
argument_list|,
name|asyncProcess
operator|.
name|pause
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numAttempt
operator|>
name|asyncProcess
operator|.
name|startLogErrorsCnt
condition|)
block|{
comment|// We use this value to have some logs when we have multiple failures, but not too many
comment|//  logs, as errors are to be expected when a region moves, splits and so on
name|LOG
operator|.
name|info
argument_list|(
name|createLog
argument_list|(
name|numAttempt
argument_list|,
name|failureCount
argument_list|,
name|toReplay
operator|.
name|size
argument_list|()
argument_list|,
name|oldServer
argument_list|,
name|throwable
argument_list|,
name|backOffTime
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|backOffTime
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|backOffTime
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"#"
operator|+
name|asyncProcess
operator|.
name|id
operator|+
literal|", not sent: "
operator|+
name|toReplay
operator|.
name|size
argument_list|()
operator|+
literal|" operations, "
operator|+
name|oldServer
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
name|groupAndSendMultiAction
argument_list|(
name|toReplay
argument_list|,
name|nextAttemptNumber
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|logNoResubmit
parameter_list|(
name|ServerName
name|oldServer
parameter_list|,
name|int
name|numAttempt
parameter_list|,
name|int
name|failureCount
parameter_list|,
name|Throwable
name|throwable
parameter_list|,
name|int
name|failed
parameter_list|,
name|int
name|stopped
parameter_list|)
block|{
if|if
condition|(
name|failureCount
operator|!=
literal|0
operator|||
name|numAttempt
operator|>
name|asyncProcess
operator|.
name|startLogErrorsCnt
operator|+
literal|1
condition|)
block|{
name|String
name|timeStr
init|=
operator|new
name|Date
argument_list|(
name|errorsByServer
operator|.
name|getStartTrackingTime
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|logMessage
init|=
name|createLog
argument_list|(
name|numAttempt
argument_list|,
name|failureCount
argument_list|,
literal|0
argument_list|,
name|oldServer
argument_list|,
name|throwable
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
name|timeStr
argument_list|,
name|failed
argument_list|,
name|stopped
argument_list|)
decl_stmt|;
if|if
condition|(
name|failed
operator|!=
literal|0
condition|)
block|{
comment|// Only log final failures as warning
name|LOG
operator|.
name|warn
argument_list|(
name|logMessage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|logMessage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Called when we receive the result of a server query.    *    * @param multiAction    - the multiAction we sent    * @param server       - the location. It's used as a server name.    * @param responses      - the response, if any    * @param numAttempt     - the attempt    */
specifier|private
name|void
name|receiveMultiAction
parameter_list|(
name|MultiAction
name|multiAction
parameter_list|,
name|ServerName
name|server
parameter_list|,
name|MultiResponse
name|responses
parameter_list|,
name|int
name|numAttempt
parameter_list|)
block|{
assert|assert
name|responses
operator|!=
literal|null
assert|;
comment|// Success or partial success
comment|// Analyze detailed results. We can still have individual failures to be redo.
comment|// two specific throwables are managed:
comment|//  - DoNotRetryIOException: we continue to retry for other actions
comment|//  - RegionMovedException: we update the cache with the new region location
name|List
argument_list|<
name|Action
argument_list|>
name|toReplay
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Throwable
name|throwable
init|=
literal|null
decl_stmt|;
name|int
name|failureCount
init|=
literal|0
decl_stmt|;
name|boolean
name|canRetry
init|=
literal|true
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|MultiResponse
operator|.
name|RegionResult
argument_list|>
name|results
init|=
name|responses
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|updateStats
argument_list|(
name|server
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|int
name|failed
init|=
literal|0
decl_stmt|,
name|stopped
init|=
literal|0
decl_stmt|;
comment|// Go by original action.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Action
argument_list|>
argument_list|>
name|regionEntry
range|:
name|multiAction
operator|.
name|actions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|regionName
init|=
name|regionEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|regionResults
init|=
name|results
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
name|results
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
operator|.
name|result
decl_stmt|;
if|if
condition|(
name|regionResults
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|responses
operator|.
name|getExceptions
argument_list|()
operator|.
name|containsKey
argument_list|(
name|regionName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Server sent us neither results nor exceptions for "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|responses
operator|.
name|getExceptions
argument_list|()
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid response"
argument_list|)
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|boolean
name|regionFailureRegistered
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Action
name|sentAction
range|:
name|regionEntry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Object
name|result
init|=
name|regionResults
operator|.
name|get
argument_list|(
name|sentAction
operator|.
name|getOriginalIndex
argument_list|()
argument_list|)
decl_stmt|;
comment|// Failure: retry if it's make sense else update the errors lists
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|instanceof
name|Throwable
condition|)
block|{
name|Row
name|row
init|=
name|sentAction
operator|.
name|getAction
argument_list|()
decl_stmt|;
name|throwable
operator|=
name|ClientExceptionsUtil
operator|.
name|findException
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Register corresponding failures once per server/once per region.
if|if
condition|(
operator|!
name|regionFailureRegistered
condition|)
block|{
name|regionFailureRegistered
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|asyncProcess
operator|.
name|connection
operator|.
name|updateCachedLocations
argument_list|(
name|tableName
argument_list|,
name|regionName
argument_list|,
name|row
operator|.
name|getRow
argument_list|()
argument_list|,
name|result
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// That should never happen, but if it did, we want to make sure
comment|// we still process errors
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't update cached region locations: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|failureCount
operator|==
literal|0
condition|)
block|{
name|errorsByServer
operator|.
name|reportServerError
argument_list|(
name|server
argument_list|)
expr_stmt|;
comment|// We determine canRetry only once for all calls, after reporting server failure.
name|canRetry
operator|=
name|errorsByServer
operator|.
name|canTryMore
argument_list|(
name|numAttempt
argument_list|)
expr_stmt|;
block|}
operator|++
name|failureCount
expr_stmt|;
name|Retry
name|retry
init|=
name|manageError
argument_list|(
name|sentAction
operator|.
name|getOriginalIndex
argument_list|()
argument_list|,
name|row
argument_list|,
name|canRetry
condition|?
name|Retry
operator|.
name|YES
else|:
name|Retry
operator|.
name|NO_RETRIES_EXHAUSTED
argument_list|,
operator|(
name|Throwable
operator|)
name|result
argument_list|,
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|retry
operator|==
name|Retry
operator|.
name|YES
condition|)
block|{
name|toReplay
operator|.
name|add
argument_list|(
name|sentAction
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|retry
operator|==
name|Retry
operator|.
name|NO_OTHER_SUCCEEDED
condition|)
block|{
operator|++
name|stopped
expr_stmt|;
block|}
else|else
block|{
operator|++
name|failed
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|//noinspection unchecked
comment|// TODO: would callback expect a replica region name if it gets one?
name|this
operator|.
name|callback
operator|.
name|update
argument_list|(
name|regionName
argument_list|,
name|sentAction
operator|.
name|getAction
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|,
operator|(
name|CResult
operator|)
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"User callback threw an exception for "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
operator|+
literal|", ignoring"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|setResult
argument_list|(
name|sentAction
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// The failures global to a region. We will use for multiAction we sent previously to find the
comment|//   actions to replay.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Throwable
argument_list|>
name|throwableEntry
range|:
name|responses
operator|.
name|getExceptions
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|throwable
operator|=
name|throwableEntry
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|byte
index|[]
name|region
init|=
name|throwableEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Action
argument_list|>
name|actions
init|=
name|multiAction
operator|.
name|actions
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|actions
operator|==
literal|null
operator|||
name|actions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Wrong response for the region: "
operator|+
name|HRegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|region
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|failureCount
operator|==
literal|0
condition|)
block|{
name|errorsByServer
operator|.
name|reportServerError
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|canRetry
operator|=
name|errorsByServer
operator|.
name|canTryMore
argument_list|(
name|numAttempt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|tableName
operator|&&
name|ClientExceptionsUtil
operator|.
name|isMetaClearingException
argument_list|(
name|throwable
argument_list|)
condition|)
block|{
comment|// For multi-actions, we don't have a table name, but we want to make sure to clear the
comment|// cache in case there were location-related exceptions. We don't to clear the cache
comment|// for every possible exception that comes through, however.
name|asyncProcess
operator|.
name|connection
operator|.
name|clearCaches
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|asyncProcess
operator|.
name|connection
operator|.
name|updateCachedLocations
argument_list|(
name|tableName
argument_list|,
name|region
argument_list|,
name|actions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAction
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|,
name|throwable
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// That should never happen, but if it did, we want to make sure
comment|// we still process errors
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't update cached region locations: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|failureCount
operator|+=
name|actions
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|Action
name|action
range|:
name|actions
control|)
block|{
name|Row
name|row
init|=
name|action
operator|.
name|getAction
argument_list|()
decl_stmt|;
name|Retry
name|retry
init|=
name|manageError
argument_list|(
name|action
operator|.
name|getOriginalIndex
argument_list|()
argument_list|,
name|row
argument_list|,
name|canRetry
condition|?
name|Retry
operator|.
name|YES
else|:
name|Retry
operator|.
name|NO_RETRIES_EXHAUSTED
argument_list|,
name|throwable
argument_list|,
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|retry
operator|==
name|Retry
operator|.
name|YES
condition|)
block|{
name|toReplay
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|retry
operator|==
name|Retry
operator|.
name|NO_OTHER_SUCCEEDED
condition|)
block|{
operator|++
name|stopped
expr_stmt|;
block|}
else|else
block|{
operator|++
name|failed
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|toReplay
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logNoResubmit
argument_list|(
name|server
argument_list|,
name|numAttempt
argument_list|,
name|failureCount
argument_list|,
name|throwable
argument_list|,
name|failed
argument_list|,
name|stopped
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resubmit
argument_list|(
name|server
argument_list|,
name|toReplay
argument_list|,
name|numAttempt
argument_list|,
name|failureCount
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|void
name|updateStats
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|MultiResponse
operator|.
name|RegionResult
argument_list|>
name|results
parameter_list|)
block|{
name|boolean
name|metrics
init|=
name|asyncProcess
operator|.
name|connection
operator|.
name|getConnectionMetrics
argument_list|()
operator|!=
literal|null
decl_stmt|;
name|boolean
name|stats
init|=
name|asyncProcess
operator|.
name|connection
operator|.
name|getStatisticsTracker
argument_list|()
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|stats
operator|&&
operator|!
name|metrics
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|MultiResponse
operator|.
name|RegionResult
argument_list|>
name|regionStats
range|:
name|results
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|regionName
init|=
name|regionStats
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|RegionLoadStats
name|stat
init|=
name|regionStats
operator|.
name|getValue
argument_list|()
operator|.
name|getStat
argument_list|()
decl_stmt|;
if|if
condition|(
name|stat
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No ClientProtos.RegionLoadStats found for server="
operator|+
name|server
operator|+
literal|", region="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|RegionLoadStats
name|regionLoadstats
init|=
name|ProtobufUtil
operator|.
name|createRegionLoadStats
argument_list|(
name|stat
argument_list|)
decl_stmt|;
name|ResultStatsUtil
operator|.
name|updateStats
argument_list|(
name|asyncProcess
operator|.
name|connection
operator|.
name|getStatisticsTracker
argument_list|()
argument_list|,
name|server
argument_list|,
name|regionName
argument_list|,
name|regionLoadstats
argument_list|)
expr_stmt|;
name|ResultStatsUtil
operator|.
name|updateStats
argument_list|(
name|asyncProcess
operator|.
name|connection
operator|.
name|getConnectionMetrics
argument_list|()
argument_list|,
name|server
argument_list|,
name|regionName
argument_list|,
name|regionLoadstats
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|createLog
parameter_list|(
name|int
name|numAttempt
parameter_list|,
name|int
name|failureCount
parameter_list|,
name|int
name|replaySize
parameter_list|,
name|ServerName
name|sn
parameter_list|,
name|Throwable
name|error
parameter_list|,
name|long
name|backOffTime
parameter_list|,
name|boolean
name|willRetry
parameter_list|,
name|String
name|startTime
parameter_list|,
name|int
name|failed
parameter_list|,
name|int
name|stopped
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"id="
argument_list|)
operator|.
name|append
argument_list|(
name|asyncProcess
operator|.
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|", table="
argument_list|)
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"attempt="
argument_list|)
operator|.
name|append
argument_list|(
name|numAttempt
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|asyncProcess
operator|.
name|numTries
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|failureCount
operator|>
literal|0
operator|||
name|error
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"failed="
argument_list|)
operator|.
name|append
argument_list|(
name|failureCount
argument_list|)
operator|.
name|append
argument_list|(
literal|"ops"
argument_list|)
operator|.
name|append
argument_list|(
literal|", last exception="
argument_list|)
operator|.
name|append
argument_list|(
name|error
operator|==
literal|null
condition|?
literal|"null"
else|:
name|error
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"succeeded"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" on "
argument_list|)
operator|.
name|append
argument_list|(
name|sn
argument_list|)
operator|.
name|append
argument_list|(
literal|", tracking started "
argument_list|)
operator|.
name|append
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|willRetry
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", retrying after="
argument_list|)
operator|.
name|append
argument_list|(
name|backOffTime
argument_list|)
operator|.
name|append
argument_list|(
literal|"ms"
argument_list|)
operator|.
name|append
argument_list|(
literal|", replay="
argument_list|)
operator|.
name|append
argument_list|(
name|replaySize
argument_list|)
operator|.
name|append
argument_list|(
literal|"ops"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|failureCount
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|stopped
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"; not retrying "
argument_list|)
operator|.
name|append
argument_list|(
name|stopped
argument_list|)
operator|.
name|append
argument_list|(
literal|" due to success from other replica"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failed
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"; not retrying "
argument_list|)
operator|.
name|append
argument_list|(
name|failed
argument_list|)
operator|.
name|append
argument_list|(
literal|" - final failure"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Sets the non-error result from a particular action.    * @param action Action (request) that the server responded to.    * @param result The result.    */
specifier|private
name|void
name|setResult
parameter_list|(
name|Action
name|action
parameter_list|,
name|Object
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Result cannot be null"
argument_list|)
throw|;
block|}
name|ReplicaResultState
name|state
init|=
literal|null
decl_stmt|;
name|boolean
name|isStale
init|=
operator|!
name|RegionReplicaUtil
operator|.
name|isDefaultReplica
argument_list|(
name|action
operator|.
name|getReplicaId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|action
operator|.
name|getOriginalIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
name|decActionCounter
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return;
comment|// Simple case, no replica requests.
block|}
name|state
operator|=
name|trySetResultSimple
argument_list|(
name|index
argument_list|,
name|action
operator|.
name|getAction
argument_list|()
argument_list|,
literal|false
argument_list|,
name|result
argument_list|,
literal|null
argument_list|,
name|isStale
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
return|return;
comment|// Simple case, no replica requests.
block|}
comment|// At this point we know that state is set to replica tracking class.
comment|// It could be that someone else is also looking at it; however, we know there can
comment|// only be one state object, and only one thread can set callCount to 0. Other threads
comment|// will either see state with callCount 0 after locking it; or will not see state at all
comment|// we will replace it with the result.
synchronized|synchronized
init|(
name|state
init|)
block|{
if|if
condition|(
name|state
operator|.
name|callCount
operator|==
literal|0
condition|)
block|{
return|return;
comment|// someone already set the result
block|}
name|state
operator|.
name|callCount
operator|=
literal|0
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|replicaResultLock
init|)
block|{
if|if
condition|(
name|results
index|[
name|index
index|]
operator|!=
name|state
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"We set the callCount but someone else replaced the result"
argument_list|)
throw|;
block|}
name|results
index|[
name|index
index|]
operator|=
name|result
expr_stmt|;
block|}
name|decActionCounter
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the error from a particular action.    * @param index Original action index.    * @param row Original request.    * @param throwable The resulting error.    * @param server The source server.    */
specifier|private
name|void
name|setError
parameter_list|(
name|int
name|index
parameter_list|,
name|Row
name|row
parameter_list|,
name|Throwable
name|throwable
parameter_list|,
name|ServerName
name|server
parameter_list|)
block|{
name|ReplicaResultState
name|state
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
comment|// Note that we currently cannot have replica requests with null results. So it shouldn't
comment|// happen that multiple replica calls will call dAC for same actions with results == null.
comment|// Only one call per action should be present in this case.
name|errors
operator|.
name|add
argument_list|(
name|throwable
argument_list|,
name|row
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|decActionCounter
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return;
comment|// Simple case, no replica requests.
block|}
name|state
operator|=
name|trySetResultSimple
argument_list|(
name|index
argument_list|,
name|row
argument_list|,
literal|true
argument_list|,
name|throwable
argument_list|,
name|server
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
return|return;
comment|// Simple case, no replica requests.
block|}
name|BatchErrors
name|target
init|=
literal|null
decl_stmt|;
comment|// Error will be added to final errors, or temp replica errors.
name|boolean
name|isActionDone
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|state
init|)
block|{
switch|switch
condition|(
name|state
operator|.
name|callCount
condition|)
block|{
case|case
literal|0
case|:
return|return;
comment|// someone already set the result
case|case
literal|1
case|:
block|{
comment|// All calls failed, we are the last error.
name|target
operator|=
name|errors
expr_stmt|;
name|isActionDone
operator|=
literal|true
expr_stmt|;
break|break;
block|}
default|default:
block|{
assert|assert
name|state
operator|.
name|callCount
operator|>
literal|1
assert|;
if|if
condition|(
name|state
operator|.
name|replicaErrors
operator|==
literal|null
condition|)
block|{
name|state
operator|.
name|replicaErrors
operator|=
operator|new
name|BatchErrors
argument_list|()
expr_stmt|;
block|}
name|target
operator|=
name|state
operator|.
name|replicaErrors
expr_stmt|;
break|break;
block|}
block|}
operator|--
name|state
operator|.
name|callCount
expr_stmt|;
block|}
name|target
operator|.
name|add
argument_list|(
name|throwable
argument_list|,
name|row
argument_list|,
name|server
argument_list|)
expr_stmt|;
if|if
condition|(
name|isActionDone
condition|)
block|{
if|if
condition|(
name|state
operator|.
name|replicaErrors
operator|!=
literal|null
condition|)
block|{
comment|// last call, no need to lock
name|errors
operator|.
name|merge
argument_list|(
name|state
operator|.
name|replicaErrors
argument_list|)
expr_stmt|;
block|}
comment|// See setResult for explanations.
synchronized|synchronized
init|(
name|replicaResultLock
init|)
block|{
if|if
condition|(
name|results
index|[
name|index
index|]
operator|!=
name|state
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"We set the callCount but someone else replaced the result"
argument_list|)
throw|;
block|}
name|results
index|[
name|index
index|]
operator|=
name|throwable
expr_stmt|;
block|}
name|decActionCounter
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checks if the action is complete; used on error to prevent needless retries.    * Does not synchronize, assuming element index/field accesses are atomic.    * This is an opportunistic optimization check, doesn't have to be strict.    * @param index Original action index.    * @param row Original request.    */
specifier|private
name|boolean
name|isActionComplete
parameter_list|(
name|int
name|index
parameter_list|,
name|Row
name|row
parameter_list|)
block|{
if|if
condition|(
operator|!
name|AsyncProcess
operator|.
name|isReplicaGet
argument_list|(
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
name|Object
name|resObj
init|=
name|results
index|[
name|index
index|]
decl_stmt|;
return|return
operator|(
name|resObj
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
operator|(
name|resObj
operator|instanceof
name|ReplicaResultState
operator|)
operator|||
operator|(
operator|(
name|ReplicaResultState
operator|)
name|resObj
operator|)
operator|.
name|callCount
operator|==
literal|0
operator|)
return|;
block|}
comment|/**    * Tries to set the result or error for a particular action as if there were no replica calls.    * @return null if successful; replica state if there were in fact replica calls.    */
specifier|private
name|ReplicaResultState
name|trySetResultSimple
parameter_list|(
name|int
name|index
parameter_list|,
name|Row
name|row
parameter_list|,
name|boolean
name|isError
parameter_list|,
name|Object
name|result
parameter_list|,
name|ServerName
name|server
parameter_list|,
name|boolean
name|isFromReplica
parameter_list|)
block|{
name|Object
name|resObj
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|AsyncProcess
operator|.
name|isReplicaGet
argument_list|(
name|row
argument_list|)
condition|)
block|{
if|if
condition|(
name|isFromReplica
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected stale result for "
operator|+
name|row
argument_list|)
throw|;
block|}
name|results
index|[
name|index
index|]
operator|=
name|result
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|replicaResultLock
init|)
block|{
name|resObj
operator|=
name|results
index|[
name|index
index|]
expr_stmt|;
if|if
condition|(
name|resObj
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isFromReplica
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected stale result for "
operator|+
name|row
argument_list|)
throw|;
block|}
name|results
index|[
name|index
index|]
operator|=
name|result
expr_stmt|;
block|}
block|}
block|}
name|ReplicaResultState
name|rrs
init|=
operator|(
name|resObj
operator|instanceof
name|ReplicaResultState
operator|)
condition|?
operator|(
name|ReplicaResultState
operator|)
name|resObj
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|rrs
operator|==
literal|null
operator|&&
name|isError
condition|)
block|{
comment|// The resObj is not replica state (null or already set).
name|errors
operator|.
name|add
argument_list|(
operator|(
name|Throwable
operator|)
name|result
argument_list|,
name|row
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resObj
operator|==
literal|null
condition|)
block|{
comment|// resObj is null - no replica calls were made.
name|decActionCounter
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|rrs
return|;
block|}
specifier|private
name|void
name|decActionCounter
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|long
name|actionsRemaining
init|=
name|actionsInProgress
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|actionsRemaining
operator|<
literal|0
condition|)
block|{
name|String
name|error
init|=
name|buildDetailedErrorMsg
argument_list|(
literal|"Incorrect actions in progress"
argument_list|,
name|index
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
name|error
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|actionsRemaining
operator|==
literal|0
condition|)
block|{
synchronized|synchronized
init|(
name|actionsInProgress
init|)
block|{
name|actionsInProgress
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|buildDetailedErrorMsg
parameter_list|(
name|String
name|string
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|StringBuilder
name|error
init|=
operator|new
name|StringBuilder
argument_list|(
literal|128
argument_list|)
decl_stmt|;
name|error
operator|.
name|append
argument_list|(
name|string
argument_list|)
operator|.
name|append
argument_list|(
literal|"; called for "
argument_list|)
operator|.
name|append
argument_list|(
name|index
argument_list|)
operator|.
name|append
argument_list|(
literal|", actionsInProgress "
argument_list|)
operator|.
name|append
argument_list|(
name|actionsInProgress
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"; replica gets: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|replicaGetIndices
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|replicaGetIndices
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|error
operator|.
name|append
argument_list|(
name|replicaGetIndices
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|error
operator|.
name|append
argument_list|(
name|hasAnyReplicaGets
condition|?
literal|"all"
else|:
literal|"none"
argument_list|)
expr_stmt|;
block|}
name|error
operator|.
name|append
argument_list|(
literal|"; results "
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Object
name|o
init|=
name|results
index|[
name|i
index|]
decl_stmt|;
name|error
operator|.
name|append
argument_list|(
operator|(
operator|(
name|o
operator|==
literal|null
operator|)
condition|?
literal|"null"
else|:
name|o
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|error
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|waitUntilDone
parameter_list|()
throws|throws
name|InterruptedIOException
block|{
try|try
block|{
name|waitUntilDone
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|iex
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|iex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|callsInProgress
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CancellableRegionServerCallable
name|clb
range|:
name|callsInProgress
control|)
block|{
name|clb
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|waitUntilDone
parameter_list|(
name|long
name|cutoff
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|boolean
name|hasWait
init|=
name|cutoff
operator|!=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|lastLog
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|long
name|currentInProgress
decl_stmt|;
while|while
condition|(
literal|0
operator|!=
operator|(
name|currentInProgress
operator|=
name|actionsInProgress
operator|.
name|get
argument_list|()
operator|)
condition|)
block|{
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasWait
operator|&&
operator|(
name|now
operator|*
literal|1000L
operator|)
operator|>
name|cutoff
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|hasWait
condition|)
block|{
comment|// Only log if wait is infinite.
if|if
condition|(
name|now
operator|>
name|lastLog
operator|+
literal|10000
condition|)
block|{
name|lastLog
operator|=
name|now
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"#"
operator|+
name|asyncProcess
operator|.
name|id
operator|+
literal|", waiting for "
operator|+
name|currentInProgress
operator|+
literal|"  actions to finish on table: "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|actionsInProgress
init|)
block|{
if|if
condition|(
name|actionsInProgress
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
break|break;
if|if
condition|(
operator|!
name|hasWait
condition|)
block|{
name|actionsInProgress
operator|.
name|wait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|waitMicroSecond
init|=
name|Math
operator|.
name|min
argument_list|(
literal|100000L
argument_list|,
operator|(
name|cutoff
operator|-
name|now
operator|*
literal|1000L
operator|)
argument_list|)
decl_stmt|;
name|TimeUnit
operator|.
name|MICROSECONDS
operator|.
name|timedWait
argument_list|(
name|actionsInProgress
argument_list|,
name|waitMicroSecond
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasError
parameter_list|()
block|{
return|return
name|errors
operator|.
name|hasErrors
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|getFailedOperations
parameter_list|()
block|{
return|return
name|errors
operator|.
name|actions
return|;
block|}
annotation|@
name|Override
specifier|public
name|RetriesExhaustedWithDetailsException
name|getErrors
parameter_list|()
block|{
return|return
name|errors
operator|.
name|makeException
argument_list|(
name|asyncProcess
operator|.
name|logBatchErrorDetails
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|getResults
parameter_list|()
throws|throws
name|InterruptedIOException
block|{
name|waitUntilDone
argument_list|()
expr_stmt|;
return|return
name|results
return|;
block|}
comment|/**    * Creates the server error tracker to use inside process.    * Currently, to preserve the main assumption about current retries, and to work well with    * the retry-limit-based calculation, the calculation is local per Process object.    * We may benefit from connection-wide tracking of server errors.    * @return ServerErrorTracker to use, null if there is no ServerErrorTracker on this connection    */
specifier|private
name|ConnectionImplementation
operator|.
name|ServerErrorTracker
name|createServerErrorTracker
parameter_list|()
block|{
return|return
operator|new
name|ConnectionImplementation
operator|.
name|ServerErrorTracker
argument_list|(
name|asyncProcess
operator|.
name|serverTrackerTimeout
argument_list|,
name|asyncProcess
operator|.
name|numTries
argument_list|)
return|;
block|}
comment|/**    * Create a callable. Isolated to be easily overridden in the tests.    */
specifier|private
name|MultiServerCallable
name|createCallable
parameter_list|(
specifier|final
name|ServerName
name|server
parameter_list|,
name|TableName
name|tableName
parameter_list|,
specifier|final
name|MultiAction
name|multi
parameter_list|)
block|{
return|return
operator|new
name|MultiServerCallable
argument_list|(
name|asyncProcess
operator|.
name|connection
argument_list|,
name|tableName
argument_list|,
name|server
argument_list|,
name|multi
argument_list|,
name|asyncProcess
operator|.
name|rpcFactory
operator|.
name|newController
argument_list|()
argument_list|,
name|rpcTimeout
argument_list|,
name|tracker
argument_list|,
name|multi
operator|.
name|getPriority
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

