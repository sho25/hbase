begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|NO_NONCE_GENERATOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|getStubKey
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|retries2Attempts
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MetricsConnection
operator|.
name|CLIENT_SIDE_METRICS_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CollectionUtils
operator|.
name|computeIfAbsent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CollectionUtils
operator|.
name|computeIfAbsentEx
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CallQueueTooBigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotEnabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|backoff
operator|.
name|ClientBackoffPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|backoff
operator|.
name|ClientBackoffPolicyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|ClientExceptionsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|RegionMovedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerStoppedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingRpcChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ClientService
operator|.
name|BlockingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DrainRegionServersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DrainRegionServersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsBalancerEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsBalancerEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsNormalizerEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsNormalizerEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListDrainingRegionServersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListDrainingRegionServersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|NormalizeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|NormalizeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RemoveDrainFromRegionServersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RemoveDrainFromRegionServersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SecurityCapabilitiesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SecurityCapabilitiesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetNormalizerRunningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetNormalizerRunningResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|AddReplicationPeerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|AddReplicationPeerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|DisableReplicationPeerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|DisableReplicationPeerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|EnableReplicationPeerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|EnableReplicationPeerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|GetReplicationPeerConfigRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|GetReplicationPeerConfigResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|ListReplicationPeersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|ListReplicationPeersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|RemoveReplicationPeerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|RemoveReplicationPeerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|UpdateReplicationPeerConfigRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|UpdateReplicationPeerConfigResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ExceptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MasterAddressTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Main implementation of {@link Connection} and {@link ClusterConnection} interfaces.  * Encapsulates connection to zookeeper and regionservers.  */
end_comment

begin_class
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION"
argument_list|,
name|justification
operator|=
literal|"Access to the conncurrent hash map is under a lock so should be fine."
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|ConnectionImplementation
implements|implements
name|ClusterConnection
implements|,
name|Closeable
block|{
specifier|public
specifier|static
specifier|final
name|String
name|RETRIES_BY_SERVER_KEY
init|=
literal|"hbase.client.retries.by.server"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ConnectionImplementation
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RESOLVE_HOSTNAME_ON_FAIL_KEY
init|=
literal|"hbase.resolve.hostnames.on.failure"
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|hostnamesCanChange
decl_stmt|;
specifier|private
specifier|final
name|long
name|pause
decl_stmt|;
specifier|private
specifier|final
name|long
name|pauseForCQTBE
decl_stmt|;
comment|// pause for CallQueueTooBigException, if specified
specifier|private
specifier|final
name|boolean
name|useMetaReplicas
decl_stmt|;
specifier|private
specifier|final
name|int
name|numTries
decl_stmt|;
specifier|final
name|int
name|rpcTimeout
decl_stmt|;
comment|/**    * Global nonceGenerator shared per client.Currently there's no reason to limit its scope.    * Once it's set under nonceGeneratorCreateLock, it is never unset or changed.    */
specifier|private
specifier|static
specifier|volatile
name|NonceGenerator
name|nonceGenerator
init|=
literal|null
decl_stmt|;
comment|/** The nonce generator lock. Only taken when creating Connection, which gets a private copy. */
specifier|private
specifier|static
specifier|final
name|Object
name|nonceGeneratorCreateLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AsyncProcess
name|asyncProcess
decl_stmt|;
comment|// single tracker per connection
specifier|private
specifier|final
name|ServerStatisticTracker
name|stats
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|closed
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|aborted
decl_stmt|;
comment|// package protected for the tests
name|ClusterStatusListener
name|clusterStatusListener
decl_stmt|;
specifier|private
specifier|final
name|Object
name|metaRegionLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|// We have a single lock for master& zk to prevent deadlocks. Having
comment|//  one lock for ZK and one lock for master is not possible:
comment|//  When creating a connection to master, we need a connection to ZK to get
comment|//  its address. But another thread could have taken the ZK lock, and could
comment|//  be waiting for the master lock => deadlock.
specifier|private
specifier|final
name|Object
name|masterAndZKLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|// thread executor shared by all HTableInterface instances created
comment|// by this connection
specifier|private
specifier|volatile
name|ExecutorService
name|batchPool
init|=
literal|null
decl_stmt|;
comment|// meta thread executor shared by all HTableInterface instances created
comment|// by this connection
specifier|private
specifier|volatile
name|ExecutorService
name|metaLookupPool
init|=
literal|null
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|cleanupPool
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|// cache the configuration value for tables so that we can avoid calling
comment|// the expensive Configuration to fetch the value multiple times.
specifier|private
specifier|final
name|ConnectionConfiguration
name|connectionConfig
decl_stmt|;
comment|// Client rpc instance.
specifier|private
specifier|final
name|RpcClient
name|rpcClient
decl_stmt|;
specifier|private
specifier|final
name|MetaCache
name|metaCache
decl_stmt|;
specifier|private
specifier|final
name|MetricsConnection
name|metrics
decl_stmt|;
specifier|protected
name|User
name|user
decl_stmt|;
specifier|private
specifier|final
name|RpcRetryingCallerFactory
name|rpcCallerFactory
decl_stmt|;
specifier|private
specifier|final
name|RpcControllerFactory
name|rpcControllerFactory
decl_stmt|;
specifier|private
specifier|final
name|RetryingCallerInterceptor
name|interceptor
decl_stmt|;
comment|/**    * Cluster registry of basic info such as clusterid and meta region location.    */
name|Registry
name|registry
decl_stmt|;
specifier|private
specifier|final
name|ClientBackoffPolicy
name|backoffPolicy
decl_stmt|;
comment|/**    * Allow setting an alternate BufferedMutator implementation via    * config. If null, use default.    */
specifier|private
specifier|final
name|String
name|alternateBufferedMutatorClassName
decl_stmt|;
comment|/**    * constructor    * @param conf Configuration object    */
name|ConnectionImplementation
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|batchPool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|connectionConfig
operator|=
operator|new
name|ConnectionConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|pause
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_PAUSE
argument_list|)
expr_stmt|;
name|long
name|configuredPauseForCQTBE
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE_FOR_CQTBE
argument_list|,
name|pause
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuredPauseForCQTBE
operator|<
name|pause
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The "
operator|+
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE_FOR_CQTBE
operator|+
literal|" setting: "
operator|+
name|configuredPauseForCQTBE
operator|+
literal|" is smaller than "
operator|+
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
operator|+
literal|", will use "
operator|+
name|pause
operator|+
literal|" instead."
argument_list|)
expr_stmt|;
name|this
operator|.
name|pauseForCQTBE
operator|=
name|pause
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|pauseForCQTBE
operator|=
name|configuredPauseForCQTBE
expr_stmt|;
block|}
name|this
operator|.
name|useMetaReplicas
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|USE_META_REPLICAS
argument_list|,
name|HConstants
operator|.
name|DEFAULT_USE_META_REPLICAS
argument_list|)
expr_stmt|;
comment|// how many times to try, one more than max *retry* time
name|this
operator|.
name|numTries
operator|=
name|retries2Attempts
argument_list|(
name|connectionConfig
operator|.
name|getRetriesNumber
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_RPC_TIMEOUT
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|NonceGenerator
operator|.
name|CLIENT_NONCES_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|nonceGeneratorCreateLock
init|)
block|{
if|if
condition|(
name|nonceGenerator
operator|==
literal|null
condition|)
block|{
name|nonceGenerator
operator|=
name|PerClientRandomNonceGenerator
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|nonceGenerator
operator|=
name|NO_NONCE_GENERATOR
expr_stmt|;
block|}
name|this
operator|.
name|stats
operator|=
name|ServerStatisticTracker
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|interceptor
operator|=
operator|(
operator|new
name|RetryingCallerInterceptorFactory
argument_list|(
name|conf
argument_list|)
operator|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcControllerFactory
operator|=
name|RpcControllerFactory
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcCallerFactory
operator|=
name|RpcRetryingCallerFactory
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|,
name|interceptor
argument_list|,
name|this
operator|.
name|stats
argument_list|)
expr_stmt|;
name|this
operator|.
name|backoffPolicy
operator|=
name|ClientBackoffPolicyFactory
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|asyncProcess
operator|=
operator|new
name|AsyncProcess
argument_list|(
name|this
argument_list|,
name|conf
argument_list|,
name|rpcCallerFactory
argument_list|,
literal|false
argument_list|,
name|rpcControllerFactory
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|CLIENT_SIDE_METRICS_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|this
operator|.
name|metrics
operator|=
operator|new
name|MetricsConnection
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|metrics
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|metaCache
operator|=
operator|new
name|MetaCache
argument_list|(
name|this
operator|.
name|metrics
argument_list|)
expr_stmt|;
name|boolean
name|shouldListen
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|STATUS_PUBLISHED
argument_list|,
name|HConstants
operator|.
name|STATUS_PUBLISHED_DEFAULT
argument_list|)
decl_stmt|;
name|this
operator|.
name|hostnamesCanChange
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|RESOLVE_HOSTNAME_ON_FAIL_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|ClusterStatusListener
operator|.
name|Listener
argument_list|>
name|listenerClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|ClusterStatusListener
operator|.
name|STATUS_LISTENER_CLASS
argument_list|,
name|ClusterStatusListener
operator|.
name|DEFAULT_STATUS_LISTENER_CLASS
argument_list|,
name|ClusterStatusListener
operator|.
name|Listener
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Is there an alternate BufferedMutator to use?
name|this
operator|.
name|alternateBufferedMutatorClassName
operator|=
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|BufferedMutator
operator|.
name|CLASSNAME_KEY
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|registry
operator|=
name|setupRegistry
argument_list|()
expr_stmt|;
name|retrieveClusterId
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcClient
operator|=
name|RpcClientFactory
operator|.
name|createClient
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|clusterId
argument_list|,
name|this
operator|.
name|metrics
argument_list|)
expr_stmt|;
comment|// Do we publish the status?
if|if
condition|(
name|shouldListen
condition|)
block|{
if|if
condition|(
name|listenerClass
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|HConstants
operator|.
name|STATUS_PUBLISHED
operator|+
literal|" is true, but "
operator|+
name|ClusterStatusListener
operator|.
name|STATUS_LISTENER_CLASS
operator|+
literal|" is not set - not listening status"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clusterStatusListener
operator|=
operator|new
name|ClusterStatusListener
argument_list|(
operator|new
name|ClusterStatusListener
operator|.
name|DeadServerHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|newDead
parameter_list|(
name|ServerName
name|sn
parameter_list|)
block|{
name|clearCaches
argument_list|(
name|sn
argument_list|)
expr_stmt|;
name|rpcClient
operator|.
name|cancelConnections
argument_list|(
name|sn
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|conf
argument_list|,
name|listenerClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// avoid leaks: registry, rpcClient, ...
name|LOG
operator|.
name|debug
argument_list|(
literal|"connection construction failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * @param conn The connection for which to replace the generator.    * @param cnm Replaces the nonce generator used, for testing.    * @return old nonce generator.    */
annotation|@
name|VisibleForTesting
specifier|static
name|NonceGenerator
name|injectNonceGeneratorForTesting
parameter_list|(
name|ClusterConnection
name|conn
parameter_list|,
name|NonceGenerator
name|cnm
parameter_list|)
block|{
name|ConnectionImplementation
name|connImpl
init|=
operator|(
name|ConnectionImplementation
operator|)
name|conn
decl_stmt|;
name|NonceGenerator
name|ng
init|=
name|connImpl
operator|.
name|getNonceGenerator
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Nonce generator is being replaced by test code for "
operator|+
name|cnm
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|nonceGenerator
operator|=
name|cnm
expr_stmt|;
return|return
name|ng
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|getTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getTable
argument_list|(
name|tableName
argument_list|,
name|getBatchPool
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableBuilder
name|getTableBuilder
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
block|{
return|return
operator|new
name|TableBuilderBase
argument_list|(
name|tableName
argument_list|,
name|connectionConfig
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Table
name|build
parameter_list|()
block|{
return|return
operator|new
name|HTable
argument_list|(
name|ConnectionImplementation
operator|.
name|this
argument_list|,
name|this
argument_list|,
name|rpcCallerFactory
argument_list|,
name|rpcControllerFactory
argument_list|,
name|pool
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|BufferedMutator
name|getBufferedMutator
parameter_list|(
name|BufferedMutatorParams
name|params
parameter_list|)
block|{
if|if
condition|(
name|params
operator|.
name|getTableName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"TableName cannot be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|params
operator|.
name|getPool
argument_list|()
operator|==
literal|null
condition|)
block|{
name|params
operator|.
name|pool
argument_list|(
name|HTable
operator|.
name|getDefaultExecutor
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|getWriteBufferSize
argument_list|()
operator|==
name|BufferedMutatorParams
operator|.
name|UNSET
condition|)
block|{
name|params
operator|.
name|writeBufferSize
argument_list|(
name|connectionConfig
operator|.
name|getWriteBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|getMaxKeyValueSize
argument_list|()
operator|==
name|BufferedMutatorParams
operator|.
name|UNSET
condition|)
block|{
name|params
operator|.
name|maxKeyValueSize
argument_list|(
name|connectionConfig
operator|.
name|getMaxKeyValueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Look to see if an alternate BufferedMutation implementation is wanted.
comment|// Look in params and in config. If null, use default.
name|String
name|implementationClassName
init|=
name|params
operator|.
name|getImplementationClassName
argument_list|()
decl_stmt|;
if|if
condition|(
name|implementationClassName
operator|==
literal|null
condition|)
block|{
name|implementationClassName
operator|=
name|this
operator|.
name|alternateBufferedMutatorClassName
expr_stmt|;
block|}
if|if
condition|(
name|implementationClassName
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|BufferedMutatorImpl
argument_list|(
name|this
argument_list|,
name|rpcCallerFactory
argument_list|,
name|rpcControllerFactory
argument_list|,
name|params
argument_list|)
return|;
block|}
try|try
block|{
return|return
operator|(
name|BufferedMutator
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|Class
operator|.
name|forName
argument_list|(
name|implementationClassName
argument_list|)
argument_list|,
name|this
argument_list|,
name|rpcCallerFactory
argument_list|,
name|rpcControllerFactory
argument_list|,
name|params
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|BufferedMutator
name|getBufferedMutator
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|getBufferedMutator
argument_list|(
operator|new
name|BufferedMutatorParams
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionLocator
name|getRegionLocator
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HRegionLocator
argument_list|(
name|tableName
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Admin
name|getAdmin
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|HBaseAdmin
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsConnection
name|getConnectionMetrics
parameter_list|()
block|{
return|return
name|this
operator|.
name|metrics
return|;
block|}
specifier|private
name|ExecutorService
name|getBatchPool
parameter_list|()
block|{
if|if
condition|(
name|batchPool
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|batchPool
operator|==
literal|null
condition|)
block|{
name|int
name|threads
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.hconnection.threads.max"
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|this
operator|.
name|batchPool
operator|=
name|getThreadPool
argument_list|(
name|threads
argument_list|,
name|threads
argument_list|,
literal|"-shared"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|cleanupPool
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|this
operator|.
name|batchPool
return|;
block|}
specifier|private
name|ExecutorService
name|getThreadPool
parameter_list|(
name|int
name|maxThreads
parameter_list|,
name|int
name|coreThreads
parameter_list|,
name|String
name|nameHint
parameter_list|,
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|passedWorkQueue
parameter_list|)
block|{
comment|// shared HTable thread executor not yet initialized
if|if
condition|(
name|maxThreads
operator|==
literal|0
condition|)
block|{
name|maxThreads
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|*
literal|8
expr_stmt|;
block|}
if|if
condition|(
name|coreThreads
operator|==
literal|0
condition|)
block|{
name|coreThreads
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|*
literal|8
expr_stmt|;
block|}
name|long
name|keepAliveTime
init|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.hconnection.threads.keepalivetime"
argument_list|,
literal|60
argument_list|)
decl_stmt|;
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|workQueue
init|=
name|passedWorkQueue
decl_stmt|;
if|if
condition|(
name|workQueue
operator|==
literal|null
condition|)
block|{
name|workQueue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
name|maxThreads
operator|*
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_MAX_TOTAL_TASKS
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_MAX_TOTAL_TASKS
argument_list|)
argument_list|)
expr_stmt|;
name|coreThreads
operator|=
name|maxThreads
expr_stmt|;
block|}
name|ThreadPoolExecutor
name|tpe
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|coreThreads
argument_list|,
name|maxThreads
argument_list|,
name|keepAliveTime
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|workQueue
argument_list|,
name|Threads
operator|.
name|newDaemonThreadFactory
argument_list|(
name|toString
argument_list|()
operator|+
name|nameHint
argument_list|)
argument_list|)
decl_stmt|;
name|tpe
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|tpe
return|;
block|}
specifier|private
name|ExecutorService
name|getMetaLookupPool
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|metaLookupPool
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|this
operator|.
name|metaLookupPool
operator|==
literal|null
condition|)
block|{
comment|//Some of the threads would be used for meta replicas
comment|//To start with, threads.max.core threads can hit the meta (including replicas).
comment|//After that, requests will get queued up in the passed queue, and only after
comment|//the queue is full, a new thread will be started
name|int
name|threads
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.hconnection.meta.lookup.threads.max"
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|this
operator|.
name|metaLookupPool
operator|=
name|getThreadPool
argument_list|(
name|threads
argument_list|,
name|threads
argument_list|,
literal|"-metaLookup-shared-"
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|this
operator|.
name|metaLookupPool
return|;
block|}
specifier|protected
name|ExecutorService
name|getCurrentMetaLookupPool
parameter_list|()
block|{
return|return
name|metaLookupPool
return|;
block|}
specifier|protected
name|ExecutorService
name|getCurrentBatchPool
parameter_list|()
block|{
return|return
name|batchPool
return|;
block|}
specifier|private
name|void
name|shutdownPools
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|cleanupPool
operator|&&
name|this
operator|.
name|batchPool
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|batchPool
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
name|shutdownBatchPool
argument_list|(
name|this
operator|.
name|batchPool
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|metaLookupPool
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|metaLookupPool
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
name|shutdownBatchPool
argument_list|(
name|this
operator|.
name|metaLookupPool
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|shutdownBatchPool
parameter_list|(
name|ExecutorService
name|pool
parameter_list|)
block|{
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|pool
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|pool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|pool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @return The cluster registry implementation to use.    */
specifier|private
name|Registry
name|setupRegistry
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|RegistryFactory
operator|.
name|getRegistry
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * For tests only.    */
annotation|@
name|VisibleForTesting
name|RpcClient
name|getRpcClient
parameter_list|()
block|{
return|return
name|rpcClient
return|;
block|}
comment|/**    * An identifier that will remain the same for a given connection.    */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"hconnection-0x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|hashCode
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|String
name|clusterId
init|=
literal|null
decl_stmt|;
specifier|protected
name|void
name|retrieveClusterId
parameter_list|()
block|{
if|if
condition|(
name|clusterId
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|clusterId
operator|=
name|this
operator|.
name|registry
operator|.
name|getClusterId
argument_list|()
expr_stmt|;
if|if
condition|(
name|clusterId
operator|==
literal|null
condition|)
block|{
name|clusterId
operator|=
name|HConstants
operator|.
name|CLUSTER_ID_DEFAULT
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"clusterid came back null, using default "
operator|+
name|clusterId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
specifier|private
name|void
name|checkIfBaseNodeAvailable
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|)
throws|throws
name|MasterNotRunningException
block|{
name|String
name|errorMsg
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|errorMsg
operator|=
literal|"The node "
operator|+
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
operator|+
literal|" is not in ZooKeeper. "
operator|+
literal|"It should have been written by the master. "
operator|+
literal|"Check the value configured in 'zookeeper.znode.parent'. "
operator|+
literal|"There could be a mismatch with the one configured in the master."
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MasterNotRunningException
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|errorMsg
operator|=
literal|"Can't get connection to ZooKeeper: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MasterNotRunningException
argument_list|(
name|errorMsg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return true if the master is running, throws an exception otherwise    * @throws org.apache.hadoop.hbase.MasterNotRunningException - if the master is not running    * @deprecated this has been deprecated without a replacement    */
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|boolean
name|isMasterRunning
parameter_list|()
throws|throws
name|MasterNotRunningException
throws|,
name|ZooKeeperConnectionException
block|{
comment|// When getting the master connection, we check it's running,
comment|// so if there is no exception, it means we've been able to get a
comment|// connection on a running master
name|MasterKeepAliveConnection
name|m
init|=
name|getKeepAliveMasterService
argument_list|()
decl_stmt|;
name|m
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|HRegionLocation
name|getRegionLocation
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
name|boolean
name|reload
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reload
condition|?
name|relocateRegion
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
else|:
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTableEnabled
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getTableState
argument_list|(
name|tableName
argument_list|)
operator|.
name|inStates
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTableDisabled
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getTableState
argument_list|(
name|tableName
argument_list|)
operator|.
name|inStates
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTableAvailable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|toString
argument_list|()
operator|+
literal|" closed"
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" not enabled"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|locations
init|=
name|MetaTableAccessor
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|notDeployed
init|=
literal|0
decl_stmt|;
name|int
name|regionCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
range|:
name|locations
control|)
block|{
name|HRegionInfo
name|info
init|=
name|pair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" has not deployed region "
operator|+
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|notDeployed
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|splitKeys
operator|!=
literal|null
operator|&&
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|splitKey
range|:
name|splitKeys
control|)
block|{
comment|// Just check if the splitkey is available
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKey
argument_list|)
condition|)
block|{
name|regionCount
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
comment|// Always empty start row should be counted
name|regionCount
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|notDeployed
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" has "
operator|+
name|notDeployed
operator|+
literal|" regions"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|splitKeys
operator|!=
literal|null
operator|&&
name|regionCount
operator|!=
name|splitKeys
operator|.
name|length
operator|+
literal|1
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" expected to have "
operator|+
operator|(
name|splitKeys
operator|.
name|length
operator|+
literal|1
operator|)
operator|+
literal|" regions, but only "
operator|+
name|regionCount
operator|+
literal|" available"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" should be available"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|tnfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" not enabled, it is not exists"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HRegionLocation
name|locateRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionLocations
name|locations
init|=
name|locateRegion
argument_list|(
name|HRegionInfo
operator|.
name|getTable
argument_list|(
name|regionName
argument_list|)
argument_list|,
name|HRegionInfo
operator|.
name|getStartKey
argument_list|(
name|regionName
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|locations
operator|==
literal|null
condition|?
literal|null
else|:
name|locations
operator|.
name|getRegionLocation
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDeadServer
parameter_list|(
name|ServerName
name|sn
parameter_list|)
block|{
if|if
condition|(
name|clusterStatusListener
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|clusterStatusListener
operator|.
name|isDeadServer
argument_list|(
name|sn
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|locateRegions
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|locateRegions
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|locateRegions
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|boolean
name|useCache
parameter_list|,
specifier|final
name|boolean
name|offlined
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
operator|!
name|offlined
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|regions
control|)
block|{
name|RegionLocations
name|list
init|=
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|useCache
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HRegionLocation
name|loc
range|:
name|list
operator|.
name|getRegionLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|locations
return|;
block|}
annotation|@
name|Override
specifier|public
name|HRegionLocation
name|locateRegion
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionLocations
name|locations
init|=
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|locations
operator|==
literal|null
condition|?
literal|null
else|:
name|locations
operator|.
name|getRegionLocation
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|HRegionLocation
name|relocateRegion
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionLocations
name|locations
init|=
name|relocateRegion
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|RegionReplicaUtil
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
decl_stmt|;
return|return
name|locations
operator|==
literal|null
condition|?
literal|null
else|:
name|locations
operator|.
name|getRegionLocation
argument_list|(
name|RegionReplicaUtil
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionLocations
name|relocateRegion
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
name|int
name|replicaId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Since this is an explicit request not to use any caching, finding
comment|// disabled tables should not be desirable.  This will ensure that an exception is thrown when
comment|// the first time a disabled table is interacted with.
if|if
condition|(
operator|!
name|tableName
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|&&
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableNotEnabledException
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" is disabled."
argument_list|)
throw|;
block|}
return|return
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|replicaId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionLocations
name|locateRegion
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
name|boolean
name|useCache
parameter_list|,
name|boolean
name|retry
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|useCache
argument_list|,
name|retry
argument_list|,
name|RegionReplicaUtil
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionLocations
name|locateRegion
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
name|boolean
name|useCache
parameter_list|,
name|boolean
name|retry
parameter_list|,
name|int
name|replicaId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
name|toString
argument_list|()
operator|+
literal|" closed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tableName
operator|==
literal|null
operator|||
name|tableName
operator|.
name|getName
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"table name cannot be null or zero length"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
return|return
name|locateMeta
argument_list|(
name|tableName
argument_list|,
name|useCache
argument_list|,
name|replicaId
argument_list|)
return|;
block|}
else|else
block|{
comment|// Region not in the cache - have to go to the meta RS
return|return
name|locateRegionInMeta
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|useCache
argument_list|,
name|retry
argument_list|,
name|replicaId
argument_list|)
return|;
block|}
block|}
specifier|private
name|RegionLocations
name|locateMeta
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
name|boolean
name|useCache
parameter_list|,
name|int
name|replicaId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// HBASE-10785: We cache the location of the META itself, so that we are not overloading
comment|// zookeeper with one request for every region lookup. We cache the META with empty row
comment|// key in MetaCache.
name|byte
index|[]
name|metaCacheKey
init|=
name|HConstants
operator|.
name|EMPTY_START_ROW
decl_stmt|;
comment|// use byte[0] as the row for meta
name|RegionLocations
name|locations
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useCache
condition|)
block|{
name|locations
operator|=
name|getCachedLocation
argument_list|(
name|tableName
argument_list|,
name|metaCacheKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|locations
operator|!=
literal|null
operator|&&
name|locations
operator|.
name|getRegionLocation
argument_list|(
name|replicaId
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|locations
return|;
block|}
block|}
comment|// only one thread should do the lookup.
synchronized|synchronized
init|(
name|metaRegionLock
init|)
block|{
comment|// Check the cache again for a hit in case some other thread made the
comment|// same query while we were waiting on the lock.
if|if
condition|(
name|useCache
condition|)
block|{
name|locations
operator|=
name|getCachedLocation
argument_list|(
name|tableName
argument_list|,
name|metaCacheKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|locations
operator|!=
literal|null
operator|&&
name|locations
operator|.
name|getRegionLocation
argument_list|(
name|replicaId
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|locations
return|;
block|}
block|}
comment|// Look up from zookeeper
name|locations
operator|=
name|this
operator|.
name|registry
operator|.
name|getMetaRegionLocation
argument_list|()
expr_stmt|;
if|if
condition|(
name|locations
operator|!=
literal|null
condition|)
block|{
name|cacheLocation
argument_list|(
name|tableName
argument_list|,
name|locations
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|locations
return|;
block|}
comment|/*     * Search the hbase:meta table for the HRegionLocation     * info that contains the table and row we're seeking.     */
specifier|private
name|RegionLocations
name|locateRegionInMeta
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|boolean
name|useCache
parameter_list|,
name|boolean
name|retry
parameter_list|,
name|int
name|replicaId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If we are supposed to be using the cache, look in the cache to see if
comment|// we already have the region.
if|if
condition|(
name|useCache
condition|)
block|{
name|RegionLocations
name|locations
init|=
name|getCachedLocation
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|locations
operator|!=
literal|null
operator|&&
name|locations
operator|.
name|getRegionLocation
argument_list|(
name|replicaId
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|locations
return|;
block|}
block|}
comment|// build the key of the meta region we should be looking for.
comment|// the extra 9's on the end are necessary to allow "exact" matches
comment|// without knowing the precise region names.
name|byte
index|[]
name|metaKey
init|=
name|HRegionInfo
operator|.
name|createRegionName
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|HConstants
operator|.
name|NINES
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|setStartRow
argument_list|(
name|metaKey
argument_list|)
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|s
operator|.
name|setOneRowLimit
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|useMetaReplicas
condition|)
block|{
name|s
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
block|}
name|int
name|maxAttempts
init|=
operator|(
name|retry
condition|?
name|numTries
else|:
literal|1
operator|)
decl_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
literal|true
condition|;
name|tries
operator|++
control|)
block|{
if|if
condition|(
name|tries
operator|>=
name|maxAttempts
condition|)
block|{
throw|throw
operator|new
name|NoServerForRegionException
argument_list|(
literal|"Unable to find region for "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
operator|+
literal|" in "
operator|+
name|tableName
operator|+
literal|" after "
operator|+
name|tries
operator|+
literal|" tries."
argument_list|)
throw|;
block|}
if|if
condition|(
name|useCache
condition|)
block|{
name|RegionLocations
name|locations
init|=
name|getCachedLocation
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|locations
operator|!=
literal|null
operator|&&
name|locations
operator|.
name|getRegionLocation
argument_list|(
name|replicaId
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|locations
return|;
block|}
block|}
else|else
block|{
comment|// If we are not supposed to be using the cache, delete any existing cached location
comment|// so it won't interfere.
name|metaCache
operator|.
name|clearCache
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
comment|// Query the meta region
name|long
name|pauseBase
init|=
name|this
operator|.
name|pause
decl_stmt|;
try|try
block|{
name|Result
name|regionInfoRow
init|=
literal|null
decl_stmt|;
name|s
operator|.
name|resetMvccReadPoint
argument_list|()
expr_stmt|;
try|try
init|(
name|ReversedClientScanner
name|rcs
init|=
operator|new
name|ReversedClientScanner
argument_list|(
name|conf
argument_list|,
name|s
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|this
argument_list|,
name|rpcCallerFactory
argument_list|,
name|rpcControllerFactory
argument_list|,
name|getMetaLookupPool
argument_list|()
argument_list|,
literal|0
argument_list|)
init|)
block|{
name|regionInfoRow
operator|=
name|rcs
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|regionInfoRow
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
argument_list|)
throw|;
block|}
comment|// convert the row result into the HRegionLocation we need!
name|RegionLocations
name|locations
init|=
name|MetaTableAccessor
operator|.
name|getRegionLocations
argument_list|(
name|regionInfoRow
argument_list|)
decl_stmt|;
if|if
condition|(
name|locations
operator|==
literal|null
operator|||
name|locations
operator|.
name|getRegionLocation
argument_list|(
name|replicaId
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HRegionInfo was null in "
operator|+
name|tableName
operator|+
literal|", row="
operator|+
name|regionInfoRow
argument_list|)
throw|;
block|}
name|HRegionInfo
name|regionInfo
init|=
name|locations
operator|.
name|getRegionLocation
argument_list|(
name|replicaId
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HRegionInfo was null or empty in "
operator|+
name|TableName
operator|.
name|META_TABLE_NAME
operator|+
literal|", row="
operator|+
name|regionInfoRow
argument_list|)
throw|;
block|}
comment|// possible we got a region of a different table...
if|if
condition|(
operator|!
name|regionInfo
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
literal|"Table '"
operator|+
name|tableName
operator|+
literal|"' was not found, got: "
operator|+
name|regionInfo
operator|.
name|getTable
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
block|}
if|if
condition|(
name|regionInfo
operator|.
name|isSplit
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RegionOfflineException
argument_list|(
literal|"the only available region for"
operator|+
literal|" the required row is a split parent,"
operator|+
literal|" the daughters should be online soon: "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|regionInfo
operator|.
name|isOffline
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RegionOfflineException
argument_list|(
literal|"the region is offline, could"
operator|+
literal|" be caused by a disable table call: "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
throw|;
block|}
name|ServerName
name|serverName
init|=
name|locations
operator|.
name|getRegionLocation
argument_list|(
name|replicaId
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoServerForRegionException
argument_list|(
literal|"No server address listed "
operator|+
literal|"in "
operator|+
name|TableName
operator|.
name|META_TABLE_NAME
operator|+
literal|" for region "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" containing row "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|isDeadServer
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RegionServerStoppedException
argument_list|(
literal|"hbase:meta says the region "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" is managed by the server "
operator|+
name|serverName
operator|+
literal|", but it is dead."
argument_list|)
throw|;
block|}
comment|// Instantiate the location
name|cacheLocation
argument_list|(
name|tableName
argument_list|,
name|locations
argument_list|)
expr_stmt|;
return|return
name|locations
return|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|e
parameter_list|)
block|{
comment|// if we got this error, probably means the table just plain doesn't
comment|// exist. rethrow the error immediately. this should always be coming
comment|// from the HTable constructor.
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ExceptionUtil
operator|.
name|rethrowIfInterrupt
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
operator|(
operator|(
name|RemoteException
operator|)
name|e
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|CallQueueTooBigException
condition|)
block|{
comment|// Give a special check on CallQueueTooBigException, see #HBASE-17114
name|pauseBase
operator|=
name|this
operator|.
name|pauseForCQTBE
expr_stmt|;
block|}
if|if
condition|(
name|tries
operator|<
name|maxAttempts
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"locateRegionInMeta parentTable="
operator|+
name|TableName
operator|.
name|META_TABLE_NAME
operator|+
literal|", metaLocation="
operator|+
literal|", attempt="
operator|+
name|tries
operator|+
literal|" of "
operator|+
name|maxAttempts
operator|+
literal|" failed; retrying after sleep of "
operator|+
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
name|pauseBase
argument_list|,
name|tries
argument_list|)
operator|+
literal|" because: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
comment|// Only relocate the parent region if necessary
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|RegionOfflineException
operator|||
name|e
operator|instanceof
name|NoServerForRegionException
operator|)
condition|)
block|{
name|relocateRegion
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|metaKey
argument_list|,
name|replicaId
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
name|pauseBase
argument_list|,
name|tries
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Giving up trying to location region in "
operator|+
literal|"meta: thread is interrupted."
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Put a newly discovered HRegionLocation into the cache.    * @param tableName The table name.    * @param location the new location    */
annotation|@
name|Override
specifier|public
name|void
name|cacheLocation
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|RegionLocations
name|location
parameter_list|)
block|{
name|metaCache
operator|.
name|cacheLocation
argument_list|(
name|tableName
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
comment|/**    * Search the cache for a location that fits our table and row key.    * Return null if no suitable region is located.    * @return Null or region location found in cache.    */
name|RegionLocations
name|getCachedLocation
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
name|metaCache
operator|.
name|getCachedLocation
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
return|;
block|}
specifier|public
name|void
name|clearRegionCache
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
name|metaCache
operator|.
name|clearCache
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
comment|/*    * Delete all cached entries of a table that maps to a specific location.    */
annotation|@
name|Override
specifier|public
name|void
name|clearCaches
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|metaCache
operator|.
name|clearCache
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearRegionCache
parameter_list|()
block|{
name|metaCache
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearRegionCache
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
name|metaCache
operator|.
name|clearCache
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Put a newly discovered HRegionLocation into the cache.    * @param tableName The table name.    * @param source the source of the new location, if it's not coming from meta    * @param location the new location    */
specifier|private
name|void
name|cacheLocation
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|ServerName
name|source
parameter_list|,
specifier|final
name|HRegionLocation
name|location
parameter_list|)
block|{
name|metaCache
operator|.
name|cacheLocation
argument_list|(
name|tableName
argument_list|,
name|source
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
comment|// Map keyed by service name + regionserver to service stub implementation
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|stubs
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * State of the MasterService connection/setup.    */
specifier|static
class|class
name|MasterServiceState
block|{
name|Connection
name|connection
decl_stmt|;
name|MasterProtos
operator|.
name|MasterService
operator|.
name|BlockingInterface
name|stub
decl_stmt|;
name|int
name|userCount
decl_stmt|;
name|MasterServiceState
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"MasterService"
return|;
block|}
name|Object
name|getStub
parameter_list|()
block|{
return|return
name|this
operator|.
name|stub
return|;
block|}
name|void
name|clearStub
parameter_list|()
block|{
name|this
operator|.
name|stub
operator|=
literal|null
expr_stmt|;
block|}
name|boolean
name|isMasterRunning
parameter_list|()
throws|throws
name|IOException
block|{
name|MasterProtos
operator|.
name|IsMasterRunningResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|this
operator|.
name|stub
operator|.
name|isMasterRunning
argument_list|(
literal|null
argument_list|,
name|RequestConverter
operator|.
name|buildIsMasterRunningRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|handleRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|response
operator|!=
literal|null
condition|?
name|response
operator|.
name|getIsMasterRunning
argument_list|()
else|:
literal|false
return|;
block|}
block|}
comment|/**    * The record of errors for servers.    */
specifier|static
class|class
name|ServerErrorTracker
block|{
comment|// We need a concurrent map here, as we could have multiple threads updating it in parallel.
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|ServerName
argument_list|,
name|ServerErrors
argument_list|>
name|errorsByServer
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ServerName
argument_list|,
name|ServerErrors
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|long
name|canRetryUntil
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxTries
decl_stmt|;
comment|// max number to try
specifier|private
specifier|final
name|long
name|startTrackingTime
decl_stmt|;
comment|/**      * Constructor      * @param timeout how long to wait before timeout, in unit of millisecond      * @param maxTries how many times to try      */
specifier|public
name|ServerErrorTracker
parameter_list|(
name|long
name|timeout
parameter_list|,
name|int
name|maxTries
parameter_list|)
block|{
name|this
operator|.
name|maxTries
operator|=
name|maxTries
expr_stmt|;
name|this
operator|.
name|canRetryUntil
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|+
name|timeout
expr_stmt|;
name|this
operator|.
name|startTrackingTime
operator|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
comment|/**      * We stop to retry when we have exhausted BOTH the number of tries and the time allocated.      * @param numAttempt how many times we have tried by now      */
name|boolean
name|canTryMore
parameter_list|(
name|int
name|numAttempt
parameter_list|)
block|{
comment|// If there is a single try we must not take into account the time.
return|return
name|numAttempt
operator|<
name|maxTries
operator|||
operator|(
name|maxTries
operator|>
literal|1
operator|&&
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|<
name|this
operator|.
name|canRetryUntil
operator|)
return|;
block|}
comment|/**      * Calculates the back-off time for a retrying request to a particular server.      *      * @param server    The server in question.      * @param basePause The default hci pause.      * @return The time to wait before sending next request.      */
name|long
name|calculateBackoffTime
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|long
name|basePause
parameter_list|)
block|{
name|long
name|result
decl_stmt|;
name|ServerErrors
name|errorStats
init|=
name|errorsByServer
operator|.
name|get
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorStats
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
name|basePause
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|errorStats
operator|.
name|getCount
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|0
expr_stmt|;
comment|// yes, if the server is not in our list we don't wait before retrying.
block|}
return|return
name|result
return|;
block|}
comment|/**      * Reports that there was an error on the server to do whatever bean-counting necessary.      * @param server The server in question.      */
name|void
name|reportServerError
parameter_list|(
name|ServerName
name|server
parameter_list|)
block|{
name|computeIfAbsent
argument_list|(
name|errorsByServer
argument_list|,
name|server
argument_list|,
name|ServerErrors
operator|::
operator|new
argument_list|)
operator|.
name|addError
argument_list|()
expr_stmt|;
block|}
name|long
name|getStartTrackingTime
parameter_list|()
block|{
return|return
name|startTrackingTime
return|;
block|}
comment|/**      * The record of errors for a server.      */
specifier|private
specifier|static
class|class
name|ServerErrors
block|{
specifier|private
specifier|final
name|AtomicInteger
name|retries
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|retries
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|addError
parameter_list|()
block|{
name|retries
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Class to make a MasterServiceStubMaker stub.    */
specifier|private
specifier|final
class|class
name|MasterServiceStubMaker
block|{
specifier|private
name|void
name|isMasterRunning
parameter_list|(
name|MasterProtos
operator|.
name|MasterService
operator|.
name|BlockingInterface
name|stub
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|stub
operator|.
name|isMasterRunning
argument_list|(
literal|null
argument_list|,
name|RequestConverter
operator|.
name|buildIsMasterRunningRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|handleRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Create a stub. Try once only. It is not typed because there is no common type to protobuf      * services nor their interfaces. Let the caller do appropriate casting.      * @return A stub for master services.      */
specifier|private
name|MasterProtos
operator|.
name|MasterService
operator|.
name|BlockingInterface
name|makeStubNoRetries
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
name|ZooKeeperKeepAliveConnection
name|zkw
decl_stmt|;
try|try
block|{
name|zkw
operator|=
name|getKeepAliveZooKeeperWatcher
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ExceptionUtil
operator|.
name|rethrowIfInterrupt
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ZooKeeperConnectionException
argument_list|(
literal|"Can't connect to ZooKeeper"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|checkIfBaseNodeAvailable
argument_list|(
name|zkw
argument_list|)
expr_stmt|;
name|ServerName
name|sn
init|=
name|MasterAddressTracker
operator|.
name|getMasterAddress
argument_list|(
name|zkw
argument_list|)
decl_stmt|;
if|if
condition|(
name|sn
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"ZooKeeper available but no active master location found"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MasterNotRunningException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|isDeadServer
argument_list|(
name|sn
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MasterNotRunningException
argument_list|(
name|sn
operator|+
literal|" is dead."
argument_list|)
throw|;
block|}
comment|// Use the security info interface name as our stub key
name|String
name|key
init|=
name|getStubKey
argument_list|(
name|MasterProtos
operator|.
name|MasterService
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|sn
argument_list|,
name|hostnamesCanChange
argument_list|)
decl_stmt|;
name|MasterProtos
operator|.
name|MasterService
operator|.
name|BlockingInterface
name|stub
init|=
operator|(
name|MasterProtos
operator|.
name|MasterService
operator|.
name|BlockingInterface
operator|)
name|computeIfAbsentEx
argument_list|(
name|stubs
argument_list|,
name|key
argument_list|,
parameter_list|()
lambda|->
block|{
name|BlockingRpcChannel
name|channel
init|=
name|rpcClient
operator|.
name|createBlockingRpcChannel
argument_list|(
name|sn
argument_list|,
name|user
argument_list|,
name|rpcTimeout
argument_list|)
decl_stmt|;
return|return
name|MasterProtos
operator|.
name|MasterService
operator|.
name|newBlockingStub
argument_list|(
name|channel
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
name|isMasterRunning
argument_list|(
name|stub
argument_list|)
expr_stmt|;
return|return
name|stub
return|;
block|}
finally|finally
block|{
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Create a stub against the master. Retry if necessary.      * @return A stub to do<code>intf</code> against the master      * @throws org.apache.hadoop.hbase.MasterNotRunningException if master is not running      */
name|MasterProtos
operator|.
name|MasterService
operator|.
name|BlockingInterface
name|makeStub
parameter_list|()
throws|throws
name|IOException
block|{
comment|// The lock must be at the beginning to prevent multiple master creations
comment|// (and leaks) in a multithread context
synchronized|synchronized
init|(
name|masterAndZKLock
init|)
block|{
name|Exception
name|exceptionCaught
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|closed
condition|)
block|{
try|try
block|{
return|return
name|makeStubNoRetries
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
name|e
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
name|e
expr_stmt|;
block|}
throw|throw
operator|new
name|MasterNotRunningException
argument_list|(
name|exceptionCaught
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Connection was closed while trying to get master"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|AdminProtos
operator|.
name|AdminService
operator|.
name|BlockingInterface
name|getAdmin
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isDeadServer
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RegionServerStoppedException
argument_list|(
name|serverName
operator|+
literal|" is dead."
argument_list|)
throw|;
block|}
name|String
name|key
init|=
name|getStubKey
argument_list|(
name|AdminProtos
operator|.
name|AdminService
operator|.
name|BlockingInterface
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|serverName
argument_list|,
name|this
operator|.
name|hostnamesCanChange
argument_list|)
decl_stmt|;
return|return
operator|(
name|AdminProtos
operator|.
name|AdminService
operator|.
name|BlockingInterface
operator|)
name|computeIfAbsentEx
argument_list|(
name|stubs
argument_list|,
name|key
argument_list|,
parameter_list|()
lambda|->
block|{
name|BlockingRpcChannel
name|channel
init|=
name|this
operator|.
name|rpcClient
operator|.
name|createBlockingRpcChannel
argument_list|(
name|serverName
argument_list|,
name|user
argument_list|,
name|rpcTimeout
argument_list|)
decl_stmt|;
return|return
name|AdminProtos
operator|.
name|AdminService
operator|.
name|newBlockingStub
argument_list|(
name|channel
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BlockingInterface
name|getClient
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isDeadServer
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RegionServerStoppedException
argument_list|(
name|serverName
operator|+
literal|" is dead."
argument_list|)
throw|;
block|}
name|String
name|key
init|=
name|getStubKey
argument_list|(
name|ClientProtos
operator|.
name|ClientService
operator|.
name|BlockingInterface
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|serverName
argument_list|,
name|this
operator|.
name|hostnamesCanChange
argument_list|)
decl_stmt|;
return|return
operator|(
name|ClientProtos
operator|.
name|ClientService
operator|.
name|BlockingInterface
operator|)
name|computeIfAbsentEx
argument_list|(
name|stubs
argument_list|,
name|key
argument_list|,
parameter_list|()
lambda|->
block|{
name|BlockingRpcChannel
name|channel
init|=
name|this
operator|.
name|rpcClient
operator|.
name|createBlockingRpcChannel
argument_list|(
name|serverName
argument_list|,
name|user
argument_list|,
name|rpcTimeout
argument_list|)
decl_stmt|;
return|return
name|ClientProtos
operator|.
name|ClientService
operator|.
name|newBlockingStub
argument_list|(
name|channel
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
specifier|private
name|ZooKeeperKeepAliveConnection
name|keepAliveZookeeper
decl_stmt|;
specifier|private
name|AtomicInteger
name|keepAliveZookeeperUserCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * Retrieve a shared ZooKeeperWatcher. You must close it it once you've have finished with it.    * @return The shared instance. Never returns null.    */
name|ZooKeeperKeepAliveConnection
name|getKeepAliveZooKeeperWatcher
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|masterAndZKLock
init|)
block|{
if|if
condition|(
name|keepAliveZookeeper
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|toString
argument_list|()
operator|+
literal|" closed"
argument_list|)
throw|;
block|}
comment|// We don't check that our link to ZooKeeper is still valid
comment|// But there is a retry mechanism in the ZooKeeperWatcher itself
name|keepAliveZookeeper
operator|=
operator|new
name|ZooKeeperKeepAliveConnection
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|toString
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|keepAliveZookeeperUserCount
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|keepAliveZookeeper
return|;
block|}
block|}
name|void
name|releaseZooKeeperWatcher
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|)
block|{
if|if
condition|(
name|zkw
operator|==
literal|null
condition|)
block|{
return|return;
block|}
block|}
specifier|private
name|void
name|closeZooKeeperWatcher
parameter_list|()
block|{
synchronized|synchronized
init|(
name|masterAndZKLock
init|)
block|{
if|if
condition|(
name|keepAliveZookeeper
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing zookeeper sessionid=0x"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|keepAliveZookeeper
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keepAliveZookeeper
operator|.
name|internalClose
argument_list|()
expr_stmt|;
name|keepAliveZookeeper
operator|=
literal|null
expr_stmt|;
block|}
name|keepAliveZookeeperUserCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|MasterServiceState
name|masterServiceState
init|=
operator|new
name|MasterServiceState
argument_list|(
name|this
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|MasterService
operator|.
name|BlockingInterface
name|getMaster
parameter_list|()
throws|throws
name|MasterNotRunningException
block|{
return|return
name|getKeepAliveMasterService
argument_list|()
return|;
block|}
specifier|private
name|void
name|resetMasterServiceState
parameter_list|(
specifier|final
name|MasterServiceState
name|mss
parameter_list|)
block|{
name|mss
operator|.
name|userCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MasterKeepAliveConnection
name|getKeepAliveMasterService
parameter_list|()
throws|throws
name|MasterNotRunningException
block|{
synchronized|synchronized
init|(
name|masterAndZKLock
init|)
block|{
if|if
condition|(
operator|!
name|isKeepAliveMasterConnectedAndRunning
argument_list|(
name|this
operator|.
name|masterServiceState
argument_list|)
condition|)
block|{
name|MasterServiceStubMaker
name|stubMaker
init|=
operator|new
name|MasterServiceStubMaker
argument_list|()
decl_stmt|;
try|try
block|{
name|this
operator|.
name|masterServiceState
operator|.
name|stub
operator|=
name|stubMaker
operator|.
name|makeStub
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MasterNotRunningException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// rethrow as MasterNotRunningException so that we can keep the method sig
throw|throw
operator|new
name|MasterNotRunningException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|resetMasterServiceState
argument_list|(
name|this
operator|.
name|masterServiceState
argument_list|)
expr_stmt|;
block|}
comment|// Ugly delegation just so we can add in a Close method.
specifier|final
name|MasterProtos
operator|.
name|MasterService
operator|.
name|BlockingInterface
name|stub
init|=
name|this
operator|.
name|masterServiceState
operator|.
name|stub
decl_stmt|;
return|return
operator|new
name|MasterKeepAliveConnection
argument_list|()
block|{
name|MasterServiceState
name|mss
init|=
name|masterServiceState
decl_stmt|;
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|AbortProcedureResponse
name|abortProcedure
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|AbortProcedureRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|abortProcedure
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|ListProceduresResponse
name|listProcedures
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|ListProceduresRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|listProcedures
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|AddColumnResponse
name|addColumn
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|AddColumnRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|addColumn
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|DeleteColumnResponse
name|deleteColumn
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|DeleteColumnRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|deleteColumn
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|ModifyColumnResponse
name|modifyColumn
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|ModifyColumnRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|modifyColumn
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|MoveRegionResponse
name|moveRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|MoveRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|moveRegion
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|MergeTableRegionsResponse
name|mergeTableRegions
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|MergeTableRegionsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|mergeTableRegions
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|AssignRegionResponse
name|assignRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|AssignRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|assignRegion
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|UnassignRegionResponse
name|unassignRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|UnassignRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|unassignRegion
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|OfflineRegionResponse
name|offlineRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|OfflineRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|offlineRegion
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|DeleteTableResponse
name|deleteTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|DeleteTableRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|deleteTable
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|TruncateTableResponse
name|truncateTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|TruncateTableRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|truncateTable
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|EnableTableResponse
name|enableTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|EnableTableRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|enableTable
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|DisableTableResponse
name|disableTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|DisableTableRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|disableTable
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|ModifyTableResponse
name|modifyTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|ModifyTableRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|modifyTable
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|CreateTableResponse
name|createTable
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|CreateTableRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|createTable
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|ShutdownResponse
name|shutdown
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|ShutdownRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|shutdown
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|StopMasterResponse
name|stopMaster
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|StopMasterRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|stopMaster
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|IsInMaintenanceModeResponse
name|isMasterInMaintenanceMode
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|MasterProtos
operator|.
name|IsInMaintenanceModeRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|isMasterInMaintenanceMode
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|BalanceResponse
name|balance
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|BalanceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|balance
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|SetBalancerRunningResponse
name|setBalancerRunning
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|SetBalancerRunningRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|setBalancerRunning
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NormalizeResponse
name|normalize
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|NormalizeRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|normalize
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SetNormalizerRunningResponse
name|setNormalizerRunning
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SetNormalizerRunningRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|setNormalizerRunning
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|RunCatalogScanResponse
name|runCatalogScan
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|RunCatalogScanRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|runCatalogScan
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|EnableCatalogJanitorResponse
name|enableCatalogJanitor
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|EnableCatalogJanitorRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|enableCatalogJanitor
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|IsCatalogJanitorEnabledResponse
name|isCatalogJanitorEnabled
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|IsCatalogJanitorEnabledRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|isCatalogJanitorEnabled
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|RunCleanerChoreResponse
name|runCleanerChore
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|RunCleanerChoreRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|runCleanerChore
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|SetCleanerChoreRunningResponse
name|setCleanerChoreRunning
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|SetCleanerChoreRunningRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|setCleanerChoreRunning
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|IsCleanerChoreEnabledResponse
name|isCleanerChoreEnabled
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|IsCleanerChoreEnabledRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|isCleanerChoreEnabled
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
name|execMasterService
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ClientProtos
operator|.
name|CoprocessorServiceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|execMasterService
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|SnapshotResponse
name|snapshot
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|SnapshotRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|snapshot
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|GetCompletedSnapshotsResponse
name|getCompletedSnapshots
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|GetCompletedSnapshotsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|getCompletedSnapshots
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|DeleteSnapshotResponse
name|deleteSnapshot
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|DeleteSnapshotRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|deleteSnapshot
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|IsSnapshotDoneResponse
name|isSnapshotDone
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|IsSnapshotDoneRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|isSnapshotDone
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|RestoreSnapshotResponse
name|restoreSnapshot
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|RestoreSnapshotRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|restoreSnapshot
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|ExecProcedureResponse
name|execProcedure
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|ExecProcedureRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|execProcedure
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|ExecProcedureResponse
name|execProcedureWithRet
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|ExecProcedureRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|execProcedureWithRet
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|IsProcedureDoneResponse
name|isProcedureDone
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|IsProcedureDoneRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|isProcedureDone
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|GetProcedureResultResponse
name|getProcedureResult
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|GetProcedureResultRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|getProcedureResult
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|IsMasterRunningResponse
name|isMasterRunning
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|IsMasterRunningRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|isMasterRunning
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|ModifyNamespaceResponse
name|modifyNamespace
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|ModifyNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|modifyNamespace
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|CreateNamespaceResponse
name|createNamespace
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|CreateNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|createNamespace
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|DeleteNamespaceResponse
name|deleteNamespace
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|DeleteNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|deleteNamespace
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|GetNamespaceDescriptorResponse
name|getNamespaceDescriptor
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|GetNamespaceDescriptorRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|getNamespaceDescriptor
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|ListNamespaceDescriptorsResponse
name|listNamespaceDescriptors
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|ListNamespaceDescriptorsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|listNamespaceDescriptors
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|ListTableDescriptorsByNamespaceResponse
name|listTableDescriptorsByNamespace
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|ListTableDescriptorsByNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|listTableDescriptorsByNamespace
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|ListTableNamesByNamespaceResponse
name|listTableNamesByNamespace
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|ListTableNamesByNamespaceRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|listTableNamesByNamespace
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|GetTableStateResponse
name|getTableState
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|GetTableStateRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|getTableState
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|release
argument_list|(
name|this
operator|.
name|mss
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|GetSchemaAlterStatusResponse
name|getSchemaAlterStatus
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|GetSchemaAlterStatusRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|getSchemaAlterStatus
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|GetTableDescriptorsResponse
name|getTableDescriptors
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|GetTableDescriptorsRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|getTableDescriptors
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|GetTableNamesResponse
name|getTableNames
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|GetTableNamesRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|getTableNames
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|GetClusterStatusResponse
name|getClusterStatus
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|GetClusterStatusRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|getClusterStatus
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|SetQuotaResponse
name|setQuota
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|SetQuotaRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|setQuota
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|MajorCompactionTimestampResponse
name|getLastMajorCompactionTimestamp
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|MajorCompactionTimestampRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|MajorCompactionTimestampResponse
name|getLastMajorCompactionTimestampForRegion
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|MajorCompactionTimestampForRegionRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|getLastMajorCompactionTimestampForRegion
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IsBalancerEnabledResponse
name|isBalancerEnabled
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IsBalancerEnabledRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|isBalancerEnabled
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|SetSplitOrMergeEnabledResponse
name|setSplitOrMergeEnabled
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|SetSplitOrMergeEnabledRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|setSplitOrMergeEnabled
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MasterProtos
operator|.
name|IsSplitOrMergeEnabledResponse
name|isSplitOrMergeEnabled
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MasterProtos
operator|.
name|IsSplitOrMergeEnabledRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IsNormalizerEnabledResponse
name|isNormalizerEnabled
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IsNormalizerEnabledRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|isNormalizerEnabled
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SecurityCapabilitiesResponse
name|getSecurityCapabilities
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SecurityCapabilitiesRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|getSecurityCapabilities
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AddReplicationPeerResponse
name|addReplicationPeer
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AddReplicationPeerRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|addReplicationPeer
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RemoveReplicationPeerResponse
name|removeReplicationPeer
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RemoveReplicationPeerRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|removeReplicationPeer
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|EnableReplicationPeerResponse
name|enableReplicationPeer
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|EnableReplicationPeerRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|enableReplicationPeer
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DisableReplicationPeerResponse
name|disableReplicationPeer
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DisableReplicationPeerRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|disableReplicationPeer
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListDrainingRegionServersResponse
name|listDrainingRegionServers
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ListDrainingRegionServersRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|listDrainingRegionServers
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DrainRegionServersResponse
name|drainRegionServers
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DrainRegionServersRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|drainRegionServers
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RemoveDrainFromRegionServersResponse
name|removeDrainFromRegionServers
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RemoveDrainFromRegionServersRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|removeDrainFromRegionServers
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|GetReplicationPeerConfigResponse
name|getReplicationPeerConfig
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetReplicationPeerConfigRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|getReplicationPeerConfig
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|UpdateReplicationPeerConfigResponse
name|updateReplicationPeerConfig
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|UpdateReplicationPeerConfigRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListReplicationPeersResponse
name|listReplicationPeers
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ListReplicationPeersRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|stub
operator|.
name|listReplicationPeers
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|void
name|release
parameter_list|(
name|MasterServiceState
name|mss
parameter_list|)
block|{
if|if
condition|(
name|mss
operator|!=
literal|null
operator|&&
name|mss
operator|.
name|connection
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|ConnectionImplementation
operator|)
name|mss
operator|.
name|connection
operator|)
operator|.
name|releaseMaster
argument_list|(
name|mss
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isKeepAliveMasterConnectedAndRunning
parameter_list|(
name|MasterServiceState
name|mss
parameter_list|)
block|{
if|if
condition|(
name|mss
operator|.
name|getStub
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
return|return
name|mss
operator|.
name|isMasterRunning
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|e
parameter_list|)
block|{
comment|// It's somehow messy, but we can receive exceptions such as
comment|//  java.net.ConnectException but they're not declared. So we catch it...
name|LOG
operator|.
name|info
argument_list|(
literal|"Master connection is not running anymore"
argument_list|,
name|e
operator|.
name|getUndeclaredThrowable
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Checking master connection"
argument_list|,
name|se
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|void
name|releaseMaster
parameter_list|(
name|MasterServiceState
name|mss
parameter_list|)
block|{
if|if
condition|(
name|mss
operator|.
name|getStub
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|masterAndZKLock
init|)
block|{
operator|--
name|mss
operator|.
name|userCount
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|closeMasterService
parameter_list|(
name|MasterServiceState
name|mss
parameter_list|)
block|{
if|if
condition|(
name|mss
operator|.
name|getStub
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing master protocol: "
operator|+
name|mss
argument_list|)
expr_stmt|;
name|mss
operator|.
name|clearStub
argument_list|()
expr_stmt|;
block|}
name|mss
operator|.
name|userCount
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Immediate close of the shared master. Can be by the delayed close or when closing the    * connection itself.    */
specifier|private
name|void
name|closeMaster
parameter_list|()
block|{
synchronized|synchronized
init|(
name|masterAndZKLock
init|)
block|{
name|closeMasterService
argument_list|(
name|masterServiceState
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|updateCachedLocation
parameter_list|(
name|HRegionInfo
name|hri
parameter_list|,
name|ServerName
name|source
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
name|long
name|seqNum
parameter_list|)
block|{
name|HRegionLocation
name|newHrl
init|=
operator|new
name|HRegionLocation
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|,
name|seqNum
argument_list|)
decl_stmt|;
name|cacheLocation
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|,
name|source
argument_list|,
name|newHrl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteCachedRegionLocation
parameter_list|(
specifier|final
name|HRegionLocation
name|location
parameter_list|)
block|{
name|metaCache
operator|.
name|clearCache
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update the location with the new value (if the exception is a RegionMovedException)    * or delete it from the cache. Does nothing if we can be sure from the exception that    * the location is still accurate, or if the cache has already been updated.    * @param exception an object (to simplify user code) on which we will try to find a nested    *   or wrapped or both RegionMovedException    * @param source server that is the source of the location update.    */
annotation|@
name|Override
specifier|public
name|void
name|updateCachedLocations
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|,
name|byte
index|[]
name|rowkey
parameter_list|,
specifier|final
name|Object
name|exception
parameter_list|,
specifier|final
name|ServerName
name|source
parameter_list|)
block|{
if|if
condition|(
name|rowkey
operator|==
literal|null
operator|||
name|tableName
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Coding error, see method javadoc. row="
operator|+
operator|(
name|rowkey
operator|==
literal|null
condition|?
literal|"null"
else|:
name|rowkey
operator|)
operator|+
literal|", tableName="
operator|+
operator|(
name|tableName
operator|==
literal|null
condition|?
literal|"null"
else|:
name|tableName
operator|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
comment|// This should not happen, but let's secure ourselves.
return|return;
block|}
if|if
condition|(
name|regionName
operator|==
literal|null
condition|)
block|{
comment|// we do not know which region, so just remove the cache entry for the row and server
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|incrCacheDroppingExceptions
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
name|metaCache
operator|.
name|clearCache
argument_list|(
name|tableName
argument_list|,
name|rowkey
argument_list|,
name|source
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Is it something we have already updated?
specifier|final
name|RegionLocations
name|oldLocations
init|=
name|getCachedLocation
argument_list|(
name|tableName
argument_list|,
name|rowkey
argument_list|)
decl_stmt|;
name|HRegionLocation
name|oldLocation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|oldLocations
operator|!=
literal|null
condition|)
block|{
name|oldLocation
operator|=
name|oldLocations
operator|.
name|getRegionLocationByRegionName
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldLocation
operator|==
literal|null
operator|||
operator|!
name|source
operator|.
name|equals
argument_list|(
name|oldLocation
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
comment|// There is no such location in the cache (it's been removed already) or
comment|// the cache has already been refreshed with a different location.  => nothing to do
return|return;
block|}
name|HRegionInfo
name|regionInfo
init|=
name|oldLocation
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|Throwable
name|cause
init|=
name|ClientExceptionsUtil
operator|.
name|findException
argument_list|(
name|exception
argument_list|)
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|ClientExceptionsUtil
operator|.
name|isMetaClearingException
argument_list|(
name|cause
argument_list|)
condition|)
block|{
comment|// We know that the region is still on this region server
return|return;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|RegionMovedException
condition|)
block|{
name|RegionMovedException
name|rme
init|=
operator|(
name|RegionMovedException
operator|)
name|cause
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Region "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" moved to "
operator|+
name|rme
operator|.
name|getHostname
argument_list|()
operator|+
literal|":"
operator|+
name|rme
operator|.
name|getPort
argument_list|()
operator|+
literal|" according to "
operator|+
name|source
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// We know that the region is not anymore on this region server, but we know
comment|//  the new location.
name|updateCachedLocation
argument_list|(
name|regionInfo
argument_list|,
name|source
argument_list|,
name|rme
operator|.
name|getServerName
argument_list|()
argument_list|,
name|rme
operator|.
name|getLocationSeqNum
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|incrCacheDroppingExceptions
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
comment|// If we're here, it means that can cannot be sure about the location, so we remove it from
comment|// the cache. Do not send the source because source can be a new server in the same host:port
name|metaCache
operator|.
name|clearCache
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|AsyncProcess
name|getAsyncProcess
parameter_list|()
block|{
return|return
name|asyncProcess
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerStatisticTracker
name|getStatisticsTracker
parameter_list|()
block|{
return|return
name|this
operator|.
name|stats
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClientBackoffPolicy
name|getBackoffPolicy
parameter_list|()
block|{
return|return
name|this
operator|.
name|backoffPolicy
return|;
block|}
comment|/*    * Return the number of cached region for a table. It will only be called    * from a unit test.    */
annotation|@
name|VisibleForTesting
name|int
name|getNumberOfCachedRegionLocations
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|metaCache
operator|.
name|getNumberOfCachedRegionLocations
argument_list|(
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|KeeperException
operator|.
name|SessionExpiredException
operator|&&
name|keepAliveZookeeper
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|masterAndZKLock
init|)
block|{
if|if
condition|(
name|keepAliveZookeeper
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"This client just lost it's session with ZooKeeper,"
operator|+
literal|" closing it."
operator|+
literal|" It will be recreated next time someone needs it"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|closeZooKeeperWatcher
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|fatal
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|aborted
operator|=
literal|true
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|this
operator|.
name|closed
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|this
operator|.
name|aborted
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCurrentNrHRS
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|registry
operator|.
name|getCurrentNrHRS
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
return|return;
block|}
name|closeMaster
argument_list|()
expr_stmt|;
name|shutdownPools
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|metrics
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|metrics
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
name|closeZooKeeperWatcher
argument_list|()
expr_stmt|;
name|this
operator|.
name|stubs
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clusterStatusListener
operator|!=
literal|null
condition|)
block|{
name|clusterStatusListener
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rpcClient
operator|!=
literal|null
condition|)
block|{
name|rpcClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Close the connection for good. On the off chance that someone is unable to close    * the connection, perhaps because it bailed out prematurely, the method    * below will ensure that this instance is cleaned up.    * Caveat: The JVM may take an unknown amount of time to call finalize on an    * unreachable object, so our hope is that every consumer cleans up after    * itself, like any good citizen.    */
annotation|@
name|Override
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NonceGenerator
name|getNonceGenerator
parameter_list|()
block|{
return|return
name|nonceGenerator
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableState
name|getTableState
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|toString
argument_list|()
operator|+
literal|" closed"
argument_list|)
throw|;
block|}
name|TableState
name|tableState
init|=
name|MetaTableAccessor
operator|.
name|getTableState
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableState
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
argument_list|)
throw|;
block|}
return|return
name|tableState
return|;
block|}
annotation|@
name|Override
specifier|public
name|RpcRetryingCallerFactory
name|getNewRpcRetryingCallerFactory
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|RpcRetryingCallerFactory
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|interceptor
argument_list|,
name|this
operator|.
name|getStatisticsTracker
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasCellBlockSupport
parameter_list|()
block|{
return|return
name|this
operator|.
name|rpcClient
operator|.
name|hasCellBlockSupport
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConnectionConfiguration
name|getConnectionConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|connectionConfig
return|;
block|}
annotation|@
name|Override
specifier|public
name|RpcRetryingCallerFactory
name|getRpcRetryingCallerFactory
parameter_list|()
block|{
return|return
name|this
operator|.
name|rpcCallerFactory
return|;
block|}
annotation|@
name|Override
specifier|public
name|RpcControllerFactory
name|getRpcControllerFactory
parameter_list|()
block|{
return|return
name|this
operator|.
name|rpcControllerFactory
return|;
block|}
block|}
end_class

end_unit

