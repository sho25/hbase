begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_class
specifier|public
class|class
name|MetricsConnectionWrapperImpl
implements|implements
name|MetricsConnectionWrapper
block|{
specifier|private
specifier|final
name|ConnectionImplementation
name|conn
decl_stmt|;
specifier|public
name|MetricsConnectionWrapperImpl
parameter_list|(
name|ConnectionImplementation
name|connection
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|this
operator|.
name|conn
operator|=
name|connection
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|conn
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|conn
operator|.
name|user
operator|==
literal|null
condition|?
literal|""
else|:
name|conn
operator|.
name|user
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getClusterId
parameter_list|()
block|{
return|return
name|conn
operator|.
name|clusterId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getZookeeperQuorum
parameter_list|()
block|{
try|try
block|{
return|return
name|conn
operator|.
name|getKeepAliveZooKeeperWatcher
argument_list|()
operator|.
name|getQuorum
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getZookeeperBaseNode
parameter_list|()
block|{
try|try
block|{
return|return
name|conn
operator|.
name|getKeepAliveZooKeeperWatcher
argument_list|()
operator|.
name|getBaseZNode
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMetaLookupPoolActiveCount
parameter_list|()
block|{
if|if
condition|(
name|conn
operator|.
name|getCurrentMetaLookupPool
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|ThreadPoolExecutor
name|tpe
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|conn
operator|.
name|getCurrentMetaLookupPool
argument_list|()
decl_stmt|;
return|return
name|tpe
operator|.
name|getActiveCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMetaLookupPoolLargestPoolSize
parameter_list|()
block|{
if|if
condition|(
name|conn
operator|.
name|getCurrentMetaLookupPool
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|ThreadPoolExecutor
name|tpe
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|conn
operator|.
name|getCurrentMetaLookupPool
argument_list|()
decl_stmt|;
return|return
name|tpe
operator|.
name|getLargestPoolSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getBatchPoolId
parameter_list|()
block|{
if|if
condition|(
name|conn
operator|.
name|getCurrentBatchPool
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|Integer
operator|.
name|toHexString
argument_list|(
name|conn
operator|.
name|getCurrentBatchPool
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getBatchPoolActiveCount
parameter_list|()
block|{
if|if
condition|(
name|conn
operator|.
name|getCurrentBatchPool
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|ThreadPoolExecutor
name|tpe
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|conn
operator|.
name|getCurrentBatchPool
argument_list|()
decl_stmt|;
return|return
name|tpe
operator|.
name|getActiveCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getBatchPoolLargestPoolSize
parameter_list|()
block|{
if|if
condition|(
name|conn
operator|.
name|getCurrentBatchPool
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|ThreadPoolExecutor
name|tpe
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|conn
operator|.
name|getCurrentBatchPool
argument_list|()
decl_stmt|;
return|return
name|tpe
operator|.
name|getLargestPoolSize
argument_list|()
return|;
block|}
block|}
end_class

end_unit

