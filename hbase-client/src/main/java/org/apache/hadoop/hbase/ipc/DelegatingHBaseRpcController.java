begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Simple delegating controller for use with the {@link RpcControllerFactory} to help override  * standard behavior of a {@link HBaseRpcController}. Used testing.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|DelegatingHBaseRpcController
implements|implements
name|HBaseRpcController
block|{
specifier|private
specifier|final
name|HBaseRpcController
name|delegate
decl_stmt|;
specifier|public
name|DelegatingHBaseRpcController
parameter_list|(
name|HBaseRpcController
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|delegate
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|failed
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|failed
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|errorText
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|errorText
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startCancel
parameter_list|()
block|{
name|delegate
operator|.
name|startCancel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFailed
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|delegate
operator|.
name|setFailed
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCanceled
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isCanceled
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyOnCancel
parameter_list|(
name|RpcCallback
argument_list|<
name|Object
argument_list|>
name|callback
parameter_list|)
block|{
name|delegate
operator|.
name|notifyOnCancel
argument_list|(
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CellScanner
name|cellScanner
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|cellScanner
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCellScanner
parameter_list|(
name|CellScanner
name|cellScanner
parameter_list|)
block|{
name|delegate
operator|.
name|setCellScanner
argument_list|(
name|cellScanner
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPriority
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
name|delegate
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPriority
parameter_list|(
name|TableName
name|tn
parameter_list|)
block|{
name|delegate
operator|.
name|setPriority
argument_list|(
name|tn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getPriority
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCallTimeout
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getCallTimeout
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCallTimeout
parameter_list|(
name|int
name|callTimeout
parameter_list|)
block|{
name|delegate
operator|.
name|setCallTimeout
argument_list|(
name|callTimeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasCallTimeout
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|hasCallTimeout
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFailed
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|delegate
operator|.
name|setFailed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|IOException
name|getFailed
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getFailed
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDone
parameter_list|(
name|CellScanner
name|cellScanner
parameter_list|)
block|{
name|delegate
operator|.
name|setDone
argument_list|(
name|cellScanner
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyOnCancel
parameter_list|(
name|RpcCallback
argument_list|<
name|Object
argument_list|>
name|callback
parameter_list|,
name|CancellationCallback
name|action
parameter_list|)
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|notifyOnCancel
argument_list|(
name|callback
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

