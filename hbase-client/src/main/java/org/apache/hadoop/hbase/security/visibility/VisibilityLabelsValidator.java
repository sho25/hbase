begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A simple validator that validates the labels passed  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|VisibilityLabelsValidator
block|{
specifier|private
specifier|static
specifier|final
name|boolean
index|[]
name|validAuthChars
init|=
operator|new
name|boolean
index|[
literal|256
index|]
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|regex
init|=
literal|"[A-Za-z_\\-\\:\\/\\.0-9]+"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
decl_stmt|;
static|static
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
name|i
operator|++
control|)
block|{
name|validAuthChars
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|'a'
init|;
name|i
operator|<=
literal|'z'
condition|;
name|i
operator|++
control|)
block|{
name|validAuthChars
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|'A'
init|;
name|i
operator|<=
literal|'Z'
condition|;
name|i
operator|++
control|)
block|{
name|validAuthChars
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|'0'
init|;
name|i
operator|<=
literal|'9'
condition|;
name|i
operator|++
control|)
block|{
name|validAuthChars
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|validAuthChars
index|[
literal|'_'
index|]
operator|=
literal|true
expr_stmt|;
name|validAuthChars
index|[
literal|'-'
index|]
operator|=
literal|true
expr_stmt|;
name|validAuthChars
index|[
literal|':'
index|]
operator|=
literal|true
expr_stmt|;
name|validAuthChars
index|[
literal|'.'
index|]
operator|=
literal|true
expr_stmt|;
name|validAuthChars
index|[
literal|'/'
index|]
operator|=
literal|true
expr_stmt|;
block|}
specifier|static
specifier|final
name|boolean
name|isValidAuthChar
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
return|return
name|validAuthChars
index|[
literal|0xff
operator|&
name|b
index|]
return|;
block|}
specifier|public
specifier|static
specifier|final
name|boolean
name|isValidLabel
parameter_list|(
name|byte
index|[]
name|label
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|label
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|isValidAuthChar
argument_list|(
name|label
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

