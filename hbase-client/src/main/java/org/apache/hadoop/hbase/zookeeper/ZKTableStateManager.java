begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Implementation of TableStateManager which reads, caches and sets state  * up in ZooKeeper.  If multiple read/write clients, will make for confusion.  * Code running on client side without consensus context should use  * {@link ZKTableStateClientSideReader} instead.  *  *<p>To save on trips to the zookeeper ensemble, internally we cache table  * state.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ZKTableStateManager
implements|implements
name|TableStateManager
block|{
comment|// A znode will exist under the table directory if it is in any of the
comment|// following states: {@link TableState#ENABLING} , {@link TableState#DISABLING},
comment|// or {@link TableState#DISABLED}.  If {@link TableState#ENABLED}, there will
comment|// be no entry for a table in zk.  Thats how it currently works.
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZKTableStateManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ZooKeeperWatcher
name|watcher
decl_stmt|;
comment|/**    * Cache of what we found in zookeeper so we don't have to go to zk ensemble    * for every query.  Synchronize access rather than use concurrent Map because    * synchronization needs to span query of zk.    */
specifier|private
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
argument_list|>
name|cache
init|=
operator|new
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ZKTableStateManager
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|watcher
operator|=
name|zkw
expr_stmt|;
name|populateTableStates
argument_list|()
expr_stmt|;
block|}
comment|/**    * Gets a list of all the tables set as disabled in zookeeper.    * @throws KeeperException, InterruptedException    */
specifier|private
name|void
name|populateTableStates
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|cache
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|this
operator|.
name|watcher
operator|.
name|tableZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|state
init|=
name|getTableState
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
name|this
operator|.
name|cache
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Sets table state in ZK. Sets no watches.    *    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|setTableState
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|CoordinatedStateException
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|cache
init|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Moving table "
operator|+
name|tableName
operator|+
literal|" state from "
operator|+
name|this
operator|.
name|cache
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|+
literal|" to "
operator|+
name|state
argument_list|)
expr_stmt|;
try|try
block|{
name|setTableStateInZK
argument_list|(
name|tableName
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CoordinatedStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Checks and sets table state in ZK. Sets no watches.    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
name|setTableStateIfInStates
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|newState
parameter_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
modifier|...
name|states
parameter_list|)
throws|throws
name|CoordinatedStateException
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|cache
init|)
block|{
comment|// Transition ENABLED->DISABLING has to be performed with a hack, because
comment|// we treat empty state as enabled in this case because 0.92- clusters.
if|if
condition|(
operator|(
name|newState
operator|==
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|DISABLING
operator|)
operator|&&
name|this
operator|.
name|cache
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|isTableState
argument_list|(
name|tableName
argument_list|,
name|states
argument_list|)
operator|||
operator|(
name|newState
operator|!=
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|DISABLING
operator|&&
operator|!
name|isTableState
argument_list|(
name|tableName
argument_list|,
name|states
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|setTableStateInZK
argument_list|(
name|tableName
argument_list|,
name|newState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CoordinatedStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Checks and sets table state in ZK. Sets no watches.    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
name|setTableStateIfNotInStates
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|newState
parameter_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
modifier|...
name|states
parameter_list|)
throws|throws
name|CoordinatedStateException
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|cache
init|)
block|{
if|if
condition|(
name|isTableState
argument_list|(
name|tableName
argument_list|,
name|states
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|setTableStateInZK
argument_list|(
name|tableName
argument_list|,
name|newState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CoordinatedStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|private
name|void
name|setTableStateInZK
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|KeeperException
block|{
name|String
name|znode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|watcher
operator|.
name|tableZNode
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|znode
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|ZKUtil
operator|.
name|createAndFailSilent
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|znode
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
operator|.
name|cache
init|)
block|{
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|Builder
name|builder
init|=
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setState
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|znode
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|this
operator|.
name|cache
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checks if table is marked in specified state in ZK.    *    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
name|isTableState
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
modifier|...
name|states
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|cache
init|)
block|{
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|currentState
init|=
name|this
operator|.
name|cache
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
return|return
name|isTableInState
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|states
argument_list|)
argument_list|,
name|currentState
argument_list|)
return|;
block|}
block|}
comment|/**    * Deletes the table in zookeeper.  Fails silently if the    * table is not currently disabled in zookeeper.  Sets no watches.    *    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|setDeletedTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|CoordinatedStateException
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|cache
init|)
block|{
if|if
condition|(
name|this
operator|.
name|cache
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Moving table "
operator|+
name|tableName
operator|+
literal|" state to deleted but was "
operator|+
literal|"already deleted"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ZKUtil
operator|.
name|deleteNodeFailSilent
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|watcher
operator|.
name|tableZNode
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CoordinatedStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * check if table is present.    *    * @param tableName table we're working on    * @return true if the table is present    */
annotation|@
name|Override
specifier|public
name|boolean
name|isTablePresent
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|cache
init|)
block|{
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|state
init|=
name|this
operator|.
name|cache
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
return|return
operator|!
operator|(
name|state
operator|==
literal|null
operator|)
return|;
block|}
block|}
comment|/**    * Gets a list of all the tables set as disabling in zookeeper.    * @return Set of disabling tables, empty Set if none    * @throws CoordinatedStateException if error happened in underlying coordination engine    */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|TableName
argument_list|>
name|getTablesInStates
parameter_list|(
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
modifier|...
name|states
parameter_list|)
throws|throws
name|InterruptedIOException
throws|,
name|CoordinatedStateException
block|{
try|try
block|{
return|return
name|getAllTables
argument_list|(
name|states
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CoordinatedStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|checkAndRemoveTableState
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|states
parameter_list|,
name|boolean
name|deletePermanentState
parameter_list|)
throws|throws
name|CoordinatedStateException
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|cache
init|)
block|{
if|if
condition|(
name|isTableState
argument_list|(
name|tableName
argument_list|,
name|states
argument_list|)
condition|)
block|{
name|this
operator|.
name|cache
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|deletePermanentState
condition|)
block|{
try|try
block|{
name|ZKUtil
operator|.
name|deleteNodeFailSilent
argument_list|(
name|this
operator|.
name|watcher
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|watcher
operator|.
name|tableZNode
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CoordinatedStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Gets a list of all the tables of specified states in zookeeper.    * @return Set of tables of specified states, empty Set if none    * @throws KeeperException    */
name|Set
argument_list|<
name|TableName
argument_list|>
name|getAllTables
parameter_list|(
specifier|final
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
modifier|...
name|states
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedIOException
block|{
name|Set
argument_list|<
name|TableName
argument_list|>
name|allTables
init|=
operator|new
name|HashSet
argument_list|<
name|TableName
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|tableZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
return|return
name|allTables
return|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|state
decl_stmt|;
try|try
block|{
name|state
operator|=
name|getTableState
argument_list|(
name|watcher
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
for|for
control|(
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|expectedState
range|:
name|states
control|)
block|{
if|if
condition|(
name|state
operator|==
name|expectedState
condition|)
block|{
name|allTables
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|allTables
return|;
block|}
comment|/**    * Gets table state from ZK.    * @param zkw ZooKeeperWatcher instance to use    * @param tableName table we're checking    * @return Null or {@link ZooKeeperProtos.Table.State} found in znode.    * @throws KeeperException    */
specifier|private
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|getTableState
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|znode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|tableZNode
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|znode
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
try|try
block|{
name|ProtobufUtil
operator|.
name|expectPBMagicPrefix
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|Builder
name|builder
init|=
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|int
name|magicLen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|Table
name|t
init|=
name|builder
operator|.
name|mergeFrom
argument_list|(
name|data
argument_list|,
name|magicLen
argument_list|,
name|data
operator|.
name|length
operator|-
name|magicLen
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|t
operator|.
name|getState
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|KeeperException
name|ke
init|=
operator|new
name|KeeperException
operator|.
name|DataInconsistencyException
argument_list|()
decl_stmt|;
name|ke
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ke
throw|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
name|ZKUtil
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return true if current state isn't null and is contained    * in the list of expected states.    */
specifier|private
name|boolean
name|isTableInState
parameter_list|(
specifier|final
name|List
argument_list|<
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
argument_list|>
name|expectedStates
parameter_list|,
specifier|final
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|currentState
parameter_list|)
block|{
return|return
name|currentState
operator|!=
literal|null
operator|&&
name|expectedStates
operator|.
name|contains
argument_list|(
name|currentState
argument_list|)
return|;
block|}
block|}
end_class

end_unit

