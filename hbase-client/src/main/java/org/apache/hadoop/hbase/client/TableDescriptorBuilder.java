begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_comment
comment|/**  * @since 2.0.0  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|TableDescriptorBuilder
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TableDescriptorBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
specifier|final
name|String
name|SPLIT_POLICY
init|=
literal|"SPLIT_POLICY"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Bytes
name|SPLIT_POLICY_KEY
init|=
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SPLIT_POLICY
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Used by HBase Shell interface to access this metadata    * attribute which denotes the maximum size of the store file after which a    * region split occurs.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
specifier|final
name|String
name|MAX_FILESIZE
init|=
literal|"MAX_FILESIZE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Bytes
name|MAX_FILESIZE_KEY
init|=
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|MAX_FILESIZE
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
specifier|final
name|String
name|OWNER
init|=
literal|"OWNER"
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
specifier|final
name|Bytes
name|OWNER_KEY
init|=
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|OWNER
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Used by rest interface to access this metadata attribute    * which denotes if the table is Read Only.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
specifier|final
name|String
name|READONLY
init|=
literal|"READONLY"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Bytes
name|READONLY_KEY
init|=
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|READONLY
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Used by HBase Shell interface to access this metadata    * attribute which denotes if the table is compaction enabled.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
specifier|final
name|String
name|COMPACTION_ENABLED
init|=
literal|"COMPACTION_ENABLED"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Bytes
name|COMPACTION_ENABLED_KEY
init|=
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COMPACTION_ENABLED
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Used by HBase Shell interface to access this metadata    * attribute which represents the maximum size of the memstore after which its    * contents are flushed onto the disk.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
specifier|final
name|String
name|MEMSTORE_FLUSHSIZE
init|=
literal|"MEMSTORE_FLUSHSIZE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Bytes
name|MEMSTORE_FLUSHSIZE_KEY
init|=
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|MEMSTORE_FLUSHSIZE
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
specifier|final
name|String
name|FLUSH_POLICY
init|=
literal|"FLUSH_POLICY"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Bytes
name|FLUSH_POLICY_KEY
init|=
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|FLUSH_POLICY
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Used by rest interface to access this metadata attribute    * which denotes if it is a catalog table, either<code> hbase:meta</code>.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
specifier|final
name|String
name|IS_META
init|=
literal|"IS_META"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Bytes
name|IS_META_KEY
init|=
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|IS_META
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * {@link Durability} setting for the table.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
specifier|final
name|String
name|DURABILITY
init|=
literal|"DURABILITY"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Bytes
name|DURABILITY_KEY
init|=
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"DURABILITY"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * The number of region replicas for the table.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
specifier|final
name|String
name|REGION_REPLICATION
init|=
literal|"REGION_REPLICATION"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Bytes
name|REGION_REPLICATION_KEY
init|=
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|REGION_REPLICATION
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * The flag to indicate whether or not the memstore should be    * replicated for read-replicas (CONSISTENCY =&gt; TIMELINE).    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
specifier|final
name|String
name|REGION_MEMSTORE_REPLICATION
init|=
literal|"REGION_MEMSTORE_REPLICATION"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Bytes
name|REGION_MEMSTORE_REPLICATION_KEY
init|=
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|REGION_MEMSTORE_REPLICATION
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Bytes
name|REGION_REPLICA_WAIT_FOR_PRIMARY_FLUSH_CONF_KEY
init|=
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|RegionReplicaUtil
operator|.
name|REGION_REPLICA_WAIT_FOR_PRIMARY_FLUSH_CONF_KEY
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Used by shell/rest interface to access this metadata    * attribute which denotes if the table should be treated by region    * normalizer.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
specifier|final
name|String
name|NORMALIZATION_ENABLED
init|=
literal|"NORMALIZATION_ENABLED"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Bytes
name|NORMALIZATION_ENABLED_KEY
init|=
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|NORMALIZATION_ENABLED
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Default durability for HTD is USE_DEFAULT, which defaults to HBase-global    * default value    */
specifier|private
specifier|static
specifier|final
name|Durability
name|DEFAULT_DURABLITY
init|=
name|Durability
operator|.
name|USE_DEFAULT
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
specifier|final
name|String
name|PRIORITY
init|=
literal|"PRIORITY"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Bytes
name|PRIORITY_KEY
init|=
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|PRIORITY
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Relative priority of the table used for rpc scheduling    */
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_PRIORITY
init|=
name|HConstants
operator|.
name|NORMAL_QOS
decl_stmt|;
comment|/**    * Constant that denotes whether the table is READONLY by default and is false    */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_READONLY
init|=
literal|false
decl_stmt|;
comment|/**    * Constant that denotes whether the table is compaction enabled by default    */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_COMPACTION_ENABLED
init|=
literal|true
decl_stmt|;
comment|/**    * Constant that denotes whether the table is normalized by default.    */
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NORMALIZATION_ENABLED
init|=
literal|false
decl_stmt|;
comment|/**    * Constant that denotes the maximum default size of the memstore after which    * the contents are flushed to the store files    */
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_MEMSTORE_FLUSH_SIZE
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|128L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_REGION_REPLICATION
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_REGION_MEMSTORE_REPLICATION
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|DEFAULT_VALUES
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Set
argument_list|<
name|Bytes
argument_list|>
name|RESERVED_KEYWORDS
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|DEFAULT_VALUES
operator|.
name|put
argument_list|(
name|MAX_FILESIZE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|HConstants
operator|.
name|DEFAULT_MAX_FILE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|DEFAULT_VALUES
operator|.
name|put
argument_list|(
name|READONLY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|DEFAULT_READONLY
argument_list|)
argument_list|)
expr_stmt|;
name|DEFAULT_VALUES
operator|.
name|put
argument_list|(
name|MEMSTORE_FLUSHSIZE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|DEFAULT_MEMSTORE_FLUSH_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|DEFAULT_VALUES
operator|.
name|put
argument_list|(
name|DURABILITY
argument_list|,
name|DEFAULT_DURABLITY
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
comment|//use the enum name
name|DEFAULT_VALUES
operator|.
name|put
argument_list|(
name|REGION_REPLICATION
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|DEFAULT_REGION_REPLICATION
argument_list|)
argument_list|)
expr_stmt|;
name|DEFAULT_VALUES
operator|.
name|put
argument_list|(
name|NORMALIZATION_ENABLED
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|DEFAULT_NORMALIZATION_ENABLED
argument_list|)
argument_list|)
expr_stmt|;
name|DEFAULT_VALUES
operator|.
name|put
argument_list|(
name|PRIORITY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|DEFAULT_PRIORITY
argument_list|)
argument_list|)
expr_stmt|;
name|DEFAULT_VALUES
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|RESERVED_KEYWORDS
operator|::
name|add
argument_list|)
expr_stmt|;
name|RESERVED_KEYWORDS
operator|.
name|add
argument_list|(
name|IS_META_KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
specifier|static
name|String
name|NAMESPACE_FAMILY_INFO
init|=
literal|"info"
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|NAMESPACE_FAMILY_INFO_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|NAMESPACE_FAMILY_INFO
argument_list|)
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|NAMESPACE_COL_DESC_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
comment|/**    * Table descriptor for namespace table    */
comment|// TODO We used to set CacheDataInL1 for NS table. When we have BucketCache in file mode, now the
comment|// NS data goes to File mode BC only. Test how that affect the system. If too much, we have to
comment|// rethink about adding back the setCacheDataInL1 for NS table.
specifier|public
specifier|static
specifier|final
name|TableDescriptor
name|NAMESPACE_TABLEDESC
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|)
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|NAMESPACE_FAMILY_INFO_BYTES
argument_list|)
comment|// Ten is arbitrary number.  Keep versions to help debugging.
operator|.
name|setMaxVersions
argument_list|(
literal|10
argument_list|)
operator|.
name|setInMemory
argument_list|(
literal|true
argument_list|)
operator|.
name|setBlocksize
argument_list|(
literal|8
operator|*
literal|1024
argument_list|)
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ModifyableTableDescriptor
name|desc
decl_stmt|;
comment|/**    * @param desc The table descriptor to serialize    * @return This instance serialized with pb with pb magic prefix    */
specifier|public
specifier|static
name|byte
index|[]
name|toByteArray
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|)
block|{
if|if
condition|(
name|desc
operator|instanceof
name|ModifyableTableDescriptor
condition|)
block|{
return|return
operator|(
operator|(
name|ModifyableTableDescriptor
operator|)
name|desc
operator|)
operator|.
name|toByteArray
argument_list|()
return|;
block|}
return|return
operator|new
name|ModifyableTableDescriptor
argument_list|(
name|desc
argument_list|)
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**    * The input should be created by {@link #toByteArray}.    * @param pbBytes A pb serialized TableDescriptor instance with pb magic prefix    * @return This instance serialized with pb with pb magic prefix    * @throws org.apache.hadoop.hbase.exceptions.DeserializationException    */
specifier|public
specifier|static
name|TableDescriptor
name|parseFrom
parameter_list|(
name|byte
index|[]
name|pbBytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
return|return
name|ModifyableTableDescriptor
operator|.
name|parseFrom
argument_list|(
name|pbBytes
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableDescriptorBuilder
name|newBuilder
parameter_list|(
specifier|final
name|TableName
name|name
parameter_list|)
block|{
return|return
operator|new
name|TableDescriptorBuilder
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableDescriptor
name|copy
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|)
block|{
return|return
operator|new
name|ModifyableTableDescriptor
argument_list|(
name|desc
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableDescriptor
name|copy
parameter_list|(
name|TableName
name|name
parameter_list|,
name|TableDescriptor
name|desc
parameter_list|)
block|{
return|return
operator|new
name|ModifyableTableDescriptor
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
return|;
block|}
comment|/**    * Copy all values, families, and name from the input.    * @param desc The desciptor to copy    * @return A clone of input    */
specifier|public
specifier|static
name|TableDescriptorBuilder
name|newBuilder
parameter_list|(
specifier|final
name|TableDescriptor
name|desc
parameter_list|)
block|{
return|return
operator|new
name|TableDescriptorBuilder
argument_list|(
name|desc
argument_list|)
return|;
block|}
specifier|private
name|TableDescriptorBuilder
parameter_list|(
specifier|final
name|TableName
name|name
parameter_list|)
block|{
name|this
operator|.
name|desc
operator|=
operator|new
name|ModifyableTableDescriptor
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TableDescriptorBuilder
parameter_list|(
specifier|final
name|TableDescriptor
name|desc
parameter_list|)
block|{
name|this
operator|.
name|desc
operator|=
operator|new
name|ModifyableTableDescriptor
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TableDescriptorBuilder
name|addCoprocessor
parameter_list|(
name|String
name|className
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|addCoprocessor
argument_list|(
name|className
argument_list|,
literal|null
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_USER
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|addCoprocessor
parameter_list|(
name|String
name|className
parameter_list|,
name|Path
name|jarFilePath
parameter_list|,
name|int
name|priority
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|kvs
parameter_list|)
throws|throws
name|IOException
block|{
name|desc
operator|.
name|addCoprocessor
argument_list|(
name|className
argument_list|,
name|jarFilePath
argument_list|,
name|priority
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|addCoprocessorWithSpec
parameter_list|(
specifier|final
name|String
name|specStr
parameter_list|)
throws|throws
name|IOException
block|{
name|desc
operator|.
name|addCoprocessorWithSpec
argument_list|(
name|specStr
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|addColumnFamily
parameter_list|(
specifier|final
name|ColumnFamilyDescriptor
name|family
parameter_list|)
block|{
name|desc
operator|.
name|addColumnFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|modifyColumnFamily
parameter_list|(
specifier|final
name|ColumnFamilyDescriptor
name|family
parameter_list|)
block|{
name|desc
operator|.
name|modifyColumnFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|removeValue
parameter_list|(
name|Bytes
name|key
parameter_list|)
block|{
name|desc
operator|.
name|removeValue
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|removeValue
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
name|desc
operator|.
name|removeValue
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|removeColumnFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|name
parameter_list|)
block|{
name|desc
operator|.
name|removeColumnFamily
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|removeCoprocessor
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|desc
operator|.
name|removeCoprocessor
argument_list|(
name|className
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|setCompactionEnabled
parameter_list|(
specifier|final
name|boolean
name|isEnable
parameter_list|)
block|{
name|desc
operator|.
name|setCompactionEnabled
argument_list|(
name|isEnable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|setDurability
parameter_list|(
name|Durability
name|durability
parameter_list|)
block|{
name|desc
operator|.
name|setDurability
argument_list|(
name|durability
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|setFlushPolicyClassName
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
name|desc
operator|.
name|setFlushPolicyClassName
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|setMaxFileSize
parameter_list|(
name|long
name|maxFileSize
parameter_list|)
block|{
name|desc
operator|.
name|setMaxFileSize
argument_list|(
name|maxFileSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|setMemStoreFlushSize
parameter_list|(
name|long
name|memstoreFlushSize
parameter_list|)
block|{
name|desc
operator|.
name|setMemStoreFlushSize
argument_list|(
name|memstoreFlushSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|setNormalizationEnabled
parameter_list|(
specifier|final
name|boolean
name|isEnable
parameter_list|)
block|{
name|desc
operator|.
name|setNormalizationEnabled
argument_list|(
name|isEnable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|TableDescriptorBuilder
name|setOwner
parameter_list|(
name|User
name|owner
parameter_list|)
block|{
name|desc
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|TableDescriptorBuilder
name|setOwnerString
parameter_list|(
name|String
name|ownerString
parameter_list|)
block|{
name|desc
operator|.
name|setOwnerString
argument_list|(
name|ownerString
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|setPriority
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
name|desc
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|setReadOnly
parameter_list|(
specifier|final
name|boolean
name|readOnly
parameter_list|)
block|{
name|desc
operator|.
name|setReadOnly
argument_list|(
name|readOnly
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|setRegionMemStoreReplication
parameter_list|(
name|boolean
name|memstoreReplication
parameter_list|)
block|{
name|desc
operator|.
name|setRegionMemStoreReplication
argument_list|(
name|memstoreReplication
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|setRegionReplication
parameter_list|(
name|int
name|regionReplication
parameter_list|)
block|{
name|desc
operator|.
name|setRegionReplication
argument_list|(
name|regionReplication
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|setRegionSplitPolicyClassName
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
name|desc
operator|.
name|setRegionSplitPolicyClassName
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|setValue
parameter_list|(
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
name|desc
operator|.
name|setValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|setValue
parameter_list|(
specifier|final
name|Bytes
name|key
parameter_list|,
specifier|final
name|Bytes
name|value
parameter_list|)
block|{
name|desc
operator|.
name|setValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptorBuilder
name|setValue
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|)
block|{
name|desc
operator|.
name|setValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Sets replication scope all& only the columns already in the builder. Columns added later won't    * be backfilled with replication scope.    * @param scope replication scope    * @return a TableDescriptorBuilder    */
specifier|public
name|TableDescriptorBuilder
name|setReplicationScope
parameter_list|(
name|int
name|scope
parameter_list|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|ColumnFamilyDescriptor
argument_list|>
name|newFamilies
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
argument_list|)
decl_stmt|;
name|newFamilies
operator|.
name|putAll
argument_list|(
name|desc
operator|.
name|families
argument_list|)
expr_stmt|;
name|newFamilies
operator|.
name|forEach
argument_list|(
parameter_list|(
name|cf
parameter_list|,
name|cfDesc
parameter_list|)
lambda|->
block|{
name|desc
operator|.
name|removeColumnFamily
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|cfDesc
argument_list|)
operator|.
name|setScope
argument_list|(
name|scope
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|TableDescriptor
name|build
parameter_list|()
block|{
return|return
operator|new
name|ModifyableTableDescriptor
argument_list|(
name|desc
argument_list|)
return|;
block|}
comment|/**    * TODO: make this private after removing the HTableDescriptor    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
class|class
name|ModifyableTableDescriptor
implements|implements
name|TableDescriptor
implements|,
name|Comparable
argument_list|<
name|ModifyableTableDescriptor
argument_list|>
block|{
specifier|private
specifier|final
name|TableName
name|name
decl_stmt|;
comment|/**      * A map which holds the metadata information of the table. This metadata      * includes values like IS_META, SPLIT_POLICY, MAX_FILE_SIZE,      * READONLY, MEMSTORE_FLUSHSIZE etc...      */
specifier|private
specifier|final
name|Map
argument_list|<
name|Bytes
argument_list|,
name|Bytes
argument_list|>
name|values
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Maps column family name to the respective FamilyDescriptors      */
specifier|private
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|ColumnFamilyDescriptor
argument_list|>
name|families
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_RAWCOMPARATOR
argument_list|)
decl_stmt|;
comment|/**      * Construct a table descriptor specifying a TableName object      *      * @param name Table name.      * TODO: make this private after removing the HTableDescriptor      */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
name|ModifyableTableDescriptor
parameter_list|(
specifier|final
name|TableName
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ModifyableTableDescriptor
parameter_list|(
specifier|final
name|TableDescriptor
name|desc
parameter_list|)
block|{
name|this
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|desc
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
argument_list|,
name|desc
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct a table descriptor by cloning the descriptor passed as a      * parameter.      *<p>      * Makes a deep copy of the supplied descriptor.      * @param name The new name      * @param desc The descriptor.      * TODO: make this private after removing the HTableDescriptor      */
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Deprecated
comment|// only used by HTableDescriptor. remove this method if HTD is removed
specifier|public
name|ModifyableTableDescriptor
parameter_list|(
specifier|final
name|TableName
name|name
parameter_list|,
specifier|final
name|TableDescriptor
name|desc
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|desc
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
argument_list|,
name|desc
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ModifyableTableDescriptor
parameter_list|(
specifier|final
name|TableName
name|name
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|ColumnFamilyDescriptor
argument_list|>
name|families
parameter_list|,
name|Map
argument_list|<
name|Bytes
argument_list|,
name|Bytes
argument_list|>
name|values
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|families
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|this
operator|.
name|families
operator|.
name|put
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|ColumnFamilyDescriptorBuilder
operator|.
name|copy
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|values
operator|.
name|putAll
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|this
operator|.
name|values
operator|.
name|put
argument_list|(
name|IS_META_KEY
argument_list|,
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|name
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks if this table is<code> hbase:meta</code> region.      *      * @return true if this table is<code> hbase:meta</code> region      */
annotation|@
name|Override
specifier|public
name|boolean
name|isMetaRegion
parameter_list|()
block|{
return|return
name|getOrDefault
argument_list|(
name|IS_META_KEY
argument_list|,
name|Boolean
operator|::
name|valueOf
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Checks if the table is a<code>hbase:meta</code> table      *      * @return true if table is<code> hbase:meta</code> region.      */
annotation|@
name|Override
specifier|public
name|boolean
name|isMetaTable
parameter_list|()
block|{
return|return
name|isMetaRegion
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Bytes
name|getValue
parameter_list|(
name|Bytes
name|key
parameter_list|)
block|{
name|Bytes
name|rval
init|=
name|values
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|rval
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Bytes
argument_list|(
name|rval
operator|.
name|copyBytes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Bytes
name|rval
init|=
name|values
operator|.
name|get
argument_list|(
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|rval
operator|==
literal|null
condition|?
literal|null
else|:
name|Bytes
operator|.
name|toString
argument_list|(
name|rval
operator|.
name|get
argument_list|()
argument_list|,
name|rval
operator|.
name|getOffset
argument_list|()
argument_list|,
name|rval
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getValue
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
name|Bytes
name|value
init|=
name|values
operator|.
name|get
argument_list|(
operator|new
name|Bytes
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|value
operator|.
name|copyBytes
argument_list|()
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|getOrDefault
parameter_list|(
name|Bytes
name|key
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|function
parameter_list|,
name|T
name|defaultValue
parameter_list|)
block|{
name|Bytes
name|value
init|=
name|values
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
else|else
block|{
return|return
name|function
operator|.
name|apply
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value
operator|.
name|get
argument_list|()
argument_list|,
name|value
operator|.
name|getOffset
argument_list|()
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Getter for fetching an unmodifiable {@link #values} map.      *      * @return unmodifiable map {@link #values}.      * @see #values      */
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Bytes
argument_list|,
name|Bytes
argument_list|>
name|getValues
parameter_list|()
block|{
comment|// shallow pointer copy
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|values
argument_list|)
return|;
block|}
comment|/**      * Setter for storing metadata as a (key, value) pair in {@link #values} map      *      * @param key The key.      * @param value The value. If null, removes the setting.      * @return the modifyable TD      * @see #values      */
specifier|public
name|ModifyableTableDescriptor
name|setValue
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
return|return
name|setValue
argument_list|(
name|toBytesOrNull
argument_list|(
name|key
argument_list|,
name|v
lambda|->
name|v
argument_list|)
argument_list|,
name|toBytesOrNull
argument_list|(
name|value
argument_list|,
name|v
lambda|->
name|v
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|ModifyableTableDescriptor
name|setValue
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|setValue
argument_list|(
name|toBytesOrNull
argument_list|(
name|key
argument_list|,
name|Bytes
operator|::
name|toBytes
argument_list|)
argument_list|,
name|toBytesOrNull
argument_list|(
name|value
argument_list|,
name|Bytes
operator|::
name|toBytes
argument_list|)
argument_list|)
return|;
block|}
comment|/*      * @param key The key.      * @param value The value. If null, removes the setting.      */
specifier|private
name|ModifyableTableDescriptor
name|setValue
parameter_list|(
specifier|final
name|Bytes
name|key
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
name|setValue
argument_list|(
name|key
argument_list|,
name|toBytesOrNull
argument_list|(
name|value
argument_list|,
name|Bytes
operator|::
name|toBytes
argument_list|)
argument_list|)
return|;
block|}
comment|/*      * Setter for storing metadata as a (key, value) pair in {@link #values} map      *      * @param key The key.      * @param value The value. If null, removes the setting.      */
specifier|public
name|ModifyableTableDescriptor
name|setValue
parameter_list|(
specifier|final
name|Bytes
name|key
parameter_list|,
specifier|final
name|Bytes
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|values
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Bytes
name|toBytesOrNull
parameter_list|(
name|T
name|t
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|,
name|byte
index|[]
argument_list|>
name|f
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|Bytes
argument_list|(
name|f
operator|.
name|apply
argument_list|(
name|t
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Remove metadata represented by the key from the {@link #values} map      *      * @param key Key whose key and value we're to remove from TableDescriptor      * parameters.      * @return the modifyable TD      */
specifier|public
name|ModifyableTableDescriptor
name|removeValue
parameter_list|(
name|Bytes
name|key
parameter_list|)
block|{
return|return
name|setValue
argument_list|(
name|key
argument_list|,
operator|(
name|Bytes
operator|)
literal|null
argument_list|)
return|;
block|}
comment|/**      * Remove metadata represented by the key from the {@link #values} map      *      * @param key Key whose key and value we're to remove from TableDescriptor      * parameters.      * @return the modifyable TD      */
specifier|public
name|ModifyableTableDescriptor
name|removeValue
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|removeValue
argument_list|(
operator|new
name|Bytes
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Check if the readOnly flag of the table is set. If the readOnly flag is      * set then the contents of the table can only be read from but not      * modified.      *      * @return true if all columns in the table should be read only      */
annotation|@
name|Override
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
block|{
return|return
name|getOrDefault
argument_list|(
name|READONLY_KEY
argument_list|,
name|Boolean
operator|::
name|valueOf
argument_list|,
name|DEFAULT_READONLY
argument_list|)
return|;
block|}
comment|/**      * Setting the table as read only sets all the columns in the table as read      * only. By default all tables are modifiable, but if the readOnly flag is      * set to true then the contents of the table can only be read but not      * modified.      *      * @param readOnly True if all of the columns in the table should be read      * only.      * @return the modifyable TD      */
specifier|public
name|ModifyableTableDescriptor
name|setReadOnly
parameter_list|(
specifier|final
name|boolean
name|readOnly
parameter_list|)
block|{
return|return
name|setValue
argument_list|(
name|READONLY_KEY
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|readOnly
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Check if the compaction enable flag of the table is true. If flag is      * false then no minor/major compactions will be done in real.      *      * @return true if table compaction enabled      */
annotation|@
name|Override
specifier|public
name|boolean
name|isCompactionEnabled
parameter_list|()
block|{
return|return
name|getOrDefault
argument_list|(
name|COMPACTION_ENABLED_KEY
argument_list|,
name|Boolean
operator|::
name|valueOf
argument_list|,
name|DEFAULT_COMPACTION_ENABLED
argument_list|)
return|;
block|}
comment|/**      * Setting the table compaction enable flag.      *      * @param isEnable True if enable compaction.      * @return the modifyable TD      */
specifier|public
name|ModifyableTableDescriptor
name|setCompactionEnabled
parameter_list|(
specifier|final
name|boolean
name|isEnable
parameter_list|)
block|{
return|return
name|setValue
argument_list|(
name|COMPACTION_ENABLED_KEY
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|isEnable
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Check if normalization enable flag of the table is true. If flag is false      * then no region normalizer won't attempt to normalize this table.      *      * @return true if region normalization is enabled for this table      */
annotation|@
name|Override
specifier|public
name|boolean
name|isNormalizationEnabled
parameter_list|()
block|{
return|return
name|getOrDefault
argument_list|(
name|NORMALIZATION_ENABLED_KEY
argument_list|,
name|Boolean
operator|::
name|valueOf
argument_list|,
name|DEFAULT_NORMALIZATION_ENABLED
argument_list|)
return|;
block|}
comment|/**      * Setting the table normalization enable flag.      *      * @param isEnable True if enable normalization.      * @return the modifyable TD      */
specifier|public
name|ModifyableTableDescriptor
name|setNormalizationEnabled
parameter_list|(
specifier|final
name|boolean
name|isEnable
parameter_list|)
block|{
return|return
name|setValue
argument_list|(
name|NORMALIZATION_ENABLED_KEY
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|isEnable
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets the {@link Durability} setting for the table. This defaults to      * Durability.USE_DEFAULT.      *      * @param durability enum value      * @return the modifyable TD      */
specifier|public
name|ModifyableTableDescriptor
name|setDurability
parameter_list|(
name|Durability
name|durability
parameter_list|)
block|{
return|return
name|setValue
argument_list|(
name|DURABILITY_KEY
argument_list|,
name|durability
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns the durability setting for the table.      *      * @return durability setting for the table.      */
annotation|@
name|Override
specifier|public
name|Durability
name|getDurability
parameter_list|()
block|{
return|return
name|getOrDefault
argument_list|(
name|DURABILITY_KEY
argument_list|,
name|Durability
operator|::
name|valueOf
argument_list|,
name|DEFAULT_DURABLITY
argument_list|)
return|;
block|}
comment|/**      * Get the name of the table      *      * @return TableName      */
annotation|@
name|Override
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * This sets the class associated with the region split policy which      * determines when a region split should occur. The class used by default is      * defined in org.apache.hadoop.hbase.regionserver.RegionSplitPolicy      *      * @param clazz the class name      * @return the modifyable TD      */
specifier|public
name|ModifyableTableDescriptor
name|setRegionSplitPolicyClassName
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
return|return
name|setValue
argument_list|(
name|SPLIT_POLICY_KEY
argument_list|,
name|clazz
argument_list|)
return|;
block|}
comment|/**      * This gets the class associated with the region split policy which      * determines when a region split should occur. The class used by default is      * defined in org.apache.hadoop.hbase.regionserver.RegionSplitPolicy      *      * @return the class name of the region split policy for this table. If this      * returns null, the default split policy is used.      */
annotation|@
name|Override
specifier|public
name|String
name|getRegionSplitPolicyClassName
parameter_list|()
block|{
return|return
name|getOrDefault
argument_list|(
name|SPLIT_POLICY_KEY
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Returns the maximum size upto which a region can grow to after which a      * region split is triggered. The region size is represented by the size of      * the biggest store file in that region.      *      * @return max hregion size for table, -1 if not set.      *      * @see #setMaxFileSize(long)      */
annotation|@
name|Override
specifier|public
name|long
name|getMaxFileSize
parameter_list|()
block|{
return|return
name|getOrDefault
argument_list|(
name|MAX_FILESIZE_KEY
argument_list|,
name|Long
operator|::
name|valueOf
argument_list|,
operator|(
name|long
operator|)
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Sets the maximum size upto which a region can grow to after which a      * region split is triggered. The region size is represented by the size of      * the biggest store file in that region, i.e. If the biggest store file      * grows beyond the maxFileSize, then the region split is triggered. This      * defaults to a value of 256 MB.      *<p>      * This is not an absolute value and might vary. Assume that a single row      * exceeds the maxFileSize then the storeFileSize will be greater than      * maxFileSize since a single row cannot be split across multiple regions      *</p>      *      * @param maxFileSize The maximum file size that a store file can grow to      * before a split is triggered.      * @return the modifyable TD      */
specifier|public
name|ModifyableTableDescriptor
name|setMaxFileSize
parameter_list|(
name|long
name|maxFileSize
parameter_list|)
block|{
return|return
name|setValue
argument_list|(
name|MAX_FILESIZE_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|maxFileSize
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns the size of the memstore after which a flush to filesystem is      * triggered.      *      * @return memory cache flush size for each hregion, -1 if not set.      *      * @see #setMemStoreFlushSize(long)      */
annotation|@
name|Override
specifier|public
name|long
name|getMemStoreFlushSize
parameter_list|()
block|{
return|return
name|getOrDefault
argument_list|(
name|MEMSTORE_FLUSHSIZE_KEY
argument_list|,
name|Long
operator|::
name|valueOf
argument_list|,
operator|(
name|long
operator|)
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Represents the maximum size of the memstore after which the contents of      * the memstore are flushed to the filesystem. This defaults to a size of 64      * MB.      *      * @param memstoreFlushSize memory cache flush size for each hregion      * @return the modifyable TD      */
specifier|public
name|ModifyableTableDescriptor
name|setMemStoreFlushSize
parameter_list|(
name|long
name|memstoreFlushSize
parameter_list|)
block|{
return|return
name|setValue
argument_list|(
name|MEMSTORE_FLUSHSIZE_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|memstoreFlushSize
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This sets the class associated with the flush policy which determines      * determines the stores need to be flushed when flushing a region. The      * class used by default is defined in      * org.apache.hadoop.hbase.regionserver.FlushPolicy.      *      * @param clazz the class name      * @return the modifyable TD      */
specifier|public
name|ModifyableTableDescriptor
name|setFlushPolicyClassName
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
return|return
name|setValue
argument_list|(
name|FLUSH_POLICY_KEY
argument_list|,
name|clazz
argument_list|)
return|;
block|}
comment|/**      * This gets the class associated with the flush policy which determines the      * stores need to be flushed when flushing a region. The class used by      * default is defined in org.apache.hadoop.hbase.regionserver.FlushPolicy.      *      * @return the class name of the flush policy for this table. If this      * returns null, the default flush policy is used.      */
annotation|@
name|Override
specifier|public
name|String
name|getFlushPolicyClassName
parameter_list|()
block|{
return|return
name|getOrDefault
argument_list|(
name|FLUSH_POLICY_KEY
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Adds a column family. For the updating purpose please use      * {@link #modifyColumnFamily(ColumnFamilyDescriptor)} instead.      *      * @param family to add.      * @return the modifyable TD      */
specifier|public
name|ModifyableTableDescriptor
name|addColumnFamily
parameter_list|(
specifier|final
name|ColumnFamilyDescriptor
name|family
parameter_list|)
block|{
if|if
condition|(
name|family
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|family
operator|.
name|getName
argument_list|()
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Family name cannot be null or empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|hasColumnFamily
argument_list|(
name|family
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Family '"
operator|+
name|family
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"' already exists so cannot be added"
argument_list|)
throw|;
block|}
return|return
name|putColumnFamily
argument_list|(
name|family
argument_list|)
return|;
block|}
comment|/**      * Modifies the existing column family.      *      * @param family to update      * @return this (for chained invocation)      */
specifier|public
name|ModifyableTableDescriptor
name|modifyColumnFamily
parameter_list|(
specifier|final
name|ColumnFamilyDescriptor
name|family
parameter_list|)
block|{
if|if
condition|(
name|family
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|family
operator|.
name|getName
argument_list|()
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Family name cannot be null or empty"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|hasColumnFamily
argument_list|(
name|family
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Column family '"
operator|+
name|family
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"' does not exist"
argument_list|)
throw|;
block|}
return|return
name|putColumnFamily
argument_list|(
name|family
argument_list|)
return|;
block|}
specifier|private
name|ModifyableTableDescriptor
name|putColumnFamily
parameter_list|(
name|ColumnFamilyDescriptor
name|family
parameter_list|)
block|{
name|families
operator|.
name|put
argument_list|(
name|family
operator|.
name|getName
argument_list|()
argument_list|,
name|family
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks to see if this table contains the given column family      *      * @param familyName Family name or column name.      * @return true if the table contains the specified family name      */
annotation|@
name|Override
specifier|public
name|boolean
name|hasColumnFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|familyName
parameter_list|)
block|{
return|return
name|families
operator|.
name|containsKey
argument_list|(
name|familyName
argument_list|)
return|;
block|}
comment|/**      * @return Name of this table and then a map of all of the column family descriptors.      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|name
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|getValues
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|families
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
name|f
lambda|->
name|s
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * @return Name of this table and then a map of all of the column family      * descriptors (with only the non-default column family attributes)      */
specifier|public
name|String
name|toStringCustomizedValues
parameter_list|()
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|name
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|getValues
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|families
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
name|hcd
lambda|->
name|s
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|hcd
operator|.
name|toStringCustomizedValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * @return map of all table attributes formatted into string.      */
specifier|public
name|String
name|toStringTableAttributes
parameter_list|()
block|{
return|return
name|getValues
argument_list|(
literal|true
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|StringBuilder
name|getValues
parameter_list|(
name|boolean
name|printDefaults
parameter_list|)
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// step 1: set partitioning and pruning
name|Set
argument_list|<
name|Bytes
argument_list|>
name|reservedKeys
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Bytes
argument_list|>
name|userKeys
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Bytes
argument_list|,
name|Bytes
argument_list|>
name|entry
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|==
literal|null
operator|||
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|key
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
comment|// in this section, print out reserved keywords + coprocessor info
if|if
condition|(
operator|!
name|RESERVED_KEYWORDS
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|startsWith
argument_list|(
literal|"coprocessor$"
argument_list|)
condition|)
block|{
name|userKeys
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// only print out IS_META if true
name|String
name|value
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equalsIgnoreCase
argument_list|(
name|IS_META
argument_list|)
condition|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
operator|==
literal|false
condition|)
block|{
continue|continue;
block|}
block|}
comment|// see if a reserved key is a default value. may not want to print it out
if|if
condition|(
name|printDefaults
operator|||
operator|!
name|DEFAULT_VALUES
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|||
operator|!
name|DEFAULT_VALUES
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|reservedKeys
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// early exit optimization
name|boolean
name|hasAttributes
init|=
operator|!
name|reservedKeys
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|userKeys
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hasAttributes
condition|)
block|{
return|return
name|s
return|;
block|}
name|s
operator|.
name|append
argument_list|(
literal|", {"
argument_list|)
expr_stmt|;
comment|// step 2: printing attributes
if|if
condition|(
name|hasAttributes
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"TABLE_ATTRIBUTES => {"
argument_list|)
expr_stmt|;
comment|// print all reserved keys first
name|boolean
name|printCommaForAttr
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Bytes
name|k
range|:
name|reservedKeys
control|)
block|{
name|String
name|key
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|k
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|printCommaForAttr
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|printCommaForAttr
operator|=
literal|true
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|" => "
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|userKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// print all non-reserved as a separate subset
if|if
condition|(
name|printCommaForAttr
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
name|HConstants
operator|.
name|METADATA
argument_list|)
operator|.
name|append
argument_list|(
literal|" => "
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|boolean
name|printCommaForCfg
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Bytes
name|k
range|:
name|userKeys
control|)
block|{
name|String
name|key
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|k
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|printCommaForCfg
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|printCommaForCfg
operator|=
literal|true
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|" => "
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
name|s
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
comment|// end METHOD
return|return
name|s
return|;
block|}
comment|/**      * Compare the contents of the descriptor with another one passed as a      * parameter. Checks if the obj passed is an instance of ModifyableTableDescriptor,      * if yes then the contents of the descriptors are compared.      *      * @param obj The object to compare      * @return true if the contents of the the two descriptors exactly match      *      * @see java.lang.Object#equals(java.lang.Object)      */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|ModifyableTableDescriptor
condition|)
block|{
return|return
name|TableDescriptor
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|this
argument_list|,
operator|(
name|ModifyableTableDescriptor
operator|)
name|obj
argument_list|)
operator|==
literal|0
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * @return hash code      */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|this
operator|.
name|name
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|families
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ColumnFamilyDescriptor
name|e
range|:
name|this
operator|.
name|families
operator|.
name|values
argument_list|()
control|)
block|{
name|result
operator|^=
name|e
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
block|}
name|result
operator|^=
name|values
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Comparable
comment|/**      * Compares the descriptor with another descriptor which is passed as a      * parameter. This compares the content of the two descriptors and not the      * reference.      *      * @param other The MTD to compare      * @return 0 if the contents of the descriptors are exactly matching, 1 if      * there is a mismatch in the contents      */
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|ModifyableTableDescriptor
name|other
parameter_list|)
block|{
return|return
name|TableDescriptor
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|this
argument_list|,
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ColumnFamilyDescriptor
index|[]
name|getColumnFamilies
parameter_list|()
block|{
return|return
name|families
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ColumnFamilyDescriptor
index|[
name|families
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Returns the configured replicas per region      */
annotation|@
name|Override
specifier|public
name|int
name|getRegionReplication
parameter_list|()
block|{
return|return
name|getOrDefault
argument_list|(
name|REGION_REPLICATION_KEY
argument_list|,
name|Integer
operator|::
name|valueOf
argument_list|,
name|DEFAULT_REGION_REPLICATION
argument_list|)
return|;
block|}
comment|/**      * Sets the number of replicas per region.      *      * @param regionReplication the replication factor per region      * @return the modifyable TD      */
specifier|public
name|ModifyableTableDescriptor
name|setRegionReplication
parameter_list|(
name|int
name|regionReplication
parameter_list|)
block|{
return|return
name|setValue
argument_list|(
name|REGION_REPLICATION_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|regionReplication
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * @return true if the read-replicas memstore replication is enabled.      */
annotation|@
name|Override
specifier|public
name|boolean
name|hasRegionMemStoreReplication
parameter_list|()
block|{
return|return
name|getOrDefault
argument_list|(
name|REGION_MEMSTORE_REPLICATION_KEY
argument_list|,
name|Boolean
operator|::
name|valueOf
argument_list|,
name|DEFAULT_REGION_MEMSTORE_REPLICATION
argument_list|)
return|;
block|}
comment|/**      * Enable or Disable the memstore replication from the primary region to the      * replicas. The replication will be used only for meta operations (e.g.      * flush, compaction, ...)      *      * @param memstoreReplication true if the new data written to the primary      * region should be replicated. false if the secondaries can tollerate to      * have new data only when the primary flushes the memstore.      * @return the modifyable TD      */
specifier|public
name|ModifyableTableDescriptor
name|setRegionMemStoreReplication
parameter_list|(
name|boolean
name|memstoreReplication
parameter_list|)
block|{
name|setValue
argument_list|(
name|REGION_MEMSTORE_REPLICATION_KEY
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|memstoreReplication
argument_list|)
argument_list|)
expr_stmt|;
comment|// If the memstore replication is setup, we do not have to wait for observing a flush event
comment|// from primary before starting to serve reads, because gaps from replication is not applicable
return|return
name|setValue
argument_list|(
name|REGION_REPLICA_WAIT_FOR_PRIMARY_FLUSH_CONF_KEY
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|memstoreReplication
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|ModifyableTableDescriptor
name|setPriority
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
return|return
name|setValue
argument_list|(
name|PRIORITY_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|priority
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|getOrDefault
argument_list|(
name|PRIORITY_KEY
argument_list|,
name|Integer
operator|::
name|valueOf
argument_list|,
name|DEFAULT_PRIORITY
argument_list|)
return|;
block|}
comment|/**      * Returns all the column family names of the current table. The map of      * TableDescriptor contains mapping of family name to ColumnFamilyDescriptor.      * This returns all the keys of the family map which represents the column      * family names of the table.      *      * @return Immutable sorted set of the keys of the families.      */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|getColumnFamilyNames
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|this
operator|.
name|families
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns the ColumnFamilyDescriptor for a specific column family with name as      * specified by the parameter column.      *      * @param column Column family name      * @return Column descriptor for the passed family name or the family on      * passed in column.      */
annotation|@
name|Override
specifier|public
name|ColumnFamilyDescriptor
name|getColumnFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|column
parameter_list|)
block|{
return|return
name|this
operator|.
name|families
operator|.
name|get
argument_list|(
name|column
argument_list|)
return|;
block|}
comment|/**      * Removes the ColumnFamilyDescriptor with name specified by the parameter column      * from the table descriptor      *      * @param column Name of the column family to be removed.      * @return Column descriptor for the passed family name or the family on      * passed in column.      */
specifier|public
name|ColumnFamilyDescriptor
name|removeColumnFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|column
parameter_list|)
block|{
return|return
name|this
operator|.
name|families
operator|.
name|remove
argument_list|(
name|column
argument_list|)
return|;
block|}
comment|/**      * Add a table coprocessor to this table. The coprocessor type must be      * org.apache.hadoop.hbase.coprocessor.RegionObserver or Endpoint. It won't      * check if the class can be loaded or not. Whether a coprocessor is      * loadable or not will be determined when a region is opened.      *      * @param className Full class name.      * @throws IOException      * @return the modifyable TD      */
specifier|public
name|ModifyableTableDescriptor
name|addCoprocessor
parameter_list|(
name|String
name|className
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|addCoprocessor
argument_list|(
name|className
argument_list|,
literal|null
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_USER
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Add a table coprocessor to this table. The coprocessor type must be      * org.apache.hadoop.hbase.coprocessor.RegionObserver or Endpoint. It won't      * check if the class can be loaded or not. Whether a coprocessor is      * loadable or not will be determined when a region is opened.      *      * @param jarFilePath Path of the jar file. If it's null, the class will be      * loaded from default classloader.      * @param className Full class name.      * @param priority Priority      * @param kvs Arbitrary key-value parameter pairs passed into the      * coprocessor.      * @throws IOException      * @return the modifyable TD      */
specifier|public
name|ModifyableTableDescriptor
name|addCoprocessor
parameter_list|(
name|String
name|className
parameter_list|,
name|Path
name|jarFilePath
parameter_list|,
name|int
name|priority
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|kvs
parameter_list|)
throws|throws
name|IOException
block|{
name|checkHasCoprocessor
argument_list|(
name|className
argument_list|)
expr_stmt|;
comment|// Validate parameter kvs and then add key/values to kvString.
name|StringBuilder
name|kvString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|kvs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|kvs
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|matches
argument_list|(
name|HConstants
operator|.
name|CP_HTD_ATTR_VALUE_PARAM_KEY_PATTERN
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal parameter key = "
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|matches
argument_list|(
name|HConstants
operator|.
name|CP_HTD_ATTR_VALUE_PARAM_VALUE_PATTERN
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal parameter ("
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|") value = "
operator|+
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|kvString
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|kvString
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|kvString
operator|.
name|append
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|kvString
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|kvString
operator|.
name|append
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|value
init|=
operator|(
operator|(
name|jarFilePath
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|jarFilePath
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|"|"
operator|+
name|className
operator|+
literal|"|"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|priority
argument_list|)
operator|+
literal|"|"
operator|+
name|kvString
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|addCoprocessorToMap
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**      * Add a table coprocessor to this table. The coprocessor type must be      * org.apache.hadoop.hbase.coprocessor.RegionObserver or Endpoint. It won't      * check if the class can be loaded or not. Whether a coprocessor is      * loadable or not will be determined when a region is opened.      *      * @param specStr The Coprocessor specification all in in one String      * formatted so matches {@link HConstants#CP_HTD_ATTR_VALUE_PATTERN}      * @throws IOException      * @return the modifyable TD      */
specifier|public
name|ModifyableTableDescriptor
name|addCoprocessorWithSpec
parameter_list|(
specifier|final
name|String
name|specStr
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|className
init|=
name|getCoprocessorClassNameFromSpecStr
argument_list|(
name|specStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Format does not match "
operator|+
name|HConstants
operator|.
name|CP_HTD_ATTR_VALUE_PATTERN
operator|+
literal|": "
operator|+
name|specStr
argument_list|)
throw|;
block|}
name|checkHasCoprocessor
argument_list|(
name|className
argument_list|)
expr_stmt|;
return|return
name|addCoprocessorToMap
argument_list|(
name|specStr
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkHasCoprocessor
parameter_list|(
specifier|final
name|String
name|className
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasCoprocessor
argument_list|(
name|className
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Coprocessor "
operator|+
name|className
operator|+
literal|" already exists."
argument_list|)
throw|;
block|}
block|}
comment|/**      * Add coprocessor to values Map      *      * @param specStr The Coprocessor specification all in in one String      * formatted so matches {@link HConstants#CP_HTD_ATTR_VALUE_PATTERN}      * @return Returns<code>this</code>      */
specifier|private
name|ModifyableTableDescriptor
name|addCoprocessorToMap
parameter_list|(
specifier|final
name|String
name|specStr
parameter_list|)
block|{
if|if
condition|(
name|specStr
operator|==
literal|null
condition|)
block|{
return|return
name|this
return|;
block|}
comment|// generate a coprocessor key
name|int
name|maxCoprocessorNumber
init|=
literal|0
decl_stmt|;
name|Matcher
name|keyMatcher
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Bytes
argument_list|,
name|Bytes
argument_list|>
name|e
range|:
name|this
operator|.
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|keyMatcher
operator|=
name|HConstants
operator|.
name|CP_HTD_ATTR_KEY_PATTERN
operator|.
name|matcher
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|keyMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|maxCoprocessorNumber
operator|=
name|Math
operator|.
name|max
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|keyMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|maxCoprocessorNumber
argument_list|)
expr_stmt|;
block|}
name|maxCoprocessorNumber
operator|++
expr_stmt|;
name|String
name|key
init|=
literal|"coprocessor$"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|maxCoprocessorNumber
argument_list|)
decl_stmt|;
return|return
name|setValue
argument_list|(
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Bytes
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|specStr
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Check if the table has an attached co-processor represented by the name      * className      *      * @param classNameToMatch - Class name of the co-processor      * @return true of the table has a co-processor className      */
annotation|@
name|Override
specifier|public
name|boolean
name|hasCoprocessor
parameter_list|(
name|String
name|classNameToMatch
parameter_list|)
block|{
name|Matcher
name|keyMatcher
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Bytes
argument_list|,
name|Bytes
argument_list|>
name|e
range|:
name|this
operator|.
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|keyMatcher
operator|=
name|HConstants
operator|.
name|CP_HTD_ATTR_KEY_PATTERN
operator|.
name|matcher
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|keyMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|className
init|=
name|getCoprocessorClassNameFromSpecStr
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|classNameToMatch
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Return the list of attached co-processor represented by their name      * className      *      * @return The list of co-processors classNames      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCoprocessors
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|values
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Matcher
name|keyMatcher
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Bytes
argument_list|,
name|Bytes
argument_list|>
name|e
range|:
name|this
operator|.
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|keyMatcher
operator|=
name|HConstants
operator|.
name|CP_HTD_ATTR_KEY_PATTERN
operator|.
name|matcher
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|keyMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|className
init|=
name|getCoprocessorClassNameFromSpecStr
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|result
operator|.
name|add
argument_list|(
name|className
argument_list|)
expr_stmt|;
comment|// classname is the 2nd field
block|}
return|return
name|result
return|;
block|}
comment|/**      * @param spec String formatted as per      * {@link HConstants#CP_HTD_ATTR_VALUE_PATTERN}      * @return Class parsed from passed in<code>spec</code> or null if no match      * or classpath found      */
specifier|private
specifier|static
name|String
name|getCoprocessorClassNameFromSpecStr
parameter_list|(
specifier|final
name|String
name|spec
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|HConstants
operator|.
name|CP_HTD_ATTR_VALUE_PATTERN
operator|.
name|matcher
argument_list|(
name|spec
argument_list|)
decl_stmt|;
comment|// Classname is the 2nd field
return|return
name|matcher
operator|!=
literal|null
operator|&&
name|matcher
operator|.
name|matches
argument_list|()
condition|?
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * Remove a coprocessor from those set on the table      *      * @param className Class name of the co-processor      */
specifier|public
name|void
name|removeCoprocessor
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|Bytes
name|match
init|=
literal|null
decl_stmt|;
name|Matcher
name|keyMatcher
decl_stmt|;
name|Matcher
name|valueMatcher
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Bytes
argument_list|,
name|Bytes
argument_list|>
name|e
range|:
name|this
operator|.
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|keyMatcher
operator|=
name|HConstants
operator|.
name|CP_HTD_ATTR_KEY_PATTERN
operator|.
name|matcher
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|keyMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|valueMatcher
operator|=
name|HConstants
operator|.
name|CP_HTD_ATTR_VALUE_PATTERN
operator|.
name|matcher
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|valueMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// get className and compare
name|String
name|clazz
init|=
name|valueMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// classname is the 2nd field
comment|// remove the CP if it is present
if|if
condition|(
name|clazz
operator|.
name|equals
argument_list|(
name|className
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|match
operator|=
name|e
operator|.
name|getKey
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
comment|// if we found a match, remove it
if|if
condition|(
name|match
operator|!=
literal|null
condition|)
block|{
name|ModifyableTableDescriptor
operator|.
name|this
operator|.
name|removeValue
argument_list|(
name|match
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Deprecated
specifier|public
name|ModifyableTableDescriptor
name|setOwner
parameter_list|(
name|User
name|owner
parameter_list|)
block|{
return|return
name|setOwnerString
argument_list|(
name|owner
operator|!=
literal|null
condition|?
name|owner
operator|.
name|getShortName
argument_list|()
else|:
literal|null
argument_list|)
return|;
block|}
comment|// used by admin.rb:alter(table_name,*args) to update owner.
annotation|@
name|Deprecated
specifier|public
name|ModifyableTableDescriptor
name|setOwnerString
parameter_list|(
name|String
name|ownerString
parameter_list|)
block|{
return|return
name|setValue
argument_list|(
name|OWNER_KEY
argument_list|,
name|ownerString
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|String
name|getOwnerString
parameter_list|()
block|{
comment|// Note that every table should have an owner (i.e. should have OWNER_KEY set).
comment|// hbase:meta should return system user as owner, not null (see
comment|// MasterFileSystem.java:bootstrap()).
return|return
name|getOrDefault
argument_list|(
name|OWNER_KEY
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * @return the bytes in pb format      */
specifier|private
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
return|return
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|ProtobufUtil
operator|.
name|toTableSchema
argument_list|(
name|this
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @param bytes A pb serialized {@link ModifyableTableDescriptor} instance      * with pb magic prefix      * @return An instance of {@link ModifyableTableDescriptor} made from      *<code>bytes</code>      * @throws DeserializationException      * @see #toByteArray()      */
specifier|private
specifier|static
name|TableDescriptor
name|parseFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
operator|!
name|ProtobufUtil
operator|.
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
literal|"Expected PB encoded ModifyableTableDescriptor"
argument_list|)
throw|;
block|}
name|int
name|pblen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|HBaseProtos
operator|.
name|TableSchema
operator|.
name|Builder
name|builder
init|=
name|HBaseProtos
operator|.
name|TableSchema
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|bytes
argument_list|,
name|pblen
argument_list|,
name|bytes
operator|.
name|length
operator|-
name|pblen
argument_list|)
expr_stmt|;
return|return
name|ProtobufUtil
operator|.
name|toTableDescriptor
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColumnFamilyCount
parameter_list|()
block|{
return|return
name|families
operator|.
name|size
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

