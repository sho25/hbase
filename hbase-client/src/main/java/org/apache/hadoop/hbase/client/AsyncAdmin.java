begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_comment
comment|/**  *  The asynchronous administrative API for HBase.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
specifier|public
interface|interface
name|AsyncAdmin
block|{
comment|/**    * @return Async Connection used by this object.    */
name|AsyncConnectionImpl
name|getConnection
parameter_list|()
function_decl|;
comment|/**    * @param tableName Table to check.    * @return True if table exists already. The return value will be wrapped by a    *         {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|tableExists
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * List all the userspace tables.    * @return - returns an array of HTableDescriptors wrapped by a {@link CompletableFuture}.    * @see #listTables(Pattern, boolean)    */
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|listTables
parameter_list|()
function_decl|;
comment|/**    * List all the tables matching the given pattern.    * @param regex The regular expression to match against    * @param includeSysTables False to match only against userspace tables    * @return - returns an array of HTableDescriptors wrapped by a {@link CompletableFuture}.    * @see #listTables(Pattern, boolean)    */
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|listTables
parameter_list|(
name|String
name|regex
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
function_decl|;
comment|/**    * List all the tables matching the given pattern.    * @param pattern The compiled regular expression to match against    * @param includeSysTables False to match only against userspace tables    * @return - returns an array of HTableDescriptors wrapped by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|listTables
parameter_list|(
name|Pattern
name|pattern
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
function_decl|;
comment|/**    * List all of the names of userspace tables.    * @return TableName[] an array of table names wrapped by a {@link CompletableFuture}.    * @see #listTableNames(Pattern, boolean)    */
name|CompletableFuture
argument_list|<
name|TableName
index|[]
argument_list|>
name|listTableNames
parameter_list|()
function_decl|;
comment|/**    * List all of the names of userspace tables.    * @param regex The regular expression to match against    * @param includeSysTables False to match only against userspace tables    * @return TableName[] an array of table names wrapped by a {@link CompletableFuture}.    * @see #listTableNames(Pattern, boolean)    */
name|CompletableFuture
argument_list|<
name|TableName
index|[]
argument_list|>
name|listTableNames
parameter_list|(
specifier|final
name|String
name|regex
parameter_list|,
specifier|final
name|boolean
name|includeSysTables
parameter_list|)
function_decl|;
comment|/**    * List all of the names of userspace tables.    * @param pattern The regular expression to match against    * @param includeSysTables False to match only against userspace tables    * @return TableName[] an array of table names wrapped by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|TableName
index|[]
argument_list|>
name|listTableNames
parameter_list|(
specifier|final
name|Pattern
name|pattern
parameter_list|,
specifier|final
name|boolean
name|includeSysTables
parameter_list|)
function_decl|;
comment|/**    * Method for getting the tableDescriptor    * @param tableName as a {@link TableName}    * @return the tableDescriptor wrapped by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|HTableDescriptor
argument_list|>
name|getTableDescriptor
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Creates a new table.    * @param desc table descriptor for table    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createTable
parameter_list|(
name|HTableDescriptor
name|desc
parameter_list|)
function_decl|;
comment|/**    * Creates a new table with the specified number of regions. The start key specified will become    * the end key of the first region of the table, and the end key specified will become the start    * key of the last region of the table (the first region has a null start key and the last region    * has a null end key). BigInteger math will be used to divide the key range specified into enough    * segments to make the required number of total regions.    * @param desc table descriptor for table    * @param startKey beginning of key range    * @param endKey end of key range    * @param numRegions the total number of regions to create    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createTable
parameter_list|(
name|HTableDescriptor
name|desc
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|int
name|numRegions
parameter_list|)
function_decl|;
comment|/**    * Creates a new table with an initial set of empty regions defined by the specified split keys.    * The total number of regions created will be the number of split keys plus one.    * Note : Avoid passing empty split key.    * @param desc table descriptor for table    * @param splitKeys array of split keys for the initial regions of the table    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createTable
parameter_list|(
specifier|final
name|HTableDescriptor
name|desc
parameter_list|,
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
function_decl|;
comment|/**    * Deletes a table.    * @param tableName name of table to delete    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Deletes tables matching the passed in pattern and wait on completion. Warning: Use this method    * carefully, there is no prompting and the effect is immediate. Consider using    * {@link #listTables(String, boolean)} and    * {@link #deleteTable(org.apache.hadoop.hbase.TableName)}    * @param regex The regular expression to match table names against    * @return Table descriptors for tables that couldn't be deleted. The return value will be wrapped    *         by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|deleteTables
parameter_list|(
name|String
name|regex
parameter_list|)
function_decl|;
comment|/**    * Delete tables matching the passed in pattern and wait on completion. Warning: Use this method    * carefully, there is no prompting and the effect is immediate. Consider using    * {@link #listTables(Pattern, boolean) } and    * {@link #deleteTable(org.apache.hadoop.hbase.TableName)}    * @param pattern The pattern to match table names against    * @return Table descriptors for tables that couldn't be deleted. The return value will be wrapped    *         by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|deleteTables
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
function_decl|;
comment|/**    * Truncate a table.    * @param tableName name of table to truncate    * @param preserveSplits True if the splits should be preserved    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|truncateTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|boolean
name|preserveSplits
parameter_list|)
function_decl|;
comment|/**    * Enable a table. The table has to be in disabled state for it to be enabled.    * @param tableName name of the table    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|enableTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Enable tables matching the passed in pattern. Warning: Use this method carefully, there is no    * prompting and the effect is immediate. Consider using {@link #listTables(Pattern, boolean)} and    * {@link #enableTable(TableName)}    * @param regex The regular expression to match table names against    * @return Table descriptors for tables that couldn't be enabled. The return value will be wrapped    *         by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|enableTables
parameter_list|(
name|String
name|regex
parameter_list|)
function_decl|;
comment|/**    * Enable tables matching the passed in pattern. Warning: Use this method carefully, there is no    * prompting and the effect is immediate. Consider using {@link #listTables(Pattern, boolean)} and    * {@link #enableTable(TableName)}    * @param pattern The pattern to match table names against    * @return Table descriptors for tables that couldn't be enabled. The return value will be wrapped    *         by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|enableTables
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
function_decl|;
comment|/**    * Disable a table. The table has to be in enabled state for it to be disabled.    * @param tableName    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|disableTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Disable tables matching the passed in pattern. Warning: Use this method carefully, there is no    * prompting and the effect is immediate. Consider using {@link #listTables(Pattern, boolean)} and    * {@link #disableTable(TableName)}    * @param regex The regular expression to match table names against    * @return Table descriptors for tables that couldn't be disabled. The return value will be wrapped by a    *         {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|disableTables
parameter_list|(
name|String
name|regex
parameter_list|)
function_decl|;
comment|/**    * Disable tables matching the passed in pattern. Warning: Use this method carefully, there is no    * prompting and the effect is immediate. Consider using {@link #listTables(Pattern, boolean)} and    * {@link #disableTable(TableName)}    * @param pattern The pattern to match table names against    * @return Table descriptors for tables that couldn't be disabled. The return value will be wrapped by a    *         {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|disableTables
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
function_decl|;
comment|/**    * Get the status of alter command - indicates how many regions have received the updated schema    * Asynchronous operation.    * @param tableName TableName instance    * @return Pair indicating the number of regions updated Pair.getFirst() is the regions that are    *         yet to be updated Pair.getSecond() is the total number of regions of the table. The    *         return value will be wrapped by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|getAlterStatus
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Add a column family to an existing table.    * @param tableName name of the table to add column family to    * @param columnFamily column family descriptor of column family to be added    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|addColumnFamily
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HColumnDescriptor
name|columnFamily
parameter_list|)
function_decl|;
comment|/**    * Delete a column family from a table.    * @param tableName name of table    * @param columnFamily name of column family to be deleted    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteColumnFamily
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
function_decl|;
comment|/**    * Modify an existing column family on a table.    * @param tableName name of table    * @param columnFamily new column family descriptor to use    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|modifyColumnFamily
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HColumnDescriptor
name|columnFamily
parameter_list|)
function_decl|;
comment|/**    * Create a new namespace.    * @param descriptor descriptor which describes the new namespace    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createNamespace
parameter_list|(
specifier|final
name|NamespaceDescriptor
name|descriptor
parameter_list|)
function_decl|;
comment|/**    * Modify an existing namespace.    * @param descriptor descriptor which describes the new namespace    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|modifyNamespace
parameter_list|(
specifier|final
name|NamespaceDescriptor
name|descriptor
parameter_list|)
function_decl|;
comment|/**    * Delete an existing namespace. Only empty namespaces (no tables) can be removed.    * @param name namespace name    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteNamespace
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
function_decl|;
comment|/**    * Get a namespace descriptor by name    * @param name name of namespace descriptor    * @return A descriptor wrapped by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|getNamespaceDescriptor
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
function_decl|;
comment|/**    * List available namespace descriptors    * @return List of descriptors wrapped by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|NamespaceDescriptor
index|[]
argument_list|>
name|listNamespaceDescriptors
parameter_list|()
function_decl|;
comment|/**    * Turn the load balancer on or off.    * @param on    * @return Previous balancer value wrapped by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|setBalancerRunning
parameter_list|(
specifier|final
name|boolean
name|on
parameter_list|)
function_decl|;
comment|/**    * Invoke the balancer. Will run the balancer and if regions to move, it will go ahead and do the    * reassignments. Can NOT run for various reasons. Check logs.    * @return True if balancer ran, false otherwise. The return value will be wrapped by a    *         {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|balancer
parameter_list|()
function_decl|;
comment|/**    * Invoke the balancer. Will run the balancer and if regions to move, it will go ahead and do the    * reassignments. If there is region in transition, force parameter of true would still run    * balancer. Can *not* run for other reasons. Check logs.    * @param force whether we should force balance even if there is region in transition.    * @return True if balancer ran, false otherwise. The return value will be wrapped by a    *         {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|balancer
parameter_list|(
name|boolean
name|force
parameter_list|)
function_decl|;
comment|/**    * Query the current state of the balancer.    * @return true if the balancer is enabled, false otherwise.    *         The return value will be wrapped by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isBalancerEnabled
parameter_list|()
function_decl|;
comment|/**    * Close a region. For expert-admins.  Runs close on the regionserver.  The master will not be    * informed of the close.    *    * @param regionname region name to close    * @param serverName If supplied, we'll use this location rather than the one currently in    *<code>hbase:meta</code>    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|closeRegion
parameter_list|(
name|String
name|regionname
parameter_list|,
name|String
name|serverName
parameter_list|)
function_decl|;
comment|/**    * Close a region.  For expert-admins  Runs close on the regionserver.  The master will not be    * informed of the close.    *    * @param regionname region name to close    * @param serverName The servername of the regionserver.  If passed null we will use servername    * found in the hbase:meta table. A server name is made of host, port and startcode.  Here is an    * example:<code> host187.example.com,60020,1289493121758</code>    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|closeRegion
parameter_list|(
name|byte
index|[]
name|regionname
parameter_list|,
name|String
name|serverName
parameter_list|)
function_decl|;
comment|/**    * For expert-admins. Runs close on the regionserver. Closes a region based on the encoded region    * name. The region server name is mandatory. If the servername is provided then based on the    * online regions in the specified regionserver the specified region will be closed. The master    * will not be informed of the close. Note that the regionname is the encoded regionname.    *    * @param encodedRegionName The encoded region name; i.e. the hash that makes up the region name    * suffix: e.g. if regionname is    *<code>TestTable,0094429456,1289497600452.527db22f95c8a9e0116f0cc13c680396.</code>,    * then the encoded region name is:<code>527db22f95c8a9e0116f0cc13c680396</code>.    * @param serverName The servername of the regionserver. A server name is made of host, port and    * startcode. This is mandatory. Here is an example:    *<code> host187.example.com,60020,1289493121758</code>    * @return true if the region was closed, false if not. The return value will be wrapped by a    * {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|closeRegionWithEncodedRegionName
parameter_list|(
name|String
name|encodedRegionName
parameter_list|,
name|String
name|serverName
parameter_list|)
function_decl|;
comment|/**    * Close a region.  For expert-admins  Runs close on the regionserver.  The master will not be    * informed of the close.    *    * @param sn    * @param hri    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|closeRegion
parameter_list|(
name|ServerName
name|sn
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

