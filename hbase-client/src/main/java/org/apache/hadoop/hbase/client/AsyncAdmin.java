begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RawAsyncTable
operator|.
name|CoprocessorCallable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|TableCFs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|security
operator|.
name|SecurityCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcChannel
import|;
end_import

begin_comment
comment|/**  * The asynchronous administrative API for HBase.  *<p>  * This feature is still under development, so marked as IA.Private. Will change to public when  * done. Use it with caution.  * @since 2.0.0  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
interface|interface
name|AsyncAdmin
block|{
comment|/**    * @param tableName Table to check.    * @return True if table exists already. The return value will be wrapped by a    *         {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|tableExists
parameter_list|(
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * List all the userspace tables.    * @return - returns a list of TableDescriptors wrapped by a {@link CompletableFuture}.    * @see #listTables(Optional, boolean)    */
specifier|default
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|TableDescriptor
argument_list|>
argument_list|>
name|listTables
parameter_list|()
block|{
return|return
name|listTables
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * List all the tables matching the given pattern.    * @param pattern The compiled regular expression to match against    * @param includeSysTables False to match only against userspace tables    * @return - returns a list of TableDescriptors wrapped by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|TableDescriptor
argument_list|>
argument_list|>
name|listTables
parameter_list|(
name|Optional
argument_list|<
name|Pattern
argument_list|>
name|pattern
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
function_decl|;
comment|/**    * List all of the names of userspace tables.    * @return a list of table names wrapped by a {@link CompletableFuture}.    * @see #listTableNames(Optional, boolean)    */
specifier|default
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|TableName
argument_list|>
argument_list|>
name|listTableNames
parameter_list|()
block|{
return|return
name|listTableNames
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * List all of the names of userspace tables.    * @param pattern The regular expression to match against    * @param includeSysTables False to match only against userspace tables    * @return a list of table names wrapped by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|TableName
argument_list|>
argument_list|>
name|listTableNames
parameter_list|(
name|Optional
argument_list|<
name|Pattern
argument_list|>
name|pattern
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
function_decl|;
comment|/**    * Method for getting the tableDescriptor    * @param tableName as a {@link TableName}    * @return the read-only tableDescriptor wrapped by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|TableDescriptor
argument_list|>
name|getTableDescriptor
parameter_list|(
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Creates a new table.    * @param desc table descriptor for table    */
specifier|default
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createTable
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|)
block|{
return|return
name|createTable
argument_list|(
name|desc
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a new table with the specified number of regions. The start key specified will become    * the end key of the first region of the table, and the end key specified will become the start    * key of the last region of the table (the first region has a null start key and the last region    * has a null end key). BigInteger math will be used to divide the key range specified into enough    * segments to make the required number of total regions.    * @param desc table descriptor for table    * @param startKey beginning of key range    * @param endKey end of key range    * @param numRegions the total number of regions to create    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createTable
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|int
name|numRegions
parameter_list|)
function_decl|;
comment|/**    * Creates a new table with an initial set of empty regions defined by the specified split keys.    * The total number of regions created will be the number of split keys plus one.    * Note : Avoid passing empty split key.    * @param desc table descriptor for table    * @param splitKeys array of split keys for the initial regions of the table    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createTable
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|,
name|Optional
argument_list|<
name|byte
index|[]
index|[]
argument_list|>
name|splitKeys
parameter_list|)
function_decl|;
comment|/**    * Deletes a table.    * @param tableName name of table to delete    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Truncate a table.    * @param tableName name of table to truncate    * @param preserveSplits True if the splits should be preserved    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|truncateTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|boolean
name|preserveSplits
parameter_list|)
function_decl|;
comment|/**    * Enable a table. The table has to be in disabled state for it to be enabled.    * @param tableName name of the table    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|enableTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Disable a table. The table has to be in enabled state for it to be disabled.    * @param tableName    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|disableTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * @param tableName name of table to check    * @return true if table is on-line. The return value will be wrapped by a    *         {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isTableEnabled
parameter_list|(
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * @param tableName name of table to check    * @return true if table is off-line. The return value will be wrapped by a    *         {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isTableDisabled
parameter_list|(
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * @param tableName name of table to check    * @return true if all regions of the table are available. The return value will be wrapped by a    *         {@link CompletableFuture}.    */
specifier|default
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isTableAvailable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|isTableAvailable
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Use this api to check if the table has been created with the specified number of splitkeys    * which was used while creating the given table. Note : If this api is used after a table's    * region gets splitted, the api may return false. The return value will be wrapped by a    * {@link CompletableFuture}.    * @param tableName name of table to check    * @param splitKeys keys to check if the table has been created with all split keys    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isTableAvailable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
function_decl|;
comment|/**    * Add a column family to an existing table.    * @param tableName name of the table to add column family to    * @param columnFamily column family descriptor of column family to be added    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|addColumnFamily
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ColumnFamilyDescriptor
name|columnFamily
parameter_list|)
function_decl|;
comment|/**    * Delete a column family from a table.    * @param tableName name of table    * @param columnFamily name of column family to be deleted    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteColumnFamily
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
function_decl|;
comment|/**    * Modify an existing column family on a table.    * @param tableName name of table    * @param columnFamily new column family descriptor to use    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|modifyColumnFamily
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ColumnFamilyDescriptor
name|columnFamily
parameter_list|)
function_decl|;
comment|/**    * Create a new namespace.    * @param descriptor descriptor which describes the new namespace    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createNamespace
parameter_list|(
name|NamespaceDescriptor
name|descriptor
parameter_list|)
function_decl|;
comment|/**    * Modify an existing namespace.    * @param descriptor descriptor which describes the new namespace    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|modifyNamespace
parameter_list|(
name|NamespaceDescriptor
name|descriptor
parameter_list|)
function_decl|;
comment|/**    * Delete an existing namespace. Only empty namespaces (no tables) can be removed.    * @param name namespace name    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteNamespace
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
comment|/**    * Get a namespace descriptor by name    * @param name name of namespace descriptor    * @return A descriptor wrapped by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|getNamespaceDescriptor
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
comment|/**    * List available namespace descriptors    * @return List of descriptors wrapped by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|NamespaceDescriptor
argument_list|>
argument_list|>
name|listNamespaceDescriptors
parameter_list|()
function_decl|;
comment|/**    * Get all the online regions on a region server.    */
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|getOnlineRegions
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
function_decl|;
comment|/**    * Get the regions of a given table.    */
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|getTableRegions
parameter_list|(
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Flush a table.    * @param tableName table to flush    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|flush
parameter_list|(
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Flush an individual region.    * @param regionName region to flush    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|flushRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
function_decl|;
comment|/**    * Compact a table. When the returned CompletableFuture is done, it only means the compact request    * was sent to HBase and may need some time to finish the compact operation.    * @param tableName table to compact    */
specifier|default
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|compact
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|compact
argument_list|(
name|tableName
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Compact a column family within a table. When the returned CompletableFuture is done, it only    * means the compact request was sent to HBase and may need some time to finish the compact    * operation.    * @param tableName table to compact    * @param columnFamily column family within a table. If not present, compact the table's all    *          column families.    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|compact
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Optional
argument_list|<
name|byte
index|[]
argument_list|>
name|columnFamily
parameter_list|)
function_decl|;
comment|/**    * Compact an individual region. When the returned CompletableFuture is done, it only means the    * compact request was sent to HBase and may need some time to finish the compact operation.    * @param regionName region to compact    */
specifier|default
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|compactRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
return|return
name|compactRegion
argument_list|(
name|regionName
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Compact a column family within a region. When the returned CompletableFuture is done, it only    * means the compact request was sent to HBase and may need some time to finish the compact    * operation.    * @param regionName region to compact    * @param columnFamily column family within a region. If not present, compact the region's all    *          column families.    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|compactRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|Optional
argument_list|<
name|byte
index|[]
argument_list|>
name|columnFamily
parameter_list|)
function_decl|;
comment|/**    * Major compact a table. When the returned CompletableFuture is done, it only means the compact    * request was sent to HBase and may need some time to finish the compact operation.    * @param tableName table to major compact    */
specifier|default
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|majorCompact
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|majorCompact
argument_list|(
name|tableName
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Major compact a column family within a table. When the returned CompletableFuture is done, it    * only means the compact request was sent to HBase and may need some time to finish the compact    * operation.    * @param tableName table to major compact    * @param columnFamily column family within a table. If not present, major compact the table's all    *          column families.    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|majorCompact
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Optional
argument_list|<
name|byte
index|[]
argument_list|>
name|columnFamily
parameter_list|)
function_decl|;
comment|/**    * Major compact a region. When the returned CompletableFuture is done, it only means the compact    * request was sent to HBase and may need some time to finish the compact operation.    * @param regionName region to major compact    */
specifier|default
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|majorCompactRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
return|return
name|majorCompactRegion
argument_list|(
name|regionName
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Major compact a column family within region. When the returned CompletableFuture is done, it    * only means the compact request was sent to HBase and may need some time to finish the compact    * operation.    * @param regionName region to major compact    * @param columnFamily column family within a region. If not present, major compact the region's    *          all column families.    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|majorCompactRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|Optional
argument_list|<
name|byte
index|[]
argument_list|>
name|columnFamily
parameter_list|)
function_decl|;
comment|/**    * Compact all regions on the region server.    * @param serverName the region server name    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|compactRegionServer
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
function_decl|;
comment|/**    * Compact all regions on the region server.    * @param serverName the region server name    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|majorCompactRegionServer
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
function_decl|;
comment|/**    * Turn the Merge switch on or off.    * @param on    * @return Previous switch value wrapped by a {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|setMergeOn
parameter_list|(
name|boolean
name|on
parameter_list|)
function_decl|;
comment|/**    * Query the current state of the Merge switch.    * @return true if the switch is on, false otherwise. The return value will be wrapped by a    *         {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isMergeOn
parameter_list|()
function_decl|;
comment|/**    * Turn the Split switch on or off.    * @param on    * @return Previous switch value wrapped by a {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|setSplitOn
parameter_list|(
name|boolean
name|on
parameter_list|)
function_decl|;
comment|/**    * Query the current state of the Split switch.    * @return true if the switch is on, false otherwise. The return value will be wrapped by a    *         {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isSplitOn
parameter_list|()
function_decl|;
comment|/**    * Merge two regions.    * @param nameOfRegionA encoded or full name of region a    * @param nameOfRegionB encoded or full name of region b    * @param forcible true if do a compulsory merge, otherwise we will only merge two adjacent    *          regions    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|mergeRegions
parameter_list|(
name|byte
index|[]
name|nameOfRegionA
parameter_list|,
name|byte
index|[]
name|nameOfRegionB
parameter_list|,
name|boolean
name|forcible
parameter_list|)
function_decl|;
comment|/**    * Split a table. The method will execute split action for each region in table.    * @param tableName table to split    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|split
parameter_list|(
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Split an individual region.    * @param regionName region to split    */
specifier|default
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|splitRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
return|return
name|splitRegion
argument_list|(
name|regionName
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Split a table.    * @param tableName table to split    * @param splitPoint the explicit position to split on    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|split
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|splitPoint
parameter_list|)
function_decl|;
comment|/**    * Split an individual region.    * @param regionName region to split    * @param splitPoint the explicit position to split on. If not present, it will decide by region    *          server.    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|splitRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|Optional
argument_list|<
name|byte
index|[]
argument_list|>
name|splitPoint
parameter_list|)
function_decl|;
comment|/**    * @param regionName Encoded or full name of region to assign.    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|assign
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
function_decl|;
comment|/**    * Unassign a region from current hosting regionserver. Region will then be assigned to a    * regionserver chosen at random. Region could be reassigned back to the same server. Use    * {@link #move(byte[], Optional)} if you want to control the region movement.    * @param regionName Encoded or full name of region to unassign. Will clear any existing    *          RegionPlan if one found.    * @param forcible If true, force unassign (Will remove region from regions-in-transition too if    *          present. If results in double assignment use hbck -fix to resolve. To be used by    *          experts).    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|unassign
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|boolean
name|forcible
parameter_list|)
function_decl|;
comment|/**    * Offline specified region from master's in-memory state. It will not attempt to reassign the    * region as in unassign. This API can be used when a region not served by any region server and    * still online as per Master's in memory state. If this API is incorrectly used on active region    * then master will loose track of that region. This is a special method that should be used by    * experts or hbck.    * @param regionName Encoded or full name of region to offline    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|offline
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
function_decl|;
comment|/**    * Move the region<code>r</code> to<code>dest</code>.    * @param regionName Encoded or full name of region to move.    * @param destServerName The servername of the destination regionserver. If not present, we'll    *          assign to a random server. A server name is made of host, port and startcode. Here is    *          an example:<code> host187.example.com,60020,1289493121758</code>    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|move
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|Optional
argument_list|<
name|ServerName
argument_list|>
name|destServerName
parameter_list|)
function_decl|;
comment|/**    * Apply the new quota settings.    * @param quota the quota settings    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|setQuota
parameter_list|(
name|QuotaSettings
name|quota
parameter_list|)
function_decl|;
comment|/**    * List the quotas based on the filter.    * @param filter the quota settings filter    * @return the QuotaSetting list, which wrapped by a CompletableFuture.    */
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|QuotaSettings
argument_list|>
argument_list|>
name|getQuota
parameter_list|(
name|QuotaFilter
name|filter
parameter_list|)
function_decl|;
comment|/**    * Add a new replication peer for replicating data to slave cluster    * @param peerId a short name that identifies the peer    * @param peerConfig configuration for the replication slave cluster    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|addReplicationPeer
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
function_decl|;
comment|/**    * Remove a peer and stop the replication    * @param peerId a short name that identifies the peer    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|removeReplicationPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
function_decl|;
comment|/**    * Restart the replication stream to the specified peer    * @param peerId a short name that identifies the peer    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|enableReplicationPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
function_decl|;
comment|/**    * Stop the replication stream to the specified peer    * @param peerId a short name that identifies the peer    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|disableReplicationPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
function_decl|;
comment|/**    * Returns the configured ReplicationPeerConfig for the specified peer    * @param peerId a short name that identifies the peer    * @return ReplicationPeerConfig for the peer wrapped by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|ReplicationPeerConfig
argument_list|>
name|getReplicationPeerConfig
parameter_list|(
name|String
name|peerId
parameter_list|)
function_decl|;
comment|/**    * Update the peerConfig for the specified peer    * @param peerId a short name that identifies the peer    * @param peerConfig new config for the peer    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|updateReplicationPeerConfig
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
function_decl|;
comment|/**    * Append the replicable table-cf config of the specified peer    * @param peerId a short that identifies the cluster    * @param tableCfs A map from tableName to column family names    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|appendReplicationPeerTableCFs
parameter_list|(
name|String
name|peerId
parameter_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
parameter_list|)
function_decl|;
comment|/**    * Remove some table-cfs from config of the specified peer    * @param peerId a short name that identifies the cluster    * @param tableCfs A map from tableName to column family names    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|removeReplicationPeerTableCFs
parameter_list|(
name|String
name|peerId
parameter_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
parameter_list|)
function_decl|;
comment|/**    * Return a list of replication peers.    * @return a list of replication peers description. The return value will be wrapped by a    *         {@link CompletableFuture}.    */
specifier|default
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
argument_list|>
name|listReplicationPeers
parameter_list|()
block|{
return|return
name|listReplicationPeers
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Return a list of replication peers.    * @param pattern The compiled regular expression to match peer id    * @return a list of replication peers description. The return value will be wrapped by a    *         {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
argument_list|>
name|listReplicationPeers
parameter_list|(
name|Optional
argument_list|<
name|Pattern
argument_list|>
name|pattern
parameter_list|)
function_decl|;
comment|/**    * Find all table and column families that are replicated from this cluster    * @return the replicated table-cfs list of this cluster. The return value will be wrapped by a    *         {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|TableCFs
argument_list|>
argument_list|>
name|listReplicatedTableCFs
parameter_list|()
function_decl|;
comment|/**    * Take a snapshot for the given table. If the table is enabled, a FLUSH-type snapshot will be    * taken. If the table is disabled, an offline snapshot is taken. Snapshots are considered unique    * based on<b>the name of the snapshot</b>. Attempts to take a snapshot with the same name (even    * a different type or with different parameters) will fail with a    * {@link org.apache.hadoop.hbase.snapshot.SnapshotCreationException} indicating the duplicate    * naming. Snapshot names follow the same naming constraints as tables in HBase. See    * {@link org.apache.hadoop.hbase.TableName#isLegalFullyQualifiedTableName(byte[])}.    * @param snapshotName name of the snapshot to be created    * @param tableName name of the table for which snapshot is created    */
specifier|default
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|snapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|snapshot
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|SnapshotType
operator|.
name|FLUSH
argument_list|)
return|;
block|}
comment|/**    * Create typed snapshot of the table. Snapshots are considered unique based on<b>the name of the    * snapshot</b>. Attempts to take a snapshot with the same name (even a different type or with    * different parameters) will fail with a    * {@link org.apache.hadoop.hbase.snapshot.SnapshotCreationException} indicating the duplicate    * naming. Snapshot names follow the same naming constraints as tables in HBase. See    * {@link org.apache.hadoop.hbase.TableName#isLegalFullyQualifiedTableName(byte[])}.    * @param snapshotName name to give the snapshot on the filesystem. Must be unique from all other    *          snapshots stored on the cluster    * @param tableName name of the table to snapshot    * @param type type of snapshot to take    */
specifier|default
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|snapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|SnapshotType
name|type
parameter_list|)
block|{
return|return
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|type
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Take a snapshot and wait for the server to complete that snapshot asynchronously. Only a single    * snapshot should be taken at a time for an instance of HBase, or results may be undefined (you    * can tell multiple HBase clusters to snapshot at the same time, but only one at a time for a    * single cluster). Snapshots are considered unique based on<b>the name of the snapshot</b>.    * Attempts to take a snapshot with the same name (even a different type or with different    * parameters) will fail with a {@link org.apache.hadoop.hbase.snapshot.SnapshotCreationException}    * indicating the duplicate naming. Snapshot names follow the same naming constraints as tables in    * HBase. See {@link org.apache.hadoop.hbase.TableName#isLegalFullyQualifiedTableName(byte[])}.    * You should probably use {@link #snapshot(String, org.apache.hadoop.hbase.TableName)} unless you    * are sure about the type of snapshot that you want to take.    * @param snapshot snapshot to take    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|snapshot
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
function_decl|;
comment|/**    * Check the current state of the passed snapshot. There are three possible states:    *<ol>    *<li>running - returns<tt>false</tt></li>    *<li>finished - returns<tt>true</tt></li>    *<li>finished with error - throws the exception that caused the snapshot to fail</li>    *</ol>    * The cluster only knows about the most recent snapshot. Therefore, if another snapshot has been    * run/started since the snapshot you are checking, you will receive an    * {@link org.apache.hadoop.hbase.snapshot.UnknownSnapshotException}.    * @param snapshot description of the snapshot to check    * @return<tt>true</tt> if the snapshot is completed,<tt>false</tt> if the snapshot is still    *         running    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isSnapshotFinished
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
function_decl|;
comment|/**    * Restore the specified snapshot on the original table. (The table must be disabled) If the    * "hbase.snapshot.restore.take.failsafe.snapshot" configuration property is set to true, a    * snapshot of the current table is taken before executing the restore operation. In case of    * restore failure, the failsafe snapshot will be restored. If the restore completes without    * problem the failsafe snapshot is deleted.    * @param snapshotName name of the snapshot to restore    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|restoreSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|)
function_decl|;
comment|/**    * Restore the specified snapshot on the original table. (The table must be disabled) If    * 'takeFailSafeSnapshot' is set to true, a snapshot of the current table is taken before    * executing the restore operation. In case of restore failure, the failsafe snapshot will be    * restored. If the restore completes without problem the failsafe snapshot is deleted. The    * failsafe snapshot name is configurable by using the property    * "hbase.snapshot.restore.failsafe.name".    * @param snapshotName name of the snapshot to restore    * @param takeFailSafeSnapshot true if the failsafe snapshot should be taken    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|restoreSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|boolean
name|takeFailSafeSnapshot
parameter_list|)
function_decl|;
comment|/**    * Create a new table by cloning the snapshot content.    * @param snapshotName name of the snapshot to be cloned    * @param tableName name of the table where the snapshot will be restored    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|cloneSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * List completed snapshots.    * @return a list of snapshot descriptors for completed snapshots wrapped by a    *         {@link CompletableFuture}    */
specifier|default
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
argument_list|>
name|listSnapshots
parameter_list|()
block|{
return|return
name|listSnapshots
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * List all the completed snapshots matching the given pattern.    * @param pattern The compiled regular expression to match against    * @return - returns a List of SnapshotDescription wrapped by a {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
argument_list|>
name|listSnapshots
parameter_list|(
name|Optional
argument_list|<
name|Pattern
argument_list|>
name|pattern
parameter_list|)
function_decl|;
comment|/**    * List all the completed snapshots matching the given table name regular expression and snapshot    * name regular expression.    * @param tableNamePattern The compiled table name regular expression to match against    * @param snapshotNamePattern The compiled snapshot name regular expression to match against    * @return - returns a List of completed SnapshotDescription wrapped by a    *         {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
argument_list|>
name|listTableSnapshots
parameter_list|(
name|Pattern
name|tableNamePattern
parameter_list|,
name|Pattern
name|snapshotNamePattern
parameter_list|)
function_decl|;
comment|/**    * Delete an existing snapshot.    * @param snapshotName name of the snapshot    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|)
function_decl|;
comment|/**    * Delete existing snapshots whose names match the pattern passed.    * @param pattern pattern for names of the snapshot to match    */
specifier|default
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteSnapshots
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
block|{
return|return
name|deleteTableSnapshots
argument_list|(
literal|null
argument_list|,
name|pattern
argument_list|)
return|;
block|}
comment|/**    * Delete all existing snapshots matching the given table name regular expression and snapshot    * name regular expression.    * @param tableNamePattern The compiled table name regular expression to match against    * @param snapshotNamePattern The compiled snapshot name regular expression to match against    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteTableSnapshots
parameter_list|(
name|Pattern
name|tableNamePattern
parameter_list|,
name|Pattern
name|snapshotNamePattern
parameter_list|)
function_decl|;
comment|/**    * Execute a distributed procedure on a cluster.    * @param signature A distributed procedure is uniquely identified by its signature (default the    *          root ZK node name of the procedure).    * @param instance The instance name of the procedure. For some procedures, this parameter is    *          optional.    * @param props Property/Value pairs of properties passing to the procedure    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|execProcedure
parameter_list|(
name|String
name|signature
parameter_list|,
name|String
name|instance
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
function_decl|;
comment|/**    * Execute a distributed procedure on a cluster.    * @param signature A distributed procedure is uniquely identified by its signature (default the    *          root ZK node name of the procedure).    * @param instance The instance name of the procedure. For some procedures, this parameter is    *          optional.    * @param props Property/Value pairs of properties passing to the procedure    * @return data returned after procedure execution. null if no return data.    */
name|CompletableFuture
argument_list|<
name|byte
index|[]
argument_list|>
name|execProcedureWithRet
parameter_list|(
name|String
name|signature
parameter_list|,
name|String
name|instance
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
function_decl|;
comment|/**    * Check the current state of the specified procedure. There are three possible states:    *<ol>    *<li>running - returns<tt>false</tt></li>    *<li>finished - returns<tt>true</tt></li>    *<li>finished with error - throws the exception that caused the procedure to fail</li>    *</ol>    * @param signature The signature that uniquely identifies a procedure    * @param instance The instance name of the procedure    * @param props Property/Value pairs of properties passing to the procedure    * @return true if the specified procedure is finished successfully, false if it is still running.    *         The value is wrapped by {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isProcedureFinished
parameter_list|(
name|String
name|signature
parameter_list|,
name|String
name|instance
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
function_decl|;
comment|/**    * abort a procedure    * @param procId ID of the procedure to abort    * @param mayInterruptIfRunning if the proc completed at least one step, should it be aborted?    * @return true if aborted, false if procedure already completed or does not exist. the value is    *         wrapped by {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|abortProcedure
parameter_list|(
name|long
name|procId
parameter_list|,
name|boolean
name|mayInterruptIfRunning
parameter_list|)
function_decl|;
comment|/**    * List procedures    * @return procedure list JSON wrapped by {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|String
argument_list|>
name|getProcedures
parameter_list|()
function_decl|;
comment|/**    * List locks.    * @return lock list JSON wrapped by {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|String
argument_list|>
name|getLocks
parameter_list|()
function_decl|;
comment|/**    * Mark region server(s) as decommissioned to prevent additional regions from getting    * assigned to them. Optionally unload the regions on the servers. If there are multiple servers    * to be decommissioned, decommissioning them at the same time can prevent wasteful region    * movements. Region unloading is asynchronous.    * @param servers The list of servers to decommission.    * @param offload True to offload the regions from the decommissioned servers    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|decommissionRegionServers
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|,
name|boolean
name|offload
parameter_list|)
function_decl|;
comment|/**    * List region servers marked as decommissioned, which can not be assigned regions.    * @return List of decommissioned region servers wrapped by {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|listDecommissionedRegionServers
parameter_list|()
function_decl|;
comment|/**    * Remove decommission marker from a region server to allow regions assignments. Load regions onto    * the server if a list of regions is given. Region loading is asynchronous.    * @param server The server to recommission.    * @param encodedRegionNames Regions to load onto the server.    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|recommissionRegionServer
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|encodedRegionNames
parameter_list|)
function_decl|;
comment|/**    * @return cluster status wrapped by {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|ClusterStatus
argument_list|>
name|getClusterStatus
parameter_list|()
function_decl|;
comment|/**    * @return cluster status wrapped by {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|ClusterStatus
argument_list|>
name|getClusterStatus
parameter_list|(
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
function_decl|;
comment|/**    * @return current master server name wrapped by {@link CompletableFuture}    */
specifier|default
name|CompletableFuture
argument_list|<
name|ServerName
argument_list|>
name|getMaster
parameter_list|()
block|{
return|return
name|getClusterStatus
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|MASTER
argument_list|)
argument_list|)
operator|.
name|thenApply
argument_list|(
name|ClusterStatus
operator|::
name|getMaster
argument_list|)
return|;
block|}
comment|/**    * @return current backup master list wrapped by {@link CompletableFuture}    */
specifier|default
name|CompletableFuture
argument_list|<
name|Collection
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|getBackupMasters
parameter_list|()
block|{
return|return
name|getClusterStatus
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|BACKUP_MASTERS
argument_list|)
argument_list|)
operator|.
name|thenApply
argument_list|(
name|ClusterStatus
operator|::
name|getBackupMasters
argument_list|)
return|;
block|}
comment|/**    * @return current live region servers list wrapped by {@link CompletableFuture}    */
specifier|default
name|CompletableFuture
argument_list|<
name|Collection
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|getRegionServers
parameter_list|()
block|{
return|return
name|getClusterStatus
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
operator|.
name|thenApply
argument_list|(
name|ClusterStatus
operator|::
name|getServers
argument_list|)
return|;
block|}
comment|/**    * Get a list of {@link RegionLoad} of all regions hosted on a region seerver.    * @param serverName    * @return a list of {@link RegionLoad} wrapped by {@link CompletableFuture}    */
specifier|default
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|RegionLoad
argument_list|>
argument_list|>
name|getRegionLoads
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
name|getRegionLoads
argument_list|(
name|serverName
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Shuts down the HBase cluster.    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|shutdown
parameter_list|()
function_decl|;
comment|/**    * Shuts down the current HBase master only.    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|stopMaster
parameter_list|()
function_decl|;
comment|/**    * Stop the designated regionserver.    * @param serverName    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|stopRegionServer
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
function_decl|;
comment|/**    * Update the configuration and trigger an online config change on the regionserver.    * @param serverName : The server whose config needs to be updated.    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|updateConfiguration
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
function_decl|;
comment|/**    * Update the configuration and trigger an online config change on all the masters and    * regionservers.    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|updateConfiguration
parameter_list|()
function_decl|;
comment|/**    * Roll the log writer. I.e. for filesystem based write ahead logs, start writing to a new file.    *<p>    * When the returned CompletableFuture is done, it only means the rollWALWriter request was sent    * to the region server and may need some time to finish the rollWALWriter operation. As a side    * effect of this call, the named region server may schedule store flushes at the request of the    * wal.    * @param serverName The servername of the region server.    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|rollWALWriter
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
function_decl|;
comment|/**    * Clear compacting queues on a region server.    * @param serverName    * @param queues the set of queue name    */
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|clearCompactionQueues
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|queues
parameter_list|)
function_decl|;
comment|/**    * Get a list of {@link RegionLoad} of all regions hosted on a region seerver for a table.    * @param serverName    * @param tableName    * @return a list of {@link RegionLoad} wrapped by {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|RegionLoad
argument_list|>
argument_list|>
name|getRegionLoads
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|Optional
argument_list|<
name|TableName
argument_list|>
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Check whether master is in maintenance mode    * @return true if master is in maintenance mode, false otherwise. The return value will be    *         wrapped by a {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isMasterInMaintenanceMode
parameter_list|()
function_decl|;
comment|/**    * Get the current compaction state of a table. It could be in a major compaction, a minor    * compaction, both, or none.    * @param tableName table to examine    * @return the current compaction state wrapped by a {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|CompactionState
argument_list|>
name|getCompactionState
parameter_list|(
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Get the current compaction state of region. It could be in a major compaction, a minor    * compaction, both, or none.    * @param regionName region to examine    * @return the current compaction state wrapped by a {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|CompactionState
argument_list|>
name|getCompactionStateForRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
function_decl|;
comment|/**    * Get the timestamp of the last major compaction for the passed table.    *<p>    * The timestamp of the oldest HFile resulting from a major compaction of that table, or not    * present if no such HFile could be found.    * @param tableName table to examine    * @return the last major compaction timestamp wrapped by a {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Optional
argument_list|<
name|Long
argument_list|>
argument_list|>
name|getLastMajorCompactionTimestamp
parameter_list|(
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Get the timestamp of the last major compaction for the passed region.    *<p>    * The timestamp of the oldest HFile resulting from a major compaction of that region, or not    * present if no such HFile could be found.    * @param regionName region to examine    * @return the last major compaction timestamp wrapped by a {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Optional
argument_list|<
name|Long
argument_list|>
argument_list|>
name|getLastMajorCompactionTimestampForRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
function_decl|;
comment|/**    * @return the list of supported security capabilities. The return value will be wrapped by a    *         {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|SecurityCapability
argument_list|>
argument_list|>
name|getSecurityCapabilities
parameter_list|()
function_decl|;
comment|/**    * Turn the load balancer on or off.    * @param on    * @return Previous balancer value wrapped by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|setBalancerOn
parameter_list|(
name|boolean
name|on
parameter_list|)
function_decl|;
comment|/**    * Invoke the balancer. Will run the balancer and if regions to move, it will go ahead and do the    * reassignments. Can NOT run for various reasons. Check logs.    * @return True if balancer ran, false otherwise. The return value will be wrapped by a    *         {@link CompletableFuture}.    */
specifier|default
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|balance
parameter_list|()
block|{
return|return
name|balance
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/**    * Invoke the balancer. Will run the balancer and if regions to move, it will go ahead and do the    * reassignments. If there is region in transition, force parameter of true would still run    * balancer. Can *not* run for other reasons. Check logs.    * @param forcible whether we should force balance even if there is region in transition.    * @return True if balancer ran, false otherwise. The return value will be wrapped by a    *         {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|balance
parameter_list|(
name|boolean
name|forcible
parameter_list|)
function_decl|;
comment|/**    * Query the current state of the balancer.    * @return true if the balance switch is on, false otherwise. The return value will be wrapped by a    *         {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isBalancerOn
parameter_list|()
function_decl|;
comment|/**    * Set region normalizer on/off.    * @param on whether normalizer should be on or off    * @return Previous normalizer value wrapped by a {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|setNormalizerOn
parameter_list|(
name|boolean
name|on
parameter_list|)
function_decl|;
comment|/**    * Query the current state of the region normalizer    * @return true if region normalizer is on, false otherwise. The return value will be wrapped by a    *         {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isNormalizerOn
parameter_list|()
function_decl|;
comment|/**    * Invoke region normalizer. Can NOT run for various reasons. Check logs.    * @return true if region normalizer ran, false otherwise. The return value will be wrapped by a    *         {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|normalize
parameter_list|()
function_decl|;
comment|/**    * Turn the cleaner chore on/off.    * @param on    * @return Previous cleaner state wrapped by a {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|setCleanerChoreOn
parameter_list|(
name|boolean
name|on
parameter_list|)
function_decl|;
comment|/**    * Query the current state of the cleaner chore.    * @return true if cleaner chore is on, false otherwise. The return value will be wrapped by    *         a {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isCleanerChoreOn
parameter_list|()
function_decl|;
comment|/**    * Ask for cleaner chore to run.    * @return true if cleaner chore ran, false otherwise. The return value will be wrapped by a    *         {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|runCleanerChore
parameter_list|()
function_decl|;
comment|/**    * Turn the catalog janitor on/off.    * @param on    * @return the previous state wrapped by a {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|setCatalogJanitorOn
parameter_list|(
name|boolean
name|on
parameter_list|)
function_decl|;
comment|/**    * Query on the catalog janitor state.    * @return true if the catalog janitor is on, false otherwise. The return value will be    *         wrapped by a {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isCatalogJanitorOn
parameter_list|()
function_decl|;
comment|/**    * Ask for a scan of the catalog table.    * @return the number of entries cleaned. The return value will be wrapped by a    *         {@link CompletableFuture}    */
name|CompletableFuture
argument_list|<
name|Integer
argument_list|>
name|runCatalogJanitor
parameter_list|()
function_decl|;
comment|/**    * Execute the given coprocessor call on the master.    *<p>    * The {@code stubMaker} is just a delegation to the {@code newStub} call. Usually it is only a    * one line lambda expression, like:    *    *<pre>    *<code>    * channel -> xxxService.newStub(channel)    *</code>    *</pre>    * @param stubMaker a delegation to the actual {@code newStub} call.    * @param callable a delegation to the actual protobuf rpc call. See the comment of    *          {@link CoprocessorCallable} for more details.    * @param<S> the type of the asynchronous stub    * @param<R> the type of the return value    * @return the return value of the protobuf rpc call, wrapped by a {@link CompletableFuture}.    * @see CoprocessorCallable    */
parameter_list|<
name|S
parameter_list|,
name|R
parameter_list|>
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|coprocessorService
parameter_list|(
name|Function
argument_list|<
name|RpcChannel
argument_list|,
name|S
argument_list|>
name|stubMaker
parameter_list|,
name|CoprocessorCallable
argument_list|<
name|S
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|)
function_decl|;
comment|/**    * Execute the given coprocessor call on the given region server.    *<p>    * The {@code stubMaker} is just a delegation to the {@code newStub} call. Usually it is only a    * one line lambda expression, like:    *    *<pre>    *<code>    * channel -> xxxService.newStub(channel)    *</code>    *</pre>    * @param stubMaker a delegation to the actual {@code newStub} call.    * @param callable a delegation to the actual protobuf rpc call. See the comment of    *          {@link CoprocessorCallable} for more details.    * @param serverName the given region server    * @param<S> the type of the asynchronous stub    * @param<R> the type of the return value    * @return the return value of the protobuf rpc call, wrapped by a {@link CompletableFuture}.    * @see CoprocessorCallable    */
parameter_list|<
name|S
parameter_list|,
name|R
parameter_list|>
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|coprocessorService
parameter_list|(
name|Function
argument_list|<
name|RpcChannel
argument_list|,
name|S
argument_list|>
name|stubMaker
parameter_list|,
name|CoprocessorCallable
argument_list|<
name|S
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|,
name|ServerName
name|serverName
parameter_list|)
function_decl|;
comment|/**    * List all the dead region servers.    * @return - returns a list of dead region servers wrapped by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|listDeadServers
parameter_list|()
function_decl|;
comment|/**    * Clear dead region servers from master.    * @param servers list of dead region servers.    * @return - returns a list of servers that not cleared wrapped by a {@link CompletableFuture}.    */
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|clearDeadServers
parameter_list|(
specifier|final
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

