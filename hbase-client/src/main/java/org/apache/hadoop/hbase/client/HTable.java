begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|checkHasFamilies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|// DO NOT MAKE USE OF THESE IMPORTS! THEY ARE HERE FOR COPROCESSOR ENDPOINTS ONLY.
end_comment

begin_comment
comment|// Internally, we use shaded protobuf. This below are part of our public API.
end_comment

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_comment
comment|//SEE ABOVE NOTE!
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ResponseConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MultiRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|RegionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|CompareType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link Table}. Used to communicate with a single HBase table.  * Lightweight. Get as needed and just close when done.  * Instances of this class SHOULD NOT be constructed directly.  * Obtain an instance via {@link Connection}. See {@link ConnectionFactory}  * class comment for an example of how.  *  *<p>This class is thread safe since 2.0.0 if not invoking any of the setter methods.  * All setters are moved into {@link TableBuilder} and reserved here only for keeping  * backward compatibility, and TODO will be removed soon.  *  *<p>HTable is no longer a client API. Use {@link Table} instead. It is marked  * InterfaceAudience.Private indicating that this is an HBase-internal class as defined in  *<a href="https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/InterfaceClassification.html">Hadoop  * Interface Classification</a>  * There are no guarantees for backwards source / binary compatibility and methods or class can  * change or go away without deprecation.  *  * @see Table  * @see Admin  * @see Connection  * @see ConnectionFactory  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
class|class
name|HTable
implements|implements
name|Table
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Consistency
name|DEFAULT_CONSISTENCY
init|=
name|Consistency
operator|.
name|STRONG
decl_stmt|;
specifier|private
specifier|final
name|ClusterConnection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|configuration
decl_stmt|;
specifier|private
specifier|final
name|ConnectionConfiguration
name|connConfiguration
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|volatile
name|BufferedMutatorImpl
name|mutator
decl_stmt|;
specifier|private
specifier|final
name|Object
name|mutatorLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|int
name|scannerCaching
decl_stmt|;
specifier|private
specifier|final
name|long
name|scannerMaxResultSize
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|pool
decl_stmt|;
comment|// For Multi& Scan
specifier|private
name|int
name|operationTimeout
decl_stmt|;
comment|// global timeout for each blocking method with retrying rpc
specifier|private
specifier|final
name|int
name|rpcTimeout
decl_stmt|;
comment|// FIXME we should use this for rpc like batch and checkAndXXX
specifier|private
name|int
name|readRpcTimeout
decl_stmt|;
comment|// timeout for each read rpc request
specifier|private
name|int
name|writeRpcTimeout
decl_stmt|;
comment|// timeout for each write rpc request
specifier|private
specifier|final
name|boolean
name|cleanupPoolOnClose
decl_stmt|;
comment|// shutdown the pool in close()
specifier|private
specifier|final
name|HRegionLocator
name|locator
decl_stmt|;
specifier|private
specifier|final
name|long
name|writeBufferSize
decl_stmt|;
comment|/** The Async process for batch */
annotation|@
name|VisibleForTesting
name|AsyncProcess
name|multiAp
decl_stmt|;
specifier|private
specifier|final
name|RpcRetryingCallerFactory
name|rpcCallerFactory
decl_stmt|;
specifier|private
specifier|final
name|RpcControllerFactory
name|rpcControllerFactory
decl_stmt|;
comment|// Marked Private @since 1.0
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
name|ThreadPoolExecutor
name|getDefaultExecutor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|maxThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.htable.threads.max"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxThreads
operator|==
literal|0
condition|)
block|{
name|maxThreads
operator|=
literal|1
expr_stmt|;
comment|// is there a better default?
block|}
name|int
name|corePoolSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.htable.threads.coresize"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|long
name|keepAliveTime
init|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.htable.threads.keepalivetime"
argument_list|,
literal|60
argument_list|)
decl_stmt|;
comment|// Using the "direct handoff" approach, new threads will only be created
comment|// if it is necessary and will grow unbounded. This could be bad but in HCM
comment|// we only create as many Runnables as there are region servers. It means
comment|// it also scales when new region servers are added.
name|ThreadPoolExecutor
name|pool
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|corePoolSize
argument_list|,
name|maxThreads
argument_list|,
name|keepAliveTime
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<>
argument_list|()
argument_list|,
name|Threads
operator|.
name|newDaemonThreadFactory
argument_list|(
literal|"htable"
argument_list|)
argument_list|)
decl_stmt|;
name|pool
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|pool
return|;
block|}
comment|/**    * Creates an object to access a HBase table.    * Used by HBase internally.  DO NOT USE. See {@link ConnectionFactory} class comment for how to    * get a {@link Table} instance (use {@link Table} instead of {@link HTable}).    * @param connection Connection to be used.    * @param builder The table builder    * @param rpcCallerFactory The RPC caller factory    * @param rpcControllerFactory The RPC controller factory    * @param pool ExecutorService to be used.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|protected
name|HTable
parameter_list|(
specifier|final
name|ClusterConnection
name|connection
parameter_list|,
specifier|final
name|TableBuilderBase
name|builder
parameter_list|,
specifier|final
name|RpcRetryingCallerFactory
name|rpcCallerFactory
parameter_list|,
specifier|final
name|RpcControllerFactory
name|rpcControllerFactory
parameter_list|,
specifier|final
name|ExecutorService
name|pool
parameter_list|)
block|{
if|if
condition|(
name|connection
operator|==
literal|null
operator|||
name|connection
operator|.
name|isClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Connection is null or closed."
argument_list|)
throw|;
block|}
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|connection
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|connConfiguration
operator|=
name|connection
operator|.
name|getConnectionConfiguration
argument_list|()
expr_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|pool
operator|=
name|getDefaultExecutor
argument_list|(
name|this
operator|.
name|configuration
argument_list|)
expr_stmt|;
name|this
operator|.
name|cleanupPoolOnClose
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|cleanupPoolOnClose
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|rpcCallerFactory
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rpcCallerFactory
operator|=
name|connection
operator|.
name|getNewRpcRetryingCallerFactory
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|rpcCallerFactory
operator|=
name|rpcCallerFactory
expr_stmt|;
block|}
if|if
condition|(
name|rpcControllerFactory
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rpcControllerFactory
operator|=
name|RpcControllerFactory
operator|.
name|instantiate
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|rpcControllerFactory
operator|=
name|rpcControllerFactory
expr_stmt|;
block|}
name|this
operator|.
name|tableName
operator|=
name|builder
operator|.
name|tableName
expr_stmt|;
name|this
operator|.
name|operationTimeout
operator|=
name|builder
operator|.
name|operationTimeout
expr_stmt|;
name|this
operator|.
name|rpcTimeout
operator|=
name|builder
operator|.
name|rpcTimeout
expr_stmt|;
name|this
operator|.
name|readRpcTimeout
operator|=
name|builder
operator|.
name|readRpcTimeout
expr_stmt|;
name|this
operator|.
name|writeRpcTimeout
operator|=
name|builder
operator|.
name|writeRpcTimeout
expr_stmt|;
name|this
operator|.
name|writeBufferSize
operator|=
name|builder
operator|.
name|writeBufferSize
expr_stmt|;
name|this
operator|.
name|scannerCaching
operator|=
name|connConfiguration
operator|.
name|getScannerCaching
argument_list|()
expr_stmt|;
name|this
operator|.
name|scannerMaxResultSize
operator|=
name|connConfiguration
operator|.
name|getScannerMaxResultSize
argument_list|()
expr_stmt|;
comment|// puts need to track errors globally due to how the APIs currently work.
name|multiAp
operator|=
name|this
operator|.
name|connection
operator|.
name|getAsyncProcess
argument_list|()
expr_stmt|;
name|this
operator|.
name|locator
operator|=
operator|new
name|HRegionLocator
argument_list|(
name|tableName
argument_list|,
name|connection
argument_list|)
expr_stmt|;
block|}
comment|/**    * For internal testing. Uses Connection provided in {@code params}.    * @throws IOException    */
annotation|@
name|VisibleForTesting
specifier|protected
name|HTable
parameter_list|(
name|ClusterConnection
name|conn
parameter_list|,
name|BufferedMutatorImpl
name|mutator
parameter_list|)
throws|throws
name|IOException
block|{
name|connection
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|mutator
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|connection
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|connConfiguration
operator|=
name|connection
operator|.
name|getConnectionConfiguration
argument_list|()
expr_stmt|;
name|cleanupPoolOnClose
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|mutator
operator|=
name|mutator
expr_stmt|;
name|this
operator|.
name|operationTimeout
operator|=
name|connConfiguration
operator|.
name|getOperationTimeout
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcTimeout
operator|=
name|connConfiguration
operator|.
name|getRpcTimeout
argument_list|()
expr_stmt|;
name|this
operator|.
name|readRpcTimeout
operator|=
name|connConfiguration
operator|.
name|getReadRpcTimeout
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeRpcTimeout
operator|=
name|connConfiguration
operator|.
name|getWriteRpcTimeout
argument_list|()
expr_stmt|;
name|this
operator|.
name|scannerCaching
operator|=
name|connConfiguration
operator|.
name|getScannerCaching
argument_list|()
expr_stmt|;
name|this
operator|.
name|scannerMaxResultSize
operator|=
name|connConfiguration
operator|.
name|getScannerMaxResultSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeBufferSize
operator|=
name|connConfiguration
operator|.
name|getWriteBufferSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcControllerFactory
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rpcCallerFactory
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|mutator
operator|.
name|getPool
argument_list|()
expr_stmt|;
name|this
operator|.
name|locator
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * @return maxKeyValueSize from configuration.    */
specifier|public
specifier|static
name|int
name|getMaxKeyValueSize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|ConnectionConfiguration
operator|.
name|MAX_KEYVALUE_SIZE_KEY
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**    *<em>INTERNAL</em> Used by unit tests and tools to do low-level    * manipulations.    * @return A Connection instance.    */
annotation|@
name|VisibleForTesting
specifier|protected
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|this
operator|.
name|connection
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|HTableDescriptor
name|getTableDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
name|HBaseAdmin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|connection
argument_list|,
name|rpcCallerFactory
argument_list|,
name|rpcControllerFactory
argument_list|,
name|operationTimeout
argument_list|,
name|readRpcTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|htd
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ImmutableHTableDescriptor
argument_list|(
name|htd
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get the corresponding start keys and regions for an arbitrary range of    * keys.    *<p>    * @param startKey Starting row in range, inclusive    * @param endKey Ending row in range    * @param includeEndKey true if endRow is inclusive, false if exclusive    * @return A pair of list of start keys and list of HRegionLocations that    *         contain the specified range    * @throws IOException if a remote or network exception occurs    */
specifier|private
name|Pair
argument_list|<
name|List
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|,
name|List
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|>
name|getKeysAndRegionsInRange
parameter_list|(
specifier|final
name|byte
index|[]
name|startKey
parameter_list|,
specifier|final
name|byte
index|[]
name|endKey
parameter_list|,
specifier|final
name|boolean
name|includeEndKey
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getKeysAndRegionsInRange
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|includeEndKey
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Get the corresponding start keys and regions for an arbitrary range of    * keys.    *<p>    * @param startKey Starting row in range, inclusive    * @param endKey Ending row in range    * @param includeEndKey true if endRow is inclusive, false if exclusive    * @param reload true to reload information or false to use cached information    * @return A pair of list of start keys and list of HRegionLocations that    *         contain the specified range    * @throws IOException if a remote or network exception occurs    */
specifier|private
name|Pair
argument_list|<
name|List
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|,
name|List
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|>
name|getKeysAndRegionsInRange
parameter_list|(
specifier|final
name|byte
index|[]
name|startKey
parameter_list|,
specifier|final
name|byte
index|[]
name|endKey
parameter_list|,
specifier|final
name|boolean
name|includeEndKey
parameter_list|,
specifier|final
name|boolean
name|reload
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|endKeyIsEndOfTable
init|=
name|Bytes
operator|.
name|equals
argument_list|(
name|endKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|)
operator|>
literal|0
operator|)
operator|&&
operator|!
name|endKeyIsEndOfTable
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid range: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|startKey
argument_list|)
operator|+
literal|"> "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|endKey
argument_list|)
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|keysInRange
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regionsInRange
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|currentKey
init|=
name|startKey
decl_stmt|;
do|do
block|{
name|HRegionLocation
name|regionLocation
init|=
name|getRegionLocator
argument_list|()
operator|.
name|getRegionLocation
argument_list|(
name|currentKey
argument_list|,
name|reload
argument_list|)
decl_stmt|;
name|keysInRange
operator|.
name|add
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
name|regionsInRange
operator|.
name|add
argument_list|(
name|regionLocation
argument_list|)
expr_stmt|;
name|currentKey
operator|=
name|regionLocation
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|currentKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|&&
operator|(
name|endKeyIsEndOfTable
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|currentKey
argument_list|,
name|endKey
argument_list|)
operator|<
literal|0
operator|||
operator|(
name|includeEndKey
operator|&&
name|Bytes
operator|.
name|compareTo
argument_list|(
name|currentKey
argument_list|,
name|endKey
argument_list|)
operator|==
literal|0
operator|)
operator|)
condition|)
do|;
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|keysInRange
argument_list|,
name|regionsInRange
argument_list|)
return|;
block|}
comment|/**    * The underlying {@link HTable} must not be closed.    * {@link Table#getScanner(Scan)} has other usage details.    */
annotation|@
name|Override
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|scan
operator|.
name|getCaching
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|scan
operator|.
name|setCaching
argument_list|(
name|scannerCaching
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getMaxResultSize
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|scan
operator|.
name|setMaxResultSize
argument_list|(
name|scannerMaxResultSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getMvccReadPoint
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// it is not supposed to be set by user, clear
name|scan
operator|.
name|resetMvccReadPoint
argument_list|()
expr_stmt|;
block|}
name|Boolean
name|async
init|=
name|scan
operator|.
name|isAsyncPrefetch
argument_list|()
decl_stmt|;
if|if
condition|(
name|async
operator|==
literal|null
condition|)
block|{
name|async
operator|=
name|connConfiguration
operator|.
name|isClientScannerAsyncPrefetch
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|isReversed
argument_list|()
condition|)
block|{
return|return
operator|new
name|ReversedClientScanner
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|scan
argument_list|,
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|connection
argument_list|,
name|this
operator|.
name|rpcCallerFactory
argument_list|,
name|this
operator|.
name|rpcControllerFactory
argument_list|,
name|pool
argument_list|,
name|connConfiguration
operator|.
name|getReplicaCallTimeoutMicroSecondScan
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|async
condition|)
block|{
return|return
operator|new
name|ClientAsyncPrefetchScanner
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|scan
argument_list|,
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|connection
argument_list|,
name|this
operator|.
name|rpcCallerFactory
argument_list|,
name|this
operator|.
name|rpcControllerFactory
argument_list|,
name|pool
argument_list|,
name|connConfiguration
operator|.
name|getReplicaCallTimeoutMicroSecondScan
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ClientSimpleScanner
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|scan
argument_list|,
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|connection
argument_list|,
name|this
operator|.
name|rpcCallerFactory
argument_list|,
name|this
operator|.
name|rpcControllerFactory
argument_list|,
name|pool
argument_list|,
name|connConfiguration
operator|.
name|getReplicaCallTimeoutMicroSecondScan
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * The underlying {@link HTable} must not be closed.    * {@link Table#getScanner(byte[])} has other usage details.    */
annotation|@
name|Override
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
return|return
name|getScanner
argument_list|(
name|scan
argument_list|)
return|;
block|}
comment|/**    * The underlying {@link HTable} must not be closed.    * {@link Table#getScanner(byte[], byte[])} has other usage details.    */
annotation|@
name|Override
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
return|return
name|getScanner
argument_list|(
name|scan
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|Result
name|get
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|get
argument_list|(
name|get
argument_list|,
name|get
operator|.
name|isCheckExistenceOnly
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Result
name|get
parameter_list|(
name|Get
name|get
parameter_list|,
specifier|final
name|boolean
name|checkExistenceOnly
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if we are changing settings to the get, clone it.
if|if
condition|(
name|get
operator|.
name|isCheckExistenceOnly
argument_list|()
operator|!=
name|checkExistenceOnly
operator|||
name|get
operator|.
name|getConsistency
argument_list|()
operator|==
literal|null
condition|)
block|{
name|get
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|get
operator|.
name|getClass
argument_list|()
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|get
operator|.
name|setCheckExistenceOnly
argument_list|(
name|checkExistenceOnly
argument_list|)
expr_stmt|;
if|if
condition|(
name|get
operator|.
name|getConsistency
argument_list|()
operator|==
literal|null
condition|)
block|{
name|get
operator|.
name|setConsistency
argument_list|(
name|DEFAULT_CONSISTENCY
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|get
operator|.
name|getConsistency
argument_list|()
operator|==
name|Consistency
operator|.
name|STRONG
condition|)
block|{
specifier|final
name|Get
name|configuredGet
init|=
name|get
decl_stmt|;
name|ClientServiceCallable
argument_list|<
name|Result
argument_list|>
name|callable
init|=
operator|new
name|ClientServiceCallable
argument_list|<
name|Result
argument_list|>
argument_list|(
name|this
operator|.
name|connection
argument_list|,
name|getName
argument_list|()
argument_list|,
name|get
operator|.
name|getRow
argument_list|()
argument_list|,
name|this
operator|.
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Result
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientProtos
operator|.
name|GetRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetRequest
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|configuredGet
argument_list|)
decl_stmt|;
name|ClientProtos
operator|.
name|GetResponse
name|response
init|=
name|doGet
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|==
literal|null
condition|?
literal|null
else|:
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|response
operator|.
name|getResult
argument_list|()
argument_list|,
name|getRpcControllerCellScanner
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|rpcCallerFactory
operator|.
expr|<
name|Result
operator|>
name|newCaller
argument_list|(
name|readRpcTimeout
argument_list|)
operator|.
name|callWithRetries
argument_list|(
name|callable
argument_list|,
name|this
operator|.
name|operationTimeout
argument_list|)
return|;
block|}
comment|// Call that takes into account the replica
name|RpcRetryingCallerWithReadReplicas
name|callable
init|=
operator|new
name|RpcRetryingCallerWithReadReplicas
argument_list|(
name|rpcControllerFactory
argument_list|,
name|tableName
argument_list|,
name|this
operator|.
name|connection
argument_list|,
name|get
argument_list|,
name|pool
argument_list|,
name|connConfiguration
operator|.
name|getRetriesNumber
argument_list|()
argument_list|,
name|operationTimeout
argument_list|,
name|readRpcTimeout
argument_list|,
name|connConfiguration
operator|.
name|getPrimaryCallTimeoutMicroSecond
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|callable
operator|.
name|call
argument_list|(
name|operationTimeout
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|Result
index|[]
name|get
parameter_list|(
name|List
argument_list|<
name|Get
argument_list|>
name|gets
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|gets
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
operator|new
name|Result
index|[]
block|{
name|get
argument_list|(
name|gets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
block|}
return|;
block|}
try|try
block|{
name|Object
index|[]
name|r1
init|=
operator|new
name|Object
index|[
name|gets
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|batch
argument_list|(
operator|(
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
operator|)
name|gets
argument_list|,
name|r1
argument_list|,
name|readRpcTimeout
argument_list|)
expr_stmt|;
comment|// Translate.
name|Result
index|[]
name|results
init|=
operator|new
name|Result
index|[
name|r1
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|r1
control|)
block|{
comment|// Batch ensures if there is a failure we get an exception instead
name|results
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|Result
operator|)
name|obj
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|batch
parameter_list|(
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|actions
parameter_list|,
specifier|final
name|Object
index|[]
name|results
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|int
name|rpcTimeout
init|=
name|writeRpcTimeout
decl_stmt|;
name|boolean
name|hasRead
init|=
literal|false
decl_stmt|;
name|boolean
name|hasWrite
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Row
name|action
range|:
name|actions
control|)
block|{
if|if
condition|(
name|action
operator|instanceof
name|Mutation
condition|)
block|{
name|hasWrite
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|hasRead
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|hasRead
operator|&&
name|hasWrite
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|hasRead
operator|&&
operator|!
name|hasWrite
condition|)
block|{
name|rpcTimeout
operator|=
name|readRpcTimeout
expr_stmt|;
block|}
name|batch
argument_list|(
name|actions
argument_list|,
name|results
argument_list|,
name|rpcTimeout
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|batch
parameter_list|(
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|actions
parameter_list|,
specifier|final
name|Object
index|[]
name|results
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|AsyncProcessTask
name|task
init|=
name|AsyncProcessTask
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setRowAccess
argument_list|(
name|actions
argument_list|)
operator|.
name|setResults
argument_list|(
name|results
argument_list|)
operator|.
name|setRpcTimeout
argument_list|(
name|rpcTimeout
argument_list|)
operator|.
name|setOperationTimeout
argument_list|(
name|operationTimeout
argument_list|)
operator|.
name|setSubmittedRows
argument_list|(
name|AsyncProcessTask
operator|.
name|SubmittedRows
operator|.
name|ALL
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AsyncRequestFuture
name|ars
init|=
name|multiAp
operator|.
name|submit
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|ars
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
if|if
condition|(
name|ars
operator|.
name|hasError
argument_list|()
condition|)
block|{
throw|throw
name|ars
operator|.
name|getErrors
argument_list|()
throw|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
parameter_list|>
name|void
name|batchCallback
parameter_list|(
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|actions
parameter_list|,
specifier|final
name|Object
index|[]
name|results
parameter_list|,
specifier|final
name|Batch
operator|.
name|Callback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|doBatchWithCallback
argument_list|(
name|actions
argument_list|,
name|results
argument_list|,
name|callback
argument_list|,
name|connection
argument_list|,
name|pool
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
parameter_list|<
name|R
parameter_list|>
name|void
name|doBatchWithCallback
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|actions
parameter_list|,
name|Object
index|[]
name|results
parameter_list|,
name|Callback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|,
name|ClusterConnection
name|connection
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|InterruptedIOException
throws|,
name|RetriesExhaustedWithDetailsException
block|{
name|int
name|operationTimeout
init|=
name|connection
operator|.
name|getConnectionConfiguration
argument_list|()
operator|.
name|getOperationTimeout
argument_list|()
decl_stmt|;
name|int
name|writeTimeout
init|=
name|connection
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_WRITE_TIMEOUT_KEY
argument_list|,
name|connection
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_RPC_TIMEOUT
argument_list|)
argument_list|)
decl_stmt|;
name|AsyncProcessTask
argument_list|<
name|R
argument_list|>
name|task
init|=
name|AsyncProcessTask
operator|.
name|newBuilder
argument_list|(
name|callback
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setRowAccess
argument_list|(
name|actions
argument_list|)
operator|.
name|setResults
argument_list|(
name|results
argument_list|)
operator|.
name|setOperationTimeout
argument_list|(
name|operationTimeout
argument_list|)
operator|.
name|setRpcTimeout
argument_list|(
name|writeTimeout
argument_list|)
operator|.
name|setSubmittedRows
argument_list|(
name|AsyncProcessTask
operator|.
name|SubmittedRows
operator|.
name|ALL
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AsyncRequestFuture
name|ars
init|=
name|connection
operator|.
name|getAsyncProcess
argument_list|()
operator|.
name|submit
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|ars
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
if|if
condition|(
name|ars
operator|.
name|hasError
argument_list|()
condition|)
block|{
throw|throw
name|ars
operator|.
name|getErrors
argument_list|()
throw|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
specifier|final
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
name|CancellableRegionServerCallable
argument_list|<
name|SingleResponse
argument_list|>
name|callable
init|=
operator|new
name|CancellableRegionServerCallable
argument_list|<
name|SingleResponse
argument_list|>
argument_list|(
name|connection
argument_list|,
name|getName
argument_list|()
argument_list|,
name|delete
operator|.
name|getRow
argument_list|()
argument_list|,
name|this
operator|.
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|,
name|writeRpcTimeout
argument_list|,
operator|new
name|RetryingTimeTracker
argument_list|()
operator|.
name|start
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|SingleResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|MutateRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildMutateRequest
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|delete
argument_list|)
decl_stmt|;
name|MutateResponse
name|response
init|=
name|doMutate
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|ResponseConverter
operator|.
name|getResult
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|getRpcControllerCellScanner
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Delete
argument_list|>
name|rows
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|delete
argument_list|)
decl_stmt|;
name|AsyncProcessTask
name|task
init|=
name|AsyncProcessTask
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setRowAccess
argument_list|(
name|rows
argument_list|)
operator|.
name|setCallable
argument_list|(
name|callable
argument_list|)
operator|.
name|setRpcTimeout
argument_list|(
name|writeRpcTimeout
argument_list|)
operator|.
name|setOperationTimeout
argument_list|(
name|operationTimeout
argument_list|)
operator|.
name|setSubmittedRows
argument_list|(
name|AsyncProcessTask
operator|.
name|SubmittedRows
operator|.
name|ALL
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AsyncRequestFuture
name|ars
init|=
name|multiAp
operator|.
name|submit
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|ars
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
if|if
condition|(
name|ars
operator|.
name|hasError
argument_list|()
condition|)
block|{
throw|throw
name|ars
operator|.
name|getErrors
argument_list|()
throw|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
specifier|final
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
name|deletes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
try|try
block|{
name|batch
argument_list|(
name|deletes
argument_list|,
name|results
argument_list|,
name|writeRpcTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// mutate list so that it is empty for complete success, or contains only failed records
comment|// results are returned in the same order as the requests in list walk the list backwards,
comment|// so we can remove from list without impacting the indexes of earlier members
for|for
control|(
name|int
name|i
init|=
name|results
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
comment|// if result is not null, it succeeded
if|if
condition|(
name|results
index|[
name|i
index|]
operator|instanceof
name|Result
condition|)
block|{
name|deletes
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * {@inheritDoc}    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
specifier|final
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
name|getBufferedMutator
argument_list|()
operator|.
name|mutate
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|flushCommits
argument_list|()
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
specifier|final
name|List
argument_list|<
name|Put
argument_list|>
name|puts
parameter_list|)
throws|throws
name|IOException
block|{
name|getBufferedMutator
argument_list|()
operator|.
name|mutate
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|flushCommits
argument_list|()
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|mutateRow
parameter_list|(
specifier|final
name|RowMutations
name|rm
parameter_list|)
throws|throws
name|IOException
block|{
name|CancellableRegionServerCallable
argument_list|<
name|MultiResponse
argument_list|>
name|callable
init|=
operator|new
name|CancellableRegionServerCallable
argument_list|<
name|MultiResponse
argument_list|>
argument_list|(
name|this
operator|.
name|connection
argument_list|,
name|getName
argument_list|()
argument_list|,
name|rm
operator|.
name|getRow
argument_list|()
argument_list|,
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|,
name|writeRpcTimeout
argument_list|,
operator|new
name|RetryingTimeTracker
argument_list|()
operator|.
name|start
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|MultiResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|RegionAction
operator|.
name|Builder
name|regionMutationBuilder
init|=
name|RequestConverter
operator|.
name|buildRegionAction
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|rm
argument_list|)
decl_stmt|;
name|regionMutationBuilder
operator|.
name|setAtomic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MultiRequest
name|request
init|=
name|MultiRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|addRegionAction
argument_list|(
name|regionMutationBuilder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|MultiResponse
name|response
init|=
name|doMulti
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|ClientProtos
operator|.
name|RegionActionResult
name|res
init|=
name|response
operator|.
name|getRegionActionResultList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|hasException
argument_list|()
condition|)
block|{
name|Throwable
name|ex
init|=
name|ProtobufUtil
operator|.
name|toException
argument_list|(
name|res
operator|.
name|getException
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|ex
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to mutate row: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|rm
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
return|return
name|ResponseConverter
operator|.
name|getResults
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|getRpcControllerCellScanner
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|AsyncProcessTask
name|task
init|=
name|AsyncProcessTask
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setRowAccess
argument_list|(
name|rm
operator|.
name|getMutations
argument_list|()
argument_list|)
operator|.
name|setCallable
argument_list|(
name|callable
argument_list|)
operator|.
name|setRpcTimeout
argument_list|(
name|writeRpcTimeout
argument_list|)
operator|.
name|setOperationTimeout
argument_list|(
name|operationTimeout
argument_list|)
operator|.
name|setSubmittedRows
argument_list|(
name|AsyncProcessTask
operator|.
name|SubmittedRows
operator|.
name|ALL
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AsyncRequestFuture
name|ars
init|=
name|multiAp
operator|.
name|submit
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|ars
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
if|if
condition|(
name|ars
operator|.
name|hasError
argument_list|()
condition|)
block|{
throw|throw
name|ars
operator|.
name|getErrors
argument_list|()
throw|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|Result
name|append
parameter_list|(
specifier|final
name|Append
name|append
parameter_list|)
throws|throws
name|IOException
block|{
name|checkHasFamilies
argument_list|(
name|append
argument_list|)
expr_stmt|;
name|NoncedRegionServerCallable
argument_list|<
name|Result
argument_list|>
name|callable
init|=
operator|new
name|NoncedRegionServerCallable
argument_list|<
name|Result
argument_list|>
argument_list|(
name|this
operator|.
name|connection
argument_list|,
name|getName
argument_list|()
argument_list|,
name|append
operator|.
name|getRow
argument_list|()
argument_list|,
name|this
operator|.
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Result
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|MutateRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildMutateRequest
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|append
argument_list|,
name|getNonceGroup
argument_list|()
argument_list|,
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
name|MutateResponse
name|response
init|=
name|doMutate
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|hasResult
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|response
operator|.
name|getResult
argument_list|()
argument_list|,
name|getRpcControllerCellScanner
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|rpcCallerFactory
operator|.
expr|<
name|Result
operator|>
name|newCaller
argument_list|(
name|this
operator|.
name|writeRpcTimeout
argument_list|)
operator|.
name|callWithRetries
argument_list|(
name|callable
argument_list|,
name|this
operator|.
name|operationTimeout
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|Result
name|increment
parameter_list|(
specifier|final
name|Increment
name|increment
parameter_list|)
throws|throws
name|IOException
block|{
name|checkHasFamilies
argument_list|(
name|increment
argument_list|)
expr_stmt|;
name|NoncedRegionServerCallable
argument_list|<
name|Result
argument_list|>
name|callable
init|=
operator|new
name|NoncedRegionServerCallable
argument_list|<
name|Result
argument_list|>
argument_list|(
name|this
operator|.
name|connection
argument_list|,
name|getName
argument_list|()
argument_list|,
name|increment
operator|.
name|getRow
argument_list|()
argument_list|,
name|this
operator|.
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Result
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|MutateRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildMutateRequest
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|increment
argument_list|,
name|getNonceGroup
argument_list|()
argument_list|,
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
name|MutateResponse
name|response
init|=
name|doMutate
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// Should this check for null like append does?
return|return
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|response
operator|.
name|getResult
argument_list|()
argument_list|,
name|getRpcControllerCellScanner
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|rpcCallerFactory
operator|.
expr|<
name|Result
operator|>
name|newCaller
argument_list|(
name|writeRpcTimeout
argument_list|)
operator|.
name|callWithRetries
argument_list|(
name|callable
argument_list|,
name|this
operator|.
name|operationTimeout
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|long
name|incrementColumnValue
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|long
name|amount
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|amount
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|long
name|incrementColumnValue
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|long
name|amount
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|NullPointerException
name|npe
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
name|npe
operator|=
operator|new
name|NullPointerException
argument_list|(
literal|"row is null"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|family
operator|==
literal|null
condition|)
block|{
name|npe
operator|=
operator|new
name|NullPointerException
argument_list|(
literal|"family is null"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|npe
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid arguments to incrementColumnValue"
argument_list|,
name|npe
argument_list|)
throw|;
block|}
name|NoncedRegionServerCallable
argument_list|<
name|Long
argument_list|>
name|callable
init|=
operator|new
name|NoncedRegionServerCallable
argument_list|<
name|Long
argument_list|>
argument_list|(
name|this
operator|.
name|connection
argument_list|,
name|getName
argument_list|()
argument_list|,
name|row
argument_list|,
name|this
operator|.
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Long
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|MutateRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildIncrementRequest
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|amount
argument_list|,
name|durability
argument_list|,
name|getNonceGroup
argument_list|()
argument_list|,
name|getNonce
argument_list|()
argument_list|)
decl_stmt|;
name|MutateResponse
name|response
init|=
name|doMutate
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|response
operator|.
name|getResult
argument_list|()
argument_list|,
name|getRpcControllerCellScanner
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|rpcCallerFactory
operator|.
expr|<
name|Long
operator|>
name|newCaller
argument_list|(
name|this
operator|.
name|writeRpcTimeout
argument_list|)
operator|.
name|callWithRetries
argument_list|(
name|callable
argument_list|,
name|this
operator|.
name|operationTimeout
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndPut
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientServiceCallable
argument_list|<
name|Boolean
argument_list|>
name|callable
init|=
operator|new
name|ClientServiceCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|this
operator|.
name|connection
argument_list|,
name|getName
argument_list|()
argument_list|,
name|row
argument_list|,
name|this
operator|.
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|MutateRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildMutateRequest
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|value
argument_list|)
argument_list|,
name|CompareType
operator|.
name|EQUAL
argument_list|,
name|put
argument_list|)
decl_stmt|;
name|MutateResponse
name|response
init|=
name|doMutate
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|response
operator|.
name|getProcessed
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|rpcCallerFactory
operator|.
expr|<
name|Boolean
operator|>
name|newCaller
argument_list|(
name|this
operator|.
name|writeRpcTimeout
argument_list|)
operator|.
name|callWithRetries
argument_list|(
name|callable
argument_list|,
name|this
operator|.
name|operationTimeout
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndPut
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareOp
name|compareOp
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientServiceCallable
argument_list|<
name|Boolean
argument_list|>
name|callable
init|=
operator|new
name|ClientServiceCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|this
operator|.
name|connection
argument_list|,
name|getName
argument_list|()
argument_list|,
name|row
argument_list|,
name|this
operator|.
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|CompareType
name|compareType
init|=
name|CompareType
operator|.
name|valueOf
argument_list|(
name|compareOp
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|MutateRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildMutateRequest
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|value
argument_list|)
argument_list|,
name|compareType
argument_list|,
name|put
argument_list|)
decl_stmt|;
name|MutateResponse
name|response
init|=
name|doMutate
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|response
operator|.
name|getProcessed
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|rpcCallerFactory
operator|.
expr|<
name|Boolean
operator|>
name|newCaller
argument_list|(
name|this
operator|.
name|writeRpcTimeout
argument_list|)
operator|.
name|callWithRetries
argument_list|(
name|callable
argument_list|,
name|this
operator|.
name|operationTimeout
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndDelete
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|checkAndDelete
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|value
argument_list|,
name|delete
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndDelete
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareOp
name|compareOp
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
name|CancellableRegionServerCallable
argument_list|<
name|SingleResponse
argument_list|>
name|callable
init|=
operator|new
name|CancellableRegionServerCallable
argument_list|<
name|SingleResponse
argument_list|>
argument_list|(
name|this
operator|.
name|connection
argument_list|,
name|getName
argument_list|()
argument_list|,
name|row
argument_list|,
name|this
operator|.
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|,
name|writeRpcTimeout
argument_list|,
operator|new
name|RetryingTimeTracker
argument_list|()
operator|.
name|start
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|SingleResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|CompareType
name|compareType
init|=
name|CompareType
operator|.
name|valueOf
argument_list|(
name|compareOp
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|MutateRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildMutateRequest
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|value
argument_list|)
argument_list|,
name|compareType
argument_list|,
name|delete
argument_list|)
decl_stmt|;
name|MutateResponse
name|response
init|=
name|doMutate
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|ResponseConverter
operator|.
name|getResult
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|getRpcControllerCellScanner
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Delete
argument_list|>
name|rows
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|delete
argument_list|)
decl_stmt|;
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
literal|1
index|]
decl_stmt|;
name|AsyncProcessTask
name|task
init|=
name|AsyncProcessTask
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setRowAccess
argument_list|(
name|rows
argument_list|)
operator|.
name|setCallable
argument_list|(
name|callable
argument_list|)
comment|// TODO any better timeout?
operator|.
name|setRpcTimeout
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|readRpcTimeout
argument_list|,
name|writeRpcTimeout
argument_list|)
argument_list|)
operator|.
name|setOperationTimeout
argument_list|(
name|operationTimeout
argument_list|)
operator|.
name|setSubmittedRows
argument_list|(
name|AsyncProcessTask
operator|.
name|SubmittedRows
operator|.
name|ALL
argument_list|)
operator|.
name|setResults
argument_list|(
name|results
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AsyncRequestFuture
name|ars
init|=
name|multiAp
operator|.
name|submit
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|ars
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
if|if
condition|(
name|ars
operator|.
name|hasError
argument_list|()
condition|)
block|{
throw|throw
name|ars
operator|.
name|getErrors
argument_list|()
throw|;
block|}
return|return
operator|(
operator|(
name|SingleResponse
operator|.
name|Entry
operator|)
name|results
index|[
literal|0
index|]
operator|)
operator|.
name|isProcessed
argument_list|()
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
name|checkAndMutate
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|CompareOp
name|compareOp
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|,
specifier|final
name|RowMutations
name|rm
parameter_list|)
throws|throws
name|IOException
block|{
name|CancellableRegionServerCallable
argument_list|<
name|MultiResponse
argument_list|>
name|callable
init|=
operator|new
name|CancellableRegionServerCallable
argument_list|<
name|MultiResponse
argument_list|>
argument_list|(
name|connection
argument_list|,
name|getName
argument_list|()
argument_list|,
name|rm
operator|.
name|getRow
argument_list|()
argument_list|,
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|,
name|writeRpcTimeout
argument_list|,
operator|new
name|RetryingTimeTracker
argument_list|()
operator|.
name|start
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|MultiResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|CompareType
name|compareType
init|=
name|CompareType
operator|.
name|valueOf
argument_list|(
name|compareOp
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|MultiRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildMutateRequest
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|value
argument_list|)
argument_list|,
name|compareType
argument_list|,
name|rm
argument_list|)
decl_stmt|;
name|ClientProtos
operator|.
name|MultiResponse
name|response
init|=
name|doMulti
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|ClientProtos
operator|.
name|RegionActionResult
name|res
init|=
name|response
operator|.
name|getRegionActionResultList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|hasException
argument_list|()
condition|)
block|{
name|Throwable
name|ex
init|=
name|ProtobufUtil
operator|.
name|toException
argument_list|(
name|res
operator|.
name|getException
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|ex
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to checkAndMutate row: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|rm
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
return|return
name|ResponseConverter
operator|.
name|getResults
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|getRpcControllerCellScanner
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**      *  Currently, we use one array to store 'processed' flag which is returned by server.      *  It is excessive to send such a large array, but that is required by the framework right now      * */
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
name|rm
operator|.
name|getMutations
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|AsyncProcessTask
name|task
init|=
name|AsyncProcessTask
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setRowAccess
argument_list|(
name|rm
operator|.
name|getMutations
argument_list|()
argument_list|)
operator|.
name|setResults
argument_list|(
name|results
argument_list|)
operator|.
name|setCallable
argument_list|(
name|callable
argument_list|)
comment|// TODO any better timeout?
operator|.
name|setRpcTimeout
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|readRpcTimeout
argument_list|,
name|writeRpcTimeout
argument_list|)
argument_list|)
operator|.
name|setOperationTimeout
argument_list|(
name|operationTimeout
argument_list|)
operator|.
name|setSubmittedRows
argument_list|(
name|AsyncProcessTask
operator|.
name|SubmittedRows
operator|.
name|ALL
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AsyncRequestFuture
name|ars
init|=
name|multiAp
operator|.
name|submit
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|ars
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
if|if
condition|(
name|ars
operator|.
name|hasError
argument_list|()
condition|)
block|{
throw|throw
name|ars
operator|.
name|getErrors
argument_list|()
throw|;
block|}
return|return
operator|(
operator|(
name|Result
operator|)
name|results
index|[
literal|0
index|]
operator|)
operator|.
name|getExists
argument_list|()
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
name|Result
name|r
init|=
name|get
argument_list|(
name|get
argument_list|,
literal|true
argument_list|)
decl_stmt|;
assert|assert
name|r
operator|.
name|getExists
argument_list|()
operator|!=
literal|null
assert|;
return|return
name|r
operator|.
name|getExists
argument_list|()
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|boolean
index|[]
name|existsAll
parameter_list|(
specifier|final
name|List
argument_list|<
name|Get
argument_list|>
name|gets
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|gets
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|boolean
index|[]
block|{}
return|;
if|if
condition|(
name|gets
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
return|return
operator|new
name|boolean
index|[]
block|{
name|exists
argument_list|(
name|gets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
block|}
return|;
name|ArrayList
argument_list|<
name|Get
argument_list|>
name|exists
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|gets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Get
name|g
range|:
name|gets
control|)
block|{
name|Get
name|ge
init|=
operator|new
name|Get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|ge
operator|.
name|setCheckExistenceOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|exists
operator|.
name|add
argument_list|(
name|ge
argument_list|)
expr_stmt|;
block|}
name|Object
index|[]
name|r1
init|=
operator|new
name|Object
index|[
name|exists
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
try|try
block|{
name|batch
argument_list|(
name|exists
argument_list|,
name|r1
argument_list|,
name|readRpcTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// translate.
name|boolean
index|[]
name|results
init|=
operator|new
name|boolean
index|[
name|r1
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|r1
control|)
block|{
comment|// batch ensures if there is a failure we get an exception instead
name|results
index|[
name|i
operator|++
index|]
operator|=
operator|(
operator|(
name|Result
operator|)
name|o
operator|)
operator|.
name|getExists
argument_list|()
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**    * @throws IOException    */
name|void
name|flushCommits
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|mutator
operator|==
literal|null
condition|)
block|{
comment|// nothing to flush if there's no mutator; don't bother creating one.
return|return;
block|}
name|getBufferedMutator
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**    * Process a mixed batch of Get, Put and Delete actions. All actions for a    * RegionServer are forwarded in one RPC call. Queries are executed in parallel.    *    * @param list The collection of actions.    * @param results An empty array, same size as list. If an exception is thrown,    *   you can test here for partial results, and to determine which actions    *   processed successfully.    * @throws IOException if there are problems talking to META. Per-item    *   exceptions are stored in the results array.    */
specifier|public
parameter_list|<
name|R
parameter_list|>
name|void
name|processBatchCallback
parameter_list|(
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|list
parameter_list|,
specifier|final
name|Object
index|[]
name|results
parameter_list|,
specifier|final
name|Batch
operator|.
name|Callback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|batchCallback
argument_list|(
name|list
argument_list|,
name|results
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
return|return;
block|}
name|flushCommits
argument_list|()
expr_stmt|;
if|if
condition|(
name|mutator
operator|!=
literal|null
condition|)
block|{
name|mutator
operator|.
name|close
argument_list|()
expr_stmt|;
name|mutator
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cleanupPoolOnClose
condition|)
block|{
name|this
operator|.
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|terminated
init|=
literal|false
decl_stmt|;
do|do
block|{
comment|// wait until the pool has terminated
name|terminated
operator|=
name|this
operator|.
name|pool
operator|.
name|awaitTermination
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|terminated
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|this
operator|.
name|pool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"waitForTermination interrupted"
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
block|}
comment|// validate for well-formedness
specifier|public
name|void
name|validatePut
parameter_list|(
specifier|final
name|Put
name|put
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|validatePut
argument_list|(
name|put
argument_list|,
name|connConfiguration
operator|.
name|getMaxKeyValueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// validate for well-formedness
specifier|public
specifier|static
name|void
name|validatePut
parameter_list|(
name|Put
name|put
parameter_list|,
name|int
name|maxKeyValueSize
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|put
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No columns to insert"
argument_list|)
throw|;
block|}
if|if
condition|(
name|maxKeyValueSize
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|Cell
argument_list|>
name|list
range|:
name|put
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|list
control|)
block|{
if|if
condition|(
name|KeyValueUtil
operator|.
name|length
argument_list|(
name|cell
argument_list|)
operator|>
name|maxKeyValueSize
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"KeyValue size too large"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Returns the maximum size in bytes of the write buffer for this HTable.    *<p>    * The default value comes from the configuration parameter    * {@code hbase.client.write.buffer}.    * @return The size of the write buffer in bytes.    */
annotation|@
name|Override
specifier|public
name|long
name|getWriteBufferSize
parameter_list|()
block|{
if|if
condition|(
name|mutator
operator|==
literal|null
condition|)
block|{
return|return
name|connConfiguration
operator|.
name|getWriteBufferSize
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|mutator
operator|.
name|getWriteBufferSize
argument_list|()
return|;
block|}
block|}
comment|/**    * Sets the size of the buffer in bytes.    *<p>    * If the new size is less than the current amount of data in the    * write buffer, the buffer gets flushed.    * @param writeBufferSize The new write buffer size, in bytes.    * @throws IOException if a remote or network exception occurs.    */
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|setWriteBufferSize
parameter_list|(
name|long
name|writeBufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|getBufferedMutator
argument_list|()
expr_stmt|;
name|mutator
operator|.
name|setWriteBufferSize
argument_list|(
name|writeBufferSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * The pool is used for mutli requests for this HTable    * @return the pool used for mutli    */
name|ExecutorService
name|getPool
parameter_list|()
block|{
return|return
name|this
operator|.
name|pool
return|;
block|}
comment|/**    * Explicitly clears the region cache to fetch the latest value from META.    * This is a power user function: avoid unless you know the ramifications.    */
specifier|public
name|void
name|clearRegionCache
parameter_list|()
block|{
name|this
operator|.
name|connection
operator|.
name|clearRegionCache
argument_list|()
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|CoprocessorRpcChannel
name|coprocessorService
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
operator|new
name|RegionCoprocessorRpcChannel
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Service
parameter_list|,
name|R
parameter_list|>
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|R
argument_list|>
name|coprocessorService
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|service
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
specifier|final
name|Batch
operator|.
name|Call
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|Throwable
block|{
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|R
argument_list|>
name|results
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|R
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
name|coprocessorService
argument_list|(
name|service
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|callable
argument_list|,
operator|new
name|Batch
operator|.
name|Callback
argument_list|<
name|R
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|R
name|value
parameter_list|)
block|{
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Service
parameter_list|,
name|R
parameter_list|>
name|void
name|coprocessorService
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|service
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
specifier|final
name|Batch
operator|.
name|Call
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|,
specifier|final
name|Batch
operator|.
name|Callback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|Throwable
block|{
comment|// get regions covered by the row range
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|keys
init|=
name|getStartKeysInRange
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Future
argument_list|<
name|R
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|byte
index|[]
name|r
range|:
name|keys
control|)
block|{
specifier|final
name|RegionCoprocessorRpcChannel
name|channel
init|=
operator|new
name|RegionCoprocessorRpcChannel
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|R
argument_list|>
name|future
init|=
name|pool
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|R
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|R
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|T
name|instance
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
operator|.
name|newServiceStub
argument_list|(
name|service
argument_list|,
name|channel
argument_list|)
decl_stmt|;
name|R
name|result
init|=
name|callable
operator|.
name|call
argument_list|(
name|instance
argument_list|)
decl_stmt|;
name|byte
index|[]
name|region
init|=
name|channel
operator|.
name|getLastRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|update
argument_list|(
name|region
argument_list|,
name|r
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|futures
operator|.
name|put
argument_list|(
name|r
argument_list|,
name|future
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Future
argument_list|<
name|R
argument_list|>
argument_list|>
name|e
range|:
name|futures
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error calling coprocessor service "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" for row "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|ee
argument_list|)
expr_stmt|;
throw|throw
name|ee
operator|.
name|getCause
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Interrupted calling coprocessor service "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" for row "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getStartKeysInRange
parameter_list|(
name|byte
index|[]
name|start
parameter_list|,
name|byte
index|[]
name|end
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|start
operator|==
literal|null
condition|)
block|{
name|start
operator|=
name|HConstants
operator|.
name|EMPTY_START_ROW
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|==
literal|null
condition|)
block|{
name|end
operator|=
name|HConstants
operator|.
name|EMPTY_END_ROW
expr_stmt|;
block|}
return|return
name|getKeysAndRegionsInRange
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
literal|true
argument_list|)
operator|.
name|getFirst
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|setOperationTimeout
parameter_list|(
name|int
name|operationTimeout
parameter_list|)
block|{
name|this
operator|.
name|operationTimeout
operator|=
name|operationTimeout
expr_stmt|;
if|if
condition|(
name|mutator
operator|!=
literal|null
condition|)
block|{
name|mutator
operator|.
name|setOperationTimeout
argument_list|(
name|operationTimeout
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getOperationTimeout
parameter_list|()
block|{
return|return
name|operationTimeout
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|int
name|getRpcTimeout
parameter_list|()
block|{
return|return
name|rpcTimeout
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|setRpcTimeout
parameter_list|(
name|int
name|rpcTimeout
parameter_list|)
block|{
name|setReadRpcTimeout
argument_list|(
name|rpcTimeout
argument_list|)
expr_stmt|;
name|setWriteRpcTimeout
argument_list|(
name|rpcTimeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getWriteRpcTimeout
parameter_list|()
block|{
return|return
name|writeRpcTimeout
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|setWriteRpcTimeout
parameter_list|(
name|int
name|writeRpcTimeout
parameter_list|)
block|{
name|this
operator|.
name|writeRpcTimeout
operator|=
name|writeRpcTimeout
expr_stmt|;
if|if
condition|(
name|mutator
operator|!=
literal|null
condition|)
block|{
name|mutator
operator|.
name|setRpcTimeout
argument_list|(
name|writeRpcTimeout
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getReadRpcTimeout
parameter_list|()
block|{
return|return
name|readRpcTimeout
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|setReadRpcTimeout
parameter_list|(
name|int
name|readRpcTimeout
parameter_list|)
block|{
name|this
operator|.
name|readRpcTimeout
operator|=
name|readRpcTimeout
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|tableName
operator|+
literal|";"
operator|+
name|connection
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
extends|extends
name|Message
parameter_list|>
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|R
argument_list|>
name|batchCoprocessorService
parameter_list|(
name|Descriptors
operator|.
name|MethodDescriptor
name|methodDescriptor
parameter_list|,
name|Message
name|request
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|R
name|responsePrototype
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|Throwable
block|{
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|R
argument_list|>
name|results
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|R
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
name|batchCoprocessorService
argument_list|(
name|methodDescriptor
argument_list|,
name|request
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|responsePrototype
argument_list|,
operator|new
name|Callback
argument_list|<
name|R
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|R
name|result
parameter_list|)
block|{
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
extends|extends
name|Message
parameter_list|>
name|void
name|batchCoprocessorService
parameter_list|(
specifier|final
name|Descriptors
operator|.
name|MethodDescriptor
name|methodDescriptor
parameter_list|,
specifier|final
name|Message
name|request
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
specifier|final
name|R
name|responsePrototype
parameter_list|,
specifier|final
name|Callback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|Throwable
block|{
if|if
condition|(
name|startKey
operator|==
literal|null
condition|)
block|{
name|startKey
operator|=
name|HConstants
operator|.
name|EMPTY_START_ROW
expr_stmt|;
block|}
if|if
condition|(
name|endKey
operator|==
literal|null
condition|)
block|{
name|endKey
operator|=
name|HConstants
operator|.
name|EMPTY_END_ROW
expr_stmt|;
block|}
comment|// get regions covered by the row range
name|Pair
argument_list|<
name|List
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|,
name|List
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|>
name|keysAndRegions
init|=
name|getKeysAndRegionsInRange
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|keys
init|=
name|keysAndRegions
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
name|keysAndRegions
operator|.
name|getSecond
argument_list|()
decl_stmt|;
comment|// check if we have any calls to make
if|if
condition|(
name|keys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No regions were selected by key range start="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|startKey
argument_list|)
operator|+
literal|", end="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|endKey
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|RegionCoprocessorServiceExec
argument_list|>
name|execs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionCoprocessorServiceExec
argument_list|>
name|execsByRow
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|byte
index|[]
name|rowKey
init|=
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|region
init|=
name|regions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|RegionCoprocessorServiceExec
name|exec
init|=
operator|new
name|RegionCoprocessorServiceExec
argument_list|(
name|region
argument_list|,
name|rowKey
argument_list|,
name|methodDescriptor
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|execs
operator|.
name|add
argument_list|(
name|exec
argument_list|)
expr_stmt|;
name|execsByRow
operator|.
name|put
argument_list|(
name|rowKey
argument_list|,
name|exec
argument_list|)
expr_stmt|;
block|}
comment|// tracking for any possible deserialization errors on success callback
comment|// TODO: it would be better to be able to reuse AsyncProcess.BatchErrors here
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|callbackErrorExceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Row
argument_list|>
name|callbackErrorActions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|callbackErrorServers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
name|execs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|AsyncProcess
name|asyncProcess
init|=
operator|new
name|AsyncProcess
argument_list|(
name|connection
argument_list|,
name|configuration
argument_list|,
name|RpcRetryingCallerFactory
operator|.
name|instantiate
argument_list|(
name|configuration
argument_list|,
name|connection
operator|.
name|getStatisticsTracker
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
name|RpcControllerFactory
operator|.
name|instantiate
argument_list|(
name|configuration
argument_list|)
argument_list|)
decl_stmt|;
name|Callback
argument_list|<
name|ClientProtos
operator|.
name|CoprocessorServiceResult
argument_list|>
name|resultsCallback
init|=
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|ClientProtos
operator|.
name|CoprocessorServiceResult
name|serviceResult
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Received result for endpoint "
operator|+
name|methodDescriptor
operator|.
name|getFullName
argument_list|()
operator|+
literal|": region="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|region
argument_list|)
operator|+
literal|", row="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
operator|+
literal|", value="
operator|+
name|serviceResult
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Message
operator|.
name|Builder
name|builder
init|=
name|responsePrototype
operator|.
name|newBuilderForType
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|serviceResult
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|callback
operator|.
name|update
argument_list|(
name|region
argument_list|,
name|row
argument_list|,
operator|(
name|R
operator|)
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected response type from endpoint "
operator|+
name|methodDescriptor
operator|.
name|getFullName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|callbackErrorExceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|callbackErrorActions
operator|.
name|add
argument_list|(
name|execsByRow
operator|.
name|get
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|callbackErrorServers
operator|.
name|add
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|AsyncProcessTask
argument_list|<
name|ClientProtos
operator|.
name|CoprocessorServiceResult
argument_list|>
name|task
init|=
name|AsyncProcessTask
operator|.
name|newBuilder
argument_list|(
name|resultsCallback
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setRowAccess
argument_list|(
name|execs
argument_list|)
operator|.
name|setResults
argument_list|(
name|results
argument_list|)
operator|.
name|setRpcTimeout
argument_list|(
name|readRpcTimeout
argument_list|)
operator|.
name|setOperationTimeout
argument_list|(
name|operationTimeout
argument_list|)
operator|.
name|setSubmittedRows
argument_list|(
name|AsyncProcessTask
operator|.
name|SubmittedRows
operator|.
name|ALL
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AsyncRequestFuture
name|future
init|=
name|asyncProcess
operator|.
name|submit
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|future
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
if|if
condition|(
name|future
operator|.
name|hasError
argument_list|()
condition|)
block|{
throw|throw
name|future
operator|.
name|getErrors
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|callbackErrorExceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RetriesExhaustedWithDetailsException
argument_list|(
name|callbackErrorExceptions
argument_list|,
name|callbackErrorActions
argument_list|,
name|callbackErrorServers
argument_list|)
throw|;
block|}
block|}
specifier|public
name|RegionLocator
name|getRegionLocator
parameter_list|()
block|{
return|return
name|this
operator|.
name|locator
return|;
block|}
annotation|@
name|VisibleForTesting
name|BufferedMutator
name|getBufferedMutator
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|mutator
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|mutatorLock
init|)
block|{
if|if
condition|(
name|mutator
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|mutator
operator|=
operator|(
name|BufferedMutatorImpl
operator|)
name|connection
operator|.
name|getBufferedMutator
argument_list|(
operator|new
name|BufferedMutatorParams
argument_list|(
name|tableName
argument_list|)
operator|.
name|pool
argument_list|(
name|pool
argument_list|)
operator|.
name|writeBufferSize
argument_list|(
name|writeBufferSize
argument_list|)
operator|.
name|maxKeyValueSize
argument_list|(
name|connConfiguration
operator|.
name|getMaxKeyValueSize
argument_list|()
argument_list|)
operator|.
name|opertationTimeout
argument_list|(
name|operationTimeout
argument_list|)
operator|.
name|rpcTimeout
argument_list|(
name|writeRpcTimeout
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|mutator
return|;
block|}
block|}
end_class

end_unit

