begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * This contains a visibility expression which can be associated with a cell. When it is set with a  * Mutation, all the cells in that mutation will get associated with this expression. A visibility  * expression can contain visibility labels combined with logical operators AND(&), OR(|) and NOT(!)  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|CellVisibility
block|{
specifier|private
name|String
name|expression
decl_stmt|;
specifier|public
name|CellVisibility
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
comment|/**    * @return The visibility expression    */
specifier|public
name|String
name|getExpression
parameter_list|()
block|{
return|return
name|this
operator|.
name|expression
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|expression
return|;
block|}
comment|/**    * Helps in quoting authentication Strings. Use this if unicode characters to    * be used in expression or special characters like '(', ')',    * '"','\','&','|','!'    */
specifier|public
specifier|static
name|String
name|quote
parameter_list|(
name|String
name|auth
parameter_list|)
block|{
return|return
name|quote
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|auth
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Helps in quoting authentication Strings. Use this if unicode characters to    * be used in expression or special characters like '(', ')',    * '"','\','&','|','!'    */
specifier|public
specifier|static
name|String
name|quote
parameter_list|(
name|byte
index|[]
name|auth
parameter_list|)
block|{
name|int
name|escapeChars
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|auth
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|auth
index|[
name|i
index|]
operator|==
literal|'"'
operator|||
name|auth
index|[
name|i
index|]
operator|==
literal|'\\'
condition|)
name|escapeChars
operator|++
expr_stmt|;
name|byte
index|[]
name|escapedAuth
init|=
operator|new
name|byte
index|[
name|auth
operator|.
name|length
operator|+
name|escapeChars
operator|+
literal|2
index|]
decl_stmt|;
name|int
name|index
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|auth
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|auth
index|[
name|i
index|]
operator|==
literal|'"'
operator|||
name|auth
index|[
name|i
index|]
operator|==
literal|'\\'
condition|)
block|{
name|escapedAuth
index|[
name|index
operator|++
index|]
operator|=
literal|'\\'
expr_stmt|;
block|}
name|escapedAuth
index|[
name|index
operator|++
index|]
operator|=
name|auth
index|[
name|i
index|]
expr_stmt|;
block|}
name|escapedAuth
index|[
literal|0
index|]
operator|=
literal|'"'
expr_stmt|;
name|escapedAuth
index|[
name|escapedAuth
operator|.
name|length
operator|-
literal|1
index|]
operator|=
literal|'"'
expr_stmt|;
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|escapedAuth
argument_list|)
return|;
block|}
block|}
end_class

end_unit

