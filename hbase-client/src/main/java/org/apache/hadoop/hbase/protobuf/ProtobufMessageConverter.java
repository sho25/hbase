begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BytesValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|MessageOrBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|util
operator|.
name|JsonFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|util
operator|.
name|JsonFormat
operator|.
name|TypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|LockServiceProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
import|;
end_import

begin_comment
comment|/**  * This class converts PB Messages to various representations, like:  *<ul>  *<li>JSON string: {@link #toJsonElement(MessageOrBuilder)}</li>  *<li>JSON object (gson): {@link #toJsonElement(MessageOrBuilder)}</li>  *<li>Java objects (Boolean, Number, String, List, Map):  * {@link #toJavaObject(JsonElement)}</li>  *</ul>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ProtobufMessageConverter
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TYPE_KEY
init|=
literal|"@type"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|JsonFormat
operator|.
name|Printer
name|jsonPrinter
decl_stmt|;
static|static
block|{
name|TypeRegistry
operator|.
name|Builder
name|builder
init|=
name|TypeRegistry
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|BytesValue
operator|.
name|getDescriptor
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|LockServiceProtos
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getMessageTypes
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|MasterProcedureProtos
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getMessageTypes
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|ProcedureProtos
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getMessageTypes
argument_list|()
argument_list|)
expr_stmt|;
name|TypeRegistry
name|typeRegistry
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|jsonPrinter
operator|=
name|JsonFormat
operator|.
name|printer
argument_list|()
operator|.
name|usingTypeRegistry
argument_list|(
name|typeRegistry
argument_list|)
operator|.
name|omittingInsignificantWhitespace
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ProtobufMessageConverter
parameter_list|()
block|{   }
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
name|MessageOrBuilder
name|messageOrBuilder
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|jsonPrinter
operator|.
name|print
argument_list|(
name|messageOrBuilder
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|removeTypeFromJson
parameter_list|(
name|JsonElement
name|json
parameter_list|)
block|{
if|if
condition|(
name|json
operator|.
name|isJsonArray
argument_list|()
condition|)
block|{
for|for
control|(
name|JsonElement
name|child
range|:
name|json
operator|.
name|getAsJsonArray
argument_list|()
control|)
block|{
name|removeTypeFromJson
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|json
operator|.
name|isJsonObject
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonElement
argument_list|>
argument_list|>
name|iterator
init|=
name|json
operator|.
name|getAsJsonObject
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonElement
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|TYPE_KEY
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|removeTypeFromJson
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|JsonElement
name|toJsonElement
parameter_list|(
name|MessageOrBuilder
name|messageOrBuilder
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
return|return
name|toJsonElement
argument_list|(
name|messageOrBuilder
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JsonElement
name|toJsonElement
parameter_list|(
name|MessageOrBuilder
name|messageOrBuilder
parameter_list|,
name|boolean
name|removeType
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|String
name|jsonString
init|=
name|toJsonString
argument_list|(
name|messageOrBuilder
argument_list|)
decl_stmt|;
name|JsonParser
name|parser
init|=
operator|new
name|JsonParser
argument_list|()
decl_stmt|;
name|JsonElement
name|element
init|=
name|parser
operator|.
name|parse
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
if|if
condition|(
name|removeType
condition|)
block|{
name|removeTypeFromJson
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
return|return
name|element
return|;
block|}
specifier|private
specifier|static
name|Object
name|toJavaObject
parameter_list|(
name|JsonElement
name|element
parameter_list|)
block|{
if|if
condition|(
name|element
operator|.
name|isJsonNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|element
operator|.
name|isJsonPrimitive
argument_list|()
condition|)
block|{
name|JsonPrimitive
name|primitive
init|=
name|element
operator|.
name|getAsJsonPrimitive
argument_list|()
decl_stmt|;
if|if
condition|(
name|primitive
operator|.
name|isBoolean
argument_list|()
condition|)
block|{
return|return
name|primitive
operator|.
name|getAsBoolean
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|primitive
operator|.
name|isNumber
argument_list|()
condition|)
block|{
return|return
name|primitive
operator|.
name|getAsNumber
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|primitive
operator|.
name|isString
argument_list|()
condition|)
block|{
return|return
name|primitive
operator|.
name|getAsString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|element
operator|.
name|isJsonArray
argument_list|()
condition|)
block|{
name|JsonArray
name|array
init|=
name|element
operator|.
name|getAsJsonArray
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonElement
name|arrayElement
range|:
name|array
control|)
block|{
name|Object
name|javaObject
init|=
name|toJavaObject
argument_list|(
name|arrayElement
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|javaObject
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
elseif|else
if|if
condition|(
name|element
operator|.
name|isJsonObject
argument_list|()
condition|)
block|{
name|JsonObject
name|object
init|=
name|element
operator|.
name|getAsJsonObject
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonElement
argument_list|>
name|entry
range|:
name|object
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|javaObject
init|=
name|toJavaObject
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|javaObject
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|Object
name|toJavaObject
parameter_list|(
name|MessageOrBuilder
name|messageOrBuilder
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|JsonElement
name|element
init|=
name|toJsonElement
argument_list|(
name|messageOrBuilder
argument_list|)
decl_stmt|;
return|return
name|toJavaObject
argument_list|(
name|element
argument_list|)
return|;
block|}
block|}
end_class

end_unit

