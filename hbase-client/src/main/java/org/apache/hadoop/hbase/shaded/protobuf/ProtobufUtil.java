begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ByteBufferCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ExtendedCellBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ExtendedCellBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClientUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|CompactionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Consistency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|PackagePrivateFieldAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLoadStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|metrics
operator|.
name|ScanMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|security
operator|.
name|SecurityCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|LimitInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|TimeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufMagic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufMessageConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceViolationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|ThrottleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationLoadSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationLoadSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|Authorizations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|CellVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnsafeByteOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetOnlineRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetOnlineRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionLoadRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionLoadResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetServerInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetServerInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetStoreFileRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetStoreFileResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|WarmupRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|Column
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
operator|.
name|QualifierValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|DeleteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
operator|.
name|LiveServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
operator|.
name|RegionInTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
operator|.
name|RegionLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ComparatorProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|FSProtos
operator|.
name|HBaseVersionFileContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|FilterProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|BytesBytesPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|ColumnFamilySchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|NameBytesPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|NameStringPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|ProcedureDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|TableSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|LockServiceProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MapReduceProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableDescriptorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListNamespaceDescriptorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MajorCompactionTimestampResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerStartupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|BulkLoadDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|CompactionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|FlushDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|FlushDescriptor
operator|.
name|FlushAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|RegionEventDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|RegionEventDescriptor
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|StoreDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Addressing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|DynamicClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ExceptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Methods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_comment
comment|/**  * Protobufs utility.  * Be aware that a class named org.apache.hadoop.hbase.protobuf.ProtobufUtil (i.e. no 'shaded' in  * the package name) carries a COPY of a subset of this class for non-shaded  * users; e.g. Coprocessor Endpoints. If you make change in here, be sure to make change in  * the companion class too (not the end of the world, especially if you are adding new functionality  * but something to be aware of.  * @see ProtobufUtil  */
end_comment

begin_comment
comment|// TODO: Generate the non-shaded protobufutil from this one.
end_comment

begin_class
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED"
argument_list|,
name|justification
operator|=
literal|"None. Address sometime."
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
comment|// TODO: some clients (Hive, etc) use this class
specifier|public
specifier|final
class|class
name|ProtobufUtil
block|{
specifier|private
name|ProtobufUtil
parameter_list|()
block|{   }
comment|/**    * Primitive type to class mapping.    */
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|PRIMITIVES
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Many results are simple: no cell, exists true or false. To save on object creations,    *  we reuse them across calls.    */
specifier|private
specifier|final
specifier|static
name|Cell
index|[]
name|EMPTY_CELL_ARRAY
init|=
operator|new
name|Cell
index|[]
block|{}
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT
init|=
name|Result
operator|.
name|create
argument_list|(
name|EMPTY_CELL_ARRAY
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_EXISTS_TRUE
init|=
name|Result
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_EXISTS_FALSE
init|=
name|Result
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_STALE
init|=
name|Result
operator|.
name|create
argument_list|(
name|EMPTY_CELL_ARRAY
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_EXISTS_TRUE_STALE
init|=
name|Result
operator|.
name|create
argument_list|(
operator|(
name|Cell
index|[]
operator|)
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_EXISTS_FALSE_STALE
init|=
name|Result
operator|.
name|create
argument_list|(
operator|(
name|Cell
index|[]
operator|)
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB_EXISTS_TRUE
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB_EXISTS_FALSE
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB_STALE
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB_EXISTS_TRUE_STALE
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB_EXISTS_FALSE_STALE
decl_stmt|;
static|static
block|{
name|ClientProtos
operator|.
name|Result
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Result
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setExists
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB_EXISTS_TRUE
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setStale
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB_EXISTS_TRUE_STALE
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setExists
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB_EXISTS_FALSE
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setStale
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB_EXISTS_FALSE_STALE
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setStale
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB_STALE
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|/**    * Dynamic class loader to load filter/comparators    */
specifier|private
specifier|final
specifier|static
name|ClassLoader
name|CLASS_LOADER
decl_stmt|;
static|static
block|{
name|ClassLoader
name|parent
init|=
name|ProtobufUtil
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|CLASS_LOADER
operator|=
operator|new
name|DynamicClassLoader
argument_list|(
name|conf
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Byte
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Character
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Character
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Short
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Short
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Long
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Long
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Float
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Float
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Double
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Double
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Void
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Void
operator|.
name|TYPE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prepend the passed bytes with four bytes of magic, {@link ProtobufMagic#PB_MAGIC},    * to flag what follows as a protobuf in hbase.  Prepend these bytes to all content written to    * znodes, etc.    * @param bytes Bytes to decorate    * @return The passed<code>bytes</code> with magic prepended (Creates a new    * byte array that is<code>bytes.length</code> plus {@link ProtobufMagic#PB_MAGIC}.length.    */
specifier|public
specifier|static
name|byte
index|[]
name|prependPBMagic
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|add
argument_list|(
name|ProtobufMagic
operator|.
name|PB_MAGIC
argument_list|,
name|bytes
argument_list|)
return|;
block|}
comment|/**    * @param bytes Bytes to check.    * @return True if passed<code>bytes</code> has {@link ProtobufMagic#PB_MAGIC} for a prefix.    */
specifier|public
specifier|static
name|boolean
name|isPBMagicPrefix
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|ProtobufMagic
operator|.
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
return|;
block|}
comment|/**    * @param bytes Bytes to check.    * @param offset offset to start at    * @param len length to use    * @return True if passed<code>bytes</code> has {@link ProtobufMagic#PB_MAGIC} for a prefix.    */
specifier|public
specifier|static
name|boolean
name|isPBMagicPrefix
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
name|ProtobufMagic
operator|.
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
return|;
block|}
comment|/**    * @param bytes bytes to check    * @throws DeserializationException if we are missing the pb magic prefix    */
specifier|public
specifier|static
name|void
name|expectPBMagicPrefix
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
operator|!
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
literal|"Missing pb magic "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|ProtobufMagic
operator|.
name|PB_MAGIC
argument_list|)
operator|+
literal|" prefix"
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return Length of {@link ProtobufMagic#lengthOfPBMagic()}    */
specifier|public
specifier|static
name|int
name|lengthOfPBMagic
parameter_list|()
block|{
return|return
name|ProtobufMagic
operator|.
name|lengthOfPBMagic
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ComparatorProtos
operator|.
name|ByteArrayComparable
name|toByteArrayComparable
parameter_list|(
specifier|final
name|byte
index|[]
name|value
parameter_list|)
block|{
name|ComparatorProtos
operator|.
name|ByteArrayComparable
operator|.
name|Builder
name|builder
init|=
name|ComparatorProtos
operator|.
name|ByteArrayComparable
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setValue
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Return the IOException thrown by the remote server wrapped in    * ServiceException as cause.    *    * @param se ServiceException that wraps IO exception thrown by the server    * @return Exception wrapped in ServiceException or    *   a new IOException that wraps the unexpected ServiceException.    */
specifier|public
specifier|static
name|IOException
name|getRemoteException
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
return|return
name|makeIOExceptionOfException
argument_list|(
name|se
argument_list|)
return|;
block|}
comment|/**    * Like {@link #getRemoteException(ServiceException)} but more generic, able to handle more than    * just {@link ServiceException}. Prefer this method to    * {@link #getRemoteException(ServiceException)} because trying to    * contain direct protobuf references.    * @param e    */
specifier|public
specifier|static
name|IOException
name|handleRemoteException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|makeIOExceptionOfException
argument_list|(
name|e
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|IOException
name|makeIOExceptionOfException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|e
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|ServiceException
condition|)
block|{
name|t
operator|=
name|e
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ExceptionUtil
operator|.
name|isInterrupt
argument_list|(
name|t
argument_list|)
condition|)
block|{
return|return
name|ExceptionUtil
operator|.
name|asInterrupt
argument_list|(
name|t
argument_list|)
return|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|RemoteException
condition|)
block|{
name|t
operator|=
operator|(
operator|(
name|RemoteException
operator|)
name|t
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
expr_stmt|;
block|}
return|return
name|t
operator|instanceof
name|IOException
condition|?
operator|(
name|IOException
operator|)
name|t
else|:
operator|new
name|HBaseIOException
argument_list|(
name|t
argument_list|)
return|;
block|}
comment|/**    * Convert a ServerName to a protocol buffer ServerName    *    * @param serverName the ServerName to convert    * @return the converted protocol buffer ServerName    * @see #toServerName(org.apache.hadoop.hbase.shaded.protobuf.generated.HBaseProtos.ServerName)    */
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|ServerName
name|toServerName
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|Builder
name|builder
init|=
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setHostName
argument_list|(
name|serverName
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverName
operator|.
name|getPort
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|setPort
argument_list|(
name|serverName
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serverName
operator|.
name|getStartcode
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|setStartCode
argument_list|(
name|serverName
operator|.
name|getStartcode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer ServerName to a ServerName    *    * @param proto the protocol buffer ServerName to convert    * @return the converted ServerName    */
specifier|public
specifier|static
name|ServerName
name|toServerName
parameter_list|(
specifier|final
name|HBaseProtos
operator|.
name|ServerName
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|hostName
init|=
name|proto
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|long
name|startCode
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|port
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasPort
argument_list|()
condition|)
block|{
name|port
operator|=
name|proto
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStartCode
argument_list|()
condition|)
block|{
name|startCode
operator|=
name|proto
operator|.
name|getStartCode
argument_list|()
expr_stmt|;
block|}
return|return
name|ServerName
operator|.
name|valueOf
argument_list|(
name|hostName
argument_list|,
name|port
argument_list|,
name|startCode
argument_list|)
return|;
block|}
comment|/**    * Convert a list of protocol buffer ServerName to a list of ServerName    * @param proto protocol buffer ServerNameList    * @return a list of ServerName    */
specifier|public
specifier|static
name|List
argument_list|<
name|ServerName
argument_list|>
name|toServerNameList
parameter_list|(
name|List
argument_list|<
name|HBaseProtos
operator|.
name|ServerName
argument_list|>
name|proto
parameter_list|)
block|{
return|return
name|proto
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ProtobufUtil
operator|::
name|toServerName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get a list of NamespaceDescriptor from ListNamespaceDescriptorsResponse protobuf    * @param proto the ListNamespaceDescriptorsResponse    * @return a list of NamespaceDescriptor    */
specifier|public
specifier|static
name|List
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|toNamespaceDescriptorList
parameter_list|(
name|ListNamespaceDescriptorsResponse
name|proto
parameter_list|)
block|{
return|return
name|proto
operator|.
name|getNamespaceDescriptorList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ProtobufUtil
operator|::
name|toNamespaceDescriptor
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get a list of TableDescriptor from GetTableDescriptorsResponse protobuf    * @param proto the GetTableDescriptorsResponse    * @return a list of TableDescriptor    */
specifier|public
specifier|static
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|toTableDescriptorList
parameter_list|(
name|GetTableDescriptorsResponse
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
return|return
name|proto
operator|.
name|getTableSchemaList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ProtobufUtil
operator|::
name|toTableDescriptor
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * get the split keys in form "byte [][]" from a CreateTableRequest proto    *    * @param proto the CreateTableRequest    * @return the split keys    */
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|getSplitKeysArray
parameter_list|(
specifier|final
name|CreateTableRequest
name|proto
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
name|proto
operator|.
name|getSplitKeysCount
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proto
operator|.
name|getSplitKeysCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|splitKeys
index|[
name|i
index|]
operator|=
name|proto
operator|.
name|getSplitKeys
argument_list|(
name|i
argument_list|)
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
return|return
name|splitKeys
return|;
block|}
comment|/**    * Convert a protobuf Durability into a client Durability    */
specifier|public
specifier|static
name|Durability
name|toDurability
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|USE_DEFAULT
case|:
return|return
name|Durability
operator|.
name|USE_DEFAULT
return|;
case|case
name|SKIP_WAL
case|:
return|return
name|Durability
operator|.
name|SKIP_WAL
return|;
case|case
name|ASYNC_WAL
case|:
return|return
name|Durability
operator|.
name|ASYNC_WAL
return|;
case|case
name|SYNC_WAL
case|:
return|return
name|Durability
operator|.
name|SYNC_WAL
return|;
case|case
name|FSYNC_WAL
case|:
return|return
name|Durability
operator|.
name|FSYNC_WAL
return|;
default|default:
return|return
name|Durability
operator|.
name|USE_DEFAULT
return|;
block|}
block|}
comment|/**    * Convert a client Durability into a protbuf Durability    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
name|toDurability
parameter_list|(
specifier|final
name|Durability
name|d
parameter_list|)
block|{
switch|switch
condition|(
name|d
condition|)
block|{
case|case
name|USE_DEFAULT
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|USE_DEFAULT
return|;
case|case
name|SKIP_WAL
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|SKIP_WAL
return|;
case|case
name|ASYNC_WAL
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|ASYNC_WAL
return|;
case|case
name|SYNC_WAL
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|SYNC_WAL
return|;
case|case
name|FSYNC_WAL
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|FSYNC_WAL
return|;
default|default:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|USE_DEFAULT
return|;
block|}
block|}
comment|/**    * Convert a protocol buffer Get to a client Get    *    * @param proto the protocol buffer Get to convert    * @return the converted client Get    * @throws IOException    */
specifier|public
specifier|static
name|Get
name|toGet
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Get
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasCacheBlocks
argument_list|()
condition|)
block|{
name|get
operator|.
name|setCacheBlocks
argument_list|(
name|proto
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMaxVersions
argument_list|()
condition|)
block|{
name|get
operator|.
name|setMaxVersions
argument_list|(
name|proto
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStoreLimit
argument_list|()
condition|)
block|{
name|get
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
name|proto
operator|.
name|getStoreLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStoreOffset
argument_list|()
condition|)
block|{
name|get
operator|.
name|setRowOffsetPerColumnFamily
argument_list|(
name|proto
operator|.
name|getStoreOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getCfTimeRangeCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|HBaseProtos
operator|.
name|ColumnFamilyTimeRange
name|cftr
range|:
name|proto
operator|.
name|getCfTimeRangeList
argument_list|()
control|)
block|{
name|TimeRange
name|timeRange
init|=
name|protoToTimeRange
argument_list|(
name|cftr
operator|.
name|getTimeRange
argument_list|()
argument_list|)
decl_stmt|;
name|get
operator|.
name|setColumnFamilyTimeRange
argument_list|(
name|cftr
operator|.
name|getColumnFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|,
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|proto
operator|.
name|hasTimeRange
argument_list|()
condition|)
block|{
name|TimeRange
name|timeRange
init|=
name|protoToTimeRange
argument_list|(
name|proto
operator|.
name|getTimeRange
argument_list|()
argument_list|)
decl_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|,
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|FilterProtos
operator|.
name|Filter
name|filter
init|=
name|proto
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|get
operator|.
name|setFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|get
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getColumnCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Column
name|column
range|:
name|proto
operator|.
name|getColumnList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|.
name|getQualifierCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ByteString
name|qualifier
range|:
name|column
operator|.
name|getQualifierList
argument_list|()
control|)
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|proto
operator|.
name|hasExistenceOnly
argument_list|()
operator|&&
name|proto
operator|.
name|getExistenceOnly
argument_list|()
condition|)
block|{
name|get
operator|.
name|setCheckExistenceOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasConsistency
argument_list|()
condition|)
block|{
name|get
operator|.
name|setConsistency
argument_list|(
name|toConsistency
argument_list|(
name|proto
operator|.
name|getConsistency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasLoadColumnFamiliesOnDemand
argument_list|()
condition|)
block|{
name|get
operator|.
name|setLoadColumnFamiliesOnDemand
argument_list|(
name|proto
operator|.
name|getLoadColumnFamiliesOnDemand
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|get
return|;
block|}
specifier|public
specifier|static
name|Consistency
name|toConsistency
parameter_list|(
name|ClientProtos
operator|.
name|Consistency
name|consistency
parameter_list|)
block|{
switch|switch
condition|(
name|consistency
condition|)
block|{
case|case
name|STRONG
case|:
return|return
name|Consistency
operator|.
name|STRONG
return|;
case|case
name|TIMELINE
case|:
return|return
name|Consistency
operator|.
name|TIMELINE
return|;
default|default :
return|return
name|Consistency
operator|.
name|STRONG
return|;
block|}
block|}
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Consistency
name|toConsistency
parameter_list|(
name|Consistency
name|consistency
parameter_list|)
block|{
switch|switch
condition|(
name|consistency
condition|)
block|{
case|case
name|STRONG
case|:
return|return
name|ClientProtos
operator|.
name|Consistency
operator|.
name|STRONG
return|;
case|case
name|TIMELINE
case|:
return|return
name|ClientProtos
operator|.
name|Consistency
operator|.
name|TIMELINE
return|;
default|default :
return|return
name|ClientProtos
operator|.
name|Consistency
operator|.
name|STRONG
return|;
block|}
block|}
comment|/**    * Convert a protocol buffer Mutate to a Put.    *    * @param proto The protocol buffer MutationProto to convert    * @return A client Put.    * @throws IOException    */
specifier|public
specifier|static
name|Put
name|toPut
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toPut
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Put.    *    * @param proto The protocol buffer MutationProto to convert    * @param cellScanner If non-null, the Cell data that goes with this proto.    * @return A client Put.    * @throws IOException    */
specifier|public
specifier|static
name|Put
name|toPut
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: Server-side at least why do we convert back to the Client types?  Why not just pb it?
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutationType
operator|.
name|PUT
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|long
name|timestamp
init|=
name|proto
operator|.
name|hasTimestamp
argument_list|()
condition|?
name|proto
operator|.
name|getTimestamp
argument_list|()
else|:
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
name|Put
name|put
init|=
name|proto
operator|.
name|hasRow
argument_list|()
condition|?
operator|new
name|Put
argument_list|(
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|timestamp
argument_list|)
else|:
literal|null
decl_stmt|;
name|int
name|cellCount
init|=
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|?
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cellCount
operator|>
literal|0
condition|)
block|{
comment|// The proto has metadata only and the data is separate to be found in the cellScanner.
if|if
condition|(
name|cellScanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but no cellScanner: "
operator|+
name|toShortString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but at index "
operator|+
name|i
operator|+
literal|" no cell returned: "
operator|+
name|toShortString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|put
operator|==
literal|null
condition|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|put
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|put
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"row cannot be null"
argument_list|)
throw|;
block|}
comment|// The proto has the metadata and the data itself
name|ExtendedCellBuilder
name|cellBuilder
init|=
name|ExtendedCellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|qv
operator|.
name|hasValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required field: qualifier value"
argument_list|)
throw|;
block|}
name|ByteBuffer
name|qualifier
init|=
name|qv
operator|.
name|hasQualifier
argument_list|()
condition|?
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
else|:
literal|null
decl_stmt|;
name|ByteBuffer
name|value
init|=
name|qv
operator|.
name|hasValue
argument_list|()
condition|?
name|qv
operator|.
name|getValue
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
else|:
literal|null
decl_stmt|;
name|long
name|ts
init|=
name|timestamp
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTimestamp
argument_list|()
condition|)
block|{
name|ts
operator|=
name|qv
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|allTagsBytes
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTags
argument_list|()
condition|)
block|{
name|allTagsBytes
operator|=
name|qv
operator|.
name|getTags
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasDeleteType
argument_list|()
condition|)
block|{
name|put
operator|.
name|add
argument_list|(
name|cellBuilder
operator|.
name|clear
argument_list|()
operator|.
name|setRow
argument_list|(
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|qv
operator|.
name|hasQualifier
argument_list|()
condition|?
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
operator|.
name|setType
argument_list|(
name|fromDeleteType
argument_list|(
name|qv
operator|.
name|getDeleteType
argument_list|()
argument_list|)
operator|.
name|getCode
argument_list|()
argument_list|)
operator|.
name|setTags
argument_list|(
name|allTagsBytes
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
name|TagUtil
operator|.
name|asList
argument_list|(
name|allTagsBytes
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
name|allTagsBytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|Tag
index|[]
name|tagsArray
init|=
operator|new
name|Tag
index|[
name|tags
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|put
operator|.
name|addImmutable
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|,
name|value
argument_list|,
name|tags
operator|.
name|toArray
argument_list|(
name|tagsArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|qv
operator|.
name|hasDeleteType
argument_list|()
condition|)
block|{
name|put
operator|.
name|add
argument_list|(
name|cellBuilder
operator|.
name|clear
argument_list|()
operator|.
name|setRow
argument_list|(
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|qv
operator|.
name|hasQualifier
argument_list|()
condition|?
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
operator|.
name|setType
argument_list|(
name|fromDeleteType
argument_list|(
name|qv
operator|.
name|getDeleteType
argument_list|()
argument_list|)
operator|.
name|getCode
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|addImmutable
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|put
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|proto
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|put
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|put
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Delete    *    * @param proto the protocol buffer Mutate to convert    * @return the converted client Delete    * @throws IOException    */
specifier|public
specifier|static
name|Delete
name|toDelete
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toDelete
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Delete    *    * @param proto the protocol buffer Mutate to convert    * @param cellScanner if non-null, the data that goes with this delete.    * @return the converted client Delete    * @throws IOException    */
specifier|public
specifier|static
name|Delete
name|toDelete
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutationType
operator|.
name|DELETE
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|long
name|timestamp
init|=
name|proto
operator|.
name|hasTimestamp
argument_list|()
condition|?
name|proto
operator|.
name|getTimestamp
argument_list|()
else|:
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
name|Delete
name|delete
init|=
name|proto
operator|.
name|hasRow
argument_list|()
condition|?
operator|new
name|Delete
argument_list|(
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|timestamp
argument_list|)
else|:
literal|null
decl_stmt|;
name|int
name|cellCount
init|=
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|?
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cellCount
operator|>
literal|0
condition|)
block|{
comment|// The proto has metadata only and the data is separate to be found in the cellScanner.
if|if
condition|(
name|cellScanner
operator|==
literal|null
condition|)
block|{
comment|// TextFormat should be fine for a Delete since it carries no data, just coordinates.
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but no cellScanner: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
comment|// TextFormat should be fine for a Delete since it carries no data, just coordinates.
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but at index "
operator|+
name|i
operator|+
literal|" no cell returned: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|delete
operator|==
literal|null
condition|)
block|{
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|delete
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|delete
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"row cannot be null"
argument_list|)
throw|;
block|}
for|for
control|(
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
name|DeleteType
name|deleteType
init|=
name|qv
operator|.
name|getDeleteType
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasQualifier
argument_list|()
condition|)
block|{
name|qualifier
operator|=
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|long
name|ts
init|=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTimestamp
argument_list|()
condition|)
block|{
name|ts
operator|=
name|qv
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|==
name|DeleteType
operator|.
name|DELETE_ONE_VERSION
condition|)
block|{
name|delete
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteType
operator|==
name|DeleteType
operator|.
name|DELETE_MULTIPLE_VERSIONS
condition|)
block|{
name|delete
operator|.
name|addColumns
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteType
operator|==
name|DeleteType
operator|.
name|DELETE_FAMILY_VERSION
condition|)
block|{
name|delete
operator|.
name|addFamilyVersion
argument_list|(
name|family
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|addFamily
argument_list|(
name|family
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|delete
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|proto
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|delete
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|delete
return|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|ConsumerWithException
parameter_list|<
name|T
parameter_list|,
name|U
parameter_list|>
block|{
name|void
name|accept
parameter_list|(
name|T
name|t
parameter_list|,
name|U
name|u
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Mutation
parameter_list|>
name|T
name|toDelta
parameter_list|(
name|Function
argument_list|<
name|Bytes
argument_list|,
name|T
argument_list|>
name|supplier
parameter_list|,
name|ConsumerWithException
argument_list|<
name|T
argument_list|,
name|Cell
argument_list|>
name|consumer
parameter_list|,
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|hasRow
argument_list|()
condition|?
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
name|T
name|mutation
init|=
name|row
operator|==
literal|null
condition|?
literal|null
else|:
name|supplier
operator|.
name|apply
argument_list|(
operator|new
name|Bytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|cellCount
init|=
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|?
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cellCount
operator|>
literal|0
condition|)
block|{
comment|// The proto has metadata only and the data is separate to be found in the cellScanner.
if|if
condition|(
name|cellScanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but no cellScanner: "
operator|+
name|toShortString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but at index "
operator|+
name|i
operator|+
literal|" no cell returned: "
operator|+
name|toShortString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|mutation
operator|==
literal|null
condition|)
block|{
name|mutation
operator|=
name|supplier
operator|.
name|apply
argument_list|(
operator|new
name|Bytes
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|accept
argument_list|(
name|mutation
argument_list|,
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|mutation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"row cannot be null"
argument_list|)
throw|;
block|}
for|for
control|(
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qv
operator|.
name|hasValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required field: qualifier value"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|value
init|=
name|qv
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tags
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTags
argument_list|()
condition|)
block|{
name|tags
operator|=
name|qv
operator|.
name|getTags
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|consumer
operator|.
name|accept
argument_list|(
name|mutation
argument_list|,
name|ExtendedCellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|mutation
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|qv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|setTags
argument_list|(
name|tags
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|mutation
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|proto
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|mutation
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mutation
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to an Append    * @param cellScanner    * @param proto the protocol buffer Mutate to convert    * @return the converted client Append    * @throws IOException    */
specifier|public
specifier|static
name|Append
name|toAppend
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutationType
operator|.
name|APPEND
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
return|return
name|toDelta
argument_list|(
parameter_list|(
name|Bytes
name|row
parameter_list|)
lambda|->
operator|new
name|Append
argument_list|(
name|row
operator|.
name|get
argument_list|()
argument_list|,
name|row
operator|.
name|getOffset
argument_list|()
argument_list|,
name|row
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|,
name|Append
operator|::
name|add
argument_list|,
name|proto
argument_list|,
name|cellScanner
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to an Increment    *    * @param proto the protocol buffer Mutate to convert    * @return the converted client Increment    * @throws IOException    */
specifier|public
specifier|static
name|Increment
name|toIncrement
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutationType
operator|.
name|INCREMENT
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|Increment
name|increment
init|=
name|toDelta
argument_list|(
parameter_list|(
name|Bytes
name|row
parameter_list|)
lambda|->
operator|new
name|Increment
argument_list|(
name|row
operator|.
name|get
argument_list|()
argument_list|,
name|row
operator|.
name|getOffset
argument_list|()
argument_list|,
name|row
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|,
name|Increment
operator|::
name|add
argument_list|,
name|proto
argument_list|,
name|cellScanner
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasTimeRange
argument_list|()
condition|)
block|{
name|TimeRange
name|timeRange
init|=
name|protoToTimeRange
argument_list|(
name|proto
operator|.
name|getTimeRange
argument_list|()
argument_list|)
decl_stmt|;
name|increment
operator|.
name|setTimeRange
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|,
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|increment
return|;
block|}
comment|/**    * Convert a MutateRequest to Mutation    *    * @param proto the protocol buffer Mutate to convert    * @return the converted Mutation    * @throws IOException    */
specifier|public
specifier|static
name|Mutation
name|toMutation
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|MutationType
operator|.
name|APPEND
condition|)
block|{
return|return
name|toAppend
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|MutationType
operator|.
name|DELETE
condition|)
block|{
return|return
name|toDelete
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|MutationType
operator|.
name|PUT
condition|)
block|{
return|return
name|toPut
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown mutation type "
operator|+
name|type
argument_list|)
throw|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Get.    * @param proto the protocol buffer Mutate to convert.    * @param cellScanner    * @return the converted client get.    * @throws IOException    */
specifier|public
specifier|static
name|Get
name|toGet
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutationType
operator|.
name|INCREMENT
operator|||
name|type
operator|==
name|MutationType
operator|.
name|APPEND
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|hasRow
argument_list|()
condition|?
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
name|Get
name|get
init|=
literal|null
decl_stmt|;
name|int
name|cellCount
init|=
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|?
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cellCount
operator|>
literal|0
condition|)
block|{
comment|// The proto has metadata only and the data is separate to be found in the cellScanner.
if|if
condition|(
name|cellScanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but no cellScanner: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but at index "
operator|+
name|i
operator|+
literal|" no cell returned: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|get
operator|==
literal|null
condition|)
block|{
name|get
operator|=
operator|new
name|Get
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|get
operator|.
name|addColumn
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cell
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qv
operator|.
name|hasValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required field: qualifier value"
argument_list|)
throw|;
block|}
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|proto
operator|.
name|hasTimeRange
argument_list|()
condition|)
block|{
name|TimeRange
name|timeRange
init|=
name|protoToTimeRange
argument_list|(
name|proto
operator|.
name|getTimeRange
argument_list|()
argument_list|)
decl_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|,
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|get
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|get
return|;
block|}
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Scan
operator|.
name|ReadType
name|toReadType
parameter_list|(
name|Scan
operator|.
name|ReadType
name|readType
parameter_list|)
block|{
switch|switch
condition|(
name|readType
condition|)
block|{
case|case
name|DEFAULT
case|:
return|return
name|ClientProtos
operator|.
name|Scan
operator|.
name|ReadType
operator|.
name|DEFAULT
return|;
case|case
name|STREAM
case|:
return|return
name|ClientProtos
operator|.
name|Scan
operator|.
name|ReadType
operator|.
name|STREAM
return|;
case|case
name|PREAD
case|:
return|return
name|ClientProtos
operator|.
name|Scan
operator|.
name|ReadType
operator|.
name|PREAD
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown ReadType: "
operator|+
name|readType
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Scan
operator|.
name|ReadType
name|toReadType
parameter_list|(
name|ClientProtos
operator|.
name|Scan
operator|.
name|ReadType
name|readType
parameter_list|)
block|{
switch|switch
condition|(
name|readType
condition|)
block|{
case|case
name|DEFAULT
case|:
return|return
name|Scan
operator|.
name|ReadType
operator|.
name|DEFAULT
return|;
case|case
name|STREAM
case|:
return|return
name|Scan
operator|.
name|ReadType
operator|.
name|STREAM
return|;
case|case
name|PREAD
case|:
return|return
name|Scan
operator|.
name|ReadType
operator|.
name|PREAD
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown ReadType: "
operator|+
name|readType
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a client Scan to a protocol buffer Scan    *    * @param scan the client Scan to convert    * @return the converted protocol buffer Scan    * @throws IOException    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Scan
name|toScan
parameter_list|(
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientProtos
operator|.
name|Scan
operator|.
name|Builder
name|scanBuilder
init|=
name|ClientProtos
operator|.
name|Scan
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|scanBuilder
operator|.
name|setCacheBlocks
argument_list|(
name|scan
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|scan
operator|.
name|getBatch
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setBatchSize
argument_list|(
name|scan
operator|.
name|getBatch
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getMaxResultSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setMaxResultSize
argument_list|(
name|scan
operator|.
name|getMaxResultSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|isSmall
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setSmall
argument_list|(
name|scan
operator|.
name|isSmall
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getAllowPartialResults
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setAllowPartialResults
argument_list|(
name|scan
operator|.
name|getAllowPartialResults
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|loadColumnFamiliesOnDemand
init|=
name|scan
operator|.
name|getLoadColumnFamiliesOnDemandValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|loadColumnFamiliesOnDemand
operator|!=
literal|null
condition|)
block|{
name|scanBuilder
operator|.
name|setLoadColumnFamiliesOnDemand
argument_list|(
name|loadColumnFamiliesOnDemand
argument_list|)
expr_stmt|;
block|}
name|scanBuilder
operator|.
name|setMaxVersions
argument_list|(
name|scan
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|TimeRange
argument_list|>
name|cftr
range|:
name|scan
operator|.
name|getColumnFamilyTimeRange
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HBaseProtos
operator|.
name|ColumnFamilyTimeRange
operator|.
name|Builder
name|b
init|=
name|HBaseProtos
operator|.
name|ColumnFamilyTimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|setColumnFamily
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|cftr
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|setTimeRange
argument_list|(
name|timeRangeToProto
argument_list|(
name|cftr
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scanBuilder
operator|.
name|addCfTimeRange
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|TimeRange
name|timeRange
init|=
name|scan
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|timeRange
operator|.
name|isAllTime
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|Builder
name|timeRangeBuilder
init|=
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|timeRangeBuilder
operator|.
name|setFrom
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|timeRangeBuilder
operator|.
name|setTo
argument_list|(
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|scanBuilder
operator|.
name|setTimeRange
argument_list|(
name|timeRangeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attributes
init|=
name|scan
operator|.
name|getAttributesMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NameBytesPair
operator|.
name|Builder
name|attributeBuilder
init|=
name|NameBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|attributeBuilder
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|attributeBuilder
operator|.
name|setValue
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scanBuilder
operator|.
name|addAttribute
argument_list|(
name|attributeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|byte
index|[]
name|startRow
init|=
name|scan
operator|.
name|getStartRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|startRow
operator|!=
literal|null
operator|&&
name|startRow
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setStartRow
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|stopRow
init|=
name|scan
operator|.
name|getStopRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|stopRow
operator|!=
literal|null
operator|&&
name|stopRow
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setStopRow
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|scan
operator|.
name|getFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|hasFamilies
argument_list|()
condition|)
block|{
name|Column
operator|.
name|Builder
name|columnBuilder
init|=
name|Column
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|family
range|:
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|columnBuilder
operator|.
name|setFamily
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
name|family
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|columnBuilder
operator|.
name|clearQualifier
argument_list|()
expr_stmt|;
if|if
condition|(
name|qualifiers
operator|!=
literal|null
operator|&&
name|qualifiers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|qualifiers
control|)
block|{
name|columnBuilder
operator|.
name|addQualifier
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|scanBuilder
operator|.
name|addColumn
argument_list|(
name|columnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|scan
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setStoreLimit
argument_list|(
name|scan
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setStoreOffset
argument_list|(
name|scan
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|isReversed
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setReversed
argument_list|(
name|scan
operator|.
name|isReversed
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getConsistency
argument_list|()
operator|==
name|Consistency
operator|.
name|TIMELINE
condition|)
block|{
name|scanBuilder
operator|.
name|setConsistency
argument_list|(
name|toConsistency
argument_list|(
name|scan
operator|.
name|getConsistency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getCaching
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setCaching
argument_list|(
name|scan
operator|.
name|getCaching
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|mvccReadPoint
init|=
name|PackagePrivateFieldAccessor
operator|.
name|getMvccReadPoint
argument_list|(
name|scan
argument_list|)
decl_stmt|;
if|if
condition|(
name|mvccReadPoint
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setMvccReadPoint
argument_list|(
name|mvccReadPoint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|scan
operator|.
name|includeStartRow
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setIncludeStartRow
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|includeStopRow
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setIncludeStopRow
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getReadType
argument_list|()
operator|!=
name|Scan
operator|.
name|ReadType
operator|.
name|DEFAULT
condition|)
block|{
name|scanBuilder
operator|.
name|setReadType
argument_list|(
name|toReadType
argument_list|(
name|scan
operator|.
name|getReadType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|isNeedCursorResult
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setNeedCursorResult
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|scanBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer Scan to a client Scan    *    * @param proto the protocol buffer Scan to convert    * @return the converted client Scan    * @throws IOException    */
specifier|public
specifier|static
name|Scan
name|toScan
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Scan
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|startRow
init|=
name|HConstants
operator|.
name|EMPTY_START_ROW
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
name|HConstants
operator|.
name|EMPTY_END_ROW
decl_stmt|;
name|boolean
name|includeStartRow
init|=
literal|true
decl_stmt|;
name|boolean
name|includeStopRow
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasStartRow
argument_list|()
condition|)
block|{
name|startRow
operator|=
name|proto
operator|.
name|getStartRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStopRow
argument_list|()
condition|)
block|{
name|stopRow
operator|=
name|proto
operator|.
name|getStopRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasIncludeStartRow
argument_list|()
condition|)
block|{
name|includeStartRow
operator|=
name|proto
operator|.
name|getIncludeStartRow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasIncludeStopRow
argument_list|()
condition|)
block|{
name|includeStopRow
operator|=
name|proto
operator|.
name|getIncludeStopRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// old client without this flag, we should consider start=end as a get.
if|if
condition|(
name|ClientUtil
operator|.
name|areScanStartRowAndStopRowEqual
argument_list|(
name|startRow
argument_list|,
name|stopRow
argument_list|)
condition|)
block|{
name|includeStopRow
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|startRow
argument_list|,
name|includeStartRow
argument_list|)
operator|.
name|withStopRow
argument_list|(
name|stopRow
argument_list|,
name|includeStopRow
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasCacheBlocks
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setCacheBlocks
argument_list|(
name|proto
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMaxVersions
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|proto
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStoreLimit
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
name|proto
operator|.
name|getStoreLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStoreOffset
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setRowOffsetPerColumnFamily
argument_list|(
name|proto
operator|.
name|getStoreOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasLoadColumnFamiliesOnDemand
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setLoadColumnFamiliesOnDemand
argument_list|(
name|proto
operator|.
name|getLoadColumnFamiliesOnDemand
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getCfTimeRangeCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|HBaseProtos
operator|.
name|ColumnFamilyTimeRange
name|cftr
range|:
name|proto
operator|.
name|getCfTimeRangeList
argument_list|()
control|)
block|{
name|TimeRange
name|timeRange
init|=
name|protoToTimeRange
argument_list|(
name|cftr
operator|.
name|getTimeRange
argument_list|()
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setColumnFamilyTimeRange
argument_list|(
name|cftr
operator|.
name|getColumnFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|,
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|proto
operator|.
name|hasTimeRange
argument_list|()
condition|)
block|{
name|TimeRange
name|timeRange
init|=
name|protoToTimeRange
argument_list|(
name|proto
operator|.
name|getTimeRange
argument_list|()
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|,
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|FilterProtos
operator|.
name|Filter
name|filter
init|=
name|proto
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasBatchSize
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setBatch
argument_list|(
name|proto
operator|.
name|getBatchSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMaxResultSize
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setMaxResultSize
argument_list|(
name|proto
operator|.
name|getMaxResultSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasSmall
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setSmall
argument_list|(
name|proto
operator|.
name|getSmall
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasAllowPartialResults
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setAllowPartialResults
argument_list|(
name|proto
operator|.
name|getAllowPartialResults
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|scan
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getColumnCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Column
name|column
range|:
name|proto
operator|.
name|getColumnList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|.
name|getQualifierCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ByteString
name|qualifier
range|:
name|column
operator|.
name|getQualifierList
argument_list|()
control|)
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|proto
operator|.
name|hasReversed
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setReversed
argument_list|(
name|proto
operator|.
name|getReversed
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasConsistency
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setConsistency
argument_list|(
name|toConsistency
argument_list|(
name|proto
operator|.
name|getConsistency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasCaching
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setCaching
argument_list|(
name|proto
operator|.
name|getCaching
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMvccReadPoint
argument_list|()
condition|)
block|{
name|PackagePrivateFieldAccessor
operator|.
name|setMvccReadPoint
argument_list|(
name|scan
argument_list|,
name|proto
operator|.
name|getMvccReadPoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|isSmall
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setReadType
argument_list|(
name|Scan
operator|.
name|ReadType
operator|.
name|PREAD
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|proto
operator|.
name|hasReadType
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setReadType
argument_list|(
name|toReadType
argument_list|(
name|proto
operator|.
name|getReadType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getNeedCursorResult
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setNeedCursorResult
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|scan
return|;
block|}
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Cursor
name|toCursor
parameter_list|(
name|Cursor
name|cursor
parameter_list|)
block|{
name|ClientProtos
operator|.
name|Cursor
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Cursor
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|Cursor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRow
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|cursor
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Cursor
name|toCursor
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|ClientProtos
operator|.
name|Cursor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRow
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Cursor
name|toCursor
parameter_list|(
name|ClientProtos
operator|.
name|Cursor
name|cursor
parameter_list|)
block|{
return|return
name|ClientUtil
operator|.
name|createCursor
argument_list|(
name|cursor
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer Get based on a client Get.    *    * @param get the client Get    * @return a protocol buffer Get    * @throws IOException    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Get
name|toGet
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientProtos
operator|.
name|Get
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Get
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setRow
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|get
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCacheBlocks
argument_list|(
name|get
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMaxVersions
argument_list|(
name|get
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|get
operator|.
name|getFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|get
operator|.
name|getFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|TimeRange
argument_list|>
name|cftr
range|:
name|get
operator|.
name|getColumnFamilyTimeRange
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HBaseProtos
operator|.
name|ColumnFamilyTimeRange
operator|.
name|Builder
name|b
init|=
name|HBaseProtos
operator|.
name|ColumnFamilyTimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|setColumnFamily
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|cftr
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|setTimeRange
argument_list|(
name|timeRangeToProto
argument_list|(
name|cftr
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addCfTimeRange
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|TimeRange
name|timeRange
init|=
name|get
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|timeRange
operator|.
name|isAllTime
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|Builder
name|timeRangeBuilder
init|=
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|timeRangeBuilder
operator|.
name|setFrom
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|timeRangeBuilder
operator|.
name|setTo
argument_list|(
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTimeRange
argument_list|(
name|timeRangeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attributes
init|=
name|get
operator|.
name|getAttributesMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NameBytesPair
operator|.
name|Builder
name|attributeBuilder
init|=
name|NameBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|attributeBuilder
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|attributeBuilder
operator|.
name|setValue
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|attributeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|get
operator|.
name|hasFamilies
argument_list|()
condition|)
block|{
name|Column
operator|.
name|Builder
name|columnBuilder
init|=
name|Column
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|families
init|=
name|get
operator|.
name|getFamilyMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|family
range|:
name|families
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
name|family
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|columnBuilder
operator|.
name|setFamily
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|columnBuilder
operator|.
name|clearQualifier
argument_list|()
expr_stmt|;
if|if
condition|(
name|qualifiers
operator|!=
literal|null
operator|&&
name|qualifiers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|qualifiers
control|)
block|{
name|columnBuilder
operator|.
name|addQualifier
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|addColumn
argument_list|(
name|columnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|get
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|setStoreLimit
argument_list|(
name|get
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|get
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|setStoreOffset
argument_list|(
name|get
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|get
operator|.
name|isCheckExistenceOnly
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setExistenceOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|get
operator|.
name|getConsistency
argument_list|()
operator|!=
literal|null
operator|&&
name|get
operator|.
name|getConsistency
argument_list|()
operator|!=
name|Consistency
operator|.
name|STRONG
condition|)
block|{
name|builder
operator|.
name|setConsistency
argument_list|(
name|toConsistency
argument_list|(
name|get
operator|.
name|getConsistency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|loadColumnFamiliesOnDemand
init|=
name|get
operator|.
name|getLoadColumnFamiliesOnDemandValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|loadColumnFamiliesOnDemand
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setLoadColumnFamiliesOnDemand
argument_list|(
name|loadColumnFamiliesOnDemand
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|static
name|void
name|setTimeRange
parameter_list|(
specifier|final
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|,
specifier|final
name|TimeRange
name|timeRange
parameter_list|)
block|{
if|if
condition|(
operator|!
name|timeRange
operator|.
name|isAllTime
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|Builder
name|timeRangeBuilder
init|=
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|timeRangeBuilder
operator|.
name|setFrom
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|timeRangeBuilder
operator|.
name|setTo
argument_list|(
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTimeRange
argument_list|(
name|timeRangeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toMutation
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer Mutate based on a client Mutation    *    * @param type    * @param mutation    * @return a protobuf'd Mutation    * @throws IOException    */
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
specifier|final
name|long
name|nonce
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toMutation
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|MutationProto
operator|.
name|newBuilder
argument_list|()
argument_list|,
name|nonce
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toMutation
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|,
name|long
name|nonce
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|=
name|getMutationBuilderAndSetCommonFields
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|nonce
operator|!=
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
name|builder
operator|.
name|setNonce
argument_list|(
name|nonce
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
name|MutationType
operator|.
name|INCREMENT
condition|)
block|{
name|TimeRange
name|timeRange
init|=
operator|(
operator|(
name|Increment
operator|)
name|mutation
operator|)
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
name|setTimeRange
argument_list|(
name|builder
argument_list|,
name|timeRange
argument_list|)
expr_stmt|;
block|}
name|ColumnValue
operator|.
name|Builder
name|columnBuilder
init|=
name|ColumnValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|QualifierValue
operator|.
name|Builder
name|valueBuilder
init|=
name|QualifierValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|family
range|:
name|mutation
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|columnBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|columnBuilder
operator|.
name|setFamily
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|family
operator|.
name|getValue
argument_list|()
control|)
block|{
name|valueBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|valueBuilder
operator|.
name|setQualifier
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|valueBuilder
operator|.
name|setValue
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|valueBuilder
operator|.
name|setTimestamp
argument_list|(
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|MutationType
operator|.
name|DELETE
operator|||
operator|(
name|type
operator|==
name|MutationType
operator|.
name|PUT
operator|&&
name|CellUtil
operator|.
name|isDelete
argument_list|(
name|cell
argument_list|)
operator|)
condition|)
block|{
name|KeyValue
operator|.
name|Type
name|keyValueType
init|=
name|KeyValue
operator|.
name|Type
operator|.
name|codeToType
argument_list|(
name|cell
operator|.
name|getTypeByte
argument_list|()
argument_list|)
decl_stmt|;
name|valueBuilder
operator|.
name|setDeleteType
argument_list|(
name|toDeleteType
argument_list|(
name|keyValueType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|columnBuilder
operator|.
name|addQualifierValue
argument_list|(
name|valueBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addColumnValue
argument_list|(
name|columnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Create a protocol buffer MutationProto based on a client Mutation. Does NOT include data.    * Understanding is that the Cell will be transported other than via protobuf.    * @param type    * @param mutation    * @param builder    * @return a protobuf'd Mutation    * @throws IOException    */
specifier|public
specifier|static
name|MutationProto
name|toMutationNoData
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
specifier|final
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toMutationNoData
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer MutationProto based on a client Mutation.  Does NOT include data.    * Understanding is that the Cell will be transported other than via protobuf.    * @param type    * @param mutation    * @return a protobuf'd Mutation    * @throws IOException    */
specifier|public
specifier|static
name|MutationProto
name|toMutationNoData
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationProto
operator|.
name|Builder
name|builder
init|=
name|MutationProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
return|return
name|toMutationNoData
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MutationProto
name|toMutationNoData
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
specifier|final
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|,
name|long
name|nonce
parameter_list|)
throws|throws
name|IOException
block|{
name|getMutationBuilderAndSetCommonFields
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
name|mutation
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mutation
operator|instanceof
name|Increment
condition|)
block|{
name|setTimeRange
argument_list|(
name|builder
argument_list|,
operator|(
operator|(
name|Increment
operator|)
name|mutation
operator|)
operator|.
name|getTimeRange
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nonce
operator|!=
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
name|builder
operator|.
name|setNonce
argument_list|(
name|nonce
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Code shared by {@link #toMutation(MutationType, Mutation)} and    * {@link #toMutationNoData(MutationType, Mutation)}    * @param type    * @param mutation    * @return A partly-filled out protobuf'd Mutation.    */
specifier|private
specifier|static
name|MutationProto
operator|.
name|Builder
name|getMutationBuilderAndSetCommonFields
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setRow
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|mutation
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMutateType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|mutation
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTimestamp
argument_list|(
name|mutation
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attributes
init|=
name|mutation
operator|.
name|getAttributesMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NameBytesPair
operator|.
name|Builder
name|attributeBuilder
init|=
name|NameBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|attributeBuilder
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|attributeBuilder
operator|.
name|setValue
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|attributeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
comment|/**    * Convert a client Result to a protocol buffer Result    *    * @param result the client Result to convert    * @return the converted protocol buffer Result    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Result
name|toResult
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|getExists
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|toResult
argument_list|(
name|result
operator|.
name|getExists
argument_list|()
argument_list|,
name|result
operator|.
name|isStale
argument_list|()
argument_list|)
return|;
block|}
name|Cell
index|[]
name|cells
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
if|if
condition|(
name|cells
operator|==
literal|null
operator|||
name|cells
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|result
operator|.
name|isStale
argument_list|()
condition|?
name|EMPTY_RESULT_PB_STALE
else|:
name|EMPTY_RESULT_PB
return|;
block|}
name|ClientProtos
operator|.
name|Result
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Result
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|cells
control|)
block|{
name|builder
operator|.
name|addCell
argument_list|(
name|toCell
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setStale
argument_list|(
name|result
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setPartial
argument_list|(
name|result
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a client Result to a protocol buffer Result    *    * @param existence the client existence to send    * @return the converted protocol buffer Result    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Result
name|toResult
parameter_list|(
specifier|final
name|boolean
name|existence
parameter_list|,
name|boolean
name|stale
parameter_list|)
block|{
if|if
condition|(
name|stale
condition|)
block|{
return|return
name|existence
condition|?
name|EMPTY_RESULT_PB_EXISTS_TRUE_STALE
else|:
name|EMPTY_RESULT_PB_EXISTS_FALSE_STALE
return|;
block|}
else|else
block|{
return|return
name|existence
condition|?
name|EMPTY_RESULT_PB_EXISTS_TRUE
else|:
name|EMPTY_RESULT_PB_EXISTS_FALSE
return|;
block|}
block|}
comment|/**    * Convert a client Result to a protocol buffer Result.    * The pb Result does not include the Cell data.  That is for transport otherwise.    *    * @param result the client Result to convert    * @return the converted protocol buffer Result    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Result
name|toResultNoData
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|getExists
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|toResult
argument_list|(
name|result
operator|.
name|getExists
argument_list|()
argument_list|,
name|result
operator|.
name|isStale
argument_list|()
argument_list|)
return|;
name|int
name|size
init|=
name|result
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return
name|result
operator|.
name|isStale
argument_list|()
condition|?
name|EMPTY_RESULT_PB_STALE
else|:
name|EMPTY_RESULT_PB
return|;
name|ClientProtos
operator|.
name|Result
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Result
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStale
argument_list|(
name|result
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer Result to a client Result    *    * @param proto the protocol buffer Result to convert    * @return the converted client Result    */
specifier|public
specifier|static
name|Result
name|toResult
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Result
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|.
name|hasExists
argument_list|()
condition|)
block|{
if|if
condition|(
name|proto
operator|.
name|getStale
argument_list|()
condition|)
block|{
return|return
name|proto
operator|.
name|getExists
argument_list|()
condition|?
name|EMPTY_RESULT_EXISTS_TRUE_STALE
else|:
name|EMPTY_RESULT_EXISTS_FALSE_STALE
return|;
block|}
return|return
name|proto
operator|.
name|getExists
argument_list|()
condition|?
name|EMPTY_RESULT_EXISTS_TRUE
else|:
name|EMPTY_RESULT_EXISTS_FALSE
return|;
block|}
name|List
argument_list|<
name|CellProtos
operator|.
name|Cell
argument_list|>
name|values
init|=
name|proto
operator|.
name|getCellList
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|proto
operator|.
name|getStale
argument_list|()
condition|?
name|EMPTY_RESULT_STALE
else|:
name|EMPTY_RESULT
return|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ExtendedCellBuilder
name|builder
init|=
name|ExtendedCellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
decl_stmt|;
for|for
control|(
name|CellProtos
operator|.
name|Cell
name|c
range|:
name|values
control|)
block|{
name|cells
operator|.
name|add
argument_list|(
name|toCell
argument_list|(
name|builder
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|,
literal|null
argument_list|,
name|proto
operator|.
name|getStale
argument_list|()
argument_list|,
name|proto
operator|.
name|getPartial
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Result to a client Result    *    * @param proto the protocol buffer Result to convert    * @param scanner Optional cell scanner.    * @return the converted client Result    * @throws IOException    */
specifier|public
specifier|static
name|Result
name|toResult
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Result
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CellProtos
operator|.
name|Cell
argument_list|>
name|values
init|=
name|proto
operator|.
name|getCellList
argument_list|()
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasExists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|values
operator|!=
literal|null
operator|&&
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
operator|&&
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad proto: exists with cells is no allowed "
operator|+
name|proto
argument_list|)
throw|;
block|}
if|if
condition|(
name|proto
operator|.
name|getStale
argument_list|()
condition|)
block|{
return|return
name|proto
operator|.
name|getExists
argument_list|()
condition|?
name|EMPTY_RESULT_EXISTS_TRUE_STALE
else|:
name|EMPTY_RESULT_EXISTS_FALSE_STALE
return|;
block|}
return|return
name|proto
operator|.
name|getExists
argument_list|()
condition|?
name|EMPTY_RESULT_EXISTS_TRUE
else|:
name|EMPTY_RESULT_EXISTS_FALSE
return|;
block|}
comment|// TODO: Unit test that has some Cells in scanner and some in the proto.
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|)
block|{
name|int
name|count
init|=
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
decl_stmt|;
name|cells
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|count
operator|+
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scanner
operator|.
name|advance
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed get "
operator|+
name|i
operator|+
literal|" of "
operator|+
name|count
argument_list|)
throw|;
name|cells
operator|.
name|add
argument_list|(
name|scanner
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|cells
operator|==
literal|null
condition|)
name|cells
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ExtendedCellBuilder
name|builder
init|=
name|ExtendedCellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
decl_stmt|;
for|for
control|(
name|CellProtos
operator|.
name|Cell
name|c
range|:
name|values
control|)
block|{
name|cells
operator|.
name|add
argument_list|(
name|toCell
argument_list|(
name|builder
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|cells
operator|==
literal|null
operator|||
name|cells
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
operator|(
name|proto
operator|.
name|getStale
argument_list|()
condition|?
name|EMPTY_RESULT_STALE
else|:
name|EMPTY_RESULT
operator|)
else|:
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|,
literal|null
argument_list|,
name|proto
operator|.
name|getStale
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert a ByteArrayComparable to a protocol buffer Comparator    *    * @param comparator the ByteArrayComparable to convert    * @return the converted protocol buffer Comparator    */
specifier|public
specifier|static
name|ComparatorProtos
operator|.
name|Comparator
name|toComparator
parameter_list|(
name|ByteArrayComparable
name|comparator
parameter_list|)
block|{
name|ComparatorProtos
operator|.
name|Comparator
operator|.
name|Builder
name|builder
init|=
name|ComparatorProtos
operator|.
name|Comparator
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|comparator
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSerializedComparator
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|comparator
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer Comparator to a ByteArrayComparable    *    * @param proto the protocol buffer Comparator to convert    * @return the converted ByteArrayComparable    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|ByteArrayComparable
name|toComparator
parameter_list|(
name|ComparatorProtos
operator|.
name|Comparator
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|type
init|=
name|proto
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|funcName
init|=
literal|"parseFrom"
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|proto
operator|.
name|getSerializedComparator
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ByteArrayComparable
argument_list|>
name|c
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|ByteArrayComparable
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|type
argument_list|,
literal|true
argument_list|,
name|CLASS_LOADER
argument_list|)
decl_stmt|;
name|Method
name|parseFrom
init|=
name|c
operator|.
name|getMethod
argument_list|(
name|funcName
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|parseFrom
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to locate function: "
operator|+
name|funcName
operator|+
literal|" in type: "
operator|+
name|type
argument_list|)
throw|;
block|}
return|return
operator|(
name|ByteArrayComparable
operator|)
name|parseFrom
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a protocol buffer Filter to a client Filter    *    * @param proto the protocol buffer Filter to convert    * @return the converted Filter    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Filter
name|toFilter
parameter_list|(
name|FilterProtos
operator|.
name|Filter
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|type
init|=
name|proto
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|proto
operator|.
name|getSerializedFilter
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|funcName
init|=
literal|"parseFrom"
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Filter
argument_list|>
name|c
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Filter
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|type
argument_list|,
literal|true
argument_list|,
name|CLASS_LOADER
argument_list|)
decl_stmt|;
name|Method
name|parseFrom
init|=
name|c
operator|.
name|getMethod
argument_list|(
name|funcName
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|parseFrom
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to locate function: "
operator|+
name|funcName
operator|+
literal|" in type: "
operator|+
name|type
argument_list|)
throw|;
block|}
return|return
operator|(
name|Filter
operator|)
name|parseFrom
operator|.
name|invoke
argument_list|(
name|c
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Either we couldn't instantiate the method object, or "parseFrom" failed.
comment|// In either case, let's not retry.
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a client Filter to a protocol buffer Filter    *    * @param filter the Filter to convert    * @return the converted protocol buffer Filter    */
specifier|public
specifier|static
name|FilterProtos
operator|.
name|Filter
name|toFilter
parameter_list|(
name|Filter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|FilterProtos
operator|.
name|Filter
operator|.
name|Builder
name|builder
init|=
name|FilterProtos
operator|.
name|Filter
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|filter
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSerializedFilter
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|filter
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a delete KeyValue type to protocol buffer DeleteType.    *    * @param type    * @return protocol buffer DeleteType    * @throws IOException    */
specifier|public
specifier|static
name|DeleteType
name|toDeleteType
parameter_list|(
name|KeyValue
operator|.
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Delete
case|:
return|return
name|DeleteType
operator|.
name|DELETE_ONE_VERSION
return|;
case|case
name|DeleteColumn
case|:
return|return
name|DeleteType
operator|.
name|DELETE_MULTIPLE_VERSIONS
return|;
case|case
name|DeleteFamily
case|:
return|return
name|DeleteType
operator|.
name|DELETE_FAMILY
return|;
case|case
name|DeleteFamilyVersion
case|:
return|return
name|DeleteType
operator|.
name|DELETE_FAMILY_VERSION
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown delete type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a protocol buffer DeleteType to delete KeyValue type.    *    * @param type The DeleteType    * @return The type.    * @throws IOException    */
specifier|public
specifier|static
name|KeyValue
operator|.
name|Type
name|fromDeleteType
parameter_list|(
name|DeleteType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DELETE_ONE_VERSION
case|:
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
return|;
case|case
name|DELETE_MULTIPLE_VERSIONS
case|:
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
return|;
case|case
name|DELETE_FAMILY
case|:
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
return|;
case|case
name|DELETE_FAMILY_VERSION
case|:
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamilyVersion
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown delete type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a stringified protocol buffer exception Parameter to a Java Exception    *    * @param parameter the protocol buffer Parameter to convert    * @return the converted Exception    * @throws IOException if failed to deserialize the parameter    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Throwable
name|toException
parameter_list|(
specifier|final
name|NameBytesPair
name|parameter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parameter
operator|==
literal|null
operator|||
operator|!
name|parameter
operator|.
name|hasValue
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|desc
init|=
name|parameter
operator|.
name|getValue
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|parameter
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|c
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|type
argument_list|,
literal|true
argument_list|,
name|CLASS_LOADER
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|cn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cn
operator|=
name|c
operator|.
name|getDeclaredConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|cn
operator|.
name|newInstance
argument_list|(
name|desc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// Could be a raw RemoteException. See HBASE-8987.
name|cn
operator|=
name|c
operator|.
name|getDeclaredConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|cn
operator|.
name|newInstance
argument_list|(
name|type
argument_list|,
name|desc
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Start helpers for Client
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Service
parameter_list|>
name|T
name|newServiceStub
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|service
parameter_list|,
name|RpcChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|T
operator|)
name|Methods
operator|.
name|call
argument_list|(
name|service
argument_list|,
literal|null
argument_list|,
literal|"newStub"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|RpcChannel
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|channel
block|}
argument_list|)
return|;
block|}
comment|// End helpers for Client
comment|// Start helpers for Admin
comment|/**    * A helper to retrieve region info given a region name    * using admin protocol.    *    * @param admin    * @param regionName    * @return the retrieved region info    * @throws IOException    */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
name|getRegionInfo
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|GetRegionInfoRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetRegionInfoRequest
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|GetRegionInfoResponse
name|response
init|=
name|admin
operator|.
name|getRegionInfo
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|toRegionInfo
argument_list|(
name|response
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLoad
argument_list|>
name|getRegionLoad
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|GetRegionLoadRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetRegionLoadRequest
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|GetRegionLoadResponse
name|response
decl_stmt|;
try|try
block|{
name|response
operator|=
name|admin
operator|.
name|getRegionLoad
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
return|return
name|getRegionLoadInfo
argument_list|(
name|response
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLoad
argument_list|>
name|getRegionLoadInfo
parameter_list|(
name|GetRegionLoadResponse
name|regionLoadResponse
parameter_list|)
block|{
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLoad
argument_list|>
name|regionLoadList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|regionLoadResponse
operator|.
name|getRegionLoadsCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionLoad
name|regionLoad
range|:
name|regionLoadResponse
operator|.
name|getRegionLoadsList
argument_list|()
control|)
block|{
name|regionLoadList
operator|.
name|add
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLoad
argument_list|(
name|regionLoad
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|regionLoadList
return|;
block|}
comment|/**    * A helper to close a region given a region name    * using admin protocol.    *    * @param admin    * @param regionName    * @throws IOException    */
specifier|public
specifier|static
name|void
name|closeRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|ServerName
name|server
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|CloseRegionRequest
name|closeRegionRequest
init|=
name|ProtobufUtil
operator|.
name|buildCloseRegionRequest
argument_list|(
name|server
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|closeRegion
argument_list|(
name|controller
argument_list|,
name|closeRegionRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to warmup a region given a region name    * using admin protocol    *    * @param admin    * @param regionInfo    *    */
specifier|public
specifier|static
name|void
name|warmupRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|WarmupRegionRequest
name|warmupRegionRequest
init|=
name|RequestConverter
operator|.
name|buildWarmupRegionRequest
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|admin
operator|.
name|warmupRegion
argument_list|(
name|controller
argument_list|,
name|warmupRegionRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to open a region using admin protocol.    * @param admin    * @param region    * @throws IOException    */
specifier|public
specifier|static
name|void
name|openRegion
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
name|ServerName
name|server
parameter_list|,
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|OpenRegionRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildOpenRegionRequest
argument_list|(
name|server
argument_list|,
name|region
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|openRegion
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to get the all the online regions on a region    * server using admin protocol.    *    * @param admin    * @return a list of online region info    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
argument_list|>
name|getOnlineRegions
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getOnlineRegions
argument_list|(
literal|null
argument_list|,
name|admin
argument_list|)
return|;
block|}
comment|/**    * A helper to get the all the online regions on a region    * server using admin protocol.    * @return a list of online region info    */
specifier|public
specifier|static
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
argument_list|>
name|getOnlineRegions
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
name|GetOnlineRegionRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetOnlineRegionRequest
argument_list|()
decl_stmt|;
name|GetOnlineRegionResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|admin
operator|.
name|getOnlineRegion
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
return|return
name|getRegionInfos
argument_list|(
name|response
argument_list|)
return|;
block|}
comment|/**    * Get the list of region info from a GetOnlineRegionResponse    *    * @param proto the GetOnlineRegionResponse    * @return the list of region info or empty if<code>proto</code> is null    */
specifier|public
specifier|static
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
argument_list|>
name|getRegionInfos
parameter_list|(
specifier|final
name|GetOnlineRegionResponse
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
argument_list|>
name|regionInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|proto
operator|.
name|getRegionInfoList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|proto
operator|.
name|getRegionInfoList
argument_list|()
control|)
block|{
name|regionInfos
operator|.
name|add
argument_list|(
name|toRegionInfo
argument_list|(
name|regionInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|regionInfos
return|;
block|}
comment|/**    * A helper to get the info of a region server using admin protocol.    * @return the server name    */
specifier|public
specifier|static
name|ServerInfo
name|getServerInfo
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
name|GetServerInfoRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetServerInfoRequest
argument_list|()
decl_stmt|;
try|try
block|{
name|GetServerInfoResponse
name|response
init|=
name|admin
operator|.
name|getServerInfo
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getServerInfo
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to get the list of files of a column family    * on a given region using admin protocol.    *    * @return the list of store files    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getStoreFiles
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getStoreFiles
argument_list|(
literal|null
argument_list|,
name|admin
argument_list|,
name|regionName
argument_list|,
name|family
argument_list|)
return|;
block|}
comment|/**    * A helper to get the list of files of a column family    * on a given region using admin protocol.    *    * @return the list of store files    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getStoreFiles
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|GetStoreFileRequest
name|request
init|=
name|ProtobufUtil
operator|.
name|buildGetStoreFileRequest
argument_list|(
name|regionName
argument_list|,
name|family
argument_list|)
decl_stmt|;
try|try
block|{
name|GetStoreFileResponse
name|response
init|=
name|admin
operator|.
name|getStoreFile
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getStoreFileList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|// End helpers for Admin
comment|/*    * Get the total (read + write) requests from a RegionLoad pb    * @param rl - RegionLoad pb    * @return total (read + write) requests    */
specifier|public
specifier|static
name|long
name|getTotalRequestsCount
parameter_list|(
name|RegionLoad
name|rl
parameter_list|)
block|{
if|if
condition|(
name|rl
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|rl
operator|.
name|getReadRequestsCount
argument_list|()
operator|+
name|rl
operator|.
name|getWriteRequestsCount
argument_list|()
return|;
block|}
comment|/**    * @param m Message to get delimited pb serialization of (with pb magic prefix)    */
specifier|public
specifier|static
name|byte
index|[]
name|toDelimitedByteArray
parameter_list|(
specifier|final
name|Message
name|m
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Allocate arbitrary big size so we avoid resizing.
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|ProtobufMagic
operator|.
name|PB_MAGIC
argument_list|)
expr_stmt|;
name|m
operator|.
name|writeDelimitedTo
argument_list|(
name|baos
argument_list|)
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**    * Find the HRegion encoded name based on a region specifier    *    * @param regionSpecifier the region specifier    * @return the corresponding region's encoded name    * @throws DoNotRetryIOException if the specifier type is unsupported    */
specifier|public
specifier|static
name|String
name|getRegionEncodedName
parameter_list|(
specifier|final
name|RegionSpecifier
name|regionSpecifier
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
name|ByteString
name|value
init|=
name|regionSpecifier
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|RegionSpecifierType
name|type
init|=
name|regionSpecifier
operator|.
name|getType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|REGION_NAME
case|:
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|value
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
case|case
name|ENCODED_REGION_NAME
case|:
return|return
name|value
operator|.
name|toStringUtf8
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Unsupported region specifier type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|ScanMetrics
name|toScanMetrics
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|MapReduceProtos
operator|.
name|ScanMetrics
name|pScanMetrics
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pScanMetrics
operator|=
name|MapReduceProtos
operator|.
name|ScanMetrics
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
comment|// Ignored there are just no key values to add.
block|}
name|ScanMetrics
name|scanMetrics
init|=
operator|new
name|ScanMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|pScanMetrics
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HBaseProtos
operator|.
name|NameInt64Pair
name|pair
range|:
name|pScanMetrics
operator|.
name|getMetricsList
argument_list|()
control|)
block|{
if|if
condition|(
name|pair
operator|.
name|hasName
argument_list|()
operator|&&
name|pair
operator|.
name|hasValue
argument_list|()
condition|)
block|{
name|scanMetrics
operator|.
name|setCounter
argument_list|(
name|pair
operator|.
name|getName
argument_list|()
argument_list|,
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|scanMetrics
return|;
block|}
specifier|public
specifier|static
name|MapReduceProtos
operator|.
name|ScanMetrics
name|toScanMetrics
parameter_list|(
name|ScanMetrics
name|scanMetrics
parameter_list|,
name|boolean
name|reset
parameter_list|)
block|{
name|MapReduceProtos
operator|.
name|ScanMetrics
operator|.
name|Builder
name|builder
init|=
name|MapReduceProtos
operator|.
name|ScanMetrics
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|metrics
init|=
name|scanMetrics
operator|.
name|getMetricsMap
argument_list|(
name|reset
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|metrics
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HBaseProtos
operator|.
name|NameInt64Pair
name|nameInt64Pair
init|=
name|HBaseProtos
operator|.
name|NameInt64Pair
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addMetrics
argument_list|(
name|nameInt64Pair
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Unwraps an exception from a protobuf service into the underlying (expected) IOException.    * This method will<strong>always</strong> throw an exception.    * @param se the {@code ServiceException} instance to convert into an {@code IOException}    */
specifier|public
specifier|static
name|void
name|toIOException
parameter_list|(
name|ServiceException
name|se
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|se
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null service exception passed!"
argument_list|)
throw|;
block|}
name|Throwable
name|cause
init|=
name|se
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
operator|&&
name|cause
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|cause
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|CellProtos
operator|.
name|Cell
name|toCell
parameter_list|(
specifier|final
name|Cell
name|kv
parameter_list|)
block|{
comment|// Doing this is going to kill us if we do it for all data passed.
comment|// St.Ack 20121205
name|CellProtos
operator|.
name|Cell
operator|.
name|Builder
name|kvbuilder
init|=
name|CellProtos
operator|.
name|Cell
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|kv
operator|instanceof
name|ByteBufferCell
condition|)
block|{
name|kvbuilder
operator|.
name|setRow
argument_list|(
name|wrap
argument_list|(
operator|(
operator|(
name|ByteBufferCell
operator|)
name|kv
operator|)
operator|.
name|getRowByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferCell
operator|)
name|kv
operator|)
operator|.
name|getRowPosition
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setFamily
argument_list|(
name|wrap
argument_list|(
operator|(
operator|(
name|ByteBufferCell
operator|)
name|kv
operator|)
operator|.
name|getFamilyByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferCell
operator|)
name|kv
operator|)
operator|.
name|getFamilyPosition
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setQualifier
argument_list|(
name|wrap
argument_list|(
operator|(
operator|(
name|ByteBufferCell
operator|)
name|kv
operator|)
operator|.
name|getQualifierByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferCell
operator|)
name|kv
operator|)
operator|.
name|getQualifierPosition
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setCellType
argument_list|(
name|CellProtos
operator|.
name|CellType
operator|.
name|valueOf
argument_list|(
name|kv
operator|.
name|getTypeByte
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setTimestamp
argument_list|(
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setValue
argument_list|(
name|wrap
argument_list|(
operator|(
operator|(
name|ByteBufferCell
operator|)
name|kv
operator|)
operator|.
name|getValueByteBuffer
argument_list|()
argument_list|,
operator|(
operator|(
name|ByteBufferCell
operator|)
name|kv
operator|)
operator|.
name|getValuePosition
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO : Once tags become first class then we may have to set tags to kvbuilder.
block|}
else|else
block|{
name|kvbuilder
operator|.
name|setRow
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|kv
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setFamily
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|kv
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setQualifier
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|kv
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setCellType
argument_list|(
name|CellProtos
operator|.
name|CellType
operator|.
name|valueOf
argument_list|(
name|kv
operator|.
name|getTypeByte
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setTimestamp
argument_list|(
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setValue
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|kv
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|kvbuilder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|ByteString
name|wrap
parameter_list|(
name|ByteBuffer
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|ByteBuffer
name|dup
init|=
name|b
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|dup
operator|.
name|position
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|dup
operator|.
name|limit
argument_list|(
name|offset
operator|+
name|length
argument_list|)
expr_stmt|;
return|return
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|dup
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Cell
name|toCell
parameter_list|(
name|ExtendedCellBuilder
name|cellBuilder
parameter_list|,
specifier|final
name|CellProtos
operator|.
name|Cell
name|cell
parameter_list|)
block|{
return|return
name|cellBuilder
operator|.
name|clear
argument_list|()
operator|.
name|setRow
argument_list|(
name|cell
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|cell
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|cell
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
operator|(
name|byte
operator|)
name|cell
operator|.
name|getCellType
argument_list|()
operator|.
name|getNumber
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|cell
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|NamespaceDescriptor
name|toProtoNamespaceDescriptor
parameter_list|(
name|NamespaceDescriptor
name|ns
parameter_list|)
block|{
name|HBaseProtos
operator|.
name|NamespaceDescriptor
operator|.
name|Builder
name|b
init|=
name|HBaseProtos
operator|.
name|NamespaceDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|ns
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|ns
operator|.
name|getConfiguration
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|b
operator|.
name|addConfiguration
argument_list|(
name|HBaseProtos
operator|.
name|NameStringPair
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NamespaceDescriptor
name|toNamespaceDescriptor
parameter_list|(
name|HBaseProtos
operator|.
name|NamespaceDescriptor
name|desc
parameter_list|)
block|{
name|NamespaceDescriptor
operator|.
name|Builder
name|b
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|NameStringPair
name|prop
range|:
name|desc
operator|.
name|getConfigurationList
argument_list|()
control|)
block|{
name|b
operator|.
name|addConfiguration
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|,
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|CompactionDescriptor
name|toCompactionDescriptor
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
name|info
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|inputPaths
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|outputPaths
parameter_list|,
name|Path
name|storeDir
parameter_list|)
block|{
return|return
name|toCompactionDescriptor
argument_list|(
name|info
argument_list|,
literal|null
argument_list|,
name|family
argument_list|,
name|inputPaths
argument_list|,
name|outputPaths
argument_list|,
name|storeDir
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CompactionDescriptor
name|toCompactionDescriptor
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
name|info
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|inputPaths
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|outputPaths
parameter_list|,
name|Path
name|storeDir
parameter_list|)
block|{
comment|// compaction descriptor contains relative paths.
comment|// input / output paths are relative to the store dir
comment|// store dir is relative to region dir
name|CompactionDescriptor
operator|.
name|Builder
name|builder
init|=
name|CompactionDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|info
operator|.
name|getTable
argument_list|()
operator|.
name|toBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setEncodedRegionName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|regionName
operator|==
literal|null
condition|?
name|info
operator|.
name|getEncodedNameAsBytes
argument_list|()
else|:
name|regionName
argument_list|)
argument_list|)
operator|.
name|setFamilyName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|family
argument_list|)
argument_list|)
operator|.
name|setStoreHomeDir
argument_list|(
name|storeDir
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|//make relative
for|for
control|(
name|Path
name|inputPath
range|:
name|inputPaths
control|)
block|{
name|builder
operator|.
name|addCompactionInput
argument_list|(
name|inputPath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//relative path
block|}
for|for
control|(
name|Path
name|outputPath
range|:
name|outputPaths
control|)
block|{
name|builder
operator|.
name|addCompactionOutput
argument_list|(
name|outputPath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setRegionName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|info
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|FlushDescriptor
name|toFlushDescriptor
parameter_list|(
name|FlushAction
name|action
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
name|hri
parameter_list|,
name|long
name|flushSeqId
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|committedFiles
parameter_list|)
block|{
name|FlushDescriptor
operator|.
name|Builder
name|desc
init|=
name|FlushDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAction
argument_list|(
name|action
argument_list|)
operator|.
name|setEncodedRegionName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setRegionName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setFlushSequenceNumber
argument_list|(
name|flushSeqId
argument_list|)
operator|.
name|setTableName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|entry
range|:
name|committedFiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|WALProtos
operator|.
name|FlushDescriptor
operator|.
name|StoreFlushDescriptor
operator|.
name|Builder
name|builder
init|=
name|WALProtos
operator|.
name|FlushDescriptor
operator|.
name|StoreFlushDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setFamilyName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStoreHomeDir
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//relative to region
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|builder
operator|.
name|addFlushOutput
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|desc
operator|.
name|addStoreFlushes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|RegionEventDescriptor
name|toRegionEventDescriptor
parameter_list|(
name|EventType
name|eventType
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
name|hri
parameter_list|,
name|long
name|seqId
parameter_list|,
name|ServerName
name|server
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|storeFiles
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|tableNameAsBytes
init|=
name|hri
operator|.
name|getTable
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|encodedNameAsBytes
init|=
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|regionNameAsBytes
init|=
name|hri
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
return|return
name|toRegionEventDescriptor
argument_list|(
name|eventType
argument_list|,
name|tableNameAsBytes
argument_list|,
name|encodedNameAsBytes
argument_list|,
name|regionNameAsBytes
argument_list|,
name|seqId
argument_list|,
name|server
argument_list|,
name|storeFiles
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RegionEventDescriptor
name|toRegionEventDescriptor
parameter_list|(
name|EventType
name|eventType
parameter_list|,
name|byte
index|[]
name|tableNameAsBytes
parameter_list|,
name|byte
index|[]
name|encodedNameAsBytes
parameter_list|,
name|byte
index|[]
name|regionNameAsBytes
parameter_list|,
name|long
name|seqId
parameter_list|,
name|ServerName
name|server
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|storeFiles
parameter_list|)
block|{
name|RegionEventDescriptor
operator|.
name|Builder
name|desc
init|=
name|RegionEventDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setEventType
argument_list|(
name|eventType
argument_list|)
operator|.
name|setTableName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|tableNameAsBytes
argument_list|)
argument_list|)
operator|.
name|setEncodedRegionName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|encodedNameAsBytes
argument_list|)
argument_list|)
operator|.
name|setRegionName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|regionNameAsBytes
argument_list|)
argument_list|)
operator|.
name|setLogSequenceNumber
argument_list|(
name|seqId
argument_list|)
operator|.
name|setServer
argument_list|(
name|toServerName
argument_list|(
name|server
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|entry
range|:
name|storeFiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StoreDescriptor
operator|.
name|Builder
name|builder
init|=
name|StoreDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setFamilyName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStoreHomeDir
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|builder
operator|.
name|addStoreFile
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|desc
operator|.
name|addStores
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Return short version of Message toString'd, shorter than TextFormat#shortDebugString.    * Tries to NOT print out data both because it can be big but also so we do not have data in our    * logs. Use judiciously.    * @param m    * @return toString of passed<code>m</code>    */
specifier|public
specifier|static
name|String
name|getShortTextFormat
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
return|return
literal|"null"
return|;
if|if
condition|(
name|m
operator|instanceof
name|ScanRequest
condition|)
block|{
comment|// This should be small and safe to output.  No data.
return|return
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|m
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|RegionServerReportRequest
condition|)
block|{
comment|// Print a short message only, just the servername and the requests, not the full load.
name|RegionServerReportRequest
name|r
init|=
operator|(
name|RegionServerReportRequest
operator|)
name|m
decl_stmt|;
return|return
literal|"server "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|r
operator|.
name|getServer
argument_list|()
argument_list|)
operator|+
literal|" load { numberOfRequests: "
operator|+
name|r
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRequests
argument_list|()
operator|+
literal|" }"
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|RegionServerStartupRequest
condition|)
block|{
comment|// Should be small enough.
return|return
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|m
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|MutationProto
condition|)
block|{
return|return
name|toShortString
argument_list|(
operator|(
name|MutationProto
operator|)
name|m
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|GetRequest
condition|)
block|{
name|GetRequest
name|r
init|=
operator|(
name|GetRequest
operator|)
name|m
decl_stmt|;
return|return
literal|"region= "
operator|+
name|getStringForByteString
argument_list|(
name|r
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|", row="
operator|+
name|getStringForByteString
argument_list|(
name|r
operator|.
name|getGet
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|ClientProtos
operator|.
name|MultiRequest
condition|)
block|{
name|ClientProtos
operator|.
name|MultiRequest
name|r
init|=
operator|(
name|ClientProtos
operator|.
name|MultiRequest
operator|)
name|m
decl_stmt|;
comment|// Get first set of Actions.
name|ClientProtos
operator|.
name|RegionAction
name|actions
init|=
name|r
operator|.
name|getRegionActionList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|row
init|=
name|actions
operator|.
name|getActionCount
argument_list|()
operator|<=
literal|0
condition|?
literal|""
else|:
name|getStringForByteString
argument_list|(
name|actions
operator|.
name|getAction
argument_list|(
literal|0
argument_list|)
operator|.
name|hasGet
argument_list|()
condition|?
name|actions
operator|.
name|getAction
argument_list|(
literal|0
argument_list|)
operator|.
name|getGet
argument_list|()
operator|.
name|getRow
argument_list|()
else|:
name|actions
operator|.
name|getAction
argument_list|(
literal|0
argument_list|)
operator|.
name|getMutation
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
return|return
literal|"region= "
operator|+
name|getStringForByteString
argument_list|(
name|actions
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|", for "
operator|+
name|r
operator|.
name|getRegionActionCount
argument_list|()
operator|+
literal|" actions and 1st row key="
operator|+
name|row
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|ClientProtos
operator|.
name|MutateRequest
condition|)
block|{
name|ClientProtos
operator|.
name|MutateRequest
name|r
init|=
operator|(
name|ClientProtos
operator|.
name|MutateRequest
operator|)
name|m
decl_stmt|;
return|return
literal|"region= "
operator|+
name|getStringForByteString
argument_list|(
name|r
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|", row="
operator|+
name|getStringForByteString
argument_list|(
name|r
operator|.
name|getMutation
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|ClientProtos
operator|.
name|CoprocessorServiceRequest
condition|)
block|{
name|ClientProtos
operator|.
name|CoprocessorServiceRequest
name|r
init|=
operator|(
name|ClientProtos
operator|.
name|CoprocessorServiceRequest
operator|)
name|m
decl_stmt|;
return|return
literal|"coprocessorService= "
operator|+
name|r
operator|.
name|getCall
argument_list|()
operator|.
name|getServiceName
argument_list|()
operator|+
literal|":"
operator|+
name|r
operator|.
name|getCall
argument_list|()
operator|.
name|getMethodName
argument_list|()
return|;
block|}
return|return
literal|"TODO: "
operator|+
name|m
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getStringForByteString
parameter_list|(
name|ByteString
name|bs
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|bs
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Print out some subset of a MutationProto rather than all of it and its data    * @param proto Protobuf to print out    * @return Short String of mutation proto    */
specifier|static
name|String
name|toShortString
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|)
block|{
return|return
literal|"row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
operator|+
literal|", type="
operator|+
name|proto
operator|.
name|getMutateType
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|TableName
name|toTableName
parameter_list|(
name|HBaseProtos
operator|.
name|TableName
name|tableNamePB
parameter_list|)
block|{
return|return
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableNamePB
operator|.
name|getNamespace
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
argument_list|,
name|tableNamePB
operator|.
name|getQualifier
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|TableName
name|toProtoTableName
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|HBaseProtos
operator|.
name|TableName
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNamespace
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|tableName
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|tableName
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|TableName
argument_list|>
name|toTableNameList
parameter_list|(
name|List
argument_list|<
name|HBaseProtos
operator|.
name|TableName
argument_list|>
name|tableNamesList
parameter_list|)
block|{
if|if
condition|(
name|tableNamesList
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
return|return
name|tableNamesList
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ProtobufUtil
operator|::
name|toTableName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableName
index|[]
name|getTableNameArray
parameter_list|(
name|List
argument_list|<
name|HBaseProtos
operator|.
name|TableName
argument_list|>
name|tableNamesList
parameter_list|)
block|{
if|if
condition|(
name|tableNamesList
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TableName
index|[
literal|0
index|]
return|;
block|}
name|TableName
index|[]
name|tableNames
init|=
operator|new
name|TableName
index|[
name|tableNamesList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNamesList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|tableNames
index|[
name|i
index|]
operator|=
name|toTableName
argument_list|(
name|tableNamesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tableNames
return|;
block|}
comment|/**    * Convert a protocol buffer CellVisibility to a client CellVisibility    *    * @param proto    * @return the converted client CellVisibility    */
specifier|public
specifier|static
name|CellVisibility
name|toCellVisibility
parameter_list|(
name|ClientProtos
operator|.
name|CellVisibility
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|CellVisibility
argument_list|(
name|proto
operator|.
name|getExpression
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer CellVisibility bytes to a client CellVisibility    *    * @param protoBytes    * @return the converted client CellVisibility    * @throws DeserializationException    */
specifier|public
specifier|static
name|CellVisibility
name|toCellVisibility
parameter_list|(
name|byte
index|[]
name|protoBytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|protoBytes
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ClientProtos
operator|.
name|CellVisibility
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|CellVisibility
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|CellVisibility
name|proto
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|protoBytes
argument_list|)
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|toCellVisibility
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer CellVisibility based on a client CellVisibility.    *    * @param cellVisibility    * @return a protocol buffer CellVisibility    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|CellVisibility
name|toCellVisibility
parameter_list|(
name|CellVisibility
name|cellVisibility
parameter_list|)
block|{
name|ClientProtos
operator|.
name|CellVisibility
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|CellVisibility
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setExpression
argument_list|(
name|cellVisibility
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer Authorizations to a client Authorizations    *    * @param proto    * @return the converted client Authorizations    */
specifier|public
specifier|static
name|Authorizations
name|toAuthorizations
parameter_list|(
name|ClientProtos
operator|.
name|Authorizations
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|Authorizations
argument_list|(
name|proto
operator|.
name|getLabelList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Authorizations bytes to a client Authorizations    *    * @param protoBytes    * @return the converted client Authorizations    * @throws DeserializationException    */
specifier|public
specifier|static
name|Authorizations
name|toAuthorizations
parameter_list|(
name|byte
index|[]
name|protoBytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|protoBytes
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ClientProtos
operator|.
name|Authorizations
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Authorizations
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|Authorizations
name|proto
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builder
argument_list|,
name|protoBytes
argument_list|)
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|toAuthorizations
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer Authorizations based on a client Authorizations.    *    * @param authorizations    * @return a protocol buffer Authorizations    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Authorizations
name|toAuthorizations
parameter_list|(
name|Authorizations
name|authorizations
parameter_list|)
block|{
name|ClientProtos
operator|.
name|Authorizations
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Authorizations
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|label
range|:
name|authorizations
operator|.
name|getLabels
argument_list|()
control|)
block|{
name|builder
operator|.
name|addLabel
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer TimeUnit to a client TimeUnit    *    * @param proto    * @return the converted client TimeUnit    */
specifier|public
specifier|static
name|TimeUnit
name|toTimeUnit
parameter_list|(
specifier|final
name|HBaseProtos
operator|.
name|TimeUnit
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|NANOSECONDS
case|:
return|return
name|TimeUnit
operator|.
name|NANOSECONDS
return|;
case|case
name|MICROSECONDS
case|:
return|return
name|TimeUnit
operator|.
name|MICROSECONDS
return|;
case|case
name|MILLISECONDS
case|:
return|return
name|TimeUnit
operator|.
name|MILLISECONDS
return|;
case|case
name|SECONDS
case|:
return|return
name|TimeUnit
operator|.
name|SECONDS
return|;
case|case
name|MINUTES
case|:
return|return
name|TimeUnit
operator|.
name|MINUTES
return|;
case|case
name|HOURS
case|:
return|return
name|TimeUnit
operator|.
name|HOURS
return|;
case|case
name|DAYS
case|:
return|return
name|TimeUnit
operator|.
name|DAYS
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid TimeUnit "
operator|+
name|proto
argument_list|)
throw|;
block|}
comment|/**    * Convert a client TimeUnit to a protocol buffer TimeUnit    *    * @param timeUnit    * @return the converted protocol buffer TimeUnit    */
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|TimeUnit
name|toProtoTimeUnit
parameter_list|(
specifier|final
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
switch|switch
condition|(
name|timeUnit
condition|)
block|{
case|case
name|NANOSECONDS
case|:
return|return
name|HBaseProtos
operator|.
name|TimeUnit
operator|.
name|NANOSECONDS
return|;
case|case
name|MICROSECONDS
case|:
return|return
name|HBaseProtos
operator|.
name|TimeUnit
operator|.
name|MICROSECONDS
return|;
case|case
name|MILLISECONDS
case|:
return|return
name|HBaseProtos
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
return|;
case|case
name|SECONDS
case|:
return|return
name|HBaseProtos
operator|.
name|TimeUnit
operator|.
name|SECONDS
return|;
case|case
name|MINUTES
case|:
return|return
name|HBaseProtos
operator|.
name|TimeUnit
operator|.
name|MINUTES
return|;
case|case
name|HOURS
case|:
return|return
name|HBaseProtos
operator|.
name|TimeUnit
operator|.
name|HOURS
return|;
case|case
name|DAYS
case|:
return|return
name|HBaseProtos
operator|.
name|TimeUnit
operator|.
name|DAYS
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid TimeUnit "
operator|+
name|timeUnit
argument_list|)
throw|;
block|}
comment|/**    * Convert a protocol buffer ThrottleType to a client ThrottleType    *    * @param proto    * @return the converted client ThrottleType    */
specifier|public
specifier|static
name|ThrottleType
name|toThrottleType
parameter_list|(
specifier|final
name|QuotaProtos
operator|.
name|ThrottleType
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|REQUEST_NUMBER
case|:
return|return
name|ThrottleType
operator|.
name|REQUEST_NUMBER
return|;
case|case
name|REQUEST_SIZE
case|:
return|return
name|ThrottleType
operator|.
name|REQUEST_SIZE
return|;
case|case
name|WRITE_NUMBER
case|:
return|return
name|ThrottleType
operator|.
name|WRITE_NUMBER
return|;
case|case
name|WRITE_SIZE
case|:
return|return
name|ThrottleType
operator|.
name|WRITE_SIZE
return|;
case|case
name|READ_NUMBER
case|:
return|return
name|ThrottleType
operator|.
name|READ_NUMBER
return|;
case|case
name|READ_SIZE
case|:
return|return
name|ThrottleType
operator|.
name|READ_SIZE
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid ThrottleType "
operator|+
name|proto
argument_list|)
throw|;
block|}
comment|/**    * Convert a client ThrottleType to a protocol buffer ThrottleType    *    * @param type    * @return the converted protocol buffer ThrottleType    */
specifier|public
specifier|static
name|QuotaProtos
operator|.
name|ThrottleType
name|toProtoThrottleType
parameter_list|(
specifier|final
name|ThrottleType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|REQUEST_NUMBER
case|:
return|return
name|QuotaProtos
operator|.
name|ThrottleType
operator|.
name|REQUEST_NUMBER
return|;
case|case
name|REQUEST_SIZE
case|:
return|return
name|QuotaProtos
operator|.
name|ThrottleType
operator|.
name|REQUEST_SIZE
return|;
case|case
name|WRITE_NUMBER
case|:
return|return
name|QuotaProtos
operator|.
name|ThrottleType
operator|.
name|WRITE_NUMBER
return|;
case|case
name|WRITE_SIZE
case|:
return|return
name|QuotaProtos
operator|.
name|ThrottleType
operator|.
name|WRITE_SIZE
return|;
case|case
name|READ_NUMBER
case|:
return|return
name|QuotaProtos
operator|.
name|ThrottleType
operator|.
name|READ_NUMBER
return|;
case|case
name|READ_SIZE
case|:
return|return
name|QuotaProtos
operator|.
name|ThrottleType
operator|.
name|READ_SIZE
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid ThrottleType "
operator|+
name|type
argument_list|)
throw|;
block|}
comment|/**    * Convert a protocol buffer QuotaScope to a client QuotaScope    *    * @param proto    * @return the converted client QuotaScope    */
specifier|public
specifier|static
name|QuotaScope
name|toQuotaScope
parameter_list|(
specifier|final
name|QuotaProtos
operator|.
name|QuotaScope
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|CLUSTER
case|:
return|return
name|QuotaScope
operator|.
name|CLUSTER
return|;
case|case
name|MACHINE
case|:
return|return
name|QuotaScope
operator|.
name|MACHINE
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid QuotaScope "
operator|+
name|proto
argument_list|)
throw|;
block|}
comment|/**    * Convert a client QuotaScope to a protocol buffer QuotaScope    *    * @param scope    * @return the converted protocol buffer QuotaScope    */
specifier|public
specifier|static
name|QuotaProtos
operator|.
name|QuotaScope
name|toProtoQuotaScope
parameter_list|(
specifier|final
name|QuotaScope
name|scope
parameter_list|)
block|{
switch|switch
condition|(
name|scope
condition|)
block|{
case|case
name|CLUSTER
case|:
return|return
name|QuotaProtos
operator|.
name|QuotaScope
operator|.
name|CLUSTER
return|;
case|case
name|MACHINE
case|:
return|return
name|QuotaProtos
operator|.
name|QuotaScope
operator|.
name|MACHINE
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid QuotaScope "
operator|+
name|scope
argument_list|)
throw|;
block|}
comment|/**    * Convert a protocol buffer QuotaType to a client QuotaType    *    * @param proto    * @return the converted client QuotaType    */
specifier|public
specifier|static
name|QuotaType
name|toQuotaScope
parameter_list|(
specifier|final
name|QuotaProtos
operator|.
name|QuotaType
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|THROTTLE
case|:
return|return
name|QuotaType
operator|.
name|THROTTLE
return|;
case|case
name|SPACE
case|:
return|return
name|QuotaType
operator|.
name|SPACE
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid QuotaType "
operator|+
name|proto
argument_list|)
throw|;
block|}
comment|/**    * Convert a client QuotaType to a protocol buffer QuotaType    *    * @param type    * @return the converted protocol buffer QuotaType    */
specifier|public
specifier|static
name|QuotaProtos
operator|.
name|QuotaType
name|toProtoQuotaScope
parameter_list|(
specifier|final
name|QuotaType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|THROTTLE
case|:
return|return
name|QuotaProtos
operator|.
name|QuotaType
operator|.
name|THROTTLE
return|;
case|case
name|SPACE
case|:
return|return
name|QuotaProtos
operator|.
name|QuotaType
operator|.
name|SPACE
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid QuotaType "
operator|+
name|type
argument_list|)
throw|;
block|}
comment|/**    * Converts a protocol buffer SpaceViolationPolicy to a client SpaceViolationPolicy.    *    * @param proto The protocol buffer space violation policy.    * @return The corresponding client SpaceViolationPolicy.    */
specifier|public
specifier|static
name|SpaceViolationPolicy
name|toViolationPolicy
parameter_list|(
specifier|final
name|QuotaProtos
operator|.
name|SpaceViolationPolicy
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|DISABLE
case|:
return|return
name|SpaceViolationPolicy
operator|.
name|DISABLE
return|;
case|case
name|NO_WRITES_COMPACTIONS
case|:
return|return
name|SpaceViolationPolicy
operator|.
name|NO_WRITES_COMPACTIONS
return|;
case|case
name|NO_WRITES
case|:
return|return
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
return|;
case|case
name|NO_INSERTS
case|:
return|return
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid SpaceViolationPolicy "
operator|+
name|proto
argument_list|)
throw|;
block|}
comment|/**    * Converts a client SpaceViolationPolicy to a protocol buffer SpaceViolationPolicy.    *    * @param policy The client SpaceViolationPolicy object.    * @return The corresponding protocol buffer SpaceViolationPolicy.    */
specifier|public
specifier|static
name|QuotaProtos
operator|.
name|SpaceViolationPolicy
name|toProtoViolationPolicy
parameter_list|(
specifier|final
name|SpaceViolationPolicy
name|policy
parameter_list|)
block|{
switch|switch
condition|(
name|policy
condition|)
block|{
case|case
name|DISABLE
case|:
return|return
name|QuotaProtos
operator|.
name|SpaceViolationPolicy
operator|.
name|DISABLE
return|;
case|case
name|NO_WRITES_COMPACTIONS
case|:
return|return
name|QuotaProtos
operator|.
name|SpaceViolationPolicy
operator|.
name|NO_WRITES_COMPACTIONS
return|;
case|case
name|NO_WRITES
case|:
return|return
name|QuotaProtos
operator|.
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
return|;
case|case
name|NO_INSERTS
case|:
return|return
name|QuotaProtos
operator|.
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid SpaceViolationPolicy "
operator|+
name|policy
argument_list|)
throw|;
block|}
comment|/**    * Build a protocol buffer TimedQuota    *    * @param limit the allowed number of request/data per timeUnit    * @param timeUnit the limit time unit    * @param scope the quota scope    * @return the protocol buffer TimedQuota    */
specifier|public
specifier|static
name|QuotaProtos
operator|.
name|TimedQuota
name|toTimedQuota
parameter_list|(
specifier|final
name|long
name|limit
parameter_list|,
specifier|final
name|TimeUnit
name|timeUnit
parameter_list|,
specifier|final
name|QuotaScope
name|scope
parameter_list|)
block|{
return|return
name|QuotaProtos
operator|.
name|TimedQuota
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSoftLimit
argument_list|(
name|limit
argument_list|)
operator|.
name|setTimeUnit
argument_list|(
name|toProtoTimeUnit
argument_list|(
name|timeUnit
argument_list|)
argument_list|)
operator|.
name|setScope
argument_list|(
name|toProtoQuotaScope
argument_list|(
name|scope
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Builds a protocol buffer SpaceQuota.    *    * @param limit The maximum space usage for the quota in bytes.    * @param violationPolicy The policy to apply when the quota is violated.    * @return The protocol buffer SpaceQuota.    */
specifier|public
specifier|static
name|QuotaProtos
operator|.
name|SpaceQuota
name|toProtoSpaceQuota
parameter_list|(
specifier|final
name|long
name|limit
parameter_list|,
specifier|final
name|SpaceViolationPolicy
name|violationPolicy
parameter_list|)
block|{
return|return
name|QuotaProtos
operator|.
name|SpaceQuota
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSoftLimit
argument_list|(
name|limit
argument_list|)
operator|.
name|setViolationPolicy
argument_list|(
name|toProtoViolationPolicy
argument_list|(
name|violationPolicy
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Generates a marker for the WAL so that we propagate the notion of a bulk region load    * throughout the WAL.    *    * @param tableName         The tableName into which the bulk load is being imported into.    * @param encodedRegionName Encoded region name of the region which is being bulk loaded.    * @param storeFiles        A set of store files of a column family are bulk loaded.    * @param storeFilesSize  Map of store files and their lengths    * @param bulkloadSeqId     sequence ID (by a force flush) used to create bulk load hfile    *                          name    * @return The WAL log marker for bulk loads.    */
specifier|public
specifier|static
name|WALProtos
operator|.
name|BulkLoadDescriptor
name|toBulkLoadDescriptor
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ByteString
name|encodedRegionName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|storeFiles
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|storeFilesSize
parameter_list|,
name|long
name|bulkloadSeqId
parameter_list|)
block|{
name|BulkLoadDescriptor
operator|.
name|Builder
name|desc
init|=
name|BulkLoadDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|setEncodedRegionName
argument_list|(
name|encodedRegionName
argument_list|)
operator|.
name|setBulkloadSeqNum
argument_list|(
name|bulkloadSeqId
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|entry
range|:
name|storeFiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|WALProtos
operator|.
name|StoreDescriptor
operator|.
name|Builder
name|builder
init|=
name|StoreDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setFamilyName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStoreHomeDir
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// relative to region
for|for
control|(
name|Path
name|path
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|path
operator|.
name|getName
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addStoreFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Long
name|size
init|=
name|storeFilesSize
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|==
literal|null
condition|?
operator|(
name|Long
operator|)
literal|0L
else|:
name|storeFilesSize
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setStoreFileSizeBytes
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
name|desc
operator|.
name|addStores
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * This version of protobuf's mergeDelimitedFrom avoid the hard-coded 64MB limit for decoding    * buffers    * @param builder current message builder    * @param in Inputsream with delimited protobuf data    * @throws IOException    */
specifier|public
specifier|static
name|void
name|mergeDelimitedFrom
parameter_list|(
name|Message
operator|.
name|Builder
name|builder
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// This used to be builder.mergeDelimitedFrom(in);
comment|// but is replaced to allow us to bump the protobuf size limit.
specifier|final
name|int
name|firstByte
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstByte
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|final
name|int
name|size
init|=
name|CodedInputStream
operator|.
name|readRawVarint32
argument_list|(
name|firstByte
argument_list|,
name|in
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|limitedInput
init|=
operator|new
name|LimitInputStream
argument_list|(
name|in
argument_list|,
name|size
argument_list|)
decl_stmt|;
specifier|final
name|CodedInputStream
name|codedInput
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|limitedInput
argument_list|)
decl_stmt|;
name|codedInput
operator|.
name|setSizeLimit
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|builder
operator|.
name|mergeFrom
argument_list|(
name|codedInput
argument_list|)
expr_stmt|;
name|codedInput
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This version of protobuf's mergeFrom avoids the hard-coded 64MB limit for decoding    * buffers where the message size is known    * @param builder current message builder    * @param in InputStream containing protobuf data    * @param size known size of protobuf data    * @throws IOException    */
specifier|public
specifier|static
name|void
name|mergeFrom
parameter_list|(
name|Message
operator|.
name|Builder
name|builder
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|CodedInputStream
name|codedInput
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|codedInput
operator|.
name|setSizeLimit
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|builder
operator|.
name|mergeFrom
argument_list|(
name|codedInput
argument_list|)
expr_stmt|;
name|codedInput
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * This version of protobuf's mergeFrom avoids the hard-coded 64MB limit for decoding    * buffers where the message size is not known    * @param builder current message builder    * @param in InputStream containing protobuf data    * @throws IOException    */
specifier|public
specifier|static
name|void
name|mergeFrom
parameter_list|(
name|Message
operator|.
name|Builder
name|builder
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|CodedInputStream
name|codedInput
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|codedInput
operator|.
name|setSizeLimit
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|mergeFrom
argument_list|(
name|codedInput
argument_list|)
expr_stmt|;
name|codedInput
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * This version of protobuf's mergeFrom avoids the hard-coded 64MB limit for decoding    * buffers when working with ByteStrings    * @param builder current message builder    * @param bs ByteString containing the    * @throws IOException    */
specifier|public
specifier|static
name|void
name|mergeFrom
parameter_list|(
name|Message
operator|.
name|Builder
name|builder
parameter_list|,
name|ByteString
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|CodedInputStream
name|codedInput
init|=
name|bs
operator|.
name|newCodedInput
argument_list|()
decl_stmt|;
name|codedInput
operator|.
name|setSizeLimit
argument_list|(
name|bs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|mergeFrom
argument_list|(
name|codedInput
argument_list|)
expr_stmt|;
name|codedInput
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * This version of protobuf's mergeFrom avoids the hard-coded 64MB limit for decoding    * buffers when working with byte arrays    * @param builder current message builder    * @param b byte array    * @throws IOException    */
specifier|public
specifier|static
name|void
name|mergeFrom
parameter_list|(
name|Message
operator|.
name|Builder
name|builder
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|CodedInputStream
name|codedInput
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|codedInput
operator|.
name|setSizeLimit
argument_list|(
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|builder
operator|.
name|mergeFrom
argument_list|(
name|codedInput
argument_list|)
expr_stmt|;
name|codedInput
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * This version of protobuf's mergeFrom avoids the hard-coded 64MB limit for decoding    * buffers when working with byte arrays    * @param builder current message builder    * @param b byte array    * @param offset    * @param length    * @throws IOException    */
specifier|public
specifier|static
name|void
name|mergeFrom
parameter_list|(
name|Message
operator|.
name|Builder
name|builder
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|CodedInputStream
name|codedInput
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|codedInput
operator|.
name|setSizeLimit
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|builder
operator|.
name|mergeFrom
argument_list|(
name|codedInput
argument_list|)
expr_stmt|;
name|codedInput
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|mergeFrom
parameter_list|(
name|Message
operator|.
name|Builder
name|builder
parameter_list|,
name|CodedInputStream
name|codedInput
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|codedInput
operator|.
name|resetSizeCounter
argument_list|()
expr_stmt|;
name|int
name|prevLimit
init|=
name|codedInput
operator|.
name|setSizeLimit
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|int
name|limit
init|=
name|codedInput
operator|.
name|pushLimit
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|builder
operator|.
name|mergeFrom
argument_list|(
name|codedInput
argument_list|)
expr_stmt|;
name|codedInput
operator|.
name|popLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|codedInput
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|codedInput
operator|.
name|setSizeLimit
argument_list|(
name|prevLimit
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|ReplicationLoadSink
name|toReplicationLoadSink
parameter_list|(
name|ClusterStatusProtos
operator|.
name|ReplicationLoadSink
name|cls
parameter_list|)
block|{
return|return
operator|new
name|ReplicationLoadSink
argument_list|(
name|cls
operator|.
name|getAgeOfLastAppliedOp
argument_list|()
argument_list|,
name|cls
operator|.
name|getTimeStampsOfLastAppliedOp
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ReplicationLoadSource
name|toReplicationLoadSource
parameter_list|(
name|ClusterStatusProtos
operator|.
name|ReplicationLoadSource
name|cls
parameter_list|)
block|{
return|return
operator|new
name|ReplicationLoadSource
argument_list|(
name|cls
operator|.
name|getPeerID
argument_list|()
argument_list|,
name|cls
operator|.
name|getAgeOfLastShippedOp
argument_list|()
argument_list|,
name|cls
operator|.
name|getSizeOfLogQueue
argument_list|()
argument_list|,
name|cls
operator|.
name|getTimeStampOfLastShippedOp
argument_list|()
argument_list|,
name|cls
operator|.
name|getReplicationLag
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ReplicationLoadSource
argument_list|>
name|toReplicationLoadSourceList
parameter_list|(
name|List
argument_list|<
name|ClusterStatusProtos
operator|.
name|ReplicationLoadSource
argument_list|>
name|clsList
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ReplicationLoadSource
argument_list|>
name|rlsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|clsList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ClusterStatusProtos
operator|.
name|ReplicationLoadSource
name|cls
range|:
name|clsList
control|)
block|{
name|rlsList
operator|.
name|add
argument_list|(
name|toReplicationLoadSource
argument_list|(
name|cls
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rlsList
return|;
block|}
comment|/**    * Get a protocol buffer VersionInfo    *    * @return the converted protocol buffer VersionInfo    */
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|VersionInfo
name|getVersionInfo
parameter_list|()
block|{
name|HBaseProtos
operator|.
name|VersionInfo
operator|.
name|Builder
name|builder
init|=
name|HBaseProtos
operator|.
name|VersionInfo
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|String
name|version
init|=
name|VersionInfo
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|String
index|[]
name|components
init|=
name|version
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
if|if
condition|(
name|components
operator|!=
literal|null
operator|&&
name|components
operator|.
name|length
operator|>
literal|2
condition|)
block|{
name|builder
operator|.
name|setVersionMajor
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|components
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setVersionMinor
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|components
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setUrl
argument_list|(
name|VersionInfo
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRevision
argument_list|(
name|VersionInfo
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUser
argument_list|(
name|VersionInfo
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setDate
argument_list|(
name|VersionInfo
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSrcChecksum
argument_list|(
name|VersionInfo
operator|.
name|getSrcChecksum
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert SecurityCapabilitiesResponse.Capability to SecurityCapability    * @param capabilities capabilities returned in the SecurityCapabilitiesResponse message    * @return the converted list of SecurityCapability elements    */
specifier|public
specifier|static
name|List
argument_list|<
name|SecurityCapability
argument_list|>
name|toSecurityCapabilityList
parameter_list|(
name|List
argument_list|<
name|MasterProtos
operator|.
name|SecurityCapabilitiesResponse
operator|.
name|Capability
argument_list|>
name|capabilities
parameter_list|)
block|{
name|List
argument_list|<
name|SecurityCapability
argument_list|>
name|scList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|capabilities
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MasterProtos
operator|.
name|SecurityCapabilitiesResponse
operator|.
name|Capability
name|c
range|:
name|capabilities
control|)
block|{
try|try
block|{
name|scList
operator|.
name|add
argument_list|(
name|SecurityCapability
operator|.
name|valueOf
argument_list|(
name|c
operator|.
name|getNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// Unknown capability, just ignore it. We don't understand the new capability
comment|// but don't care since by definition we cannot take advantage of it.
block|}
block|}
return|return
name|scList
return|;
block|}
specifier|private
specifier|static
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|Builder
name|timeRangeToProto
parameter_list|(
name|TimeRange
name|timeRange
parameter_list|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|Builder
name|timeRangeBuilder
init|=
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|timeRangeBuilder
operator|.
name|setFrom
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|timeRangeBuilder
operator|.
name|setTo
argument_list|(
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|timeRangeBuilder
return|;
block|}
specifier|private
specifier|static
name|TimeRange
name|protoToTimeRange
parameter_list|(
name|HBaseProtos
operator|.
name|TimeRange
name|timeRange
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|minStamp
init|=
literal|0
decl_stmt|;
name|long
name|maxStamp
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|timeRange
operator|.
name|hasFrom
argument_list|()
condition|)
block|{
name|minStamp
operator|=
name|timeRange
operator|.
name|getFrom
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timeRange
operator|.
name|hasTo
argument_list|()
condition|)
block|{
name|maxStamp
operator|=
name|timeRange
operator|.
name|getTo
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|TimeRange
argument_list|(
name|minStamp
argument_list|,
name|maxStamp
argument_list|)
return|;
block|}
comment|/**    * Converts an ColumnFamilyDescriptor to ColumnFamilySchema    * @param hcd the ColumnFamilySchema    * @return Convert this instance to a the pb column family type    */
specifier|public
specifier|static
name|ColumnFamilySchema
name|toColumnFamilySchema
parameter_list|(
name|ColumnFamilyDescriptor
name|hcd
parameter_list|)
block|{
name|ColumnFamilySchema
operator|.
name|Builder
name|builder
init|=
name|ColumnFamilySchema
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|hcd
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Bytes
argument_list|,
name|Bytes
argument_list|>
name|e
range|:
name|hcd
operator|.
name|getValues
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|BytesBytesPair
operator|.
name|Builder
name|aBuilder
init|=
name|BytesBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|aBuilder
operator|.
name|setFirst
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|aBuilder
operator|.
name|setSecond
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttributes
argument_list|(
name|aBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|hcd
operator|.
name|getConfiguration
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NameStringPair
operator|.
name|Builder
name|aBuilder
init|=
name|NameStringPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|aBuilder
operator|.
name|setName
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|aBuilder
operator|.
name|setValue
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addConfiguration
argument_list|(
name|aBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Converts a ColumnFamilySchema to ColumnFamilyDescriptor    * @param cfs the ColumnFamilySchema    * @return An {@link ColumnFamilyDescriptor} made from the passed in<code>cfs</code>    */
specifier|public
specifier|static
name|ColumnFamilyDescriptor
name|toColumnFamilyDescriptor
parameter_list|(
specifier|final
name|ColumnFamilySchema
name|cfs
parameter_list|)
block|{
comment|// Use the empty constructor so we preserve the initial values set on construction for things
comment|// like maxVersion.  Otherwise, we pick up wrong values on deserialization which makes for
comment|// unrelated-looking test failures that are hard to trace back to here.
name|ColumnFamilyDescriptorBuilder
name|builder
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|cfs
operator|.
name|getName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|cfs
operator|.
name|getAttributesList
argument_list|()
operator|.
name|forEach
argument_list|(
name|a
lambda|->
name|builder
operator|.
name|setValue
argument_list|(
name|a
operator|.
name|getFirst
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|a
operator|.
name|getSecond
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cfs
operator|.
name|getConfigurationList
argument_list|()
operator|.
name|forEach
argument_list|(
name|a
lambda|->
name|builder
operator|.
name|setConfiguration
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|,
name|a
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Converts an TableDescriptor to TableSchema    * @param htd the TableDescriptor    * @return Convert the current {@link TableDescriptor} into a pb TableSchema instance.    */
specifier|public
specifier|static
name|TableSchema
name|toTableSchema
parameter_list|(
name|TableDescriptor
name|htd
parameter_list|)
block|{
name|TableSchema
operator|.
name|Builder
name|builder
init|=
name|TableSchema
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTableName
argument_list|(
name|toProtoTableName
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Bytes
argument_list|,
name|Bytes
argument_list|>
name|e
range|:
name|htd
operator|.
name|getValues
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|BytesBytesPair
operator|.
name|Builder
name|aBuilder
init|=
name|BytesBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|aBuilder
operator|.
name|setFirst
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|aBuilder
operator|.
name|setSecond
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttributes
argument_list|(
name|aBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ColumnFamilyDescriptor
name|hcd
range|:
name|htd
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|builder
operator|.
name|addColumnFamilies
argument_list|(
name|toColumnFamilySchema
argument_list|(
name|hcd
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Converts a TableSchema to TableDescriptor    * @param ts A pb TableSchema instance.    * @return An {@link TableDescriptor} made from the passed in pb<code>ts</code>.    */
specifier|public
specifier|static
name|TableDescriptor
name|toTableDescriptor
parameter_list|(
specifier|final
name|TableSchema
name|ts
parameter_list|)
block|{
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|ts
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ts
operator|.
name|getColumnFamiliesList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ProtobufUtil
operator|::
name|toColumnFamilyDescriptor
argument_list|)
operator|.
name|forEach
argument_list|(
name|builder
operator|::
name|addColumnFamily
argument_list|)
expr_stmt|;
name|ts
operator|.
name|getAttributesList
argument_list|()
operator|.
name|forEach
argument_list|(
name|a
lambda|->
name|builder
operator|.
name|setValue
argument_list|(
name|a
operator|.
name|getFirst
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|a
operator|.
name|getSecond
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ts
operator|.
name|getConfigurationList
argument_list|()
operator|.
name|forEach
argument_list|(
name|a
lambda|->
name|builder
operator|.
name|setValue
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|,
name|a
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Creates {@link CompactionState} from    * {@link org.apache.hadoop.hbase.protobuf.generated.AdminProtos.GetRegionInfoResponse.CompactionState}    * state    * @param state the protobuf CompactionState    * @return CompactionState    */
specifier|public
specifier|static
name|CompactionState
name|createCompactionState
parameter_list|(
name|GetRegionInfoResponse
operator|.
name|CompactionState
name|state
parameter_list|)
block|{
return|return
name|CompactionState
operator|.
name|valueOf
argument_list|(
name|state
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Optional
argument_list|<
name|Long
argument_list|>
name|toOptionalTimestamp
parameter_list|(
name|MajorCompactionTimestampResponse
name|resp
parameter_list|)
block|{
name|long
name|timestamp
init|=
name|resp
operator|.
name|getCompactionTimestamp
argument_list|()
decl_stmt|;
return|return
name|timestamp
operator|==
literal|0
condition|?
name|Optional
operator|.
name|empty
argument_list|()
else|:
name|Optional
operator|.
name|of
argument_list|(
name|timestamp
argument_list|)
return|;
block|}
comment|/**    * Creates {@link org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.SnapshotDescription.Type}    * from {@link SnapshotType}    * @param type the SnapshotDescription type    * @return the protobuf SnapshotDescription type    */
specifier|public
specifier|static
name|SnapshotProtos
operator|.
name|SnapshotDescription
operator|.
name|Type
name|createProtosSnapShotDescType
parameter_list|(
name|SnapshotType
name|type
parameter_list|)
block|{
return|return
name|SnapshotProtos
operator|.
name|SnapshotDescription
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates {@link org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.SnapshotDescription.Type}    * from the type of SnapshotDescription string    * @param snapshotDesc string representing the snapshot description type    * @return the protobuf SnapshotDescription type    */
specifier|public
specifier|static
name|SnapshotProtos
operator|.
name|SnapshotDescription
operator|.
name|Type
name|createProtosSnapShotDescType
parameter_list|(
name|String
name|snapshotDesc
parameter_list|)
block|{
return|return
name|SnapshotProtos
operator|.
name|SnapshotDescription
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|snapshotDesc
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Creates {@link SnapshotType} from the type of    * {@link org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.SnapshotDescription}    * @param type the snapshot description type    * @return the protobuf SnapshotDescription type    */
specifier|public
specifier|static
name|SnapshotType
name|createSnapshotType
parameter_list|(
name|SnapshotProtos
operator|.
name|SnapshotDescription
operator|.
name|Type
name|type
parameter_list|)
block|{
return|return
name|SnapshotType
operator|.
name|valueOf
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert from {@link SnapshotDescription} to    * {@link org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.SnapshotDescription}    * @param snapshotDesc the POJO SnapshotDescription    * @return the protobuf SnapshotDescription    */
specifier|public
specifier|static
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|createHBaseProtosSnapshotDesc
parameter_list|(
name|SnapshotDescription
name|snapshotDesc
parameter_list|)
block|{
name|SnapshotProtos
operator|.
name|SnapshotDescription
operator|.
name|Builder
name|builder
init|=
name|SnapshotProtos
operator|.
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshotDesc
operator|.
name|getTableName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setTable
argument_list|(
name|snapshotDesc
operator|.
name|getTableNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|snapshotDesc
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setName
argument_list|(
name|snapshotDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|snapshotDesc
operator|.
name|getOwner
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setOwner
argument_list|(
name|snapshotDesc
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|snapshotDesc
operator|.
name|getCreationTime
argument_list|()
operator|!=
operator|-
literal|1L
condition|)
block|{
name|builder
operator|.
name|setCreationTime
argument_list|(
name|snapshotDesc
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|snapshotDesc
operator|.
name|getVersion
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|setVersion
argument_list|(
name|snapshotDesc
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setType
argument_list|(
name|ProtobufUtil
operator|.
name|createProtosSnapShotDescType
argument_list|(
name|snapshotDesc
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|snapshot
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|snapshot
return|;
block|}
comment|/**    * Convert from    * {@link org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.SnapshotDescription} to    * {@link SnapshotDescription}    * @param snapshotDesc the protobuf SnapshotDescription    * @return the POJO SnapshotDescription    */
specifier|public
specifier|static
name|SnapshotDescription
name|createSnapshotDesc
parameter_list|(
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|snapshotDesc
parameter_list|)
block|{
return|return
operator|new
name|SnapshotDescription
argument_list|(
name|snapshotDesc
operator|.
name|getName
argument_list|()
argument_list|,
name|snapshotDesc
operator|.
name|hasTable
argument_list|()
condition|?
name|TableName
operator|.
name|valueOf
argument_list|(
name|snapshotDesc
operator|.
name|getTable
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
name|createSnapshotType
argument_list|(
name|snapshotDesc
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|snapshotDesc
operator|.
name|getOwner
argument_list|()
argument_list|,
name|snapshotDesc
operator|.
name|getCreationTime
argument_list|()
argument_list|,
name|snapshotDesc
operator|.
name|getVersion
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert a protobuf ClusterStatus to a ClusterStatus    *    * @param proto the protobuf ClusterStatus    * @return the converted ClusterStatus    */
specifier|public
specifier|static
name|ClusterStatus
name|convert
parameter_list|(
name|ClusterStatusProtos
operator|.
name|ClusterStatus
name|proto
parameter_list|)
block|{
name|ClusterStatus
operator|.
name|Builder
name|builder
init|=
name|ClusterStatus
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerLoad
argument_list|>
name|servers
init|=
literal|null
decl_stmt|;
name|servers
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|proto
operator|.
name|getLiveServersList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|LiveServerInfo
name|lsi
range|:
name|proto
operator|.
name|getLiveServersList
argument_list|()
control|)
block|{
name|servers
operator|.
name|put
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|lsi
operator|.
name|getServer
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ServerLoad
argument_list|(
name|lsi
operator|.
name|getServerLoad
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|deadServers
init|=
literal|null
decl_stmt|;
name|deadServers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|proto
operator|.
name|getDeadServersList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|ServerName
name|sn
range|:
name|proto
operator|.
name|getDeadServersList
argument_list|()
control|)
block|{
name|deadServers
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|backupMasters
init|=
literal|null
decl_stmt|;
name|backupMasters
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|proto
operator|.
name|getBackupMastersList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|ServerName
name|sn
range|:
name|proto
operator|.
name|getBackupMastersList
argument_list|()
control|)
block|{
name|backupMasters
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|RegionState
argument_list|>
name|rit
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|proto
operator|.
name|getRegionsInTransitionList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionInTransition
name|region
range|:
name|proto
operator|.
name|getRegionsInTransitionList
argument_list|()
control|)
block|{
name|RegionState
name|value
init|=
name|RegionState
operator|.
name|convert
argument_list|(
name|region
operator|.
name|getRegionState
argument_list|()
argument_list|)
decl_stmt|;
name|rit
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|masterCoprocessors
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|numMasterCoprocessors
init|=
name|proto
operator|.
name|getMasterCoprocessorsCount
argument_list|()
decl_stmt|;
name|masterCoprocessors
operator|=
operator|new
name|String
index|[
name|numMasterCoprocessors
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMasterCoprocessors
condition|;
name|i
operator|++
control|)
block|{
name|masterCoprocessors
index|[
name|i
index|]
operator|=
name|proto
operator|.
name|getMasterCoprocessors
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|String
name|clusterId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasClusterId
argument_list|()
condition|)
block|{
name|clusterId
operator|=
name|ClusterId
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getClusterId
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|String
name|hbaseVersion
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasHbaseVersion
argument_list|()
condition|)
block|{
name|hbaseVersion
operator|=
name|proto
operator|.
name|getHbaseVersion
argument_list|()
operator|.
name|getVersion
argument_list|()
expr_stmt|;
block|}
name|ServerName
name|master
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasMaster
argument_list|()
condition|)
block|{
name|master
operator|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|proto
operator|.
name|getMaster
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|balancerOn
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasBalancerOn
argument_list|()
condition|)
block|{
name|balancerOn
operator|=
name|proto
operator|.
name|getBalancerOn
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|setHBaseVersion
argument_list|(
name|hbaseVersion
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|setLiveServers
argument_list|(
name|servers
argument_list|)
operator|.
name|setDeadServers
argument_list|(
name|deadServers
argument_list|)
operator|.
name|setMaster
argument_list|(
name|master
argument_list|)
operator|.
name|setBackupMasters
argument_list|(
name|backupMasters
argument_list|)
operator|.
name|setRegionState
argument_list|(
name|rit
argument_list|)
operator|.
name|setMasterCoprocessors
argument_list|(
name|masterCoprocessors
argument_list|)
operator|.
name|setBalancerOn
argument_list|(
name|balancerOn
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert ClusterStatusProtos.Option to ClusterStatus.Option    * @param option a ClusterStatusProtos.Option    * @return converted ClusterStatus.Option    */
specifier|public
specifier|static
name|ClusterStatus
operator|.
name|Option
name|toOption
parameter_list|(
name|ClusterStatusProtos
operator|.
name|Option
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|HBASE_VERSION
case|:
return|return
name|ClusterStatus
operator|.
name|Option
operator|.
name|HBASE_VERSION
return|;
case|case
name|LIVE_SERVERS
case|:
return|return
name|ClusterStatus
operator|.
name|Option
operator|.
name|LIVE_SERVERS
return|;
case|case
name|DEAD_SERVERS
case|:
return|return
name|ClusterStatus
operator|.
name|Option
operator|.
name|DEAD_SERVERS
return|;
case|case
name|REGIONS_IN_TRANSITION
case|:
return|return
name|ClusterStatus
operator|.
name|Option
operator|.
name|REGIONS_IN_TRANSITION
return|;
case|case
name|CLUSTER_ID
case|:
return|return
name|ClusterStatus
operator|.
name|Option
operator|.
name|CLUSTER_ID
return|;
case|case
name|MASTER_COPROCESSORS
case|:
return|return
name|ClusterStatus
operator|.
name|Option
operator|.
name|MASTER_COPROCESSORS
return|;
case|case
name|MASTER
case|:
return|return
name|ClusterStatus
operator|.
name|Option
operator|.
name|MASTER
return|;
case|case
name|BACKUP_MASTERS
case|:
return|return
name|ClusterStatus
operator|.
name|Option
operator|.
name|BACKUP_MASTERS
return|;
case|case
name|BALANCER_ON
case|:
return|return
name|ClusterStatus
operator|.
name|Option
operator|.
name|BALANCER_ON
return|;
comment|// should not reach here
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid option: "
operator|+
name|option
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert ClusterStatus.Option to ClusterStatusProtos.Option    * @param option a ClusterStatus.Option    * @return converted ClusterStatusProtos.Option    */
specifier|public
specifier|static
name|ClusterStatusProtos
operator|.
name|Option
name|toOption
parameter_list|(
name|ClusterStatus
operator|.
name|Option
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|HBASE_VERSION
case|:
return|return
name|ClusterStatusProtos
operator|.
name|Option
operator|.
name|HBASE_VERSION
return|;
case|case
name|LIVE_SERVERS
case|:
return|return
name|ClusterStatusProtos
operator|.
name|Option
operator|.
name|LIVE_SERVERS
return|;
case|case
name|DEAD_SERVERS
case|:
return|return
name|ClusterStatusProtos
operator|.
name|Option
operator|.
name|DEAD_SERVERS
return|;
case|case
name|REGIONS_IN_TRANSITION
case|:
return|return
name|ClusterStatusProtos
operator|.
name|Option
operator|.
name|REGIONS_IN_TRANSITION
return|;
case|case
name|CLUSTER_ID
case|:
return|return
name|ClusterStatusProtos
operator|.
name|Option
operator|.
name|CLUSTER_ID
return|;
case|case
name|MASTER_COPROCESSORS
case|:
return|return
name|ClusterStatusProtos
operator|.
name|Option
operator|.
name|MASTER_COPROCESSORS
return|;
case|case
name|MASTER
case|:
return|return
name|ClusterStatusProtos
operator|.
name|Option
operator|.
name|MASTER
return|;
case|case
name|BACKUP_MASTERS
case|:
return|return
name|ClusterStatusProtos
operator|.
name|Option
operator|.
name|BACKUP_MASTERS
return|;
case|case
name|BALANCER_ON
case|:
return|return
name|ClusterStatusProtos
operator|.
name|Option
operator|.
name|BALANCER_ON
return|;
comment|// should not reach here
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid option: "
operator|+
name|option
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a list of ClusterStatusProtos.Option to an enum set of ClusterStatus.Option    * @param options    * @return an enum set of ClusterStatus.Option    */
specifier|public
specifier|static
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|toOptions
parameter_list|(
name|List
argument_list|<
name|ClusterStatusProtos
operator|.
name|Option
argument_list|>
name|options
parameter_list|)
block|{
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|result
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ClusterStatusProtos
operator|.
name|Option
name|opt
range|:
name|options
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|toOption
argument_list|(
name|opt
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Convert an enum set of ClusterStatus.Option to a list of ClusterStatusProtos.Option    * @param options    * @return a list of ClusterStatusProtos.Option    */
specifier|public
specifier|static
name|List
argument_list|<
name|ClusterStatusProtos
operator|.
name|Option
argument_list|>
name|toOptions
parameter_list|(
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
block|{
name|List
argument_list|<
name|ClusterStatusProtos
operator|.
name|Option
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|options
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ClusterStatus
operator|.
name|Option
name|opt
range|:
name|options
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|toOption
argument_list|(
name|opt
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Convert a ClusterStatus to a protobuf ClusterStatus    *    * @return the protobuf ClusterStatus    */
specifier|public
specifier|static
name|ClusterStatusProtos
operator|.
name|ClusterStatus
name|convert
parameter_list|(
name|ClusterStatus
name|status
parameter_list|)
block|{
name|ClusterStatusProtos
operator|.
name|ClusterStatus
operator|.
name|Builder
name|builder
init|=
name|ClusterStatusProtos
operator|.
name|ClusterStatus
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|getHBaseVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setHbaseVersion
argument_list|(
name|HBaseVersionFileContent
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVersion
argument_list|(
name|status
operator|.
name|getHBaseVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getServers
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServerName
name|serverName
range|:
name|status
operator|.
name|getServers
argument_list|()
control|)
block|{
name|LiveServerInfo
operator|.
name|Builder
name|lsi
init|=
name|LiveServerInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setServer
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|serverName
argument_list|)
argument_list|)
decl_stmt|;
name|lsi
operator|.
name|setServerLoad
argument_list|(
name|status
operator|.
name|getLoad
argument_list|(
name|serverName
argument_list|)
operator|.
name|obtainServerLoadPB
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addLiveServers
argument_list|(
name|lsi
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|status
operator|.
name|getDeadServerNames
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServerName
name|deadServer
range|:
name|status
operator|.
name|getDeadServerNames
argument_list|()
control|)
block|{
name|builder
operator|.
name|addDeadServers
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|deadServer
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|status
operator|.
name|getRegionsInTransition
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RegionState
name|rit
range|:
name|status
operator|.
name|getRegionsInTransition
argument_list|()
control|)
block|{
name|ClusterStatusProtos
operator|.
name|RegionState
name|rs
init|=
name|rit
operator|.
name|convert
argument_list|()
decl_stmt|;
name|RegionSpecifier
operator|.
name|Builder
name|spec
init|=
name|RegionSpecifier
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|RegionSpecifierType
operator|.
name|REGION_NAME
argument_list|)
decl_stmt|;
name|spec
operator|.
name|setValue
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|rit
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RegionInTransition
name|pbRIT
init|=
name|RegionInTransition
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSpec
argument_list|(
name|spec
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|setRegionState
argument_list|(
name|rs
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addRegionsInTransition
argument_list|(
name|pbRIT
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|status
operator|.
name|getClusterId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setClusterId
argument_list|(
operator|new
name|ClusterId
argument_list|(
name|status
operator|.
name|getClusterId
argument_list|()
argument_list|)
operator|.
name|convert
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getMasterCoprocessors
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|coprocessor
range|:
name|status
operator|.
name|getMasterCoprocessors
argument_list|()
control|)
block|{
name|builder
operator|.
name|addMasterCoprocessors
argument_list|(
name|HBaseProtos
operator|.
name|Coprocessor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|coprocessor
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|status
operator|.
name|getMaster
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setMaster
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|status
operator|.
name|getMaster
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getBackupMasters
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServerName
name|backup
range|:
name|status
operator|.
name|getBackupMasters
argument_list|()
control|)
block|{
name|builder
operator|.
name|addBackupMasters
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|backup
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|status
operator|.
name|getBalancerOn
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setBalancerOn
argument_list|(
name|status
operator|.
name|getBalancerOn
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|RegionLoadStats
name|createRegionLoadStats
parameter_list|(
name|ClientProtos
operator|.
name|RegionLoadStats
name|stats
parameter_list|)
block|{
return|return
operator|new
name|RegionLoadStats
argument_list|(
name|stats
operator|.
name|getMemStoreLoad
argument_list|()
argument_list|,
name|stats
operator|.
name|getHeapOccupancy
argument_list|()
argument_list|,
name|stats
operator|.
name|getCompactionPressure
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @param msg    * @return A String version of the passed in<code>msg</code>    */
specifier|public
specifier|static
name|String
name|toText
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
return|return
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|msg
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|ByteString
name|bs
parameter_list|)
block|{
return|return
name|bs
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**    * Contain ServiceException inside here. Take a callable that is doing our pb rpc and run it.    * @throws IOException    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|call
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|callable
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|handleRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**     * Create a protocol buffer GetStoreFileRequest for a given region name     *     * @param regionName the name of the region to get info     * @param family the family to get store file list     * @return a protocol buffer GetStoreFileRequest     */
specifier|public
specifier|static
name|GetStoreFileRequest
name|buildGetStoreFileRequest
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|)
block|{
name|GetStoreFileRequest
operator|.
name|Builder
name|builder
init|=
name|GetStoreFileRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|RegionSpecifier
name|region
init|=
name|RequestConverter
operator|.
name|buildRegionSpecifier
argument_list|(
name|RegionSpecifierType
operator|.
name|REGION_NAME
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addFamily
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**     * Create a CloseRegionRequest for a given region name     *     * @param regionName the name of the region to close     * @return a CloseRegionRequest     */
specifier|public
specifier|static
name|CloseRegionRequest
name|buildCloseRegionRequest
parameter_list|(
name|ServerName
name|server
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
block|{
return|return
name|ProtobufUtil
operator|.
name|buildCloseRegionRequest
argument_list|(
name|server
argument_list|,
name|regionName
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CloseRegionRequest
name|buildCloseRegionRequest
parameter_list|(
name|ServerName
name|server
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
name|ServerName
name|destinationServer
parameter_list|)
block|{
name|CloseRegionRequest
operator|.
name|Builder
name|builder
init|=
name|CloseRegionRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|RegionSpecifier
name|region
init|=
name|RequestConverter
operator|.
name|buildRegionSpecifier
argument_list|(
name|RegionSpecifierType
operator|.
name|REGION_NAME
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
if|if
condition|(
name|destinationServer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setDestinationServer
argument_list|(
name|toServerName
argument_list|(
name|destinationServer
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setServerStartCode
argument_list|(
name|server
operator|.
name|getStartcode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ProcedureDescription
name|buildProcedureDescription
parameter_list|(
name|String
name|signature
parameter_list|,
name|String
name|instance
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
name|ProcedureDescription
operator|.
name|Builder
name|builder
init|=
name|ProcedureDescription
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSignature
argument_list|(
name|signature
argument_list|)
operator|.
name|setInstance
argument_list|(
name|instance
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
operator|&&
operator|!
name|props
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|props
operator|.
name|entrySet
argument_list|()
operator|.
name|forEach
argument_list|(
name|entry
lambda|->
name|builder
operator|.
name|addConfiguration
argument_list|(
name|NameStringPair
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Get a ServerName from the passed in data bytes.    * @param data Data with a serialize server name in it; can handle the old style    * servername where servername was host and port.  Works too with data that    * begins w/ the pb 'PBUF' magic and that is then followed by a protobuf that    * has a serialized {@link ServerName} in it.    * @return Returns null if<code>data</code> is null else converts passed data    * to a ServerName instance.    * @throws DeserializationException    */
specifier|public
specifier|static
name|ServerName
name|parseServerNameFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|ProtobufMagic
operator|.
name|isPBMagicPrefix
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|int
name|prefixLen
init|=
name|ProtobufMagic
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
try|try
block|{
name|ZooKeeperProtos
operator|.
name|Master
name|rss
init|=
name|ZooKeeperProtos
operator|.
name|Master
operator|.
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|prefixLen
argument_list|,
name|data
operator|.
name|length
operator|-
name|prefixLen
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|ServerName
name|sn
init|=
name|rss
operator|.
name|getMaster
argument_list|()
decl_stmt|;
return|return
name|ServerName
operator|.
name|valueOf
argument_list|(
name|sn
operator|.
name|getHostName
argument_list|()
argument_list|,
name|sn
operator|.
name|getPort
argument_list|()
argument_list|,
name|sn
operator|.
name|getStartCode
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
comment|/*InvalidProtocolBufferException*/
name|IOException
name|e
parameter_list|)
block|{
comment|// A failed parse of the znode is pretty catastrophic. Rather than loop
comment|// retrying hoping the bad bytes will changes, and rather than change
comment|// the signature on this method to add an IOE which will send ripples all
comment|// over the code base, throw a RuntimeException.  This should "never" happen.
comment|// Fail fast if it does.
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// The str returned could be old style -- pre hbase-1502 -- which was
comment|// hostname and port seperated by a colon rather than hostname, port and
comment|// startcode delimited by a ','.
name|String
name|str
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|str
operator|.
name|indexOf
argument_list|(
name|ServerName
operator|.
name|SERVERNAME_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Presume its ServerName serialized with versioned bytes.
return|return
name|ServerName
operator|.
name|parseVersionedServerName
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|// Presume it a hostname:port format.
name|String
name|hostname
init|=
name|Addressing
operator|.
name|parseHostname
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|Addressing
operator|.
name|parsePort
argument_list|(
name|str
argument_list|)
decl_stmt|;
return|return
name|ServerName
operator|.
name|valueOf
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|,
operator|-
literal|1L
argument_list|)
return|;
block|}
comment|/**    * Helper to convert the protobuf Procedure to JSON String    * @return Convert the current Protocol Buffers Procedure to JSON String    */
specifier|public
specifier|static
name|String
name|toProcedureJson
parameter_list|(
name|List
argument_list|<
name|ProcedureProtos
operator|.
name|Procedure
argument_list|>
name|procProtos
parameter_list|)
block|{
name|JsonArray
name|procJsons
init|=
operator|new
name|JsonArray
argument_list|(
name|procProtos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ProcedureProtos
operator|.
name|Procedure
name|procProto
range|:
name|procProtos
control|)
block|{
try|try
block|{
name|JsonElement
name|procJson
init|=
name|ProtobufMessageConverter
operator|.
name|toJsonElement
argument_list|(
name|procProto
argument_list|)
decl_stmt|;
name|procJsons
operator|.
name|add
argument_list|(
name|procJson
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|procJsons
operator|.
name|add
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|procJsons
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toLockJson
parameter_list|(
name|List
argument_list|<
name|LockServiceProtos
operator|.
name|LockedResource
argument_list|>
name|lockedResourceProtos
parameter_list|)
block|{
name|JsonArray
name|lockedResourceJsons
init|=
operator|new
name|JsonArray
argument_list|(
name|lockedResourceProtos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|LockServiceProtos
operator|.
name|LockedResource
name|lockedResourceProto
range|:
name|lockedResourceProtos
control|)
block|{
try|try
block|{
name|JsonElement
name|lockedResourceJson
init|=
name|ProtobufMessageConverter
operator|.
name|toJsonElement
argument_list|(
name|lockedResourceProto
argument_list|)
decl_stmt|;
name|lockedResourceJsons
operator|.
name|add
argument_list|(
name|lockedResourceJson
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|lockedResourceJsons
operator|.
name|add
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lockedResourceJsons
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Convert a RegionInfo to a Proto RegionInfo    *    * @param info the RegionInfo to convert    * @return the converted Proto RegionInfo    */
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|RegionInfo
name|toRegionInfo
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|HBaseProtos
operator|.
name|RegionInfo
operator|.
name|Builder
name|builder
init|=
name|HBaseProtos
operator|.
name|RegionInfo
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|info
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRegionId
argument_list|(
name|info
operator|.
name|getRegionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getStartKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setStartKey
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|info
operator|.
name|getStartKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getEndKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setEndKey
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|info
operator|.
name|getEndKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setOffline
argument_list|(
name|info
operator|.
name|isOffline
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSplit
argument_list|(
name|info
operator|.
name|isSplit
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReplicaId
argument_list|(
name|info
operator|.
name|getReplicaId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert HBaseProto.RegionInfo to a RegionInfo    *    * @param proto the RegionInfo to convert    * @return the converted RegionInfo    */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
name|toRegionInfo
parameter_list|(
specifier|final
name|HBaseProtos
operator|.
name|RegionInfo
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|TableName
name|tableName
init|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|proto
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|regionId
init|=
name|proto
operator|.
name|getRegionId
argument_list|()
decl_stmt|;
name|int
name|defaultReplicaId
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
decl_stmt|;
name|int
name|replicaId
init|=
name|proto
operator|.
name|hasReplicaId
argument_list|()
condition|?
name|proto
operator|.
name|getReplicaId
argument_list|()
else|:
name|defaultReplicaId
decl_stmt|;
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|&&
name|replicaId
operator|==
name|defaultReplicaId
condition|)
block|{
return|return
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
return|;
block|}
name|byte
index|[]
name|startKey
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasStartKey
argument_list|()
condition|)
block|{
name|startKey
operator|=
name|proto
operator|.
name|getStartKey
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasEndKey
argument_list|()
condition|)
block|{
name|endKey
operator|=
name|proto
operator|.
name|getEndKey
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|boolean
name|split
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasSplit
argument_list|()
condition|)
block|{
name|split
operator|=
name|proto
operator|.
name|getSplit
argument_list|()
expr_stmt|;
block|}
name|RegionInfoBuilder
name|rib
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|startKey
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|endKey
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
argument_list|)
operator|.
name|setReplicaId
argument_list|(
name|replicaId
argument_list|)
operator|.
name|setSplit
argument_list|(
name|split
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasOffline
argument_list|()
condition|)
block|{
name|rib
operator|.
name|setOffline
argument_list|(
name|proto
operator|.
name|getOffline
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rib
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

