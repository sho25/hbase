begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|EMPTY_END_ROW
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|EMPTY_START_ROW
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|checkHasFamilies
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|isEmptyStopRow
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncRpcRetryingCallerFactory
operator|.
name|SingleRequestCallerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ResponseConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MultiRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MultiResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|RegionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|CompareType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * The implementation of RawAsyncTable.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|RawAsyncTableImpl
implements|implements
name|RawAsyncTable
block|{
specifier|private
specifier|final
name|AsyncConnectionImpl
name|conn
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|private
specifier|final
name|int
name|defaultScannerCaching
decl_stmt|;
specifier|private
specifier|final
name|long
name|defaultScannerMaxResultSize
decl_stmt|;
specifier|private
specifier|final
name|long
name|rpcTimeoutNs
decl_stmt|;
specifier|private
specifier|final
name|long
name|readRpcTimeoutNs
decl_stmt|;
specifier|private
specifier|final
name|long
name|writeRpcTimeoutNs
decl_stmt|;
specifier|private
specifier|final
name|long
name|operationTimeoutNs
decl_stmt|;
specifier|private
specifier|final
name|long
name|scanTimeoutNs
decl_stmt|;
specifier|private
specifier|final
name|long
name|pauseNs
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxAttempts
decl_stmt|;
specifier|private
specifier|final
name|int
name|startLogErrorsCnt
decl_stmt|;
name|RawAsyncTableImpl
parameter_list|(
name|AsyncConnectionImpl
name|conn
parameter_list|,
name|AsyncTableBuilderBase
argument_list|<
name|?
argument_list|>
name|builder
parameter_list|)
block|{
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|builder
operator|.
name|tableName
expr_stmt|;
name|this
operator|.
name|rpcTimeoutNs
operator|=
name|builder
operator|.
name|rpcTimeoutNs
expr_stmt|;
name|this
operator|.
name|readRpcTimeoutNs
operator|=
name|builder
operator|.
name|readRpcTimeoutNs
expr_stmt|;
name|this
operator|.
name|writeRpcTimeoutNs
operator|=
name|builder
operator|.
name|writeRpcTimeoutNs
expr_stmt|;
name|this
operator|.
name|operationTimeoutNs
operator|=
name|builder
operator|.
name|operationTimeoutNs
expr_stmt|;
name|this
operator|.
name|scanTimeoutNs
operator|=
name|builder
operator|.
name|scanTimeoutNs
expr_stmt|;
name|this
operator|.
name|pauseNs
operator|=
name|builder
operator|.
name|pauseNs
expr_stmt|;
name|this
operator|.
name|maxAttempts
operator|=
name|builder
operator|.
name|maxAttempts
expr_stmt|;
name|this
operator|.
name|startLogErrorsCnt
operator|=
name|builder
operator|.
name|startLogErrorsCnt
expr_stmt|;
name|this
operator|.
name|defaultScannerCaching
operator|=
name|tableName
operator|.
name|isSystemTable
argument_list|()
condition|?
name|conn
operator|.
name|connConf
operator|.
name|getMetaScannerCaching
argument_list|()
else|:
name|conn
operator|.
name|connConf
operator|.
name|getScannerCaching
argument_list|()
expr_stmt|;
name|this
operator|.
name|defaultScannerMaxResultSize
operator|=
name|conn
operator|.
name|connConf
operator|.
name|getScannerMaxResultSize
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conn
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|Converter
parameter_list|<
name|D
parameter_list|,
name|I
parameter_list|,
name|S
parameter_list|>
block|{
name|D
name|convert
parameter_list|(
name|I
name|info
parameter_list|,
name|S
name|src
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|RpcCall
parameter_list|<
name|RESP
parameter_list|,
name|REQ
parameter_list|>
block|{
name|void
name|call
parameter_list|(
name|ClientService
operator|.
name|Interface
name|stub
parameter_list|,
name|HBaseRpcController
name|controller
parameter_list|,
name|REQ
name|req
parameter_list|,
name|RpcCallback
argument_list|<
name|RESP
argument_list|>
name|done
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
parameter_list|<
name|REQ
parameter_list|,
name|PREQ
parameter_list|,
name|PRESP
parameter_list|,
name|RESP
parameter_list|>
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|call
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|ClientService
operator|.
name|Interface
name|stub
parameter_list|,
name|REQ
name|req
parameter_list|,
name|Converter
argument_list|<
name|PREQ
argument_list|,
name|byte
index|[]
argument_list|,
name|REQ
argument_list|>
name|reqConvert
parameter_list|,
name|RpcCall
argument_list|<
name|PRESP
argument_list|,
name|PREQ
argument_list|>
name|rpcCall
parameter_list|,
name|Converter
argument_list|<
name|RESP
argument_list|,
name|HBaseRpcController
argument_list|,
name|PRESP
argument_list|>
name|respConverter
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|rpcCall
operator|.
name|call
argument_list|(
name|stub
argument_list|,
name|controller
argument_list|,
name|reqConvert
operator|.
name|convert
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|req
argument_list|)
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|PRESP
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|PRESP
name|resp
parameter_list|)
block|{
if|if
condition|(
name|controller
operator|.
name|failed
argument_list|()
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|controller
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|future
operator|.
name|complete
argument_list|(
name|respConverter
operator|.
name|convert
argument_list|(
name|controller
argument_list|,
name|resp
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|future
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|REQ
parameter_list|,
name|RESP
parameter_list|>
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|mutate
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|ClientService
operator|.
name|Interface
name|stub
parameter_list|,
name|REQ
name|req
parameter_list|,
name|Converter
argument_list|<
name|MutateRequest
argument_list|,
name|byte
index|[]
argument_list|,
name|REQ
argument_list|>
name|reqConvert
parameter_list|,
name|Converter
argument_list|<
name|RESP
argument_list|,
name|HBaseRpcController
argument_list|,
name|MutateResponse
argument_list|>
name|respConverter
parameter_list|)
block|{
return|return
name|call
argument_list|(
name|controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|req
argument_list|,
name|reqConvert
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|r
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|mutate
argument_list|(
name|c
argument_list|,
name|r
argument_list|,
name|done
argument_list|)
argument_list|,
name|respConverter
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|REQ
parameter_list|>
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|voidMutate
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|ClientService
operator|.
name|Interface
name|stub
parameter_list|,
name|REQ
name|req
parameter_list|,
name|Converter
argument_list|<
name|MutateRequest
argument_list|,
name|byte
index|[]
argument_list|,
name|REQ
argument_list|>
name|reqConvert
parameter_list|)
block|{
return|return
name|mutate
argument_list|(
name|controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|req
argument_list|,
name|reqConvert
argument_list|,
parameter_list|(
name|c
parameter_list|,
name|resp
parameter_list|)
lambda|->
block|{
return|return
literal|null
return|;
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Result
name|toResult
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|,
name|MutateResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|resp
operator|.
name|hasResult
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|resp
operator|.
name|getResult
argument_list|()
argument_list|,
name|controller
operator|.
name|cellScanner
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|NoncedConverter
parameter_list|<
name|D
parameter_list|,
name|I
parameter_list|,
name|S
parameter_list|>
block|{
name|D
name|convert
parameter_list|(
name|I
name|info
parameter_list|,
name|S
name|src
parameter_list|,
name|long
name|nonceGroup
parameter_list|,
name|long
name|nonce
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
parameter_list|<
name|REQ
parameter_list|,
name|RESP
parameter_list|>
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|noncedMutate
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|ClientService
operator|.
name|Interface
name|stub
parameter_list|,
name|REQ
name|req
parameter_list|,
name|NoncedConverter
argument_list|<
name|MutateRequest
argument_list|,
name|byte
index|[]
argument_list|,
name|REQ
argument_list|>
name|reqConvert
parameter_list|,
name|Converter
argument_list|<
name|RESP
argument_list|,
name|HBaseRpcController
argument_list|,
name|MutateResponse
argument_list|>
name|respConverter
parameter_list|)
block|{
name|long
name|nonceGroup
init|=
name|conn
operator|.
name|getNonceGenerator
argument_list|()
operator|.
name|getNonceGroup
argument_list|()
decl_stmt|;
name|long
name|nonce
init|=
name|conn
operator|.
name|getNonceGenerator
argument_list|()
operator|.
name|newNonce
argument_list|()
decl_stmt|;
return|return
name|mutate
argument_list|(
name|controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|req
argument_list|,
parameter_list|(
name|info
parameter_list|,
name|src
parameter_list|)
lambda|->
name|reqConvert
operator|.
name|convert
argument_list|(
name|info
argument_list|,
name|src
argument_list|,
name|nonceGroup
argument_list|,
name|nonce
argument_list|)
argument_list|,
name|respConverter
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|SingleRequestCallerBuilder
argument_list|<
name|T
argument_list|>
name|newCaller
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|long
name|rpcTimeoutNs
parameter_list|)
block|{
return|return
name|conn
operator|.
name|callerFactory
operator|.
expr|<
name|T
operator|>
name|single
argument_list|()
operator|.
name|table
argument_list|(
name|tableName
argument_list|)
operator|.
name|row
argument_list|(
name|row
argument_list|)
operator|.
name|rpcTimeout
argument_list|(
name|rpcTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|operationTimeout
argument_list|(
name|operationTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|pause
argument_list|(
name|pauseNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|maxAttempts
argument_list|(
name|maxAttempts
argument_list|)
operator|.
name|startLogErrorsCnt
argument_list|(
name|startLogErrorsCnt
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|SingleRequestCallerBuilder
argument_list|<
name|T
argument_list|>
name|newCaller
parameter_list|(
name|Row
name|row
parameter_list|,
name|long
name|rpcTimeoutNs
parameter_list|)
block|{
return|return
name|newCaller
argument_list|(
name|row
operator|.
name|getRow
argument_list|()
argument_list|,
name|rpcTimeoutNs
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Result
argument_list|>
name|get
parameter_list|(
name|Get
name|get
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Result
operator|>
name|newCaller
argument_list|(
name|get
argument_list|,
name|readRpcTimeoutNs
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|loc
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|RawAsyncTableImpl
operator|.
block|<Get
argument_list|,
name|GetRequest
argument_list|,
name|GetResponse
argument_list|,
name|Result
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|get
argument_list|,
name|RequestConverter
operator|::
name|buildGetRequest
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|get
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|c
parameter_list|,
name|resp
parameter_list|)
lambda|->
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|resp
operator|.
name|getResult
argument_list|()
argument_list|,
name|c
operator|.
name|cellScanner
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|put
parameter_list|(
name|Put
name|put
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newCaller
argument_list|(
name|put
argument_list|,
name|writeRpcTimeoutNs
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|loc
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|RawAsyncTableImpl
operator|.
block|<Put> voidMutate(controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|put
argument_list|,
name|RequestConverter
operator|::
name|buildMutateRequest
argument_list|)
block|)
function|.call
parameter_list|()
function|;
block|}
end_class

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|delete
parameter_list|(
name|Delete
name|delete
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newCaller
argument_list|(
name|delete
argument_list|,
name|writeRpcTimeoutNs
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|loc
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|RawAsyncTableImpl
operator|.
block|<Delete> voidMutate(controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|delete
argument_list|,
name|RequestConverter
operator|::
name|buildMutateRequest
argument_list|)
block|)
function|.call
parameter_list|()
function|;
end_function

begin_function
unit|}    @
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Result
argument_list|>
name|append
parameter_list|(
name|Append
name|append
parameter_list|)
block|{
name|checkHasFamilies
argument_list|(
name|append
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
expr|<
name|Result
operator|>
name|newCaller
argument_list|(
name|append
argument_list|,
name|rpcTimeoutNs
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|loc
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<Append
argument_list|,
name|Result
operator|>
name|noncedMutate
argument_list|(
name|controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|append
argument_list|,
name|RequestConverter
operator|::
name|buildMutateRequest
argument_list|,
name|RawAsyncTableImpl
operator|::
name|toResult
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Result
argument_list|>
name|increment
parameter_list|(
name|Increment
name|increment
parameter_list|)
block|{
name|checkHasFamilies
argument_list|(
name|increment
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
expr|<
name|Result
operator|>
name|newCaller
argument_list|(
name|increment
argument_list|,
name|rpcTimeoutNs
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|loc
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<Increment
argument_list|,
name|Result
operator|>
name|noncedMutate
argument_list|(
name|controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|increment
argument_list|,
name|RequestConverter
operator|::
name|buildMutateRequest
argument_list|,
name|RawAsyncTableImpl
operator|::
name|toResult
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|checkAndPut
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOp
name|compareOp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|Put
name|put
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newCaller
argument_list|(
name|row
argument_list|,
name|rpcTimeoutNs
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|loc
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|RawAsyncTableImpl
operator|.
block|<Put
argument_list|,
name|Boolean
operator|>
name|mutate
argument_list|(
name|controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|put
argument_list|,
parameter_list|(
name|rn
parameter_list|,
name|p
parameter_list|)
lambda|->
name|RequestConverter
operator|.
name|buildMutateRequest
argument_list|(
name|rn
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|value
argument_list|)
argument_list|,
name|CompareType
operator|.
name|valueOf
argument_list|(
name|compareOp
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|p
argument_list|)
argument_list|,
parameter_list|(
name|c
parameter_list|,
name|r
parameter_list|)
lambda|->
name|r
operator|.
name|getProcessed
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|checkAndDelete
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOp
name|compareOp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|Delete
name|delete
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newCaller
argument_list|(
name|row
argument_list|,
name|rpcTimeoutNs
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|loc
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|RawAsyncTableImpl
operator|.
block|<Delete
argument_list|,
name|Boolean
operator|>
name|mutate
argument_list|(
name|controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|delete
argument_list|,
parameter_list|(
name|rn
parameter_list|,
name|d
parameter_list|)
lambda|->
name|RequestConverter
operator|.
name|buildMutateRequest
argument_list|(
name|rn
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|value
argument_list|)
argument_list|,
name|CompareType
operator|.
name|valueOf
argument_list|(
name|compareOp
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|d
argument_list|)
argument_list|,
parameter_list|(
name|c
parameter_list|,
name|r
parameter_list|)
lambda|->
name|r
operator|.
name|getProcessed
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_comment
comment|// We need the MultiRequest when constructing the org.apache.hadoop.hbase.client.MultiResponse,
end_comment

begin_comment
comment|// so here I write a new method as I do not want to change the abstraction of call method.
end_comment

begin_function
specifier|private
specifier|static
parameter_list|<
name|RESP
parameter_list|>
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|mutateRow
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|ClientService
operator|.
name|Interface
name|stub
parameter_list|,
name|RowMutations
name|mutation
parameter_list|,
name|Converter
argument_list|<
name|MultiRequest
argument_list|,
name|byte
index|[]
argument_list|,
name|RowMutations
argument_list|>
name|reqConvert
parameter_list|,
name|Function
argument_list|<
name|Result
argument_list|,
name|RESP
argument_list|>
name|respConverter
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|regionName
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|MultiRequest
name|req
init|=
name|reqConvert
operator|.
name|convert
argument_list|(
name|regionName
argument_list|,
name|mutation
argument_list|)
decl_stmt|;
name|stub
operator|.
name|multi
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|MultiResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|MultiResponse
name|resp
parameter_list|)
block|{
if|if
condition|(
name|controller
operator|.
name|failed
argument_list|()
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|controller
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MultiResponse
name|multiResp
init|=
name|ResponseConverter
operator|.
name|getResults
argument_list|(
name|req
argument_list|,
name|resp
argument_list|,
name|controller
operator|.
name|cellScanner
argument_list|()
argument_list|)
decl_stmt|;
name|Throwable
name|ex
init|=
name|multiResp
operator|.
name|getException
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|ex
operator|instanceof
name|IOException
condition|?
name|ex
else|:
operator|new
name|IOException
argument_list|(
literal|"Failed to mutate row: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|mutation
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|respConverter
operator|.
name|apply
argument_list|(
operator|(
name|Result
operator|)
name|multiResp
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
operator|.
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|mutateRow
parameter_list|(
name|RowMutations
name|mutation
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newCaller
argument_list|(
name|mutation
argument_list|,
name|writeRpcTimeoutNs
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|loc
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|RawAsyncTableImpl
operator|.
block|<Void> mutateRow(controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|mutation
argument_list|,
parameter_list|(
name|rn
parameter_list|,
name|rm
parameter_list|)
lambda|->
block|{
name|RegionAction
operator|.
name|Builder
name|regionMutationBuilder
init|=
name|RequestConverter
operator|.
name|buildRegionAction
argument_list|(
name|rn
argument_list|,
name|rm
argument_list|)
decl_stmt|;
name|regionMutationBuilder
operator|.
name|setAtomic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|MultiRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|addRegionAction
argument_list|(
name|regionMutationBuilder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
block|)
operator|.
name|call
argument_list|()
function|;
end_function

begin_function
unit|}    @
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|checkAndMutate
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|CompareOp
name|compareOp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|RowMutations
name|mutation
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newCaller
argument_list|(
name|mutation
argument_list|,
name|rpcTimeoutNs
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|loc
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|RawAsyncTableImpl
operator|.
block|<Boolean> mutateRow(controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|mutation
argument_list|,
parameter_list|(
name|rn
parameter_list|,
name|rm
parameter_list|)
lambda|->
name|RequestConverter
operator|.
name|buildMutateRequest
argument_list|(
name|rn
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|value
argument_list|)
argument_list|,
name|CompareType
operator|.
name|valueOf
argument_list|(
name|compareOp
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|rm
argument_list|)
argument_list|,
name|resp
lambda|->
name|resp
operator|.
name|getExists
argument_list|()
argument_list|)
block|)
operator|.
name|call
argument_list|()
function|;
end_function

begin_function
unit|}    private
name|Scan
name|setDefaultScanConfig
parameter_list|(
name|Scan
name|scan
parameter_list|)
block|{
comment|// always create a new scan object as we may reset the start row later.
name|Scan
name|newScan
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|scan
operator|.
name|getClass
argument_list|()
argument_list|,
name|scan
argument_list|)
decl_stmt|;
if|if
condition|(
name|newScan
operator|.
name|getCaching
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|newScan
operator|.
name|setCaching
argument_list|(
name|defaultScannerCaching
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newScan
operator|.
name|getMaxResultSize
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|newScan
operator|.
name|setMaxResultSize
argument_list|(
name|defaultScannerMaxResultSize
argument_list|)
expr_stmt|;
block|}
return|return
name|newScan
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|Result
argument_list|>
argument_list|>
name|scanAll
parameter_list|(
name|Scan
name|scan
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|Result
argument_list|>
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|scanResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|scan
argument_list|(
name|scan
argument_list|,
operator|new
name|RawScanResultConsumer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNext
parameter_list|(
name|Result
index|[]
name|results
parameter_list|,
name|ScanController
name|controller
parameter_list|)
block|{
name|scanResults
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onError
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onComplete
parameter_list|()
block|{
name|future
operator|.
name|complete
argument_list|(
name|scanResults
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|scan
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|RawScanResultConsumer
name|consumer
parameter_list|)
block|{
operator|new
name|AsyncClientScanner
argument_list|(
name|setDefaultScanConfig
argument_list|(
name|scan
argument_list|)
argument_list|,
name|consumer
argument_list|,
name|tableName
argument_list|,
name|conn
argument_list|,
name|pauseNs
argument_list|,
name|maxAttempts
argument_list|,
name|scanTimeoutNs
argument_list|,
name|readRpcTimeoutNs
argument_list|,
name|startLogErrorsCnt
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Result
argument_list|>
argument_list|>
name|get
parameter_list|(
name|List
argument_list|<
name|Get
argument_list|>
name|gets
parameter_list|)
block|{
return|return
name|batch
argument_list|(
name|gets
argument_list|,
name|readRpcTimeoutNs
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|put
parameter_list|(
name|List
argument_list|<
name|Put
argument_list|>
name|puts
parameter_list|)
block|{
return|return
name|voidMutate
argument_list|(
name|puts
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|delete
parameter_list|(
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
parameter_list|)
block|{
return|return
name|voidMutate
argument_list|(
name|deletes
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|T
argument_list|>
argument_list|>
name|batch
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|actions
parameter_list|)
block|{
return|return
name|batch
argument_list|(
name|actions
argument_list|,
name|rpcTimeoutNs
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|voidMutate
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|actions
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Object
operator|>
name|batch
argument_list|(
name|actions
argument_list|,
name|writeRpcTimeoutNs
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|f
lambda|->
name|f
operator|.
block|<Void> thenApply(r -> null
argument_list|)
block|)
function|.collect
parameter_list|(
function|toList
parameter_list|()
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}    private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|T
argument_list|>
argument_list|>
name|batch
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|actions
parameter_list|,
name|long
name|rpcTimeoutNs
parameter_list|)
block|{
return|return
name|conn
operator|.
name|callerFactory
operator|.
name|batch
argument_list|()
operator|.
name|table
argument_list|(
name|tableName
argument_list|)
operator|.
name|actions
argument_list|(
name|actions
argument_list|)
operator|.
name|operationTimeout
argument_list|(
name|operationTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|rpcTimeout
argument_list|(
name|rpcTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|pause
argument_list|(
name|pauseNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|maxAttempts
argument_list|(
name|maxAttempts
argument_list|)
operator|.
name|startLogErrorsCnt
argument_list|(
name|startLogErrorsCnt
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|long
name|getRpcTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|unit
operator|.
name|convert
argument_list|(
name|rpcTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|long
name|getReadRpcTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|unit
operator|.
name|convert
argument_list|(
name|readRpcTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|long
name|getWriteRpcTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|unit
operator|.
name|convert
argument_list|(
name|writeRpcTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|long
name|getOperationTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|unit
operator|.
name|convert
argument_list|(
name|operationTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|long
name|getScanTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|unit
operator|.
name|convert
argument_list|(
name|scanTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
parameter_list|<
name|S
parameter_list|,
name|R
parameter_list|>
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|coprocessorService
parameter_list|(
name|Function
argument_list|<
name|RpcChannel
argument_list|,
name|S
argument_list|>
name|stubMaker
parameter_list|,
name|CoprocessorCallable
argument_list|<
name|S
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|,
name|HRegionInfo
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
name|RegionCoprocessorRpcChannelImpl
name|channel
init|=
operator|new
name|RegionCoprocessorRpcChannelImpl
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
name|region
argument_list|,
name|row
argument_list|,
name|rpcTimeoutNs
argument_list|,
name|operationTimeoutNs
argument_list|)
decl_stmt|;
name|S
name|stub
init|=
name|stubMaker
operator|.
name|apply
argument_list|(
name|channel
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|ClientCoprocessorRpcController
name|controller
init|=
operator|new
name|ClientCoprocessorRpcController
argument_list|()
decl_stmt|;
name|callable
operator|.
name|call
argument_list|(
name|stub
argument_list|,
name|controller
argument_list|,
name|resp
lambda|->
block|{
if|if
condition|(
name|controller
operator|.
name|failed
argument_list|()
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|controller
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|resp
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
parameter_list|<
name|S
parameter_list|,
name|R
parameter_list|>
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|coprocessorService
parameter_list|(
name|Function
argument_list|<
name|RpcChannel
argument_list|,
name|S
argument_list|>
name|stubMaker
parameter_list|,
name|CoprocessorCallable
argument_list|<
name|S
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
name|coprocessorService
argument_list|(
name|stubMaker
argument_list|,
name|callable
argument_list|,
literal|null
argument_list|,
name|row
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|boolean
name|locateFinished
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|boolean
name|endKeyInclusive
parameter_list|)
block|{
if|if
condition|(
name|isEmptyStopRow
argument_list|(
name|endKey
argument_list|)
condition|)
block|{
if|if
condition|(
name|isEmptyStopRow
argument_list|(
name|region
operator|.
name|getEndKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|isEmptyStopRow
argument_list|(
name|region
operator|.
name|getEndKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|int
name|c
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|endKey
argument_list|,
name|region
operator|.
name|getEndKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// 1. if the region contains endKey
comment|// 2. endKey is equal to the region's endKey and we do not want to include endKey.
return|return
name|c
operator|<
literal|0
operator|||
name|c
operator|==
literal|0
operator|&&
operator|!
name|endKeyInclusive
return|;
block|}
block|}
end_function

begin_function
specifier|private
parameter_list|<
name|S
parameter_list|,
name|R
parameter_list|>
name|void
name|onLocateComplete
parameter_list|(
name|Function
argument_list|<
name|RpcChannel
argument_list|,
name|S
argument_list|>
name|stubMaker
parameter_list|,
name|CoprocessorCallable
argument_list|<
name|S
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|,
name|CoprocessorCallback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|,
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|locs
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|boolean
name|endKeyInclusive
parameter_list|,
name|AtomicBoolean
name|locateFinished
parameter_list|,
name|AtomicInteger
name|unfinishedRequest
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|onError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
name|unfinishedRequest
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|HRegionInfo
name|region
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|locateFinished
argument_list|(
name|region
argument_list|,
name|endKey
argument_list|,
name|endKeyInclusive
argument_list|)
condition|)
block|{
name|locateFinished
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conn
operator|.
name|getLocator
argument_list|()
operator|.
name|getRegionLocation
argument_list|(
name|tableName
argument_list|,
name|region
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|RegionLocateType
operator|.
name|CURRENT
argument_list|,
name|operationTimeoutNs
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|l
parameter_list|,
name|e
parameter_list|)
lambda|->
name|onLocateComplete
argument_list|(
name|stubMaker
argument_list|,
name|callable
argument_list|,
name|callback
argument_list|,
name|locs
argument_list|,
name|endKey
argument_list|,
name|endKeyInclusive
argument_list|,
name|locateFinished
argument_list|,
name|unfinishedRequest
argument_list|,
name|l
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|coprocessorService
argument_list|(
name|stubMaker
argument_list|,
name|callable
argument_list|,
name|region
argument_list|,
name|region
operator|.
name|getStartKey
argument_list|()
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|r
parameter_list|,
name|e
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|onRegionError
argument_list|(
name|region
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|callback
operator|.
name|onRegionComplete
argument_list|(
name|region
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|unfinishedRequest
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
operator|&&
name|locateFinished
operator|.
name|get
argument_list|()
condition|)
block|{
name|callback
operator|.
name|onComplete
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
parameter_list|<
name|S
parameter_list|,
name|R
parameter_list|>
name|void
name|coprocessorService
parameter_list|(
name|Function
argument_list|<
name|RpcChannel
argument_list|,
name|S
argument_list|>
name|stubMaker
parameter_list|,
name|CoprocessorCallable
argument_list|<
name|S
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|boolean
name|startKeyInclusive
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|boolean
name|endKeyInclusive
parameter_list|,
name|CoprocessorCallback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|)
block|{
name|byte
index|[]
name|nonNullStartKey
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|startKey
argument_list|)
operator|.
name|orElse
argument_list|(
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|byte
index|[]
name|nonNullEndKey
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|endKey
argument_list|)
operator|.
name|orElse
argument_list|(
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|locs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|conn
operator|.
name|getLocator
argument_list|()
operator|.
name|getRegionLocation
argument_list|(
name|tableName
argument_list|,
name|nonNullStartKey
argument_list|,
name|startKeyInclusive
condition|?
name|RegionLocateType
operator|.
name|CURRENT
else|:
name|RegionLocateType
operator|.
name|AFTER
argument_list|,
name|operationTimeoutNs
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|loc
parameter_list|,
name|error
parameter_list|)
lambda|->
name|onLocateComplete
argument_list|(
name|stubMaker
argument_list|,
name|callable
argument_list|,
name|callback
argument_list|,
name|locs
argument_list|,
name|nonNullEndKey
argument_list|,
name|endKeyInclusive
argument_list|,
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|,
name|loc
argument_list|,
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

