begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MetricsConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ExceptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_comment
comment|/**  * Represents an Async Hbase call and its response.  *  * Responses are passed on to its given doneHandler and failures to the rpcController  *  * @param<T> Type of message returned  * @param<M> Message returned in communication to be converted  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|AsyncCall
parameter_list|<
name|M
extends|extends
name|Message
parameter_list|,
name|T
parameter_list|>
extends|extends
name|Promise
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AsyncCall
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|id
decl_stmt|;
specifier|private
specifier|final
name|AsyncRpcChannelImpl
name|channel
decl_stmt|;
specifier|final
name|Descriptors
operator|.
name|MethodDescriptor
name|method
decl_stmt|;
specifier|final
name|Message
name|param
decl_stmt|;
specifier|final
name|Message
name|responseDefaultType
decl_stmt|;
specifier|private
specifier|final
name|MessageConverter
argument_list|<
name|M
argument_list|,
name|T
argument_list|>
name|messageConverter
decl_stmt|;
specifier|final
name|long
name|startTime
decl_stmt|;
specifier|final
name|long
name|rpcTimeout
decl_stmt|;
specifier|private
specifier|final
name|IOExceptionConverter
name|exceptionConverter
decl_stmt|;
comment|// For only the request
specifier|private
specifier|final
name|CellScanner
name|cellScanner
decl_stmt|;
specifier|private
specifier|final
name|int
name|priority
decl_stmt|;
specifier|final
name|MetricsConnection
operator|.
name|CallStats
name|callStats
decl_stmt|;
comment|/**    * Constructor    *    * @param channel             which initiated call    * @param connectId           connection id    * @param md                  the method descriptor    * @param param               parameters to send to Server    * @param cellScanner         cellScanner containing cells to send as request    * @param responseDefaultType the default response type    * @param messageConverter    converts the messages to what is the expected output    * @param rpcTimeout          timeout for this call in ms    * @param priority            for this request    */
specifier|public
name|AsyncCall
parameter_list|(
name|AsyncRpcChannelImpl
name|channel
parameter_list|,
name|int
name|connectId
parameter_list|,
name|Descriptors
operator|.
name|MethodDescriptor
name|md
parameter_list|,
name|Message
name|param
parameter_list|,
name|CellScanner
name|cellScanner
parameter_list|,
name|M
name|responseDefaultType
parameter_list|,
name|MessageConverter
argument_list|<
name|M
argument_list|,
name|T
argument_list|>
name|messageConverter
parameter_list|,
name|IOExceptionConverter
name|exceptionConverter
parameter_list|,
name|long
name|rpcTimeout
parameter_list|,
name|int
name|priority
parameter_list|,
name|MetricsConnection
operator|.
name|CallStats
name|callStats
parameter_list|)
block|{
name|super
argument_list|(
name|channel
operator|.
name|getEventExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|connectId
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|md
expr_stmt|;
name|this
operator|.
name|param
operator|=
name|param
expr_stmt|;
name|this
operator|.
name|responseDefaultType
operator|=
name|responseDefaultType
expr_stmt|;
name|this
operator|.
name|messageConverter
operator|=
name|messageConverter
expr_stmt|;
name|this
operator|.
name|exceptionConverter
operator|=
name|exceptionConverter
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcTimeout
operator|=
name|rpcTimeout
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
name|this
operator|.
name|cellScanner
operator|=
name|cellScanner
expr_stmt|;
name|this
operator|.
name|callStats
operator|=
name|callStats
expr_stmt|;
block|}
comment|/**    * Get the start time    *    * @return start time for the call    */
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"callId="
operator|+
name|this
operator|.
name|id
operator|+
literal|", method="
operator|+
name|this
operator|.
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|", rpcTimeout="
operator|+
name|this
operator|.
name|rpcTimeout
operator|+
literal|", param {"
operator|+
operator|(
name|this
operator|.
name|param
operator|!=
literal|null
condition|?
name|ProtobufUtil
operator|.
name|getShortTextFormat
argument_list|(
name|this
operator|.
name|param
argument_list|)
else|:
literal|""
operator|)
operator|+
literal|"}"
return|;
block|}
comment|/**    * Set success with a cellBlockScanner    *    * @param value            to set    * @param cellBlockScanner to set    */
specifier|public
name|void
name|setSuccess
parameter_list|(
name|M
name|value
parameter_list|,
name|CellScanner
name|cellBlockScanner
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|long
name|callTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Call: "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|", callTime: "
operator|+
name|callTime
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|setSuccess
argument_list|(
name|this
operator|.
name|messageConverter
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|cellBlockScanner
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|setFailed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set failed    *    * @param exception to set    */
specifier|public
name|void
name|setFailed
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
if|if
condition|(
name|ExceptionUtil
operator|.
name|isInterrupt
argument_list|(
name|exception
argument_list|)
condition|)
block|{
name|exception
operator|=
name|ExceptionUtil
operator|.
name|asInterrupt
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exception
operator|instanceof
name|RemoteException
condition|)
block|{
name|exception
operator|=
operator|(
operator|(
name|RemoteException
operator|)
name|exception
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|exceptionConverter
operator|!=
literal|null
condition|)
block|{
name|exception
operator|=
name|this
operator|.
name|exceptionConverter
operator|.
name|convert
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|setFailure
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the rpc timeout    *    * @return current timeout for this call    */
specifier|public
name|long
name|getRpcTimeout
parameter_list|()
block|{
return|return
name|rpcTimeout
return|;
block|}
comment|/**    * @return Priority for this call    */
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
comment|/**    * Get the cellScanner for this request.    * @return CellScanner    */
specifier|public
name|CellScanner
name|cellScanner
parameter_list|()
block|{
return|return
name|cellScanner
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterupt
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|.
name|removePendingCall
argument_list|(
name|this
operator|.
name|id
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|cancel
argument_list|(
name|mayInterupt
argument_list|)
return|;
block|}
block|}
end_class

end_unit

