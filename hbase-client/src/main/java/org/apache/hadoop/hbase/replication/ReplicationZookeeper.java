begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * This class serves as a helper for all things related to zookeeper in  * replication.  *<p/>  * The layout looks something like this under zookeeper.znode.parent for the  * master cluster:  *<p/>  *  *<pre>  * replication/  *  state      {contains true or false}  *  clusterId  {contains a byte}  *  peers/  *    1/   {contains a full cluster address}  *      peer-state  {contains ENABLED or DISABLED}  *    2/  *    ...  *  rs/ {lists all RS that replicate}  *    startcode1/ {lists all peer clusters}  *      1/ {lists hlogs to process}  *        10.10.1.76%3A53488.123456789 {contains nothing or a position}  *        10.10.1.76%3A53488.123456790  *        ...  *      2/  *      ...  *    startcode2/  *    ...  *</pre>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReplicationZookeeper
extends|extends
name|ReplicationStateZKBase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationZookeeper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Our handle on zookeeper
specifier|private
specifier|final
name|ZooKeeperWatcher
name|zookeeper
decl_stmt|;
specifier|private
name|String
name|peersZNode
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|// Abortable
specifier|private
name|Abortable
name|abortable
decl_stmt|;
specifier|private
specifier|final
name|ReplicationPeers
name|replicationPeers
decl_stmt|;
specifier|private
specifier|final
name|ReplicationQueues
name|replicationQueues
decl_stmt|;
comment|/**    * Constructor used by clients of replication (like master and HBase clients)    * @param conf  conf to use    * @param zk    zk connection to use    * @throws IOException    */
specifier|public
name|ReplicationZookeeper
parameter_list|(
specifier|final
name|Abortable
name|abortable
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|ZooKeeperWatcher
name|zk
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|zk
argument_list|,
name|conf
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|zookeeper
operator|=
name|zk
expr_stmt|;
name|setZNodes
argument_list|(
name|abortable
argument_list|)
expr_stmt|;
comment|// TODO This interface is no longer used by anyone using this constructor. When this class goes
comment|// away, we will no longer have this null initialization business
name|this
operator|.
name|replicationQueues
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|replicationPeers
operator|=
operator|new
name|ReplicationPeersZKImpl
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationPeers
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
comment|/**    * Constructor used by region servers, connects to the peer cluster right away.    *    * @param server    * @throws IOException    * @throws KeeperException    */
specifier|public
name|ReplicationZookeeper
parameter_list|(
specifier|final
name|Server
name|server
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
name|super
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|server
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|this
operator|.
name|abortable
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|zookeeper
operator|=
name|server
operator|.
name|getZooKeeper
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|server
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|setZNodes
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationQueues
operator|=
operator|new
name|ReplicationQueuesZKImpl
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationQueues
operator|.
name|init
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationPeers
operator|=
operator|new
name|ReplicationPeersZKImpl
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationPeers
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setZNodes
parameter_list|(
name|Abortable
name|abortable
parameter_list|)
throws|throws
name|KeeperException
block|{
name|String
name|replicationZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication"
argument_list|,
literal|"replication"
argument_list|)
decl_stmt|;
name|String
name|peersZNodeName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication.peers"
argument_list|,
literal|"peers"
argument_list|)
decl_stmt|;
name|String
name|replicationZNode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|zookeeper
operator|.
name|baseZNode
argument_list|,
name|replicationZNodeName
argument_list|)
decl_stmt|;
name|this
operator|.
name|peersZNode
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|replicationZNode
argument_list|,
name|peersZNodeName
argument_list|)
expr_stmt|;
block|}
comment|/**    * List this cluster's peers' IDs    * @return list of all peers' identifiers    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPeersIdsAndWatch
parameter_list|()
block|{
return|return
name|this
operator|.
name|replicationPeers
operator|.
name|getAllPeerIds
argument_list|()
return|;
block|}
comment|/**    * Map of this cluster's peers for display.    * @return A map of peer ids to peer cluster keys    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|listPeers
parameter_list|()
block|{
return|return
name|this
operator|.
name|replicationPeers
operator|.
name|getAllPeerClusterKeys
argument_list|()
return|;
block|}
comment|/**    * Returns all region servers from given peer    *    * @param peerClusterId (byte) the cluster to interrogate    * @return addresses of all region servers    */
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|getSlavesAddresses
parameter_list|(
name|String
name|peerClusterId
parameter_list|)
block|{
return|return
name|this
operator|.
name|replicationPeers
operator|.
name|getRegionServersOfConnectedPeer
argument_list|(
name|peerClusterId
argument_list|)
return|;
block|}
comment|/**    * This method connects this cluster to another one and registers it    * in this region server's replication znode    * @param peerId id of the peer cluster    * @throws KeeperException    */
specifier|public
name|boolean
name|connectToPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
return|return
name|this
operator|.
name|replicationPeers
operator|.
name|connectToPeer
argument_list|(
name|peerId
argument_list|)
return|;
block|}
comment|/**    * Remove the peer from zookeeper. which will trigger the watchers on every    * region server and close their sources    * @param id    * @throws IllegalArgumentException Thrown when the peer doesn't exist    */
specifier|public
name|void
name|removePeer
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|replicationPeers
operator|.
name|removePeer
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a new peer to this cluster    * @param id peer's identifier    * @param clusterKey ZK ensemble's addresses, client port and root znode    * @throws IllegalArgumentException Thrown when the peer doesn't exist    * @throws IllegalStateException Thrown when a peer already exists, since    *         multi-slave isn't supported yet.    */
specifier|public
name|void
name|addPeer
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|clusterKey
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|replicationPeers
operator|.
name|addPeer
argument_list|(
name|id
argument_list|,
name|clusterKey
argument_list|)
expr_stmt|;
block|}
comment|/**    * Enable replication to the peer    *    * @param id peer's identifier    * @throws IllegalArgumentException    *           Thrown when the peer doesn't exist    */
specifier|public
name|void
name|enablePeer
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|replicationPeers
operator|.
name|enablePeer
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**    * Disable replication to the peer    *    * @param id peer's identifier    * @throws IllegalArgumentException    *           Thrown when the peer doesn't exist    */
specifier|public
name|void
name|disablePeer
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|replicationPeers
operator|.
name|disablePeer
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check whether the peer is enabled or not. This method checks the atomic    * boolean of ReplicationPeer locally.    *    * @param id peer identifier    * @return true if the peer is enabled, otherwise false    * @throws IllegalArgumentException    *           Thrown when the peer doesn't exist    */
specifier|public
name|boolean
name|getPeerEnabled
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|this
operator|.
name|replicationPeers
operator|.
name|getStatusOfConnectedPeer
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**    * Add a new log to the list of hlogs in zookeeper    * @param filename name of the hlog's znode    * @param peerId name of the cluster's znode    */
specifier|public
name|void
name|addLogToList
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|peerId
parameter_list|)
throws|throws
name|KeeperException
block|{
name|this
operator|.
name|replicationQueues
operator|.
name|addLog
argument_list|(
name|peerId
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove a log from the list of hlogs in zookeeper    * @param filename name of the hlog's znode    * @param clusterId name of the cluster's znode    */
specifier|public
name|void
name|removeLogFromList
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|clusterId
parameter_list|)
block|{
name|this
operator|.
name|replicationQueues
operator|.
name|removeLog
argument_list|(
name|clusterId
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the current position of the specified cluster in the current hlog    * @param filename filename name of the hlog's znode    * @param clusterId clusterId name of the cluster's znode    * @param position the position in the file    */
specifier|public
name|void
name|writeReplicationStatus
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|long
name|position
parameter_list|)
block|{
name|this
operator|.
name|replicationQueues
operator|.
name|setLogPosition
argument_list|(
name|clusterId
argument_list|,
name|filename
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a list of all the other region servers in this cluster    * and set a watch    * @return a list of server nanes    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRegisteredRegionServers
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|ZKUtil
operator|.
name|listChildrenAndWatchThem
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|zookeeper
operator|.
name|rsZNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Get list of registered region servers"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Take ownership for the set of queues belonging to a dead region server.    * @param regionserver the id of the dead region server    * @return A SortedMap of the queues that have been claimed, including a SortedSet of HLogs in    *         each queue.    */
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|claimQueues
parameter_list|(
name|String
name|regionserver
parameter_list|)
block|{
return|return
name|this
operator|.
name|replicationQueues
operator|.
name|claimQueues
argument_list|(
name|regionserver
argument_list|)
return|;
block|}
comment|/**    * Delete a complete queue of hlogs    * @param peerZnode znode of the peer cluster queue of hlogs to delete    */
specifier|public
name|void
name|deleteSource
parameter_list|(
name|String
name|peerZnode
parameter_list|,
name|boolean
name|closeConnection
parameter_list|)
block|{
name|this
operator|.
name|replicationQueues
operator|.
name|removeQueue
argument_list|(
name|peerZnode
argument_list|)
expr_stmt|;
if|if
condition|(
name|closeConnection
condition|)
block|{
name|this
operator|.
name|replicationPeers
operator|.
name|disconnectFromPeer
argument_list|(
name|peerZnode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Delete this cluster's queues    */
specifier|public
name|void
name|deleteOwnRSZNode
parameter_list|()
block|{
name|this
operator|.
name|replicationQueues
operator|.
name|removeAllQueues
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the position of the specified hlog in the specified peer znode    * @param peerId znode of the peer cluster    * @param hlog name of the hlog    * @return the position in that hlog    * @throws KeeperException    */
specifier|public
name|long
name|getHLogRepPosition
parameter_list|(
name|String
name|peerId
parameter_list|,
name|String
name|hlog
parameter_list|)
throws|throws
name|KeeperException
block|{
return|return
name|this
operator|.
name|replicationQueues
operator|.
name|getLogPosition
argument_list|(
name|peerId
argument_list|,
name|hlog
argument_list|)
return|;
block|}
comment|/**    * Returns the UUID of the provided peer id. Should a connection loss or session    * expiration happen, the ZK handler will be reopened once and if it still doesn't    * work then it will bail and return null.    * @param peerId the peer's ID that will be converted into a UUID    * @return a UUID or null if there's a ZK connection issue    */
specifier|public
name|UUID
name|getPeerUUID
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
return|return
name|this
operator|.
name|replicationPeers
operator|.
name|getPeerUUID
argument_list|(
name|peerId
argument_list|)
return|;
block|}
specifier|public
name|void
name|registerRegionServerListener
parameter_list|(
name|ZooKeeperListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|zookeeper
operator|.
name|registerListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a map of all peer clusters    * @return map of peer cluster keyed by id    */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPeerClusters
parameter_list|()
block|{
return|return
name|this
operator|.
name|replicationPeers
operator|.
name|getConnectedPeers
argument_list|()
return|;
block|}
comment|/**    * Determine if a ZK path points to a peer node.    * @param path path to be checked    * @return true if the path points to a peer node, otherwise false    */
specifier|public
name|boolean
name|isPeerPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
operator|.
name|length
operator|==
name|peersZNode
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
operator|.
name|length
operator|+
literal|1
return|;
block|}
comment|/**    * Extracts the znode name of a peer cluster from a ZK path    * @param fullPath Path to extract the id from    * @return the id or an empty string if path is invalid    */
specifier|public
specifier|static
name|String
name|getZNodeName
parameter_list|(
name|String
name|fullPath
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|fullPath
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
return|return
name|parts
operator|.
name|length
operator|>
literal|0
condition|?
name|parts
index|[
name|parts
operator|.
name|length
operator|-
literal|1
index|]
else|:
literal|""
return|;
block|}
comment|/**    * Get this cluster's zk connection    * @return zk connection    */
specifier|public
name|ZooKeeperWatcher
name|getZookeeperWatcher
parameter_list|()
block|{
return|return
name|this
operator|.
name|zookeeper
return|;
block|}
comment|/**    * Get the full path to the peers' znode    * @return path to peers in zk    */
specifier|public
name|String
name|getPeersZNode
parameter_list|()
block|{
return|return
name|peersZNode
return|;
block|}
block|}
end_class

end_unit

