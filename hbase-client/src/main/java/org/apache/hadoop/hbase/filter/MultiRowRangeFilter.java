begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|FilterProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|HBaseZeroCopyByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_comment
comment|/**  * Filter to support scan multiple row key ranges. It can construct the row key ranges from the  * passed list which can be accessed by each region server.  *  * HBase is quite efficient when scanning only one small row key range. If user needs to specify  * multiple row key ranges in one scan, the typical solutions are: 1. through FilterList which is a  * list of row key Filters, 2. using the SQL layer over HBase to join with two table, such as hive,  * phoenix etc. However, both solutions are inefficient. Both of them can't utilize the range info  * to perform fast forwarding during scan which is quite time consuming. If the number of ranges  * are quite big (e.g. millions), join is a proper solution though it is slow. However, there are  * cases that user wants to specify a small number of ranges to scan (e.g.<1000 ranges). Both  * solutions can't provide satisfactory performance in such case. MultiRowRangeFilter is to support  * such usec ase (scan multiple row key ranges), which can construct the row key ranges from user  * specified list and perform fast-forwarding during scan. Thus, the scan will be quite efficient.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|MultiRowRangeFilter
extends|extends
name|FilterBase
block|{
specifier|private
name|List
argument_list|<
name|RowRange
argument_list|>
name|rangeList
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ROW_BEFORE_FIRST_RANGE
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|boolean
name|EXCLUSIVE
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|done
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|index
decl_stmt|;
specifier|private
name|RowRange
name|range
decl_stmt|;
specifier|private
name|ReturnCode
name|currentReturnCode
decl_stmt|;
comment|/**    * @param list A list of<code>RowRange</code>    * @throws java.io.IOException    *           throw an exception if the range list is not in an natural order or any    *<code>RowRange</code> is invalid    */
specifier|public
name|MultiRowRangeFilter
parameter_list|(
name|List
argument_list|<
name|RowRange
argument_list|>
name|list
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|rangeList
operator|=
name|sortAndMerge
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterAllRemaining
parameter_list|()
block|{
return|return
name|done
return|;
block|}
specifier|public
name|List
argument_list|<
name|RowRange
argument_list|>
name|getRowRanges
parameter_list|()
block|{
return|return
name|this
operator|.
name|rangeList
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterRowKey
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|// If it is the first time of running, calculate the current range index for
comment|// the row key. If index is out of bound which happens when the start row
comment|// user sets is after the largest stop row of the ranges, stop the scan.
comment|// If row key is after the current range, find the next range and update index.
if|if
condition|(
operator|!
name|initialized
operator|||
operator|!
name|range
operator|.
name|contains
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
condition|)
block|{
name|byte
index|[]
name|rowkey
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|rowkey
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|index
operator|=
name|getNextRangeIndex
argument_list|(
name|rowkey
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
name|rangeList
operator|.
name|size
argument_list|()
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
name|currentReturnCode
operator|=
name|ReturnCode
operator|.
name|NEXT_ROW
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|index
operator|!=
name|ROW_BEFORE_FIRST_RANGE
condition|)
block|{
name|range
operator|=
name|rangeList
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|range
operator|=
name|rangeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|EXCLUSIVE
condition|)
block|{
name|EXCLUSIVE
operator|=
literal|false
expr_stmt|;
name|currentReturnCode
operator|=
name|ReturnCode
operator|.
name|NEXT_ROW
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
if|if
condition|(
name|index
operator|!=
name|ROW_BEFORE_FIRST_RANGE
condition|)
block|{
name|currentReturnCode
operator|=
name|ReturnCode
operator|.
name|INCLUDE
expr_stmt|;
block|}
else|else
block|{
name|currentReturnCode
operator|=
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
expr_stmt|;
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|currentReturnCode
operator|=
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
expr_stmt|;
block|}
block|}
else|else
block|{
name|currentReturnCode
operator|=
name|ReturnCode
operator|.
name|INCLUDE
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterKeyValue
parameter_list|(
name|Cell
name|ignored
parameter_list|)
block|{
return|return
name|currentReturnCode
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|getNextCellHint
parameter_list|(
name|Cell
name|currentKV
parameter_list|)
block|{
comment|// skip to the next range's start row
return|return
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|range
operator|.
name|startRow
argument_list|)
return|;
block|}
comment|/**    * @return The filter serialized using pb    */
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
name|FilterProtos
operator|.
name|MultiRowRangeFilter
operator|.
name|Builder
name|builder
init|=
name|FilterProtos
operator|.
name|MultiRowRangeFilter
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RowRange
name|range
range|:
name|rangeList
control|)
block|{
if|if
condition|(
name|range
operator|!=
literal|null
condition|)
block|{
name|FilterProtos
operator|.
name|RowRange
operator|.
name|Builder
name|rangebuilder
init|=
name|FilterProtos
operator|.
name|RowRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|startRow
operator|!=
literal|null
condition|)
name|rangebuilder
operator|.
name|setStartRow
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|range
operator|.
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
name|rangebuilder
operator|.
name|setStartRowInclusive
argument_list|(
name|range
operator|.
name|startRowInclusive
argument_list|)
expr_stmt|;
if|if
condition|(
name|range
operator|.
name|stopRow
operator|!=
literal|null
condition|)
name|rangebuilder
operator|.
name|setStopRow
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|range
operator|.
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
name|rangebuilder
operator|.
name|setStopRowInclusive
argument_list|(
name|range
operator|.
name|stopRowInclusive
argument_list|)
expr_stmt|;
name|range
operator|.
name|isScan
operator|=
name|Bytes
operator|.
name|equals
argument_list|(
name|range
operator|.
name|startRow
argument_list|,
name|range
operator|.
name|stopRow
argument_list|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|builder
operator|.
name|addRowRangeList
argument_list|(
name|rangebuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**    * @param pbBytes A pb serialized instance    * @return An instance of MultiRowRangeFilter    * @throws org.apache.hadoop.hbase.exceptions.DeserializationException    */
specifier|public
specifier|static
name|MultiRowRangeFilter
name|parseFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|pbBytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
name|FilterProtos
operator|.
name|MultiRowRangeFilter
name|proto
decl_stmt|;
try|try
block|{
name|proto
operator|=
name|FilterProtos
operator|.
name|MultiRowRangeFilter
operator|.
name|parseFrom
argument_list|(
name|pbBytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|int
name|length
init|=
name|proto
operator|.
name|getRowRangeListCount
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FilterProtos
operator|.
name|RowRange
argument_list|>
name|rangeProtos
init|=
name|proto
operator|.
name|getRowRangeListList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RowRange
argument_list|>
name|rangeList
init|=
operator|new
name|ArrayList
argument_list|<
name|RowRange
argument_list|>
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|FilterProtos
operator|.
name|RowRange
name|rangeProto
range|:
name|rangeProtos
control|)
block|{
name|RowRange
name|range
init|=
operator|new
name|RowRange
argument_list|(
name|rangeProto
operator|.
name|hasStartRow
argument_list|()
condition|?
name|rangeProto
operator|.
name|getStartRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|,
name|rangeProto
operator|.
name|getStartRowInclusive
argument_list|()
argument_list|,
name|rangeProto
operator|.
name|hasStopRow
argument_list|()
condition|?
name|rangeProto
operator|.
name|getStopRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|,
name|rangeProto
operator|.
name|getStopRowInclusive
argument_list|()
argument_list|)
decl_stmt|;
name|rangeList
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
operator|new
name|MultiRowRangeFilter
argument_list|(
name|rangeList
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
literal|"Fail to instantiate the MultiRowRangeFilter"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param o the filter to compare    * @return true if and only if the fields of the filter that are serialized are equal to the    *         corresponding fields in other. Used for testing.    */
name|boolean
name|areSerializedFieldsEqual
parameter_list|(
name|Filter
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|MultiRowRangeFilter
operator|)
condition|)
return|return
literal|false
return|;
name|MultiRowRangeFilter
name|other
init|=
operator|(
name|MultiRowRangeFilter
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|rangeList
operator|.
name|size
argument_list|()
operator|!=
name|other
operator|.
name|rangeList
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rangeList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|RowRange
name|thisRange
init|=
name|this
operator|.
name|rangeList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RowRange
name|otherRange
init|=
name|other
operator|.
name|rangeList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Bytes
operator|.
name|equals
argument_list|(
name|thisRange
operator|.
name|startRow
argument_list|,
name|otherRange
operator|.
name|startRow
argument_list|)
operator|&&
name|Bytes
operator|.
name|equals
argument_list|(
name|thisRange
operator|.
name|stopRow
argument_list|,
name|otherRange
operator|.
name|stopRow
argument_list|)
operator|&&
operator|(
name|thisRange
operator|.
name|startRowInclusive
operator|==
name|otherRange
operator|.
name|startRowInclusive
operator|)
operator|&&
operator|(
name|thisRange
operator|.
name|stopRowInclusive
operator|==
name|otherRange
operator|.
name|stopRowInclusive
operator|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * calculate the position where the row key in the ranges list.    *    * @param rowKey the row key to calculate    * @return index the position of the row key    */
specifier|private
name|int
name|getNextRangeIndex
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|)
block|{
name|RowRange
name|temp
init|=
operator|new
name|RowRange
argument_list|(
name|rowKey
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|rangeList
argument_list|,
name|temp
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|int
name|insertionPosition
init|=
operator|-
name|index
operator|-
literal|1
decl_stmt|;
comment|// check if the row key in the range before the insertion position
if|if
condition|(
name|insertionPosition
operator|!=
literal|0
operator|&&
name|rangeList
operator|.
name|get
argument_list|(
name|insertionPosition
operator|-
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
name|rowKey
argument_list|)
condition|)
block|{
return|return
name|insertionPosition
operator|-
literal|1
return|;
block|}
comment|// check if the row key is before the first range
if|if
condition|(
name|insertionPosition
operator|==
literal|0
operator|&&
operator|!
name|rangeList
operator|.
name|get
argument_list|(
name|insertionPosition
argument_list|)
operator|.
name|contains
argument_list|(
name|rowKey
argument_list|)
condition|)
block|{
return|return
name|ROW_BEFORE_FIRST_RANGE
return|;
block|}
return|return
name|insertionPosition
return|;
block|}
comment|// the row key equals one of the start keys, and the the range exclude the start key
if|if
condition|(
name|rangeList
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|startRowInclusive
operator|==
literal|false
condition|)
block|{
name|EXCLUSIVE
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
comment|/**    * sort the ranges and if the ranges with overlap, then merge them.    *    * @param ranges the list of ranges to sort and merge.    * @return the ranges after sort and merge.    */
specifier|public
specifier|static
name|List
argument_list|<
name|RowRange
argument_list|>
name|sortAndMerge
parameter_list|(
name|List
argument_list|<
name|RowRange
argument_list|>
name|ranges
parameter_list|)
block|{
if|if
condition|(
name|ranges
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No ranges found."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|RowRange
argument_list|>
name|invalidRanges
init|=
operator|new
name|ArrayList
argument_list|<
name|RowRange
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RowRange
argument_list|>
name|newRanges
init|=
operator|new
name|ArrayList
argument_list|<
name|RowRange
argument_list|>
argument_list|(
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ranges
argument_list|)
expr_stmt|;
if|if
condition|(
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|ranges
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|newRanges
operator|.
name|add
argument_list|(
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|invalidRanges
operator|.
name|add
argument_list|(
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|lastStartRow
init|=
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|startRow
decl_stmt|;
name|boolean
name|lastStartRowInclusive
init|=
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|startRowInclusive
decl_stmt|;
name|byte
index|[]
name|lastStopRow
init|=
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|stopRow
decl_stmt|;
name|boolean
name|lastStopRowInclusive
init|=
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|stopRowInclusive
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|ranges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RowRange
name|range
init|=
name|ranges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|range
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|invalidRanges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|lastStopRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
condition|)
block|{
name|newRanges
operator|.
name|add
argument_list|(
operator|new
name|RowRange
argument_list|(
name|lastStartRow
argument_list|,
name|lastStartRowInclusive
argument_list|,
name|lastStopRow
argument_list|,
name|lastStopRowInclusive
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// with overlap in the ranges
if|if
condition|(
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|lastStopRow
argument_list|,
name|range
operator|.
name|startRow
argument_list|)
operator|>
literal|0
operator|)
operator|||
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|lastStopRow
argument_list|,
name|range
operator|.
name|startRow
argument_list|)
operator|==
literal|0
operator|&&
operator|!
operator|(
name|lastStopRowInclusive
operator|==
literal|false
operator|&&
name|range
operator|.
name|isStartRowInclusive
argument_list|()
operator|==
literal|false
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|range
operator|.
name|stopRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
condition|)
block|{
name|newRanges
operator|.
name|add
argument_list|(
operator|new
name|RowRange
argument_list|(
name|lastStartRow
argument_list|,
name|lastStartRowInclusive
argument_list|,
name|range
operator|.
name|stopRow
argument_list|,
name|range
operator|.
name|stopRowInclusive
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// if first range contains second range, ignore the second range
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|lastStopRow
argument_list|,
name|range
operator|.
name|stopRow
argument_list|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|lastStopRow
argument_list|,
name|range
operator|.
name|stopRow
argument_list|)
operator|==
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|lastStopRowInclusive
operator|==
literal|true
operator|||
name|range
operator|.
name|stopRowInclusive
operator|==
literal|true
condition|)
block|{
name|lastStopRowInclusive
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|==
name|ranges
operator|.
name|size
argument_list|()
condition|)
block|{
name|newRanges
operator|.
name|add
argument_list|(
operator|new
name|RowRange
argument_list|(
name|lastStartRow
argument_list|,
name|lastStartRowInclusive
argument_list|,
name|lastStopRow
argument_list|,
name|lastStopRowInclusive
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|lastStopRow
operator|=
name|range
operator|.
name|stopRow
expr_stmt|;
name|lastStopRowInclusive
operator|=
name|range
operator|.
name|stopRowInclusive
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|<
name|ranges
operator|.
name|size
argument_list|()
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|range
operator|=
name|ranges
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|range
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|invalidRanges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|newRanges
operator|.
name|add
argument_list|(
operator|new
name|RowRange
argument_list|(
name|lastStartRow
argument_list|,
name|lastStartRowInclusive
argument_list|,
name|lastStopRow
argument_list|,
name|lastStopRowInclusive
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
while|while
condition|(
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|lastStopRow
argument_list|,
name|range
operator|.
name|startRow
argument_list|)
operator|>
literal|0
operator|)
operator|||
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|lastStopRow
argument_list|,
name|range
operator|.
name|startRow
argument_list|)
operator|==
literal|0
operator|&&
operator|(
name|lastStopRowInclusive
operator|==
literal|true
operator|||
name|range
operator|.
name|startRowInclusive
operator|==
literal|true
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|range
operator|.
name|stopRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
condition|)
block|{
break|break;
block|}
comment|// if this first range contain second range, ignore the second range
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|lastStopRow
argument_list|,
name|range
operator|.
name|stopRow
argument_list|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|lastStopRowInclusive
operator|==
literal|true
operator|||
name|range
operator|.
name|stopRowInclusive
operator|==
literal|true
condition|)
block|{
name|lastStopRowInclusive
operator|=
literal|true
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|ranges
operator|.
name|size
argument_list|()
condition|)
block|{
name|range
operator|=
name|ranges
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|range
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|invalidRanges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
else|else
block|{
name|lastStopRow
operator|=
name|range
operator|.
name|stopRow
expr_stmt|;
name|lastStopRowInclusive
operator|=
name|range
operator|.
name|stopRowInclusive
expr_stmt|;
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|ranges
operator|.
name|size
argument_list|()
condition|)
block|{
name|range
operator|=
name|ranges
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|range
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|invalidRanges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|range
operator|.
name|stopRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|lastStopRow
argument_list|,
name|range
operator|.
name|startRow
argument_list|)
operator|<
literal|0
operator|)
operator|||
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|lastStopRow
argument_list|,
name|range
operator|.
name|startRow
argument_list|)
operator|==
literal|0
operator|&&
name|lastStopRowInclusive
operator|==
literal|false
operator|&&
name|range
operator|.
name|startRowInclusive
operator|==
literal|false
operator|)
condition|)
block|{
name|newRanges
operator|.
name|add
argument_list|(
operator|new
name|RowRange
argument_list|(
name|lastStartRow
argument_list|,
name|lastStartRowInclusive
argument_list|,
name|lastStopRow
argument_list|,
name|lastStopRowInclusive
argument_list|)
argument_list|)
expr_stmt|;
name|newRanges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newRanges
operator|.
name|add
argument_list|(
operator|new
name|RowRange
argument_list|(
name|lastStartRow
argument_list|,
name|lastStartRowInclusive
argument_list|,
name|range
operator|.
name|stopRow
argument_list|,
name|range
operator|.
name|stopRowInclusive
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|newRanges
operator|.
name|add
argument_list|(
operator|new
name|RowRange
argument_list|(
name|lastStartRow
argument_list|,
name|lastStartRowInclusive
argument_list|,
name|lastStopRow
argument_list|,
name|lastStopRowInclusive
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|==
name|ranges
operator|.
name|size
argument_list|()
condition|)
block|{
name|newRanges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
name|lastStartRow
operator|=
name|range
operator|.
name|startRow
expr_stmt|;
name|lastStartRowInclusive
operator|=
name|range
operator|.
name|startRowInclusive
expr_stmt|;
name|lastStopRow
operator|=
name|range
operator|.
name|stopRow
expr_stmt|;
name|lastStopRowInclusive
operator|=
name|range
operator|.
name|stopRowInclusive
expr_stmt|;
block|}
block|}
else|else
block|{
name|newRanges
operator|.
name|add
argument_list|(
operator|new
name|RowRange
argument_list|(
name|lastStartRow
argument_list|,
name|lastStartRowInclusive
argument_list|,
name|lastStopRow
argument_list|,
name|lastStopRowInclusive
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|==
name|ranges
operator|.
name|size
argument_list|()
condition|)
block|{
name|newRanges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
name|lastStartRow
operator|=
name|range
operator|.
name|startRow
expr_stmt|;
name|lastStartRowInclusive
operator|=
name|range
operator|.
name|startRowInclusive
expr_stmt|;
name|lastStopRow
operator|=
name|range
operator|.
name|stopRow
expr_stmt|;
name|lastStopRowInclusive
operator|=
name|range
operator|.
name|stopRowInclusive
expr_stmt|;
block|}
block|}
comment|// check the remaining ranges
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|ranges
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|ranges
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|invalidRanges
operator|.
name|add
argument_list|(
name|ranges
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if invalid range exists, throw the exception
if|if
condition|(
name|invalidRanges
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|throwExceptionForInvalidRanges
argument_list|(
name|invalidRanges
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// If no valid ranges found, throw the exception
if|if
condition|(
name|newRanges
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No valid ranges found."
argument_list|)
throw|;
block|}
return|return
name|newRanges
return|;
block|}
specifier|private
specifier|static
name|void
name|throwExceptionForInvalidRanges
parameter_list|(
name|List
argument_list|<
name|RowRange
argument_list|>
name|invalidRanges
parameter_list|,
name|boolean
name|details
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|invalidRanges
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" invaild ranges.\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|details
condition|)
block|{
for|for
control|(
name|RowRange
name|range
range|:
name|invalidRanges
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Invalid range: start row => "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|range
operator|.
name|startRow
argument_list|)
operator|+
literal|", stop row => "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|range
operator|.
name|stopRow
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|static
class|class
name|RowRange
implements|implements
name|Comparable
argument_list|<
name|RowRange
argument_list|>
block|{
specifier|private
name|byte
index|[]
name|startRow
decl_stmt|;
specifier|private
name|boolean
name|startRowInclusive
init|=
literal|true
decl_stmt|;
specifier|private
name|byte
index|[]
name|stopRow
decl_stmt|;
specifier|private
name|boolean
name|stopRowInclusive
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|isScan
init|=
literal|0
decl_stmt|;
specifier|public
name|RowRange
parameter_list|()
block|{     }
comment|/**      * If the startRow is empty or null, set it to HConstants.EMPTY_BYTE_ARRAY, means begin at the      * start row of the table. If the stopRow is empty or null, set it to      * HConstants.EMPTY_BYTE_ARRAY, means end of the last row of table.      */
specifier|public
name|RowRange
parameter_list|(
name|String
name|startRow
parameter_list|,
name|boolean
name|startRowInclusive
parameter_list|,
name|String
name|stopRow
parameter_list|,
name|boolean
name|stopRowInclusive
parameter_list|)
block|{
name|this
argument_list|(
operator|(
name|startRow
operator|==
literal|null
operator|||
name|startRow
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
else|:
name|Bytes
operator|.
name|toBytes
argument_list|(
name|startRow
argument_list|)
argument_list|,
name|startRowInclusive
argument_list|,
operator|(
name|stopRow
operator|==
literal|null
operator|||
name|stopRow
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
else|:
name|Bytes
operator|.
name|toBytes
argument_list|(
name|stopRow
argument_list|)
argument_list|,
name|stopRowInclusive
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RowRange
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|,
name|boolean
name|startRowInclusive
parameter_list|,
name|byte
index|[]
name|stopRow
parameter_list|,
name|boolean
name|stopRowInclusive
parameter_list|)
block|{
name|this
operator|.
name|startRow
operator|=
operator|(
name|startRow
operator|==
literal|null
operator|)
condition|?
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
else|:
name|startRow
expr_stmt|;
name|this
operator|.
name|startRowInclusive
operator|=
name|startRowInclusive
expr_stmt|;
name|this
operator|.
name|stopRow
operator|=
operator|(
name|stopRow
operator|==
literal|null
operator|)
condition|?
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
else|:
name|stopRow
expr_stmt|;
name|this
operator|.
name|stopRowInclusive
operator|=
name|stopRowInclusive
expr_stmt|;
name|isScan
operator|=
name|Bytes
operator|.
name|equals
argument_list|(
name|startRow
argument_list|,
name|stopRow
argument_list|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getStartRow
parameter_list|()
block|{
return|return
name|startRow
return|;
block|}
specifier|public
name|byte
index|[]
name|getStopRow
parameter_list|()
block|{
return|return
name|stopRow
return|;
block|}
comment|/**      * @return if start row is inclusive.      */
specifier|public
name|boolean
name|isStartRowInclusive
parameter_list|()
block|{
return|return
name|startRowInclusive
return|;
block|}
comment|/**      * @return if stop row is inclusive.      */
specifier|public
name|boolean
name|isStopRowInclusive
parameter_list|()
block|{
return|return
name|stopRowInclusive
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
name|contains
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|row
operator|.
name|length
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|startRowInclusive
condition|)
block|{
if|if
condition|(
name|stopRowInclusive
condition|)
block|{
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|startRow
argument_list|,
literal|0
argument_list|,
name|startRow
operator|.
name|length
argument_list|)
operator|>=
literal|0
operator|&&
operator|(
name|Bytes
operator|.
name|equals
argument_list|(
name|stopRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|stopRow
argument_list|,
literal|0
argument_list|,
name|stopRow
operator|.
name|length
argument_list|)
operator|<=
name|isScan
operator|)
return|;
block|}
else|else
block|{
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|startRow
argument_list|,
literal|0
argument_list|,
name|startRow
operator|.
name|length
argument_list|)
operator|>=
literal|0
operator|&&
operator|(
name|Bytes
operator|.
name|equals
argument_list|(
name|stopRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|stopRow
argument_list|,
literal|0
argument_list|,
name|stopRow
operator|.
name|length
argument_list|)
operator|<
name|isScan
operator|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|stopRowInclusive
condition|)
block|{
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|startRow
argument_list|,
literal|0
argument_list|,
name|startRow
operator|.
name|length
argument_list|)
operator|>
literal|0
operator|&&
operator|(
name|Bytes
operator|.
name|equals
argument_list|(
name|stopRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|stopRow
argument_list|,
literal|0
argument_list|,
name|stopRow
operator|.
name|length
argument_list|)
operator|<=
name|isScan
operator|)
return|;
block|}
else|else
block|{
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|startRow
argument_list|,
literal|0
argument_list|,
name|startRow
operator|.
name|length
argument_list|)
operator|>
literal|0
operator|&&
operator|(
name|Bytes
operator|.
name|equals
argument_list|(
name|stopRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|stopRow
argument_list|,
literal|0
argument_list|,
name|stopRow
operator|.
name|length
argument_list|)
operator|<
name|isScan
operator|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|RowRange
name|other
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|startRow
argument_list|,
name|other
operator|.
name|startRow
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|startRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|stopRow
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|startRow
argument_list|,
name|stopRow
argument_list|)
operator|<
literal|0
operator|||
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|startRow
argument_list|,
name|stopRow
argument_list|)
operator|==
literal|0
operator|&&
name|stopRowInclusive
operator|==
literal|true
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

