begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
class|class
name|BatchErrors
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BatchErrors
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|throwables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Row
argument_list|>
name|actions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|addresses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|Throwable
name|ex
parameter_list|,
name|Row
name|row
parameter_list|,
name|ServerName
name|serverName
parameter_list|)
block|{
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"row cannot be null. location="
operator|+
name|serverName
argument_list|)
throw|;
block|}
name|throwables
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|addresses
operator|.
name|add
argument_list|(
name|serverName
operator|!=
literal|null
condition|?
name|serverName
operator|.
name|toString
argument_list|()
else|:
literal|"null"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasErrors
parameter_list|()
block|{
return|return
operator|!
name|throwables
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|synchronized
name|RetriesExhaustedWithDetailsException
name|makeException
parameter_list|(
name|boolean
name|logDetails
parameter_list|)
block|{
if|if
condition|(
name|logDetails
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception occurred! Exception details: "
operator|+
name|throwables
operator|+
literal|";\nActions: "
operator|+
name|actions
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RetriesExhaustedWithDetailsException
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|throwables
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|actions
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|addresses
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
name|throwables
operator|.
name|clear
argument_list|()
expr_stmt|;
name|actions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|addresses
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|merge
parameter_list|(
name|BatchErrors
name|other
parameter_list|)
block|{
name|throwables
operator|.
name|addAll
argument_list|(
name|other
operator|.
name|throwables
argument_list|)
expr_stmt|;
name|actions
operator|.
name|addAll
argument_list|(
name|other
operator|.
name|actions
argument_list|)
expr_stmt|;
name|addresses
operator|.
name|addAll
argument_list|(
name|other
operator|.
name|addresses
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

