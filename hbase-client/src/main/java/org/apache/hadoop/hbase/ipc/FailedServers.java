begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_comment
comment|/**  * A class to manage a list of servers that failed recently.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|FailedServers
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|failedServers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|latestExpiry
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|int
name|recheckServersTimeout
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FailedServers
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|FailedServers
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|recheckServersTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|RpcClient
operator|.
name|FAILED_SERVER_EXPIRY_KEY
argument_list|,
name|RpcClient
operator|.
name|FAILED_SERVER_EXPIRY_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add an address to the list of the failed servers list.    */
specifier|public
specifier|synchronized
name|void
name|addToFailedServers
parameter_list|(
name|InetSocketAddress
name|address
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
specifier|final
name|long
name|expiry
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|+
name|recheckServersTimeout
decl_stmt|;
name|this
operator|.
name|failedServers
operator|.
name|put
argument_list|(
name|address
operator|.
name|toString
argument_list|()
argument_list|,
name|expiry
argument_list|)
expr_stmt|;
name|this
operator|.
name|latestExpiry
operator|=
name|expiry
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added failed server with address "
operator|+
name|address
operator|.
name|toString
argument_list|()
operator|+
literal|" to list caused by "
operator|+
name|throwable
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check if the server should be considered as bad. Clean the old entries of the list.    *    * @return true if the server is in the failed servers list    */
specifier|public
specifier|synchronized
name|boolean
name|isFailedServer
parameter_list|(
specifier|final
name|InetSocketAddress
name|address
parameter_list|)
block|{
if|if
condition|(
name|failedServers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|>
name|this
operator|.
name|latestExpiry
condition|)
block|{
name|failedServers
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|key
init|=
name|address
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Long
name|expiry
init|=
name|this
operator|.
name|failedServers
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|expiry
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|expiry
operator|>=
name|now
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|this
operator|.
name|failedServers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

