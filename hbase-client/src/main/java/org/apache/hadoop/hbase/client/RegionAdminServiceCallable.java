begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|PayloadCarryingRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Similar to RegionServerCallable but for the AdminService interface. This service callable  * assumes a Table and row and thus does region locating similar to RegionServerCallable.  * Works against Admin stub rather than Client stub.  */
end_comment

begin_class
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"
argument_list|,
name|justification
operator|=
literal|"stub used by ipc"
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|RegionAdminServiceCallable
parameter_list|<
name|T
parameter_list|>
implements|implements
name|RetryingCallable
argument_list|<
name|T
argument_list|>
block|{
specifier|protected
name|AdminService
operator|.
name|BlockingInterface
name|stub
decl_stmt|;
specifier|protected
specifier|final
name|RpcControllerFactory
name|rpcControllerFactory
decl_stmt|;
specifier|private
name|PayloadCarryingRpcController
name|controller
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|final
name|ClusterConnection
name|connection
decl_stmt|;
specifier|protected
name|HRegionLocation
name|location
decl_stmt|;
specifier|protected
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|row
decl_stmt|;
specifier|protected
specifier|final
name|int
name|replicaId
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|MIN_WAIT_DEAD_SERVER
init|=
literal|10000
decl_stmt|;
specifier|public
name|RegionAdminServiceCallable
parameter_list|(
name|ClusterConnection
name|connection
parameter_list|,
name|RpcControllerFactory
name|rpcControllerFactory
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
name|this
argument_list|(
name|connection
argument_list|,
name|rpcControllerFactory
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RegionAdminServiceCallable
parameter_list|(
name|ClusterConnection
name|connection
parameter_list|,
name|RpcControllerFactory
name|rpcControllerFactory
parameter_list|,
name|HRegionLocation
name|location
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
name|this
argument_list|(
name|connection
argument_list|,
name|rpcControllerFactory
argument_list|,
name|location
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|RegionReplicaUtil
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RegionAdminServiceCallable
parameter_list|(
name|ClusterConnection
name|connection
parameter_list|,
name|RpcControllerFactory
name|rpcControllerFactory
parameter_list|,
name|HRegionLocation
name|location
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|int
name|replicaId
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|rpcControllerFactory
operator|=
name|rpcControllerFactory
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|replicaId
operator|=
name|replicaId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prepare
parameter_list|(
name|boolean
name|reload
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
if|if
condition|(
name|reload
operator|||
name|location
operator|==
literal|null
condition|)
block|{
name|location
operator|=
name|getLocation
argument_list|(
operator|!
name|reload
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
comment|// With this exception, there will be a retry.
throw|throw
operator|new
name|HBaseIOException
argument_list|(
name|getExceptionMessage
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|setStub
argument_list|(
name|connection
operator|.
name|getAdmin
argument_list|(
name|location
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setStub
parameter_list|(
name|AdminService
operator|.
name|BlockingInterface
name|stub
parameter_list|)
block|{
name|this
operator|.
name|stub
operator|=
name|stub
expr_stmt|;
block|}
specifier|public
name|HRegionLocation
name|getLocation
parameter_list|(
name|boolean
name|useCache
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionLocations
name|rl
init|=
name|getRegionLocations
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|useCache
argument_list|,
name|replicaId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HBaseIOException
argument_list|(
name|getExceptionMessage
argument_list|()
argument_list|)
throw|;
block|}
name|HRegionLocation
name|location
init|=
name|rl
operator|.
name|getRegionLocation
argument_list|(
name|replicaId
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HBaseIOException
argument_list|(
name|getExceptionMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|location
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|throwable
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|boolean
name|retrying
parameter_list|)
block|{
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|updateCachedLocations
argument_list|(
name|tableName
argument_list|,
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|t
argument_list|,
name|location
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return {@link Connection} instance used by this Callable.    */
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|this
operator|.
name|connection
return|;
block|}
comment|//subclasses can override this.
specifier|protected
name|String
name|getExceptionMessage
parameter_list|()
block|{
return|return
literal|"There is no location"
operator|+
literal|" table="
operator|+
name|tableName
operator|+
literal|" ,replica="
operator|+
name|replicaId
operator|+
literal|", row="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getExceptionMessageAdditionalDetail
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|sleep
parameter_list|(
name|long
name|pause
parameter_list|,
name|int
name|tries
parameter_list|)
block|{
name|long
name|sleep
init|=
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
name|pause
argument_list|,
name|tries
argument_list|)
decl_stmt|;
if|if
condition|(
name|sleep
operator|<
name|MIN_WAIT_DEAD_SERVER
operator|&&
operator|(
name|location
operator|==
literal|null
operator|||
name|connection
operator|.
name|isDeadServer
argument_list|(
name|location
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|sleep
operator|=
name|ConnectionUtils
operator|.
name|addJitter
argument_list|(
name|MIN_WAIT_DEAD_SERVER
argument_list|,
literal|0.10f
argument_list|)
expr_stmt|;
block|}
return|return
name|sleep
return|;
block|}
specifier|public
specifier|static
name|RegionLocations
name|getRegionLocations
parameter_list|(
name|ClusterConnection
name|connection
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|boolean
name|useCache
parameter_list|,
name|int
name|replicaId
parameter_list|)
throws|throws
name|RetriesExhaustedException
throws|,
name|DoNotRetryIOException
throws|,
name|InterruptedIOException
block|{
name|RegionLocations
name|rl
decl_stmt|;
try|try
block|{
name|rl
operator|=
name|connection
operator|.
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|useCache
argument_list|,
literal|true
argument_list|,
name|replicaId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedIOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RetriesExhaustedException
argument_list|(
literal|"Can't get the location"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|rl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RetriesExhaustedException
argument_list|(
literal|"Can't get the locations"
argument_list|)
throw|;
block|}
return|return
name|rl
return|;
block|}
comment|/**    * Override that changes Exception from {@link Exception} to {@link IOException}. It also does    * setup of an rpcController and calls through to the unimplemented    * call(PayloadCarryingRpcController) method; implement this method to add your rpc invocation.    */
annotation|@
name|Override
comment|// Same trick as in RegionServerCallable so users don't have to copy/paste so much boilerplate
comment|// and so we contain references to protobuf. We can't set priority on the rpcController as
comment|// we do in RegionServerCallable because we don't always have a Table when we call.
specifier|public
name|T
name|call
parameter_list|(
name|int
name|callTimeout
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|controller
operator|=
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|setPriority
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|setCallTimeout
argument_list|(
name|callTimeout
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|call
argument_list|(
name|this
operator|.
name|controller
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|handleRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|PayloadCarryingRpcController
name|getCurrentPayloadCarryingRpcController
parameter_list|()
block|{
return|return
name|this
operator|.
name|controller
return|;
block|}
comment|/**    * Run RPC call.    * @param rpcController PayloadCarryingRpcController is a mouthful but it at a minimum is a    * facade on protobuf so we don't have to put protobuf everywhere; we can keep it behind this    * class.    * @throws Exception    */
specifier|protected
specifier|abstract
name|T
name|call
parameter_list|(
name|PayloadCarryingRpcController
name|rpcController
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
end_class

end_unit

