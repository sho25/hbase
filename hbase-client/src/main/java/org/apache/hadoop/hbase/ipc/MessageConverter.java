begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Interface to convert Messages to specific types  * @param<M> Message Type to convert  * @param<O> Output Type  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
interface|interface
name|MessageConverter
parameter_list|<
name|M
parameter_list|,
name|O
parameter_list|>
block|{
comment|/**    * Converts Message to Output    * @param msg to convert    * @param cellScanner to use for conversion    * @return Output    * @throws IOException if message could not be converted to response    */
name|O
name|convert
parameter_list|(
name|M
name|msg
parameter_list|,
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|MessageConverter
argument_list|<
name|Message
argument_list|,
name|Message
argument_list|>
name|NO_CONVERTER
init|=
operator|new
name|MessageConverter
argument_list|<
name|Message
argument_list|,
name|Message
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Message
name|convert
parameter_list|(
name|Message
name|msg
parameter_list|,
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|msg
return|;
block|}
block|}
decl_stmt|;
block|}
end_interface

end_unit

