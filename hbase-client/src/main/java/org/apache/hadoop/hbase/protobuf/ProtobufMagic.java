begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Protobufs utility.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ProtobufMagic
block|{
specifier|private
name|ProtobufMagic
parameter_list|()
block|{   }
comment|/**    * Magic we put ahead of a serialized protobuf message.    * For example, all znode content is protobuf messages with the below magic    * for preamble.    */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|PB_MAGIC
init|=
operator|new
name|byte
index|[]
block|{
literal|'P'
block|,
literal|'B'
block|,
literal|'U'
block|,
literal|'F'
block|}
decl_stmt|;
comment|/**    * @param bytes Bytes to check.    * @return True if passed<code>bytes</code> has {@link #PB_MAGIC} for a prefix.    */
specifier|public
specifier|static
name|boolean
name|isPBMagicPrefix
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
comment|/*    * Copied from Bytes.java to here    * hbase-common now depends on hbase-protocol    * Referencing Bytes.java directly would create circular dependency    */
specifier|private
specifier|static
name|int
name|compareTo
parameter_list|(
name|byte
index|[]
name|buffer1
parameter_list|,
name|int
name|offset1
parameter_list|,
name|int
name|length1
parameter_list|,
name|byte
index|[]
name|buffer2
parameter_list|,
name|int
name|offset2
parameter_list|,
name|int
name|length2
parameter_list|)
block|{
comment|// Short circuit equal case
if|if
condition|(
name|buffer1
operator|==
name|buffer2
operator|&&
name|offset1
operator|==
name|offset2
operator|&&
name|length1
operator|==
name|length2
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// Bring WritableComparator code local
name|int
name|end1
init|=
name|offset1
operator|+
name|length1
decl_stmt|;
name|int
name|end2
init|=
name|offset2
operator|+
name|length2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset1
init|,
name|j
init|=
name|offset2
init|;
name|i
operator|<
name|end1
operator|&&
name|j
operator|<
name|end2
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|int
name|a
init|=
operator|(
name|buffer1
index|[
name|i
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
name|int
name|b
init|=
operator|(
name|buffer2
index|[
name|j
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
name|b
condition|)
block|{
return|return
name|a
operator|-
name|b
return|;
block|}
block|}
return|return
name|length1
operator|-
name|length2
return|;
block|}
comment|/**    * @param bytes Bytes to check.    * @param offset offset to start at    * @param len length to use    * @return True if passed<code>bytes</code> has {@link #PB_MAGIC} for a prefix.    */
specifier|public
specifier|static
name|boolean
name|isPBMagicPrefix
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|len
operator|<
name|PB_MAGIC
operator|.
name|length
condition|)
return|return
literal|false
return|;
return|return
name|compareTo
argument_list|(
name|PB_MAGIC
argument_list|,
literal|0
argument_list|,
name|PB_MAGIC
operator|.
name|length
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|,
name|PB_MAGIC
operator|.
name|length
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/**    * @return Length of {@link #PB_MAGIC}    */
specifier|public
specifier|static
name|int
name|lengthOfPBMagic
parameter_list|()
block|{
return|return
name|PB_MAGIC
operator|.
name|length
return|;
block|}
block|}
end_class

end_unit

