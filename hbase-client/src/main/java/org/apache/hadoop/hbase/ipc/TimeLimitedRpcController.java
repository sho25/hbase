begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|TimeLimitedRpcController
implements|implements
name|RpcController
block|{
comment|/**    * The time, in ms before the call should expire.    */
specifier|protected
specifier|volatile
name|Integer
name|callTimeout
decl_stmt|;
specifier|protected
specifier|volatile
name|boolean
name|cancelled
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|final
name|AtomicReference
argument_list|<
name|RpcCallback
argument_list|<
name|Object
argument_list|>
argument_list|>
name|cancellationCb
init|=
operator|new
name|AtomicReference
argument_list|<
name|RpcCallback
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|AtomicReference
argument_list|<
name|RpcCallback
argument_list|<
name|IOException
argument_list|>
argument_list|>
name|failureCb
init|=
operator|new
name|AtomicReference
argument_list|<
name|RpcCallback
argument_list|<
name|IOException
argument_list|>
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|private
name|IOException
name|exception
decl_stmt|;
specifier|public
name|int
name|getCallTimeout
parameter_list|()
block|{
if|if
condition|(
name|callTimeout
operator|!=
literal|null
condition|)
block|{
return|return
name|callTimeout
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
specifier|public
name|void
name|setCallTimeout
parameter_list|(
name|int
name|callTimeout
parameter_list|)
block|{
name|this
operator|.
name|callTimeout
operator|=
name|callTimeout
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasCallTimeout
parameter_list|()
block|{
return|return
name|callTimeout
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|errorText
parameter_list|()
block|{
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
return|return
name|exception
operator|.
name|getMessage
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * For use in async rpc clients    * @return true if failed    */
annotation|@
name|Override
specifier|public
name|boolean
name|failed
parameter_list|()
block|{
return|return
name|this
operator|.
name|exception
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCanceled
parameter_list|()
block|{
return|return
name|cancelled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyOnCancel
parameter_list|(
name|RpcCallback
argument_list|<
name|Object
argument_list|>
name|cancellationCb
parameter_list|)
block|{
name|this
operator|.
name|cancellationCb
operator|.
name|set
argument_list|(
name|cancellationCb
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|cancelled
condition|)
block|{
name|cancellationCb
operator|.
name|run
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Notify a callback on error.    * For use in async rpc clients    *    * @param failureCb the callback to call on error    */
specifier|public
name|void
name|notifyOnFail
parameter_list|(
name|RpcCallback
argument_list|<
name|IOException
argument_list|>
name|failureCb
parameter_list|)
block|{
name|this
operator|.
name|failureCb
operator|.
name|set
argument_list|(
name|failureCb
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|exception
operator|!=
literal|null
condition|)
block|{
name|failureCb
operator|.
name|run
argument_list|(
name|this
operator|.
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|exception
operator|=
literal|null
expr_stmt|;
name|cancelled
operator|=
literal|false
expr_stmt|;
name|failureCb
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cancellationCb
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|callTimeout
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFailed
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
operator|new
name|IOException
argument_list|(
name|reason
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|failureCb
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|failureCb
operator|.
name|get
argument_list|()
operator|.
name|run
argument_list|(
name|this
operator|.
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set failed with an exception to pass on.    * For use in async rpc clients    *    * @param e exception to set with    */
specifier|public
name|void
name|setFailed
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|failureCb
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|failureCb
operator|.
name|get
argument_list|()
operator|.
name|run
argument_list|(
name|this
operator|.
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startCancel
parameter_list|()
block|{
name|cancelled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cancellationCb
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cancellationCb
operator|.
name|get
argument_list|()
operator|.
name|run
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

