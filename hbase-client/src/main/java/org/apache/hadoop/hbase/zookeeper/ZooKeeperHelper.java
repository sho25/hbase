begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_comment
comment|/**  * Methods that help working with ZooKeeper  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|ZooKeeperHelper
block|{
comment|// This class cannot be instantiated
specifier|private
name|ZooKeeperHelper
parameter_list|()
block|{   }
comment|/**    * Get a ZooKeeper instance and wait until it connected before returning.    * @param sessionTimeoutMs Used as session timeout passed to the created ZooKeeper AND as the    *   timeout to wait on connection establishment.    */
specifier|public
specifier|static
name|ZooKeeper
name|getConnectedZooKeeper
parameter_list|(
name|String
name|connectString
parameter_list|,
name|int
name|sessionTimeoutMs
parameter_list|)
throws|throws
name|IOException
block|{
name|ZooKeeper
name|zookeeper
init|=
operator|new
name|ZooKeeper
argument_list|(
name|connectString
argument_list|,
name|sessionTimeoutMs
argument_list|,
name|e
lambda|->
block|{}
argument_list|)
decl_stmt|;
return|return
name|ensureConnectedZooKeeper
argument_list|(
name|zookeeper
argument_list|,
name|sessionTimeoutMs
argument_list|)
return|;
block|}
comment|/**    * Ensure passed zookeeper is connected.    * @param timeout Time to wait on established Connection    */
specifier|public
specifier|static
name|ZooKeeper
name|ensureConnectedZooKeeper
parameter_list|(
name|ZooKeeper
name|zookeeper
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|ZooKeeperConnectionException
block|{
if|if
condition|(
name|zookeeper
operator|.
name|getState
argument_list|()
operator|.
name|isConnected
argument_list|()
condition|)
block|{
return|return
name|zookeeper
return|;
block|}
name|Stopwatch
name|stopWatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
comment|// Make sure we are connected before we hand it back.
while|while
condition|(
operator|!
name|zookeeper
operator|.
name|getState
argument_list|()
operator|.
name|isConnected
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|>
name|timeout
condition|)
block|{
throw|throw
operator|new
name|ZooKeeperConnectionException
argument_list|(
literal|"Failed connect after waiting "
operator|+
name|stopWatch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|+
literal|"ms (zk session timeout); "
operator|+
name|zookeeper
argument_list|)
throw|;
block|}
block|}
return|return
name|zookeeper
return|;
block|}
block|}
end_class

end_unit

