begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|MethodDescriptor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Represents a coprocessor service method execution against a single region.  While coprocessor  * service calls are performed against a region, this class implements {@link Row} in order to  * make use of the {@link AsyncProcess} framework for batching multi-region calls per region server.  *  *<p><b>Note:</b> This class should not be instantiated directly.  Use either  * {@link HTable#batchCoprocessorService(MethodDescriptor, Message, byte[], byte[],  * Message, Batch.Callback)}  * or {@link HTable#batchCoprocessorService(MethodDescriptor, Message, byte[], byte[], Message)}  * instead.</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionCoprocessorServiceExec
implements|implements
name|Row
block|{
comment|/*    * This duplicates region name in MultiAction, but allows us to easily access the region name in    * the AsyncProcessCallback context.    */
specifier|private
specifier|final
name|byte
index|[]
name|region
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|startKey
decl_stmt|;
specifier|private
specifier|final
name|MethodDescriptor
name|method
decl_stmt|;
specifier|private
specifier|final
name|Message
name|request
decl_stmt|;
specifier|public
name|RegionCoprocessorServiceExec
parameter_list|(
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|MethodDescriptor
name|method
parameter_list|,
name|Message
name|request
parameter_list|)
block|{
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|startKey
operator|=
name|startKey
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
return|return
name|startKey
return|;
block|}
specifier|public
name|byte
index|[]
name|getRegion
parameter_list|()
block|{
return|return
name|region
return|;
block|}
specifier|public
name|MethodDescriptor
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
specifier|public
name|Message
name|getRequest
parameter_list|()
block|{
return|return
name|request
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Row
name|o
parameter_list|)
block|{
name|int
name|res
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|getRow
argument_list|()
argument_list|,
name|o
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|o
operator|instanceof
name|RegionCoprocessorServiceExec
operator|)
operator|&&
name|res
operator|==
literal|0
condition|)
block|{
name|RegionCoprocessorServiceExec
name|exec
init|=
operator|(
name|RegionCoprocessorServiceExec
operator|)
name|o
decl_stmt|;
name|res
operator|=
name|method
operator|.
name|getFullName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|exec
operator|.
name|getMethod
argument_list|()
operator|.
name|getFullName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|==
literal|0
condition|)
block|{
name|res
operator|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|request
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|exec
operator|.
name|getRequest
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|Bytes
operator|.
name|hashCode
argument_list|(
name|this
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|,
name|method
operator|.
name|getFullName
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Row
name|other
init|=
operator|(
name|Row
operator|)
name|obj
decl_stmt|;
return|return
name|compareTo
argument_list|(
name|other
argument_list|)
operator|==
literal|0
return|;
block|}
block|}
end_class

end_unit

