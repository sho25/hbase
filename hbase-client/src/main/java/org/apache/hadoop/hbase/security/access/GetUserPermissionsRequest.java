begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Used by  * {@link org.apache.hadoop.hbase.client.Admin#getUserPermissions(GetUserPermissionsRequest)}.  * Represents the params of user permissions needed to get from HBase.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
specifier|final
class|class
name|GetUserPermissionsRequest
block|{
specifier|private
name|String
name|userName
decl_stmt|;
specifier|private
name|String
name|namespace
decl_stmt|;
specifier|private
name|TableName
name|tableName
decl_stmt|;
specifier|private
name|byte
index|[]
name|family
decl_stmt|;
specifier|private
name|byte
index|[]
name|qualifier
decl_stmt|;
specifier|private
name|GetUserPermissionsRequest
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|namespace
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|family
operator|=
name|family
expr_stmt|;
name|this
operator|.
name|qualifier
operator|=
name|qualifier
expr_stmt|;
block|}
comment|/**    * Build a get global permission request    * @return a get global permission request builder    */
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**    * Build a get namespace permission request    * @param namespace the specific namespace    * @return a get namespace permission request builder    */
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|namespace
argument_list|)
return|;
block|}
comment|/**    * Build a get table permission request    * @param tableName the specific table name    * @return a get table permission request builder    */
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|tableName
argument_list|)
return|;
block|}
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
specifier|public
name|String
name|getNamespace
parameter_list|()
block|{
return|return
name|namespace
return|;
block|}
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
specifier|public
name|byte
index|[]
name|getFamily
parameter_list|()
block|{
return|return
name|family
return|;
block|}
specifier|public
name|byte
index|[]
name|getQualifier
parameter_list|()
block|{
return|return
name|qualifier
return|;
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Builder
block|{
specifier|private
name|String
name|userName
decl_stmt|;
specifier|private
name|String
name|namespace
decl_stmt|;
specifier|private
name|TableName
name|tableName
decl_stmt|;
specifier|private
name|byte
index|[]
name|family
decl_stmt|;
specifier|private
name|byte
index|[]
name|qualifier
decl_stmt|;
specifier|private
name|Builder
parameter_list|()
block|{     }
specifier|private
name|Builder
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
block|}
specifier|private
name|Builder
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
comment|/**      * user name could be null if need all global/namespace/table permissions      */
specifier|public
name|Builder
name|withUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|withFamily
parameter_list|(
name|byte
index|[]
name|family
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|tableName
argument_list|,
literal|"The tableName can't be NULL"
argument_list|)
expr_stmt|;
name|this
operator|.
name|family
operator|=
name|family
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|withQualifier
parameter_list|(
name|byte
index|[]
name|qualifier
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|tableName
argument_list|,
literal|"The tableName can't be NULL"
argument_list|)
expr_stmt|;
comment|// Objects.requireNonNull(family, "The family can't be NULL");
name|this
operator|.
name|qualifier
operator|=
name|qualifier
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|GetUserPermissionsRequest
name|build
parameter_list|()
block|{
return|return
operator|new
name|GetUserPermissionsRequest
argument_list|(
name|userName
argument_list|,
name|namespace
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

