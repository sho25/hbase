begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AsyncMetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncRpcRetryingCallerFactory
operator|.
name|MasterRequestCallerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|BalanceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|BalanceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableDescriptorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableDescriptorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableNamesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableNamesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsBalancerEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsBalancerEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetBalancerRunningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetBalancerRunningResponse
import|;
end_import

begin_comment
comment|/**  * The implementation of AsyncAdmin.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|AsyncHBaseAdmin
implements|implements
name|AsyncAdmin
block|{
specifier|private
specifier|final
name|AsyncConnectionImpl
name|connection
decl_stmt|;
specifier|private
specifier|final
name|long
name|rpcTimeoutNs
decl_stmt|;
specifier|private
specifier|final
name|long
name|operationTimeoutNs
decl_stmt|;
specifier|private
specifier|final
name|long
name|pauseNs
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxAttempts
decl_stmt|;
specifier|private
specifier|final
name|int
name|startLogErrorsCnt
decl_stmt|;
name|AsyncHBaseAdmin
parameter_list|(
name|AsyncConnectionImpl
name|connection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|rpcTimeoutNs
operator|=
name|connection
operator|.
name|connConf
operator|.
name|getRpcTimeoutNs
argument_list|()
expr_stmt|;
name|this
operator|.
name|operationTimeoutNs
operator|=
name|connection
operator|.
name|connConf
operator|.
name|getOperationTimeoutNs
argument_list|()
expr_stmt|;
name|this
operator|.
name|pauseNs
operator|=
name|connection
operator|.
name|connConf
operator|.
name|getPauseNs
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxAttempts
operator|=
name|connection
operator|.
name|connConf
operator|.
name|getMaxRetries
argument_list|()
expr_stmt|;
name|this
operator|.
name|startLogErrorsCnt
operator|=
name|connection
operator|.
name|connConf
operator|.
name|getStartLogErrorsCnt
argument_list|()
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|MasterRequestCallerBuilder
argument_list|<
name|T
argument_list|>
name|newCaller
parameter_list|()
block|{
return|return
name|this
operator|.
name|connection
operator|.
name|callerFactory
operator|.
expr|<
name|T
operator|>
name|masterRequest
argument_list|()
operator|.
name|rpcTimeout
argument_list|(
name|rpcTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|operationTimeout
argument_list|(
name|operationTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|pause
argument_list|(
name|pauseNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|maxAttempts
argument_list|(
name|maxAttempts
argument_list|)
operator|.
name|startLogErrorsCnt
argument_list|(
name|startLogErrorsCnt
argument_list|)
return|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|RpcCall
parameter_list|<
name|RESP
parameter_list|,
name|REQ
parameter_list|>
block|{
name|void
name|call
parameter_list|(
name|MasterService
operator|.
name|Interface
name|stub
parameter_list|,
name|HBaseRpcController
name|controller
parameter_list|,
name|REQ
name|req
parameter_list|,
name|RpcCallback
argument_list|<
name|RESP
argument_list|>
name|done
parameter_list|)
function_decl|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|Converter
parameter_list|<
name|D
parameter_list|,
name|S
parameter_list|>
block|{
name|D
name|convert
parameter_list|(
name|S
name|src
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
parameter_list|<
name|PREQ
parameter_list|,
name|PRESP
parameter_list|,
name|RESP
parameter_list|>
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|call
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|,
name|MasterService
operator|.
name|Interface
name|stub
parameter_list|,
name|PREQ
name|preq
parameter_list|,
name|RpcCall
argument_list|<
name|PRESP
argument_list|,
name|PREQ
argument_list|>
name|rpcCall
parameter_list|,
name|Converter
argument_list|<
name|RESP
argument_list|,
name|PRESP
argument_list|>
name|respConverter
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|rpcCall
operator|.
name|call
argument_list|(
name|stub
argument_list|,
name|controller
argument_list|,
name|preq
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|PRESP
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|PRESP
name|resp
parameter_list|)
block|{
if|if
condition|(
name|controller
operator|.
name|failed
argument_list|()
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|controller
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|future
operator|.
name|complete
argument_list|(
name|respConverter
operator|.
name|convert
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|listTables
parameter_list|()
block|{
return|return
name|listTables
argument_list|(
operator|(
name|Pattern
operator|)
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|listTables
parameter_list|(
name|String
name|regex
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
block|{
return|return
name|listTables
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|listTables
parameter_list|(
name|Pattern
name|pattern
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|HTableDescriptor
index|[]
operator|>
name|newCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetTableDescriptorsRequest
argument_list|,
name|GetTableDescriptorsResponse
argument_list|,
name|HTableDescriptor
index|[]
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildGetTableDescriptorsRequest
argument_list|(
name|pattern
argument_list|,
name|includeSysTables
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getTableDescriptors
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|ProtobufUtil
operator|.
name|getHTableDescriptorArray
argument_list|(
name|resp
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|TableName
index|[]
argument_list|>
name|listTableNames
parameter_list|()
block|{
return|return
name|listTableNames
argument_list|(
operator|(
name|Pattern
operator|)
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|TableName
index|[]
argument_list|>
name|listTableNames
parameter_list|(
name|String
name|regex
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
block|{
return|return
name|listTableNames
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|TableName
index|[]
argument_list|>
name|listTableNames
parameter_list|(
name|Pattern
name|pattern
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|TableName
index|[]
operator|>
name|newCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetTableNamesRequest
argument_list|,
name|GetTableNamesResponse
argument_list|,
name|TableName
index|[]
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildGetTableNamesRequest
argument_list|(
name|pattern
argument_list|,
name|includeSysTables
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getTableNames
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|ProtobufUtil
operator|.
name|getTableNameArray
argument_list|(
name|resp
operator|.
name|getTableNamesList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|setBalancerRunning
parameter_list|(
specifier|final
name|boolean
name|on
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<SetBalancerRunningRequest
argument_list|,
name|SetBalancerRunningResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildSetBalancerRunningRequest
argument_list|(
name|on
argument_list|,
literal|true
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|setBalancerRunning
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getPrevBalanceValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|balancer
parameter_list|()
block|{
return|return
name|balancer
argument_list|(
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|balancer
parameter_list|(
name|boolean
name|force
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<BalanceRequest
argument_list|,
name|BalanceResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildBalanceRequest
argument_list|(
name|force
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|balance
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getBalancerRan
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isBalancerEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<IsBalancerEnabledRequest
argument_list|,
name|IsBalancerEnabledResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildIsBalancerEnabledRequest
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|isBalancerEnabled
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getEnabled
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|tableExists
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|AsyncMetaTableAccessor
operator|.
name|tableExists
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

