begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
operator|.
name|META_TABLE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AsyncMetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncRpcRetryingCallerFactory
operator|.
name|AdminRequestCallerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncRpcRetryingCallerFactory
operator|.
name|MasterRequestCallerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|TableSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AddColumnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AddColumnResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|BalanceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|BalanceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DisableTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DisableTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|EnableTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|EnableTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteColumnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteColumnResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetProcedureResultRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetProcedureResultResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetSchemaAlterStatusRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetSchemaAlterStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableDescriptorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableDescriptorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableNamesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableNamesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsBalancerEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsBalancerEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyColumnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyColumnResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetBalancerRunningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetBalancerRunningResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|TruncateTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|TruncateTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ForeignExceptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_comment
comment|/**  * The implementation of AsyncAdmin.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|AsyncHBaseAdmin
implements|implements
name|AsyncAdmin
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AsyncHBaseAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AsyncConnectionImpl
name|connection
decl_stmt|;
specifier|private
specifier|final
name|RawAsyncTable
name|metaTable
decl_stmt|;
specifier|private
specifier|final
name|long
name|rpcTimeoutNs
decl_stmt|;
specifier|private
specifier|final
name|long
name|operationTimeoutNs
decl_stmt|;
specifier|private
specifier|final
name|long
name|pauseNs
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxAttempts
decl_stmt|;
specifier|private
specifier|final
name|int
name|startLogErrorsCnt
decl_stmt|;
specifier|private
specifier|final
name|NonceGenerator
name|ng
decl_stmt|;
name|AsyncHBaseAdmin
parameter_list|(
name|AsyncConnectionImpl
name|connection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|metaTable
operator|=
name|connection
operator|.
name|getRawTable
argument_list|(
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcTimeoutNs
operator|=
name|connection
operator|.
name|connConf
operator|.
name|getRpcTimeoutNs
argument_list|()
expr_stmt|;
name|this
operator|.
name|operationTimeoutNs
operator|=
name|connection
operator|.
name|connConf
operator|.
name|getOperationTimeoutNs
argument_list|()
expr_stmt|;
name|this
operator|.
name|pauseNs
operator|=
name|connection
operator|.
name|connConf
operator|.
name|getPauseNs
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxAttempts
operator|=
name|connection
operator|.
name|connConf
operator|.
name|getMaxRetries
argument_list|()
expr_stmt|;
name|this
operator|.
name|startLogErrorsCnt
operator|=
name|connection
operator|.
name|connConf
operator|.
name|getStartLogErrorsCnt
argument_list|()
expr_stmt|;
name|this
operator|.
name|ng
operator|=
name|connection
operator|.
name|getNonceGenerator
argument_list|()
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|MasterRequestCallerBuilder
argument_list|<
name|T
argument_list|>
name|newMasterCaller
parameter_list|()
block|{
return|return
name|this
operator|.
name|connection
operator|.
name|callerFactory
operator|.
expr|<
name|T
operator|>
name|masterRequest
argument_list|()
operator|.
name|rpcTimeout
argument_list|(
name|rpcTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|operationTimeout
argument_list|(
name|operationTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|pause
argument_list|(
name|pauseNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|maxAttempts
argument_list|(
name|maxAttempts
argument_list|)
operator|.
name|startLogErrorsCnt
argument_list|(
name|startLogErrorsCnt
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|AdminRequestCallerBuilder
argument_list|<
name|T
argument_list|>
name|newAdminCaller
parameter_list|()
block|{
return|return
name|this
operator|.
name|connection
operator|.
name|callerFactory
operator|.
expr|<
name|T
operator|>
name|adminRequest
argument_list|()
operator|.
name|rpcTimeout
argument_list|(
name|rpcTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|operationTimeout
argument_list|(
name|operationTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|pause
argument_list|(
name|pauseNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|maxAttempts
argument_list|(
name|maxAttempts
argument_list|)
operator|.
name|startLogErrorsCnt
argument_list|(
name|startLogErrorsCnt
argument_list|)
return|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|MasterRpcCall
parameter_list|<
name|RESP
parameter_list|,
name|REQ
parameter_list|>
block|{
name|void
name|call
parameter_list|(
name|MasterService
operator|.
name|Interface
name|stub
parameter_list|,
name|HBaseRpcController
name|controller
parameter_list|,
name|REQ
name|req
parameter_list|,
name|RpcCallback
argument_list|<
name|RESP
argument_list|>
name|done
parameter_list|)
function_decl|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|AdminRpcCall
parameter_list|<
name|RESP
parameter_list|,
name|REQ
parameter_list|>
block|{
name|void
name|call
parameter_list|(
name|AdminService
operator|.
name|Interface
name|stub
parameter_list|,
name|HBaseRpcController
name|controller
parameter_list|,
name|REQ
name|req
parameter_list|,
name|RpcCallback
argument_list|<
name|RESP
argument_list|>
name|done
parameter_list|)
function_decl|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|Converter
parameter_list|<
name|D
parameter_list|,
name|S
parameter_list|>
block|{
name|D
name|convert
parameter_list|(
name|S
name|src
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
parameter_list|<
name|PREQ
parameter_list|,
name|PRESP
parameter_list|,
name|RESP
parameter_list|>
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|call
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|,
name|MasterService
operator|.
name|Interface
name|stub
parameter_list|,
name|PREQ
name|preq
parameter_list|,
name|MasterRpcCall
argument_list|<
name|PRESP
argument_list|,
name|PREQ
argument_list|>
name|rpcCall
parameter_list|,
name|Converter
argument_list|<
name|RESP
argument_list|,
name|PRESP
argument_list|>
name|respConverter
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|rpcCall
operator|.
name|call
argument_list|(
name|stub
argument_list|,
name|controller
argument_list|,
name|preq
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|PRESP
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|PRESP
name|resp
parameter_list|)
block|{
if|if
condition|(
name|controller
operator|.
name|failed
argument_list|()
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|controller
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|future
operator|.
name|complete
argument_list|(
name|respConverter
operator|.
name|convert
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
comment|//TODO abstract call and adminCall into a single method.
specifier|private
parameter_list|<
name|PREQ
parameter_list|,
name|PRESP
parameter_list|,
name|RESP
parameter_list|>
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|adminCall
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|,
name|AdminService
operator|.
name|Interface
name|stub
parameter_list|,
name|PREQ
name|preq
parameter_list|,
name|AdminRpcCall
argument_list|<
name|PRESP
argument_list|,
name|PREQ
argument_list|>
name|rpcCall
parameter_list|,
name|Converter
argument_list|<
name|RESP
argument_list|,
name|PRESP
argument_list|>
name|respConverter
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|rpcCall
operator|.
name|call
argument_list|(
name|stub
argument_list|,
name|controller
argument_list|,
name|preq
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|PRESP
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|PRESP
name|resp
parameter_list|)
block|{
if|if
condition|(
name|controller
operator|.
name|failed
argument_list|()
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IOException
argument_list|(
name|controller
operator|.
name|errorText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|respConverter
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|future
operator|.
name|complete
argument_list|(
name|respConverter
operator|.
name|convert
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|private
parameter_list|<
name|PREQ
parameter_list|,
name|PRESP
parameter_list|>
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|procedureCall
parameter_list|(
name|PREQ
name|preq
parameter_list|,
name|MasterRpcCall
argument_list|<
name|PRESP
argument_list|,
name|PREQ
argument_list|>
name|rpcCall
parameter_list|,
name|Converter
argument_list|<
name|Long
argument_list|,
name|PRESP
argument_list|>
name|respConverter
parameter_list|,
name|TableProcedureBiConsumer
name|consumer
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Long
argument_list|>
name|procFuture
init|=
name|this
operator|.
expr|<
name|Long
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<PREQ
argument_list|,
name|PRESP
argument_list|,
name|Long
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|preq
argument_list|,
name|rpcCall
argument_list|,
name|respConverter
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
return|return
name|waitProcedureResult
argument_list|(
name|procFuture
argument_list|)
operator|.
name|whenComplete
argument_list|(
name|consumer
argument_list|)
return|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|TableOperator
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|operate
parameter_list|(
name|TableName
name|table
parameter_list|)
function_decl|;
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|batchTableOperations
parameter_list|(
name|Pattern
name|pattern
parameter_list|,
name|TableOperator
name|operator
parameter_list|,
name|String
name|operationType
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|failed
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|listTables
argument_list|(
name|pattern
argument_list|,
literal|false
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|tables
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
name|CompletableFuture
index|[]
name|futures
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|tables
argument_list|)
operator|.
name|map
argument_list|(
parameter_list|(
name|table
parameter_list|)
lambda|->
name|operator
operator|.
name|operate
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|v
parameter_list|,
name|ex
parameter_list|)
lambda|->
block|{
block|if (ex != null
argument_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to "
operator|+
name|operationType
operator|+
literal|" table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|failed
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
block|)
function|.toArray
parameter_list|(
function|size -> new CompletableFuture[size]
block|)
class|;
end_class

begin_expr_stmt
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|futures
argument_list|)
operator|.
name|thenAccept
argument_list|(
parameter_list|(
name|v
parameter_list|)
lambda|->
block|{
name|future
operator|.
name|complete
argument_list|(
name|failed
operator|.
name|toArray
argument_list|(
operator|new
name|HTableDescriptor
index|[
name|failed
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|future
return|;
end_return

begin_function
unit|}    @
name|Override
specifier|public
name|AsyncConnectionImpl
name|getConnection
parameter_list|()
block|{
return|return
name|this
operator|.
name|connection
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|tableExists
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|AsyncMetaTableAccessor
operator|.
name|tableExists
argument_list|(
name|metaTable
argument_list|,
name|tableName
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|listTables
parameter_list|()
block|{
return|return
name|listTables
argument_list|(
operator|(
name|Pattern
operator|)
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|listTables
parameter_list|(
name|String
name|regex
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
block|{
return|return
name|listTables
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|listTables
parameter_list|(
name|Pattern
name|pattern
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|HTableDescriptor
index|[]
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetTableDescriptorsRequest
argument_list|,
name|GetTableDescriptorsResponse
argument_list|,
name|HTableDescriptor
index|[]
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildGetTableDescriptorsRequest
argument_list|(
name|pattern
argument_list|,
name|includeSysTables
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getTableDescriptors
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|ProtobufUtil
operator|.
name|getHTableDescriptorArray
argument_list|(
name|resp
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|TableName
index|[]
argument_list|>
name|listTableNames
parameter_list|()
block|{
return|return
name|listTableNames
argument_list|(
operator|(
name|Pattern
operator|)
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|TableName
index|[]
argument_list|>
name|listTableNames
parameter_list|(
name|String
name|regex
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
block|{
return|return
name|listTableNames
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|TableName
index|[]
argument_list|>
name|listTableNames
parameter_list|(
name|Pattern
name|pattern
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|TableName
index|[]
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetTableNamesRequest
argument_list|,
name|GetTableNamesResponse
argument_list|,
name|TableName
index|[]
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildGetTableNamesRequest
argument_list|(
name|pattern
argument_list|,
name|includeSysTables
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getTableNames
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|ProtobufUtil
operator|.
name|getTableNameArray
argument_list|(
name|resp
operator|.
name|getTableNamesList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|HTableDescriptor
argument_list|>
name|getTableDescriptor
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|HTableDescriptor
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|this
operator|.
expr|<
name|List
argument_list|<
name|TableSchema
argument_list|>
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetTableDescriptorsRequest
argument_list|,
name|GetTableDescriptorsResponse
argument_list|,
name|List
argument_list|<
name|TableSchema
argument_list|>
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildGetTableDescriptorsRequest
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getTableDescriptors
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getTableSchemaList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|tableSchemas
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
lambda|if (!tableSchemas.isEmpty(
argument_list|)
block|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|ProtobufUtil
operator|.
name|convertToHTableDesc
argument_list|(
name|tableSchemas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_else
else|else
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_else

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|future
return|;
end_return

begin_function
unit|}    @
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createTable
parameter_list|(
name|HTableDescriptor
name|desc
parameter_list|)
block|{
return|return
name|createTable
argument_list|(
name|desc
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createTable
parameter_list|(
name|HTableDescriptor
name|desc
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|int
name|numRegions
parameter_list|)
block|{
try|try
block|{
return|return
name|createTable
argument_list|(
name|desc
argument_list|,
name|getSplitKeys
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
name|failedFuture
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createTable
parameter_list|(
name|HTableDescriptor
name|desc
parameter_list|,
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
block|{
if|if
condition|(
name|desc
operator|.
name|getTableName
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|failedFuture
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"TableName cannot be null"
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|splitKeys
operator|!=
literal|null
operator|&&
name|splitKeys
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|splitKeys
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
comment|// Verify there are no duplicate split keys
name|byte
index|[]
name|lastKey
init|=
literal|null
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|splitKey
range|:
name|splitKeys
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|splitKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|failedFuture
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Empty split key must not be passed in the split keys."
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|lastKey
operator|!=
literal|null
operator|&&
name|Bytes
operator|.
name|equals
argument_list|(
name|splitKey
argument_list|,
name|lastKey
argument_list|)
condition|)
block|{
return|return
name|failedFuture
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All split keys must be unique, "
operator|+
literal|"found duplicate: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|splitKey
argument_list|)
operator|+
literal|", "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|lastKey
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
name|lastKey
operator|=
name|splitKey
expr_stmt|;
block|}
block|}
return|return
name|this
operator|.
expr|<
name|CreateTableRequest
operator|,
name|CreateTableResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildCreateTableRequest
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|createTable
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|CreateTableProcedureBiConsumer
argument_list|(
name|this
argument_list|,
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|DeleteTableRequest
operator|,
name|DeleteTableResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildDeleteTableRequest
argument_list|(
name|tableName
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|deleteTable
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|DeleteTableProcedureBiConsumer
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|deleteTables
parameter_list|(
name|String
name|regex
parameter_list|)
block|{
return|return
name|deleteTables
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|deleteTables
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
block|{
return|return
name|batchTableOperations
argument_list|(
name|pattern
argument_list|,
parameter_list|(
name|table
parameter_list|)
lambda|->
name|deleteTable
argument_list|(
name|table
argument_list|)
argument_list|,
literal|"DELETE"
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|truncateTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|boolean
name|preserveSplits
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|TruncateTableRequest
operator|,
name|TruncateTableResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildTruncateTableRequest
argument_list|(
name|tableName
argument_list|,
name|preserveSplits
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|truncateTable
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|TruncateTableProcedureBiConsumer
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|enableTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|EnableTableRequest
operator|,
name|EnableTableResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildEnableTableRequest
argument_list|(
name|tableName
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|enableTable
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|EnableTableProcedureBiConsumer
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|enableTables
parameter_list|(
name|String
name|regex
parameter_list|)
block|{
return|return
name|enableTables
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|enableTables
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
block|{
return|return
name|batchTableOperations
argument_list|(
name|pattern
argument_list|,
parameter_list|(
name|table
parameter_list|)
lambda|->
name|enableTable
argument_list|(
name|table
argument_list|)
argument_list|,
literal|"ENABLE"
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|disableTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|DisableTableRequest
operator|,
name|DisableTableResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildDisableTableRequest
argument_list|(
name|tableName
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|disableTable
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|DisableTableProcedureBiConsumer
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|disableTables
parameter_list|(
name|String
name|regex
parameter_list|)
block|{
return|return
name|disableTables
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
name|disableTables
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
block|{
return|return
name|batchTableOperations
argument_list|(
name|pattern
argument_list|,
parameter_list|(
name|table
parameter_list|)
lambda|->
name|disableTable
argument_list|(
name|table
argument_list|)
argument_list|,
literal|"DISABLE"
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|getAlterStatus
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetSchemaAlterStatusRequest
argument_list|,
name|GetSchemaAlterStatusResponse
argument_list|,
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildGetSchemaAlterStatusRequest
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getSchemaAlterStatus
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
operator|new
name|Pair
argument_list|<>
argument_list|(
name|resp
operator|.
name|getYetToUpdateRegions
argument_list|()
argument_list|,
name|resp
operator|.
name|getTotalRegions
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|addColumnFamily
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|columnFamily
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|AddColumnRequest
operator|,
name|AddColumnResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildAddColumnRequest
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|addColumn
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|AddColumnFamilyProcedureBiConsumer
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteColumnFamily
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|DeleteColumnRequest
operator|,
name|DeleteColumnResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildDeleteColumnRequest
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|deleteColumn
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|DeleteColumnFamilyProcedureBiConsumer
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|modifyColumnFamily
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|columnFamily
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|ModifyColumnRequest
operator|,
name|ModifyColumnResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildModifyColumnRequest
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|modifyColumn
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|ModifyColumnFamilyProcedureBiConsumer
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|setBalancerRunning
parameter_list|(
specifier|final
name|boolean
name|on
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<SetBalancerRunningRequest
argument_list|,
name|SetBalancerRunningResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildSetBalancerRunningRequest
argument_list|(
name|on
argument_list|,
literal|true
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|setBalancerRunning
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getPrevBalanceValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|balancer
parameter_list|()
block|{
return|return
name|balancer
argument_list|(
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|balancer
parameter_list|(
name|boolean
name|force
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<BalanceRequest
argument_list|,
name|BalanceResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildBalanceRequest
argument_list|(
name|force
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|balance
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getBalancerRan
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isBalancerEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<IsBalancerEnabledRequest
argument_list|,
name|IsBalancerEnabledResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildIsBalancerEnabledRequest
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|isBalancerEnabled
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getEnabled
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|closeRegion
parameter_list|(
name|String
name|regionname
parameter_list|,
name|String
name|serverName
parameter_list|)
block|{
return|return
name|closeRegion
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|regionname
argument_list|)
argument_list|,
name|serverName
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|closeRegion
parameter_list|(
name|byte
index|[]
name|regionname
parameter_list|,
name|String
name|serverName
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"closeRegion method depends on getRegion API, will support soon."
argument_list|)
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|closeRegionWithEncodedRegionName
parameter_list|(
name|String
name|encodedRegionName
parameter_list|,
name|String
name|serverName
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newAdminCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<CloseRegionRequest
argument_list|,
name|CloseRegionResponse
argument_list|,
name|Boolean
operator|>
name|adminCall
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|ProtobufUtil
operator|.
name|buildCloseRegionRequest
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
name|serverName
argument_list|)
argument_list|,
name|encodedRegionName
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|closeRegion
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getClosed
argument_list|()
argument_list|)
argument_list|)
operator|.
name|serverName
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
name|serverName
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|closeRegion
parameter_list|(
name|ServerName
name|sn
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newAdminCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<CloseRegionRequest
argument_list|,
name|CloseRegionResponse
argument_list|,
name|Void
operator|>
name|adminCall
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|ProtobufUtil
operator|.
name|buildCloseRegionRequest
argument_list|(
name|sn
argument_list|,
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|closeRegion
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|serverName
argument_list|(
name|sn
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
name|byte
index|[]
index|[]
name|getSplitKeys
parameter_list|(
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|int
name|numRegions
parameter_list|)
block|{
if|if
condition|(
name|numRegions
operator|<
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must create at least three regions"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|)
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Start key must be smaller than end key"
argument_list|)
throw|;
block|}
if|if
condition|(
name|numRegions
operator|==
literal|3
condition|)
block|{
return|return
operator|new
name|byte
index|[]
index|[]
block|{
name|startKey
block|,
name|endKey
block|}
return|;
block|}
name|byte
index|[]
index|[]
name|splitKeys
init|=
name|Bytes
operator|.
name|split
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
operator|-
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitKeys
operator|==
literal|null
operator|||
name|splitKeys
operator|.
name|length
operator|!=
name|numRegions
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to split key range into enough regions"
argument_list|)
throw|;
block|}
return|return
name|splitKeys
return|;
block|}
end_function

begin_class
specifier|private
specifier|abstract
class|class
name|ProcedureBiConsumer
implements|implements
name|BiConsumer
argument_list|<
name|Void
argument_list|,
name|Throwable
argument_list|>
block|{
specifier|protected
specifier|final
name|AsyncAdmin
name|admin
decl_stmt|;
name|ProcedureBiConsumer
parameter_list|(
name|AsyncAdmin
name|admin
parameter_list|)
block|{
name|this
operator|.
name|admin
operator|=
name|admin
expr_stmt|;
block|}
specifier|abstract
name|void
name|onFinished
parameter_list|()
function_decl|;
specifier|abstract
name|void
name|onError
parameter_list|(
name|Throwable
name|error
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
name|Void
name|v
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|onError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
name|onFinished
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|abstract
class|class
name|TableProcedureBiConsumer
extends|extends
name|ProcedureBiConsumer
block|{
specifier|protected
specifier|final
name|TableName
name|tableName
decl_stmt|;
name|TableProcedureBiConsumer
parameter_list|(
specifier|final
name|AsyncAdmin
name|admin
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|abstract
name|String
name|getOperationType
parameter_list|()
function_decl|;
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Operation: "
operator|+
name|getOperationType
argument_list|()
operator|+
literal|", "
operator|+
literal|"Table Name: "
operator|+
name|tableName
operator|.
name|getNameWithNamespaceInclAsString
argument_list|()
return|;
block|}
annotation|@
name|Override
name|void
name|onFinished
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getDescription
argument_list|()
operator|+
literal|" completed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onError
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getDescription
argument_list|()
operator|+
literal|" failed with "
operator|+
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
specifier|private
class|class
name|CreateTableProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|CreateTableProcedureBiConsumer
parameter_list|(
name|AsyncAdmin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"CREATE"
return|;
block|}
block|}
end_class

begin_class
specifier|private
class|class
name|DeleteTableProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|DeleteTableProcedureBiConsumer
parameter_list|(
name|AsyncAdmin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"DELETE"
return|;
block|}
annotation|@
name|Override
name|void
name|onFinished
parameter_list|()
block|{
name|this
operator|.
name|admin
operator|.
name|getConnection
argument_list|()
operator|.
name|getLocator
argument_list|()
operator|.
name|clearCache
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|super
operator|.
name|onFinished
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
specifier|private
class|class
name|TruncateTableProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|TruncateTableProcedureBiConsumer
parameter_list|(
name|AsyncAdmin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"TRUNCATE"
return|;
block|}
block|}
end_class

begin_class
specifier|private
class|class
name|EnableTableProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|EnableTableProcedureBiConsumer
parameter_list|(
name|AsyncAdmin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"ENABLE"
return|;
block|}
block|}
end_class

begin_class
specifier|private
class|class
name|DisableTableProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|DisableTableProcedureBiConsumer
parameter_list|(
name|AsyncAdmin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"DISABLE"
return|;
block|}
block|}
end_class

begin_class
specifier|private
class|class
name|AddColumnFamilyProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|AddColumnFamilyProcedureBiConsumer
parameter_list|(
name|AsyncAdmin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"ADD_COLUMN_FAMILY"
return|;
block|}
block|}
end_class

begin_class
specifier|private
class|class
name|DeleteColumnFamilyProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|DeleteColumnFamilyProcedureBiConsumer
parameter_list|(
name|AsyncAdmin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"DELETE_COLUMN_FAMILY"
return|;
block|}
block|}
end_class

begin_class
specifier|private
class|class
name|ModifyColumnFamilyProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|ModifyColumnFamilyProcedureBiConsumer
parameter_list|(
name|AsyncAdmin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"MODIFY_COLUMN_FAMILY"
return|;
block|}
block|}
end_class

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|waitProcedureResult
parameter_list|(
name|CompletableFuture
argument_list|<
name|Long
argument_list|>
name|procFuture
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|procFuture
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|procId
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
name|getProcedureResult
argument_list|(
name|procId
argument_list|,
name|future
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|getProcedureResult
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|,
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
parameter_list|)
block|{
name|this
operator|.
expr|<
name|GetProcedureResultResponse
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetProcedureResultRequest
argument_list|,
name|GetProcedureResultResponse
argument_list|,
name|GetProcedureResultResponse
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|GetProcedureResultRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getProcedureResult
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|response
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to get the procedure result procId="
operator|+
name|procId
argument_list|,
name|ConnectionUtils
operator|.
name|translateException
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|RETRY_TIMER
operator|.
name|newTimeout
argument_list|(
name|t
lambda|->
name|getProcedureResult
argument_list|(
name|procId
argument_list|,
name|future
argument_list|)
argument_list|,
name|pauseNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
return|return;
block|}
lambda|if (response.getState(
argument_list|)
operator|==
name|GetProcedureResultResponse
operator|.
name|State
operator|.
name|RUNNING
block|)
block|{
name|connection
operator|.
name|RETRY_TIMER
operator|.
name|newTimeout
argument_list|(
name|t
lambda|->
name|getProcedureResult
argument_list|(
name|procId
argument_list|,
name|future
argument_list|)
argument_list|,
name|pauseNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_if
if|if
condition|(
name|response
operator|.
name|hasException
argument_list|()
condition|)
block|{
name|IOException
name|ioe
init|=
name|ForeignExceptionUtil
operator|.
name|toIOException
argument_list|(
name|response
operator|.
name|getException
argument_list|()
argument_list|)
decl_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
end_if

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_function
unit|}    private
parameter_list|<
name|T
parameter_list|>
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|failedFuture
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

unit|}
end_unit

