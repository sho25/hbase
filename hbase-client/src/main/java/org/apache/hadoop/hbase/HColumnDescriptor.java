begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
operator|.
name|ModifyableColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MobCompactPartitionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|HBaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PrettyPrinter
operator|.
name|Unit
import|;
end_import

begin_comment
comment|/**  * An HColumnDescriptor contains information about a column family such as the  * number of versions, compression settings, etc.  *  * It is used as input when creating a table or adding a column.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|Deprecated
comment|// remove it in 3.0
specifier|public
class|class
name|HColumnDescriptor
implements|implements
name|ColumnFamilyDescriptor
implements|,
name|Comparable
argument_list|<
name|HColumnDescriptor
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|String
name|IN_MEMORY_COMPACTION
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|IN_MEMORY_COMPACTION
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMPRESSION
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|COMPRESSION
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMPRESSION_COMPACT
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|COMPRESSION_COMPACT
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENCODE_ON_DISK
init|=
literal|"ENCODE_ON_DISK"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATA_BLOCK_ENCODING
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DATA_BLOCK_ENCODING
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BLOCKCACHE
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|BLOCKCACHE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_DATA_ON_WRITE
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|CACHE_DATA_ON_WRITE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_INDEX_ON_WRITE
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|CACHE_INDEX_ON_WRITE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_BLOOMS_ON_WRITE
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|CACHE_BLOOMS_ON_WRITE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EVICT_BLOCKS_ON_CLOSE
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|EVICT_BLOCKS_ON_CLOSE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_DATA_IN_L1
init|=
literal|"CACHE_DATA_IN_L1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PREFETCH_BLOCKS_ON_OPEN
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|PREFETCH_BLOCKS_ON_OPEN
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BLOCKSIZE
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|BLOCKSIZE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LENGTH
init|=
literal|"LENGTH"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TTL
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|TTL
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BLOOMFILTER
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|BLOOMFILTER
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FOREVER
init|=
literal|"FOREVER"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REPLICATION_SCOPE
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|REPLICATION_SCOPE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|REPLICATION_SCOPE_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|REPLICATION_SCOPE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MIN_VERSIONS
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|MIN_VERSIONS
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEEP_DELETED_CELLS
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|KEEP_DELETED_CELLS
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMPRESS_TAGS
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|COMPRESS_TAGS
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENCRYPTION
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|ENCRYPTION
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENCRYPTION_KEY
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|ENCRYPTION_KEY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IS_MOB
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|IS_MOB
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|IS_MOB_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|IS_MOB
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MOB_THRESHOLD
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|MOB_THRESHOLD
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|MOB_THRESHOLD_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|MOB_THRESHOLD
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_MOB_THRESHOLD
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_MOB_THRESHOLD
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MOB_COMPACT_PARTITION_POLICY
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|MOB_COMPACT_PARTITION_POLICY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|MOB_COMPACT_PARTITION_POLICY_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|MOB_COMPACT_PARTITION_POLICY
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MobCompactPartitionPolicy
name|DEFAULT_MOB_COMPACT_PARTITION_POLICY
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_MOB_COMPACT_PARTITION_POLICY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DFS_REPLICATION
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DFS_REPLICATION
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|DEFAULT_DFS_REPLICATION
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_DFS_REPLICATION
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STORAGE_POLICY
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|STORAGE_POLICY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_COMPRESSION
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_COMPRESSION
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_ENCODE_ON_DISK
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DATA_BLOCK_ENCODING
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_DATA_BLOCK_ENCODING
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_VERSIONS
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_MAX_VERSIONS
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_VERSIONS
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_MIN_VERSIONS
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_IN_MEMORY
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_IN_MEMORY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|KeepDeletedCells
name|DEFAULT_KEEP_DELETED
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_KEEP_DELETED
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_BLOCKCACHE
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_BLOCKCACHE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_CACHE_DATA_ON_WRITE
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_CACHE_DATA_ON_WRITE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_CACHE_DATA_IN_L1
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_CACHE_INDEX_ON_WRITE
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_CACHE_INDEX_ON_WRITE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BLOCKSIZE
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_BLOCKSIZE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_BLOOMFILTER
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_BLOOMFILTER
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_CACHE_BLOOMS_ON_WRITE
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_CACHE_BLOOMS_ON_WRITE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TTL
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_TTL
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_REPLICATION_SCOPE
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_REPLICATION_SCOPE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_EVICT_BLOCKS_ON_CLOSE
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_EVICT_BLOCKS_ON_CLOSE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_COMPRESS_TAGS
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_COMPRESS_TAGS
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_PREFETCH_BLOCKS_ON_OPEN
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_PREFETCH_BLOCKS_ON_OPEN
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NEW_VERSION_BEHAVIOR
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|NEW_VERSION_BEHAVIOR
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NEW_VERSION_BEHAVIOR
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|DEFAULT_NEW_VERSION_BEHAVIOR
decl_stmt|;
specifier|protected
specifier|final
name|ModifyableColumnFamilyDescriptor
name|delegatee
decl_stmt|;
comment|/**    * Construct a column descriptor specifying only the family name    * The other attributes are defaulted.    *    * @param familyName Column family name. Must be 'printable' -- digit or    * letter -- and may not contain a<code>:</code>    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0    *             (<a href="https://issues.apache.org/jira/browse/HBASE-18433">HBASE-18433</a>).    *             Use {@link ColumnFamilyDescriptorBuilder#of(String)}.    */
annotation|@
name|Deprecated
specifier|public
name|HColumnDescriptor
parameter_list|(
specifier|final
name|String
name|familyName
parameter_list|)
block|{
name|this
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|familyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a column descriptor specifying only the family name    * The other attributes are defaulted.    *    * @param familyName Column family name. Must be 'printable' -- digit or    * letter -- and may not contain a<code>:</code>    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0    *             (<a href="https://issues.apache.org/jira/browse/HBASE-18433">HBASE-18433</a>).    *             Use {@link ColumnFamilyDescriptorBuilder#of(byte[])}.    */
annotation|@
name|Deprecated
specifier|public
name|HColumnDescriptor
parameter_list|(
specifier|final
name|byte
index|[]
name|familyName
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ModifyableColumnFamilyDescriptor
argument_list|(
name|familyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor.    * Makes a deep copy of the supplied descriptor.    * Can make a modifiable descriptor from an UnmodifyableHColumnDescriptor.    *    * @param desc The descriptor.    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0    *             (<a href="https://issues.apache.org/jira/browse/HBASE-18433">HBASE-18433</a>).    *             Use {@link ColumnFamilyDescriptorBuilder#copy(ColumnFamilyDescriptor)}.    */
annotation|@
name|Deprecated
specifier|public
name|HColumnDescriptor
parameter_list|(
name|HColumnDescriptor
name|desc
parameter_list|)
block|{
name|this
argument_list|(
name|desc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|HColumnDescriptor
parameter_list|(
name|HColumnDescriptor
name|desc
parameter_list|,
name|boolean
name|deepClone
parameter_list|)
block|{
name|this
argument_list|(
name|deepClone
condition|?
operator|new
name|ModifyableColumnFamilyDescriptor
argument_list|(
name|desc
argument_list|)
else|:
name|desc
operator|.
name|delegatee
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|HColumnDescriptor
parameter_list|(
name|ModifyableColumnFamilyDescriptor
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegatee
operator|=
name|delegate
expr_stmt|;
block|}
comment|/**    * @param b Family name.    * @return<code>b</code>    * @throws IllegalArgumentException If not null and not a legitimate family    * name: i.e. 'printable' and ends in a ':' (Null passes are allowed because    *<code>b</code> can be null when deserializing).  Cannot start with a '.'    * either. Also Family can not be an empty value or equal "recovered.edits".    * @deprecated since 2.0.0 and will be removed in 3.0.0. Use    *   {@link ColumnFamilyDescriptorBuilder#isLegalColumnFamilyName(byte[])} instead.    * @see ColumnFamilyDescriptorBuilder#isLegalColumnFamilyName(byte[])    * @see<a href="https://issues.apache.org/jira/browse/HBASE-18008">HBASE-18008</a>    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|byte
index|[]
name|isLegalFamilyName
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
name|ColumnFamilyDescriptorBuilder
operator|.
name|isLegalColumnFamilyName
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|/**    * @return Name of this column family    */
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getName
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**    * @return The name string of this column family    */
annotation|@
name|Override
specifier|public
name|String
name|getNameAsString
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getNameAsString
argument_list|()
return|;
block|}
comment|/**    * @param key The key.    * @return The value.    */
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getValue
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * @param key The key.    * @return The value as a string.    */
specifier|public
name|String
name|getValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|byte
index|[]
name|value
init|=
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Bytes
argument_list|,
name|Bytes
argument_list|>
name|getValues
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getValues
argument_list|()
return|;
block|}
comment|/**    * @param key The key.    * @param value The value.    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setValue
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * @param key Key whose key and value we're to remove from HCD parameters.    */
specifier|public
name|void
name|remove
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|removeValue
argument_list|(
operator|new
name|Bytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param key The key.    * @param value The value.    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setValue
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * @return compression type being used for the column family    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0    *             (<a href="https://issues.apache.org/jira/browse/HBASE-13655">HBASE-13655</a>).    *             Use {@link #getCompressionType()}.    */
annotation|@
name|Deprecated
specifier|public
name|Compression
operator|.
name|Algorithm
name|getCompression
parameter_list|()
block|{
return|return
name|getCompressionType
argument_list|()
return|;
block|}
comment|/**    *  @return compression type being used for the column family for major compaction    *  @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0    *             (<a href="https://issues.apache.org/jira/browse/HBASE-13655">HBASE-13655</a>).    *             Use {@link #getCompactionCompressionType()}.    */
annotation|@
name|Deprecated
specifier|public
name|Compression
operator|.
name|Algorithm
name|getCompactionCompression
parameter_list|()
block|{
return|return
name|getCompactionCompressionType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxVersions
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getMaxVersions
argument_list|()
return|;
block|}
comment|/**    * @param value maximum number of versions    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setMaxVersions
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setMaxVersions
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Set minimum and maximum versions to keep    *    * @param minVersions minimal number of versions    * @param maxVersions maximum number of versions    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setVersions
parameter_list|(
name|int
name|minVersions
parameter_list|,
name|int
name|maxVersions
parameter_list|)
block|{
if|if
condition|(
name|minVersions
operator|<=
literal|0
condition|)
block|{
comment|// TODO: Allow minVersion and maxVersion of 0 to be the way you say "Keep all versions".
comment|// Until there is support, consider 0 or< 0 -- a configuration error.
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Minimum versions must be positive"
argument_list|)
throw|;
block|}
if|if
condition|(
name|maxVersions
operator|<
name|minVersions
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to set MaxVersion to "
operator|+
name|maxVersions
operator|+
literal|" and set MinVersion to "
operator|+
name|minVersions
operator|+
literal|", as maximum versions must be>= minimum versions."
argument_list|)
throw|;
block|}
name|setMinVersions
argument_list|(
name|minVersions
argument_list|)
expr_stmt|;
name|setMaxVersions
argument_list|(
name|maxVersions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getBlocksize
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getBlocksize
argument_list|()
return|;
block|}
comment|/**    * @param value Blocksize to use when writing out storefiles/hfiles on this    * column family.    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setBlocksize
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setBlocksize
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Compression
operator|.
name|Algorithm
name|getCompressionType
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getCompressionType
argument_list|()
return|;
block|}
comment|/**    * Compression types supported in hbase.    * LZO is not bundled as part of the hbase distribution.    * See<a href="http://wiki.apache.org/hadoop/UsingLzoCompression">LZO Compression</a>    * for how to enable it.    * @param value Compression type setting.    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setCompressionType
parameter_list|(
name|Compression
operator|.
name|Algorithm
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setCompressionType
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataBlockEncoding
name|getDataBlockEncoding
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getDataBlockEncoding
argument_list|()
return|;
block|}
comment|/**    * Set data block encoding algorithm used in block cache.    * @param value What kind of data block encoding will be used.    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setDataBlockEncoding
parameter_list|(
name|DataBlockEncoding
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setDataBlockEncoding
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Set whether the tags should be compressed along with DataBlockEncoding. When no    * DataBlockEncoding is been used, this is having no effect.    *    * @param value    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setCompressTags
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setCompressTags
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCompressTags
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|isCompressTags
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Compression
operator|.
name|Algorithm
name|getCompactionCompressionType
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getCompactionCompressionType
argument_list|()
return|;
block|}
comment|/**    * Compression types supported in hbase.    * LZO is not bundled as part of the hbase distribution.    * See<a href="http://wiki.apache.org/hadoop/UsingLzoCompression">LZO Compression</a>    * for how to enable it.    * @param value Compression type setting.    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setCompactionCompressionType
parameter_list|(
name|Compression
operator|.
name|Algorithm
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setCompactionCompressionType
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInMemory
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|isInMemory
argument_list|()
return|;
block|}
comment|/**    * @param value True if we are to favor keeping all values for this column family in the    * HRegionServer cache    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setInMemory
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setInMemory
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MemoryCompactionPolicy
name|getInMemoryCompaction
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getInMemoryCompaction
argument_list|()
return|;
block|}
comment|/**    * @param value the prefered in-memory compaction policy    *                  for this column family    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setInMemoryCompaction
parameter_list|(
name|MemoryCompactionPolicy
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setInMemoryCompaction
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|KeepDeletedCells
name|getKeepDeletedCells
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getKeepDeletedCells
argument_list|()
return|;
block|}
comment|/**    * @param value True if deleted rows should not be collected    * immediately.    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setKeepDeletedCells
parameter_list|(
name|KeepDeletedCells
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setKeepDeletedCells
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * By default, HBase only consider timestamp in versions. So a previous Delete with higher ts    * will mask a later Put with lower ts. Set this to true to enable new semantics of versions.    * We will also consider mvcc in versions. See HBASE-15968 for details.    */
annotation|@
name|Override
specifier|public
name|boolean
name|isNewVersionBehavior
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|isNewVersionBehavior
argument_list|()
return|;
block|}
specifier|public
name|HColumnDescriptor
name|setNewVersionBehavior
parameter_list|(
name|boolean
name|newVersionBehavior
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setNewVersionBehavior
argument_list|(
name|newVersionBehavior
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTimeToLive
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getTimeToLive
argument_list|()
return|;
block|}
comment|/**    * @param value Time-to-live of cell contents, in seconds.    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setTimeToLive
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setTimeToLive
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * @param value Time to live of cell contents, in human readable format    *                   @see org.apache.hadoop.hbase.util.PrettyPrinter#format(String, Unit)    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setTimeToLive
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|HBaseException
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setTimeToLive
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMinVersions
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getMinVersions
argument_list|()
return|;
block|}
comment|/**    * @param value The minimum number of versions to keep.    * (used when timeToLive is set)    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setMinVersions
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setMinVersions
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isBlockCacheEnabled
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|isBlockCacheEnabled
argument_list|()
return|;
block|}
comment|/**    * @param value True if hfile DATA type blocks should be cached (We always cache    * INDEX and BLOOM blocks; you cannot turn this off).    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setBlockCacheEnabled
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setBlockCacheEnabled
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|BloomType
name|getBloomFilterType
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getBloomFilterType
argument_list|()
return|;
block|}
comment|/**    * @param value bloom filter type    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setBloomFilterType
parameter_list|(
specifier|final
name|BloomType
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setBloomFilterType
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getScope
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getScope
argument_list|()
return|;
block|}
comment|/**   * @param value the scope tag   * @return this (for chained invocation)   */
specifier|public
name|HColumnDescriptor
name|setScope
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setScope
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheDataOnWrite
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|isCacheDataOnWrite
argument_list|()
return|;
block|}
comment|/**    * @param value true if we should cache data blocks on write    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setCacheDataOnWrite
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setCacheDataOnWrite
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * This is a noop call from HBase 2.0 onwards    *    * @return this (for chained invocation)    * @deprecated Since 2.0 and will be removed in 3.0 with out any replacement. Caching data in on    *             heap Cache, when there are both on heap LRU Cache and Bucket Cache will no longer    *             be supported from 2.0.    */
annotation|@
name|Deprecated
specifier|public
name|HColumnDescriptor
name|setCacheDataInL1
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheIndexesOnWrite
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|isCacheIndexesOnWrite
argument_list|()
return|;
block|}
comment|/**    * @param value true if we should cache index blocks on write    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setCacheIndexesOnWrite
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setCacheIndexesOnWrite
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheBloomsOnWrite
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|isCacheBloomsOnWrite
argument_list|()
return|;
block|}
comment|/**    * @param value true if we should cache bloomfilter blocks on write    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setCacheBloomsOnWrite
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setCacheBloomsOnWrite
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEvictBlocksOnClose
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|isEvictBlocksOnClose
argument_list|()
return|;
block|}
comment|/**    * @param value true if we should evict cached blocks from the blockcache on    * close    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setEvictBlocksOnClose
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setEvictBlocksOnClose
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPrefetchBlocksOnOpen
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|isPrefetchBlocksOnOpen
argument_list|()
return|;
block|}
comment|/**    * @param value true if we should prefetch blocks into the blockcache on open    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setPrefetchBlocksOnOpen
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setPrefetchBlocksOnOpen
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * @see java.lang.Object#toString()    */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @return Column family descriptor with only the customized attributes.    */
annotation|@
name|Override
specifier|public
name|String
name|toStringCustomizedValues
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|toStringCustomizedValues
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Unit
name|getUnit
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|ColumnFamilyDescriptorBuilder
operator|.
name|getUnit
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getDefaultValues
parameter_list|()
block|{
return|return
name|ColumnFamilyDescriptorBuilder
operator|.
name|getDefaultValues
argument_list|()
return|;
block|}
comment|/**    * @see java.lang.Object#equals(java.lang.Object)    */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|HColumnDescriptor
condition|)
block|{
return|return
name|delegatee
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|HColumnDescriptor
operator|)
name|obj
operator|)
operator|.
name|delegatee
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * @see java.lang.Object#hashCode()    */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|HColumnDescriptor
name|other
parameter_list|)
block|{
return|return
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|this
argument_list|,
name|other
argument_list|)
return|;
block|}
comment|/**    * @return This instance serialized with pb with pb magic prefix    * @see #parseFrom(byte[])    */
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
return|return
name|ColumnFamilyDescriptorBuilder
operator|.
name|toByteArray
argument_list|(
name|delegatee
argument_list|)
return|;
block|}
comment|/**    * @param bytes A pb serialized {@link HColumnDescriptor} instance with pb magic prefix    * @return An instance of {@link HColumnDescriptor} made from<code>bytes</code>    * @throws DeserializationException    * @see #toByteArray()    */
specifier|public
specifier|static
name|HColumnDescriptor
name|parseFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
name|ColumnFamilyDescriptor
name|desc
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|instanceof
name|ModifyableColumnFamilyDescriptor
condition|)
block|{
return|return
operator|new
name|HColumnDescriptor
argument_list|(
operator|(
name|ModifyableColumnFamilyDescriptor
operator|)
name|desc
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|HColumnDescriptor
argument_list|(
operator|new
name|ModifyableColumnFamilyDescriptor
argument_list|(
name|desc
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getConfigurationValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|getConfigurationValue
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getConfiguration
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
comment|/**    * Setter for storing a configuration setting.    * @param key Config key. Same as XML config key e.g. hbase.something.or.other.    * @param value String value. If null, removes the configuration.    */
specifier|public
name|HColumnDescriptor
name|setConfiguration
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setConfiguration
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Remove a configuration setting represented by the key.    */
specifier|public
name|void
name|removeConfiguration
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|removeConfiguration
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getEncryptionType
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getEncryptionType
argument_list|()
return|;
block|}
comment|/**    * Set the encryption algorithm for use with this family    * @param value    */
specifier|public
name|HColumnDescriptor
name|setEncryptionType
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setEncryptionType
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getEncryptionKey
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getEncryptionKey
argument_list|()
return|;
block|}
comment|/** Set the raw crypto key attribute for the family */
specifier|public
name|HColumnDescriptor
name|setEncryptionKey
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setEncryptionKey
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMobThreshold
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getMobThreshold
argument_list|()
return|;
block|}
comment|/**    * Sets the mob threshold of the family.    * @param value The mob threshold.    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setMobThreshold
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setMobThreshold
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMobEnabled
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|isMobEnabled
argument_list|()
return|;
block|}
comment|/**    * Enables the mob for the family.    * @param value Whether to enable the mob for the family.    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setMobEnabled
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setMobEnabled
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MobCompactPartitionPolicy
name|getMobCompactPartitionPolicy
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getMobCompactPartitionPolicy
argument_list|()
return|;
block|}
comment|/**    * Set the mob compact partition policy for the family.    * @param value policy type    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setMobCompactPartitionPolicy
parameter_list|(
name|MobCompactPartitionPolicy
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setMobCompactPartitionPolicy
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getDFSReplication
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getDFSReplication
argument_list|()
return|;
block|}
comment|/**    * Set the replication factor to hfile(s) belonging to this family    * @param value number of replicas the blocks(s) belonging to this CF should have, or    *          {@link #DEFAULT_DFS_REPLICATION} for the default replication factor set in the    *          filesystem    * @return this (for chained invocation)    */
specifier|public
name|HColumnDescriptor
name|setDFSReplication
parameter_list|(
name|short
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setDFSReplication
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStoragePolicy
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getStoragePolicy
argument_list|()
return|;
block|}
comment|/**    * Set the storage policy for use with this family    * @param value the policy to set, valid setting includes:<i>"LAZY_PERSIST"</i>,    *<i>"ALL_SSD"</i>,<i>"ONE_SSD"</i>,<i>"HOT"</i>,<i>"WARM"</i>,<i>"COLD"</i>    */
specifier|public
name|HColumnDescriptor
name|setStoragePolicy
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setStoragePolicy
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Bytes
name|getValue
parameter_list|(
name|Bytes
name|key
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|protected
name|ModifyableColumnFamilyDescriptor
name|getDelegateeForModification
parameter_list|()
block|{
return|return
name|delegatee
return|;
block|}
block|}
end_class

end_unit

