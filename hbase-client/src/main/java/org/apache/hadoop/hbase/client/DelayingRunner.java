begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A wrapper for a runnable for a group of actions for a single regionserver.  *<p>  * This can be used to build up the actions that should be taken and then  *</p>  *<p>  * This class exists to simulate using a ScheduledExecutorService with just a regular  * ExecutorService and Runnables. It is used for legacy reasons in the the client; this could  * only be removed if we change the expectations in HTable around the pool the client is able to  * pass in and even if we deprecate the current APIs would require keeping this class around  * for the interim to bridge between the legacy ExecutorServices and the scheduled pool.  *</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|DelayingRunner
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DelayingRunner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Object
name|sleepLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|triggerWake
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|sleepTime
decl_stmt|;
specifier|private
name|MultiAction
argument_list|<
name|T
argument_list|>
name|actions
init|=
operator|new
name|MultiAction
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Runnable
name|runnable
decl_stmt|;
specifier|public
name|DelayingRunner
parameter_list|(
name|long
name|sleepTime
parameter_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Action
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|>
name|e
parameter_list|)
block|{
name|this
operator|.
name|sleepTime
operator|=
name|sleepTime
expr_stmt|;
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setRunner
parameter_list|(
name|Runnable
name|runner
parameter_list|)
block|{
name|this
operator|.
name|runnable
operator|=
name|runner
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|sleep
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while sleeping for expected sleep time "
operator|+
name|sleepTime
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
block|}
comment|//TODO maybe we should consider switching to a listenableFuture for the actual callable and
comment|// then handling the results/errors as callbacks. That way we can decrement outstanding tasks
comment|// even if we get interrupted here, but for now, we still need to run so we decrement the
comment|// outstanding tasks
name|this
operator|.
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
comment|/**    * Sleep for an expected amount of time.    *<p>    * This is nearly a copy of what the Sleeper does, but with the ability to know if you    * got interrupted while sleeping.    *</p>    *    * @return<tt>true</tt> if the sleep completely entirely successfully,    * but otherwise<tt>false</tt> if the sleep was interrupted.    */
specifier|private
name|boolean
name|sleep
parameter_list|()
block|{
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|now
decl_stmt|;
name|long
name|waitTime
init|=
name|sleepTime
decl_stmt|;
while|while
condition|(
name|waitTime
operator|>
literal|0
condition|)
block|{
name|long
name|woke
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|sleepLock
init|)
block|{
if|if
condition|(
name|triggerWake
condition|)
break|break;
name|sleepLock
operator|.
name|wait
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
block|}
name|woke
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|iex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|// Recalculate waitTime.
name|woke
operator|=
operator|(
name|woke
operator|==
operator|-
literal|1
operator|)
condition|?
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
else|:
name|woke
expr_stmt|;
name|waitTime
operator|=
name|waitTime
operator|-
operator|(
name|woke
operator|-
name|startTime
operator|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Action
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|>
name|e
parameter_list|)
block|{
name|actions
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MultiAction
argument_list|<
name|T
argument_list|>
name|getActions
parameter_list|()
block|{
return|return
name|actions
return|;
block|}
specifier|public
name|long
name|getSleepTime
parameter_list|()
block|{
return|return
name|sleepTime
return|;
block|}
block|}
end_class

end_unit

