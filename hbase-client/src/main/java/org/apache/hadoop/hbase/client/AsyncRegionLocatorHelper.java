begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|ClientExceptionsUtil
operator|.
name|findException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|ClientExceptionsUtil
operator|.
name|isMetaClearingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ObjectUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|RegionMovedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Helper class for asynchronous region locator.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|final
class|class
name|AsyncRegionLocatorHelper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AsyncRegionLocatorHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AsyncRegionLocatorHelper
parameter_list|()
block|{   }
specifier|static
name|boolean
name|canUpdateOnError
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|,
name|HRegionLocation
name|oldLoc
parameter_list|)
block|{
comment|// Do not need to update if no such location, or the location is newer, or the location is not
comment|// the same with us
return|return
name|oldLoc
operator|!=
literal|null
operator|&&
name|oldLoc
operator|.
name|getSeqNum
argument_list|()
operator|<=
name|loc
operator|.
name|getSeqNum
argument_list|()
operator|&&
name|oldLoc
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|void
name|updateCachedLocationOnError
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|,
name|Throwable
name|exception
parameter_list|,
name|Function
argument_list|<
name|HRegionLocation
argument_list|,
name|HRegionLocation
argument_list|>
name|cachedLocationSupplier
parameter_list|,
name|Consumer
argument_list|<
name|HRegionLocation
argument_list|>
name|addToCache
parameter_list|,
name|Consumer
argument_list|<
name|HRegionLocation
argument_list|>
name|removeFromCache
parameter_list|,
name|Optional
argument_list|<
name|MetricsConnection
argument_list|>
name|metrics
parameter_list|)
block|{
name|HRegionLocation
name|oldLoc
init|=
name|cachedLocationSupplier
operator|.
name|apply
argument_list|(
name|loc
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Try updating {} , the old value is {}, error={}"
argument_list|,
name|loc
argument_list|,
name|oldLoc
argument_list|,
name|exception
operator|!=
literal|null
condition|?
name|exception
operator|.
name|toString
argument_list|()
else|:
literal|"none"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|canUpdateOnError
argument_list|(
name|loc
argument_list|,
name|oldLoc
argument_list|)
condition|)
block|{
return|return;
block|}
name|Throwable
name|cause
init|=
name|findException
argument_list|(
name|exception
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The actual exception when updating {} is {}"
argument_list|,
name|loc
argument_list|,
name|cause
operator|!=
literal|null
condition|?
name|cause
operator|.
name|toString
argument_list|()
else|:
literal|"none"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cause
operator|==
literal|null
operator|||
operator|!
name|isMetaClearingException
argument_list|(
name|cause
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Will not update {} because the exception is null or not the one we care about"
argument_list|,
name|loc
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|RegionMovedException
condition|)
block|{
name|RegionMovedException
name|rme
init|=
operator|(
name|RegionMovedException
operator|)
name|cause
decl_stmt|;
name|HRegionLocation
name|newLoc
init|=
operator|new
name|HRegionLocation
argument_list|(
name|loc
operator|.
name|getRegion
argument_list|()
argument_list|,
name|rme
operator|.
name|getServerName
argument_list|()
argument_list|,
name|rme
operator|.
name|getLocationSeqNum
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Try updating {} with the new location {} constructed by {}"
argument_list|,
name|loc
argument_list|,
name|newLoc
argument_list|,
name|rme
argument_list|)
expr_stmt|;
name|addToCache
operator|.
name|accept
argument_list|(
name|newLoc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Try removing {} from cache"
argument_list|,
name|loc
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|ifPresent
argument_list|(
name|m
lambda|->
name|m
operator|.
name|incrCacheDroppingExceptions
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
name|removeFromCache
operator|.
name|accept
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|RegionLocations
name|createRegionLocations
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|)
block|{
name|int
name|replicaId
init|=
name|loc
operator|.
name|getRegion
argument_list|()
operator|.
name|getReplicaId
argument_list|()
decl_stmt|;
name|HRegionLocation
index|[]
name|locs
init|=
operator|new
name|HRegionLocation
index|[
name|replicaId
operator|+
literal|1
index|]
decl_stmt|;
name|locs
index|[
name|replicaId
index|]
operator|=
name|loc
expr_stmt|;
return|return
operator|new
name|RegionLocations
argument_list|(
name|locs
argument_list|)
return|;
block|}
comment|/**    * Create a new {@link RegionLocations} based on the given {@code oldLocs}, and replace the    * location for the given {@code replicaId} with the given {@code loc}.    *<p/>    * All the {@link RegionLocations} in async locator related class are immutable because we want to    * access them concurrently, so here we need to create a new one, instead of calling    * {@link RegionLocations#updateLocation(HRegionLocation, boolean, boolean)}.    */
specifier|static
name|RegionLocations
name|replaceRegionLocation
parameter_list|(
name|RegionLocations
name|oldLocs
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|)
block|{
name|int
name|replicaId
init|=
name|loc
operator|.
name|getRegion
argument_list|()
operator|.
name|getReplicaId
argument_list|()
decl_stmt|;
name|HRegionLocation
index|[]
name|locs
init|=
name|oldLocs
operator|.
name|getRegionLocations
argument_list|()
decl_stmt|;
name|locs
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|locs
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|replicaId
operator|+
literal|1
argument_list|,
name|locs
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|locs
index|[
name|replicaId
index|]
operator|=
name|loc
expr_stmt|;
return|return
operator|new
name|RegionLocations
argument_list|(
name|locs
argument_list|)
return|;
block|}
comment|/**    * Create a new {@link RegionLocations} based on the given {@code oldLocs}, and remove the    * location for the given {@code replicaId}.    *<p/>    * All the {@link RegionLocations} in async locator related class are immutable because we want to    * access them concurrently, so here we need to create a new one, instead of calling    * {@link RegionLocations#remove(int)}.    */
specifier|static
name|RegionLocations
name|removeRegionLocation
parameter_list|(
name|RegionLocations
name|oldLocs
parameter_list|,
name|int
name|replicaId
parameter_list|)
block|{
name|HRegionLocation
index|[]
name|locs
init|=
name|oldLocs
operator|.
name|getRegionLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|locs
operator|.
name|length
operator|<
name|replicaId
operator|+
literal|1
condition|)
block|{
comment|// Here we do not modify the oldLocs so it is safe to return it.
return|return
name|oldLocs
return|;
block|}
name|locs
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|locs
argument_list|,
name|locs
operator|.
name|length
argument_list|)
expr_stmt|;
name|locs
index|[
name|replicaId
index|]
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|ObjectUtils
operator|.
name|firstNonNull
argument_list|(
name|locs
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|RegionLocations
argument_list|(
name|locs
argument_list|)
return|;
block|}
else|else
block|{
comment|// if all the locations are null, just return null
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|boolean
name|isGood
parameter_list|(
name|RegionLocations
name|locs
parameter_list|,
name|int
name|replicaId
parameter_list|)
block|{
if|if
condition|(
name|locs
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|HRegionLocation
name|loc
init|=
name|locs
operator|.
name|getRegionLocation
argument_list|(
name|replicaId
argument_list|)
decl_stmt|;
return|return
name|loc
operator|!=
literal|null
operator|&&
name|loc
operator|.
name|getServerName
argument_list|()
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

