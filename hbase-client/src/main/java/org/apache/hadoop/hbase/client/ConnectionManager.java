begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionTooBusyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|RegionMovedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|RegionOpeningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ExceptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_comment
comment|/**  * An internal, non-instantiable class that manages creation of {@link HConnection}s.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
comment|// NOTE: DO NOT make this class public. It was made package-private on purpose.
specifier|final
class|class
name|ConnectionManager
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ConnectionManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RETRIES_BY_SERVER_KEY
init|=
literal|"hbase.client.retries.by.server"
decl_stmt|;
comment|// An LRU Map of HConnectionKey -> HConnection (TableServer).  All
comment|// access must be synchronized.  This map is not private because tests
comment|// need to be able to tinker with it.
specifier|static
specifier|final
name|Map
argument_list|<
name|HConnectionKey
argument_list|,
name|ConnectionImplementation
argument_list|>
name|CONNECTION_INSTANCES
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MAX_CACHED_CONNECTION_INSTANCES
decl_stmt|;
static|static
block|{
comment|// We set instances to one more than the value specified for {@link
comment|// HConstants#ZOOKEEPER_MAX_CLIENT_CNXNS}. By default, the zk default max
comment|// connections to the ensemble from the one client is 30, so in that case we
comment|// should run into zk issues before the LRU hit this value of 31.
name|MAX_CACHED_CONNECTION_INSTANCES
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_MAX_CLIENT_CNXNS
argument_list|,
name|HConstants
operator|.
name|DEFAULT_ZOOKEPER_MAX_CLIENT_CNXNS
argument_list|)
operator|+
literal|1
expr_stmt|;
name|CONNECTION_INSTANCES
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|HConnectionKey
argument_list|,
name|ConnectionImplementation
argument_list|>
argument_list|(
call|(
name|int
call|)
argument_list|(
name|MAX_CACHED_CONNECTION_INSTANCES
operator|/
literal|0.75F
argument_list|)
operator|+
literal|1
argument_list|,
literal|0.75F
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|HConnectionKey
argument_list|,
name|ConnectionImplementation
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>
name|MAX_CACHED_CONNECTION_INSTANCES
return|;
block|}
block|}
expr_stmt|;
block|}
comment|/** Dummy nonce generator for disabled nonces. */
specifier|static
class|class
name|NoNonceGenerator
implements|implements
name|NonceGenerator
block|{
annotation|@
name|Override
specifier|public
name|long
name|getNonceGroup
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|NO_NONCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|newNonce
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|NO_NONCE
return|;
block|}
block|}
comment|/*    * Non-instantiable.    */
specifier|private
name|ConnectionManager
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the connection that goes with the passed<code>conf</code> configuration instance.    * If no current connection exists, method creates a new connection and keys it using    * connection-specific properties from the passed {@link Configuration}; see    * {@link HConnectionKey}.    * @param conf configuration    * @return HConnection object for<code>conf</code>    * @throws ZooKeeperConnectionException    * @deprecated connection caching is going away.    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|HConnection
name|getConnection
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getConnectionInternal
argument_list|(
name|conf
argument_list|)
return|;
block|}
specifier|static
name|ClusterConnection
name|getConnectionInternal
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|HConnectionKey
name|connectionKey
init|=
operator|new
name|HConnectionKey
argument_list|(
name|conf
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|CONNECTION_INSTANCES
init|)
block|{
name|ConnectionImplementation
name|connection
init|=
name|CONNECTION_INSTANCES
operator|.
name|get
argument_list|(
name|connectionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
name|connection
operator|=
operator|(
name|ConnectionImplementation
operator|)
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CONNECTION_INSTANCES
operator|.
name|put
argument_list|(
name|connectionKey
argument_list|,
name|connection
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|connection
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|ConnectionManager
operator|.
name|deleteConnection
argument_list|(
name|connectionKey
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|=
operator|(
name|ConnectionImplementation
operator|)
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CONNECTION_INSTANCES
operator|.
name|put
argument_list|(
name|connectionKey
argument_list|,
name|connection
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|incCount
argument_list|()
expr_stmt|;
return|return
name|connection
return|;
block|}
block|}
comment|/**    * Create a new HConnection instance using the passed<code>conf</code> instance.    *<p>Note: This bypasses the usual HConnection life cycle management done by    * {@link #getConnection(Configuration)}. The caller is responsible for    * calling {@link HConnection#close()} on the returned connection instance.    *    * This is the recommended way to create HConnections.    * {@code    * HConnection connection = ConnectionManagerInternal.createConnection(conf);    * HTableInterface table = connection.getTable("mytable");    * table.get(...);    * ...    * table.close();    * connection.close();    * }    *    * @param conf configuration    * @return HConnection object for<code>conf</code>    * @throws ZooKeeperConnectionException    */
specifier|public
specifier|static
name|HConnection
name|createConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createConnectionInternal
argument_list|(
name|conf
argument_list|)
return|;
block|}
specifier|static
name|ClusterConnection
name|createConnectionInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|UserProvider
name|provider
init|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|createConnection
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|provider
operator|.
name|getCurrent
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create a new HConnection instance using the passed<code>conf</code> instance.    *<p>Note: This bypasses the usual HConnection life cycle management done by    * {@link #getConnection(Configuration)}. The caller is responsible for    * calling {@link HConnection#close()} on the returned connection instance.    * This is the recommended way to create HConnections.    * {@code    * ExecutorService pool = ...;    * HConnection connection = ConnectionManager.createConnection(conf, pool);    * HTableInterface table = connection.getTable("mytable");    * table.get(...);    * ...    * table.close();    * connection.close();    * }    * @param conf configuration    * @param pool the thread pool to use for batch operation in HTables used via this HConnection    * @return HConnection object for<code>conf</code>    * @throws ZooKeeperConnectionException    */
specifier|public
specifier|static
name|HConnection
name|createConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
throws|throws
name|IOException
block|{
name|UserProvider
name|provider
init|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|createConnection
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|,
name|pool
argument_list|,
name|provider
operator|.
name|getCurrent
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create a new HConnection instance using the passed<code>conf</code> instance.    *<p>Note: This bypasses the usual HConnection life cycle management done by    * {@link #getConnection(Configuration)}. The caller is responsible for    * calling {@link HConnection#close()} on the returned connection instance.    * This is the recommended way to create HConnections.    * {@code    * ExecutorService pool = ...;    * HConnection connection = ConnectionManager.createConnection(conf, pool);    * HTableInterface table = connection.getTable("mytable");    * table.get(...);    * ...    * table.close();    * connection.close();    * }    * @param conf configuration    * @param user the user the connection is for    * @return HConnection object for<code>conf</code>    * @throws ZooKeeperConnectionException    */
specifier|public
specifier|static
name|HConnection
name|createConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createConnection
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|user
argument_list|)
return|;
block|}
comment|/**    * Create a new HConnection instance using the passed<code>conf</code> instance.    *<p>Note: This bypasses the usual HConnection life cycle management done by    * {@link #getConnection(Configuration)}. The caller is responsible for    * calling {@link HConnection#close()} on the returned connection instance.    * This is the recommended way to create HConnections.    * {@code    * ExecutorService pool = ...;    * HConnection connection = ConnectionManager.createConnection(conf, pool);    * HTableInterface table = connection.getTable("mytable");    * table.get(...);    * ...    * table.close();    * connection.close();    * }    * @param conf configuration    * @param pool the thread pool to use for batch operation in HTables used via this HConnection    * @param user the user the connection is for    * @return HConnection object for<code>conf</code>    * @throws ZooKeeperConnectionException    */
specifier|public
specifier|static
name|HConnection
name|createConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createConnection
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|,
name|pool
argument_list|,
name|user
argument_list|)
return|;
block|}
comment|/**    * @deprecated instead use one of the {@link ConnectionFactory#createConnection()} methods.    */
annotation|@
name|Deprecated
specifier|static
name|HConnection
name|createConnection
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|boolean
name|managed
parameter_list|)
throws|throws
name|IOException
block|{
name|UserProvider
name|provider
init|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|createConnection
argument_list|(
name|conf
argument_list|,
name|managed
argument_list|,
literal|null
argument_list|,
name|provider
operator|.
name|getCurrent
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @deprecated instead use one of the {@link ConnectionFactory#createConnection()} methods.    */
annotation|@
name|Deprecated
specifier|static
name|ClusterConnection
name|createConnection
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|boolean
name|managed
parameter_list|,
specifier|final
name|ExecutorService
name|pool
parameter_list|,
specifier|final
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|ClusterConnection
operator|)
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|,
name|managed
argument_list|,
name|pool
argument_list|,
name|user
argument_list|)
return|;
block|}
comment|/**    * Cleanup a known stale connection.    * This will then close connection to the zookeeper ensemble and let go of all resources.    *    * @param connection    * @deprecated connection caching is going away.    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|void
name|deleteStaleConnection
parameter_list|(
name|HConnection
name|connection
parameter_list|)
block|{
name|deleteConnection
argument_list|(
name|connection
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * @deprecated connection caching is going away.    */
annotation|@
name|Deprecated
specifier|static
name|void
name|deleteConnection
parameter_list|(
name|HConnection
name|connection
parameter_list|,
name|boolean
name|staleConnection
parameter_list|)
block|{
synchronized|synchronized
init|(
name|CONNECTION_INSTANCES
init|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|HConnectionKey
argument_list|,
name|ConnectionImplementation
argument_list|>
name|e
range|:
name|CONNECTION_INSTANCES
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|==
name|connection
condition|)
block|{
name|deleteConnection
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|staleConnection
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|/**    * @deprecated connection caching is going away. ˙   */
annotation|@
name|Deprecated
specifier|private
specifier|static
name|void
name|deleteConnection
parameter_list|(
name|HConnectionKey
name|connectionKey
parameter_list|,
name|boolean
name|staleConnection
parameter_list|)
block|{
synchronized|synchronized
init|(
name|CONNECTION_INSTANCES
init|)
block|{
name|ConnectionImplementation
name|connection
init|=
name|CONNECTION_INSTANCES
operator|.
name|get
argument_list|(
name|connectionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|decCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|isZeroReference
argument_list|()
operator|||
name|staleConnection
condition|)
block|{
name|CONNECTION_INSTANCES
operator|.
name|remove
argument_list|(
name|connectionKey
argument_list|)
expr_stmt|;
name|connection
operator|.
name|internalClose
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Connection not found in the list, can't delete it "
operator|+
literal|"(connection key="
operator|+
name|connectionKey
operator|+
literal|"). May be the key was modified?"
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This convenience method invokes the given {@link HConnectable#connect}    * implementation using a {@link HConnection} instance that lasts just for the    * duration of the invocation.    *    * @param<T> the return type of the connect method    * @param connectable the {@link HConnectable} instance    * @return the value returned by the connect method    * @throws IOException    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|execute
parameter_list|(
name|HConnectable
argument_list|<
name|T
argument_list|>
name|connectable
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|connectable
operator|==
literal|null
operator|||
name|connectable
operator|.
name|conf
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Configuration
name|conf
init|=
name|connectable
operator|.
name|conf
decl_stmt|;
name|HConnection
name|connection
init|=
name|getConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|boolean
name|connectSucceeded
init|=
literal|false
decl_stmt|;
try|try
block|{
name|T
name|returnValue
init|=
name|connectable
operator|.
name|connect
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|connectSucceeded
operator|=
literal|true
expr_stmt|;
return|return
name|returnValue
return|;
block|}
finally|finally
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ExceptionUtil
operator|.
name|rethrowIfInterrupt
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|connectSucceeded
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The connection to "
operator|+
name|connection
operator|+
literal|" could not be deleted."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**    * The record of errors for servers.    */
specifier|static
class|class
name|ServerErrorTracker
block|{
comment|// We need a concurrent map here, as we could have multiple threads updating it in parallel.
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|ServerName
argument_list|,
name|ServerErrors
argument_list|>
name|errorsByServer
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ServerName
argument_list|,
name|ServerErrors
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|long
name|canRetryUntil
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxRetries
decl_stmt|;
specifier|private
specifier|final
name|long
name|startTrackingTime
decl_stmt|;
specifier|public
name|ServerErrorTracker
parameter_list|(
name|long
name|timeout
parameter_list|,
name|int
name|maxRetries
parameter_list|)
block|{
name|this
operator|.
name|maxRetries
operator|=
name|maxRetries
expr_stmt|;
name|this
operator|.
name|canRetryUntil
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|+
name|timeout
expr_stmt|;
name|this
operator|.
name|startTrackingTime
operator|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
comment|/**      * We stop to retry when we have exhausted BOTH the number of retries and the time allocated.      */
name|boolean
name|canRetryMore
parameter_list|(
name|int
name|numRetry
parameter_list|)
block|{
comment|// If there is a single try we must not take into account the time.
return|return
name|numRetry
operator|<
name|maxRetries
operator|||
operator|(
name|maxRetries
operator|>
literal|1
operator|&&
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|<
name|this
operator|.
name|canRetryUntil
operator|)
return|;
block|}
comment|/**      * Calculates the back-off time for a retrying request to a particular server.      *      * @param server    The server in question.      * @param basePause The default hci pause.      * @return The time to wait before sending next request.      */
name|long
name|calculateBackoffTime
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|long
name|basePause
parameter_list|)
block|{
name|long
name|result
decl_stmt|;
name|ServerErrors
name|errorStats
init|=
name|errorsByServer
operator|.
name|get
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorStats
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
name|basePause
argument_list|,
name|errorStats
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|0
expr_stmt|;
comment|// yes, if the server is not in our list we don't wait before retrying.
block|}
return|return
name|result
return|;
block|}
comment|/**      * Reports that there was an error on the server to do whatever bean-counting necessary.      *      * @param server The server in question.      */
name|void
name|reportServerError
parameter_list|(
name|ServerName
name|server
parameter_list|)
block|{
name|ServerErrors
name|errors
init|=
name|errorsByServer
operator|.
name|get
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|errors
operator|!=
literal|null
condition|)
block|{
name|errors
operator|.
name|addError
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|=
name|errorsByServer
operator|.
name|putIfAbsent
argument_list|(
name|server
argument_list|,
operator|new
name|ServerErrors
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|errors
operator|!=
literal|null
condition|)
block|{
name|errors
operator|.
name|addError
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|long
name|getStartTrackingTime
parameter_list|()
block|{
return|return
name|startTrackingTime
return|;
block|}
comment|/**      * The record of errors for a server.      */
specifier|private
specifier|static
class|class
name|ServerErrors
block|{
specifier|private
specifier|final
name|AtomicInteger
name|retries
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|retries
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|addError
parameter_list|()
block|{
name|retries
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Look for an exception we know in the remote exception:    * - hadoop.ipc wrapped exceptions    * - nested exceptions    *    * Looks for: RegionMovedException / RegionOpeningException / RegionTooBusyException    * @return null if we didn't find the exception, the exception otherwise.    */
specifier|public
specifier|static
name|Throwable
name|findException
parameter_list|(
name|Object
name|exception
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|==
literal|null
operator|||
operator|!
operator|(
name|exception
operator|instanceof
name|Throwable
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Throwable
name|cur
init|=
operator|(
name|Throwable
operator|)
name|exception
decl_stmt|;
while|while
condition|(
name|cur
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cur
operator|instanceof
name|RegionMovedException
operator|||
name|cur
operator|instanceof
name|RegionOpeningException
operator|||
name|cur
operator|instanceof
name|RegionTooBusyException
condition|)
block|{
return|return
name|cur
return|;
block|}
if|if
condition|(
name|cur
operator|instanceof
name|RemoteException
condition|)
block|{
name|RemoteException
name|re
init|=
operator|(
name|RemoteException
operator|)
name|cur
decl_stmt|;
name|cur
operator|=
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|RegionOpeningException
operator|.
name|class
argument_list|,
name|RegionMovedException
operator|.
name|class
argument_list|,
name|RegionTooBusyException
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|cur
operator|==
literal|null
condition|)
block|{
name|cur
operator|=
name|re
operator|.
name|unwrapRemoteException
argument_list|()
expr_stmt|;
block|}
comment|// unwrapRemoteException can return the exception given as a parameter when it cannot
comment|//  unwrap it. In this case, there is no need to look further
comment|// noinspection ObjectEquality
if|if
condition|(
name|cur
operator|==
name|re
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|cur
operator|=
name|cur
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

