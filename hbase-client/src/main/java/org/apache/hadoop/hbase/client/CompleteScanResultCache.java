begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * A scan result cache that only returns complete result.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|CompleteScanResultCache
implements|implements
name|ScanResultCache
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Result
argument_list|>
name|partialResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Result
name|combine
parameter_list|()
throws|throws
name|IOException
block|{
name|Result
name|result
init|=
name|Result
operator|.
name|createCompleteResult
argument_list|(
name|partialResults
argument_list|)
decl_stmt|;
name|partialResults
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|Result
index|[]
name|prependCombined
parameter_list|(
name|Result
index|[]
name|results
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|Result
index|[]
block|{
name|combine
argument_list|()
block|}
return|;
block|}
comment|// the last part of a partial result may not be marked as partial so here we need to check if
comment|// there is a row change.
name|int
name|start
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|partialResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
condition|)
block|{
name|partialResults
operator|.
name|add
argument_list|(
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|start
operator|=
literal|1
expr_stmt|;
name|length
operator|--
expr_stmt|;
block|}
else|else
block|{
name|start
operator|=
literal|0
expr_stmt|;
block|}
name|Result
index|[]
name|prependResults
init|=
operator|new
name|Result
index|[
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|prependResults
index|[
literal|0
index|]
operator|=
name|combine
argument_list|()
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|results
argument_list|,
name|start
argument_list|,
name|prependResults
argument_list|,
literal|1
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|prependResults
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
index|[]
name|addAndGet
parameter_list|(
name|Result
index|[]
name|results
parameter_list|,
name|boolean
name|isHeartbeatMessage
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If no results were returned it indicates that either we have the all the partial results
comment|// necessary to construct the complete result or the server had to send a heartbeat message
comment|// to the client to keep the client-server connection alive
if|if
condition|(
name|results
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// If this response was an empty heartbeat message, then we have not exhausted the region
comment|// and thus there may be more partials server side that still need to be added to the partial
comment|// list before we form the complete Result
if|if
condition|(
operator|!
name|partialResults
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|isHeartbeatMessage
condition|)
block|{
return|return
operator|new
name|Result
index|[]
block|{
name|combine
argument_list|()
block|}
return|;
block|}
return|return
name|EMPTY_RESULT_ARRAY
return|;
block|}
comment|// In every RPC response there should be at most a single partial result. Furthermore, if
comment|// there is a partial result, it is guaranteed to be in the last position of the array.
name|Result
name|last
init|=
name|results
index|[
name|results
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|last
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
condition|)
block|{
if|if
condition|(
name|partialResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|partialResults
operator|.
name|add
argument_list|(
name|last
argument_list|)
expr_stmt|;
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|results
argument_list|,
name|results
operator|.
name|length
operator|-
literal|1
argument_list|)
return|;
block|}
comment|// We have only one result and it is partial
if|if
condition|(
name|results
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// check if there is a row change
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|partialResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|last
operator|.
name|getRow
argument_list|()
argument_list|)
condition|)
block|{
name|partialResults
operator|.
name|add
argument_list|(
name|last
argument_list|)
expr_stmt|;
return|return
name|EMPTY_RESULT_ARRAY
return|;
block|}
name|Result
name|completeResult
init|=
name|combine
argument_list|()
decl_stmt|;
name|partialResults
operator|.
name|add
argument_list|(
name|last
argument_list|)
expr_stmt|;
return|return
operator|new
name|Result
index|[]
block|{
name|completeResult
block|}
return|;
block|}
comment|// We have some complete results
name|Result
index|[]
name|resultsToReturn
init|=
name|prependCombined
argument_list|(
name|results
argument_list|,
name|results
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|partialResults
operator|.
name|add
argument_list|(
name|last
argument_list|)
expr_stmt|;
return|return
name|resultsToReturn
return|;
block|}
if|if
condition|(
operator|!
name|partialResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|prependCombined
argument_list|(
name|results
argument_list|,
name|results
operator|.
name|length
argument_list|)
return|;
block|}
return|return
name|results
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|partialResults
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

