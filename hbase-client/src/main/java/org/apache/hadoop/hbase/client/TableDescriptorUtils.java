begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
specifier|final
class|class
name|TableDescriptorUtils
block|{
specifier|public
specifier|final
specifier|static
class|class
name|TableDescriptorDelta
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|columnsAdded
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|columnsDeleted
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|columnsModified
decl_stmt|;
specifier|private
name|TableDescriptorDelta
parameter_list|(
name|TableDescriptor
name|oldTD
parameter_list|,
name|TableDescriptor
name|newTD
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|oldTD
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|newTD
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|ColumnFamilyDescriptor
argument_list|>
name|oldCFs
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|newCFs
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
comment|// CFD -> (name, CFD)
for|for
control|(
name|ColumnFamilyDescriptor
name|cfd
range|:
name|oldTD
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|oldCFs
operator|.
name|put
argument_list|(
name|cfd
operator|.
name|getName
argument_list|()
argument_list|,
name|cfd
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|added
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|modified
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|cfd
range|:
name|newTD
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|byte
index|[]
name|cfName
init|=
name|cfd
operator|.
name|getName
argument_list|()
decl_stmt|;
name|newCFs
operator|.
name|add
argument_list|(
name|cfName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|oldCFs
operator|.
name|containsKey
argument_list|(
name|cfName
argument_list|)
condition|)
block|{
comment|// If column family is in newTD but not oldTD, then it was added
name|added
operator|.
name|add
argument_list|(
name|cfName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|cfd
operator|.
name|equals
argument_list|(
name|oldCFs
operator|.
name|get
argument_list|(
name|cfName
argument_list|)
argument_list|)
condition|)
block|{
comment|// If column family is in both, but not equal, then it was modified
name|modified
operator|.
name|add
argument_list|(
name|cfName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If column family is in oldTD, but not in newTD, then it got deleted.
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|deleted
init|=
name|oldCFs
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|deleted
operator|.
name|removeAll
argument_list|(
name|newCFs
argument_list|)
expr_stmt|;
name|columnsAdded
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|added
argument_list|)
expr_stmt|;
name|columnsDeleted
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|deleted
argument_list|)
expr_stmt|;
name|columnsModified
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|modified
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|getColumnsAdded
parameter_list|()
block|{
return|return
name|columnsAdded
return|;
block|}
specifier|public
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|getColumnsDeleted
parameter_list|()
block|{
return|return
name|columnsDeleted
return|;
block|}
specifier|public
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|getColumnsModified
parameter_list|()
block|{
return|return
name|columnsModified
return|;
block|}
block|}
specifier|private
name|TableDescriptorUtils
parameter_list|()
block|{ }
comment|/**    * Compares two {@link TableDescriptor} and indicate which columns were added, deleted,    * or modified from oldTD to newTD    * @return a TableDescriptorDelta that contains the added/deleted/modified column names    */
specifier|public
specifier|static
name|TableDescriptorDelta
name|computeDelta
parameter_list|(
name|TableDescriptor
name|oldTD
parameter_list|,
name|TableDescriptor
name|newTD
parameter_list|)
block|{
return|return
operator|new
name|TableDescriptorDelta
argument_list|(
name|oldTD
argument_list|,
name|newTD
argument_list|)
return|;
block|}
block|}
end_class

end_unit

