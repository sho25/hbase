begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Addressing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * The class that is able to determine some unique strings for the client,  * such as an IP address, PID, and composite deterministic ID.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|final
class|class
name|ClientIdGenerator
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ClientIdGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ClientIdGenerator
parameter_list|()
block|{}
comment|/**    * @return a unique ID incorporating IP address, PID, TID and timer. Might be an overkill...    * Note though that new UUID in java by default is just a random number.    */
specifier|public
specifier|static
name|byte
index|[]
name|generateClientId
parameter_list|()
block|{
name|byte
index|[]
name|selfBytes
init|=
name|getIpAddressBytes
argument_list|()
decl_stmt|;
name|Long
name|pid
init|=
name|getPid
argument_list|()
decl_stmt|;
name|long
name|tid
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|byte
index|[]
name|id
init|=
operator|new
name|byte
index|[
name|selfBytes
operator|.
name|length
operator|+
operator|(
operator|(
name|pid
operator|!=
literal|null
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
literal|2
operator|)
operator|*
name|Bytes
operator|.
name|SIZEOF_LONG
index|]
decl_stmt|;
name|int
name|offset
init|=
name|Bytes
operator|.
name|putBytes
argument_list|(
name|id
argument_list|,
literal|0
argument_list|,
name|selfBytes
argument_list|,
literal|0
argument_list|,
name|selfBytes
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|pid
operator|!=
literal|null
condition|)
block|{
name|offset
operator|=
name|Bytes
operator|.
name|putLong
argument_list|(
name|id
argument_list|,
name|offset
argument_list|,
name|pid
argument_list|)
expr_stmt|;
block|}
name|offset
operator|=
name|Bytes
operator|.
name|putLong
argument_list|(
name|id
argument_list|,
name|offset
argument_list|,
name|tid
argument_list|)
expr_stmt|;
name|offset
operator|=
name|Bytes
operator|.
name|putLong
argument_list|(
name|id
argument_list|,
name|offset
argument_list|,
name|ts
argument_list|)
expr_stmt|;
assert|assert
name|offset
operator|==
name|id
operator|.
name|length
assert|;
return|return
name|id
return|;
block|}
comment|/**    * @return PID of the current process, if it can be extracted from JVM name, or null.    */
specifier|public
specifier|static
name|Long
name|getPid
parameter_list|()
block|{
name|String
name|name
init|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
index|[]
name|nameParts
init|=
name|name
operator|.
name|split
argument_list|(
literal|"@"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameParts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// 12345@somewhere
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|nameParts
index|[
literal|0
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get PID from ["
operator|+
name|name
operator|+
literal|"]"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Don't know how to get PID from ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * @return Some IPv4/IPv6 address available on the current machine that is up, not virtual    *         and not a loopback address. Empty array if none can be found or error occurred.    */
specifier|public
specifier|static
name|byte
index|[]
name|getIpAddressBytes
parameter_list|()
block|{
try|try
block|{
return|return
name|Addressing
operator|.
name|getIpAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get IP address bytes"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
block|}
end_class

end_unit

