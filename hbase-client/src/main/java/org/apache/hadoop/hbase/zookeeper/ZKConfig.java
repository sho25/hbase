begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Utility methods for reading, and building the ZooKeeper configuration.  *  * The order and priority for reading the config are as follows:  * (1). Property with "hbase.zookeeper.property." prefix from HBase XML  * (2). other zookeeper related properties in HBASE XML  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ZKConfig
block|{
specifier|private
specifier|static
specifier|final
name|String
name|VARIABLE_START
init|=
literal|"${"
decl_stmt|;
comment|/**    * Make a Properties object holding ZooKeeper config.    * Parses the corresponding config options from the HBase XML configs    * and generates the appropriate ZooKeeper properties.    * @param conf Configuration to read from.    * @return Properties holding mappings representing ZooKeeper config file.    */
specifier|public
specifier|static
name|Properties
name|makeZKProps
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|makeZKPropsFromHbaseConfig
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * Make a Properties object holding ZooKeeper config.    * Parses the corresponding config options from the HBase XML configs    * and generates the appropriate ZooKeeper properties.    *    * @param conf Configuration to read from.    * @return Properties holding mappings representing ZooKeeper config file.    */
specifier|private
specifier|static
name|Properties
name|makeZKPropsFromHbaseConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Properties
name|zkProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Directly map all of the hbase.zookeeper.property.KEY properties.
comment|// Synchronize on conf so no loading of configs while we iterate
synchronized|synchronized
init|(
name|conf
init|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|conf
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|HConstants
operator|.
name|ZK_CFG_PROPERTY_PREFIX
argument_list|)
condition|)
block|{
name|String
name|zkKey
init|=
name|key
operator|.
name|substring
argument_list|(
name|HConstants
operator|.
name|ZK_CFG_PROPERTY_PREFIX_LEN
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// If the value has variables substitutions, need to do a get.
if|if
condition|(
name|value
operator|.
name|contains
argument_list|(
name|VARIABLE_START
argument_list|)
condition|)
block|{
name|value
operator|=
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|zkProperties
operator|.
name|setProperty
argument_list|(
name|zkKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// If clientPort is not set, assign the default.
if|if
condition|(
name|zkProperties
operator|.
name|getProperty
argument_list|(
name|HConstants
operator|.
name|CLIENT_PORT_STR
argument_list|)
operator|==
literal|null
condition|)
block|{
name|zkProperties
operator|.
name|put
argument_list|(
name|HConstants
operator|.
name|CLIENT_PORT_STR
argument_list|,
name|HConstants
operator|.
name|DEFAULT_ZOOKEPER_CLIENT_PORT
argument_list|)
expr_stmt|;
block|}
comment|// Create the server.X properties.
name|int
name|peerPort
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.zookeeper.peerport"
argument_list|,
literal|2888
argument_list|)
decl_stmt|;
name|int
name|leaderPort
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.zookeeper.leaderport"
argument_list|,
literal|3888
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|serverHosts
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|,
name|HConstants
operator|.
name|LOCALHOST
argument_list|)
decl_stmt|;
name|String
name|serverHost
decl_stmt|;
name|String
name|address
decl_stmt|;
name|String
name|key
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|serverHosts
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|serverHosts
index|[
name|i
index|]
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|serverHost
operator|=
name|serverHosts
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|serverHosts
index|[
name|i
index|]
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverHost
operator|=
name|serverHosts
index|[
name|i
index|]
expr_stmt|;
block|}
name|address
operator|=
name|serverHost
operator|+
literal|":"
operator|+
name|peerPort
operator|+
literal|":"
operator|+
name|leaderPort
expr_stmt|;
name|key
operator|=
literal|"server."
operator|+
name|i
expr_stmt|;
name|zkProperties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
return|return
name|zkProperties
return|;
block|}
comment|/**    * Return the ZK Quorum servers string given the specified configuration    *    * @param conf    * @return Quorum servers String    */
specifier|private
specifier|static
name|String
name|getZKQuorumServersStringFromHbaseConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|defaultClientPort
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_ZOOKEPER_CLIENT_PORT
argument_list|)
argument_list|)
decl_stmt|;
comment|// Build the ZK quorum server string with "server:clientport" list, separated by ','
specifier|final
name|String
index|[]
name|serverHosts
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|,
name|HConstants
operator|.
name|LOCALHOST
argument_list|)
decl_stmt|;
return|return
name|buildQuorumServerString
argument_list|(
name|serverHosts
argument_list|,
name|defaultClientPort
argument_list|)
return|;
block|}
comment|/**    * Build the ZK quorum server string with "server:clientport" list, separated by ','    *    * @param serverHosts a list of servers for ZK quorum    * @param clientPort the default client port    * @return the string for a list of "server:port" separated by ","    */
specifier|public
specifier|static
name|String
name|buildQuorumServerString
parameter_list|(
name|String
index|[]
name|serverHosts
parameter_list|,
name|String
name|clientPort
parameter_list|)
block|{
name|StringBuilder
name|quorumStringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|serverHost
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|serverHosts
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|serverHosts
index|[
name|i
index|]
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|serverHost
operator|=
name|serverHosts
index|[
name|i
index|]
expr_stmt|;
comment|// just use the port specified from the input
block|}
else|else
block|{
name|serverHost
operator|=
name|serverHosts
index|[
name|i
index|]
operator|+
literal|":"
operator|+
name|clientPort
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|quorumStringBuilder
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|quorumStringBuilder
operator|.
name|append
argument_list|(
name|serverHost
argument_list|)
expr_stmt|;
block|}
return|return
name|quorumStringBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Return the ZK Quorum servers string given the specified configuration.    * @return Quorum servers    */
specifier|public
specifier|static
name|String
name|getZKQuorumServersString
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getZKQuorumServersStringFromHbaseConfig
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
end_class

end_unit

