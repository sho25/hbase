begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * Publishes and synchronizes a unique identifier specific to a given HBase  * cluster.  The stored identifier is read from the file system by the active  * master on startup, and is subsequently available to all watchers (including  * clients).  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ZKClusterId
block|{
specifier|private
name|ZooKeeperWatcher
name|watcher
decl_stmt|;
specifier|private
name|Abortable
name|abortable
decl_stmt|;
specifier|private
name|String
name|id
decl_stmt|;
specifier|public
name|ZKClusterId
parameter_list|(
name|ZooKeeperWatcher
name|watcher
parameter_list|,
name|Abortable
name|abortable
parameter_list|)
block|{
name|this
operator|.
name|watcher
operator|=
name|watcher
expr_stmt|;
name|this
operator|.
name|abortable
operator|=
name|abortable
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasId
parameter_list|()
block|{
return|return
name|getId
argument_list|()
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|readClusterIdZNode
argument_list|(
name|watcher
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|abortable
operator|.
name|abort
argument_list|(
literal|"Unexpected exception from ZooKeeper reading cluster ID"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
specifier|public
specifier|static
name|String
name|readClusterIdZNode
parameter_list|(
name|ZooKeeperWatcher
name|watcher
parameter_list|)
throws|throws
name|KeeperException
block|{
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|clusterIdZNode
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|clusterIdZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|ClusterId
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
name|ZKUtil
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|void
name|setClusterId
parameter_list|(
name|ZooKeeperWatcher
name|watcher
parameter_list|,
name|ClusterId
name|id
parameter_list|)
throws|throws
name|KeeperException
block|{
name|ZKUtil
operator|.
name|createSetData
argument_list|(
name|watcher
argument_list|,
name|watcher
operator|.
name|clusterIdZNode
argument_list|,
name|id
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

