begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AssignsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|BypassProcedureRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|BypassProcedureResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|FixMetaRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|HbckService
operator|.
name|BlockingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RunHbckChoreRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RunHbckChoreResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ScheduleServerCrashProcedureResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|UnassignsResponse
import|;
end_import

begin_comment
comment|/**  * Use {@link Connection#getHbck()} to obtain an instance of {@link Hbck} instead of  * constructing an HBaseHbck directly.  *  *<p>Connection should be an<i>unmanaged</i> connection obtained via  * {@link ConnectionFactory#createConnection(Configuration)}.</p>  *  *<p>NOTE: The methods in here can do damage to a cluster if applied in the wrong sequence or at  * the wrong time. Use with caution. For experts only. These methods are only for the  * extreme case where the cluster has been damaged or has achieved an inconsistent state because  * of some unforeseen circumstance or bug and requires manual intervention.  *  *<p>An instance of this class is lightweight and not-thread safe. A new instance should be created  * by each thread. Pooling or caching of the instance is not recommended.</p>  *  * @see ConnectionFactory  * @see Hbck  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|HBaseHbck
implements|implements
name|Hbck
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HBaseHbck
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|aborted
decl_stmt|;
specifier|private
specifier|final
name|BlockingInterface
name|hbck
decl_stmt|;
specifier|private
name|RpcControllerFactory
name|rpcControllerFactory
decl_stmt|;
name|HBaseHbck
parameter_list|(
name|BlockingInterface
name|hbck
parameter_list|,
name|RpcControllerFactory
name|rpcControllerFactory
parameter_list|)
block|{
name|this
operator|.
name|hbck
operator|=
name|hbck
expr_stmt|;
name|this
operator|.
name|rpcControllerFactory
operator|=
name|rpcControllerFactory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// currently does nothing
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|this
operator|.
name|aborted
operator|=
literal|true
expr_stmt|;
comment|// Currently does nothing but throw the passed message and exception
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|why
argument_list|,
name|e
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|this
operator|.
name|aborted
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableState
name|setTableStateInMeta
parameter_list|(
name|TableState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|GetTableStateResponse
name|response
init|=
name|hbck
operator|.
name|setTableStateInMeta
argument_list|(
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildSetTableStateInMetaRequest
argument_list|(
name|state
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|TableState
operator|.
name|convert
argument_list|(
name|state
operator|.
name|getTableName
argument_list|()
argument_list|,
name|response
operator|.
name|getTableState
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"table={}, state={}"
argument_list|,
name|state
operator|.
name|getTableName
argument_list|()
argument_list|,
name|state
operator|.
name|getState
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Long
argument_list|>
name|assigns
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|encodedRegionNames
parameter_list|,
name|boolean
name|override
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|AssignsResponse
name|response
init|=
name|this
operator|.
name|hbck
operator|.
name|assigns
argument_list|(
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|toAssignRegionsRequest
argument_list|(
name|encodedRegionNames
argument_list|,
name|override
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getPidList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|toCommaDelimitedString
argument_list|(
name|encodedRegionNames
argument_list|)
argument_list|,
name|se
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Long
argument_list|>
name|unassigns
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|encodedRegionNames
parameter_list|,
name|boolean
name|override
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|UnassignsResponse
name|response
init|=
name|this
operator|.
name|hbck
operator|.
name|unassigns
argument_list|(
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|toUnassignRegionsRequest
argument_list|(
name|encodedRegionNames
argument_list|,
name|override
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getPidList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|toCommaDelimitedString
argument_list|(
name|encodedRegionNames
argument_list|)
argument_list|,
name|se
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|String
name|toCommaDelimitedString
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|list
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Boolean
argument_list|>
name|bypassProcedure
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|pids
parameter_list|,
name|long
name|waitTime
parameter_list|,
name|boolean
name|override
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|BypassProcedureResponse
name|response
init|=
name|ProtobufUtil
operator|.
name|call
argument_list|(
operator|new
name|Callable
argument_list|<
name|BypassProcedureResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|BypassProcedureResponse
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|hbck
operator|.
name|bypassProcedure
argument_list|(
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|,
name|BypassProcedureRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllProcId
argument_list|(
name|pids
argument_list|)
operator|.
name|setWaitTime
argument_list|(
name|waitTime
argument_list|)
operator|.
name|setOverride
argument_list|(
name|override
argument_list|)
operator|.
name|setRecursive
argument_list|(
name|recursive
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|pids
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|i
lambda|->
name|i
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getBypassedList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Long
argument_list|>
name|scheduleServerCrashProcedures
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|serverNames
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|ScheduleServerCrashProcedureResponse
name|response
init|=
name|this
operator|.
name|hbck
operator|.
name|scheduleServerCrashProcedure
argument_list|(
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|toScheduleServerCrashProcedureRequest
argument_list|(
name|serverNames
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getPidList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|toCommaDelimitedString
argument_list|(
name|serverNames
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|serverName
lambda|->
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|serverName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|se
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|runHbckChore
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|RunHbckChoreResponse
name|response
init|=
name|this
operator|.
name|hbck
operator|.
name|runHbckChore
argument_list|(
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|,
name|RunHbckChoreRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getRan
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to run HBCK chore"
argument_list|,
name|se
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|fixMeta
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|this
operator|.
name|hbck
operator|.
name|fixMeta
argument_list|(
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|,
name|FixMetaRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

