begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_comment
comment|/**  * Denotes a unique key to an {@link HConnection} instance.  *  * In essence, this class captures the properties in {@link Configuration}  * that may be used in the process of establishing a connection. In light of  * that, if any new such properties are introduced into the mix, they must be  * added to the {@link HConnectionKey#properties} list.  *  */
end_comment

begin_class
class|class
name|HConnectionKey
block|{
specifier|final
specifier|static
name|String
index|[]
name|CONNECTION_PROPERTIES
init|=
operator|new
name|String
index|[]
block|{
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
block|,
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
block|,
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
block|,
name|HConstants
operator|.
name|ZOOKEEPER_RECOVERABLE_WAITTIME
block|,
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
block|,
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
block|,
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
block|,
name|HConstants
operator|.
name|HBASE_CLIENT_PREFETCH_LIMIT
block|,
name|HConstants
operator|.
name|HBASE_META_SCANNER_CACHING
block|,
name|HConstants
operator|.
name|HBASE_CLIENT_INSTANCE_ID
block|}
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
decl_stmt|;
specifier|private
name|String
name|username
decl_stmt|;
name|HConnectionKey
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|property
range|:
name|CONNECTION_PROPERTIES
control|)
block|{
name|String
name|value
init|=
name|conf
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|properties
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|m
argument_list|)
expr_stmt|;
try|try
block|{
name|UserProvider
name|provider
init|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|User
name|currentUser
init|=
name|provider
operator|.
name|getCurrent
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentUser
operator|!=
literal|null
condition|)
block|{
name|username
operator|=
name|currentUser
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|HConnectionManager
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error obtaining current user, skipping username in HConnectionKey"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|username
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|username
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|property
range|:
name|CONNECTION_PROPERTIES
control|)
block|{
name|String
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|value
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"ES_COMPARING_STRINGS_WITH_EQ"
argument_list|,
name|justification
operator|=
literal|"Optimization"
argument_list|)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|HConnectionKey
name|that
init|=
operator|(
name|HConnectionKey
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|username
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|username
operator|.
name|equals
argument_list|(
name|that
operator|.
name|username
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|username
operator|==
literal|null
operator|&&
name|that
operator|.
name|username
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|properties
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|that
operator|.
name|properties
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|that
operator|.
name|properties
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|property
range|:
name|CONNECTION_PROPERTIES
control|)
block|{
name|String
name|thisValue
init|=
name|this
operator|.
name|properties
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|String
name|thatValue
init|=
name|that
operator|.
name|properties
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
comment|//noinspection StringEquality
if|if
condition|(
name|thisValue
operator|==
name|thatValue
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|thisValue
operator|==
literal|null
operator|||
operator|!
name|thisValue
operator|.
name|equals
argument_list|(
name|thatValue
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"HConnectionKey{"
operator|+
literal|"properties="
operator|+
name|properties
operator|+
literal|", username='"
operator|+
name|username
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

