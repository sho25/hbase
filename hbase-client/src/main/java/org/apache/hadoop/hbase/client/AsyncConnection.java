begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * The asynchronous version of Connection.  * @since 2.0.0  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
interface|interface
name|AsyncConnection
extends|extends
name|Closeable
block|{
comment|/**    * Returns the {@link org.apache.hadoop.conf.Configuration} object used by this instance.    *<p>    * The reference returned is not a copy, so any change made to it will affect this instance.    */
name|Configuration
name|getConfiguration
parameter_list|()
function_decl|;
comment|/**    * Retrieve a AsyncRegionLocator implementation to inspect region information on a table. The    * returned AsyncRegionLocator is not thread-safe, so a new instance should be created for each    * using thread. This is a lightweight operation. Pooling or caching of the returned    * AsyncRegionLocator is neither required nor desired.    * @param tableName Name of the table who's region is to be examined    * @return An AsyncRegionLocator instance    */
name|AsyncTableRegionLocator
name|getRegionLocator
parameter_list|(
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Retrieve an {@link AsyncTable} implementation for accessing a table.    *<p>    * The returned instance will use default configs. Use {@link #getTableBuilder(TableName)} if    * you want to customize some configs.    *<p>    * This method no longer checks table existence. An exception will be thrown if the table does not    * exist only when the first operation is attempted.    *<p>    * The returned {@code CompletableFuture} will be finished directly in the rpc framework's    * callback thread, so typically you should not do any time consuming work inside these methods.    * And also the observer style scan API will use {@link AdvancedScanResultConsumer} which is    * designed for experts only. Only use it when you know what you are doing.    * @param tableName the name of the table    * @return an AsyncTable to use for interactions with this table    * @see #getTableBuilder(TableName)    */
specifier|default
name|AsyncTable
argument_list|<
name|AdvancedScanResultConsumer
argument_list|>
name|getTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|getTableBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns an {@link AsyncTableBuilder} for creating {@link AsyncTable}.    *<p>    * This method no longer checks table existence. An exception will be thrown if the table does not    * exist only when the first operation is attempted.    * @param tableName the name of the table    */
name|AsyncTableBuilder
argument_list|<
name|AdvancedScanResultConsumer
argument_list|>
name|getTableBuilder
parameter_list|(
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Retrieve an {@link AsyncTable} implementation for accessing a table.    *<p>    * This method no longer checks table existence. An exception will be thrown if the table does not    * exist only when the first operation is attempted.    * @param tableName the name of the table    * @param pool the thread pool to use for executing callback    * @return an AsyncTable to use for interactions with this table    */
specifier|default
name|AsyncTable
argument_list|<
name|ScanResultConsumer
argument_list|>
name|getTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
block|{
return|return
name|getTableBuilder
argument_list|(
name|tableName
argument_list|,
name|pool
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns an {@link AsyncTableBuilder} for creating {@link AsyncTable}.    *<p>    * This method no longer checks table existence. An exception will be thrown if the table does not    * exist only when the first operation is attempted.    * @param tableName the name of the table    * @param pool the thread pool to use for executing callback    */
name|AsyncTableBuilder
argument_list|<
name|ScanResultConsumer
argument_list|>
name|getTableBuilder
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
function_decl|;
comment|/**    * Retrieve an {@link AsyncAdmin} implementation to administer an HBase cluster.    *<p>    * The returned instance will use default configs. Use {@link #getAdminBuilder()} if you want to    * customize some configs.    *<p>    * The admin operation's returned {@code CompletableFuture} will be finished directly in the rpc    * framework's callback thread, so typically you should not do any time consuming work inside    * these methods.    * @return an {@link AsyncAdmin} instance for cluster administration    */
specifier|default
name|AsyncAdmin
name|getAdmin
parameter_list|()
block|{
return|return
name|getAdminBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns an {@link AsyncAdminBuilder} for creating {@link AsyncAdmin}.    *<p>    * The admin operation's returned {@code CompletableFuture} will be finished directly in the rpc    * framework's callback thread, so typically you should not do any time consuming work inside    * these methods.    */
name|AsyncAdminBuilder
name|getAdminBuilder
parameter_list|()
function_decl|;
comment|/**    * Retrieve an {@link AsyncAdmin} implementation to administer an HBase cluster.    *<p>    * The returned instance will use default configs. Use {@link #getAdminBuilder(ExecutorService)}    * if you want to customize some configs.    * @param pool the thread pool to use for executing callback    * @return an {@link AsyncAdmin} instance for cluster administration    */
specifier|default
name|AsyncAdmin
name|getAdmin
parameter_list|(
name|ExecutorService
name|pool
parameter_list|)
block|{
return|return
name|getAdminBuilder
argument_list|(
name|pool
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns an {@link AsyncAdminBuilder} for creating {@link AsyncAdmin}.    * @param pool the thread pool to use for executing callback    */
name|AsyncAdminBuilder
name|getAdminBuilder
parameter_list|(
name|ExecutorService
name|pool
parameter_list|)
function_decl|;
comment|/**    * Retrieve an {@link AsyncBufferedMutator} for performing client-side buffering of writes.    *<p>    * The returned instance will use default configs. Use    * {@link #getBufferedMutatorBuilder(TableName)} if you want to customize some configs.    * @param tableName the name of the table    * @return an {@link AsyncBufferedMutator} for the supplied tableName.    */
specifier|default
name|AsyncBufferedMutator
name|getBufferedMutator
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|getBufferedMutatorBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns an {@link AsyncBufferedMutatorBuilder} for creating {@link AsyncBufferedMutator}.    * @param tableName the name of the table    */
name|AsyncBufferedMutatorBuilder
name|getBufferedMutatorBuilder
parameter_list|(
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * Retrieve an {@link AsyncBufferedMutator} for performing client-side buffering of writes.    *<p>    * The returned instance will use default configs. Use    * {@link #getBufferedMutatorBuilder(TableName, ExecutorService)} if you want to customize some    * configs.    * @param tableName the name of the table    * @param pool the thread pool to use for executing callback    * @return an {@link AsyncBufferedMutator} for the supplied tableName.    */
specifier|default
name|AsyncBufferedMutator
name|getBufferedMutator
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
block|{
return|return
name|getBufferedMutatorBuilder
argument_list|(
name|tableName
argument_list|,
name|pool
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns an {@link AsyncBufferedMutatorBuilder} for creating {@link AsyncBufferedMutator}.    * @param tableName the name of the table    * @param pool the thread pool to use for executing callback    */
name|AsyncBufferedMutatorBuilder
name|getBufferedMutatorBuilder
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

