begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A ScanResultCache that may return partial result.  *<p>  * As we can only scan from the starting of a row when error, so here we also implement the logic  * that skips the cells that have already been returned.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|AllowPartialScanResultCache
implements|implements
name|ScanResultCache
block|{
comment|// used to filter out the cells that already returned to user as we always start from the
comment|// beginning of a row when retry.
specifier|private
name|Cell
name|lastCell
decl_stmt|;
specifier|private
name|Result
name|filterCells
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
return|return
name|lastCell
operator|==
literal|null
condition|?
name|result
else|:
name|ConnectionUtils
operator|.
name|filterCells
argument_list|(
name|result
argument_list|,
name|lastCell
argument_list|)
return|;
block|}
specifier|private
name|void
name|updateLastCell
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
name|lastCell
operator|=
name|result
operator|.
name|isPartial
argument_list|()
condition|?
name|result
operator|.
name|rawCells
argument_list|()
index|[
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|-
literal|1
index|]
else|:
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Result
index|[]
name|addAndGet
parameter_list|(
name|Result
index|[]
name|results
parameter_list|,
name|boolean
name|isHeartbeatMessage
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|results
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|EMPTY_RESULT_ARRAY
return|;
block|}
name|Result
name|first
init|=
name|filterCells
argument_list|(
name|results
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|length
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
comment|// do not update last cell if we filter out all cells
return|return
name|EMPTY_RESULT_ARRAY
return|;
block|}
name|updateLastCell
argument_list|(
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|results
index|[
literal|0
index|]
operator|=
name|first
expr_stmt|;
return|return
name|results
return|;
block|}
name|updateLastCell
argument_list|(
name|results
index|[
name|results
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|results
argument_list|,
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
return|;
block|}
name|results
index|[
literal|0
index|]
operator|=
name|first
expr_stmt|;
return|return
name|results
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
comment|// we do not cache anything
block|}
block|}
end_class

end_unit

