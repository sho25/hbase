begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|AccessControlService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|GetUserPermissionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteStringer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * @since 2.0.0  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|AccessControlUtil
block|{
specifier|private
name|AccessControlUtil
parameter_list|()
block|{}
comment|/**    * Create a request to grant user table permissions.    *    * @param username the short user name who to grant permissions    * @param tableName optional table name the permissions apply    * @param family optional column family    * @param qualifier optional qualifier    * @param actions the permissions to be granted    * @return A {@link AccessControlProtos} GrantRequest    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|GrantRequest
name|buildGrantRequest
parameter_list|(
name|String
name|username
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|boolean
name|mergeExistingPermissions
parameter_list|,
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
block|{
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Builder
name|ret
init|=
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|TablePermission
operator|.
name|Builder
name|permissionBuilder
init|=
name|AccessControlProtos
operator|.
name|TablePermission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permissionBuilder
operator|.
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"TableName cannot be null"
argument_list|)
throw|;
block|}
name|permissionBuilder
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|family
operator|!=
literal|null
condition|)
block|{
name|permissionBuilder
operator|.
name|setFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qualifier
operator|!=
literal|null
condition|)
block|{
name|permissionBuilder
operator|.
name|setQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Table
argument_list|)
operator|.
name|setTablePermission
argument_list|(
name|permissionBuilder
argument_list|)
expr_stmt|;
return|return
name|AccessControlProtos
operator|.
name|GrantRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUserPermission
argument_list|(
name|AccessControlProtos
operator|.
name|UserPermission
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUser
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|username
argument_list|)
argument_list|)
operator|.
name|setPermission
argument_list|(
name|ret
argument_list|)
argument_list|)
operator|.
name|setMergeExistingPermissions
argument_list|(
name|mergeExistingPermissions
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Create a request to grant user namespace permissions.    *    * @param username the short user name who to grant permissions    * @param namespace optional table name the permissions apply    * @param actions the permissions to be granted    * @return A {@link AccessControlProtos} GrantRequest    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|GrantRequest
name|buildGrantRequest
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|namespace
parameter_list|,
name|boolean
name|mergeExistingPermissions
parameter_list|,
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
block|{
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Builder
name|ret
init|=
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|NamespacePermission
operator|.
name|Builder
name|permissionBuilder
init|=
name|AccessControlProtos
operator|.
name|NamespacePermission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permissionBuilder
operator|.
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
name|permissionBuilder
operator|.
name|setNamespaceName
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|namespace
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Namespace
argument_list|)
operator|.
name|setNamespacePermission
argument_list|(
name|permissionBuilder
argument_list|)
expr_stmt|;
return|return
name|AccessControlProtos
operator|.
name|GrantRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUserPermission
argument_list|(
name|AccessControlProtos
operator|.
name|UserPermission
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUser
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|username
argument_list|)
argument_list|)
operator|.
name|setPermission
argument_list|(
name|ret
argument_list|)
argument_list|)
operator|.
name|setMergeExistingPermissions
argument_list|(
name|mergeExistingPermissions
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Create a request to revoke user global permissions.    *    * @param username the short user name whose permissions to be revoked    * @param actions the permissions to be revoked    * @return A {@link AccessControlProtos} RevokeRequest    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|RevokeRequest
name|buildRevokeRequest
parameter_list|(
name|String
name|username
parameter_list|,
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
block|{
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Builder
name|ret
init|=
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|GlobalPermission
operator|.
name|Builder
name|permissionBuilder
init|=
name|AccessControlProtos
operator|.
name|GlobalPermission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permissionBuilder
operator|.
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Global
argument_list|)
operator|.
name|setGlobalPermission
argument_list|(
name|permissionBuilder
argument_list|)
expr_stmt|;
return|return
name|AccessControlProtos
operator|.
name|RevokeRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUserPermission
argument_list|(
name|AccessControlProtos
operator|.
name|UserPermission
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUser
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|username
argument_list|)
argument_list|)
operator|.
name|setPermission
argument_list|(
name|ret
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Create a request to revoke user namespace permissions.    *    * @param username the short user name whose permissions to be revoked    * @param namespace optional table name the permissions apply    * @param actions the permissions to be revoked    * @return A {@link AccessControlProtos} RevokeRequest    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|RevokeRequest
name|buildRevokeRequest
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|namespace
parameter_list|,
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
block|{
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Builder
name|ret
init|=
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|NamespacePermission
operator|.
name|Builder
name|permissionBuilder
init|=
name|AccessControlProtos
operator|.
name|NamespacePermission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permissionBuilder
operator|.
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
name|permissionBuilder
operator|.
name|setNamespaceName
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|namespace
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Namespace
argument_list|)
operator|.
name|setNamespacePermission
argument_list|(
name|permissionBuilder
argument_list|)
expr_stmt|;
return|return
name|AccessControlProtos
operator|.
name|RevokeRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUserPermission
argument_list|(
name|AccessControlProtos
operator|.
name|UserPermission
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUser
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|username
argument_list|)
argument_list|)
operator|.
name|setPermission
argument_list|(
name|ret
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Create a request to grant user global permissions.    *    * @param username the short user name who to grant permissions    * @param actions the permissions to be granted    * @return A {@link AccessControlProtos} GrantRequest    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|GrantRequest
name|buildGrantRequest
parameter_list|(
name|String
name|username
parameter_list|,
name|boolean
name|mergeExistingPermissions
parameter_list|,
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
block|{
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Builder
name|ret
init|=
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|GlobalPermission
operator|.
name|Builder
name|permissionBuilder
init|=
name|AccessControlProtos
operator|.
name|GlobalPermission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permissionBuilder
operator|.
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Global
argument_list|)
operator|.
name|setGlobalPermission
argument_list|(
name|permissionBuilder
argument_list|)
expr_stmt|;
return|return
name|AccessControlProtos
operator|.
name|GrantRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUserPermission
argument_list|(
name|AccessControlProtos
operator|.
name|UserPermission
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUser
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|username
argument_list|)
argument_list|)
operator|.
name|setPermission
argument_list|(
name|ret
argument_list|)
argument_list|)
operator|.
name|setMergeExistingPermissions
argument_list|(
name|mergeExistingPermissions
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|toUsersAndPermissions
parameter_list|(
name|String
name|user
parameter_list|,
name|Permission
name|perms
parameter_list|)
block|{
return|return
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|newBuilder
argument_list|()
operator|.
name|addUserPermissions
argument_list|(
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUser
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|user
argument_list|)
argument_list|)
operator|.
name|addPermissions
argument_list|(
name|toPermission
argument_list|(
name|perms
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|toUsersAndPermissions
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|perms
parameter_list|)
block|{
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Permission
argument_list|>
argument_list|>
name|entry
range|:
name|perms
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
operator|.
name|Builder
name|userPermBuilder
init|=
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|userPermBuilder
operator|.
name|setUser
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Permission
name|perm
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|userPermBuilder
operator|.
name|addPermissions
argument_list|(
name|toPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addUserPermissions
argument_list|(
name|userPermBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|toUsersAndPermissions
parameter_list|(
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|proto
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|result
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
name|userPerms
range|:
name|proto
operator|.
name|getUserPermissionsList
argument_list|()
control|)
block|{
name|String
name|user
init|=
name|userPerms
operator|.
name|getUser
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|Permission
name|perm
range|:
name|userPerms
operator|.
name|getPermissionsList
argument_list|()
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|toPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Converts a TablePermission proto to a client TablePermission object.    * @param proto the protobuf TablePermission    * @return the converted TablePermission    */
specifier|public
specifier|static
name|TablePermission
name|toTablePermission
parameter_list|(
name|AccessControlProtos
operator|.
name|TablePermission
name|proto
parameter_list|)
block|{
name|Permission
operator|.
name|Action
index|[]
name|actions
init|=
name|toPermissionActions
argument_list|(
name|proto
operator|.
name|getActionList
argument_list|()
argument_list|)
decl_stmt|;
name|TableName
name|table
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|family
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|proto
operator|.
name|hasTableName
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"TableName cannot be empty"
argument_list|)
throw|;
block|}
name|table
operator|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|proto
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasFamily
argument_list|()
condition|)
block|{
name|family
operator|=
name|proto
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasQualifier
argument_list|()
condition|)
block|{
name|qualifier
operator|=
name|proto
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|TablePermission
argument_list|(
name|table
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|actions
argument_list|)
return|;
block|}
comment|/**    * Converts a Permission proto to a client Permission object.    * @param proto the protobuf Permission    * @return the converted Permission    */
specifier|public
specifier|static
name|Permission
name|toPermission
parameter_list|(
name|AccessControlProtos
operator|.
name|Permission
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|.
name|getType
argument_list|()
operator|==
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Global
condition|)
block|{
name|AccessControlProtos
operator|.
name|GlobalPermission
name|perm
init|=
name|proto
operator|.
name|getGlobalPermission
argument_list|()
decl_stmt|;
name|Permission
operator|.
name|Action
index|[]
name|actions
init|=
name|toPermissionActions
argument_list|(
name|perm
operator|.
name|getActionList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Permission
operator|.
name|newBuilder
argument_list|()
operator|.
name|withActions
argument_list|(
name|actions
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
name|proto
operator|.
name|getType
argument_list|()
operator|==
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Namespace
condition|)
block|{
name|AccessControlProtos
operator|.
name|NamespacePermission
name|perm
init|=
name|proto
operator|.
name|getNamespacePermission
argument_list|()
decl_stmt|;
name|Permission
operator|.
name|Action
index|[]
name|actions
init|=
name|toPermissionActions
argument_list|(
name|perm
operator|.
name|getActionList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proto
operator|.
name|hasNamespacePermission
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Namespace must not be empty in NamespacePermission"
argument_list|)
throw|;
block|}
return|return
name|Permission
operator|.
name|newBuilder
argument_list|(
name|perm
operator|.
name|getNamespaceName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
operator|.
name|withActions
argument_list|(
name|actions
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
name|proto
operator|.
name|getType
argument_list|()
operator|==
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Table
condition|)
block|{
name|AccessControlProtos
operator|.
name|TablePermission
name|perm
init|=
name|proto
operator|.
name|getTablePermission
argument_list|()
decl_stmt|;
name|Permission
operator|.
name|Action
index|[]
name|actions
init|=
name|toPermissionActions
argument_list|(
name|perm
operator|.
name|getActionList
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|family
init|=
literal|null
decl_stmt|;
name|TableName
name|table
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|perm
operator|.
name|hasTableName
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"TableName cannot be empty"
argument_list|)
throw|;
block|}
name|table
operator|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|perm
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|perm
operator|.
name|hasFamily
argument_list|()
condition|)
block|{
name|family
operator|=
name|perm
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|perm
operator|.
name|hasQualifier
argument_list|()
condition|)
block|{
name|qualifier
operator|=
name|perm
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
return|return
name|Permission
operator|.
name|newBuilder
argument_list|(
name|table
argument_list|)
operator|.
name|withFamily
argument_list|(
name|family
argument_list|)
operator|.
name|withQualifier
argument_list|(
name|qualifier
argument_list|)
operator|.
name|withActions
argument_list|(
name|actions
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unrecognize Perm Type: "
operator|+
name|proto
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Convert a client Permission to a Permission proto    *    * @param perm the client Permission    * @return the protobuf Permission    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|Permission
name|toPermission
parameter_list|(
name|Permission
name|perm
parameter_list|)
block|{
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Builder
name|ret
init|=
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|perm
operator|instanceof
name|NamespacePermission
condition|)
block|{
name|NamespacePermission
name|namespace
init|=
operator|(
name|NamespacePermission
operator|)
name|perm
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Namespace
argument_list|)
expr_stmt|;
name|AccessControlProtos
operator|.
name|NamespacePermission
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|NamespacePermission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNamespaceName
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|namespace
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Permission
operator|.
name|Action
index|[]
name|actions
init|=
name|perm
operator|.
name|getActions
argument_list|()
decl_stmt|;
if|if
condition|(
name|actions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|builder
operator|.
name|addAction
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|setNamespacePermission
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|perm
operator|instanceof
name|TablePermission
condition|)
block|{
name|TablePermission
name|table
init|=
operator|(
name|TablePermission
operator|)
name|perm
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Table
argument_list|)
expr_stmt|;
name|AccessControlProtos
operator|.
name|TablePermission
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|TablePermission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|hasFamily
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|table
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|.
name|hasQualifier
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|table
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Permission
operator|.
name|Action
index|[]
name|actions
init|=
name|perm
operator|.
name|getActions
argument_list|()
decl_stmt|;
if|if
condition|(
name|actions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|builder
operator|.
name|addAction
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|setTablePermission
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// perm instanceof GlobalPermission
name|ret
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Global
argument_list|)
expr_stmt|;
name|AccessControlProtos
operator|.
name|GlobalPermission
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|GlobalPermission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Permission
operator|.
name|Action
index|[]
name|actions
init|=
name|perm
operator|.
name|getActions
argument_list|()
decl_stmt|;
if|if
condition|(
name|actions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|builder
operator|.
name|addAction
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|setGlobalPermission
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Converts a list of Permission.Action proto to an array of client Permission.Action objects.    *    * @param protoActions the list of protobuf Actions    * @return the converted array of Actions    */
specifier|public
specifier|static
name|Permission
operator|.
name|Action
index|[]
name|toPermissionActions
parameter_list|(
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|protoActions
parameter_list|)
block|{
name|Permission
operator|.
name|Action
index|[]
name|actions
init|=
operator|new
name|Permission
operator|.
name|Action
index|[
name|protoActions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|protoActions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|actions
index|[
name|i
index|]
operator|=
name|toPermissionAction
argument_list|(
name|protoActions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|actions
return|;
block|}
comment|/**    * Converts a Permission.Action proto to a client Permission.Action object.    *    * @param action the protobuf Action    * @return the converted Action    */
specifier|public
specifier|static
name|Permission
operator|.
name|Action
name|toPermissionAction
parameter_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|READ
case|:
return|return
name|Permission
operator|.
name|Action
operator|.
name|READ
return|;
case|case
name|WRITE
case|:
return|return
name|Permission
operator|.
name|Action
operator|.
name|WRITE
return|;
case|case
name|EXEC
case|:
return|return
name|Permission
operator|.
name|Action
operator|.
name|EXEC
return|;
case|case
name|CREATE
case|:
return|return
name|Permission
operator|.
name|Action
operator|.
name|CREATE
return|;
case|case
name|ADMIN
case|:
return|return
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown action value "
operator|+
name|action
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Convert a client Permission.Action to a Permission.Action proto    *    * @param action the client Action    * @return the protobuf Action    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
name|toPermissionAction
parameter_list|(
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|READ
case|:
return|return
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
operator|.
name|READ
return|;
case|case
name|WRITE
case|:
return|return
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
operator|.
name|WRITE
return|;
case|case
name|EXEC
case|:
return|return
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
operator|.
name|EXEC
return|;
case|case
name|CREATE
case|:
return|return
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
operator|.
name|CREATE
return|;
case|case
name|ADMIN
case|:
return|return
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown action value "
operator|+
name|action
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Convert a client user permission to a user permission proto    *    * @param perm the client UserPermission    * @return the protobuf UserPermission    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|UserPermission
name|toUserPermission
parameter_list|(
name|UserPermission
name|perm
parameter_list|)
block|{
return|return
name|AccessControlProtos
operator|.
name|UserPermission
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUser
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|perm
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setPermission
argument_list|(
name|toPermission
argument_list|(
name|perm
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Converts the permissions list into a protocol buffer GetUserPermissionsResponse    */
specifier|public
specifier|static
name|GetUserPermissionsResponse
name|buildGetUserPermissionsResponse
parameter_list|(
specifier|final
name|List
argument_list|<
name|UserPermission
argument_list|>
name|permissions
parameter_list|)
block|{
name|GetUserPermissionsResponse
operator|.
name|Builder
name|builder
init|=
name|GetUserPermissionsResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|UserPermission
name|perm
range|:
name|permissions
control|)
block|{
name|builder
operator|.
name|addUserPermission
argument_list|(
name|toUserPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Converts a user permission proto to a client user permission object.    *    * @param proto the protobuf UserPermission    * @return the converted UserPermission    */
specifier|public
specifier|static
name|UserPermission
name|toUserPermission
parameter_list|(
name|AccessControlProtos
operator|.
name|UserPermission
name|proto
parameter_list|)
block|{
return|return
operator|new
name|UserPermission
argument_list|(
name|proto
operator|.
name|getUser
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|,
name|toPermission
argument_list|(
name|proto
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convert a ListMultimap&lt;String, TablePermission&gt; where key is username    * to a protobuf UserPermission    *    * @param perm the list of user and table permissions    * @return the protobuf UserTablePermissions    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|toUserTablePermissions
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
name|perm
parameter_list|)
block|{
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|UserPermission
argument_list|>
argument_list|>
name|entry
range|:
name|perm
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
operator|.
name|Builder
name|userPermBuilder
init|=
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|userPermBuilder
operator|.
name|setUser
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|UserPermission
name|userPerm
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|userPermBuilder
operator|.
name|addPermissions
argument_list|(
name|toPermission
argument_list|(
name|userPerm
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addUserPermissions
argument_list|(
name|userPermBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * A utility used to grant a user global permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @param userShortName the short name of the user to grant permissions    * @param actions the permissions to be granted    * @throws ServiceException    * @deprecated Use {@link Admin#grant(UserPermission, boolean)} instead.    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|void
name|grant
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|boolean
name|mergeExistingPermissions
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|GrantRequest
name|request
init|=
name|buildGrantRequest
argument_list|(
name|userShortName
argument_list|,
name|mergeExistingPermissions
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|grant
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to grant a user table permissions. The permissions will    * be for a table table/column family/qualifier.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @param userShortName the short name of the user to grant permissions    * @param tableName optional table name    * @param f optional column family    * @param q optional qualifier    * @param actions the permissions to be granted    * @throws ServiceException    * @deprecated Use {@link Admin#grant(UserPermission, boolean)} instead.    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|void
name|grant
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|f
parameter_list|,
name|byte
index|[]
name|q
parameter_list|,
name|boolean
name|mergeExistingPermissions
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|GrantRequest
name|request
init|=
name|buildGrantRequest
argument_list|(
name|userShortName
argument_list|,
name|tableName
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
name|mergeExistingPermissions
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|grant
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to grant a user namespace permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param controller RpcController    * @param protocol the AccessControlService protocol proxy    * @param namespace the short name of the user to grant permissions    * @param actions the permissions to be granted    * @throws ServiceException    * @deprecated Use {@link Admin#grant(UserPermission, boolean)} instead.    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|void
name|grant
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|String
name|namespace
parameter_list|,
name|boolean
name|mergeExistingPermissions
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|GrantRequest
name|request
init|=
name|buildGrantRequest
argument_list|(
name|userShortName
argument_list|,
name|namespace
argument_list|,
name|mergeExistingPermissions
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|grant
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to revoke a user's global permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param controller RpcController    * @param protocol the AccessControlService protocol proxy    * @param userShortName the short name of the user to revoke permissions    * @param actions the permissions to be revoked    * @throws ServiceException on failure    * @deprecated Use {@link Admin#revoke(UserPermission)} instead.    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|void
name|revoke
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|RevokeRequest
name|request
init|=
name|buildRevokeRequest
argument_list|(
name|userShortName
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|revoke
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to revoke a user's table permissions. The permissions will    * be for a table/column family/qualifier.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param controller RpcController    * @param protocol the AccessControlService protocol proxy    * @param userShortName the short name of the user to revoke permissions    * @param tableName optional table name    * @param f optional column family    * @param q optional qualifier    * @param actions the permissions to be revoked    * @throws ServiceException on failure    * @deprecated Use {@link Admin#revoke(UserPermission)} instead.    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|void
name|revoke
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|f
parameter_list|,
name|byte
index|[]
name|q
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|RevokeRequest
name|request
init|=
name|buildRevokeRequest
argument_list|(
name|userShortName
argument_list|,
name|tableName
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|revoke
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to revoke a user's namespace permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param controller RpcController    * @param protocol the AccessControlService protocol proxy    * @param userShortName the short name of the user to revoke permissions    * @param namespace optional table name    * @param actions the permissions to be revoked    * @throws ServiceException on failure    * @deprecated Use {@link Admin#revoke(UserPermission)} instead.    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|void
name|revoke
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|RevokeRequest
name|request
init|=
name|buildRevokeRequest
argument_list|(
name|userShortName
argument_list|,
name|namespace
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|revoke
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to get user's global permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param controller RpcController    * @param protocol the AccessControlService protocol proxy    * @throws ServiceException on failure    */
specifier|public
specifier|static
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserPermissions
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|getUserPermissions
argument_list|(
name|controller
argument_list|,
name|protocol
argument_list|,
name|HConstants
operator|.
name|EMPTY_STRING
argument_list|)
return|;
block|}
comment|/**    * A utility used to get user's global permissions based on the specified user name.    * @param controller RpcController    * @param protocol the AccessControlService protocol proxy    * @param userName User name, if empty then all user permissions will be retrieved.    * @throws ServiceException    */
specifier|public
specifier|static
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserPermissions
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|ServiceException
block|{
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Global
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|userName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setUserName
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|GetUserPermissionsResponse
name|response
init|=
name|protocol
operator|.
name|getUserPermissions
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|response
operator|.
name|getUserPermissionCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|UserPermission
name|perm
range|:
name|response
operator|.
name|getUserPermissionList
argument_list|()
control|)
block|{
name|perms
operator|.
name|add
argument_list|(
name|toUserPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|perms
return|;
block|}
comment|/**    * A utility used to get user table permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param controller RpcController    * @param protocol the AccessControlService protocol proxy    * @param t optional table name    * @throws ServiceException    */
specifier|public
specifier|static
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserPermissions
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|TableName
name|t
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|getUserPermissions
argument_list|(
name|controller
argument_list|,
name|protocol
argument_list|,
name|t
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|HConstants
operator|.
name|EMPTY_STRING
argument_list|)
return|;
block|}
comment|/**    * A utility used to get user table permissions based on the column family, column qualifier and    * user name.    * @param controller RpcController    * @param protocol the AccessControlService protocol proxy    * @param t optional table name    * @param columnFamily Column family    * @param columnQualifier Column qualifier    * @param userName User name, if empty then all user permissions will be retrieved.    * @throws ServiceException    */
specifier|public
specifier|static
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserPermissions
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|TableName
name|t
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|,
name|byte
index|[]
name|columnQualifier
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|ServiceException
block|{
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Bytes
operator|.
name|len
argument_list|(
name|columnFamily
argument_list|)
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|setColumnFamily
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|columnFamily
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Bytes
operator|.
name|len
argument_list|(
name|columnQualifier
argument_list|)
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|setColumnQualifier
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|columnQualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|userName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setUserName
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Table
argument_list|)
expr_stmt|;
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|GetUserPermissionsResponse
name|response
init|=
name|protocol
operator|.
name|getUserPermissions
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|response
operator|.
name|getUserPermissionCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|UserPermission
name|perm
range|:
name|response
operator|.
name|getUserPermissionList
argument_list|()
control|)
block|{
name|perms
operator|.
name|add
argument_list|(
name|toUserPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|perms
return|;
block|}
comment|/**    * A utility used to get permissions for selected namespace.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param controller RpcController    * @param protocol the AccessControlService protocol proxy    * @param namespace name of the namespace    * @throws ServiceException    */
specifier|public
specifier|static
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserPermissions
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|byte
index|[]
name|namespace
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|getUserPermissions
argument_list|(
name|controller
argument_list|,
name|protocol
argument_list|,
name|namespace
argument_list|,
name|HConstants
operator|.
name|EMPTY_STRING
argument_list|)
return|;
block|}
comment|/**    * A utility used to get permissions for selected namespace based on the specified user name.    * @param controller RpcController    * @param protocol the AccessControlService protocol proxy    * @param namespace name of the namespace    * @param userName User name, if empty then all user permissions will be retrieved.    * @throws ServiceException    */
specifier|public
specifier|static
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserPermissions
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|byte
index|[]
name|namespace
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|ServiceException
block|{
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setNamespaceName
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|namespace
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|userName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setUserName
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Namespace
argument_list|)
expr_stmt|;
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|GetUserPermissionsResponse
name|response
init|=
name|protocol
operator|.
name|getUserPermissions
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|response
operator|.
name|getUserPermissionCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|UserPermission
name|perm
range|:
name|response
operator|.
name|getUserPermissionList
argument_list|()
control|)
block|{
name|perms
operator|.
name|add
argument_list|(
name|toUserPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|perms
return|;
block|}
comment|/**    * Validates whether specified user has permission to perform actions on the mentioned table,    * column family or column qualifier.    * @param controller RpcController    * @param protocol the AccessControlService protocol proxy    * @param tableName Table name, it shouldn't be null or empty.    * @param columnFamily The column family. Optional argument, can be empty. If empty then    *          validation will happen at table level.    * @param columnQualifier The column qualifier. Optional argument, can be empty. If empty then    *          validation will happen at table and column family level. columnQualifier will not be    *          considered if columnFamily is passed as null or empty.    * @param userName User name, it shouldn't be null or empty.    * @param actions Actions    * @return true if access allowed, otherwise false    * @throws ServiceException    */
specifier|public
specifier|static
name|boolean
name|hasPermission
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|,
name|byte
index|[]
name|columnQualifier
parameter_list|,
name|String
name|userName
parameter_list|,
name|Permission
operator|.
name|Action
index|[]
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|AccessControlProtos
operator|.
name|TablePermission
operator|.
name|Builder
name|tablePermissionBuilder
init|=
name|AccessControlProtos
operator|.
name|TablePermission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|tablePermissionBuilder
operator|.
name|setTableName
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|len
argument_list|(
name|columnFamily
argument_list|)
operator|>
literal|0
condition|)
block|{
name|tablePermissionBuilder
operator|.
name|setFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|columnFamily
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Bytes
operator|.
name|len
argument_list|(
name|columnQualifier
argument_list|)
operator|>
literal|0
condition|)
block|{
name|tablePermissionBuilder
operator|.
name|setQualifier
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|columnQualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|tablePermissionBuilder
operator|.
name|addAction
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|HasPermissionRequest
name|request
init|=
name|AccessControlProtos
operator|.
name|HasPermissionRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTablePermission
argument_list|(
name|tablePermissionBuilder
argument_list|)
operator|.
name|setUserName
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|userName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|HasPermissionResponse
name|response
init|=
name|protocol
operator|.
name|hasPermission
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getHasPermission
argument_list|()
return|;
block|}
comment|/**    * Convert a protobuf UserTablePermissions to a ListMultimap&lt;Username, UserPermission&gt    * @param proto the proto UsersAndPermissions    * @return a ListMultimap with user and its permissions    */
specifier|public
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
name|toUserPermission
parameter_list|(
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|proto
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|UserPermission
argument_list|>
name|userPermission
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
name|userPerm
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proto
operator|.
name|getUserPermissionsCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|userPerm
operator|=
name|proto
operator|.
name|getUserPermissions
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|String
name|username
init|=
name|userPerm
operator|.
name|getUser
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|userPerm
operator|.
name|getPermissionsCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|userPermission
operator|.
name|put
argument_list|(
name|username
argument_list|,
operator|new
name|UserPermission
argument_list|(
name|username
argument_list|,
name|toPermission
argument_list|(
name|userPerm
operator|.
name|getPermissions
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|userPermission
return|;
block|}
comment|/**    * Convert a protobuf UserTablePermissions to a ListMultimap&lt;Username, Permission&gt    * @param proto the proto UsersAndPermissions    * @return a ListMultimap with user and its permissions    */
specifier|public
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|toPermission
parameter_list|(
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|proto
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|perms
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
name|userPerm
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proto
operator|.
name|getUserPermissionsCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|userPerm
operator|=
name|proto
operator|.
name|getUserPermissions
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|String
name|username
init|=
name|userPerm
operator|.
name|getUser
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|userPerm
operator|.
name|getPermissionsCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|perms
operator|.
name|put
argument_list|(
name|username
argument_list|,
name|toPermission
argument_list|(
name|userPerm
operator|.
name|getPermissions
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|perms
return|;
block|}
comment|/**    * Create a request to revoke user table permissions.    *    * @param username the short user name whose permissions to be revoked    * @param tableName optional table name the permissions apply    * @param family optional column family    * @param qualifier optional qualifier    * @param actions the permissions to be revoked    * @return A {@link AccessControlProtos} RevokeRequest    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|RevokeRequest
name|buildRevokeRequest
parameter_list|(
name|String
name|username
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
block|{
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Builder
name|ret
init|=
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|TablePermission
operator|.
name|Builder
name|permissionBuilder
init|=
name|AccessControlProtos
operator|.
name|TablePermission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permissionBuilder
operator|.
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tableName
operator|!=
literal|null
condition|)
block|{
name|permissionBuilder
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|family
operator|!=
literal|null
condition|)
block|{
name|permissionBuilder
operator|.
name|setFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qualifier
operator|!=
literal|null
condition|)
block|{
name|permissionBuilder
operator|.
name|setQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Table
argument_list|)
operator|.
name|setTablePermission
argument_list|(
name|permissionBuilder
argument_list|)
expr_stmt|;
return|return
name|AccessControlProtos
operator|.
name|RevokeRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUserPermission
argument_list|(
name|AccessControlProtos
operator|.
name|UserPermission
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUser
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|username
argument_list|)
argument_list|)
operator|.
name|setPermission
argument_list|(
name|ret
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

