begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperNodeTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * ReplicationStateImpl is responsible for maintaining the replication state  * znode.  */
end_comment

begin_class
specifier|public
class|class
name|ReplicationStateImpl
extends|extends
name|ReplicationStateZKBase
implements|implements
name|ReplicationStateInterface
block|{
specifier|private
specifier|final
name|ReplicationStateTracker
name|stateTracker
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|replicating
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationStateImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ReplicationStateImpl
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zk
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Abortable
name|abortable
parameter_list|,
specifier|final
name|AtomicBoolean
name|replicating
parameter_list|)
block|{
name|super
argument_list|(
name|zk
argument_list|,
name|conf
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicating
operator|=
name|replicating
expr_stmt|;
comment|// Set a tracker on replicationStateNode
name|this
operator|.
name|stateTracker
operator|=
operator|new
name|ReplicationStateTracker
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|stateZNode
argument_list|,
name|this
operator|.
name|abortable
argument_list|)
expr_stmt|;
name|stateTracker
operator|.
name|start
argument_list|()
expr_stmt|;
name|readReplicationStateZnode
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ReplicationStateImpl
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zk
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Abortable
name|abortable
parameter_list|)
block|{
name|this
argument_list|(
name|zk
argument_list|,
name|conf
argument_list|,
name|abortable
argument_list|,
operator|new
name|AtomicBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getState
parameter_list|()
throws|throws
name|KeeperException
block|{
return|return
name|getReplication
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setState
parameter_list|(
name|boolean
name|newState
parameter_list|)
throws|throws
name|KeeperException
block|{
name|setReplicating
argument_list|(
name|newState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|stateTracker
operator|!=
literal|null
condition|)
name|stateTracker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param bytes    * @return True if the passed in<code>bytes</code> are those of a pb    *         serialized ENABLED state.    * @throws DeserializationException    */
specifier|private
name|boolean
name|isStateEnabled
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|State
name|state
init|=
name|parseStateFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
return|return
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|State
operator|.
name|ENABLED
operator|==
name|state
return|;
block|}
comment|/**    * @param bytes Content of a state znode.    * @return State parsed from the passed bytes.    * @throws DeserializationException    */
specifier|private
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|State
name|parseStateFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
name|ProtobufUtil
operator|.
name|expectPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|int
name|pblen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|Builder
name|builder
init|=
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|ReplicationState
name|state
decl_stmt|;
try|try
block|{
name|state
operator|=
name|builder
operator|.
name|mergeFrom
argument_list|(
name|bytes
argument_list|,
name|pblen
argument_list|,
name|bytes
operator|.
name|length
operator|-
name|pblen
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|state
operator|.
name|getState
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Set the new replication state for this cluster    * @param newState    */
specifier|private
name|void
name|setReplicating
parameter_list|(
name|boolean
name|newState
parameter_list|)
throws|throws
name|KeeperException
block|{
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|stateZNode
argument_list|)
expr_stmt|;
name|byte
index|[]
name|stateBytes
init|=
operator|(
name|newState
operator|==
literal|true
operator|)
condition|?
name|ReplicationZookeeper
operator|.
name|ENABLED_ZNODE_BYTES
else|:
name|ReplicationZookeeper
operator|.
name|DISABLED_ZNODE_BYTES
decl_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|stateZNode
argument_list|,
name|stateBytes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the replication status of this cluster. If the state znode doesn't    * exist it will also create it and set it true.    * @return returns true when it's enabled, else false    * @throws KeeperException    */
specifier|private
name|boolean
name|getReplication
parameter_list|()
throws|throws
name|KeeperException
block|{
name|byte
index|[]
name|data
init|=
name|this
operator|.
name|stateTracker
operator|.
name|getData
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|setReplicating
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
try|try
block|{
return|return
name|isStateEnabled
argument_list|(
name|data
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
name|ZKUtil
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * This reads the state znode for replication and sets the atomic boolean    */
specifier|private
name|void
name|readReplicationStateZnode
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|replicating
operator|.
name|set
argument_list|(
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Replication is now "
operator|+
operator|(
name|this
operator|.
name|replicating
operator|.
name|get
argument_list|()
condition|?
literal|"started"
else|:
literal|"stopped"
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Failed getting data on from "
operator|+
name|this
operator|.
name|stateZNode
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tracker for status of the replication    */
specifier|private
class|class
name|ReplicationStateTracker
extends|extends
name|ZooKeeperNodeTracker
block|{
specifier|public
name|ReplicationStateTracker
parameter_list|(
name|ZooKeeperWatcher
name|watcher
parameter_list|,
name|String
name|stateZnode
parameter_list|,
name|Abortable
name|abortable
parameter_list|)
block|{
name|super
argument_list|(
name|watcher
argument_list|,
name|stateZnode
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|nodeDataChanged
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|super
operator|.
name|nodeDataChanged
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|readReplicationStateZnode
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

