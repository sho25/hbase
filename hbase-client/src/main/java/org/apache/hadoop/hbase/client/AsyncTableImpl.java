begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|checkHasFamilies
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncRpcRetryingCallerFactory
operator|.
name|SingleRequestCallerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutateResponse
import|;
end_import

begin_comment
comment|/**  * The implementation of AsyncTable.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|AsyncTableImpl
implements|implements
name|AsyncTable
block|{
specifier|private
specifier|final
name|AsyncConnectionImpl
name|conn
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|private
name|long
name|readRpcTimeoutNs
decl_stmt|;
specifier|private
name|long
name|writeRpcTimeoutNs
decl_stmt|;
specifier|private
name|long
name|operationTimeoutNs
decl_stmt|;
specifier|public
name|AsyncTableImpl
parameter_list|(
name|AsyncConnectionImpl
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|readRpcTimeoutNs
operator|=
name|conn
operator|.
name|connConf
operator|.
name|getReadRpcTimeoutNs
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeRpcTimeoutNs
operator|=
name|conn
operator|.
name|connConf
operator|.
name|getWriteRpcTimeoutNs
argument_list|()
expr_stmt|;
name|this
operator|.
name|operationTimeoutNs
operator|=
name|tableName
operator|.
name|isSystemTable
argument_list|()
condition|?
name|conn
operator|.
name|connConf
operator|.
name|getMetaOperationTimeoutNs
argument_list|()
else|:
name|conn
operator|.
name|connConf
operator|.
name|getOperationTimeoutNs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conn
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|Converter
parameter_list|<
name|D
parameter_list|,
name|I
parameter_list|,
name|S
parameter_list|>
block|{
name|D
name|convert
parameter_list|(
name|I
name|info
parameter_list|,
name|S
name|src
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|RpcCall
parameter_list|<
name|RESP
parameter_list|,
name|REQ
parameter_list|>
block|{
name|void
name|call
parameter_list|(
name|ClientService
operator|.
name|Interface
name|stub
parameter_list|,
name|HBaseRpcController
name|controller
parameter_list|,
name|REQ
name|req
parameter_list|,
name|RpcCallback
argument_list|<
name|RESP
argument_list|>
name|done
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
parameter_list|<
name|REQ
parameter_list|,
name|PREQ
parameter_list|,
name|PRESP
parameter_list|,
name|RESP
parameter_list|>
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|call
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|ClientService
operator|.
name|Interface
name|stub
parameter_list|,
name|REQ
name|req
parameter_list|,
name|Converter
argument_list|<
name|PREQ
argument_list|,
name|byte
index|[]
argument_list|,
name|REQ
argument_list|>
name|reqConvert
parameter_list|,
name|RpcCall
argument_list|<
name|PRESP
argument_list|,
name|PREQ
argument_list|>
name|rpcCall
parameter_list|,
name|Converter
argument_list|<
name|RESP
argument_list|,
name|HBaseRpcController
argument_list|,
name|PRESP
argument_list|>
name|respConverter
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|rpcCall
operator|.
name|call
argument_list|(
name|stub
argument_list|,
name|controller
argument_list|,
name|reqConvert
operator|.
name|convert
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|req
argument_list|)
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|PRESP
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|PRESP
name|resp
parameter_list|)
block|{
if|if
condition|(
name|controller
operator|.
name|failed
argument_list|()
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|controller
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|future
operator|.
name|complete
argument_list|(
name|respConverter
operator|.
name|convert
argument_list|(
name|controller
argument_list|,
name|resp
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|future
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|REQ
parameter_list|,
name|RESP
parameter_list|>
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|mutate
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|ClientService
operator|.
name|Interface
name|stub
parameter_list|,
name|REQ
name|req
parameter_list|,
name|Converter
argument_list|<
name|MutateRequest
argument_list|,
name|byte
index|[]
argument_list|,
name|REQ
argument_list|>
name|reqConvert
parameter_list|,
name|Converter
argument_list|<
name|RESP
argument_list|,
name|HBaseRpcController
argument_list|,
name|MutateResponse
argument_list|>
name|respConverter
parameter_list|)
block|{
return|return
name|call
argument_list|(
name|controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|req
argument_list|,
name|reqConvert
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|r
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|mutate
argument_list|(
name|c
argument_list|,
name|r
argument_list|,
name|done
argument_list|)
argument_list|,
name|respConverter
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|REQ
parameter_list|>
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|voidMutate
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|ClientService
operator|.
name|Interface
name|stub
parameter_list|,
name|REQ
name|req
parameter_list|,
name|Converter
argument_list|<
name|MutateRequest
argument_list|,
name|byte
index|[]
argument_list|,
name|REQ
argument_list|>
name|reqConvert
parameter_list|)
block|{
return|return
name|mutate
argument_list|(
name|controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|req
argument_list|,
name|reqConvert
argument_list|,
parameter_list|(
name|c
parameter_list|,
name|resp
parameter_list|)
lambda|->
block|{
return|return
literal|null
return|;
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Result
name|toResult
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|,
name|MutateResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|resp
operator|.
name|hasResult
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|resp
operator|.
name|getResult
argument_list|()
argument_list|,
name|controller
operator|.
name|cellScanner
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|NoncedConverter
parameter_list|<
name|D
parameter_list|,
name|I
parameter_list|,
name|S
parameter_list|>
block|{
name|D
name|convert
parameter_list|(
name|I
name|info
parameter_list|,
name|S
name|src
parameter_list|,
name|long
name|nonceGroup
parameter_list|,
name|long
name|nonce
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
parameter_list|<
name|REQ
parameter_list|,
name|RESP
parameter_list|>
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|noncedMutate
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|ClientService
operator|.
name|Interface
name|stub
parameter_list|,
name|REQ
name|req
parameter_list|,
name|NoncedConverter
argument_list|<
name|MutateRequest
argument_list|,
name|byte
index|[]
argument_list|,
name|REQ
argument_list|>
name|reqConvert
parameter_list|,
name|Converter
argument_list|<
name|RESP
argument_list|,
name|HBaseRpcController
argument_list|,
name|MutateResponse
argument_list|>
name|respConverter
parameter_list|)
block|{
name|long
name|nonceGroup
init|=
name|conn
operator|.
name|getNonceGenerator
argument_list|()
operator|.
name|getNonceGroup
argument_list|()
decl_stmt|;
name|long
name|nonce
init|=
name|conn
operator|.
name|getNonceGenerator
argument_list|()
operator|.
name|newNonce
argument_list|()
decl_stmt|;
return|return
name|mutate
argument_list|(
name|controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|req
argument_list|,
parameter_list|(
name|info
parameter_list|,
name|src
parameter_list|)
lambda|->
name|reqConvert
operator|.
name|convert
argument_list|(
name|info
argument_list|,
name|src
argument_list|,
name|nonceGroup
argument_list|,
name|nonce
argument_list|)
argument_list|,
name|respConverter
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|SingleRequestCallerBuilder
argument_list|<
name|T
argument_list|>
name|newCaller
parameter_list|(
name|Row
name|row
parameter_list|,
name|long
name|rpcTimeoutNs
parameter_list|)
block|{
return|return
name|conn
operator|.
name|callerFactory
operator|.
expr|<
name|T
operator|>
name|single
argument_list|()
operator|.
name|table
argument_list|(
name|tableName
argument_list|)
operator|.
name|row
argument_list|(
name|row
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|rpcTimeout
argument_list|(
name|rpcTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|operationTimeout
argument_list|(
name|operationTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Result
argument_list|>
name|get
parameter_list|(
name|Get
name|get
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Result
operator|>
name|newCaller
argument_list|(
name|get
argument_list|,
name|readRpcTimeoutNs
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|loc
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|AsyncTableImpl
operator|.
block|<Get
argument_list|,
name|GetRequest
argument_list|,
name|GetResponse
argument_list|,
name|Result
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|get
argument_list|,
name|RequestConverter
operator|::
name|buildGetRequest
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|get
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|c
parameter_list|,
name|resp
parameter_list|)
lambda|->
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|resp
operator|.
name|getResult
argument_list|()
argument_list|,
name|c
operator|.
name|cellScanner
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|put
parameter_list|(
name|Put
name|put
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newCaller
argument_list|(
name|put
argument_list|,
name|writeRpcTimeoutNs
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|loc
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|AsyncTableImpl
operator|.
block|<Put> voidMutate(controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|put
argument_list|,
name|RequestConverter
operator|::
name|buildMutateRequest
argument_list|)
block|)
function|.call
parameter_list|()
function|;
block|}
end_class

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|delete
parameter_list|(
name|Delete
name|delete
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newCaller
argument_list|(
name|delete
argument_list|,
name|writeRpcTimeoutNs
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|loc
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|AsyncTableImpl
operator|.
block|<Delete> voidMutate(controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|delete
argument_list|,
name|RequestConverter
operator|::
name|buildMutateRequest
argument_list|)
block|)
function|.call
parameter_list|()
function|;
end_function

begin_function
unit|}    @
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Result
argument_list|>
name|append
parameter_list|(
name|Append
name|append
parameter_list|)
block|{
name|checkHasFamilies
argument_list|(
name|append
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
expr|<
name|Result
operator|>
name|newCaller
argument_list|(
name|append
argument_list|,
name|writeRpcTimeoutNs
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|loc
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<Append
argument_list|,
name|Result
operator|>
name|noncedMutate
argument_list|(
name|controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|append
argument_list|,
name|RequestConverter
operator|::
name|buildMutateRequest
argument_list|,
name|AsyncTableImpl
operator|::
name|toResult
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Result
argument_list|>
name|increment
parameter_list|(
name|Increment
name|increment
parameter_list|)
block|{
name|checkHasFamilies
argument_list|(
name|increment
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
expr|<
name|Result
operator|>
name|newCaller
argument_list|(
name|increment
argument_list|,
name|writeRpcTimeoutNs
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|loc
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<Increment
argument_list|,
name|Result
operator|>
name|noncedMutate
argument_list|(
name|controller
argument_list|,
name|loc
argument_list|,
name|stub
argument_list|,
name|increment
argument_list|,
name|RequestConverter
operator|::
name|buildMutateRequest
argument_list|,
name|AsyncTableImpl
operator|::
name|toResult
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setReadRpcTimeout
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|this
operator|.
name|readRpcTimeoutNs
operator|=
name|unit
operator|.
name|toNanos
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|long
name|getReadRpcTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|unit
operator|.
name|convert
argument_list|(
name|readRpcTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setWriteRpcTimeout
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|this
operator|.
name|writeRpcTimeoutNs
operator|=
name|unit
operator|.
name|toNanos
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|long
name|getWriteRpcTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|unit
operator|.
name|convert
argument_list|(
name|writeRpcTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setOperationTimeout
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|this
operator|.
name|operationTimeoutNs
operator|=
name|unit
operator|.
name|toNanos
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|long
name|getOperationTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|unit
operator|.
name|convert
argument_list|(
name|operationTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

