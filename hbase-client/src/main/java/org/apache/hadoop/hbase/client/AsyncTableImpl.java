begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompareOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|TimeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Just a wrapper of {@link RawAsyncTableImpl}. The difference is that users need to provide a  * thread pool when constructing this class, and the callback methods registered to the returned  * {@link CompletableFuture} will be executed in this thread pool. So usually it is safe for users  * to do anything they want in the callbacks without breaking the rpc framework.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|AsyncTableImpl
implements|implements
name|AsyncTable
argument_list|<
name|ScanResultConsumer
argument_list|>
block|{
specifier|private
specifier|final
name|AsyncTable
argument_list|<
name|AdvancedScanResultConsumer
argument_list|>
name|rawTable
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|pool
decl_stmt|;
name|AsyncTableImpl
parameter_list|(
name|AsyncConnectionImpl
name|conn
parameter_list|,
name|AsyncTable
argument_list|<
name|AdvancedScanResultConsumer
argument_list|>
name|rawTable
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
block|{
name|this
operator|.
name|rawTable
operator|=
name|rawTable
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getName
parameter_list|()
block|{
return|return
name|rawTable
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|rawTable
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|TableDescriptor
argument_list|>
name|getDescriptor
parameter_list|()
block|{
return|return
name|wrap
argument_list|(
name|rawTable
operator|.
name|getDescriptor
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AsyncTableRegionLocator
name|getRegionLocator
parameter_list|()
block|{
return|return
name|rawTable
operator|.
name|getRegionLocator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRpcTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|rawTable
operator|.
name|getRpcTimeout
argument_list|(
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getReadRpcTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|rawTable
operator|.
name|getReadRpcTimeout
argument_list|(
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getWriteRpcTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|rawTable
operator|.
name|getWriteRpcTimeout
argument_list|(
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getOperationTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|rawTable
operator|.
name|getOperationTimeout
argument_list|(
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getScanTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|rawTable
operator|.
name|getScanTimeout
argument_list|(
name|unit
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|wrap
parameter_list|(
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|future
parameter_list|)
block|{
return|return
name|FutureUtils
operator|.
name|wrapFuture
argument_list|(
name|future
argument_list|,
name|pool
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Result
argument_list|>
name|get
parameter_list|(
name|Get
name|get
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|rawTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|put
parameter_list|(
name|Put
name|put
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|rawTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|delete
parameter_list|(
name|Delete
name|delete
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|rawTable
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Result
argument_list|>
name|append
parameter_list|(
name|Append
name|append
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|rawTable
operator|.
name|append
argument_list|(
name|append
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Result
argument_list|>
name|increment
parameter_list|(
name|Increment
name|increment
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|rawTable
operator|.
name|increment
argument_list|(
name|increment
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CheckAndMutateBuilder
name|checkAndMutate
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|)
block|{
return|return
operator|new
name|CheckAndMutateBuilder
argument_list|()
block|{
specifier|private
specifier|final
name|CheckAndMutateBuilder
name|builder
init|=
name|rawTable
operator|.
name|checkAndMutate
argument_list|(
name|row
argument_list|,
name|family
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|thenPut
parameter_list|(
name|Put
name|put
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|builder
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|thenMutate
parameter_list|(
name|RowMutations
name|mutation
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|builder
operator|.
name|thenMutate
argument_list|(
name|mutation
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|thenDelete
parameter_list|(
name|Delete
name|delete
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|builder
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CheckAndMutateBuilder
name|qualifier
parameter_list|(
name|byte
index|[]
name|qualifier
parameter_list|)
block|{
name|builder
operator|.
name|qualifier
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|CheckAndMutateBuilder
name|timeRange
parameter_list|(
name|TimeRange
name|timeRange
parameter_list|)
block|{
name|builder
operator|.
name|timeRange
argument_list|(
name|timeRange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|CheckAndMutateBuilder
name|ifNotExists
parameter_list|()
block|{
name|builder
operator|.
name|ifNotExists
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|CheckAndMutateBuilder
name|ifMatches
parameter_list|(
name|CompareOperator
name|compareOp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|builder
operator|.
name|ifMatches
argument_list|(
name|compareOp
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|CheckAndMutateWithFilterBuilder
name|checkAndMutate
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
return|return
operator|new
name|CheckAndMutateWithFilterBuilder
argument_list|()
block|{
specifier|private
specifier|final
name|CheckAndMutateWithFilterBuilder
name|builder
init|=
name|rawTable
operator|.
name|checkAndMutate
argument_list|(
name|row
argument_list|,
name|filter
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|CheckAndMutateWithFilterBuilder
name|timeRange
parameter_list|(
name|TimeRange
name|timeRange
parameter_list|)
block|{
name|builder
operator|.
name|timeRange
argument_list|(
name|timeRange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|thenPut
parameter_list|(
name|Put
name|put
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|builder
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|thenDelete
parameter_list|(
name|Delete
name|delete
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|builder
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|thenMutate
parameter_list|(
name|RowMutations
name|mutation
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|builder
operator|.
name|thenMutate
argument_list|(
name|mutation
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|mutateRow
parameter_list|(
name|RowMutations
name|mutation
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|rawTable
operator|.
name|mutateRow
argument_list|(
name|mutation
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|Result
argument_list|>
argument_list|>
name|scanAll
parameter_list|(
name|Scan
name|scan
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|rawTable
operator|.
name|scanAll
argument_list|(
name|scan
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
name|Scan
name|scan
parameter_list|)
block|{
return|return
name|rawTable
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
return|;
block|}
specifier|private
name|void
name|scan0
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|ScanResultConsumer
name|consumer
parameter_list|)
block|{
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|consumer
operator|.
name|onScanMetricsCreated
argument_list|(
name|scanner
operator|.
name|getScanMetrics
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Result
name|result
init|;
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|consumer
operator|.
name|onNext
argument_list|(
name|result
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|consumer
operator|.
name|onComplete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|consumer
operator|.
name|onError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|scan
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|ScanResultConsumer
name|consumer
parameter_list|)
block|{
name|pool
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|scan0
argument_list|(
name|scan
argument_list|,
name|consumer
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Result
argument_list|>
argument_list|>
name|get
parameter_list|(
name|List
argument_list|<
name|Get
argument_list|>
name|gets
parameter_list|)
block|{
return|return
name|rawTable
operator|.
name|get
argument_list|(
name|gets
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|wrap
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|put
parameter_list|(
name|List
argument_list|<
name|Put
argument_list|>
name|puts
parameter_list|)
block|{
return|return
name|rawTable
operator|.
name|put
argument_list|(
name|puts
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|wrap
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|delete
parameter_list|(
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
parameter_list|)
block|{
return|return
name|rawTable
operator|.
name|delete
argument_list|(
name|deletes
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|wrap
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|T
argument_list|>
argument_list|>
name|batch
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|actions
parameter_list|)
block|{
return|return
name|rawTable
operator|.
expr|<
name|T
operator|>
name|batch
argument_list|(
name|actions
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|wrap
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|S
parameter_list|,
name|R
parameter_list|>
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|coprocessorService
parameter_list|(
name|Function
argument_list|<
name|RpcChannel
argument_list|,
name|S
argument_list|>
name|stubMaker
parameter_list|,
name|ServiceCaller
argument_list|<
name|S
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|rawTable
operator|.
name|coprocessorService
argument_list|(
name|stubMaker
argument_list|,
name|callable
argument_list|,
name|row
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|S
parameter_list|,
name|R
parameter_list|>
name|CoprocessorServiceBuilder
argument_list|<
name|S
argument_list|,
name|R
argument_list|>
name|coprocessorService
parameter_list|(
name|Function
argument_list|<
name|RpcChannel
argument_list|,
name|S
argument_list|>
name|stubMaker
parameter_list|,
name|ServiceCaller
argument_list|<
name|S
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|,
name|CoprocessorCallback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|)
block|{
name|CoprocessorCallback
argument_list|<
name|R
argument_list|>
name|wrappedCallback
init|=
operator|new
name|CoprocessorCallback
argument_list|<
name|R
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onRegionComplete
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|R
name|resp
parameter_list|)
block|{
name|pool
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|callback
operator|.
name|onRegionComplete
argument_list|(
name|region
argument_list|,
name|resp
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onRegionError
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{
name|pool
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|callback
operator|.
name|onRegionError
argument_list|(
name|region
argument_list|,
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onComplete
parameter_list|()
block|{
name|pool
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|callback
operator|.
name|onComplete
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onError
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|pool
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|callback
operator|.
name|onError
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|CoprocessorServiceBuilder
argument_list|<
name|S
argument_list|,
name|R
argument_list|>
name|builder
init|=
name|rawTable
operator|.
name|coprocessorService
argument_list|(
name|stubMaker
argument_list|,
name|callable
argument_list|,
name|wrappedCallback
argument_list|)
decl_stmt|;
return|return
operator|new
name|CoprocessorServiceBuilder
argument_list|<
name|S
argument_list|,
name|R
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CoprocessorServiceBuilder
argument_list|<
name|S
argument_list|,
name|R
argument_list|>
name|fromRow
parameter_list|(
name|byte
index|[]
name|startKey
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
name|builder
operator|.
name|fromRow
argument_list|(
name|startKey
argument_list|,
name|inclusive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|CoprocessorServiceBuilder
argument_list|<
name|S
argument_list|,
name|R
argument_list|>
name|toRow
parameter_list|(
name|byte
index|[]
name|endKey
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
name|builder
operator|.
name|toRow
argument_list|(
name|endKey
argument_list|,
name|inclusive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|builder
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

