begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionStatesCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Metrics information on the HBase cluster.  *<p>  *<tt>ClusterMetrics</tt> provides clients with information such as:  *<ul>  *<li>The count and names of region servers in the cluster.</li>  *<li>The count and names of dead region servers in the cluster.</li>  *<li>The name of the active master for the cluster.</li>  *<li>The name(s) of the backup master(s) for the cluster, if they exist.</li>  *<li>The average cluster load.</li>  *<li>The number of regions deployed on the cluster.</li>  *<li>The number of requests since last report.</li>  *<li>Detailed region server loading and resource usage information,  *  per server and per region.</li>  *<li>Regions in transition at master</li>  *<li>The unique cluster ID</li>  *</ul>  *<tt>{@link Option}</tt> provides a way to get desired ClusterStatus information.  * The following codes will get all the cluster information.  *<pre>  * {@code  * // Original version still works  * Admin admin = connection.getAdmin();  * ClusterMetrics metrics = admin.getClusterStatus();  * // or below, a new version which has the same effects  * ClusterMetrics metrics = admin.getClusterStatus(EnumSet.allOf(Option.class));  * }  *</pre>  * If information about live servers is the only wanted.  * then codes in the following way:  *<pre>  * {@code  * Admin admin = connection.getAdmin();  * ClusterMetrics metrics = admin.getClusterStatus(EnumSet.of(Option.LIVE_SERVERS));  * }  *</pre>  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
interface|interface
name|ClusterMetrics
block|{
comment|/**    * @return the HBase version string as reported by the HMaster    */
annotation|@
name|Nullable
name|String
name|getHBaseVersion
parameter_list|()
function_decl|;
comment|/**    * @return the names of region servers on the dead list    */
name|List
argument_list|<
name|ServerName
argument_list|>
name|getDeadServerNames
parameter_list|()
function_decl|;
comment|/**    * @return the names of region servers on the live list    */
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerMetrics
argument_list|>
name|getLiveServerMetrics
parameter_list|()
function_decl|;
comment|/**    * @return the number of regions deployed on the cluster    */
specifier|default
name|int
name|getRegionCount
parameter_list|()
block|{
return|return
name|getLiveServerMetrics
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|v
lambda|->
name|v
operator|.
name|getValue
argument_list|()
operator|.
name|getRegionMetrics
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
comment|/**    * @return the number of requests since last report    */
specifier|default
name|long
name|getRequestCount
parameter_list|()
block|{
return|return
name|getLiveServerMetrics
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|v
lambda|->
name|v
operator|.
name|getValue
argument_list|()
operator|.
name|getRegionMetrics
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|mapToLong
argument_list|(
name|RegionMetrics
operator|::
name|getRequestCount
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
comment|/**    * Returns detailed information about the current master {@link ServerName}.    * @return current master information if it exists    */
annotation|@
name|Nullable
name|ServerName
name|getMasterName
parameter_list|()
function_decl|;
comment|/**    * @return the names of backup masters    */
name|List
argument_list|<
name|ServerName
argument_list|>
name|getBackupMasterNames
parameter_list|()
function_decl|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
name|List
argument_list|<
name|RegionState
argument_list|>
name|getRegionStatesInTransition
parameter_list|()
function_decl|;
annotation|@
name|Nullable
name|String
name|getClusterId
parameter_list|()
function_decl|;
name|List
argument_list|<
name|String
argument_list|>
name|getMasterCoprocessorNames
parameter_list|()
function_decl|;
specifier|default
name|long
name|getLastMajorCompactionTimestamp
parameter_list|(
name|TableName
name|table
parameter_list|)
block|{
return|return
name|getLiveServerMetrics
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|s
lambda|->
name|s
operator|.
name|getRegionMetrics
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|RegionInfo
operator|.
name|getTable
argument_list|(
name|r
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|table
argument_list|)
argument_list|)
operator|.
name|mapToLong
argument_list|(
name|RegionMetrics
operator|::
name|getLastMajorCompactionTimestamp
argument_list|)
operator|.
name|min
argument_list|()
operator|.
name|orElse
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|default
name|long
name|getLastMajorCompactionTimestamp
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
return|return
name|getLiveServerMetrics
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|s
operator|.
name|getRegionMetrics
argument_list|()
operator|.
name|containsKey
argument_list|(
name|regionName
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|getRegionMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
operator|.
name|getLastMajorCompactionTimestamp
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
literal|0L
argument_list|)
return|;
block|}
annotation|@
name|Nullable
name|Boolean
name|getBalancerOn
parameter_list|()
function_decl|;
name|int
name|getMasterInfoPort
parameter_list|()
function_decl|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|getServersName
parameter_list|()
function_decl|;
comment|/**    * @return the average cluster load    */
specifier|default
name|double
name|getAverageLoad
parameter_list|()
block|{
name|int
name|serverSize
init|=
name|getLiveServerMetrics
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverSize
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|(
name|double
operator|)
name|getRegionCount
argument_list|()
operator|/
operator|(
name|double
operator|)
name|serverSize
return|;
block|}
comment|/**    * Provide region states count for given table.    * e.g howmany regions of give table are opened/closed/rit etc    *    * @return map of table to region states count    */
name|Map
argument_list|<
name|TableName
argument_list|,
name|RegionStatesCount
argument_list|>
name|getTableRegionStatesCount
parameter_list|()
function_decl|;
comment|/**    * Kinds of ClusterMetrics    */
enum|enum
name|Option
block|{
comment|/**      * metrics about hbase version      */
name|HBASE_VERSION
block|,
comment|/**      * metrics about cluster id      */
name|CLUSTER_ID
block|,
comment|/**      * metrics about balancer is on or not      */
name|BALANCER_ON
block|,
comment|/**      * metrics about live region servers      */
name|LIVE_SERVERS
block|,
comment|/**      * metrics about dead region servers      */
name|DEAD_SERVERS
block|,
comment|/**      * metrics about master name      */
name|MASTER
block|,
comment|/**      * metrics about backup masters name      */
name|BACKUP_MASTERS
block|,
comment|/**      * metrics about master coprocessors      */
name|MASTER_COPROCESSORS
block|,
comment|/**      * metrics about regions in transition      */
name|REGIONS_IN_TRANSITION
block|,
comment|/**      * metrics info port      */
name|MASTER_INFO_PORT
block|,
comment|/**      * metrics about live region servers name      */
name|SERVERS_NAME
block|,
comment|/**      * metrics about table to no of regions status count      */
name|TABLE_TO_REGIONS_COUNT
block|,   }
block|}
end_interface

end_unit

