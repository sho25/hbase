begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|CATALOG_FAMILY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|NINES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|ZEROES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
operator|.
name|createRegionName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
operator|.
name|META_TABLE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|isEmptyStopRow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|ClientExceptionsUtil
operator|.
name|findException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|ClientExceptionsUtil
operator|.
name|isMetaClearingException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CollectionUtils
operator|.
name|computeIfAbsent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentNavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|RegionMovedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * The asynchronous region locator.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|AsyncRegionLocator
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AsyncRegionLocator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AsyncConnectionImpl
name|conn
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|HRegionLocation
argument_list|>
name|metaRegionLocation
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|>
name|metaRelocateFuture
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|TableName
argument_list|,
name|ConcurrentNavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
argument_list|>
name|cache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|AsyncRegionLocator
parameter_list|(
name|AsyncConnectionImpl
name|conn
parameter_list|)
block|{
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|locateMetaRegion
parameter_list|()
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|HRegionLocation
name|metaRegionLocation
init|=
name|this
operator|.
name|metaRegionLocation
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|metaRegionLocation
operator|!=
literal|null
condition|)
block|{
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|metaRegionLocation
argument_list|)
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Meta region location cache is null, try fetching from registry."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metaRelocateFuture
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Start fetching meta region location from registry."
argument_list|)
expr_stmt|;
block|}
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|future
init|=
name|metaRelocateFuture
operator|.
name|get
argument_list|()
decl_stmt|;
name|conn
operator|.
name|registry
operator|.
name|getMetaRegionLocation
argument_list|()
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|locs
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to fetch meta region location from registry"
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
name|metaRelocateFuture
operator|.
name|getAndSet
argument_list|(
literal|null
argument_list|)
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
name|HRegionLocation
name|loc
init|=
name|locs
operator|.
name|getDefaultRegionLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The fetched meta region location is "
operator|+
name|loc
argument_list|)
expr_stmt|;
block|}
comment|// Here we update cache before reset future, so it is possible that someone can get a
comment|// stale value. Consider this:
comment|// 1. update cache
comment|// 2. someone clear the cache and relocate again
comment|// 3. the metaRelocateFuture is not null so the old future is used.
comment|// 4. we clear metaRelocateFuture and complete the future in it with the value being
comment|// cleared in step 2.
comment|// But we do not think it is a big deal as it rarely happens, and even if it happens, the
comment|// caller will retry again later, no correctness problems.
name|this
operator|.
name|metaRegionLocation
operator|.
name|set
argument_list|(
name|loc
argument_list|)
expr_stmt|;
name|metaRelocateFuture
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|future
operator|.
name|complete
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|future
init|=
name|metaRelocateFuture
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
return|return
name|future
return|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|ConcurrentNavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|createTableCache
parameter_list|()
block|{
return|return
operator|new
name|ConcurrentSkipListMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
return|;
block|}
specifier|private
name|void
name|removeFromCache
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|)
block|{
name|ConcurrentNavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|tableCache
init|=
name|cache
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableCache
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|tableCache
operator|.
name|computeIfPresent
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|oldLoc
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|oldLoc
operator|.
name|getSeqNum
argument_list|()
operator|>
name|loc
operator|.
name|getSeqNum
argument_list|()
operator|||
operator|!
name|oldLoc
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|oldLoc
return|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addToCache
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Try adding "
operator|+
name|loc
operator|+
literal|" to cache"
argument_list|)
expr_stmt|;
block|}
name|ConcurrentNavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|tableCache
init|=
name|computeIfAbsent
argument_list|(
name|cache
argument_list|,
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|,
name|AsyncRegionLocator
operator|::
name|createTableCache
argument_list|)
decl_stmt|;
name|byte
index|[]
name|startKey
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
decl_stmt|;
name|HRegionLocation
name|oldLoc
init|=
name|tableCache
operator|.
name|putIfAbsent
argument_list|(
name|startKey
argument_list|,
name|loc
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldLoc
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|oldLoc
operator|.
name|getSeqNum
argument_list|()
operator|>
name|loc
operator|.
name|getSeqNum
argument_list|()
operator|||
name|oldLoc
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Will not add "
operator|+
name|loc
operator|+
literal|" to cache because the old value "
operator|+
name|oldLoc
operator|+
literal|" is newer than us or has the same server name"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|tableCache
operator|.
name|compute
argument_list|(
name|startKey
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|oldValue
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|oldValue
operator|==
literal|null
operator|||
name|oldValue
operator|.
name|getSeqNum
argument_list|()
operator|<=
name|loc
operator|.
name|getSeqNum
argument_list|()
condition|)
block|{
return|return
name|loc
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Will not add "
operator|+
name|loc
operator|+
literal|" to cache because the old value "
operator|+
name|oldValue
operator|+
literal|" is newer than us or has the same server name."
operator|+
literal|" Maybe it is updated before we replace it"
argument_list|)
expr_stmt|;
block|}
return|return
name|oldValue
return|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HRegionLocation
name|locateInCache
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
name|ConcurrentNavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|tableCache
init|=
name|cache
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableCache
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|entry
init|=
name|tableCache
operator|.
name|floorEntry
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HRegionLocation
name|loc
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|isEmptyStopRow
argument_list|(
name|endKey
argument_list|)
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|row
argument_list|,
name|endKey
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|loc
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|void
name|onScanComplete
parameter_list|(
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|future
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|List
argument_list|<
name|Result
argument_list|>
name|results
parameter_list|,
name|Throwable
name|error
parameter_list|,
name|String
name|rowNameInErrorMsg
parameter_list|,
name|Consumer
argument_list|<
name|HRegionLocation
argument_list|>
name|otherCheck
parameter_list|)
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to fetch location of '"
operator|+
name|tableName
operator|+
literal|"', "
operator|+
name|rowNameInErrorMsg
operator|+
literal|"='"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
operator|+
literal|"'"
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|RegionLocations
name|locs
init|=
name|MetaTableAccessor
operator|.
name|getRegionLocations
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The fetched location of '"
operator|+
name|tableName
operator|+
literal|"', "
operator|+
name|rowNameInErrorMsg
operator|+
literal|"='"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
operator|+
literal|"' is "
operator|+
name|locs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|locs
operator|==
literal|null
operator|||
name|locs
operator|.
name|getDefaultRegionLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"No location found for '%s', %s='%s'"
argument_list|,
name|tableName
argument_list|,
name|rowNameInErrorMsg
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|HRegionLocation
name|loc
init|=
name|locs
operator|.
name|getDefaultRegionLocation
argument_list|()
decl_stmt|;
name|HRegionInfo
name|info
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"HRegionInfo is null for '%s', %s='%s'"
argument_list|,
name|tableName
argument_list|,
name|rowNameInErrorMsg
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|info
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|TableNotFoundException
argument_list|(
literal|"Table '"
operator|+
name|tableName
operator|+
literal|"' was not found, got: '"
operator|+
name|info
operator|.
name|getTable
argument_list|()
operator|+
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|info
operator|.
name|isSplit
argument_list|()
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|RegionOfflineException
argument_list|(
literal|"the only available region for the required row is a split parent,"
operator|+
literal|" the daughters should be online soon: '"
operator|+
name|info
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|info
operator|.
name|isOffline
argument_list|()
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|RegionOfflineException
argument_list|(
literal|"the region is offline, could"
operator|+
literal|" be caused by a disable table call: '"
operator|+
name|info
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|loc
operator|.
name|getServerName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|NoServerForRegionException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"No server address listed for region '%s', %s='%s'"
argument_list|,
name|info
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|rowNameInErrorMsg
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|otherCheck
operator|.
name|accept
argument_list|(
name|loc
argument_list|)
expr_stmt|;
if|if
condition|(
name|future
operator|.
name|isDone
argument_list|()
condition|)
block|{
return|return;
block|}
name|addToCache
argument_list|(
name|loc
argument_list|)
expr_stmt|;
name|future
operator|.
name|complete
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|locateInMeta
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Try locate '"
operator|+
name|tableName
operator|+
literal|"', row='"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
operator|+
literal|"' in meta"
argument_list|)
expr_stmt|;
block|}
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|metaKey
init|=
name|createRegionName
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|NINES
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|conn
operator|.
name|getRawTable
argument_list|(
name|META_TABLE_NAME
argument_list|)
operator|.
name|smallScan
argument_list|(
operator|new
name|Scan
argument_list|(
name|metaKey
argument_list|)
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
operator|.
name|setSmall
argument_list|(
literal|true
argument_list|)
operator|.
name|addFamily
argument_list|(
name|CATALOG_FAMILY
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|results
parameter_list|,
name|error
parameter_list|)
lambda|->
name|onScanComplete
argument_list|(
name|future
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|results
argument_list|,
name|error
argument_list|,
literal|"row"
argument_list|,
name|loc
lambda|->
block|{           }
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|locateRegion
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
name|HRegionLocation
name|loc
init|=
name|locateInCache
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Found "
operator|+
name|loc
operator|+
literal|" in cache for '"
operator|+
name|tableName
operator|+
literal|"', row='"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|loc
argument_list|)
return|;
block|}
return|return
name|locateInMeta
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
return|;
block|}
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|getRegionLocation
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
return|return
name|locateMetaRegion
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
return|;
block|}
block|}
specifier|private
name|HRegionLocation
name|locatePreviousInCache
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|startRowOfCurrentRegion
parameter_list|)
block|{
name|ConcurrentNavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|tableCache
init|=
name|cache
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableCache
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|entry
decl_stmt|;
if|if
condition|(
name|isEmptyStopRow
argument_list|(
name|startRowOfCurrentRegion
argument_list|)
condition|)
block|{
name|entry
operator|=
name|tableCache
operator|.
name|lastEntry
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|=
name|tableCache
operator|.
name|lowerEntry
argument_list|(
name|startRowOfCurrentRegion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HRegionLocation
name|loc
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|startRowOfCurrentRegion
argument_list|)
condition|)
block|{
return|return
name|loc
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|locatePreviousInMeta
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|startRowOfCurrentRegion
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Try locate '"
operator|+
name|tableName
operator|+
literal|"', startRowOfCurrentRegion='"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|startRowOfCurrentRegion
argument_list|)
operator|+
literal|"' in meta"
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|metaKey
decl_stmt|;
if|if
condition|(
name|isEmptyStopRow
argument_list|(
name|startRowOfCurrentRegion
argument_list|)
condition|)
block|{
name|byte
index|[]
name|binaryTableName
init|=
name|tableName
operator|.
name|getName
argument_list|()
decl_stmt|;
name|metaKey
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|binaryTableName
argument_list|,
name|binaryTableName
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metaKey
operator|=
name|createRegionName
argument_list|(
name|tableName
argument_list|,
name|startRowOfCurrentRegion
argument_list|,
name|ZEROES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|conn
operator|.
name|getRawTable
argument_list|(
name|META_TABLE_NAME
argument_list|)
operator|.
name|smallScan
argument_list|(
operator|new
name|Scan
argument_list|(
name|metaKey
argument_list|)
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
operator|.
name|setSmall
argument_list|(
literal|true
argument_list|)
operator|.
name|addFamily
argument_list|(
name|CATALOG_FAMILY
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|results
parameter_list|,
name|error
parameter_list|)
lambda|->
name|onScanComplete
argument_list|(
name|future
argument_list|,
name|tableName
argument_list|,
name|startRowOfCurrentRegion
argument_list|,
name|results
argument_list|,
name|error
argument_list|,
literal|"startRowOfCurrentRegion"
argument_list|,
name|loc
lambda|->
block|{
name|HRegionInfo
name|info
operator|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
argument_list|;             if
operator|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|startRowOfCurrentRegion
argument_list|)
operator|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"The end key of '"
operator|+
name|info
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"' is '"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|info
operator|.
name|getEndKey
argument_list|()
argument_list|)
operator|+
literal|"', expected '"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|startRowOfCurrentRegion
argument_list|)
operator|+
literal|"'"
argument_list|)
argument_list|)
block|;             }
block|}
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|future
return|;
end_return

begin_function
unit|}    private
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|locatePreviousRegion
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|startRowOfCurrentRegion
parameter_list|)
block|{
name|HRegionLocation
name|loc
init|=
name|locatePreviousInCache
argument_list|(
name|tableName
argument_list|,
name|startRowOfCurrentRegion
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Found "
operator|+
name|loc
operator|+
literal|" in cache for '"
operator|+
name|tableName
operator|+
literal|"', startRowOfCurrentRegion='"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|startRowOfCurrentRegion
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|loc
argument_list|)
return|;
block|}
return|return
name|locatePreviousInMeta
argument_list|(
name|tableName
argument_list|,
name|startRowOfCurrentRegion
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Locate the previous region using the current regions start key. Used for reverse scan.    */
end_comment

begin_function
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|getPreviousRegionLocation
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|startRowOfCurrentRegion
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
return|return
name|locateMetaRegion
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|locatePreviousRegion
argument_list|(
name|tableName
argument_list|,
name|startRowOfCurrentRegion
argument_list|)
return|;
block|}
block|}
end_function

begin_function
specifier|private
name|boolean
name|canUpdate
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|,
name|HRegionLocation
name|oldLoc
parameter_list|)
block|{
comment|// Do not need to update if no such location, or the location is newer, or the location is not
comment|// same with us
return|return
name|oldLoc
operator|!=
literal|null
operator|&&
name|oldLoc
operator|.
name|getSeqNum
argument_list|()
operator|<=
name|loc
operator|.
name|getSeqNum
argument_list|()
operator|&&
name|oldLoc
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|updateCachedLoation
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|,
name|Throwable
name|exception
parameter_list|,
name|Function
argument_list|<
name|HRegionLocation
argument_list|,
name|HRegionLocation
argument_list|>
name|cachedLocationSupplier
parameter_list|,
name|Consumer
argument_list|<
name|HRegionLocation
argument_list|>
name|addToCache
parameter_list|,
name|Consumer
argument_list|<
name|HRegionLocation
argument_list|>
name|removeFromCache
parameter_list|)
block|{
name|HRegionLocation
name|oldLoc
init|=
name|cachedLocationSupplier
operator|.
name|apply
argument_list|(
name|loc
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Try updating "
operator|+
name|loc
operator|+
literal|", the old value is "
operator|+
name|oldLoc
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|canUpdate
argument_list|(
name|loc
argument_list|,
name|oldLoc
argument_list|)
condition|)
block|{
return|return;
block|}
name|Throwable
name|cause
init|=
name|findException
argument_list|(
name|exception
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The actual exception when updating "
operator|+
name|loc
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cause
operator|==
literal|null
operator|||
operator|!
name|isMetaClearingException
argument_list|(
name|cause
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Will not update "
operator|+
name|loc
operator|+
literal|" because the exception is null or not the one we care about"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|RegionMovedException
condition|)
block|{
name|RegionMovedException
name|rme
init|=
operator|(
name|RegionMovedException
operator|)
name|cause
decl_stmt|;
name|HRegionLocation
name|newLoc
init|=
operator|new
name|HRegionLocation
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|rme
operator|.
name|getServerName
argument_list|()
argument_list|,
name|rme
operator|.
name|getLocationSeqNum
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Try updating "
operator|+
name|loc
operator|+
literal|" with the new location "
operator|+
name|newLoc
operator|+
literal|" constructed by "
operator|+
name|rme
argument_list|)
expr_stmt|;
block|}
name|addToCache
operator|.
name|accept
argument_list|(
name|newLoc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Try removing "
operator|+
name|loc
operator|+
literal|" from cache"
argument_list|)
expr_stmt|;
block|}
name|removeFromCache
operator|.
name|accept
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
name|void
name|updateCachedLocation
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|,
name|Throwable
name|exception
parameter_list|)
block|{
if|if
condition|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|updateCachedLoation
argument_list|(
name|loc
argument_list|,
name|exception
argument_list|,
name|l
lambda|->
name|metaRegionLocation
operator|.
name|get
argument_list|()
argument_list|,
name|newLoc
lambda|->
block|{
lambda|for (
argument_list|;
empty_stmt|;
block|)
block|{
name|HRegionLocation
name|oldLoc
init|=
name|metaRegionLocation
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldLoc
operator|!=
literal|null
operator|&&
operator|(
name|oldLoc
operator|.
name|getSeqNum
argument_list|()
operator|>
name|newLoc
operator|.
name|getSeqNum
argument_list|()
operator|||
name|oldLoc
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|newLoc
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|metaRegionLocation
operator|.
name|compareAndSet
argument_list|(
name|oldLoc
argument_list|,
name|newLoc
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
end_function

begin_operator
operator|,
end_operator

begin_expr_stmt
name|l
lambda|->
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|HRegionLocation
name|oldLoc
init|=
name|metaRegionLocation
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|canUpdate
argument_list|(
name|l
argument_list|,
name|oldLoc
argument_list|)
operator|||
name|metaRegionLocation
operator|.
name|compareAndSet
argument_list|(
name|oldLoc
argument_list|,
literal|null
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_block
unit|} else
block|{
name|updateCachedLoation
argument_list|(
name|loc
argument_list|,
name|exception
argument_list|,
name|l
lambda|->
block|{
name|ConcurrentNavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|tableCache
init|=
name|cache
operator|.
name|get
argument_list|(
name|l
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableCache
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|tableCache
operator|.
name|get
argument_list|(
name|l
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|)
return|;
block|}
argument_list|,
name|this
operator|::
name|addToCache
argument_list|,
name|this
operator|::
name|removeFromCache
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
unit|}    void
name|clearCache
argument_list|(
name|TableName
name|tableName
argument_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Clear meta cache for "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
end_expr_stmt

unit|} }
end_unit

