begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * An {@link RpcRetryingCaller} that will update the per-region stats for the call on return,  * if stats are available  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|StatsTrackingRpcRetryingCaller
parameter_list|<
name|T
parameter_list|>
implements|implements
name|RpcRetryingCaller
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|ServerStatisticTracker
name|stats
decl_stmt|;
specifier|private
specifier|final
name|RpcRetryingCaller
argument_list|<
name|T
argument_list|>
name|delegate
decl_stmt|;
specifier|public
name|StatsTrackingRpcRetryingCaller
parameter_list|(
name|RpcRetryingCaller
argument_list|<
name|T
argument_list|>
name|delegate
parameter_list|,
name|ServerStatisticTracker
name|stats
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|delegate
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|callWithRetries
parameter_list|(
name|RetryingCallable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|,
name|int
name|callTimeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|RuntimeException
block|{
name|T
name|result
init|=
name|delegate
operator|.
name|callWithRetries
argument_list|(
name|callable
argument_list|,
name|callTimeout
argument_list|)
decl_stmt|;
return|return
name|updateStatsAndUnwrap
argument_list|(
name|result
argument_list|,
name|callable
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|callWithoutRetries
parameter_list|(
name|RetryingCallable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|,
name|int
name|callTimeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|RuntimeException
block|{
name|T
name|result
init|=
name|delegate
operator|.
name|callWithRetries
argument_list|(
name|callable
argument_list|,
name|callTimeout
argument_list|)
decl_stmt|;
return|return
name|updateStatsAndUnwrap
argument_list|(
name|result
argument_list|,
name|callable
argument_list|)
return|;
block|}
specifier|private
name|T
name|updateStatsAndUnwrap
parameter_list|(
name|T
name|result
parameter_list|,
name|RetryingCallable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
block|{
comment|// don't track stats about requests that aren't to regionservers
if|if
condition|(
operator|!
operator|(
name|callable
operator|instanceof
name|RegionServerCallable
operator|)
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// mutli-server callables span multiple regions, so they don't have a location,
comment|// but they are region server callables, so we have to handle them when we process the
comment|// result, not in here
if|if
condition|(
name|callable
operator|instanceof
name|MultiServerCallable
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// update the stats for the single server callable
name|RegionServerCallable
argument_list|<
name|T
argument_list|>
name|regionCallable
init|=
operator|(
name|RegionServerCallable
operator|)
name|callable
decl_stmt|;
name|HRegionLocation
name|location
init|=
name|regionCallable
operator|.
name|getLocation
argument_list|()
decl_stmt|;
return|return
name|ResultStatsUtil
operator|.
name|updateStats
argument_list|(
name|result
argument_list|,
name|stats
argument_list|,
name|location
argument_list|)
return|;
block|}
block|}
end_class

end_unit

