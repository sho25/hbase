begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompatibilitySingletonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|MetricsWALSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|MetricsWALSourceImpl
import|;
end_import

begin_comment
comment|/**  * Class used to push numbers about ZooKeeper into the metrics subsystem. This will take a  * single function call and turn it into multiple manipulations of the hadoop metrics system.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetricsZooKeeper
implements|implements
name|ZooKeeperMetricsListener
block|{
specifier|private
specifier|final
name|MetricsZooKeeperSource
name|source
decl_stmt|;
specifier|public
name|MetricsZooKeeper
parameter_list|()
block|{
name|this
argument_list|(
name|CompatibilitySingletonFactory
operator|.
name|getInstance
argument_list|(
name|MetricsZooKeeperSource
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|MetricsZooKeeper
parameter_list|(
name|MetricsZooKeeperSource
name|s
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|s
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerAuthFailedException
parameter_list|()
block|{
name|source
operator|.
name|incrementAuthFailedCount
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerConnectionLossException
parameter_list|()
block|{
name|source
operator|.
name|incrementConnectionLossCount
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerDataInconsistencyException
parameter_list|()
block|{
name|source
operator|.
name|incrementDataInconsistencyCount
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerInvalidACLException
parameter_list|()
block|{
name|source
operator|.
name|incrementInvalidACLCount
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerNoAuthException
parameter_list|()
block|{
name|source
operator|.
name|incrementNoAuthCount
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerOperationTimeoutException
parameter_list|()
block|{
name|source
operator|.
name|incrementOperationTimeoutCount
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerRuntimeInconsistencyException
parameter_list|()
block|{
name|source
operator|.
name|incrementRuntimeInconsistencyCount
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerSessionExpiredException
parameter_list|()
block|{
name|source
operator|.
name|incrementSessionExpiredCount
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerSystemErrorException
parameter_list|()
block|{
name|source
operator|.
name|incrementSystemErrorCount
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerFailedZKCall
parameter_list|()
block|{
name|source
operator|.
name|incrementTotalFailedZKCalls
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerReadOperationLatency
parameter_list|(
name|long
name|latency
parameter_list|)
block|{
name|source
operator|.
name|recordReadOperationLatency
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerWriteOperationLatency
parameter_list|(
name|long
name|latency
parameter_list|)
block|{
name|source
operator|.
name|recordWriteOperationLatency
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerSyncOperationLatency
parameter_list|(
name|long
name|latency
parameter_list|)
block|{
name|source
operator|.
name|recordSyncOperationLatency
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

