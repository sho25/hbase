begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MetricsConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_comment
comment|/** A call waiting for a value. */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|Call
block|{
specifier|final
name|int
name|id
decl_stmt|;
comment|// call id
specifier|final
name|Message
name|param
decl_stmt|;
comment|// rpc request method param object
comment|/**    * Optionally has cells when making call.  Optionally has cells set on response.  Used    * passing cells to the rpc and receiving the response.    */
name|CellScanner
name|cells
decl_stmt|;
name|Message
name|response
decl_stmt|;
comment|// value, null if error
comment|// The return type.  Used to create shell into which we deserialize the response if any.
name|Message
name|responseDefaultType
decl_stmt|;
name|IOException
name|error
decl_stmt|;
comment|// exception, null if value
specifier|volatile
name|boolean
name|done
decl_stmt|;
comment|// true when call is done
specifier|final
name|Descriptors
operator|.
name|MethodDescriptor
name|md
decl_stmt|;
specifier|final
name|int
name|timeout
decl_stmt|;
comment|// timeout in millisecond for this call; 0 means infinite.
specifier|final
name|MetricsConnection
operator|.
name|CallStats
name|callStats
decl_stmt|;
specifier|protected
name|Call
parameter_list|(
name|int
name|id
parameter_list|,
specifier|final
name|Descriptors
operator|.
name|MethodDescriptor
name|md
parameter_list|,
name|Message
name|param
parameter_list|,
specifier|final
name|CellScanner
name|cells
parameter_list|,
specifier|final
name|Message
name|responseDefaultType
parameter_list|,
name|int
name|timeout
parameter_list|,
name|MetricsConnection
operator|.
name|CallStats
name|callStats
parameter_list|)
block|{
name|this
operator|.
name|param
operator|=
name|param
expr_stmt|;
name|this
operator|.
name|md
operator|=
name|md
expr_stmt|;
name|this
operator|.
name|cells
operator|=
name|cells
expr_stmt|;
name|this
operator|.
name|callStats
operator|=
name|callStats
expr_stmt|;
name|this
operator|.
name|callStats
operator|.
name|setStartTime
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|responseDefaultType
operator|=
name|responseDefaultType
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
comment|/**    * Check if the call did timeout. Set an exception (includes a notify) if it's the case.    * @return true if the call is on timeout, false otherwise.    */
specifier|public
name|boolean
name|checkAndSetTimeout
parameter_list|()
block|{
if|if
condition|(
name|timeout
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|long
name|waitTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|getStartTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|waitTime
operator|>=
name|timeout
condition|)
block|{
name|IOException
name|ie
init|=
operator|new
name|CallTimeoutException
argument_list|(
literal|"Call id="
operator|+
name|id
operator|+
literal|", waitTime="
operator|+
name|waitTime
operator|+
literal|", operationTimeout="
operator|+
name|timeout
operator|+
literal|" expired."
argument_list|)
decl_stmt|;
name|setException
argument_list|(
name|ie
argument_list|)
expr_stmt|;
comment|// includes a notify
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|int
name|remainingTime
parameter_list|()
block|{
if|if
condition|(
name|timeout
operator|==
literal|0
condition|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
name|int
name|remaining
init|=
name|timeout
operator|-
call|(
name|int
call|)
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|getStartTime
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|remaining
operator|>
literal|0
condition|?
name|remaining
else|:
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"callId: "
operator|+
name|this
operator|.
name|id
operator|+
literal|" methodName: "
operator|+
name|this
operator|.
name|md
operator|.
name|getName
argument_list|()
operator|+
literal|" param {"
operator|+
operator|(
name|this
operator|.
name|param
operator|!=
literal|null
condition|?
name|ProtobufUtil
operator|.
name|getShortTextFormat
argument_list|(
name|this
operator|.
name|param
argument_list|)
else|:
literal|""
operator|)
operator|+
literal|"}"
return|;
block|}
comment|/** Indicate when the call is complete and the    * value or error are available.  Notifies by default.  */
specifier|protected
specifier|synchronized
name|void
name|callComplete
parameter_list|()
block|{
name|this
operator|.
name|done
operator|=
literal|true
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
comment|// notify caller
block|}
comment|/** Set the exception when there is an error.    * Notify the caller the call is done.    *    * @param error exception thrown by the call; either local or remote    */
specifier|public
name|void
name|setException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
name|callComplete
argument_list|()
expr_stmt|;
block|}
comment|/**    * Set the return value when there is no error.    * Notify the caller the call is done.    *    * @param response return value of the call.    * @param cells Can be null    */
specifier|public
name|void
name|setResponse
parameter_list|(
name|Message
name|response
parameter_list|,
specifier|final
name|CellScanner
name|cells
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|cells
operator|=
name|cells
expr_stmt|;
name|callComplete
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|callStats
operator|.
name|getStartTime
argument_list|()
return|;
block|}
block|}
end_class

end_unit

