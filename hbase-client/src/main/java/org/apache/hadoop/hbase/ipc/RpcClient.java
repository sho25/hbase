begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|KeyValueCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AuthenticationProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|CellBlockMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|ConnectionHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|ExceptionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|RequestHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|ResponseHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|UserInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|TracingProtos
operator|.
name|RPCTInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HBaseSaslRpcClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|SecurityInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|token
operator|.
name|AuthenticationTokenSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PoolMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PoolMap
operator|.
name|PoolType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cloudera
operator|.
name|htrace
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cloudera
operator|.
name|htrace
operator|.
name|Trace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingRpcChannel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|MethodDescriptor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_comment
comment|/**  * Does RPC against a cluster.  Manages connections per regionserver in the cluster.  *<p>See HBaseServer  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RpcClient
block|{
comment|// The LOG key is intentionally not from this package to avoid ipc logging at DEBUG (all under
comment|// o.a.h.hbase is set to DEBUG as default).
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.ipc.RpcClient"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|PoolMap
argument_list|<
name|ConnectionId
argument_list|,
name|Connection
argument_list|>
name|connections
decl_stmt|;
specifier|protected
name|int
name|counter
decl_stmt|;
comment|// counter for call ids
specifier|protected
specifier|final
name|AtomicBoolean
name|running
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// if client runs
specifier|final
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|final
specifier|protected
name|int
name|maxIdleTime
decl_stmt|;
comment|// connections will be culled if it was idle for
comment|// maxIdleTime microsecs
specifier|final
specifier|protected
name|int
name|maxRetries
decl_stmt|;
comment|//the max. no. of retries for socket connections
specifier|final
specifier|protected
name|long
name|failureSleep
decl_stmt|;
comment|// Time to sleep before retry on failure.
specifier|protected
specifier|final
name|boolean
name|tcpNoDelay
decl_stmt|;
comment|// if T then disable Nagle's Algorithm
specifier|protected
specifier|final
name|boolean
name|tcpKeepAlive
decl_stmt|;
comment|// if T then use keepalives
specifier|protected
name|int
name|pingInterval
decl_stmt|;
comment|// how often sends ping to the server in msecs
specifier|protected
name|FailedServers
name|failedServers
decl_stmt|;
specifier|private
specifier|final
name|Codec
name|codec
decl_stmt|;
specifier|private
specifier|final
name|CompressionCodec
name|compressor
decl_stmt|;
specifier|private
specifier|final
name|IPCUtil
name|ipcUtil
decl_stmt|;
specifier|protected
specifier|final
name|SocketFactory
name|socketFactory
decl_stmt|;
comment|// how to create sockets
specifier|protected
name|String
name|clusterId
decl_stmt|;
specifier|protected
specifier|final
name|SocketAddress
name|localAddr
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|fallbackAllowed
decl_stmt|;
specifier|final
specifier|private
specifier|static
name|String
name|PING_INTERVAL_NAME
init|=
literal|"ipc.ping.interval"
decl_stmt|;
specifier|final
specifier|private
specifier|static
name|String
name|SOCKET_TIMEOUT
init|=
literal|"ipc.socket.timeout"
decl_stmt|;
specifier|final
specifier|static
name|int
name|DEFAULT_PING_INTERVAL
init|=
literal|60000
decl_stmt|;
comment|// 1 min
specifier|final
specifier|static
name|int
name|DEFAULT_SOCKET_TIMEOUT
init|=
literal|20000
decl_stmt|;
comment|// 20 seconds
specifier|final
specifier|static
name|int
name|PING_CALL_ID
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|FAILED_SERVER_EXPIRY_KEY
init|=
literal|"hbase.ipc.client.failed.servers.expiry"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|FAILED_SERVER_EXPIRY_DEFAULT
init|=
literal|2000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED_KEY
init|=
literal|"hbase.ipc.client.fallback-to-simple-auth-allowed"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED_DEFAULT
init|=
literal|false
decl_stmt|;
comment|// thread-specific RPC timeout, which may override that of what was passed in.
comment|// This is used to change dynamically the timeout (for read only) when retrying: if
comment|//  the time allowed for the operation is less than the usual socket timeout, then
comment|//  we lower the timeout. This is subject to race conditions, and should be used with
comment|//  extreme caution.
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
name|rpcTimeout
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Integer
name|initialValue
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_OPERATION_TIMEOUT
return|;
block|}
block|}
decl_stmt|;
comment|/**    * A class to manage a list of servers that failed recently.    */
specifier|static
class|class
name|FailedServers
block|{
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|>
name|failedServers
init|=
operator|new
name|LinkedList
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|recheckServersTimeout
decl_stmt|;
name|FailedServers
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|recheckServersTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|FAILED_SERVER_EXPIRY_KEY
argument_list|,
name|FAILED_SERVER_EXPIRY_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add an address to the list of the failed servers list.      */
specifier|public
specifier|synchronized
name|void
name|addToFailedServers
parameter_list|(
name|InetSocketAddress
name|address
parameter_list|)
block|{
specifier|final
name|long
name|expiry
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|recheckServersTimeout
decl_stmt|;
name|failedServers
operator|.
name|addFirst
argument_list|(
operator|new
name|Pair
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|(
name|expiry
argument_list|,
name|address
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check if the server should be considered as bad. Clean the old entries of the list.      *      * @return true if the server is in the failed servers list      */
specifier|public
specifier|synchronized
name|boolean
name|isFailedServer
parameter_list|(
specifier|final
name|InetSocketAddress
name|address
parameter_list|)
block|{
if|if
condition|(
name|failedServers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|lookup
init|=
name|address
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// iterate, looking for the search entry and cleaning expired entries
name|Iterator
argument_list|<
name|Pair
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|>
name|it
init|=
name|failedServers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Pair
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|cur
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cur
operator|.
name|getFirst
argument_list|()
operator|<
name|now
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|lookup
operator|.
name|equals
argument_list|(
name|cur
operator|.
name|getSecond
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
specifier|static
class|class
name|FailedServerException
extends|extends
name|IOException
block|{
specifier|public
name|FailedServerException
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * set the ping interval value in configuration    *    * @param conf Configuration    * @param pingInterval the ping interval    */
comment|// Any reason we couldn't just do tcp keepalive instead of this pingery?
comment|// St.Ack 20130121
specifier|public
specifier|static
name|void
name|setPingInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|pingInterval
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|PING_INTERVAL_NAME
argument_list|,
name|pingInterval
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the ping interval from configuration;    * If not set in the configuration, return the default value.    *    * @param conf Configuration    * @return the ping interval    */
specifier|static
name|int
name|getPingInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|PING_INTERVAL_NAME
argument_list|,
name|DEFAULT_PING_INTERVAL
argument_list|)
return|;
block|}
comment|/**    * Set the socket timeout    * @param conf Configuration    * @param socketTimeout the socket timeout    */
specifier|public
specifier|static
name|void
name|setSocketTimeout
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|socketTimeout
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|SOCKET_TIMEOUT
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the socket timeout    */
specifier|static
name|int
name|getSocketTimeout
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|SOCKET_TIMEOUT
argument_list|,
name|DEFAULT_SOCKET_TIMEOUT
argument_list|)
return|;
block|}
comment|/** A call waiting for a value. */
specifier|protected
class|class
name|Call
block|{
specifier|final
name|int
name|id
decl_stmt|;
comment|// call id
specifier|final
name|Message
name|param
decl_stmt|;
comment|// rpc request method param object
comment|/**      * Optionally has cells when making call.  Optionally has cells set on response.  Used      * passing cells to the rpc and receiving the response.      */
name|CellScanner
name|cells
decl_stmt|;
name|Message
name|response
decl_stmt|;
comment|// value, null if error
comment|// The return type.  Used to create shell into which we deserialize the response if any.
name|Message
name|responseDefaultType
decl_stmt|;
name|IOException
name|error
decl_stmt|;
comment|// exception, null if value
name|boolean
name|done
decl_stmt|;
comment|// true when call is done
name|long
name|startTime
decl_stmt|;
specifier|final
name|MethodDescriptor
name|md
decl_stmt|;
specifier|protected
name|Call
parameter_list|(
specifier|final
name|MethodDescriptor
name|md
parameter_list|,
name|Message
name|param
parameter_list|,
specifier|final
name|CellScanner
name|cells
parameter_list|,
specifier|final
name|Message
name|responseDefaultType
parameter_list|)
block|{
name|this
operator|.
name|param
operator|=
name|param
expr_stmt|;
name|this
operator|.
name|md
operator|=
name|md
expr_stmt|;
name|this
operator|.
name|cells
operator|=
name|cells
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|responseDefaultType
operator|=
name|responseDefaultType
expr_stmt|;
synchronized|synchronized
init|(
name|RpcClient
operator|.
name|this
init|)
block|{
name|this
operator|.
name|id
operator|=
name|counter
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"callId: "
operator|+
name|this
operator|.
name|id
operator|+
literal|" methodName: "
operator|+
name|this
operator|.
name|md
operator|.
name|getName
argument_list|()
operator|+
literal|" param {"
operator|+
operator|(
name|this
operator|.
name|param
operator|!=
literal|null
condition|?
name|ProtobufUtil
operator|.
name|getShortTextFormat
argument_list|(
name|this
operator|.
name|param
argument_list|)
else|:
literal|""
operator|)
operator|+
literal|"}"
return|;
block|}
comment|/** Indicate when the call is complete and the      * value or error are available.  Notifies by default.  */
specifier|protected
specifier|synchronized
name|void
name|callComplete
parameter_list|()
block|{
name|this
operator|.
name|done
operator|=
literal|true
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
comment|// notify caller
block|}
comment|/** Set the exception when there is an error.      * Notify the caller the call is done.      *      * @param error exception thrown by the call; either local or remote      */
specifier|public
name|void
name|setException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
name|callComplete
argument_list|()
expr_stmt|;
block|}
comment|/**      * Set the return value when there is no error.      * Notify the caller the call is done.      *      * @param response return value of the call.      * @param cells Can be null      */
specifier|public
name|void
name|setResponse
parameter_list|(
name|Message
name|response
parameter_list|,
specifier|final
name|CellScanner
name|cells
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|cells
operator|=
name|cells
expr_stmt|;
name|callComplete
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
block|}
specifier|protected
specifier|final
specifier|static
name|Map
argument_list|<
name|AuthenticationProtos
operator|.
name|TokenIdentifier
operator|.
name|Kind
argument_list|,
name|TokenSelector
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|tokenHandlers
init|=
operator|new
name|HashMap
argument_list|<
name|AuthenticationProtos
operator|.
name|TokenIdentifier
operator|.
name|Kind
argument_list|,
name|TokenSelector
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|tokenHandlers
operator|.
name|put
argument_list|(
name|AuthenticationProtos
operator|.
name|TokenIdentifier
operator|.
name|Kind
operator|.
name|HBASE_AUTH_TOKEN
argument_list|,
operator|new
name|AuthenticationTokenSelector
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a connection. Can be overridden by a subclass for testing.    * @param remoteId - the ConnectionId to use for the connection creation.    */
specifier|protected
name|Connection
name|createConnection
parameter_list|(
name|ConnectionId
name|remoteId
parameter_list|,
specifier|final
name|Codec
name|codec
parameter_list|,
specifier|final
name|CompressionCodec
name|compressor
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Connection
argument_list|(
name|remoteId
argument_list|,
name|codec
argument_list|,
name|compressor
argument_list|)
return|;
block|}
comment|/** Thread that reads responses and notifies callers.  Each connection owns a    * socket connected to a remote address.  Calls are multiplexed through this    * socket: responses may be delivered out of order. */
specifier|protected
class|class
name|Connection
extends|extends
name|Thread
block|{
specifier|private
name|ConnectionHeader
name|header
decl_stmt|;
comment|// connection header
specifier|protected
name|ConnectionId
name|remoteId
decl_stmt|;
specifier|protected
name|Socket
name|socket
init|=
literal|null
decl_stmt|;
comment|// connected socket
specifier|protected
name|DataInputStream
name|in
decl_stmt|;
specifier|protected
name|DataOutputStream
name|out
decl_stmt|;
specifier|private
name|InetSocketAddress
name|server
decl_stmt|;
comment|// server ip:port
specifier|private
name|String
name|serverPrincipal
decl_stmt|;
comment|// server's krb5 principal name
specifier|private
name|AuthMethod
name|authMethod
decl_stmt|;
comment|// authentication method
specifier|private
name|boolean
name|useSasl
decl_stmt|;
specifier|private
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
decl_stmt|;
specifier|private
name|HBaseSaslRpcClient
name|saslRpcClient
decl_stmt|;
specifier|private
name|int
name|reloginMaxBackoff
decl_stmt|;
comment|// max pause before relogin on sasl failure
specifier|private
specifier|final
name|Codec
name|codec
decl_stmt|;
specifier|private
specifier|final
name|CompressionCodec
name|compressor
decl_stmt|;
comment|// currently active calls
specifier|protected
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|Integer
argument_list|,
name|Call
argument_list|>
name|calls
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|Integer
argument_list|,
name|Call
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|AtomicLong
name|lastActivity
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
comment|// last I/O activity time
specifier|protected
specifier|final
name|AtomicBoolean
name|shouldCloseConnection
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
comment|// indicate if the connection is closed
specifier|protected
name|IOException
name|closeException
decl_stmt|;
comment|// close reason
name|Connection
parameter_list|(
name|ConnectionId
name|remoteId
parameter_list|,
specifier|final
name|Codec
name|codec
parameter_list|,
specifier|final
name|CompressionCodec
name|compressor
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|remoteId
operator|.
name|getAddress
argument_list|()
operator|.
name|isUnresolved
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnknownHostException
argument_list|(
literal|"unknown host: "
operator|+
name|remoteId
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|server
operator|=
name|remoteId
operator|.
name|getAddress
argument_list|()
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|codec
expr_stmt|;
name|this
operator|.
name|compressor
operator|=
name|compressor
expr_stmt|;
name|UserGroupInformation
name|ticket
init|=
name|remoteId
operator|.
name|getTicket
argument_list|()
operator|.
name|getUGI
argument_list|()
decl_stmt|;
name|SecurityInfo
name|securityInfo
init|=
name|SecurityInfo
operator|.
name|getInfo
argument_list|(
name|remoteId
operator|.
name|getServiceName
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|useSasl
operator|=
name|User
operator|.
name|isHBaseSecurityEnabled
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|useSasl
operator|&&
name|securityInfo
operator|!=
literal|null
condition|)
block|{
name|AuthenticationProtos
operator|.
name|TokenIdentifier
operator|.
name|Kind
name|tokenKind
init|=
name|securityInfo
operator|.
name|getTokenKind
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenKind
operator|!=
literal|null
condition|)
block|{
name|TokenSelector
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|tokenSelector
init|=
name|tokenHandlers
operator|.
name|get
argument_list|(
name|tokenKind
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenSelector
operator|!=
literal|null
condition|)
block|{
name|token
operator|=
name|tokenSelector
operator|.
name|selectToken
argument_list|(
operator|new
name|Text
argument_list|(
name|clusterId
argument_list|)
argument_list|,
name|ticket
operator|.
name|getTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No token selector found for type "
operator|+
name|tokenKind
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|serverKey
init|=
name|securityInfo
operator|.
name|getServerPrincipal
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverKey
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't obtain server Kerberos config key from SecurityInfo"
argument_list|)
throw|;
block|}
name|serverPrincipal
operator|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|serverKey
argument_list|)
argument_list|,
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"RPC Server Kerberos principal name for service="
operator|+
name|remoteId
operator|.
name|getServiceName
argument_list|()
operator|+
literal|" is "
operator|+
name|serverPrincipal
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|useSasl
condition|)
block|{
name|authMethod
operator|=
name|AuthMethod
operator|.
name|SIMPLE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|authMethod
operator|=
name|AuthMethod
operator|.
name|DIGEST
expr_stmt|;
block|}
else|else
block|{
name|authMethod
operator|=
name|AuthMethod
operator|.
name|KERBEROS
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Use "
operator|+
name|authMethod
operator|+
literal|" authentication for service "
operator|+
name|remoteId
operator|.
name|serviceName
operator|+
literal|", sasl="
operator|+
name|useSasl
argument_list|)
expr_stmt|;
block|}
name|reloginMaxBackoff
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.security.relogin.maxbackoff"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|this
operator|.
name|remoteId
operator|=
name|remoteId
expr_stmt|;
name|ConnectionHeader
operator|.
name|Builder
name|builder
init|=
name|ConnectionHeader
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setServiceName
argument_list|(
name|remoteId
operator|.
name|getServiceName
argument_list|()
argument_list|)
expr_stmt|;
name|UserInformation
name|userInfoPB
decl_stmt|;
if|if
condition|(
operator|(
name|userInfoPB
operator|=
name|getUserInfo
argument_list|(
name|ticket
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setUserInfo
argument_list|(
name|userInfoPB
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|codec
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setCellBlockCodecClass
argument_list|(
name|this
operator|.
name|codec
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|compressor
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setCellBlockCompressorClass
argument_list|(
name|this
operator|.
name|compressor
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|header
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|setName
argument_list|(
literal|"IPC Client ("
operator|+
name|socketFactory
operator|.
name|hashCode
argument_list|()
operator|+
literal|") connection to "
operator|+
name|remoteId
operator|.
name|getAddress
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
operator|(
operator|(
name|ticket
operator|==
literal|null
operator|)
condition|?
literal|" from an unknown user"
else|:
operator|(
literal|" from "
operator|+
name|ticket
operator|.
name|getUserName
argument_list|()
operator|)
operator|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|UserInformation
name|getUserInfo
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
if|if
condition|(
name|ugi
operator|==
literal|null
operator|||
name|authMethod
operator|==
name|AuthMethod
operator|.
name|DIGEST
condition|)
block|{
comment|// Don't send user for token auth
return|return
literal|null
return|;
block|}
name|UserInformation
operator|.
name|Builder
name|userInfoPB
init|=
name|UserInformation
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|authMethod
operator|==
name|AuthMethod
operator|.
name|KERBEROS
condition|)
block|{
comment|// Send effective user for Kerberos auth
name|userInfoPB
operator|.
name|setEffectiveUser
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authMethod
operator|==
name|AuthMethod
operator|.
name|SIMPLE
condition|)
block|{
comment|//Send both effective user and real user for simple auth
name|userInfoPB
operator|.
name|setEffectiveUser
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|userInfoPB
operator|.
name|setRealUser
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|userInfoPB
operator|.
name|build
argument_list|()
return|;
block|}
comment|/** Update lastActivity with the current time. */
specifier|protected
name|void
name|touch
parameter_list|()
block|{
name|lastActivity
operator|.
name|set
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a call to this connection's call queue and notify      * a listener; synchronized. If the connection is dead, the call is not added, and the      * caller is notified.      * This function can return a connection that is already marked as 'shouldCloseConnection'      *  It is up to the user code to check this status.      * @param call to add      */
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"NN_NAKED_NOTIFY"
argument_list|,
name|justification
operator|=
literal|"Notify because new call available for processing"
argument_list|)
specifier|protected
specifier|synchronized
name|void
name|addCall
parameter_list|(
name|Call
name|call
parameter_list|)
block|{
comment|// If the connection is about to close, we manage this as if the call was already added
comment|//  to the connection calls list. If not, the connection creations are serialized, as
comment|//  mentioned in HBASE-6364
if|if
condition|(
name|this
operator|.
name|shouldCloseConnection
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|closeException
operator|==
literal|null
condition|)
block|{
name|call
operator|.
name|setException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Call "
operator|+
name|call
operator|.
name|id
operator|+
literal|" not added as the connection "
operator|+
name|remoteId
operator|+
literal|" is closing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|call
operator|.
name|setException
argument_list|(
name|this
operator|.
name|closeException
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|call
init|)
block|{
name|call
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|calls
operator|.
name|put
argument_list|(
name|call
operator|.
name|id
argument_list|,
name|call
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|call
init|)
block|{
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** This class sends a ping to the remote side when timeout on      * reading. If no failure is detected, it retries until at least      * a byte is read.      */
specifier|protected
class|class
name|PingInputStream
extends|extends
name|FilterInputStream
block|{
comment|/* constructor */
specifier|protected
name|PingInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/* Process timeout exception        * if the connection is not going to be closed, send a ping.        * otherwise, throw the timeout exception.        */
specifier|private
name|void
name|handleTimeout
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|shouldCloseConnection
operator|.
name|get
argument_list|()
operator|||
operator|!
name|running
operator|.
name|get
argument_list|()
operator|||
name|remoteId
operator|.
name|rpcTimeout
operator|>
literal|0
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|sendPing
argument_list|()
expr_stmt|;
block|}
comment|/** Read a byte from the stream.        * Send a ping if timeout on read. Retries if no failure is detected        * until a byte is read.        * @throws IOException for any IO problem other than socket timeout        */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
do|do
block|{
try|try
block|{
return|return
name|super
operator|.
name|read
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|handleTimeout
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
comment|/** Read bytes into a buffer starting from offset<code>off</code>        * Send a ping if timeout on read. Retries if no failure is detected        * until a byte is read.        *        * @return the total number of bytes read; -1 if the connection is closed.        */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
do|do
block|{
try|try
block|{
return|return
name|super
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|handleTimeout
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|}
specifier|protected
specifier|synchronized
name|void
name|setupConnection
parameter_list|()
throws|throws
name|IOException
block|{
name|short
name|ioFailures
init|=
literal|0
decl_stmt|;
name|short
name|timeoutFailures
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|this
operator|.
name|socket
operator|=
name|socketFactory
operator|.
name|createSocket
argument_list|()
expr_stmt|;
name|this
operator|.
name|socket
operator|.
name|setTcpNoDelay
argument_list|(
name|tcpNoDelay
argument_list|)
expr_stmt|;
name|this
operator|.
name|socket
operator|.
name|setKeepAlive
argument_list|(
name|tcpKeepAlive
argument_list|)
expr_stmt|;
if|if
condition|(
name|localAddr
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|socket
operator|.
name|bind
argument_list|(
name|localAddr
argument_list|)
expr_stmt|;
block|}
comment|// connection time out is 20s
name|NetUtils
operator|.
name|connect
argument_list|(
name|this
operator|.
name|socket
argument_list|,
name|remoteId
operator|.
name|getAddress
argument_list|()
argument_list|,
name|getSocketTimeout
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|remoteId
operator|.
name|rpcTimeout
operator|>
literal|0
condition|)
block|{
name|pingInterval
operator|=
name|remoteId
operator|.
name|rpcTimeout
expr_stmt|;
comment|// overwrite pingInterval
block|}
name|this
operator|.
name|socket
operator|.
name|setSoTimeout
argument_list|(
name|pingInterval
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|toe
parameter_list|)
block|{
comment|/* The max number of retries is 45,            * which amounts to 20s*45 = 15 minutes retries.            */
name|handleConnectionFailure
argument_list|(
name|timeoutFailures
operator|++
argument_list|,
name|maxRetries
argument_list|,
name|toe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|handleConnectionFailure
argument_list|(
name|ioFailures
operator|++
argument_list|,
name|maxRetries
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|closeConnection
parameter_list|()
block|{
if|if
condition|(
name|socket
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// close the current connection
try|try
block|{
if|if
condition|(
name|socket
operator|.
name|getOutputStream
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|socket
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{
comment|// Can happen if the socket is already closed
block|}
try|try
block|{
if|if
condition|(
name|socket
operator|.
name|getInputStream
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|socket
operator|.
name|getInputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{
comment|// Can happen if the socket is already closed
block|}
try|try
block|{
if|if
condition|(
name|socket
operator|.
name|getChannel
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|socket
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{
comment|// Can happen if the socket is already closed
block|}
try|try
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not able to close a socket"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// set socket to null so that the next call to setupIOstreams
comment|// can start the process of connect all over again.
name|socket
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      *  Handle connection failures      *      * If the current number of retries is equal to the max number of retries,      * stop retrying and throw the exception; Otherwise backoff N seconds and      * try connecting again.      *      * This Method is only called from inside setupIOstreams(), which is      * synchronized. Hence the sleep is synchronized; the locks will be retained.      *      * @param curRetries current number of retries      * @param maxRetries max number of retries allowed      * @param ioe failure reason      * @throws IOException if max number of retries is reached      */
specifier|private
name|void
name|handleConnectionFailure
parameter_list|(
name|int
name|curRetries
parameter_list|,
name|int
name|maxRetries
parameter_list|,
name|IOException
name|ioe
parameter_list|)
throws|throws
name|IOException
block|{
name|closeConnection
argument_list|()
expr_stmt|;
comment|// throw the exception if the maximum number of retries is reached
if|if
condition|(
name|curRetries
operator|>=
name|maxRetries
condition|)
block|{
throw|throw
name|ioe
throw|;
block|}
comment|// otherwise back off and retry
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|failureSleep
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{}
name|LOG
operator|.
name|info
argument_list|(
literal|"Retrying connect to server: "
operator|+
name|remoteId
operator|.
name|getAddress
argument_list|()
operator|+
literal|" after sleeping "
operator|+
name|failureSleep
operator|+
literal|"ms. Already tried "
operator|+
name|curRetries
operator|+
literal|" time(s)."
argument_list|)
expr_stmt|;
block|}
comment|/* wait till someone signals us to start reading RPC response or      * it is idle too long, it is marked as to be closed,      * or the client is marked as not running.      *      * Return true if it is time to read a response; false otherwise.      */
specifier|protected
specifier|synchronized
name|boolean
name|waitForWork
parameter_list|()
block|{
if|if
condition|(
name|calls
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|shouldCloseConnection
operator|.
name|get
argument_list|()
operator|&&
name|running
operator|.
name|get
argument_list|()
condition|)
block|{
name|long
name|timeout
init|=
name|maxIdleTime
operator|-
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastActivity
operator|.
name|get
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|wait
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{}
block|}
block|}
if|if
condition|(
operator|!
name|calls
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|shouldCloseConnection
operator|.
name|get
argument_list|()
operator|&&
name|running
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|shouldCloseConnection
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|calls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// idle connection closed or stopped
name|markClosed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// get stopped but there are still pending requests
name|markClosed
argument_list|(
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|()
operator|.
name|initCause
argument_list|(
operator|new
name|InterruptedException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|InetSocketAddress
name|getRemoteAddress
parameter_list|()
block|{
return|return
name|remoteId
operator|.
name|getAddress
argument_list|()
return|;
block|}
comment|/* Send a ping to the server if the time elapsed      * since last I/O activity is equal to or greater than the ping interval      */
specifier|protected
specifier|synchronized
name|void
name|sendPing
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Can we do tcp keepalive instead of this pinging?
name|long
name|curTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|curTime
operator|-
name|lastActivity
operator|.
name|get
argument_list|()
operator|>=
name|pingInterval
condition|)
block|{
name|lastActivity
operator|.
name|set
argument_list|(
name|curTime
argument_list|)
expr_stmt|;
comment|//noinspection SynchronizeOnNonFinalField
synchronized|synchronized
init|(
name|this
operator|.
name|out
init|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|PING_CALL_ID
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": starting, connections "
operator|+
name|connections
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
while|while
condition|(
name|waitForWork
argument_list|()
condition|)
block|{
comment|// Wait here for work - read or close connection
name|readResponse
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|getName
argument_list|()
operator|+
literal|": unexpected exception receiving call responses"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|markClosed
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Unexpected exception receiving call responses"
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": stopped, connections "
operator|+
name|connections
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|disposeSasl
parameter_list|()
block|{
if|if
condition|(
name|saslRpcClient
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|saslRpcClient
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|saslRpcClient
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error disposing of SASL client"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|synchronized
name|boolean
name|shouldAuthenticateOverKrb
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|loginUser
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|realUser
init|=
name|currentUser
operator|.
name|getRealUser
argument_list|()
decl_stmt|;
return|return
name|authMethod
operator|==
name|AuthMethod
operator|.
name|KERBEROS
operator|&&
name|loginUser
operator|!=
literal|null
operator|&&
comment|//Make sure user logged in using Kerberos either keytab or TGT
name|loginUser
operator|.
name|hasKerberosCredentials
argument_list|()
operator|&&
comment|// relogin only in case it is the login user (e.g. JT)
comment|// or superuser (like oozie).
operator|(
name|loginUser
operator|.
name|equals
argument_list|(
name|currentUser
argument_list|)
operator|||
name|loginUser
operator|.
name|equals
argument_list|(
name|realUser
argument_list|)
operator|)
return|;
block|}
specifier|private
specifier|synchronized
name|boolean
name|setupSaslConnection
parameter_list|(
specifier|final
name|InputStream
name|in2
parameter_list|,
specifier|final
name|OutputStream
name|out2
parameter_list|)
throws|throws
name|IOException
block|{
name|saslRpcClient
operator|=
operator|new
name|HBaseSaslRpcClient
argument_list|(
name|authMethod
argument_list|,
name|token
argument_list|,
name|serverPrincipal
argument_list|,
name|fallbackAllowed
argument_list|)
expr_stmt|;
return|return
name|saslRpcClient
operator|.
name|saslConnect
argument_list|(
name|in2
argument_list|,
name|out2
argument_list|)
return|;
block|}
comment|/**      * If multiple clients with the same principal try to connect      * to the same server at the same time, the server assumes a      * replay attack is in progress. This is a feature of kerberos.      * In order to work around this, what is done is that the client      * backs off randomly and tries to initiate the connection      * again.      * The other problem is to do with ticket expiry. To handle that,      * a relogin is attempted.      *<p>      * The retry logic is governed by the {@link #shouldAuthenticateOverKrb}      * method. In case when the user doesn't have valid credentials, we don't      * need to retry (from cache or ticket). In such cases, it is prudent to      * throw a runtime exception when we receive a SaslException from the      * underlying authentication implementation, so there is no retry from      * other high level (for eg, HCM or HBaseAdmin).      *</p>      */
specifier|private
specifier|synchronized
name|void
name|handleSaslConnectionFailure
parameter_list|(
specifier|final
name|int
name|currRetries
parameter_list|,
specifier|final
name|int
name|maxRetries
parameter_list|,
specifier|final
name|Exception
name|ex
parameter_list|,
specifier|final
name|Random
name|rand
parameter_list|,
specifier|final
name|UserGroupInformation
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|closeConnection
argument_list|()
expr_stmt|;
if|if
condition|(
name|shouldAuthenticateOverKrb
argument_list|()
condition|)
block|{
if|if
condition|(
name|currRetries
operator|<
name|maxRetries
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception encountered while connecting to "
operator|+
literal|"the server : "
operator|+
name|ex
argument_list|)
expr_stmt|;
comment|//try re-login
if|if
condition|(
name|UserGroupInformation
operator|.
name|isLoginKeytabBased
argument_list|()
condition|)
block|{
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|reloginFromKeytab
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|reloginFromTicketCache
argument_list|()
expr_stmt|;
block|}
name|disposeSasl
argument_list|()
expr_stmt|;
comment|//have granularity of milliseconds
comment|//we are sleeping with the Connection lock held but since this
comment|//connection instance is being used for connecting to the server
comment|//in question, it is okay
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|rand
operator|.
name|nextInt
argument_list|(
name|reloginMaxBackoff
argument_list|)
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Couldn't setup connection for "
operator|+
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
operator|+
literal|" to "
operator|+
name|serverPrincipal
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception encountered while connecting to "
operator|+
literal|"the server : "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|RemoteException
condition|)
block|{
throw|throw
operator|(
name|RemoteException
operator|)
name|ex
throw|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|SaslException
condition|)
block|{
name|String
name|msg
init|=
literal|"SASL authentication failed."
operator|+
literal|" The most likely cause is missing or invalid credentials."
operator|+
literal|" Consider 'kinit'."
decl_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
name|msg
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|,
name|ex
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|void
name|setupIOstreams
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|socket
operator|!=
literal|null
operator|||
name|shouldCloseConnection
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|failedServers
operator|.
name|isFailedServer
argument_list|(
name|remoteId
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not trying to connect to "
operator|+
name|server
operator|+
literal|" this server is in the failed servers list"
argument_list|)
expr_stmt|;
block|}
name|IOException
name|e
init|=
operator|new
name|FailedServerException
argument_list|(
literal|"This server is in the failed servers list: "
operator|+
name|server
argument_list|)
decl_stmt|;
name|markClosed
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connecting to "
operator|+
name|server
argument_list|)
expr_stmt|;
block|}
name|short
name|numRetries
init|=
literal|0
decl_stmt|;
specifier|final
name|short
name|MAX_RETRIES
init|=
literal|5
decl_stmt|;
name|Random
name|rand
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|setupConnection
argument_list|()
expr_stmt|;
name|InputStream
name|inStream
init|=
name|NetUtils
operator|.
name|getInputStream
argument_list|(
name|socket
argument_list|)
decl_stmt|;
comment|// This creates a socket with a write timeout. This timeout cannot be changed,
comment|//  RpcClient allows to change the timeout dynamically, but we can only
comment|//  change the read timeout today.
name|OutputStream
name|outStream
init|=
name|NetUtils
operator|.
name|getOutputStream
argument_list|(
name|socket
argument_list|,
name|pingInterval
argument_list|)
decl_stmt|;
comment|// Write out the preamble -- MAGIC, version, and auth to use.
name|writeConnectionHeaderPreamble
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|useSasl
condition|)
block|{
specifier|final
name|InputStream
name|in2
init|=
name|inStream
decl_stmt|;
specifier|final
name|OutputStream
name|out2
init|=
name|outStream
decl_stmt|;
name|UserGroupInformation
name|ticket
init|=
name|remoteId
operator|.
name|getTicket
argument_list|()
operator|.
name|getUGI
argument_list|()
decl_stmt|;
if|if
condition|(
name|authMethod
operator|==
name|AuthMethod
operator|.
name|KERBEROS
condition|)
block|{
if|if
condition|(
name|ticket
operator|!=
literal|null
operator|&&
name|ticket
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ticket
operator|=
name|ticket
operator|.
name|getRealUser
argument_list|()
expr_stmt|;
block|}
block|}
name|boolean
name|continueSasl
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ticket
operator|==
literal|null
condition|)
throw|throw
operator|new
name|FatalConnectionException
argument_list|(
literal|"ticket/user is null"
argument_list|)
throw|;
try|try
block|{
name|continueSasl
operator|=
name|ticket
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|setupSaslConnection
argument_list|(
name|in2
argument_list|,
name|out2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|rand
operator|==
literal|null
condition|)
block|{
name|rand
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
name|handleSaslConnectionFailure
argument_list|(
name|numRetries
operator|++
argument_list|,
name|MAX_RETRIES
argument_list|,
name|ex
argument_list|,
name|rand
argument_list|,
name|ticket
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|continueSasl
condition|)
block|{
comment|// Sasl connect is successful. Let's set up Sasl i/o streams.
name|inStream
operator|=
name|saslRpcClient
operator|.
name|getInputStream
argument_list|(
name|inStream
argument_list|)
expr_stmt|;
name|outStream
operator|=
name|saslRpcClient
operator|.
name|getOutputStream
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// fall back to simple auth because server told us so.
name|authMethod
operator|=
name|AuthMethod
operator|.
name|SIMPLE
expr_stmt|;
name|useSasl
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|this
operator|.
name|in
operator|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|PingInputStream
argument_list|(
name|inStream
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|out
operator|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|outStream
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now write out the connection header
name|writeConnectionHeader
argument_list|()
expr_stmt|;
comment|// update last activity time
name|touch
argument_list|()
expr_stmt|;
comment|// start the receiver thread after the socket connection has been set up
name|start
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failedServers
operator|.
name|addToFailedServers
argument_list|(
name|remoteId
operator|.
name|address
argument_list|)
expr_stmt|;
name|IOException
name|e
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|IOException
condition|)
block|{
name|e
operator|=
operator|(
name|IOException
operator|)
name|t
expr_stmt|;
name|markClosed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|e
operator|=
operator|new
name|IOException
argument_list|(
literal|"Could not set up IO Streams"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|markClosed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|close
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Write the RPC header:<MAGIC WORD -- 'HBas'><ONEBYTE_VERSION><ONEBYTE_AUTH_TYPE>      */
specifier|private
name|void
name|writeConnectionHeaderPreamble
parameter_list|(
name|OutputStream
name|outStream
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Assemble the preamble up in a buffer first and then send it.  Writing individual elements,
comment|// they are getting sent across piecemeal according to wireshark and then server is messing
comment|// up the reading on occasion (the passed in stream is not buffered yet).
comment|// Preamble is six bytes -- 'HBas' + VERSION + AUTH_CODE
name|int
name|rpcHeaderLen
init|=
name|HConstants
operator|.
name|RPC_HEADER
operator|.
name|array
argument_list|()
operator|.
name|length
decl_stmt|;
name|byte
index|[]
name|preamble
init|=
operator|new
name|byte
index|[
name|rpcHeaderLen
operator|+
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|HConstants
operator|.
name|RPC_HEADER
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|preamble
argument_list|,
literal|0
argument_list|,
name|rpcHeaderLen
argument_list|)
expr_stmt|;
name|preamble
index|[
name|rpcHeaderLen
index|]
operator|=
name|HConstants
operator|.
name|RPC_CURRENT_VERSION
expr_stmt|;
name|preamble
index|[
name|rpcHeaderLen
operator|+
literal|1
index|]
operator|=
name|authMethod
operator|.
name|code
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|preamble
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Write the connection header.      * Out is not synchronized because only the first thread does this.      */
specifier|private
name|void
name|writeConnectionHeader
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|out
init|)
block|{
name|this
operator|.
name|out
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|header
operator|.
name|getSerializedSize
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|header
operator|.
name|writeTo
argument_list|(
name|this
operator|.
name|out
argument_list|)
expr_stmt|;
name|this
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Close the connection. */
specifier|protected
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
operator|!
name|shouldCloseConnection
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|getName
argument_list|()
operator|+
literal|": the connection is not in the closed state"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// release the resources
comment|// first thing to do;take the connection out of the connection list
synchronized|synchronized
init|(
name|connections
init|)
block|{
name|connections
operator|.
name|remove
argument_list|(
name|remoteId
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|// close the streams and therefore the socket
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|this
operator|.
name|out
operator|=
literal|null
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|in
operator|=
literal|null
expr_stmt|;
name|disposeSasl
argument_list|()
expr_stmt|;
comment|// clean up all calls
if|if
condition|(
name|closeException
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|calls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|getName
argument_list|()
operator|+
literal|": connection is closed for no cause and calls are not empty. "
operator|+
literal|"#Calls: "
operator|+
name|calls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// clean up calls anyway
name|closeException
operator|=
operator|new
name|IOException
argument_list|(
literal|"Unexpected closed connection"
argument_list|)
expr_stmt|;
name|cleanupCalls
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// log the info
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": closing ipc connection to "
operator|+
name|server
operator|+
literal|": "
operator|+
name|closeException
operator|.
name|getMessage
argument_list|()
argument_list|,
name|closeException
argument_list|)
expr_stmt|;
block|}
comment|// cleanup calls
name|cleanupCalls
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": closed"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initiates a call by sending the parameter to the remote server.      * Note: this is not called from the Connection thread, but by other      * threads.      * @param call      * @see #readResponse()      */
specifier|protected
name|void
name|writeRequest
parameter_list|(
name|Call
name|call
parameter_list|)
block|{
if|if
condition|(
name|shouldCloseConnection
operator|.
name|get
argument_list|()
condition|)
return|return;
try|try
block|{
name|RequestHeader
operator|.
name|Builder
name|builder
init|=
name|RequestHeader
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setCallId
argument_list|(
name|call
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|Trace
operator|.
name|isTracing
argument_list|()
condition|)
block|{
name|Span
name|s
init|=
name|Trace
operator|.
name|currentSpan
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTraceInfo
argument_list|(
name|RPCTInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setParentId
argument_list|(
name|s
operator|.
name|getSpanId
argument_list|()
argument_list|)
operator|.
name|setTraceId
argument_list|(
name|s
operator|.
name|getTraceId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setMethodName
argument_list|(
name|call
operator|.
name|md
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRequestParam
argument_list|(
name|call
operator|.
name|param
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|ByteBuffer
name|cellBlock
init|=
name|ipcUtil
operator|.
name|buildCellBlock
argument_list|(
name|this
operator|.
name|codec
argument_list|,
name|this
operator|.
name|compressor
argument_list|,
name|call
operator|.
name|cells
argument_list|)
decl_stmt|;
if|if
condition|(
name|cellBlock
operator|!=
literal|null
condition|)
block|{
name|CellBlockMeta
operator|.
name|Builder
name|cellBlockBuilder
init|=
name|CellBlockMeta
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|cellBlockBuilder
operator|.
name|setLength
argument_list|(
name|cellBlock
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCellBlockMeta
argument_list|(
name|cellBlockBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//noinspection SynchronizeOnNonFinalField
name|RequestHeader
name|header
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|out
init|)
block|{
comment|// FindBugs IS2_INCONSISTENT_SYNC
name|IPCUtil
operator|.
name|write
argument_list|(
name|this
operator|.
name|out
argument_list|,
name|header
argument_list|,
name|call
operator|.
name|param
argument_list|,
name|cellBlock
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": wrote request header "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|header
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|markClosed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Receive a response.      * Because only one receiver, so no synchronization on in.      */
specifier|protected
name|void
name|readResponse
parameter_list|()
block|{
if|if
condition|(
name|shouldCloseConnection
operator|.
name|get
argument_list|()
condition|)
return|return;
name|touch
argument_list|()
expr_stmt|;
name|int
name|totalSize
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
comment|// See HBaseServer.Call.setResponse for where we write out the response.
comment|// Total size of the response.  Unused.  But have to read it in anyways.
name|totalSize
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
comment|// Read the header
name|ResponseHeader
name|responseHeader
init|=
name|ResponseHeader
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|id
init|=
name|responseHeader
operator|.
name|getCallId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": got response header "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|responseHeader
argument_list|)
operator|+
literal|", totalSize: "
operator|+
name|totalSize
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
block|}
name|Call
name|call
init|=
name|calls
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|call
operator|==
literal|null
condition|)
block|{
comment|// So we got a response for which we have no corresponding 'call' here on the client-side.
comment|// We probably timed out waiting, cleaned up all references, and now the server decides
comment|// to return a response.  There is nothing we can do w/ the response at this stage. Clean
comment|// out the wire of the response so its out of the way and we can get other responses on
comment|// this connection.
name|int
name|readSoFar
init|=
name|IPCUtil
operator|.
name|getTotalSizeWhenWrittenDelimited
argument_list|(
name|responseHeader
argument_list|)
decl_stmt|;
name|int
name|whatIsLeftToRead
init|=
name|totalSize
operator|-
name|readSoFar
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unknown callId: "
operator|+
name|id
operator|+
literal|", skipping over this response of "
operator|+
name|whatIsLeftToRead
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|skipFully
argument_list|(
name|in
argument_list|,
name|whatIsLeftToRead
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|responseHeader
operator|.
name|hasException
argument_list|()
condition|)
block|{
name|ExceptionResponse
name|exceptionResponse
init|=
name|responseHeader
operator|.
name|getException
argument_list|()
decl_stmt|;
name|RemoteException
name|re
init|=
name|createRemoteException
argument_list|(
name|exceptionResponse
argument_list|)
decl_stmt|;
if|if
condition|(
name|isFatalConnectionException
argument_list|(
name|exceptionResponse
argument_list|)
condition|)
block|{
name|markClosed
argument_list|(
name|re
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|call
operator|!=
literal|null
condition|)
name|call
operator|.
name|setException
argument_list|(
name|re
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Message
name|value
init|=
literal|null
decl_stmt|;
comment|// Call may be null because it may have timedout and been cleaned up on this side already
if|if
condition|(
name|call
operator|!=
literal|null
operator|&&
name|call
operator|.
name|responseDefaultType
operator|!=
literal|null
condition|)
block|{
name|Builder
name|builder
init|=
name|call
operator|.
name|responseDefaultType
operator|.
name|newBuilderForType
argument_list|()
decl_stmt|;
name|builder
operator|.
name|mergeDelimitedFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|value
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|CellScanner
name|cellBlockScanner
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|responseHeader
operator|.
name|hasCellBlockMeta
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|responseHeader
operator|.
name|getCellBlockMeta
argument_list|()
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cellBlock
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|this
operator|.
name|in
argument_list|,
name|cellBlock
argument_list|,
literal|0
argument_list|,
name|cellBlock
operator|.
name|length
argument_list|)
expr_stmt|;
name|cellBlockScanner
operator|=
name|ipcUtil
operator|.
name|createCellScanner
argument_list|(
name|this
operator|.
name|codec
argument_list|,
name|this
operator|.
name|compressor
argument_list|,
name|cellBlock
argument_list|)
expr_stmt|;
block|}
comment|// it's possible that this call may have been cleaned up due to a RPC
comment|// timeout, so check if it still exists before setting the value.
if|if
condition|(
name|call
operator|!=
literal|null
condition|)
name|call
operator|.
name|setResponse
argument_list|(
name|value
argument_list|,
name|cellBlockScanner
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|call
operator|!=
literal|null
condition|)
name|calls
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SocketTimeoutException
operator|&&
name|remoteId
operator|.
name|rpcTimeout
operator|>
literal|0
condition|)
block|{
comment|// Clean up open calls but don't treat this as a fatal condition,
comment|// since we expect certain responses to not make it by the specified
comment|// {@link ConnectionId#rpcTimeout}.
name|closeException
operator|=
name|e
expr_stmt|;
block|}
else|else
block|{
comment|// Treat this as a fatal condition and close this connection
name|markClosed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|remoteId
operator|.
name|rpcTimeout
operator|>
literal|0
condition|)
block|{
name|cleanupCalls
argument_list|(
name|remoteId
operator|.
name|rpcTimeout
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @param e      * @return True if the exception is a fatal connection exception.      */
specifier|private
name|boolean
name|isFatalConnectionException
parameter_list|(
specifier|final
name|ExceptionResponse
name|e
parameter_list|)
block|{
return|return
name|e
operator|.
name|getExceptionClassName
argument_list|()
operator|.
name|equals
argument_list|(
name|FatalConnectionException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @param e      * @return RemoteException made from passed<code>e</code>      */
specifier|private
name|RemoteException
name|createRemoteException
parameter_list|(
specifier|final
name|ExceptionResponse
name|e
parameter_list|)
block|{
name|String
name|innerExceptionClassName
init|=
name|e
operator|.
name|getExceptionClassName
argument_list|()
decl_stmt|;
name|boolean
name|doNotRetry
init|=
name|e
operator|.
name|getDoNotRetry
argument_list|()
decl_stmt|;
return|return
name|e
operator|.
name|hasHostname
argument_list|()
condition|?
comment|// If a hostname then add it to the RemoteWithExtrasException
operator|new
name|RemoteWithExtrasException
argument_list|(
name|innerExceptionClassName
argument_list|,
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|,
name|e
operator|.
name|getHostname
argument_list|()
argument_list|,
name|e
operator|.
name|getPort
argument_list|()
argument_list|,
name|doNotRetry
argument_list|)
else|:
operator|new
name|RemoteWithExtrasException
argument_list|(
name|innerExceptionClassName
argument_list|,
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|,
name|doNotRetry
argument_list|)
return|;
block|}
specifier|protected
specifier|synchronized
name|void
name|markClosed
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|shouldCloseConnection
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|closeException
operator|=
name|e
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* Cleanup all calls and mark them as done */
specifier|protected
name|void
name|cleanupCalls
parameter_list|()
block|{
name|cleanupCalls
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"NN_NAKED_NOTIFY"
argument_list|,
name|justification
operator|=
literal|"Notify because timedout"
argument_list|)
specifier|protected
name|void
name|cleanupCalls
parameter_list|(
name|long
name|rpcTimeout
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Call
argument_list|>
argument_list|>
name|itor
init|=
name|calls
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Call
name|c
init|=
name|itor
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|waitTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|c
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|waitTime
operator|>=
name|rpcTimeout
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|closeException
operator|==
literal|null
condition|)
block|{
comment|// There may be no exception in the case that there are many calls
comment|// being multiplexed over this connection and these are succeeding
comment|// fine while this Call object is taking a long time to finish
comment|// over on the server; e.g. I just asked the regionserver to bulk
comment|// open 3k regions or its a big fat multiput into a heavily-loaded
comment|// server (Perhaps this only happens at the extremes?)
name|this
operator|.
name|closeException
operator|=
operator|new
name|CallTimeoutException
argument_list|(
literal|"Call id="
operator|+
name|c
operator|.
name|id
operator|+
literal|", waitTime="
operator|+
name|waitTime
operator|+
literal|", rpcTimetout="
operator|+
name|rpcTimeout
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|setException
argument_list|(
name|this
operator|.
name|closeException
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|c
init|)
block|{
name|c
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|itor
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
try|try
block|{
if|if
condition|(
operator|!
name|calls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Call
name|firstCall
init|=
name|calls
operator|.
name|get
argument_list|(
name|calls
operator|.
name|firstKey
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|maxWaitTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|firstCall
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxWaitTime
operator|<
name|rpcTimeout
condition|)
block|{
name|rpcTimeout
operator|-=
name|maxWaitTime
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|shouldCloseConnection
operator|.
name|get
argument_list|()
condition|)
block|{
name|closeException
operator|=
literal|null
expr_stmt|;
name|setSocketTimeout
argument_list|(
name|socket
argument_list|,
operator|(
name|int
operator|)
name|rpcTimeout
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SocketException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Couldn't lower timeout, which may result in longer than expected calls"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"IS2_INCONSISTENT_SYNC"
argument_list|,
name|justification
operator|=
literal|"Presume sync not needed setting socket timeout"
argument_list|)
specifier|private
specifier|static
name|void
name|setSocketTimeout
parameter_list|(
specifier|final
name|Socket
name|socket
parameter_list|,
specifier|final
name|int
name|rpcTimeout
parameter_list|)
throws|throws
name|java
operator|.
name|net
operator|.
name|SocketException
block|{
if|if
condition|(
name|socket
operator|==
literal|null
condition|)
return|return;
name|socket
operator|.
name|setSoTimeout
argument_list|(
name|rpcTimeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * Client-side call timeout    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
specifier|static
class|class
name|CallTimeoutException
extends|extends
name|IOException
block|{
specifier|public
name|CallTimeoutException
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Construct an IPC cluster client whose values are of the {@link Message} class.    * @param conf configuration    * @param clusterId    * @param factory socket factory    */
name|RpcClient
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|SocketFactory
name|factory
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|clusterId
argument_list|,
name|factory
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct an IPC cluster client whose values are of the {@link Message} class.    * @param conf configuration    * @param clusterId    * @param factory socket factory    * @param localAddr client socket bind address    */
name|RpcClient
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|SocketFactory
name|factory
parameter_list|,
name|SocketAddress
name|localAddr
parameter_list|)
block|{
name|this
operator|.
name|maxIdleTime
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.ipc.client.connection.maxidletime"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
comment|//10s
name|this
operator|.
name|maxRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.ipc.client.connect.max.retries"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|failureSleep
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpNoDelay
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.ipc.client.tcpnodelay"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpKeepAlive
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hbase.ipc.client.tcpkeepalive"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|pingInterval
operator|=
name|getPingInterval
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|ipcUtil
operator|=
operator|new
name|IPCUtil
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|getCodec
argument_list|()
expr_stmt|;
name|this
operator|.
name|compressor
operator|=
name|getCompressor
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|socketFactory
operator|=
name|factory
expr_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|clusterId
operator|!=
literal|null
condition|?
name|clusterId
else|:
name|HConstants
operator|.
name|CLUSTER_ID_DEFAULT
expr_stmt|;
name|this
operator|.
name|connections
operator|=
operator|new
name|PoolMap
argument_list|<
name|ConnectionId
argument_list|,
name|Connection
argument_list|>
argument_list|(
name|getPoolType
argument_list|(
name|conf
argument_list|)
argument_list|,
name|getPoolSize
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|failedServers
operator|=
operator|new
name|FailedServers
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|fallbackAllowed
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED_KEY
argument_list|,
name|IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|localAddr
operator|=
name|localAddr
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Codec="
operator|+
name|this
operator|.
name|codec
operator|+
literal|", compressor="
operator|+
name|this
operator|.
name|compressor
operator|+
literal|", tcpKeepAlive="
operator|+
name|this
operator|.
name|tcpKeepAlive
operator|+
literal|", tcpNoDelay="
operator|+
name|this
operator|.
name|tcpNoDelay
operator|+
literal|", maxIdleTime="
operator|+
name|this
operator|.
name|maxIdleTime
operator|+
literal|", maxRetries="
operator|+
name|this
operator|.
name|maxRetries
operator|+
literal|", fallbackAllowed="
operator|+
name|this
operator|.
name|fallbackAllowed
operator|+
literal|", ping interval="
operator|+
name|this
operator|.
name|pingInterval
operator|+
literal|"ms"
operator|+
literal|", bind address="
operator|+
operator|(
name|this
operator|.
name|localAddr
operator|!=
literal|null
condition|?
name|this
operator|.
name|localAddr
else|:
literal|"null"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Construct an IPC client for the cluster<code>clusterId</code> with the default SocketFactory    * @param conf configuration    * @param clusterId    */
specifier|public
name|RpcClient
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|clusterId
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|clusterId
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct an IPC client for the cluster<code>clusterId</code> with the default SocketFactory    * @param conf configuration    * @param clusterId    * @param localAddr client socket bind address.    */
specifier|public
name|RpcClient
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|SocketAddress
name|localAddr
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|clusterId
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
name|localAddr
argument_list|)
expr_stmt|;
block|}
comment|/**    * Encapsulate the ugly casting and RuntimeException conversion in private method.    * @return Codec to use on this client.    */
name|Codec
name|getCodec
parameter_list|()
block|{
comment|// For NO CODEC, "hbase.client.rpc.codec" must be the empty string AND
comment|// "hbase.client.default.rpc.codec" -- because default is to do cell block encoding.
name|String
name|className
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.client.rpc.codec"
argument_list|,
name|getDefaultCodec
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
operator|||
name|className
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
try|try
block|{
return|return
operator|(
name|Codec
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed getting codec "
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|String
name|getDefaultCodec
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|)
block|{
comment|// If "hbase.client.default.rpc.codec" is empty string -- you can't set it to null because
comment|// Configuration will complain -- then no default codec (and we'll pb everything).  Else
comment|// default is KeyValueCodec
return|return
name|c
operator|.
name|get
argument_list|(
literal|"hbase.client.default.rpc.codec"
argument_list|,
name|KeyValueCodec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Encapsulate the ugly casting and RuntimeException conversion in private method.    * @param conf    * @return The compressor to use on this client.    */
specifier|private
specifier|static
name|CompressionCodec
name|getCompressor
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|className
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.client.rpc.compressor"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
operator|||
name|className
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
try|try
block|{
return|return
operator|(
name|CompressionCodec
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed getting compressor "
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return the pool type specified in the configuration, which must be set to    * either {@link PoolType#RoundRobin} or {@link PoolType#ThreadLocal},    * otherwise default to the former.    *    * For applications with many user threads, use a small round-robin pool. For    * applications with few user threads, you may want to try using a    * thread-local pool. In any case, the number of {@link RpcClient} instances    * should not exceed the operating system's hard limit on the number of    * connections.    *    * @param config configuration    * @return either a {@link PoolType#RoundRobin} or    *         {@link PoolType#ThreadLocal}    */
specifier|protected
specifier|static
name|PoolType
name|getPoolType
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
return|return
name|PoolType
operator|.
name|valueOf
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_IPC_POOL_TYPE
argument_list|)
argument_list|,
name|PoolType
operator|.
name|RoundRobin
argument_list|,
name|PoolType
operator|.
name|ThreadLocal
argument_list|)
return|;
block|}
comment|/**    * Return the pool size specified in the configuration, which is applicable only if    * the pool type is {@link PoolType#RoundRobin}.    *    * @param config    * @return the maximum pool size    */
specifier|protected
specifier|static
name|int
name|getPoolSize
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
return|return
name|config
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_IPC_POOL_SIZE
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|/** Return the socket factory of this client    *    * @return this client's socket factory    */
name|SocketFactory
name|getSocketFactory
parameter_list|()
block|{
return|return
name|socketFactory
return|;
block|}
comment|/** Stop all threads related to this client.  No further calls may be made    * using this client. */
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopping rpc client"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|running
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
return|return;
comment|// wake up all connections
synchronized|synchronized
init|(
name|connections
init|)
block|{
for|for
control|(
name|Connection
name|conn
range|:
name|connections
operator|.
name|values
argument_list|()
control|)
block|{
name|conn
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
comment|// wait until all connections are closed
while|while
condition|(
operator|!
name|connections
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{       }
block|}
block|}
comment|/** Make a call, passing<code>param</code>, to the IPC server running at    *<code>address</code> which is servicing the<code>protocol</code> protocol,    * with the<code>ticket</code> credentials, returning the value.    * Throws exceptions if there are network problems or if the remote code    * threw an exception.    * @param md    * @param param    * @param cells    * @param addr    * @param returnType    * @param ticket Be careful which ticket you pass.  A new user will mean a new Connection.    * {@link User#getCurrent()} makes a new instance of User each time so will be a new Connection    * each time.    * @param rpcTimeout    * @return A pair with the Message response and the Cell data (if any).    * @throws InterruptedException    * @throws IOException    */
name|Pair
argument_list|<
name|Message
argument_list|,
name|CellScanner
argument_list|>
name|call
parameter_list|(
name|MethodDescriptor
name|md
parameter_list|,
name|Message
name|param
parameter_list|,
name|CellScanner
name|cells
parameter_list|,
name|Message
name|returnType
parameter_list|,
name|User
name|ticket
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|Call
name|call
init|=
operator|new
name|Call
argument_list|(
name|md
argument_list|,
name|param
argument_list|,
name|cells
argument_list|,
name|returnType
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|getConnection
argument_list|(
name|ticket
argument_list|,
name|call
argument_list|,
name|addr
argument_list|,
name|rpcTimeout
argument_list|,
name|this
operator|.
name|codec
argument_list|,
name|this
operator|.
name|compressor
argument_list|)
decl_stmt|;
name|connection
operator|.
name|writeRequest
argument_list|(
name|call
argument_list|)
expr_stmt|;
comment|// send the parameter
name|boolean
name|interrupted
init|=
literal|false
decl_stmt|;
comment|//noinspection SynchronizationOnLocalVariableOrMethodParameter
synchronized|synchronized
init|(
name|call
init|)
block|{
while|while
condition|(
operator|!
name|call
operator|.
name|done
condition|)
block|{
if|if
condition|(
name|connection
operator|.
name|shouldCloseConnection
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected closed connection"
argument_list|)
throw|;
block|}
try|try
block|{
name|call
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// wait for the result
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{
comment|// save the fact that we were interrupted
name|interrupted
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|interrupted
condition|)
block|{
comment|// set the interrupt flag now that we are done waiting
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|call
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|call
operator|.
name|error
operator|instanceof
name|RemoteException
condition|)
block|{
name|call
operator|.
name|error
operator|.
name|fillInStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|call
operator|.
name|error
throw|;
block|}
comment|// local exception
throw|throw
name|wrapException
argument_list|(
name|addr
argument_list|,
name|call
operator|.
name|error
argument_list|)
throw|;
block|}
return|return
operator|new
name|Pair
argument_list|<
name|Message
argument_list|,
name|CellScanner
argument_list|>
argument_list|(
name|call
operator|.
name|response
argument_list|,
name|call
operator|.
name|cells
argument_list|)
return|;
block|}
block|}
comment|/**    * Take an IOException and the address we were trying to connect to    * and return an IOException with the input exception as the cause.    * The new exception provides the stack trace of the place where    * the exception is thrown and some extra diagnostics information.    * If the exception is ConnectException or SocketTimeoutException,    * return a new one of the same type; Otherwise return an IOException.    *    * @param addr target address    * @param exception the relevant exception    * @return an exception to throw    */
specifier|protected
name|IOException
name|wrapException
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|,
name|IOException
name|exception
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|instanceof
name|ConnectException
condition|)
block|{
comment|//connection refused; include the host:port in the error
return|return
operator|(
name|ConnectException
operator|)
operator|new
name|ConnectException
argument_list|(
literal|"Call to "
operator|+
name|addr
operator|+
literal|" failed on connection exception: "
operator|+
name|exception
argument_list|)
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|instanceof
name|SocketTimeoutException
condition|)
block|{
return|return
operator|(
name|SocketTimeoutException
operator|)
operator|new
name|SocketTimeoutException
argument_list|(
literal|"Call to "
operator|+
name|addr
operator|+
literal|" failed because "
operator|+
name|exception
argument_list|)
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Call to "
operator|+
name|addr
operator|+
literal|" failed on local exception: "
operator|+
name|exception
argument_list|)
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
return|;
block|}
block|}
comment|/**    * Interrupt the connections to the given ip:port server. This should be called if the server    *  is known as actually dead. This will not prevent current operation to be retried, and,    *  depending on their own behavior, they may retry on the same server. This can be a feature,    *  for example at startup. In any case, they're likely to get connection refused (if the    *  process died) or no route to host: i.e. there next retries should be faster and with a    *  safe exception.    */
specifier|public
name|void
name|cancelConnections
parameter_list|(
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|,
name|IOException
name|ioe
parameter_list|)
block|{
synchronized|synchronized
init|(
name|connections
init|)
block|{
for|for
control|(
name|Connection
name|connection
range|:
name|connections
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|connection
operator|.
name|isAlive
argument_list|()
operator|&&
name|connection
operator|.
name|getRemoteAddress
argument_list|()
operator|.
name|getPort
argument_list|()
operator|==
name|port
operator|&&
name|connection
operator|.
name|getRemoteAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|.
name|equals
argument_list|(
name|hostname
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The server on "
operator|+
name|hostname
operator|+
literal|":"
operator|+
name|port
operator|+
literal|" is dead - stopping the connection "
operator|+
name|connection
operator|.
name|remoteId
argument_list|)
expr_stmt|;
name|connection
operator|.
name|closeConnection
argument_list|()
expr_stmt|;
comment|// We could do a connection.interrupt(), but it's safer not to do it, as the
comment|//  interrupted exception behavior is not defined nor enforced enough.
block|}
block|}
block|}
block|}
comment|/* Get a connection from the pool, or create a new one and add it to the    * pool.  Connections to a given host/port are reused. */
specifier|protected
name|Connection
name|getConnection
parameter_list|(
name|User
name|ticket
parameter_list|,
name|Call
name|call
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|int
name|rpcTimeout
parameter_list|,
specifier|final
name|Codec
name|codec
parameter_list|,
specifier|final
name|CompressionCodec
name|compressor
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|running
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|StoppedRpcClientException
argument_list|()
throw|;
name|Connection
name|connection
decl_stmt|;
name|ConnectionId
name|remoteId
init|=
operator|new
name|ConnectionId
argument_list|(
name|ticket
argument_list|,
name|call
operator|.
name|md
operator|.
name|getService
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|addr
argument_list|,
name|rpcTimeout
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|connections
init|)
block|{
name|connection
operator|=
name|connections
operator|.
name|get
argument_list|(
name|remoteId
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
name|connection
operator|=
name|createConnection
argument_list|(
name|remoteId
argument_list|,
name|this
operator|.
name|codec
argument_list|,
name|this
operator|.
name|compressor
argument_list|)
expr_stmt|;
name|connections
operator|.
name|put
argument_list|(
name|remoteId
argument_list|,
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
name|connection
operator|.
name|addCall
argument_list|(
name|call
argument_list|)
expr_stmt|;
comment|//we don't invoke the method below inside "synchronized (connections)"
comment|//block above. The reason for that is if the server happens to be slow,
comment|//it will take longer to establish a connection and that will slow the
comment|//entire system down.
comment|//Moreover, if the connection is currently created, there will be many threads
comment|// waiting here; as setupIOstreams is synchronized. If the connection fails with a
comment|// timeout, they will all fail simultaneously. This is checked in setupIOstreams.
name|connection
operator|.
name|setupIOstreams
argument_list|()
expr_stmt|;
return|return
name|connection
return|;
block|}
comment|/**    * This class holds the address and the user ticket, etc. The client connections    * to servers are uniquely identified by<remoteAddress, ticket, serviceName, rpcTimeout>    */
specifier|protected
specifier|static
class|class
name|ConnectionId
block|{
specifier|final
name|InetSocketAddress
name|address
decl_stmt|;
specifier|final
name|User
name|ticket
decl_stmt|;
specifier|final
name|int
name|rpcTimeout
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PRIME
init|=
literal|16777619
decl_stmt|;
specifier|final
name|String
name|serviceName
decl_stmt|;
name|ConnectionId
parameter_list|(
name|User
name|ticket
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|InetSocketAddress
name|address
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
name|this
operator|.
name|ticket
operator|=
name|ticket
expr_stmt|;
name|this
operator|.
name|rpcTimeout
operator|=
name|rpcTimeout
expr_stmt|;
name|this
operator|.
name|serviceName
operator|=
name|serviceName
expr_stmt|;
block|}
name|String
name|getServiceName
parameter_list|()
block|{
return|return
name|this
operator|.
name|serviceName
return|;
block|}
name|InetSocketAddress
name|getAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
name|User
name|getTicket
parameter_list|()
block|{
return|return
name|ticket
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|address
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|this
operator|.
name|serviceName
operator|+
literal|"/"
operator|+
name|this
operator|.
name|ticket
operator|+
literal|"/"
operator|+
name|this
operator|.
name|rpcTimeout
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|ConnectionId
condition|)
block|{
name|ConnectionId
name|id
init|=
operator|(
name|ConnectionId
operator|)
name|obj
decl_stmt|;
return|return
name|address
operator|.
name|equals
argument_list|(
name|id
operator|.
name|address
argument_list|)
operator|&&
operator|(
operator|(
name|ticket
operator|!=
literal|null
operator|&&
name|ticket
operator|.
name|equals
argument_list|(
name|id
operator|.
name|ticket
argument_list|)
operator|)
operator|||
operator|(
name|ticket
operator|==
name|id
operator|.
name|ticket
operator|)
operator|)
operator|&&
name|rpcTimeout
operator|==
name|id
operator|.
name|rpcTimeout
operator|&&
name|this
operator|.
name|serviceName
operator|==
name|id
operator|.
name|serviceName
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
comment|// simply use the default Object#hashcode() ?
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashcode
init|=
operator|(
name|address
operator|.
name|hashCode
argument_list|()
operator|+
name|PRIME
operator|*
operator|(
name|PRIME
operator|*
name|this
operator|.
name|serviceName
operator|.
name|hashCode
argument_list|()
operator|^
operator|(
name|ticket
operator|==
literal|null
condition|?
literal|0
else|:
name|ticket
operator|.
name|hashCode
argument_list|()
operator|)
operator|)
operator|)
operator|^
name|rpcTimeout
decl_stmt|;
return|return
name|hashcode
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setRpcTimeout
parameter_list|(
name|int
name|t
parameter_list|)
block|{
name|rpcTimeout
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|int
name|getRpcTimeout
parameter_list|()
block|{
return|return
name|rpcTimeout
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Returns the lower of the thread-local RPC time from {@link #setRpcTimeout(int)} and the given    * default timeout.    */
specifier|public
specifier|static
name|int
name|getRpcTimeout
parameter_list|(
name|int
name|defaultTimeout
parameter_list|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|defaultTimeout
argument_list|,
name|rpcTimeout
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|resetRpcTimeout
parameter_list|()
block|{
name|rpcTimeout
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|/** Make a blocking call.    * Throws exceptions if there are network problems or if the remote code    * threw an exception.    * @param md    * @param controller    * @param param    * @param returnType    * @param isa    * @param ticket Be careful which ticket you pass.  A new user will mean a new Connection.    * {@link User#getCurrent()} makes a new instance of User each time so will be a new Connection    * each time.    * @param rpcTimeout    * @return A pair with the Message response and the Cell data (if any).    * @throws InterruptedException    * @throws IOException    */
name|Message
name|callBlockingMethod
parameter_list|(
name|MethodDescriptor
name|md
parameter_list|,
name|RpcController
name|controller
parameter_list|,
name|Message
name|param
parameter_list|,
name|Message
name|returnType
parameter_list|,
specifier|final
name|User
name|ticket
parameter_list|,
specifier|final
name|InetSocketAddress
name|isa
parameter_list|,
specifier|final
name|int
name|rpcTimeout
parameter_list|)
throws|throws
name|ServiceException
block|{
name|long
name|startTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
name|PayloadCarryingRpcController
name|pcrc
init|=
operator|(
name|PayloadCarryingRpcController
operator|)
name|controller
decl_stmt|;
name|CellScanner
name|cells
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pcrc
operator|!=
literal|null
condition|)
block|{
name|cells
operator|=
name|pcrc
operator|.
name|cellScanner
argument_list|()
expr_stmt|;
comment|// Clear it here so we don't by mistake try and these cells processing results.
name|pcrc
operator|.
name|setCellScanner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|Pair
argument_list|<
name|Message
argument_list|,
name|CellScanner
argument_list|>
name|val
init|=
literal|null
decl_stmt|;
try|try
block|{
name|val
operator|=
name|call
argument_list|(
name|md
argument_list|,
name|param
argument_list|,
name|cells
argument_list|,
name|returnType
argument_list|,
name|ticket
argument_list|,
name|isa
argument_list|,
name|rpcTimeout
argument_list|)
expr_stmt|;
if|if
condition|(
name|pcrc
operator|!=
literal|null
condition|)
block|{
comment|// Shove the results into controller so can be carried across the proxy/pb service void.
if|if
condition|(
name|val
operator|.
name|getSecond
argument_list|()
operator|!=
literal|null
condition|)
name|pcrc
operator|.
name|setCellScanner
argument_list|(
name|val
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|getSecond
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Client dropping data on the floor!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|long
name|callTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Call: "
operator|+
name|md
operator|.
name|getName
argument_list|()
operator|+
literal|", callTime: "
operator|+
name|callTime
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|val
operator|.
name|getFirst
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates a "channel" that can be used by a blocking protobuf service.  Useful setting up    * protobuf blocking stubs.    * @param sn    * @param ticket    * @param rpcTimeout    * @return A blocking rpc channel that goes via this rpc client instance.    */
specifier|public
name|BlockingRpcChannel
name|createBlockingRpcChannel
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|,
specifier|final
name|User
name|ticket
parameter_list|,
specifier|final
name|int
name|rpcTimeout
parameter_list|)
block|{
return|return
operator|new
name|BlockingRpcChannelImplementation
argument_list|(
name|this
argument_list|,
name|sn
argument_list|,
name|ticket
argument_list|,
name|rpcTimeout
argument_list|)
return|;
block|}
comment|/**    * Blocking rpc channel that goes via hbase rpc.    */
comment|// Public so can be subclassed for tests.
specifier|public
specifier|static
class|class
name|BlockingRpcChannelImplementation
implements|implements
name|BlockingRpcChannel
block|{
specifier|private
specifier|final
name|InetSocketAddress
name|isa
decl_stmt|;
specifier|private
specifier|volatile
name|RpcClient
name|rpcClient
decl_stmt|;
specifier|private
specifier|final
name|int
name|rpcTimeout
decl_stmt|;
specifier|private
specifier|final
name|User
name|ticket
decl_stmt|;
specifier|protected
name|BlockingRpcChannelImplementation
parameter_list|(
specifier|final
name|RpcClient
name|rpcClient
parameter_list|,
specifier|final
name|ServerName
name|sn
parameter_list|,
specifier|final
name|User
name|ticket
parameter_list|,
specifier|final
name|int
name|rpcTimeout
parameter_list|)
block|{
name|this
operator|.
name|isa
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
argument_list|,
name|sn
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcClient
operator|=
name|rpcClient
expr_stmt|;
comment|// Set the rpc timeout to be the minimum of configured timeout and whatever the current
comment|// thread local setting is.
name|this
operator|.
name|rpcTimeout
operator|=
name|getRpcTimeout
argument_list|(
name|rpcTimeout
argument_list|)
expr_stmt|;
name|this
operator|.
name|ticket
operator|=
name|ticket
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Message
name|callBlockingMethod
parameter_list|(
name|MethodDescriptor
name|md
parameter_list|,
name|RpcController
name|controller
parameter_list|,
name|Message
name|param
parameter_list|,
name|Message
name|returnType
parameter_list|)
throws|throws
name|ServiceException
block|{
return|return
name|this
operator|.
name|rpcClient
operator|.
name|callBlockingMethod
argument_list|(
name|md
argument_list|,
name|controller
argument_list|,
name|param
argument_list|,
name|returnType
argument_list|,
name|this
operator|.
name|ticket
argument_list|,
name|this
operator|.
name|isa
argument_list|,
name|this
operator|.
name|rpcTimeout
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

