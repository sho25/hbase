begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RSGroupProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
operator|.
name|RSGroupInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Read rs group information from<code>hbase:rsgroup</code>.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|RSGroupTableAccessor
block|{
comment|//Assigned before user tables
specifier|private
specifier|static
specifier|final
name|TableName
name|RSGROUP_TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE_NAME_STR
argument_list|,
literal|"rsgroup"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|META_FAMILY_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"m"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|META_QUALIFIER_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|getAllRSGroupInfo
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|rsGroupTable
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|RSGROUP_TABLE_NAME
argument_list|)
init|)
block|{
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|rsGroupInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|rsGroupTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
control|)
block|{
name|RSGroupInfo
name|rsGroupInfo
init|=
name|getRSGroupInfo
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsGroupInfo
operator|!=
literal|null
condition|)
block|{
name|rsGroupInfos
operator|.
name|add
argument_list|(
name|rsGroupInfo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rsGroupInfos
return|;
block|}
block|}
specifier|private
specifier|static
name|RSGroupInfo
name|getRSGroupInfo
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|rsGroupInfo
init|=
name|result
operator|.
name|getValue
argument_list|(
name|META_FAMILY_BYTES
argument_list|,
name|META_QUALIFIER_BYTES
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsGroupInfo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RSGroupProtos
operator|.
name|RSGroupInfo
name|proto
init|=
name|RSGroupProtos
operator|.
name|RSGroupInfo
operator|.
name|parseFrom
argument_list|(
name|rsGroupInfo
argument_list|)
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|toGroupInfo
argument_list|(
name|proto
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RSGroupInfo
name|getRSGroupInfo
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|byte
index|[]
name|rsGroupName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|rsGroupTable
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|RSGROUP_TABLE_NAME
argument_list|)
init|)
block|{
name|Result
name|result
init|=
name|rsGroupTable
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|rsGroupName
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|getRSGroupInfo
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
specifier|private
name|RSGroupTableAccessor
parameter_list|()
block|{   }
block|}
end_class

end_unit

