begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CollectionUtils
operator|.
name|computeIfAbsent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_comment
comment|/**  * Holds back the request if the submitted size or number has reached the  * threshold.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
class|class
name|SimpleRequestController
implements|implements
name|RequestController
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SimpleRequestController
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The maximum size of single RegionServer.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_MAX_PERREQUEST_HEAPSIZE
init|=
literal|"hbase.client.max.perrequest.heapsize"
decl_stmt|;
comment|/**    * Default value of #HBASE_CLIENT_MAX_PERREQUEST_HEAPSIZE    */
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|long
name|DEFAULT_HBASE_CLIENT_MAX_PERREQUEST_HEAPSIZE
init|=
literal|4194304
decl_stmt|;
comment|/**    * The maximum size of submit.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_MAX_SUBMIT_HEAPSIZE
init|=
literal|"hbase.client.max.submit.heapsize"
decl_stmt|;
comment|/**    * Default value of #HBASE_CLIENT_MAX_SUBMIT_HEAPSIZE    */
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|long
name|DEFAULT_HBASE_CLIENT_MAX_SUBMIT_HEAPSIZE
init|=
name|DEFAULT_HBASE_CLIENT_MAX_PERREQUEST_HEAPSIZE
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|final
name|AtomicLong
name|tasksInProgress
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|final
name|ConcurrentMap
argument_list|<
name|byte
index|[]
argument_list|,
name|AtomicInteger
argument_list|>
name|taskCounterPerRegion
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|final
name|ConcurrentMap
argument_list|<
name|ServerName
argument_list|,
name|AtomicInteger
argument_list|>
name|taskCounterPerServer
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * The number of tasks simultaneously executed on the cluster.    */
specifier|private
specifier|final
name|int
name|maxTotalConcurrentTasks
decl_stmt|;
comment|/**    * The max heap size of all tasks simultaneously executed on a server.    */
specifier|private
specifier|final
name|long
name|maxHeapSizePerRequest
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxHeapSizeSubmit
decl_stmt|;
comment|/**    * The number of tasks we run in parallel on a single region. With 1 (the    * default) , we ensure that the ordering of the queries is respected: we    * don't start a set of operations on a region before the previous one is    * done. As well, this limits the pressure we put on the region server.    */
annotation|@
name|VisibleForTesting
specifier|final
name|int
name|maxConcurrentTasksPerRegion
decl_stmt|;
comment|/**    * The number of task simultaneously executed on a single region server.    */
annotation|@
name|VisibleForTesting
specifier|final
name|int
name|maxConcurrentTasksPerServer
decl_stmt|;
specifier|private
specifier|final
name|int
name|thresholdToLogUndoneTaskDetails
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|THRESHOLD_TO_LOG_UNDONE_TASK_DETAILS
init|=
literal|"hbase.client.threshold.log.details"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_THRESHOLD_TO_LOG_UNDONE_TASK_DETAILS
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|THRESHOLD_TO_LOG_REGION_DETAILS
init|=
literal|"hbase.client.threshold.log.region.details"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_THRESHOLD_TO_LOG_REGION_DETAILS
init|=
literal|2
decl_stmt|;
specifier|private
specifier|final
name|int
name|thresholdToLogRegionDetails
decl_stmt|;
name|SimpleRequestController
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|maxTotalConcurrentTasks
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_MAX_TOTAL_TASKS
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_MAX_TOTAL_TASKS
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxConcurrentTasksPerServer
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_MAX_PERSERVER_TASKS
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_MAX_PERSERVER_TASKS
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxConcurrentTasksPerRegion
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_MAX_PERREGION_TASKS
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_MAX_PERREGION_TASKS
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxHeapSizePerRequest
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HBASE_CLIENT_MAX_PERREQUEST_HEAPSIZE
argument_list|,
name|DEFAULT_HBASE_CLIENT_MAX_PERREQUEST_HEAPSIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxHeapSizeSubmit
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HBASE_CLIENT_MAX_SUBMIT_HEAPSIZE
argument_list|,
name|DEFAULT_HBASE_CLIENT_MAX_SUBMIT_HEAPSIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|thresholdToLogUndoneTaskDetails
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|THRESHOLD_TO_LOG_UNDONE_TASK_DETAILS
argument_list|,
name|DEFAULT_THRESHOLD_TO_LOG_UNDONE_TASK_DETAILS
argument_list|)
expr_stmt|;
name|this
operator|.
name|thresholdToLogRegionDetails
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|THRESHOLD_TO_LOG_REGION_DETAILS
argument_list|,
name|DEFAULT_THRESHOLD_TO_LOG_REGION_DETAILS
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|maxTotalConcurrentTasks
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxTotalConcurrentTasks="
operator|+
name|maxTotalConcurrentTasks
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|maxConcurrentTasksPerServer
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxConcurrentTasksPerServer="
operator|+
name|maxConcurrentTasksPerServer
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|maxConcurrentTasksPerRegion
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxConcurrentTasksPerRegion="
operator|+
name|maxConcurrentTasksPerRegion
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|maxHeapSizePerRequest
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxHeapSizePerServer="
operator|+
name|maxHeapSizePerRequest
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|maxHeapSizeSubmit
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxHeapSizeSubmit="
operator|+
name|maxHeapSizeSubmit
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|Checker
name|newChecker
parameter_list|(
name|List
argument_list|<
name|RowChecker
argument_list|>
name|checkers
parameter_list|)
block|{
return|return
operator|new
name|Checker
argument_list|()
block|{
specifier|private
name|boolean
name|isEnd
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ReturnCode
name|canTakeRow
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|,
name|Row
name|row
parameter_list|)
block|{
if|if
condition|(
name|isEnd
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|END
return|;
block|}
name|long
name|rowSize
init|=
operator|(
name|row
operator|instanceof
name|Mutation
operator|)
condition|?
operator|(
operator|(
name|Mutation
operator|)
name|row
operator|)
operator|.
name|heapSize
argument_list|()
else|:
literal|0
decl_stmt|;
name|ReturnCode
name|code
init|=
name|ReturnCode
operator|.
name|INCLUDE
decl_stmt|;
for|for
control|(
name|RowChecker
name|checker
range|:
name|checkers
control|)
block|{
switch|switch
condition|(
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|loc
argument_list|,
name|rowSize
argument_list|)
condition|)
block|{
case|case
name|END
case|:
name|isEnd
operator|=
literal|true
expr_stmt|;
name|code
operator|=
name|ReturnCode
operator|.
name|END
expr_stmt|;
break|break;
case|case
name|SKIP
case|:
name|code
operator|=
name|ReturnCode
operator|.
name|SKIP
expr_stmt|;
break|break;
case|case
name|INCLUDE
case|:
default|default:
break|break;
block|}
if|if
condition|(
name|code
operator|==
name|ReturnCode
operator|.
name|END
condition|)
block|{
break|break;
block|}
block|}
for|for
control|(
name|RowChecker
name|checker
range|:
name|checkers
control|)
block|{
name|checker
operator|.
name|notifyFinal
argument_list|(
name|code
argument_list|,
name|loc
argument_list|,
name|rowSize
argument_list|)
expr_stmt|;
block|}
return|return
name|code
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|InterruptedIOException
block|{
name|isEnd
operator|=
literal|false
expr_stmt|;
name|InterruptedIOException
name|e
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RowChecker
name|checker
range|:
name|checkers
control|)
block|{
try|try
block|{
name|checker
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedIOException
name|ex
parameter_list|)
block|{
name|e
operator|=
name|ex
expr_stmt|;
block|}
block|}
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Checker
name|newChecker
parameter_list|()
block|{
name|List
argument_list|<
name|RowChecker
argument_list|>
name|checkers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|checkers
operator|.
name|add
argument_list|(
operator|new
name|TaskCountChecker
argument_list|(
name|maxTotalConcurrentTasks
argument_list|,
name|maxConcurrentTasksPerServer
argument_list|,
name|maxConcurrentTasksPerRegion
argument_list|,
name|tasksInProgress
argument_list|,
name|taskCounterPerServer
argument_list|,
name|taskCounterPerRegion
argument_list|)
argument_list|)
expr_stmt|;
name|checkers
operator|.
name|add
argument_list|(
operator|new
name|RequestSizeChecker
argument_list|(
name|maxHeapSizePerRequest
argument_list|)
argument_list|)
expr_stmt|;
name|checkers
operator|.
name|add
argument_list|(
operator|new
name|SubmittedSizeChecker
argument_list|(
name|maxHeapSizeSubmit
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|newChecker
argument_list|(
name|checkers
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|incTaskCounters
parameter_list|(
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|regions
parameter_list|,
name|ServerName
name|sn
parameter_list|)
block|{
name|tasksInProgress
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|computeIfAbsent
argument_list|(
name|taskCounterPerServer
argument_list|,
name|sn
argument_list|,
name|AtomicInteger
operator|::
operator|new
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|regions
operator|.
name|forEach
argument_list|(
parameter_list|(
name|regBytes
parameter_list|)
lambda|->
name|computeIfAbsent
argument_list|(
name|taskCounterPerRegion
argument_list|,
name|regBytes
argument_list|,
name|AtomicInteger
operator|::
operator|new
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|decTaskCounters
parameter_list|(
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|regions
parameter_list|,
name|ServerName
name|sn
parameter_list|)
block|{
name|regions
operator|.
name|forEach
argument_list|(
name|regBytes
lambda|->
block|{
name|AtomicInteger
name|regionCnt
init|=
name|taskCounterPerRegion
operator|.
name|get
argument_list|(
name|regBytes
argument_list|)
decl_stmt|;
name|regionCnt
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|taskCounterPerServer
operator|.
name|get
argument_list|(
name|sn
argument_list|)
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|tasksInProgress
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|tasksInProgress
init|)
block|{
name|tasksInProgress
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getNumberOfTasksInProgress
parameter_list|()
block|{
return|return
name|tasksInProgress
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|waitForMaximumCurrentTasks
parameter_list|(
name|long
name|max
parameter_list|,
name|long
name|id
parameter_list|,
name|int
name|periodToTrigger
parameter_list|,
name|Consumer
argument_list|<
name|Long
argument_list|>
name|trigger
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
assert|assert
name|max
operator|>=
literal|0
assert|;
name|long
name|lastLog
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|long
name|currentInProgress
decl_stmt|,
name|oldInProgress
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
while|while
condition|(
operator|(
name|currentInProgress
operator|=
name|tasksInProgress
operator|.
name|get
argument_list|()
operator|)
operator|>
name|max
condition|)
block|{
if|if
condition|(
name|oldInProgress
operator|!=
name|currentInProgress
condition|)
block|{
comment|// Wait for in progress to change.
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|>
name|lastLog
operator|+
name|periodToTrigger
condition|)
block|{
name|lastLog
operator|=
name|now
expr_stmt|;
if|if
condition|(
name|trigger
operator|!=
literal|null
condition|)
block|{
name|trigger
operator|.
name|accept
argument_list|(
name|currentInProgress
argument_list|)
expr_stmt|;
block|}
name|logDetailsOfUndoneTasks
argument_list|(
name|currentInProgress
argument_list|)
expr_stmt|;
block|}
block|}
name|oldInProgress
operator|=
name|currentInProgress
expr_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|tasksInProgress
init|)
block|{
if|if
condition|(
name|tasksInProgress
operator|.
name|get
argument_list|()
operator|==
name|oldInProgress
condition|)
block|{
name|tasksInProgress
operator|.
name|wait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"#"
operator|+
name|id
operator|+
literal|", interrupted."
operator|+
literal|" currentNumberOfTask="
operator|+
name|currentInProgress
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|logDetailsOfUndoneTasks
parameter_list|(
name|long
name|taskInProgress
parameter_list|)
block|{
if|if
condition|(
name|taskInProgress
operator|<=
name|thresholdToLogUndoneTaskDetails
condition|)
block|{
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|AtomicInteger
argument_list|>
name|entry
range|:
name|taskCounterPerServer
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|servers
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Left over "
operator|+
name|taskInProgress
operator|+
literal|" task(s) are processed on server(s): "
operator|+
name|servers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|taskInProgress
operator|<=
name|thresholdToLogRegionDetails
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|AtomicInteger
argument_list|>
name|entry
range|:
name|taskCounterPerRegion
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Regions against which left over task(s) are processed: "
operator|+
name|regions
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|waitForFreeSlot
parameter_list|(
name|long
name|id
parameter_list|,
name|int
name|periodToTrigger
parameter_list|,
name|Consumer
argument_list|<
name|Long
argument_list|>
name|trigger
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
name|waitForMaximumCurrentTasks
argument_list|(
name|maxTotalConcurrentTasks
operator|-
literal|1
argument_list|,
name|id
argument_list|,
name|periodToTrigger
argument_list|,
name|trigger
argument_list|)
expr_stmt|;
block|}
comment|/**    * limit the heapsize of total submitted data. Reduce the limit of heapsize    * for submitting quickly if there is no running task.    */
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|SubmittedSizeChecker
implements|implements
name|RowChecker
block|{
specifier|private
specifier|final
name|long
name|maxHeapSizeSubmit
decl_stmt|;
specifier|private
name|long
name|heapSize
init|=
literal|0
decl_stmt|;
name|SubmittedSizeChecker
parameter_list|(
specifier|final
name|long
name|maxHeapSizeSubmit
parameter_list|)
block|{
name|this
operator|.
name|maxHeapSizeSubmit
operator|=
name|maxHeapSizeSubmit
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|canTakeOperation
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|,
name|long
name|rowSize
parameter_list|)
block|{
if|if
condition|(
name|heapSize
operator|>=
name|maxHeapSizeSubmit
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|END
return|;
block|}
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyFinal
parameter_list|(
name|ReturnCode
name|code
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|long
name|rowSize
parameter_list|)
block|{
if|if
condition|(
name|code
operator|==
name|ReturnCode
operator|.
name|INCLUDE
condition|)
block|{
name|heapSize
operator|+=
name|rowSize
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|heapSize
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/**    * limit the max number of tasks in an AsyncProcess.    */
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|TaskCountChecker
implements|implements
name|RowChecker
block|{
specifier|private
specifier|static
specifier|final
name|long
name|MAX_WAITING_TIME
init|=
literal|1000
decl_stmt|;
comment|//ms
specifier|private
specifier|final
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsIncluded
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serversIncluded
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxConcurrentTasksPerRegion
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxTotalConcurrentTasks
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxConcurrentTasksPerServer
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|AtomicInteger
argument_list|>
name|taskCounterPerRegion
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|AtomicInteger
argument_list|>
name|taskCounterPerServer
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|busyRegions
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|tasksInProgress
decl_stmt|;
name|TaskCountChecker
parameter_list|(
specifier|final
name|int
name|maxTotalConcurrentTasks
parameter_list|,
specifier|final
name|int
name|maxConcurrentTasksPerServer
parameter_list|,
specifier|final
name|int
name|maxConcurrentTasksPerRegion
parameter_list|,
specifier|final
name|AtomicLong
name|tasksInProgress
parameter_list|,
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|AtomicInteger
argument_list|>
name|taskCounterPerServer
parameter_list|,
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|AtomicInteger
argument_list|>
name|taskCounterPerRegion
parameter_list|)
block|{
name|this
operator|.
name|maxTotalConcurrentTasks
operator|=
name|maxTotalConcurrentTasks
expr_stmt|;
name|this
operator|.
name|maxConcurrentTasksPerRegion
operator|=
name|maxConcurrentTasksPerRegion
expr_stmt|;
name|this
operator|.
name|maxConcurrentTasksPerServer
operator|=
name|maxConcurrentTasksPerServer
expr_stmt|;
name|this
operator|.
name|taskCounterPerRegion
operator|=
name|taskCounterPerRegion
expr_stmt|;
name|this
operator|.
name|taskCounterPerServer
operator|=
name|taskCounterPerServer
expr_stmt|;
name|this
operator|.
name|tasksInProgress
operator|=
name|tasksInProgress
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|InterruptedIOException
block|{
comment|// prevent the busy-waiting
name|waitForRegion
argument_list|()
expr_stmt|;
name|regionsIncluded
operator|.
name|clear
argument_list|()
expr_stmt|;
name|serversIncluded
operator|.
name|clear
argument_list|()
expr_stmt|;
name|busyRegions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|waitForRegion
parameter_list|()
throws|throws
name|InterruptedIOException
block|{
if|if
condition|(
name|busyRegions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|EnvironmentEdge
name|ee
init|=
name|EnvironmentEdgeManager
operator|.
name|getDelegate
argument_list|()
decl_stmt|;
specifier|final
name|long
name|start
init|=
name|ee
operator|.
name|currentTime
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|ee
operator|.
name|currentTime
argument_list|()
operator|-
name|start
operator|)
operator|<=
name|MAX_WAITING_TIME
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|region
range|:
name|busyRegions
control|)
block|{
name|AtomicInteger
name|count
init|=
name|taskCounterPerRegion
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
operator|||
name|count
operator|.
name|get
argument_list|()
operator|<
name|maxConcurrentTasksPerRegion
condition|)
block|{
return|return;
block|}
block|}
try|try
block|{
synchronized|synchronized
init|(
name|tasksInProgress
init|)
block|{
name|tasksInProgress
operator|.
name|wait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Interrupted."
operator|+
literal|" tasksInProgress="
operator|+
name|tasksInProgress
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * 1) check the regions is allowed. 2) check the concurrent tasks for      * regions. 3) check the total concurrent tasks. 4) check the concurrent      * tasks for server.      *      * @param loc      * @param rowSize      * @return      */
annotation|@
name|Override
specifier|public
name|ReturnCode
name|canTakeOperation
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|,
name|long
name|rowSize
parameter_list|)
block|{
name|HRegionInfo
name|regionInfo
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionsIncluded
operator|.
name|contains
argument_list|(
name|regionInfo
argument_list|)
condition|)
block|{
comment|// We already know what to do with this region.
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
name|AtomicInteger
name|regionCnt
init|=
name|taskCounterPerRegion
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionCnt
operator|!=
literal|null
operator|&&
name|regionCnt
operator|.
name|get
argument_list|()
operator|>=
name|maxConcurrentTasksPerRegion
condition|)
block|{
comment|// Too many tasks on this region already.
return|return
name|ReturnCode
operator|.
name|SKIP
return|;
block|}
name|int
name|newServers
init|=
name|serversIncluded
operator|.
name|size
argument_list|()
operator|+
operator|(
name|serversIncluded
operator|.
name|contains
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|newServers
operator|+
name|tasksInProgress
operator|.
name|get
argument_list|()
operator|)
operator|>
name|maxTotalConcurrentTasks
condition|)
block|{
comment|// Too many tasks.
return|return
name|ReturnCode
operator|.
name|SKIP
return|;
block|}
name|AtomicInteger
name|serverCnt
init|=
name|taskCounterPerServer
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverCnt
operator|!=
literal|null
operator|&&
name|serverCnt
operator|.
name|get
argument_list|()
operator|>=
name|maxConcurrentTasksPerServer
condition|)
block|{
comment|// Too many tasks for this individual server
return|return
name|ReturnCode
operator|.
name|SKIP
return|;
block|}
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyFinal
parameter_list|(
name|ReturnCode
name|code
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|long
name|rowSize
parameter_list|)
block|{
if|if
condition|(
name|code
operator|==
name|ReturnCode
operator|.
name|INCLUDE
condition|)
block|{
name|regionsIncluded
operator|.
name|add
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
name|serversIncluded
operator|.
name|add
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|busyRegions
operator|.
name|add
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * limit the request size for each regionserver.    */
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|RequestSizeChecker
implements|implements
name|RowChecker
block|{
specifier|private
specifier|final
name|long
name|maxHeapSizePerRequest
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Long
argument_list|>
name|serverRequestSizes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|RequestSizeChecker
parameter_list|(
specifier|final
name|long
name|maxHeapSizePerRequest
parameter_list|)
block|{
name|this
operator|.
name|maxHeapSizePerRequest
operator|=
name|maxHeapSizePerRequest
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|serverRequestSizes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|canTakeOperation
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|,
name|long
name|rowSize
parameter_list|)
block|{
comment|// Is it ok for limit of request size?
name|long
name|currentRequestSize
init|=
name|serverRequestSizes
operator|.
name|containsKey
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|?
name|serverRequestSizes
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
else|:
literal|0L
decl_stmt|;
comment|// accept at least one request
if|if
condition|(
name|currentRequestSize
operator|==
literal|0
operator|||
name|currentRequestSize
operator|+
name|rowSize
operator|<=
name|maxHeapSizePerRequest
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
return|return
name|ReturnCode
operator|.
name|SKIP
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyFinal
parameter_list|(
name|ReturnCode
name|code
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|long
name|rowSize
parameter_list|)
block|{
if|if
condition|(
name|code
operator|==
name|ReturnCode
operator|.
name|INCLUDE
condition|)
block|{
name|long
name|currentRequestSize
init|=
name|serverRequestSizes
operator|.
name|containsKey
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|?
name|serverRequestSizes
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
else|:
literal|0L
decl_stmt|;
name|serverRequestSizes
operator|.
name|put
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|,
name|currentRequestSize
operator|+
name|rowSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Provide a way to control the flow of rows iteration.    */
annotation|@
name|VisibleForTesting
interface|interface
name|RowChecker
block|{
name|ReturnCode
name|canTakeOperation
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|,
name|long
name|rowSize
parameter_list|)
function_decl|;
comment|/**      * Add the final ReturnCode to the checker. The ReturnCode may be reversed,      * so the checker need the final decision to update the inner state.      *      * @param code The final decision      * @param loc the destination of data      * @param rowSize the data size      */
name|void
name|notifyFinal
parameter_list|(
name|ReturnCode
name|code
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|long
name|rowSize
parameter_list|)
function_decl|;
comment|/**      * Reset the inner state.      */
name|void
name|reset
parameter_list|()
throws|throws
name|InterruptedIOException
function_decl|;
block|}
block|}
end_class

end_unit

