begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * FilterListWithOR represents an ordered list of filters which will be evaluated with an OR  * operator.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|FilterListWithOR
extends|extends
name|FilterListBase
block|{
comment|/**    * Save previous return code and previous cell for every filter in filter list. For MUST_PASS_ONE,    * we use the previous return code to decide whether we should pass current cell encountered to    * the filter. For MUST_PASS_ALL, the two list are meaningless.    */
specifier|private
name|List
argument_list|<
name|ReturnCode
argument_list|>
name|prevFilterRCList
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Cell
argument_list|>
name|prevCellList
init|=
literal|null
decl_stmt|;
specifier|public
name|FilterListWithOR
parameter_list|(
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
parameter_list|)
block|{
name|super
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|prevFilterRCList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|filters
operator|.
name|size
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|prevCellList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|filters
operator|.
name|size
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|subFiltersIncludedCell
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|filters
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addFilterLists
parameter_list|(
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
parameter_list|)
block|{
if|if
condition|(
name|checkAndGetReversed
argument_list|(
name|filters
argument_list|,
name|isReversed
argument_list|()
argument_list|)
operator|!=
name|isReversed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Filters in the list must have the same reversed flag"
argument_list|)
throw|;
block|}
name|this
operator|.
name|filters
operator|.
name|addAll
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|this
operator|.
name|subFiltersIncludedCell
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|filters
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|prevFilterRCList
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|filters
operator|.
name|size
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|prevCellList
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|filters
operator|.
name|size
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|formatLogFilters
parameter_list|(
name|List
argument_list|<
name|Filter
argument_list|>
name|logFilters
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"FilterList OR (%d/%d): %s"
argument_list|,
name|logFilters
operator|.
name|size
argument_list|()
argument_list|,
name|this
operator|.
name|size
argument_list|()
argument_list|,
name|logFilters
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * For MUST_PASS_ONE, we cannot make sure that when filter-A in filter list return NEXT_COL then    * the next cell passing to filterList will be the first cell in next column, because if filter-B    * in filter list return SKIP, then the filter list will return SKIP. In this case, we should pass    * the cell following the previous cell, and it's possible that the next cell has the same column    * as the previous cell even if filter-A has NEXT_COL returned for the previous cell. So we should    * save the previous cell and the return code list when checking previous cell for every filter in    * filter list, and verify if currentCell fit the previous return code, if fit then pass the    * currentCell to the corresponding filter. (HBASE-17678)<br>    * Note that: In StoreScanner level, NEXT_ROW will skip to the next row in current family, and in    * RegionScanner level, NEXT_ROW will skip to the next row in current family and switch to the    * next family for RegionScanner, INCLUDE_AND_NEXT_ROW is the same. so we should pass current cell    * to the filter, if row mismatch or row match but column family mismatch. (HBASE-18368)    * @see org.apache.hadoop.hbase.filter.Filter.ReturnCode    * @param subFilter which sub-filter to calculate the return code by using previous cell and    *          previous return code.    * @param prevCell the previous cell passed to given sub-filter.    * @param currentCell the current cell which will pass to given sub-filter.    * @param prevCode the previous return code for given sub-filter.    * @return return code calculated by using previous cell and previous return code. null means can    *         not decide which return code should return, so we will pass the currentCell to    *         subFilter for getting currentCell's return code, and it won't impact the sub-filter's    *         internal states.    */
specifier|private
name|ReturnCode
name|calculateReturnCodeByPrevCellAndRC
parameter_list|(
name|Filter
name|subFilter
parameter_list|,
name|Cell
name|currentCell
parameter_list|,
name|Cell
name|prevCell
parameter_list|,
name|ReturnCode
name|prevCode
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|prevCell
operator|==
literal|null
operator|||
name|prevCode
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|prevCode
condition|)
block|{
case|case
name|INCLUDE
case|:
case|case
name|SKIP
case|:
return|return
literal|null
return|;
case|case
name|SEEK_NEXT_USING_HINT
case|:
name|Cell
name|nextHintCell
init|=
name|subFilter
operator|.
name|getNextCellHint
argument_list|(
name|prevCell
argument_list|)
decl_stmt|;
return|return
name|nextHintCell
operator|!=
literal|null
operator|&&
name|compareCell
argument_list|(
name|currentCell
argument_list|,
name|nextHintCell
argument_list|)
operator|<
literal|0
condition|?
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
else|:
literal|null
return|;
case|case
name|NEXT_COL
case|:
case|case
name|INCLUDE_AND_NEXT_COL
case|:
comment|// Once row changed, reset() will clear prevCells, so we need not to compare their rows
comment|// because rows are the same here.
return|return
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|prevCell
argument_list|,
name|currentCell
argument_list|)
condition|?
name|ReturnCode
operator|.
name|NEXT_COL
else|:
literal|null
return|;
case|case
name|NEXT_ROW
case|:
case|case
name|INCLUDE_AND_SEEK_NEXT_ROW
case|:
comment|// As described above, rows are definitely the same, so we only compare the family.
return|return
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|prevCell
argument_list|,
name|currentCell
argument_list|)
condition|?
name|ReturnCode
operator|.
name|NEXT_ROW
else|:
literal|null
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Received code is not valid."
argument_list|)
throw|;
block|}
block|}
comment|/**    * FilterList with MUST_PASS_ONE choose the minimal forward step among sub-filter in filter list.    * Let's call it: The Minimal Step Rule. So if filter-A in filter list return INCLUDE and filter-B    * in filter list return INCLUDE_AND_NEXT_COL, then the filter list should return INCLUDE. For    * SEEK_NEXT_USING_HINT, it's more special, because we do not know how far it will forward, so we    * use SKIP by default.<br/>    *<br/>    * The jump step will be:    *    *<pre>    * INCLUDE&lt; SKIP&lt; INCLUDE_AND_NEXT_COL&lt; NEXT_COL&lt; INCLUDE_AND_SEEK_NEXT_ROW&lt; NEXT_ROW&lt; SEEK_NEXT_USING_HINT    *</pre>    *    * Here, we have the following map to describe The Minimal Step Rule. if current return code (for    * previous sub-filters in filter list) is<strong>ReturnCode</strong>, and current filter returns    *<strong>localRC</strong>, then we should return map[ReturnCode][localRC] for the merged result,    * according to The Minimal Step Rule.<br/>    *    *<pre>    * LocalCode\ReturnCode       INCLUDE INCLUDE_AND_NEXT_COL     INCLUDE_AND_SEEK_NEXT_ROW  SKIP      NEXT_COL              NEXT_ROW                  SEEK_NEXT_USING_HINT    * INCLUDE                    INCLUDE INCLUDE                  INCLUDE                    INCLUDE   INCLUDE               INCLUDE                   INCLUDE    * INCLUDE_AND_NEXT_COL       INCLUDE INCLUDE_AND_NEXT_COL     INCLUDE_AND_NEXT_COL       INCLUDE   INCLUDE_AND_NEXT_COL  INCLUDE_AND_NEXT_COL      INCLUDE    * INCLUDE_AND_SEEK_NEXT_ROW  INCLUDE INCLUDE_AND_NEXT_COL     INCLUDE_AND_SEEK_NEXT_ROW  INCLUDE   INCLUDE_AND_NEXT_COL  INCLUDE_AND_SEEK_NEXT_ROW INCLUDE    * SKIP                       INCLUDE INCLUDE                  INCLUDE                    SKIP      SKIP                  SKIP                      SKIP    * NEXT_COL                   INCLUDE INCLUDE_AND_NEXT_COL     INCLUDE_AND_NEXT_COL       SKIP      NEXT_COL              NEXT_COL                  SKIP    * NEXT_ROW                   INCLUDE INCLUDE_AND_NEXT_COL     INCLUDE_AND_SEEK_NEXT_ROW  SKIP      NEXT_COL              NEXT_ROW                  SKIP    * SEEK_NEXT_USING_HINT       INCLUDE INCLUDE                  INCLUDE                    SKIP      SKIP                  SKIP                      SEEK_NEXT_USING_HINT    *</pre>    *    * @param rc Return code which is calculated by previous sub-filter(s) in filter list.    * @param localRC Return code of the current sub-filter in filter list.    * @return Return code which is merged by the return code of previous sub-filter(s) and the return    *         code of current sub-filter.    */
specifier|private
name|ReturnCode
name|mergeReturnCode
parameter_list|(
name|ReturnCode
name|rc
parameter_list|,
name|ReturnCode
name|localRC
parameter_list|)
block|{
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
return|return
name|localRC
return|;
switch|switch
condition|(
name|localRC
condition|)
block|{
case|case
name|INCLUDE
case|:
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
case|case
name|INCLUDE_AND_NEXT_COL
case|:
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|ReturnCode
operator|.
name|SKIP
argument_list|,
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
argument_list|,
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|,
name|ReturnCode
operator|.
name|NEXT_ROW
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
return|;
block|}
break|break;
case|case
name|INCLUDE_AND_SEEK_NEXT_ROW
case|:
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|ReturnCode
operator|.
name|SKIP
argument_list|,
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|,
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
return|;
block|}
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
argument_list|,
name|ReturnCode
operator|.
name|NEXT_ROW
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
return|;
block|}
break|break;
case|case
name|SKIP
case|:
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|SKIP
argument_list|,
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|,
name|ReturnCode
operator|.
name|NEXT_ROW
argument_list|,
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|SKIP
return|;
block|}
break|break;
case|case
name|NEXT_COL
case|:
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|,
name|ReturnCode
operator|.
name|NEXT_ROW
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|NEXT_COL
return|;
block|}
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
return|;
block|}
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|SKIP
argument_list|,
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|SKIP
return|;
block|}
break|break;
case|case
name|NEXT_ROW
case|:
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
return|;
block|}
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
return|;
block|}
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|SKIP
argument_list|,
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|SKIP
return|;
block|}
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|NEXT_COL
return|;
block|}
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|NEXT_ROW
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|NEXT_ROW
return|;
block|}
break|break;
case|case
name|SEEK_NEXT_USING_HINT
case|:
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|SKIP
argument_list|,
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|,
name|ReturnCode
operator|.
name|NEXT_ROW
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|SKIP
return|;
block|}
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|rc
argument_list|,
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|)
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
return|;
block|}
break|break;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Received code is not valid. rc: "
operator|+
name|rc
operator|+
literal|", localRC: "
operator|+
name|localRC
argument_list|)
throw|;
block|}
specifier|private
name|void
name|updatePrevFilterRCList
parameter_list|(
name|int
name|index
parameter_list|,
name|ReturnCode
name|currentRC
parameter_list|)
block|{
name|prevFilterRCList
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|currentRC
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updatePrevCellList
parameter_list|(
name|int
name|index
parameter_list|,
name|Cell
name|currentCell
parameter_list|,
name|ReturnCode
name|currentRC
parameter_list|)
block|{
if|if
condition|(
name|currentCell
operator|==
literal|null
operator|||
name|currentRC
operator|==
name|ReturnCode
operator|.
name|INCLUDE
operator|||
name|currentRC
operator|==
name|ReturnCode
operator|.
name|SKIP
condition|)
block|{
comment|// If previous return code is INCLUDE or SKIP, we should always pass the next cell to the
comment|// corresponding sub-filter(need not test calculateReturnCodeByPrevCellAndRC() method), So we
comment|// need not save current cell to prevCellList for saving heap memory.
name|prevCellList
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prevCellList
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|KeyValueUtil
operator|.
name|toNewKeyCell
argument_list|(
name|currentCell
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterCell
parameter_list|(
name|Cell
name|c
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
name|ReturnCode
name|rc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|filters
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Filter
name|filter
init|=
name|filters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|subFiltersIncludedCell
operator|.
name|set
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Cell
name|prevCell
init|=
name|this
operator|.
name|prevCellList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ReturnCode
name|prevCode
init|=
name|this
operator|.
name|prevFilterRCList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|filterAllRemaining
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|ReturnCode
name|localRC
init|=
name|calculateReturnCodeByPrevCellAndRC
argument_list|(
name|filter
argument_list|,
name|c
argument_list|,
name|prevCell
argument_list|,
name|prevCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|localRC
operator|==
literal|null
condition|)
block|{
comment|// Can not get return code based on previous cell and previous return code. In other words,
comment|// we should pass the current cell to this sub-filter to get the return code, and it won't
comment|// impact the sub-filter's internal state.
name|localRC
operator|=
name|filter
operator|.
name|filterCell
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
comment|// Update previous return code and previous cell for filter[i].
name|updatePrevFilterRCList
argument_list|(
name|i
argument_list|,
name|localRC
argument_list|)
expr_stmt|;
name|updatePrevCellList
argument_list|(
name|i
argument_list|,
name|c
argument_list|,
name|localRC
argument_list|)
expr_stmt|;
name|rc
operator|=
name|mergeReturnCode
argument_list|(
name|rc
argument_list|,
name|localRC
argument_list|)
expr_stmt|;
comment|// For INCLUDE* case, we need to update the transformed cell.
if|if
condition|(
name|isInReturnCodes
argument_list|(
name|localRC
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|,
name|ReturnCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
argument_list|)
condition|)
block|{
name|subFiltersIncludedCell
operator|.
name|set
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Each sub-filter in filter list got true for filterAllRemaining(), if rc is null, so we should
comment|// return SKIP.
return|return
name|rc
operator|==
literal|null
condition|?
name|ReturnCode
operator|.
name|SKIP
else|:
name|rc
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|filters
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|filters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|reset
argument_list|()
expr_stmt|;
name|subFiltersIncludedCell
operator|.
name|set
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|prevFilterRCList
operator|.
name|set
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|prevCellList
operator|.
name|set
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterRowKey
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|filterRowKey
argument_list|(
name|rowKey
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
name|boolean
name|retVal
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|filters
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Filter
name|filter
init|=
name|filters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|filter
operator|.
name|filterAllRemaining
argument_list|()
operator|&&
operator|!
name|filter
operator|.
name|filterRowKey
argument_list|(
name|rowKey
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
condition|)
block|{
name|retVal
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|retVal
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterRowKey
parameter_list|(
name|Cell
name|firstRowCell
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|filterRowKey
argument_list|(
name|firstRowCell
argument_list|)
return|;
block|}
name|boolean
name|retVal
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|filters
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Filter
name|filter
init|=
name|filters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|filter
operator|.
name|filterAllRemaining
argument_list|()
operator|&&
operator|!
name|filter
operator|.
name|filterRowKey
argument_list|(
name|firstRowCell
argument_list|)
condition|)
block|{
comment|// Can't just return false here, because there are some filters (such as PrefixFilter) which
comment|// will catch the row changed event by filterRowKey(). If we return early here, those
comment|// filters will have no chance to update their row state.
name|retVal
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|retVal
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterAllRemaining
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|filterAllRemaining
argument_list|()
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|filters
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|filters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|filterAllRemaining
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterRow
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|filterRow
argument_list|()
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|filters
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Filter
name|filter
init|=
name|filters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|filter
operator|.
name|filterRow
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|getNextCellHint
parameter_list|(
name|Cell
name|currentCell
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|getNextCellHint
argument_list|(
name|currentCell
argument_list|)
return|;
block|}
name|Cell
name|minKeyHint
init|=
literal|null
decl_stmt|;
comment|// If any condition can pass, we need to keep the min hint
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|filters
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|filters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|filterAllRemaining
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Cell
name|curKeyHint
init|=
name|filters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getNextCellHint
argument_list|(
name|currentCell
argument_list|)
decl_stmt|;
if|if
condition|(
name|curKeyHint
operator|==
literal|null
condition|)
block|{
comment|// If we ever don't have a hint and this is must-pass-one, then no hint
return|return
literal|null
return|;
block|}
comment|// If this is the first hint we find, set it
if|if
condition|(
name|minKeyHint
operator|==
literal|null
condition|)
block|{
name|minKeyHint
operator|=
name|curKeyHint
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|this
operator|.
name|compareCell
argument_list|(
name|minKeyHint
argument_list|,
name|curKeyHint
argument_list|)
operator|>
literal|0
condition|)
block|{
name|minKeyHint
operator|=
name|curKeyHint
expr_stmt|;
block|}
block|}
return|return
name|minKeyHint
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|(
operator|!
operator|(
name|obj
operator|instanceof
name|FilterListWithOR
operator|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
name|FilterListWithOR
name|f
init|=
operator|(
name|FilterListWithOR
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|filters
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getFilters
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|prevFilterRCList
operator|.
name|equals
argument_list|(
name|f
operator|.
name|prevFilterRCList
argument_list|)
operator|&&
name|this
operator|.
name|prevCellList
operator|.
name|equals
argument_list|(
name|f
operator|.
name|prevCellList
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|this
operator|.
name|prevFilterRCList
argument_list|,
name|this
operator|.
name|prevCellList
argument_list|,
name|this
operator|.
name|filters
argument_list|)
return|;
block|}
block|}
end_class

end_unit

