begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|MASTER_ADDRS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|MASTER_ADDRS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|MASTER_REGISTRY_ENABLE_HEDGED_READS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|MASTER_REGISTRY_ENABLE_HEDGED_READS_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|MasterRegistryFetchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HostAndPort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ClientMetaService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetActiveMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetActiveMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetClusterIdRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetClusterIdResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetMetaRegionLocationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetMetaRegionLocationsResponse
import|;
end_import

begin_comment
comment|/**  * Master based registry implementation. Makes RPCs to the configured master addresses from config  * {@value org.apache.hadoop.hbase.HConstants#MASTER_ADDRS_KEY}.  *  * It supports hedged reads, which can be enabled by setting  * {@value org.apache.hadoop.hbase.HConstants#MASTER_REGISTRY_ENABLE_HEDGED_READS_KEY} to True. Fan  * out the requests batch is controlled by  * {@value org.apache.hadoop.hbase.HConstants#HBASE_RPCS_HEDGED_REQS_FANOUT_KEY}.  *  * TODO: Handle changes to the configuration dynamically without having to restart the client.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MasterRegistry
implements|implements
name|ConnectionRegistry
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MASTER_ADDRS_CONF_SEPARATOR
init|=
literal|","
decl_stmt|;
comment|// Configured list of masters to probe the meta information from.
specifier|private
specifier|final
name|Set
argument_list|<
name|ServerName
argument_list|>
name|masterServers
decl_stmt|;
comment|// RPC client used to talk to the masters.
specifier|private
specifier|final
name|RpcClient
name|rpcClient
decl_stmt|;
specifier|private
specifier|final
name|RpcControllerFactory
name|rpcControllerFactory
decl_stmt|;
specifier|private
specifier|final
name|int
name|rpcTimeoutMs
decl_stmt|;
name|MasterRegistry
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|hedgedReadsEnabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MASTER_REGISTRY_ENABLE_HEDGED_READS_KEY
argument_list|,
name|MASTER_REGISTRY_ENABLE_HEDGED_READS_DEFAULT
argument_list|)
decl_stmt|;
name|Configuration
name|finalConf
decl_stmt|;
if|if
condition|(
operator|!
name|hedgedReadsEnabled
condition|)
block|{
comment|// If hedged reads are disabled, it is equivalent to setting a fan out of 1. We make a copy of
comment|// the configuration so that other places reusing this reference is not affected.
name|finalConf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|finalConf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPCS_HEDGED_REQS_FANOUT_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|finalConf
operator|=
name|conf
expr_stmt|;
block|}
name|rpcTimeoutMs
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_RPC_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
name|masterServers
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|parseMasterAddrs
argument_list|(
name|finalConf
argument_list|)
expr_stmt|;
name|rpcClient
operator|=
name|RpcClientFactory
operator|.
name|createClient
argument_list|(
name|finalConf
argument_list|,
name|HConstants
operator|.
name|CLUSTER_ID_DEFAULT
argument_list|)
expr_stmt|;
name|rpcControllerFactory
operator|=
name|RpcControllerFactory
operator|.
name|instantiate
argument_list|(
name|finalConf
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return Stub needed to make RPC using a hedged channel to the master end points.    */
specifier|private
name|ClientMetaService
operator|.
name|Interface
name|getMasterStub
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|ClientMetaService
operator|.
name|newStub
argument_list|(
name|rpcClient
operator|.
name|createHedgedRpcChannel
argument_list|(
name|masterServers
argument_list|,
name|User
operator|.
name|getCurrent
argument_list|()
argument_list|,
name|rpcTimeoutMs
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Parses the list of master addresses from the provided configuration. Supported format is    * comma separated host[:port] values. If no port number if specified, default master port is    * assumed.    * @param conf Configuration to parse from.    */
specifier|private
name|void
name|parseMasterAddrs
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|configuredMasters
init|=
name|conf
operator|.
name|get
argument_list|(
name|MASTER_ADDRS_KEY
argument_list|,
name|MASTER_ADDRS_DEFAULT
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|masterAddr
range|:
name|configuredMasters
operator|.
name|split
argument_list|(
name|MASTER_ADDRS_CONF_SEPARATOR
argument_list|)
control|)
block|{
name|HostAndPort
name|masterHostPort
init|=
name|HostAndPort
operator|.
name|fromString
argument_list|(
name|masterAddr
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|withDefaultPort
argument_list|(
name|HConstants
operator|.
name|DEFAULT_MASTER_PORT
argument_list|)
decl_stmt|;
name|masterServers
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
name|masterHostPort
operator|.
name|toString
argument_list|()
argument_list|,
name|ServerName
operator|.
name|NON_STARTCODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|masterServers
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"At least one master address is needed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|Set
argument_list|<
name|ServerName
argument_list|>
name|getParsedMasterServers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|masterServers
argument_list|)
return|;
block|}
comment|/**    * Returns a call back that can be passed along to the non-blocking rpc call. It is invoked once    * the rpc finishes and the response is propagated to the passed future.    * @param future Result future to which the rpc response is propagated.    * @param isValidResp Checks if the rpc response has a valid result.    * @param transformResult Transforms the result to a different form as expected by callers.    * @param hrc RpcController instance for this rpc.    * @param debug Debug message passed along to the caller in case of exceptions.    * @param<T> RPC result type.    * @param<R> Transformed type of the result.    * @return A call back that can be embedded in the non-blocking rpc call.    */
specifier|private
parameter_list|<
name|T
parameter_list|,
name|R
parameter_list|>
name|RpcCallback
argument_list|<
name|T
argument_list|>
name|getRpcCallBack
parameter_list|(
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|future
parameter_list|,
name|Predicate
argument_list|<
name|T
argument_list|>
name|isValidResp
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|transformResult
parameter_list|,
name|HBaseRpcController
name|hrc
parameter_list|,
specifier|final
name|String
name|debug
parameter_list|)
block|{
return|return
name|rpcResult
lambda|->
block|{
if|if
condition|(
name|rpcResult
operator|==
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|MasterRegistryFetchException
argument_list|(
name|masterServers
argument_list|,
name|hrc
operator|.
name|getFailed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isValidResp
operator|.
name|test
argument_list|(
name|rpcResult
argument_list|)
condition|)
block|{
comment|// Rpc returned ok, but result was malformed.
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid result for request %s. Will be retried"
argument_list|,
name|debug
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|future
operator|.
name|complete
argument_list|(
name|transformResult
operator|.
name|apply
argument_list|(
name|rpcResult
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|;
block|}
comment|/**    * Simple helper to transform the result of getMetaRegionLocations() rpc.    */
specifier|private
name|RegionLocations
name|transformMetaRegionLocations
parameter_list|(
name|GetMetaRegionLocationsResponse
name|resp
parameter_list|)
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regionLocations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|resp
operator|.
name|getMetaLocationsList
argument_list|()
operator|.
name|forEach
argument_list|(
name|location
lambda|->
name|regionLocations
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toRegionLocation
argument_list|(
name|location
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|RegionLocations
argument_list|(
name|regionLocations
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|RegionLocations
argument_list|>
name|getMetaRegionLocations
parameter_list|()
block|{
name|CompletableFuture
argument_list|<
name|RegionLocations
argument_list|>
name|result
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|HBaseRpcController
name|hrc
init|=
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
decl_stmt|;
name|RpcCallback
argument_list|<
name|GetMetaRegionLocationsResponse
argument_list|>
name|callback
init|=
name|getRpcCallBack
argument_list|(
name|result
argument_list|,
parameter_list|(
name|rpcResp
parameter_list|)
lambda|->
name|rpcResp
operator|.
name|getMetaLocationsCount
argument_list|()
operator|!=
literal|0
argument_list|,
name|this
operator|::
name|transformMetaRegionLocations
argument_list|,
name|hrc
argument_list|,
literal|"getMetaRegionLocations()"
argument_list|)
decl_stmt|;
try|try
block|{
name|getMasterStub
argument_list|()
operator|.
name|getMetaRegionLocations
argument_list|(
name|hrc
argument_list|,
name|GetMetaRegionLocationsRequest
operator|.
name|getDefaultInstance
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|result
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|String
argument_list|>
name|getClusterId
parameter_list|()
block|{
name|CompletableFuture
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|HBaseRpcController
name|hrc
init|=
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
decl_stmt|;
name|RpcCallback
argument_list|<
name|GetClusterIdResponse
argument_list|>
name|callback
init|=
name|getRpcCallBack
argument_list|(
name|result
argument_list|,
name|GetClusterIdResponse
operator|::
name|hasClusterId
argument_list|,
name|GetClusterIdResponse
operator|::
name|getClusterId
argument_list|,
name|hrc
argument_list|,
literal|"getClusterId()"
argument_list|)
decl_stmt|;
try|try
block|{
name|getMasterStub
argument_list|()
operator|.
name|getClusterId
argument_list|(
name|hrc
argument_list|,
name|GetClusterIdRequest
operator|.
name|getDefaultInstance
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|result
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|ServerName
name|transformServerName
parameter_list|(
name|GetActiveMasterResponse
name|resp
parameter_list|)
block|{
return|return
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|resp
operator|.
name|getServerName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|ServerName
argument_list|>
name|getActiveMaster
parameter_list|()
block|{
name|CompletableFuture
argument_list|<
name|ServerName
argument_list|>
name|result
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|HBaseRpcController
name|hrc
init|=
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
decl_stmt|;
name|RpcCallback
argument_list|<
name|GetActiveMasterResponse
argument_list|>
name|callback
init|=
name|getRpcCallBack
argument_list|(
name|result
argument_list|,
name|GetActiveMasterResponse
operator|::
name|hasServerName
argument_list|,
name|this
operator|::
name|transformServerName
argument_list|,
name|hrc
argument_list|,
literal|"getActiveMaster()"
argument_list|)
decl_stmt|;
try|try
block|{
name|getMasterStub
argument_list|()
operator|.
name|getActiveMaster
argument_list|(
name|hrc
argument_list|,
name|GetActiveMasterRequest
operator|.
name|getDefaultInstance
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|result
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|rpcClient
operator|!=
literal|null
condition|)
block|{
name|rpcClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

