begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Utility used by client connections such as {@link HConnection} and  * {@link ServerCallable}  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|ConnectionUtils
block|{
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**    * Calculate pause time.    * Built on {@link HConstants#RETRY_BACKOFF}.    * @param pause    * @param tries    * @return How long to wait after<code>tries</code> retries    */
specifier|public
specifier|static
name|long
name|getPauseTime
parameter_list|(
specifier|final
name|long
name|pause
parameter_list|,
specifier|final
name|int
name|tries
parameter_list|)
block|{
name|int
name|ntries
init|=
name|tries
decl_stmt|;
if|if
condition|(
name|ntries
operator|>=
name|HConstants
operator|.
name|RETRY_BACKOFF
operator|.
name|length
condition|)
block|{
name|ntries
operator|=
name|HConstants
operator|.
name|RETRY_BACKOFF
operator|.
name|length
operator|-
literal|1
expr_stmt|;
block|}
name|long
name|normalPause
init|=
name|pause
operator|*
name|HConstants
operator|.
name|RETRY_BACKOFF
index|[
name|ntries
index|]
decl_stmt|;
name|long
name|jitter
init|=
call|(
name|long
call|)
argument_list|(
name|normalPause
operator|*
name|RANDOM
operator|.
name|nextFloat
argument_list|()
operator|*
literal|0.01f
argument_list|)
decl_stmt|;
comment|// 1% possible jitter
return|return
name|normalPause
operator|+
name|jitter
return|;
block|}
comment|/**    * Adds / subs a 10% jitter to a pause time. Minimum is 1.    * @param pause the expected pause.    * @param jitter the jitter ratio, between 0 and 1, exclusive.    */
specifier|public
specifier|static
name|long
name|addJitter
parameter_list|(
specifier|final
name|long
name|pause
parameter_list|,
specifier|final
name|float
name|jitter
parameter_list|)
block|{
name|float
name|lag
init|=
name|pause
operator|*
operator|(
name|RANDOM
operator|.
name|nextFloat
argument_list|()
operator|-
literal|0.5f
operator|)
operator|*
name|jitter
decl_stmt|;
name|long
name|newPause
init|=
name|pause
operator|+
operator|(
name|long
operator|)
name|lag
decl_stmt|;
if|if
condition|(
name|newPause
operator|<=
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|newPause
return|;
block|}
block|}
end_class

end_unit

