begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|EMPTY_END_ROW
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|EMPTY_START_ROW
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Utility used by client connections.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|ConnectionUtils
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ConnectionUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ConnectionUtils
parameter_list|()
block|{}
comment|/**    * Calculate pause time.    * Built on {@link HConstants#RETRY_BACKOFF}.    * @param pause time to pause    * @param tries amount of tries    * @return How long to wait after<code>tries</code> retries    */
specifier|public
specifier|static
name|long
name|getPauseTime
parameter_list|(
specifier|final
name|long
name|pause
parameter_list|,
specifier|final
name|int
name|tries
parameter_list|)
block|{
name|int
name|ntries
init|=
name|tries
decl_stmt|;
if|if
condition|(
name|ntries
operator|>=
name|HConstants
operator|.
name|RETRY_BACKOFF
operator|.
name|length
condition|)
block|{
name|ntries
operator|=
name|HConstants
operator|.
name|RETRY_BACKOFF
operator|.
name|length
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|ntries
operator|<
literal|0
condition|)
block|{
name|ntries
operator|=
literal|0
expr_stmt|;
block|}
name|long
name|normalPause
init|=
name|pause
operator|*
name|HConstants
operator|.
name|RETRY_BACKOFF
index|[
name|ntries
index|]
decl_stmt|;
comment|// 1% possible jitter
name|long
name|jitter
init|=
call|(
name|long
call|)
argument_list|(
name|normalPause
operator|*
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
literal|0.01f
argument_list|)
decl_stmt|;
return|return
name|normalPause
operator|+
name|jitter
return|;
block|}
comment|/**    * Adds / subs an up to 50% jitter to a pause time. Minimum is 1.    * @param pause the expected pause.    * @param jitter the jitter ratio, between 0 and 1, exclusive.    */
specifier|public
specifier|static
name|long
name|addJitter
parameter_list|(
specifier|final
name|long
name|pause
parameter_list|,
specifier|final
name|float
name|jitter
parameter_list|)
block|{
name|float
name|lag
init|=
name|pause
operator|*
operator|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|-
literal|0.5f
operator|)
operator|*
name|jitter
decl_stmt|;
name|long
name|newPause
init|=
name|pause
operator|+
operator|(
name|long
operator|)
name|lag
decl_stmt|;
if|if
condition|(
name|newPause
operator|<=
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|newPause
return|;
block|}
comment|/**    * @param conn The connection for which to replace the generator.    * @param cnm Replaces the nonce generator used, for testing.    * @return old nonce generator.    */
specifier|public
specifier|static
name|NonceGenerator
name|injectNonceGeneratorForTesting
parameter_list|(
name|ClusterConnection
name|conn
parameter_list|,
name|NonceGenerator
name|cnm
parameter_list|)
block|{
return|return
name|ConnectionImplementation
operator|.
name|injectNonceGeneratorForTesting
argument_list|(
name|conn
argument_list|,
name|cnm
argument_list|)
return|;
block|}
comment|/**    * Changes the configuration to set the number of retries needed when using Connection    * internally, e.g. for  updating catalog tables, etc.    * Call this method before we create any Connections.    * @param c The Configuration instance to set the retries into.    * @param log Used to log what we set in here.    */
specifier|public
specifier|static
name|void
name|setServerSideHConnectionRetriesConfig
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|String
name|sn
parameter_list|,
specifier|final
name|Log
name|log
parameter_list|)
block|{
comment|// TODO: Fix this. Not all connections from server side should have 10 times the retries.
name|int
name|hcRetries
init|=
name|c
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_RETRIES_NUMBER
argument_list|)
decl_stmt|;
comment|// Go big.  Multiply by 10.  If we can't get to meta after this many retries
comment|// then something seriously wrong.
name|int
name|serversideMultiplier
init|=
name|c
operator|.
name|getInt
argument_list|(
literal|"hbase.client.serverside.retries.multiplier"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|retries
init|=
name|hcRetries
operator|*
name|serversideMultiplier
decl_stmt|;
name|c
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|retries
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|sn
operator|+
literal|" server-side Connection retries="
operator|+
name|retries
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a short-circuit connection that can bypass the RPC layer (serialization,    * deserialization, networking, etc..) when talking to a local server.    * @param conf the current configuration    * @param pool the thread pool to use for batch operations    * @param user the user the connection is for    * @param serverName the local server name    * @param admin the admin interface of the local server    * @param client the client interface of the local server    * @return an short-circuit connection.    * @throws IOException if IO failure occurred    */
specifier|public
specifier|static
name|ClusterConnection
name|createShortCircuitConnection
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|User
name|user
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|ClientService
operator|.
name|BlockingInterface
name|client
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|user
operator|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
operator|.
name|getCurrent
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|ConnectionImplementation
argument_list|(
name|conf
argument_list|,
name|pool
argument_list|,
name|user
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|AdminService
operator|.
name|BlockingInterface
name|getAdmin
parameter_list|(
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|serverName
operator|.
name|equals
argument_list|(
name|sn
argument_list|)
condition|?
name|admin
else|:
name|super
operator|.
name|getAdmin
argument_list|(
name|sn
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClientService
operator|.
name|BlockingInterface
name|getClient
parameter_list|(
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|serverName
operator|.
name|equals
argument_list|(
name|sn
argument_list|)
condition|?
name|client
else|:
name|super
operator|.
name|getClient
argument_list|(
name|sn
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Setup the connection class, so that it will not depend on master being online. Used for testing    * @param conf configuration to set    */
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|void
name|setupMasterlessConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|ClusterConnection
operator|.
name|HBASE_CLIENT_CONNECTION_IMPL
argument_list|,
name|MasterlessConnection
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Some tests shut down the master. But table availability is a master RPC which is performed on    * region re-lookups.    */
specifier|static
class|class
name|MasterlessConnection
extends|extends
name|ConnectionImplementation
block|{
name|MasterlessConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|pool
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTableDisabled
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// treat all tables as enabled
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Return retires + 1. The returned value will be in range [1, Integer.MAX_VALUE].    */
specifier|static
name|int
name|retries2Attempts
parameter_list|(
name|int
name|retries
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|retries
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|retries
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/**    * Get a unique key for the rpc stub to the given server.    */
specifier|static
name|String
name|getStubKey
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
name|boolean
name|hostnameCanChange
parameter_list|)
block|{
comment|// Sometimes, servers go down and they come back up with the same hostname but a different
comment|// IP address. Force a resolution of the rsHostname by trying to instantiate an
comment|// InetSocketAddress, and this way we will rightfully get a new stubKey.
comment|// Also, include the hostname in the key so as to take care of those cases where the
comment|// DNS name is different but IP address remains the same.
name|String
name|hostname
init|=
name|serverName
operator|.
name|getHostname
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|serverName
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|hostnameCanChange
condition|)
block|{
try|try
block|{
name|InetAddress
name|ip
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
return|return
name|serviceName
operator|+
literal|"@"
operator|+
name|hostname
operator|+
literal|"-"
operator|+
name|ip
operator|.
name|getHostAddress
argument_list|()
operator|+
literal|":"
operator|+
name|port
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not resolve "
operator|+
name|hostname
operator|+
literal|", please check your network"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|serviceName
operator|+
literal|"@"
operator|+
name|hostname
operator|+
literal|":"
operator|+
name|port
return|;
block|}
specifier|static
name|void
name|checkHasFamilies
parameter_list|(
name|Mutation
name|mutation
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|mutation
operator|.
name|numFamilies
argument_list|()
operator|>
literal|0
argument_list|,
literal|"Invalid arguments to %s, zero columns specified"
argument_list|,
name|mutation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Dummy nonce generator for disabled nonces. */
specifier|static
specifier|final
name|NonceGenerator
name|NO_NONCE_GENERATOR
init|=
operator|new
name|NonceGenerator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|newNonce
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|NO_NONCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getNonceGroup
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|NO_NONCE
return|;
block|}
block|}
decl_stmt|;
comment|// A byte array in which all elements are the max byte, and it is used to
comment|// construct closest front row
specifier|static
name|byte
index|[]
name|MAX_BYTE_ARRAY
init|=
name|Bytes
operator|.
name|createMaxByteArray
argument_list|(
literal|9
argument_list|)
decl_stmt|;
comment|/**    * Create the closest row after the specified row    */
specifier|static
name|byte
index|[]
name|createClosestRowAfter
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|row
argument_list|,
name|row
operator|.
name|length
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/**    * Create the closest row before the specified row    */
specifier|static
name|byte
index|[]
name|createClosestRowBefore
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
if|if
condition|(
name|row
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|MAX_BYTE_ARRAY
return|;
block|}
if|if
condition|(
name|row
index|[
name|row
operator|.
name|length
operator|-
literal|1
index|]
operator|==
literal|0
condition|)
block|{
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|row
argument_list|,
name|row
operator|.
name|length
operator|-
literal|1
argument_list|)
return|;
block|}
else|else
block|{
name|byte
index|[]
name|nextRow
init|=
operator|new
name|byte
index|[
name|row
operator|.
name|length
operator|+
name|MAX_BYTE_ARRAY
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|nextRow
argument_list|,
literal|0
argument_list|,
name|row
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
name|nextRow
index|[
name|row
operator|.
name|length
operator|-
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|row
index|[
name|row
operator|.
name|length
operator|-
literal|1
index|]
operator|&
literal|0xFF
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nextRow
argument_list|,
name|row
operator|.
name|length
argument_list|,
name|MAX_BYTE_ARRAY
argument_list|,
literal|0
argument_list|,
name|MAX_BYTE_ARRAY
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|nextRow
return|;
block|}
block|}
specifier|static
name|boolean
name|isEmptyStartRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|EMPTY_START_ROW
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|isEmptyStopRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|EMPTY_END_ROW
argument_list|)
return|;
block|}
block|}
end_class

end_unit

