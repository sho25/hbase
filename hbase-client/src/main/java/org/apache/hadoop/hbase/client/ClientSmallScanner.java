begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|metrics
operator|.
name|ScanMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|PayloadCarryingRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ResponseConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * Client scanner for small scan. Generally, only one RPC is called to fetch the  * scan results, unless the results cross multiple regions or the row count of  * results excess the caching.  *  * For small scan, it will get better performance than {@link ClientScanner}  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ClientSmallScanner
extends|extends
name|ClientScanner
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ScannerCallableWithReplicas
name|smallScanCallable
init|=
literal|null
decl_stmt|;
comment|// When fetching results from server, skip the first result if it has the same
comment|// row with this one
specifier|private
name|byte
index|[]
name|skipRowOfFirstResult
init|=
literal|null
decl_stmt|;
comment|/**    * Create a new ShortClientScanner for the specified table Note that the    * passed {@link Scan}'s start row maybe changed changed.    *    * @param conf The {@link Configuration} to use.    * @param scan {@link Scan} to use in this scanner    * @param tableName The table that we wish to rangeGet    * @param connection Connection identifying the cluster    * @param rpcFactory    * @param pool    * @param primaryOperationTimeout    * @throws IOException    */
specifier|public
name|ClientSmallScanner
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
name|ClusterConnection
name|connection
parameter_list|,
name|RpcRetryingCallerFactory
name|rpcFactory
parameter_list|,
name|RpcControllerFactory
name|controllerFactory
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|int
name|primaryOperationTimeout
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|scan
argument_list|,
name|tableName
argument_list|,
name|connection
argument_list|,
name|rpcFactory
argument_list|,
name|controllerFactory
argument_list|,
name|pool
argument_list|,
name|primaryOperationTimeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeScannerInConstruction
parameter_list|()
throws|throws
name|IOException
block|{
comment|// No need to initialize the scanner when constructing instance, do it when
comment|// calling next(). Do nothing here.
block|}
comment|/**    * Gets a scanner for following scan. Move to next region or continue from the    * last result or start from the start row.    * @param nbRows    * @param done true if Server-side says we're done scanning.    * @param currentRegionDone true if scan is over on current region    * @return true if has next scanner    * @throws IOException    */
specifier|private
name|boolean
name|nextScanner
parameter_list|(
name|int
name|nbRows
parameter_list|,
specifier|final
name|boolean
name|done
parameter_list|,
name|boolean
name|currentRegionDone
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Where to start the next getter
name|byte
index|[]
name|localStartKey
decl_stmt|;
name|int
name|cacheNum
init|=
name|nbRows
decl_stmt|;
name|skipRowOfFirstResult
operator|=
literal|null
expr_stmt|;
comment|// if we're at end of table, close and return false to stop iterating
if|if
condition|(
name|this
operator|.
name|currentRegion
operator|!=
literal|null
operator|&&
name|currentRegionDone
condition|)
block|{
name|byte
index|[]
name|endKey
init|=
name|this
operator|.
name|currentRegion
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|endKey
operator|==
literal|null
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|endKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|||
name|checkScanStopRow
argument_list|(
name|endKey
argument_list|)
operator|||
name|done
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished with small scan at "
operator|+
name|this
operator|.
name|currentRegion
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|localStartKey
operator|=
name|endKey
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished with region "
operator|+
name|this
operator|.
name|currentRegion
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|lastResult
operator|!=
literal|null
condition|)
block|{
name|localStartKey
operator|=
name|this
operator|.
name|lastResult
operator|.
name|getRow
argument_list|()
expr_stmt|;
name|skipRowOfFirstResult
operator|=
name|this
operator|.
name|lastResult
operator|.
name|getRow
argument_list|()
expr_stmt|;
name|cacheNum
operator|++
expr_stmt|;
block|}
else|else
block|{
name|localStartKey
operator|=
name|this
operator|.
name|scan
operator|.
name|getStartRow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Advancing internal small scanner to startKey at '"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|localStartKey
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|smallScanCallable
operator|=
name|getSmallScanCallable
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getTable
argument_list|()
argument_list|,
name|scan
argument_list|,
name|getScanMetrics
argument_list|()
argument_list|,
name|localStartKey
argument_list|,
name|cacheNum
argument_list|,
name|rpcControllerFactory
argument_list|,
name|getPool
argument_list|()
argument_list|,
name|getPrimaryOperationTimeout
argument_list|()
argument_list|,
name|getRetries
argument_list|()
argument_list|,
name|getScannerTimeout
argument_list|()
argument_list|,
name|getConf
argument_list|()
argument_list|,
name|caller
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|scanMetrics
operator|!=
literal|null
operator|&&
name|skipRowOfFirstResult
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|scanMetrics
operator|.
name|countOfRegions
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|static
name|ScannerCallableWithReplicas
name|getSmallScanCallable
parameter_list|(
name|ClusterConnection
name|connection
parameter_list|,
name|TableName
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|ScanMetrics
name|scanMetrics
parameter_list|,
name|byte
index|[]
name|localStartKey
parameter_list|,
specifier|final
name|int
name|cacheNum
parameter_list|,
name|RpcControllerFactory
name|controllerFactory
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|int
name|primaryOperationTimeout
parameter_list|,
name|int
name|retries
parameter_list|,
name|int
name|scannerTimeout
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|RpcRetryingCaller
argument_list|<
name|Result
index|[]
argument_list|>
name|caller
parameter_list|)
block|{
name|scan
operator|.
name|setStartRow
argument_list|(
name|localStartKey
argument_list|)
expr_stmt|;
name|SmallScannerCallable
name|s
init|=
operator|new
name|SmallScannerCallable
argument_list|(
name|connection
argument_list|,
name|table
argument_list|,
name|scan
argument_list|,
name|scanMetrics
argument_list|,
name|controllerFactory
argument_list|,
name|cacheNum
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ScannerCallableWithReplicas
name|scannerCallableWithReplicas
init|=
operator|new
name|ScannerCallableWithReplicas
argument_list|(
name|table
argument_list|,
name|connection
argument_list|,
name|s
argument_list|,
name|pool
argument_list|,
name|primaryOperationTimeout
argument_list|,
name|scan
argument_list|,
name|retries
argument_list|,
name|scannerTimeout
argument_list|,
name|cacheNum
argument_list|,
name|conf
argument_list|,
name|caller
argument_list|)
decl_stmt|;
return|return
name|scannerCallableWithReplicas
return|;
block|}
specifier|static
class|class
name|SmallScannerCallable
extends|extends
name|ScannerCallable
block|{
specifier|public
name|SmallScannerCallable
parameter_list|(
name|ClusterConnection
name|connection
parameter_list|,
name|TableName
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|ScanMetrics
name|scanMetrics
parameter_list|,
name|RpcControllerFactory
name|controllerFactory
parameter_list|,
name|int
name|caching
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|,
name|table
argument_list|,
name|scan
argument_list|,
name|scanMetrics
argument_list|,
name|controllerFactory
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|setCaching
argument_list|(
name|caching
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Result
index|[]
name|call
parameter_list|(
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
name|ScanRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildScanRequest
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|getScan
argument_list|()
argument_list|,
name|getCaching
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ScanResponse
name|response
init|=
literal|null
decl_stmt|;
name|PayloadCarryingRpcController
name|controller
init|=
name|controllerFactory
operator|.
name|newController
argument_list|()
decl_stmt|;
try|try
block|{
name|controller
operator|.
name|setPriority
argument_list|(
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|setCallTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|response
operator|=
name|getStub
argument_list|()
operator|.
name|scan
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return
name|ResponseConverter
operator|.
name|getResults
argument_list|(
name|controller
operator|.
name|cellScanner
argument_list|()
argument_list|,
name|response
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ScannerCallable
name|getScannerCallableForReplica
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
operator|new
name|SmallScannerCallable
argument_list|(
operator|(
name|ClusterConnection
operator|)
name|connection
argument_list|,
name|tableName
argument_list|,
name|getScan
argument_list|()
argument_list|,
name|scanMetrics
argument_list|,
name|controllerFactory
argument_list|,
name|getCaching
argument_list|()
argument_list|,
name|id
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Result
name|next
parameter_list|()
throws|throws
name|IOException
block|{
comment|// If the scanner is closed and there's nothing left in the cache, next is a
comment|// no-op.
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|this
operator|.
name|closed
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Result
index|[]
name|values
init|=
literal|null
decl_stmt|;
name|long
name|remainingResultSize
init|=
name|maxScannerResultSize
decl_stmt|;
name|int
name|countdown
init|=
name|this
operator|.
name|caching
decl_stmt|;
name|boolean
name|currentRegionDone
init|=
literal|false
decl_stmt|;
comment|// Values == null means server-side filter has determined we must STOP
while|while
condition|(
name|remainingResultSize
operator|>
literal|0
operator|&&
name|countdown
operator|>
literal|0
operator|&&
name|nextScanner
argument_list|(
name|countdown
argument_list|,
name|values
operator|==
literal|null
argument_list|,
name|currentRegionDone
argument_list|)
condition|)
block|{
comment|// Server returns a null values if scanning is to stop. Else,
comment|// returns an empty array if scanning is to go on and we've just
comment|// exhausted current region.
comment|// callWithoutRetries is at this layer. Within the ScannerCallableWithReplicas,
comment|// we do a callWithRetries
name|values
operator|=
name|this
operator|.
name|caller
operator|.
name|callWithoutRetries
argument_list|(
name|smallScanCallable
argument_list|,
name|scannerTimeout
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentRegion
operator|=
name|smallScanCallable
operator|.
name|getHRegionInfo
argument_list|()
expr_stmt|;
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|scanMetrics
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|scanMetrics
operator|.
name|sumOfMillisSecBetweenNexts
operator|.
name|addAndGet
argument_list|(
name|currentTime
operator|-
name|lastNext
argument_list|)
expr_stmt|;
block|}
name|lastNext
operator|=
name|currentTime
expr_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Result
name|rs
init|=
name|values
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|&&
name|this
operator|.
name|skipRowOfFirstResult
operator|!=
literal|null
operator|&&
name|Bytes
operator|.
name|equals
argument_list|(
name|skipRowOfFirstResult
argument_list|,
name|rs
operator|.
name|getRow
argument_list|()
argument_list|)
condition|)
block|{
comment|// Skip the first result
continue|continue;
block|}
name|cache
operator|.
name|add
argument_list|(
name|rs
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|rs
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|remainingResultSize
operator|-=
name|KeyValueUtil
operator|.
name|ensureKeyValue
argument_list|(
name|kv
argument_list|)
operator|.
name|heapSize
argument_list|()
expr_stmt|;
block|}
name|countdown
operator|--
expr_stmt|;
name|this
operator|.
name|lastResult
operator|=
name|rs
expr_stmt|;
block|}
block|}
name|currentRegionDone
operator|=
name|countdown
operator|>
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|cache
operator|.
name|poll
argument_list|()
return|;
block|}
comment|// if we exhausted this scanner before calling close, write out the scan
comment|// metrics
name|writeScanMetrics
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
operator|!
name|scanMetricsPublished
condition|)
name|writeScanMetrics
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

