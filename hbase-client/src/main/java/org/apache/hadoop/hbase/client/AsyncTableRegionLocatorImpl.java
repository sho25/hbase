begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|mutable
operator|.
name|MutableInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * The implementation of AsyncRegionLocator.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|AsyncTableRegionLocatorImpl
implements|implements
name|AsyncTableRegionLocator
block|{
specifier|private
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|private
specifier|final
name|AsyncRegionLocator
name|locator
decl_stmt|;
specifier|public
name|AsyncTableRegionLocatorImpl
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|AsyncRegionLocator
name|locator
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|locator
operator|=
name|locator
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|getRegionLocation
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|int
name|replicaId
parameter_list|,
name|boolean
name|reload
parameter_list|)
block|{
return|return
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|replicaId
argument_list|,
name|RegionLocateType
operator|.
name|CURRENT
argument_list|,
name|reload
argument_list|,
operator|-
literal|1L
argument_list|)
return|;
block|}
comment|// this is used to prevent stack overflow if there are thousands of regions for the table. If the
comment|// location is in cache, the CompletableFuture will be completed immediately inside the same
comment|// thread, and then in the action we will call locate again, also in the same thread. If all the
comment|// locations are in cache, and we do not use whenCompleteAsync to break the tie, the stack will be
comment|// very very deep and cause stack overflow.
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|MutableInt
argument_list|>
name|STACK_DEPTH
init|=
operator|new
name|ThreadLocal
argument_list|<
name|MutableInt
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|MutableInt
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|MutableInt
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|int
name|MAX_STACK_DEPTH
init|=
literal|16
decl_stmt|;
specifier|private
name|void
name|locate
parameter_list|(
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|>
name|future
parameter_list|,
name|ConcurrentLinkedQueue
argument_list|<
name|HRegionLocation
argument_list|>
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
name|BiConsumer
argument_list|<
name|HRegionLocation
argument_list|,
name|Throwable
argument_list|>
name|listener
init|=
parameter_list|(
name|loc
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
name|result
operator|.
name|add
argument_list|(
name|loc
argument_list|)
expr_stmt|;
if|if
condition|(
name|ConnectionUtils
operator|.
name|isEmptyStartRow
argument_list|(
name|loc
operator|.
name|getRegion
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|)
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|result
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
parameter_list|(
name|l1
parameter_list|,
name|l2
parameter_list|)
lambda|->
name|RegionInfo
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|l1
operator|.
name|getRegion
argument_list|()
argument_list|,
name|l2
operator|.
name|getRegion
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|locate
argument_list|(
name|future
argument_list|,
name|result
argument_list|,
name|loc
operator|.
name|getRegion
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|MutableInt
name|depth
init|=
name|STACK_DEPTH
operator|.
name|get
argument_list|()
decl_stmt|;
name|boolean
name|async
init|=
name|depth
operator|.
name|incrementAndGet
argument_list|()
operator|>=
name|MAX_STACK_DEPTH
decl_stmt|;
try|try
block|{
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|f
init|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|RegionLocateType
operator|.
name|BEFORE
argument_list|,
operator|-
literal|1L
argument_list|)
decl_stmt|;
if|if
condition|(
name|async
condition|)
block|{
name|FutureUtils
operator|.
name|addListenerAsync
argument_list|(
name|f
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FutureUtils
operator|.
name|addListener
argument_list|(
name|f
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|depth
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|STACK_DEPTH
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|>
name|getAllRegionLocations
parameter_list|()
block|{
name|ConcurrentLinkedQueue
argument_list|<
name|HRegionLocation
argument_list|>
name|result
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
comment|// start from end to start, as when locating we will do reverse scan, so we will prefetch the
comment|// location of the regions before the current one.
name|locate
argument_list|(
name|future
argument_list|,
name|result
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
block|}
end_class

end_unit

