begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * This class contains visibility labels associated with a Scan/Get deciding which all labeled data  * current scan/get can access.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
class|class
name|Authorizations
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|labels
decl_stmt|;
specifier|public
name|Authorizations
parameter_list|(
name|String
modifier|...
name|labels
parameter_list|)
block|{
name|this
operator|.
name|labels
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|labels
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|label
range|:
name|labels
control|)
block|{
name|validateLabel
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|this
operator|.
name|labels
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|validateLabel
parameter_list|(
name|String
name|label
parameter_list|)
block|{
if|if
condition|(
operator|!
name|VisibilityLabelsValidator
operator|.
name|isValidLabel
argument_list|(
name|label
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid authorization label : "
operator|+
name|label
operator|+
literal|". Authorizations cannot contain '(', ')' ,'&' ,'|', '!'"
operator|+
literal|" and cannot be empty"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Authorizations
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
block|{
for|for
control|(
name|String
name|label
range|:
name|labels
control|)
block|{
name|validateLabel
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|labels
operator|=
name|labels
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLabels
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|this
operator|.
name|labels
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"[ "
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|label
range|:
name|labels
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

