begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|UserPermissionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetOnlineRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetServerInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|RollWALWriterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ActionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|NameBytesPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|CatalogScanResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterAdminProtos
operator|.
name|EnableCatalogJanitorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|GetLastFlushedSequenceIdResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionOpeningState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|UserPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_comment
comment|/**  * Helper utility to build protocol buffer responses,  * or retrieve data from protocol buffer responses.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|ResponseConverter
block|{
specifier|private
name|ResponseConverter
parameter_list|()
block|{   }
comment|// Start utilities for Client
comment|/**    * Get the client Results from a protocol buffer ScanResponse    *    * @param response the protocol buffer ScanResponse    * @return the client Results in the response    */
specifier|public
specifier|static
name|Result
index|[]
name|getResults
parameter_list|(
specifier|final
name|ScanResponse
name|response
parameter_list|)
block|{
if|if
condition|(
name|response
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|int
name|count
init|=
name|response
operator|.
name|getResultCount
argument_list|()
decl_stmt|;
name|Result
index|[]
name|results
init|=
operator|new
name|Result
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|results
index|[
name|i
index|]
operator|=
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|response
operator|.
name|getResult
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**    * Get the results from a protocol buffer MultiResponse    *    * @param proto the protocol buffer MultiResponse to convert    * @param cells Cells to go with the passed in<code>proto</code>.  Can be null.    * @return the results that were in the MultiResponse (a Result or an Exception).    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|getResults
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|MultiResponse
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cells
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ActionResult
argument_list|>
name|resultList
init|=
name|proto
operator|.
name|getResultList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|resultList
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ActionResult
name|result
init|=
name|resultList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|hasException
argument_list|()
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toException
argument_list|(
name|result
operator|.
name|getException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|.
name|hasValue
argument_list|()
condition|)
block|{
name|ClientProtos
operator|.
name|Result
name|value
init|=
name|result
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toResult
argument_list|(
name|value
argument_list|,
name|cells
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
operator|new
name|Result
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
comment|/**    * Wrap a throwable to an action result.    *    * @param t    * @return an action result    */
specifier|public
specifier|static
name|ActionResult
name|buildActionResult
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
name|ActionResult
operator|.
name|Builder
name|builder
init|=
name|ActionResult
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|NameBytesPair
operator|.
name|Builder
name|parameterBuilder
init|=
name|NameBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|parameterBuilder
operator|.
name|setName
argument_list|(
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|parameterBuilder
operator|.
name|setValue
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|t
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setException
argument_list|(
name|parameterBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Converts the permissions list into a protocol buffer UserPermissionsResponse    */
specifier|public
specifier|static
name|UserPermissionsResponse
name|buildUserPermissionsResponse
parameter_list|(
specifier|final
name|List
argument_list|<
name|UserPermission
argument_list|>
name|permissions
parameter_list|)
block|{
name|UserPermissionsResponse
operator|.
name|Builder
name|builder
init|=
name|UserPermissionsResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|UserPermission
name|perm
range|:
name|permissions
control|)
block|{
name|builder
operator|.
name|addPermission
argument_list|(
name|ProtobufUtil
operator|.
name|toUserPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// End utilities for Client
comment|// Start utilities for Admin
comment|/**    * Get the list of regions to flush from a RollLogWriterResponse    *    * @param proto the RollLogWriterResponse    * @return the the list of regions to flush    */
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|getRegions
parameter_list|(
specifier|final
name|RollWALWriterResponse
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
operator|||
name|proto
operator|.
name|getRegionToFlushCount
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteString
name|region
range|:
name|proto
operator|.
name|getRegionToFlushList
argument_list|()
control|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|region
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|byte
index|[]
index|[]
operator|)
name|regions
operator|.
name|toArray
argument_list|()
return|;
block|}
comment|/**    * Get the list of region info from a GetOnlineRegionResponse    *    * @param proto the GetOnlineRegionResponse    * @return the list of region info    */
specifier|public
specifier|static
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getRegionInfos
parameter_list|(
specifier|final
name|GetOnlineRegionResponse
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
operator|||
name|proto
operator|.
name|getRegionInfoCount
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|ProtobufUtil
operator|.
name|getRegionInfos
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Get the region opening state from a OpenRegionResponse    *    * @param proto the OpenRegionResponse    * @return the region opening state    */
specifier|public
specifier|static
name|RegionOpeningState
name|getRegionOpeningState
parameter_list|(
specifier|final
name|OpenRegionResponse
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
operator|||
name|proto
operator|.
name|getOpeningStateCount
argument_list|()
operator|!=
literal|1
condition|)
return|return
literal|null
return|;
return|return
name|RegionOpeningState
operator|.
name|valueOf
argument_list|(
name|proto
operator|.
name|getOpeningState
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get a list of region opening state from a OpenRegionResponse    *     * @param proto the OpenRegionResponse    * @return the list of region opening state    */
specifier|public
specifier|static
name|List
argument_list|<
name|RegionOpeningState
argument_list|>
name|getRegionOpeningStateList
parameter_list|(
specifier|final
name|OpenRegionResponse
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|RegionOpeningState
argument_list|>
name|regionOpeningStates
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionOpeningState
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proto
operator|.
name|getOpeningStateCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|regionOpeningStates
operator|.
name|add
argument_list|(
name|RegionOpeningState
operator|.
name|valueOf
argument_list|(
name|proto
operator|.
name|getOpeningState
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|regionOpeningStates
return|;
block|}
comment|/**    * Check if the region is closed from a CloseRegionResponse    *    * @param proto the CloseRegionResponse    * @return the region close state    */
specifier|public
specifier|static
name|boolean
name|isClosed
parameter_list|(
specifier|final
name|CloseRegionResponse
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
operator|||
operator|!
name|proto
operator|.
name|hasClosed
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|proto
operator|.
name|getClosed
argument_list|()
return|;
block|}
comment|/**    * A utility to build a GetServerInfoResponse.    *    * @param serverName    * @param webuiPort    * @return the response    */
specifier|public
specifier|static
name|GetServerInfoResponse
name|buildGetServerInfoResponse
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|int
name|webuiPort
parameter_list|)
block|{
name|GetServerInfoResponse
operator|.
name|Builder
name|builder
init|=
name|GetServerInfoResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ServerInfo
operator|.
name|Builder
name|serverInfoBuilder
init|=
name|ServerInfo
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|serverInfoBuilder
operator|.
name|setServerName
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|webuiPort
operator|>=
literal|0
condition|)
block|{
name|serverInfoBuilder
operator|.
name|setWebuiPort
argument_list|(
name|webuiPort
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setServerInfo
argument_list|(
name|serverInfoBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * A utility to build a GetOnlineRegionResponse.    *    * @param regions    * @return the response    */
specifier|public
specifier|static
name|GetOnlineRegionResponse
name|buildGetOnlineRegionResponse
parameter_list|(
specifier|final
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
block|{
name|GetOnlineRegionResponse
operator|.
name|Builder
name|builder
init|=
name|GetOnlineRegionResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|builder
operator|.
name|addRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Creates a response for the catalog scan request    * @return A CatalogScanResponse    */
specifier|public
specifier|static
name|CatalogScanResponse
name|buildCatalogScanResponse
parameter_list|(
name|int
name|numCleaned
parameter_list|)
block|{
return|return
name|CatalogScanResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setScanResult
argument_list|(
name|numCleaned
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Creates a response for the catalog scan request    * @return A EnableCatalogJanitorResponse    */
specifier|public
specifier|static
name|EnableCatalogJanitorResponse
name|buildEnableCatalogJanitorResponse
parameter_list|(
name|boolean
name|prevValue
parameter_list|)
block|{
return|return
name|EnableCatalogJanitorResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPrevValue
argument_list|(
name|prevValue
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// End utilities for Admin
comment|/**    * Creates a response for the last flushed sequence Id request    * @return A GetLastFlushedSequenceIdResponse    */
specifier|public
specifier|static
name|GetLastFlushedSequenceIdResponse
name|buildGetLastFlushedSequenceIdResponse
parameter_list|(
name|long
name|seqId
parameter_list|)
block|{
return|return
name|GetLastFlushedSequenceIdResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLastFlushedSequenceId
argument_list|(
name|seqId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Stores an exception encountered during RPC invocation so it can be passed back    * through to the client.    * @param controller the controller instance provided by the client when calling the service    * @param ioe the exception encountered    */
specifier|public
specifier|static
name|void
name|setControllerException
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|controller
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|controller
operator|instanceof
name|ServerRpcController
condition|)
block|{
operator|(
operator|(
name|ServerRpcController
operator|)
name|controller
operator|)
operator|.
name|setFailedOn
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|controller
operator|.
name|setFailed
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ioe
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

