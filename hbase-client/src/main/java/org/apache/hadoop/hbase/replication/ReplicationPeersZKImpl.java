begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|AuthFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|ConnectionLossException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|SessionExpiredException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_comment
comment|/**  * This class provides an implementation of the ReplicationPeers interface using Zookeeper. The  * peers znode contains a list of all peer replication clusters and the current replication state of  * those clusters. It has one child peer znode for each peer cluster. The peer znode is named with  * the cluster id provided by the user in the HBase shell. The value of the peer znode contains the  * peers cluster key provided by the user in the HBase Shell. The cluster key contains a list of  * zookeeper quorum peers, the client port for the zookeeper quorum, and the base znode for HBase.  * For example:  *  *  /hbase/replication/peers/1 [Value: zk1.host.com,zk2.host.com,zk3.host.com:2181:/hbase]  *  /hbase/replication/peers/2 [Value: zk5.host.com,zk6.host.com,zk7.host.com:2181:/hbase]  *  * Each of these peer znodes has a child znode that indicates whether or not replication is enabled  * on that peer cluster. These peer-state znodes do not have child znodes and simply contain a  * boolean value (i.e. ENABLED or DISABLED). This value is read/maintained by the  * ReplicationPeer.PeerStateTracker class. For example:  *  * /hbase/replication/peers/1/peer-state [Value: ENABLED]  */
end_comment

begin_class
specifier|public
class|class
name|ReplicationPeersZKImpl
extends|extends
name|ReplicationStateZKBase
implements|implements
name|ReplicationPeers
block|{
comment|// Map of peer clusters keyed by their id
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ReplicationPeer
argument_list|>
name|peerClusters
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationPeersZKImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ReplicationPeersZKImpl
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zk
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
name|Abortable
name|abortable
parameter_list|)
block|{
name|super
argument_list|(
name|zk
argument_list|,
name|conf
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
name|this
operator|.
name|peerClusters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ReplicationPeer
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ReplicationException
block|{
try|try
block|{
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|peersZNode
argument_list|)
operator|<
literal|0
condition|)
block|{
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|peersZNode
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Could not initialize replication peers"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|connectExistingPeers
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addPeer
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|clusterKey
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
if|if
condition|(
name|peerExists
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot add a peer with id="
operator|+
name|id
operator|+
literal|" because that id already exists."
argument_list|)
throw|;
block|}
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|peersZNode
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createAndWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
name|id
argument_list|)
argument_list|,
name|toByteArray
argument_list|(
name|clusterKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// There is a race b/w PeerWatcher and ReplicationZookeeper#add method to create the
comment|// peer-state znode. This happens while adding a peer.
comment|// The peer state data is set as "ENABLED" by default.
name|ZKUtil
operator|.
name|createNodeIfNotExistsAndWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|getPeerStateNode
argument_list|(
name|id
argument_list|)
argument_list|,
name|ENABLED_ZNODE_BYTES
argument_list|)
expr_stmt|;
comment|// A peer is enabled by default
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Could not add peer with id="
operator|+
name|id
operator|+
literal|", clusterKey="
operator|+
name|clusterKey
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removePeer
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|peerExists
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot remove peer with id="
operator|+
name|id
operator|+
literal|" because that id does not exist."
argument_list|)
throw|;
block|}
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Could not remove peer with id="
operator|+
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|enablePeer
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|changePeerState
argument_list|(
name|id
argument_list|,
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"peer "
operator|+
name|id
operator|+
literal|" is enabled"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|disablePeer
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|changePeerState
argument_list|(
name|id
argument_list|,
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|State
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"peer "
operator|+
name|id
operator|+
literal|" is disabled"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getStatusOfConnectedPeer
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|peerClusters
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Peer with id= "
operator|+
name|id
operator|+
literal|" is not connected"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|peerClusters
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getPeerEnabled
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getStatusOfPeerFromBackingStore
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|ReplicationException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|getAllPeerIds
argument_list|()
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"peer "
operator|+
name|id
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
name|String
name|peerStateZNode
init|=
name|getPeerStateNode
argument_list|(
name|id
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|ReplicationPeer
operator|.
name|isStateEnabled
argument_list|(
name|ZKUtil
operator|.
name|getData
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|peerStateZNode
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|connectToPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
if|if
condition|(
name|peerClusters
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|peerClusters
operator|.
name|containsKey
argument_list|(
name|peerId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ReplicationPeer
name|peer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|peer
operator|=
name|getPeer
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Error connecting to peer with id="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|peer
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|this
operator|.
name|peerClusters
operator|.
name|put
argument_list|(
name|peerId
argument_list|,
name|peer
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added new peer cluster "
operator|+
name|peer
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|disconnectFromPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
name|ReplicationPeer
name|rp
init|=
name|this
operator|.
name|peerClusters
operator|.
name|get
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rp
operator|!=
literal|null
condition|)
block|{
name|rp
operator|.
name|getZkw
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|peerClusters
operator|.
name|remove
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAllPeerClusterKeys
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|peers
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ids
operator|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|peersZNode
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|clusterKey
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clusterKey
operator|=
name|parsePeerFrom
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|de
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed parse of clusterid="
operator|+
name|id
operator|+
literal|" znode content, continuing."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|peers
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|clusterKey
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Cannot get the list of peers "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|peers
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|getRegionServersOfConnectedPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|peerClusters
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|ReplicationPeer
name|peer
init|=
name|this
operator|.
name|peerClusters
operator|.
name|get
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|peer
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ServerName
argument_list|>
name|addresses
decl_stmt|;
try|try
block|{
name|addresses
operator|=
name|fetchSlavesAddresses
argument_list|(
name|peer
operator|.
name|getZkw
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Fetch salves addresses failed."
argument_list|,
name|ke
argument_list|)
expr_stmt|;
block|}
name|reconnectPeer
argument_list|(
name|ke
argument_list|,
name|peer
argument_list|)
expr_stmt|;
name|addresses
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|peer
operator|.
name|setRegionServers
argument_list|(
name|addresses
argument_list|)
expr_stmt|;
return|return
name|peer
operator|.
name|getRegionServers
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|UUID
name|getPeerUUID
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
name|ReplicationPeer
name|peer
init|=
name|this
operator|.
name|peerClusters
operator|.
name|get
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|peer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|UUID
name|peerUUID
init|=
literal|null
decl_stmt|;
try|try
block|{
name|peerUUID
operator|=
name|ZKClusterId
operator|.
name|getUUIDForCluster
argument_list|(
name|peer
operator|.
name|getZkw
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|reconnectPeer
argument_list|(
name|ke
argument_list|,
name|peer
argument_list|)
expr_stmt|;
block|}
return|return
name|peerUUID
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getConnectedPeers
parameter_list|()
block|{
return|return
name|this
operator|.
name|peerClusters
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getPeerConf
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|String
name|znode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
name|peerId
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
try|try
block|{
name|data
operator|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|znode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Error getting configuration for peer with id="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not get configuration for peer because it doesn't exist. peerId="
operator|+
name|peerId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|otherClusterKey
init|=
literal|""
decl_stmt|;
try|try
block|{
name|otherClusterKey
operator|=
name|parsePeerFrom
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to parse cluster key from peerId="
operator|+
name|peerId
operator|+
literal|", specifically the content from the following znode: "
operator|+
name|znode
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Configuration
name|otherConf
init|=
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|applyClusterKeyToConf
argument_list|(
name|otherConf
argument_list|,
name|otherClusterKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't get peer configuration for peerId="
operator|+
name|peerId
operator|+
literal|" because:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|otherConf
return|;
block|}
comment|/**    * List all registered peer clusters and set a watch on their znodes.    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllPeerIds
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ids
operator|=
name|ZKUtil
operator|.
name|listChildrenAndWatchThem
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|peersZNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Cannot get the list of peers "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|ids
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTimestampOfLastChangeToPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|peerClusters
operator|.
name|containsKey
argument_list|(
name|peerId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown peer id: "
operator|+
name|peerId
argument_list|)
throw|;
block|}
return|return
name|peerClusters
operator|.
name|get
argument_list|(
name|peerId
argument_list|)
operator|.
name|getLastRegionserverUpdate
argument_list|()
return|;
block|}
comment|/**    * A private method used during initialization. This method attempts to connect to all registered    * peer clusters. This method does not set a watch on the peer cluster znodes.    */
specifier|private
name|void
name|connectExistingPeers
parameter_list|()
throws|throws
name|ReplicationException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|znodes
init|=
literal|null
decl_stmt|;
try|try
block|{
name|znodes
operator|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|peersZNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Error getting the list of peer clusters."
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|znodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|z
range|:
name|znodes
control|)
block|{
name|connectToPeer
argument_list|(
name|z
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * A private method used to re-establish a zookeeper session with a peer cluster.    * @param ke    * @param peer    */
specifier|private
name|void
name|reconnectPeer
parameter_list|(
name|KeeperException
name|ke
parameter_list|,
name|ReplicationPeer
name|peer
parameter_list|)
block|{
if|if
condition|(
name|ke
operator|instanceof
name|ConnectionLossException
operator|||
name|ke
operator|instanceof
name|SessionExpiredException
operator|||
name|ke
operator|instanceof
name|AuthFailedException
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Lost the ZooKeeper connection for peer "
operator|+
name|peer
operator|.
name|getClusterKey
argument_list|()
argument_list|,
name|ke
argument_list|)
expr_stmt|;
try|try
block|{
name|peer
operator|.
name|reloadZkWatcher
argument_list|()
expr_stmt|;
name|peer
operator|.
name|getZkw
argument_list|()
operator|.
name|registerListener
argument_list|(
operator|new
name|PeerRegionServerListener
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Creation of ZookeeperWatcher failed for peer "
operator|+
name|peer
operator|.
name|getClusterKey
argument_list|()
argument_list|,
name|io
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get the list of all the region servers from the specified peer    * @param zkw zk connection to use    * @return list of region server addresses or an empty list if the slave is unavailable    */
specifier|private
specifier|static
name|List
argument_list|<
name|ServerName
argument_list|>
name|fetchSlavesAddresses
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|)
throws|throws
name|KeeperException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|ZKUtil
operator|.
name|listChildrenAndWatchForNewChildren
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|rsZNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ServerName
argument_list|>
name|addresses
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|addresses
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|parseServerName
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|addresses
return|;
block|}
specifier|private
name|String
name|getPeerStateNode
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|id
argument_list|,
name|this
operator|.
name|peerStateNodeName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Update the state znode of a peer cluster.    * @param id    * @param state    */
specifier|private
name|void
name|changePeerState
parameter_list|(
name|String
name|id
parameter_list|,
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|peerExists
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot enable/disable peer because id="
operator|+
name|id
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|String
name|peerStateZNode
init|=
name|getPeerStateNode
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stateBytes
init|=
operator|(
name|state
operator|==
name|ZooKeeperProtos
operator|.
name|ReplicationState
operator|.
name|State
operator|.
name|ENABLED
operator|)
condition|?
name|ENABLED_ZNODE_BYTES
else|:
name|DISABLED_ZNODE_BYTES
decl_stmt|;
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|peerStateZNode
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|ZKUtil
operator|.
name|setData
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|peerStateZNode
argument_list|,
name|stateBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ZKUtil
operator|.
name|createAndWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|peerStateZNode
argument_list|,
name|stateBytes
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Peer with id= "
operator|+
name|id
operator|+
literal|" is now "
operator|+
name|state
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Unable to change state of the peer with id="
operator|+
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Helper method to connect to a peer    * @param peerId peer's identifier    * @return object representing the peer    * @throws ReplicationException    */
specifier|private
name|ReplicationPeer
name|getPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|Configuration
name|peerConf
init|=
name|getPeerConf
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|peerConf
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|this
operator|.
name|ourClusterKey
operator|.
name|equals
argument_list|(
name|ZKUtil
operator|.
name|getZooKeeperClusterKey
argument_list|(
name|peerConf
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not connecting to "
operator|+
name|peerId
operator|+
literal|" because it's us"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ReplicationPeer
name|peer
init|=
operator|new
name|ReplicationPeer
argument_list|(
name|peerConf
argument_list|,
name|peerId
argument_list|,
name|ZKUtil
operator|.
name|getZooKeeperClusterKey
argument_list|(
name|peerConf
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|peer
operator|.
name|startStateTracker
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|getPeerStateNode
argument_list|(
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Error starting the peer state tracker for peerId="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|peer
operator|.
name|getZkw
argument_list|()
operator|.
name|registerListener
argument_list|(
operator|new
name|PeerRegionServerListener
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|peer
return|;
block|}
comment|/**    * @param bytes Content of a peer znode.    * @return ClusterKey parsed from the passed bytes.    * @throws DeserializationException    */
specifier|private
specifier|static
name|String
name|parsePeerFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|ProtobufUtil
operator|.
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
condition|)
block|{
name|int
name|pblen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|ReplicationPeer
operator|.
name|Builder
name|builder
init|=
name|ZooKeeperProtos
operator|.
name|ReplicationPeer
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|ReplicationPeer
name|peer
decl_stmt|;
try|try
block|{
name|peer
operator|=
name|builder
operator|.
name|mergeFrom
argument_list|(
name|bytes
argument_list|,
name|pblen
argument_list|,
name|bytes
operator|.
name|length
operator|-
name|pblen
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|peer
operator|.
name|getClusterkey
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|bytes
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
block|}
comment|/**    * @param clusterKey    * @return Serialized protobuf of<code>clusterKey</code> with pb magic prefix prepended suitable    *         for use as content of a this.peersZNode; i.e. the content of PEER_ID znode under    *         /hbase/replication/peers/PEER_ID    */
specifier|private
specifier|static
name|byte
index|[]
name|toByteArray
parameter_list|(
specifier|final
name|String
name|clusterKey
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|ZooKeeperProtos
operator|.
name|ReplicationPeer
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterkey
argument_list|(
name|clusterKey
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|prependPBMagic
argument_list|(
name|bytes
argument_list|)
return|;
block|}
comment|/**    * Tracks changes to the list of region servers in a peer's cluster.    */
specifier|public
specifier|static
class|class
name|PeerRegionServerListener
extends|extends
name|ZooKeeperListener
block|{
specifier|private
name|ReplicationPeer
name|peer
decl_stmt|;
specifier|private
name|String
name|regionServerListNode
decl_stmt|;
specifier|public
name|PeerRegionServerListener
parameter_list|(
name|ReplicationPeer
name|replicationPeer
parameter_list|)
block|{
name|super
argument_list|(
name|replicationPeer
operator|.
name|getZkw
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|peer
operator|=
name|replicationPeer
expr_stmt|;
name|this
operator|.
name|regionServerListNode
operator|=
name|peer
operator|.
name|getZkw
argument_list|()
operator|.
name|rsZNode
expr_stmt|;
block|}
specifier|public
name|PeerRegionServerListener
parameter_list|(
name|String
name|regionServerListNode
parameter_list|,
name|ZooKeeperWatcher
name|zkw
parameter_list|)
block|{
name|super
argument_list|(
name|zkw
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionServerListNode
operator|=
name|regionServerListNode
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|nodeChildrenChanged
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|regionServerListNode
argument_list|)
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Detected change to peer regionservers, fetching updated list"
argument_list|)
expr_stmt|;
name|peer
operator|.
name|setRegionServers
argument_list|(
name|fetchSlavesAddresses
argument_list|(
name|peer
operator|.
name|getZkw
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Error reading slave addresses"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

