begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompoundConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|ReplicationSerDeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeer
operator|.
name|PeerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
operator|.
name|ZKUtilOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_comment
comment|/**  * This class provides an implementation of the ReplicationPeers interface using ZooKeeper. The  * peers znode contains a list of all peer replication clusters and the current replication state of  * those clusters. It has one child peer znode for each peer cluster. The peer znode is named with  * the cluster id provided by the user in the HBase shell. The value of the peer znode contains the  * peers cluster key provided by the user in the HBase Shell. The cluster key contains a list of  * zookeeper quorum peers, the client port for the zookeeper quorum, and the base znode for HBase.  * For example:  *  *  /hbase/replication/peers/1 [Value: zk1.host.com,zk2.host.com,zk3.host.com:2181:/hbase]  *  /hbase/replication/peers/2 [Value: zk5.host.com,zk6.host.com,zk7.host.com:2181:/hbase]  *  * Each of these peer znodes has a child znode that indicates whether or not replication is enabled  * on that peer cluster. These peer-state znodes do not have child znodes and simply contain a  * boolean value (i.e. ENABLED or DISABLED). This value is read/maintained by the  * ReplicationPeer.PeerStateTracker class. For example:  *  * /hbase/replication/peers/1/peer-state [Value: ENABLED]  *  * Each of these peer znodes has a child znode that indicates which data will be replicated  * to the peer cluster. These peer-tableCFs znodes do not have child znodes and only have a  * table/cf list config. This value is read/maintained by the ReplicationPeer.TableCFsTracker  * class. For example:  *  * /hbase/replication/peers/1/tableCFs [Value: "table1; table2:cf1,cf3; table3:cfx,cfy"]  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ReplicationPeersZKImpl
extends|extends
name|ReplicationStateZKBase
implements|implements
name|ReplicationPeers
block|{
comment|// Map of peer clusters keyed by their id
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ReplicationPeerZKImpl
argument_list|>
name|peerClusters
decl_stmt|;
specifier|private
specifier|final
name|ReplicationQueuesClient
name|queuesClient
decl_stmt|;
specifier|private
name|Abortable
name|abortable
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationPeersZKImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ReplicationPeersZKImpl
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zk
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|ReplicationQueuesClient
name|queuesClient
parameter_list|,
name|Abortable
name|abortable
parameter_list|)
block|{
name|super
argument_list|(
name|zk
argument_list|,
name|conf
argument_list|,
name|abortable
argument_list|)
expr_stmt|;
name|this
operator|.
name|abortable
operator|=
name|abortable
expr_stmt|;
name|this
operator|.
name|peerClusters
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ReplicationPeerZKImpl
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|queuesClient
operator|=
name|queuesClient
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ReplicationException
block|{
try|try
block|{
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|peersZNode
argument_list|)
operator|<
literal|0
condition|)
block|{
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|peersZNode
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Could not initialize replication peers"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|addExistingPeers
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerPeer
parameter_list|(
name|String
name|id
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
if|if
condition|(
name|peerExists
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot add a peer with id="
operator|+
name|id
operator|+
literal|" because that id already exists."
argument_list|)
throw|;
block|}
if|if
condition|(
name|id
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Found invalid peer name:"
operator|+
name|id
argument_list|)
throw|;
block|}
if|if
condition|(
name|peerConfig
operator|.
name|getClusterKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ZKConfig
operator|.
name|validateClusterKey
argument_list|(
name|peerConfig
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|checkQueuesDeleted
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|peersZNode
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ZKUtilOp
argument_list|>
name|listOfOps
init|=
operator|new
name|ArrayList
argument_list|<
name|ZKUtil
operator|.
name|ZKUtilOp
argument_list|>
argument_list|()
decl_stmt|;
name|ZKUtilOp
name|op1
init|=
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|getPeerNode
argument_list|(
name|id
argument_list|)
argument_list|,
name|ReplicationSerDeHelper
operator|.
name|toByteArray
argument_list|(
name|peerConfig
argument_list|)
argument_list|)
decl_stmt|;
comment|// b/w PeerWatcher and ReplicationZookeeper#add method to create the
comment|// peer-state znode. This happens while adding a peer
comment|// The peer state data is set as "ENABLED" by default.
name|ZKUtilOp
name|op2
init|=
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|getPeerStateNode
argument_list|(
name|id
argument_list|)
argument_list|,
name|ENABLED_ZNODE_BYTES
argument_list|)
decl_stmt|;
name|listOfOps
operator|.
name|add
argument_list|(
name|op1
argument_list|)
expr_stmt|;
name|listOfOps
operator|.
name|add
argument_list|(
name|op2
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|listOfOps
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// A peer is enabled by default
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Could not add peer with id="
operator|+
name|id
operator|+
literal|", peerConfif=>"
operator|+
name|peerConfig
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|unregisterPeer
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|peerExists
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot remove peer with id="
operator|+
name|id
operator|+
literal|" because that id does not exist."
argument_list|)
throw|;
block|}
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|this
operator|.
name|peersZNode
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Could not remove peer with id="
operator|+
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|enablePeer
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|changePeerState
argument_list|(
name|id
argument_list|,
name|ReplicationProtos
operator|.
name|ReplicationState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"peer "
operator|+
name|id
operator|+
literal|" is enabled"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|disablePeer
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|changePeerState
argument_list|(
name|id
argument_list|,
name|ReplicationProtos
operator|.
name|ReplicationState
operator|.
name|State
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"peer "
operator|+
name|id
operator|+
literal|" is disabled"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getPeerTableCFsConfig
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|peerExists
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"peer "
operator|+
name|id
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
try|try
block|{
name|ReplicationPeerConfig
name|rpc
init|=
name|getReplicationPeerConfig
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|rpc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Unable to get tableCFs of the peer with id="
operator|+
name|id
argument_list|)
throw|;
block|}
return|return
name|rpc
operator|.
name|getTableCFsMap
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Unable to get tableCFs of the peer with id="
operator|+
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPeerTableCFsConfig
parameter_list|(
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCFs
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|peerExists
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot set peer tableCFs because id="
operator|+
name|id
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|ReplicationPeerConfig
name|rpc
init|=
name|getReplicationPeerConfig
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|rpc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Unable to get tableCFs of the peer with id="
operator|+
name|id
argument_list|)
throw|;
block|}
name|rpc
operator|.
name|setTableCFsMap
argument_list|(
name|tableCFs
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|getPeerNode
argument_list|(
name|id
argument_list|)
argument_list|,
name|ReplicationSerDeHelper
operator|.
name|toByteArray
argument_list|(
name|rpc
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Peer tableCFs with id= "
operator|+
name|id
operator|+
literal|" is now "
operator|+
name|ReplicationSerDeHelper
operator|.
name|convertToString
argument_list|(
name|tableCFs
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Unable to change tableCFs of the peer with id="
operator|+
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getStatusOfPeer
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|ReplicationPeer
name|replicationPeer
init|=
name|this
operator|.
name|peerClusters
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicationPeer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Peer with id= "
operator|+
name|id
operator|+
literal|" is not cached"
argument_list|)
throw|;
block|}
return|return
name|replicationPeer
operator|.
name|getPeerState
argument_list|()
operator|==
name|PeerState
operator|.
name|ENABLED
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getStatusOfPeerFromBackingStore
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|peerExists
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"peer "
operator|+
name|id
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
name|String
name|peerStateZNode
init|=
name|getPeerStateNode
argument_list|(
name|id
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|ReplicationPeerZKImpl
operator|.
name|isStateEnabled
argument_list|(
name|ZKUtil
operator|.
name|getData
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|peerStateZNode
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Unable to get status of the peer with id="
operator|+
name|id
operator|+
literal|" from backing store"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ReplicationPeerConfig
argument_list|>
name|getAllPeerConfigs
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ReplicationPeerConfig
argument_list|>
name|peers
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|ReplicationPeerConfig
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ids
operator|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|peersZNode
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|ReplicationPeerConfig
name|peerConfig
init|=
name|getReplicationPeerConfig
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|peerConfig
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get replication peer configuration of clusterid="
operator|+
name|id
operator|+
literal|" znode content, continuing."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|peers
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|peerConfig
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Cannot get the list of peers "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Cannot get the list of peers "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|peers
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReplicationPeer
name|getConnectedPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
return|return
name|peerClusters
operator|.
name|get
argument_list|(
name|peerId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getConnectedPeerIds
parameter_list|()
block|{
return|return
name|peerClusters
operator|.
name|keySet
argument_list|()
return|;
comment|// this is not thread-safe
block|}
comment|/**    * Returns a ReplicationPeerConfig from the znode or null for the given peerId.    */
annotation|@
name|Override
specifier|public
name|ReplicationPeerConfig
name|getReplicationPeerConfig
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|String
name|znode
init|=
name|getPeerNode
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
try|try
block|{
name|data
operator|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|znode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not get configuration for peer because the thread "
operator|+
literal|"was interrupted. peerId="
operator|+
name|peerId
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Error getting configuration for peer with id="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not get configuration for peer because it doesn't exist. peerId="
operator|+
name|peerId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|ReplicationSerDeHelper
operator|.
name|parsePeerFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to parse cluster key from peerId="
operator|+
name|peerId
operator|+
literal|", specifically the content from the following znode: "
operator|+
name|znode
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|ReplicationPeerConfig
argument_list|,
name|Configuration
argument_list|>
name|getPeerConf
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|ReplicationPeerConfig
name|peerConfig
init|=
name|getReplicationPeerConfig
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|peerConfig
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Configuration
name|otherConf
decl_stmt|;
try|try
block|{
name|otherConf
operator|=
name|HBaseConfiguration
operator|.
name|createClusterConf
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|peerConfig
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't get peer configuration for peerId="
operator|+
name|peerId
operator|+
literal|" because:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|peerConfig
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CompoundConfiguration
name|compound
init|=
operator|new
name|CompoundConfiguration
argument_list|()
decl_stmt|;
name|compound
operator|.
name|add
argument_list|(
name|otherConf
argument_list|)
expr_stmt|;
name|compound
operator|.
name|addStringMap
argument_list|(
name|peerConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Pair
argument_list|<
name|ReplicationPeerConfig
argument_list|,
name|Configuration
argument_list|>
argument_list|(
name|peerConfig
argument_list|,
name|compound
argument_list|)
return|;
block|}
return|return
operator|new
name|Pair
argument_list|<
name|ReplicationPeerConfig
argument_list|,
name|Configuration
argument_list|>
argument_list|(
name|peerConfig
argument_list|,
name|otherConf
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updatePeerConfig
parameter_list|(
name|String
name|id
parameter_list|,
name|ReplicationPeerConfig
name|newConfig
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|ReplicationPeer
name|peer
init|=
name|getConnectedPeer
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|peer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Could not find peer Id "
operator|+
name|id
operator|+
literal|" in connected peers"
argument_list|)
throw|;
block|}
name|ReplicationPeerConfig
name|existingConfig
init|=
name|peer
operator|.
name|getPeerConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|newConfig
operator|.
name|getClusterKey
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|newConfig
operator|.
name|getClusterKey
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|newConfig
operator|.
name|getClusterKey
argument_list|()
operator|.
name|equals
argument_list|(
name|existingConfig
operator|.
name|getClusterKey
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Changing the cluster key on an existing peer is not allowed."
operator|+
literal|" Existing key '"
operator|+
name|existingConfig
operator|.
name|getClusterKey
argument_list|()
operator|+
literal|"' does not match new key '"
operator|+
name|newConfig
operator|.
name|getClusterKey
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|String
name|existingEndpointImpl
init|=
name|existingConfig
operator|.
name|getReplicationEndpointImpl
argument_list|()
decl_stmt|;
if|if
condition|(
name|newConfig
operator|.
name|getReplicationEndpointImpl
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|newConfig
operator|.
name|getReplicationEndpointImpl
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|newConfig
operator|.
name|getReplicationEndpointImpl
argument_list|()
operator|.
name|equals
argument_list|(
name|existingEndpointImpl
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Changing the replication endpoint implementation class "
operator|+
literal|"on an existing peer is not allowed. Existing class '"
operator|+
name|existingConfig
operator|.
name|getReplicationEndpointImpl
argument_list|()
operator|+
literal|"' does not match new class '"
operator|+
name|newConfig
operator|.
name|getReplicationEndpointImpl
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
comment|//Update existingConfig's peer config and peer data with the new values, but don't touch config
comment|// or data that weren't explicitly changed
name|existingConfig
operator|.
name|getConfiguration
argument_list|()
operator|.
name|putAll
argument_list|(
name|newConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|existingConfig
operator|.
name|getPeerData
argument_list|()
operator|.
name|putAll
argument_list|(
name|newConfig
operator|.
name|getPeerData
argument_list|()
argument_list|)
expr_stmt|;
name|existingConfig
operator|.
name|setTableCFsMap
argument_list|(
name|newConfig
operator|.
name|getTableCFsMap
argument_list|()
argument_list|)
expr_stmt|;
name|existingConfig
operator|.
name|setNamespaces
argument_list|(
name|newConfig
operator|.
name|getNamespaces
argument_list|()
argument_list|)
expr_stmt|;
name|existingConfig
operator|.
name|setBandwidth
argument_list|(
name|newConfig
operator|.
name|getBandwidth
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|setData
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|getPeerNode
argument_list|(
name|id
argument_list|)
argument_list|,
name|ReplicationSerDeHelper
operator|.
name|toByteArray
argument_list|(
name|existingConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"There was a problem trying to save changes to the "
operator|+
literal|"replication peer "
operator|+
name|id
argument_list|,
name|ke
argument_list|)
throw|;
block|}
block|}
comment|/**    * List all registered peer clusters and set a watch on their znodes.    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllPeerIds
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ids
operator|=
name|ZKUtil
operator|.
name|listChildrenAndWatchThem
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|peersZNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|this
operator|.
name|abortable
operator|.
name|abort
argument_list|(
literal|"Cannot get the list of peers "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|ids
return|;
block|}
comment|/**    * A private method used during initialization. This method attempts to add all registered    * peer clusters. This method does not set a watch on the peer cluster znodes.    */
specifier|private
name|void
name|addExistingPeers
parameter_list|()
throws|throws
name|ReplicationException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|znodes
init|=
literal|null
decl_stmt|;
try|try
block|{
name|znodes
operator|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|this
operator|.
name|peersZNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Error getting the list of peer clusters."
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|znodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|z
range|:
name|znodes
control|)
block|{
name|createAndAddPeer
argument_list|(
name|z
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|peerConnected
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
return|return
name|createAndAddPeer
argument_list|(
name|peerId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|peerDisconnected
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
name|ReplicationPeer
name|rp
init|=
name|this
operator|.
name|peerClusters
operator|.
name|get
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rp
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ReplicationPeerZKImpl
argument_list|>
operator|)
name|peerClusters
operator|)
operator|.
name|remove
argument_list|(
name|peerId
argument_list|,
name|rp
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Attempt to connect to a new remote slave cluster.    * @param peerId a short that identifies the cluster    * @return true if a new connection was made, false if no new connection was made.    */
specifier|public
name|boolean
name|createAndAddPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
if|if
condition|(
name|peerClusters
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|peerClusters
operator|.
name|containsKey
argument_list|(
name|peerId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ReplicationPeerZKImpl
name|peer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|peer
operator|=
name|createPeer
argument_list|(
name|peerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Error adding peer with id="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|peer
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ReplicationPeerZKImpl
name|previous
init|=
operator|(
operator|(
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ReplicationPeerZKImpl
argument_list|>
operator|)
name|peerClusters
operator|)
operator|.
name|putIfAbsent
argument_list|(
name|peerId
argument_list|,
name|peer
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Added new peer cluster="
operator|+
name|peer
operator|.
name|getPeerConfig
argument_list|()
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Peer already present, "
operator|+
name|previous
operator|.
name|getPeerConfig
argument_list|()
operator|.
name|getClusterKey
argument_list|()
operator|+
literal|", new cluster="
operator|+
name|peer
operator|.
name|getPeerConfig
argument_list|()
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Update the state znode of a peer cluster.    * @param id    * @param state    */
specifier|private
name|void
name|changePeerState
parameter_list|(
name|String
name|id
parameter_list|,
name|ReplicationProtos
operator|.
name|ReplicationState
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|ReplicationException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|peerExists
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot enable/disable peer because id="
operator|+
name|id
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|String
name|peerStateZNode
init|=
name|getPeerStateNode
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stateBytes
init|=
operator|(
name|state
operator|==
name|ReplicationProtos
operator|.
name|ReplicationState
operator|.
name|State
operator|.
name|ENABLED
operator|)
condition|?
name|ENABLED_ZNODE_BYTES
else|:
name|DISABLED_ZNODE_BYTES
decl_stmt|;
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|peerStateZNode
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|ZKUtil
operator|.
name|setData
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|peerStateZNode
argument_list|,
name|stateBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ZKUtil
operator|.
name|createAndWatch
argument_list|(
name|this
operator|.
name|zookeeper
argument_list|,
name|peerStateZNode
argument_list|,
name|stateBytes
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Peer with id= "
operator|+
name|id
operator|+
literal|" is now "
operator|+
name|state
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Unable to change state of the peer with id="
operator|+
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Helper method to connect to a peer    * @param peerId peer's identifier    * @return object representing the peer    * @throws ReplicationException    */
specifier|private
name|ReplicationPeerZKImpl
name|createPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|Pair
argument_list|<
name|ReplicationPeerConfig
argument_list|,
name|Configuration
argument_list|>
name|pair
init|=
name|getPeerConf
argument_list|(
name|peerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Configuration
name|peerConf
init|=
name|pair
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|ReplicationPeerZKImpl
name|peer
init|=
operator|new
name|ReplicationPeerZKImpl
argument_list|(
name|zookeeper
argument_list|,
name|peerConf
argument_list|,
name|peerId
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|,
name|abortable
argument_list|)
decl_stmt|;
try|try
block|{
name|peer
operator|.
name|startStateTracker
argument_list|(
name|this
operator|.
name|getPeerStateNode
argument_list|(
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Error starting the peer state tracker for peerId="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|peer
operator|.
name|startPeerConfigTracker
argument_list|(
name|this
operator|.
name|getPeerNode
argument_list|(
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Error starting the peer tableCFs tracker for peerId="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|peer
return|;
block|}
specifier|private
name|void
name|checkQueuesDeleted
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|ReplicationException
block|{
if|if
condition|(
name|queuesClient
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|replicators
init|=
name|queuesClient
operator|.
name|getListOfReplicators
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|replicator
range|:
name|replicators
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|queueIds
init|=
name|queuesClient
operator|.
name|getAllQueues
argument_list|(
name|replicator
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|queueId
range|:
name|queueIds
control|)
block|{
name|ReplicationQueueInfo
name|queueInfo
init|=
operator|new
name|ReplicationQueueInfo
argument_list|(
name|queueId
argument_list|)
decl_stmt|;
if|if
condition|(
name|queueInfo
operator|.
name|getPeerId
argument_list|()
operator|.
name|equals
argument_list|(
name|peerId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"undeleted queue for peerId: "
operator|+
name|peerId
operator|+
literal|", replicator: "
operator|+
name|replicator
operator|+
literal|", queueId: "
operator|+
name|queueId
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Check for hfile-refs queue
if|if
condition|(
operator|-
literal|1
operator|!=
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zookeeper
argument_list|,
name|hfileRefsZNode
argument_list|)
operator|&&
name|queuesClient
operator|.
name|getAllPeersFromHFileRefsQueue
argument_list|()
operator|.
name|contains
argument_list|(
name|peerId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Undeleted queue for peerId: "
operator|+
name|peerId
operator|+
literal|", found in hfile-refs node path "
operator|+
name|hfileRefsZNode
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"Could not check queues deleted with id="
operator|+
name|peerId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

