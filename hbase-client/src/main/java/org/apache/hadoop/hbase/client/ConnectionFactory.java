begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FutureUtils
operator|.
name|addListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AuthUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A non-instantiable class that manages creation of {@link Connection}s. Managing the lifecycle of  * the {@link Connection}s to the cluster is the responsibility of the caller. From a  * {@link Connection}, {@link Table} implementations are retrieved with  * {@link Connection#getTable(org.apache.hadoop.hbase.TableName)}. Example:  *  *<pre>  * Connection connection = ConnectionFactory.createConnection(config);  * Table table = connection.getTable(TableName.valueOf("table1"));  * try {  *   // Use the table as needed, for a single operation and a single thread  * } finally {  *   table.close();  *   connection.close();  * }  *</pre>  *  * Since 2.2.0, Connection created by ConnectionFactory can contain user-specified kerberos  * credentials if caller has following two configurations set:  *<ul>  *<li>hbase.client.keytab.file, points to a valid keytab on the local filesystem  *<li>hbase.client.kerberos.principal, gives the Kerberos principal to use  *</ul>  * By this way, caller can directly connect to kerberized cluster without caring login and  * credentials renewal logic in application.  *<pre>  *</pre>  * Similarly, {@link Connection} also returns {@link Admin} and {@link RegionLocator}  * implementations.  * @see Connection  * @since 0.99.0  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|ConnectionFactory
block|{
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_ASYNC_CONNECTION_IMPL
init|=
literal|"hbase.client.async.connection.impl"
decl_stmt|;
comment|/** No public c.tors */
specifier|protected
name|ConnectionFactory
parameter_list|()
block|{   }
comment|/**    * Create a new Connection instance using default HBaseConfiguration. Connection encapsulates all    * housekeeping for a connection to the cluster. All tables and interfaces created from returned    * connection share zookeeper connection, meta cache, and connections to region servers and    * masters.<br>    * The caller is responsible for calling {@link Connection#close()} on the returned connection    * instance. Typical usage:    *    *<pre>    * Connection connection = ConnectionFactory.createConnection();    * Table table = connection.getTable(TableName.valueOf("mytable"));    * try {    *   table.get(...);    *   ...    * } finally {    *   table.close();    *   connection.close();    * }    *</pre>    *    * @return Connection object for<code>conf</code>    */
specifier|public
specifier|static
name|Connection
name|createConnection
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|createConnection
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|AuthUtil
operator|.
name|loginClient
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create a new Connection instance using the passed<code>conf</code> instance. Connection    * encapsulates all housekeeping for a connection to the cluster. All tables and interfaces    * created from returned connection share zookeeper connection, meta cache, and connections to    * region servers and masters.<br>    * The caller is responsible for calling {@link Connection#close()} on the returned connection    * instance. Typical usage:    *    *<pre>    * Connection connection = ConnectionFactory.createConnection(conf);    * Table table = connection.getTable(TableName.valueOf("mytable"));    * try {    *   table.get(...);    *   ...    * } finally {    *   table.close();    *   connection.close();    * }    *</pre>    *    * @param conf configuration    * @return Connection object for<code>conf</code>    */
specifier|public
specifier|static
name|Connection
name|createConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createConnection
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|AuthUtil
operator|.
name|loginClient
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create a new Connection instance using the passed<code>conf</code> instance. Connection    * encapsulates all housekeeping for a connection to the cluster. All tables and interfaces    * created from returned connection share zookeeper connection, meta cache, and connections to    * region servers and masters.<br>    * The caller is responsible for calling {@link Connection#close()} on the returned connection    * instance. Typical usage:    *    *<pre>    * Connection connection = ConnectionFactory.createConnection(conf);    * Table table = connection.getTable(TableName.valueOf("mytable"));    * try {    *   table.get(...);    *   ...    * } finally {    *   table.close();    *   connection.close();    * }    *</pre>    *    * @param conf configuration    * @param pool the thread pool to use for batch operations    * @return Connection object for<code>conf</code>    */
specifier|public
specifier|static
name|Connection
name|createConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createConnection
argument_list|(
name|conf
argument_list|,
name|pool
argument_list|,
name|AuthUtil
operator|.
name|loginClient
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create a new Connection instance using the passed<code>conf</code> instance. Connection    * encapsulates all housekeeping for a connection to the cluster. All tables and interfaces    * created from returned connection share zookeeper connection, meta cache, and connections to    * region servers and masters.<br>    * The caller is responsible for calling {@link Connection#close()} on the returned connection    * instance. Typical usage:    *    *<pre>    * Connection connection = ConnectionFactory.createConnection(conf);    * Table table = connection.getTable(TableName.valueOf("table1"));    * try {    *   table.get(...);    *   ...    * } finally {    *   table.close();    *   connection.close();    * }    *</pre>    *    * @param conf configuration    * @param user the user the connection is for    * @return Connection object for<code>conf</code>    */
specifier|public
specifier|static
name|Connection
name|createConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createConnection
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|user
argument_list|)
return|;
block|}
comment|/**    * Create a new Connection instance using the passed<code>conf</code> instance. Connection    * encapsulates all housekeeping for a connection to the cluster. All tables and interfaces    * created from returned connection share zookeeper connection, meta cache, and connections to    * region servers and masters.<br>    * The caller is responsible for calling {@link Connection#close()} on the returned connection    * instance. Typical usage:    *    *<pre>    * Connection connection = ConnectionFactory.createConnection(conf);    * Table table = connection.getTable(TableName.valueOf("table1"));    * try {    *   table.get(...);    *   ...    * } finally {    *   table.close();    *   connection.close();    * }    *</pre>    *    * @param conf configuration    * @param user the user the connection is for    * @param pool the thread pool to use for batch operations    * @return Connection object for<code>conf</code>    */
specifier|public
specifier|static
name|Connection
name|createConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
specifier|final
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|className
init|=
name|conf
operator|.
name|get
argument_list|(
name|ClusterConnection
operator|.
name|HBASE_CLIENT_CONNECTION_IMPL
argument_list|,
name|ConnectionImplementation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
try|try
block|{
name|clazz
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
comment|// Default HCM#HCI is not accessible; make it so before invoking.
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|clazz
operator|.
name|getDeclaredConstructor
argument_list|(
name|Configuration
operator|.
name|class
argument_list|,
name|ExecutorService
operator|.
name|class
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|constructor
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|user
operator|.
name|runAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|Connection
argument_list|>
call|)
argument_list|()
operator|->
operator|(
name|Connection
operator|)
name|constructor
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|,
name|pool
argument_list|,
name|user
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Call {@link #createAsyncConnection(Configuration)} using default HBaseConfiguration.    * @see #createAsyncConnection(Configuration)    * @return AsyncConnection object wrapped by CompletableFuture    */
specifier|public
specifier|static
name|CompletableFuture
argument_list|<
name|AsyncConnection
argument_list|>
name|createAsyncConnection
parameter_list|()
block|{
return|return
name|createAsyncConnection
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Call {@link #createAsyncConnection(Configuration, User)} using the given {@code conf} and a    * User object created by {@link UserProvider}. The given {@code conf} will also be used to    * initialize the {@link UserProvider}.    * @param conf configuration    * @return AsyncConnection object wrapped by CompletableFuture    * @see #createAsyncConnection(Configuration, User)    * @see UserProvider    */
specifier|public
specifier|static
name|CompletableFuture
argument_list|<
name|AsyncConnection
argument_list|>
name|createAsyncConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|User
name|user
decl_stmt|;
try|try
block|{
name|user
operator|=
name|AuthUtil
operator|.
name|loginClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|AsyncConnection
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
return|return
name|createAsyncConnection
argument_list|(
name|conf
argument_list|,
name|user
argument_list|)
return|;
block|}
comment|/**    * Create a new AsyncConnection instance using the passed {@code conf} and {@code user}.    * AsyncConnection encapsulates all housekeeping for a connection to the cluster. All tables and    * interfaces created from returned connection share zookeeper connection, meta cache, and    * connections to region servers and masters.    *<p>    * The caller is responsible for calling {@link AsyncConnection#close()} on the returned    * connection instance.    *<p>    * Usually you should only create one AsyncConnection instance in your code and use it everywhere    * as it is thread safe.    * @param conf configuration    * @param user the user the asynchronous connection is for    * @return AsyncConnection object wrapped by CompletableFuture    */
specifier|public
specifier|static
name|CompletableFuture
argument_list|<
name|AsyncConnection
argument_list|>
name|createAsyncConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|User
name|user
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|AsyncConnection
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|AsyncRegistry
name|registry
init|=
name|AsyncRegistryFactory
operator|.
name|getRegistry
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|addListener
argument_list|(
name|registry
operator|.
name|getClusterId
argument_list|()
argument_list|,
parameter_list|(
name|clusterId
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|registry
operator|.
name|close
argument_list|()
expr_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|clusterId
operator|==
literal|null
condition|)
block|{
name|registry
operator|.
name|close
argument_list|()
expr_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"clusterid came back null"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|AsyncConnection
argument_list|>
name|clazz
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|HBASE_CLIENT_ASYNC_CONNECTION_IMPL
argument_list|,
name|AsyncConnectionImpl
operator|.
name|class
argument_list|,
name|AsyncConnection
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|future
operator|.
name|complete
argument_list|(
name|user
operator|.
name|runAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|?
extends|extends
name|AsyncConnection
argument_list|>
call|)
argument_list|()
operator|->
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|conf
argument_list|,
name|registry
argument_list|,
name|clusterId
argument_list|,
literal|null
argument_list|,
name|user
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|registry
operator|.
name|close
argument_list|()
expr_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
block|}
end_class

end_unit

