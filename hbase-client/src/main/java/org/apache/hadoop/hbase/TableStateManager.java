begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Helper class for table state management for operations running inside  * RegionServer or HMaster.  * Depending on implementation, fetches information from HBase system table,  * local data store, ZooKeeper ensemble or somewhere else.  * Code running on client side (with no coordinated state context) shall instead use  * {@link org.apache.hadoop.hbase.zookeeper.ZKTableStateClientSideReader}  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
interface|interface
name|TableStateManager
block|{
comment|/**    * Sets the table into desired state. Fails silently if the table is already in this state.    * @param tableName table to process    * @param state new state of this table    * @throws CoordinatedStateException if error happened when trying to set table state    */
name|void
name|setTableState
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|CoordinatedStateException
function_decl|;
comment|/**    * Sets the specified table into the newState, but only if the table is already in    * one of the possibleCurrentStates (otherwise no operation is performed).    * @param tableName table to process    * @param newState new state for the table    * @param states table should be in one of these states for the operation    *                              to be performed    * @throws CoordinatedStateException if error happened while performing operation    * @return true if operation succeeded, false otherwise    */
name|boolean
name|setTableStateIfInStates
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|newState
parameter_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
modifier|...
name|states
parameter_list|)
throws|throws
name|CoordinatedStateException
function_decl|;
comment|/**    * Sets the specified table into the newState, but only if the table is NOT in    * one of the possibleCurrentStates (otherwise no operation is performed).    * @param tableName table to process    * @param newState new state for the table    * @param states table should NOT be in one of these states for the operation    *                              to be performed    * @throws CoordinatedStateException if error happened while performing operation    * @return true if operation succeeded, false otherwise    */
name|boolean
name|setTableStateIfNotInStates
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|newState
parameter_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
modifier|...
name|states
parameter_list|)
throws|throws
name|CoordinatedStateException
function_decl|;
comment|/**    * @return true if the table is in any one of the listed states, false otherwise.    */
name|boolean
name|isTableState
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
modifier|...
name|states
parameter_list|)
function_decl|;
comment|/**    * Mark table as deleted.  Fails silently if the table is not currently marked as disabled.    * @param tableName table to be deleted    * @throws CoordinatedStateException if error happened while performing operation    */
name|void
name|setDeletedTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|CoordinatedStateException
function_decl|;
comment|/**    * Checks if table is present.    *    * @param tableName table we're checking    * @return true if the table is present, false otherwise    */
name|boolean
name|isTablePresent
parameter_list|(
name|TableName
name|tableName
parameter_list|)
function_decl|;
comment|/**    * @return set of tables which are in any one of the listed states, empty Set if none    */
name|Set
argument_list|<
name|TableName
argument_list|>
name|getTablesInStates
parameter_list|(
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
modifier|...
name|states
parameter_list|)
throws|throws
name|InterruptedIOException
throws|,
name|CoordinatedStateException
function_decl|;
comment|/**    * If the table is found in the given state the in-memory state is removed. This    * helps in cases where CreateTable is to be retried by the client in case of    * failures.  If deletePermanentState is true - the flag kept permanently is    * also reset.    *    * @param tableName table we're working on    * @param states if table isn't in any one of these states, operation aborts    * @param deletePermanentState if true, reset the permanent flag    * @throws CoordinatedStateException if error happened in underlying coordination engine    */
name|void
name|checkAndRemoveTableState
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|states
parameter_list|,
name|boolean
name|deletePermanentState
parameter_list|)
throws|throws
name|CoordinatedStateException
function_decl|;
block|}
end_interface

end_unit

