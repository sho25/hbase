begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Base class for FilterList. Currently, we have two sub-classes to extend this class:  * {@link FilterListWithOR}, {@link FilterListWithAND}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|FilterListBase
extends|extends
name|FilterBase
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MAX_LOG_FILTERS
init|=
literal|5
decl_stmt|;
specifier|protected
specifier|final
name|ArrayList
argument_list|<
name|Filter
argument_list|>
name|filters
decl_stmt|;
comment|/** Reference Cell used by {@link #transformCell(Cell)} for validation purpose. */
specifier|protected
name|Cell
name|referenceCell
init|=
literal|null
decl_stmt|;
comment|/**    * When filtering a given Cell in {@link #filterCell(Cell)}, this stores the transformed Cell    * to be returned by {@link #transformCell(Cell)}. Individual filters transformation are applied    * only when the filter includes the Cell. Transformations are composed in the order specified by    * {@link #filters}.    */
specifier|protected
name|Cell
name|transformedCell
init|=
literal|null
decl_stmt|;
specifier|public
name|FilterListBase
parameter_list|(
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
parameter_list|)
block|{
name|reversed
operator|=
name|checkAndGetReversed
argument_list|(
name|filters
argument_list|,
name|reversed
argument_list|)
expr_stmt|;
name|this
operator|.
name|filters
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|boolean
name|isInReturnCodes
parameter_list|(
name|ReturnCode
name|testRC
parameter_list|,
name|ReturnCode
modifier|...
name|returnCodes
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|returnCodes
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|testRC
operator|::
name|equals
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|checkAndGetReversed
parameter_list|(
name|List
argument_list|<
name|Filter
argument_list|>
name|rowFilters
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|rowFilters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
name|Boolean
name|retValue
init|=
name|rowFilters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isReversed
argument_list|()
decl_stmt|;
name|boolean
name|allEqual
init|=
name|rowFilters
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Filter
operator|::
name|isReversed
argument_list|)
operator|.
name|allMatch
argument_list|(
name|retValue
operator|::
name|equals
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allEqual
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Filters in the list must have the same reversed flag"
argument_list|)
throw|;
block|}
return|return
name|retValue
return|;
block|}
specifier|public
specifier|abstract
name|void
name|addFilterLists
parameter_list|(
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
parameter_list|)
function_decl|;
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|this
operator|.
name|filters
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|this
operator|.
name|filters
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Filter
argument_list|>
name|getFilters
parameter_list|()
block|{
return|return
name|this
operator|.
name|filters
return|;
block|}
specifier|protected
name|int
name|compareCell
parameter_list|(
name|Cell
name|a
parameter_list|,
name|Cell
name|b
parameter_list|)
block|{
name|int
name|cmp
init|=
name|CellComparator
operator|.
name|getInstance
argument_list|()
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
return|return
name|reversed
condition|?
operator|-
literal|1
operator|*
name|cmp
else|:
name|cmp
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|transformCell
parameter_list|(
name|Cell
name|c
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|transformCell
argument_list|(
name|c
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|CellUtil
operator|.
name|equals
argument_list|(
name|c
argument_list|,
name|referenceCell
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Reference Cell: "
operator|+
name|this
operator|.
name|referenceCell
operator|+
literal|" does not match: "
operator|+
name|c
argument_list|)
throw|;
block|}
comment|// Copy transformedCell into a new cell and reset transformedCell& referenceCell to null for
comment|// Java GC optimization
name|Cell
name|cell
init|=
name|KeyValueUtil
operator|.
name|copyToNewKeyValue
argument_list|(
name|this
operator|.
name|transformedCell
argument_list|)
decl_stmt|;
name|this
operator|.
name|transformedCell
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|referenceCell
operator|=
literal|null
expr_stmt|;
return|return
name|cell
return|;
block|}
comment|/**    * Internal implementation of {@link #filterCell(Cell)}    * @param c The cell in question.    * @param transformedCell The transformed cell of previous filter(s)    * @return ReturnCode of this filter operation.    * @throws IOException    * @see org.apache.hadoop.hbase.filter.FilterList#internalFilterCell(Cell, Cell)    */
specifier|abstract
name|ReturnCode
name|internalFilterCell
parameter_list|(
name|Cell
name|c
parameter_list|,
name|Cell
name|transformedCell
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterKeyValue
parameter_list|(
specifier|final
name|Cell
name|c
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|filterCell
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterCell
parameter_list|(
specifier|final
name|Cell
name|c
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|internalFilterCell
argument_list|(
name|c
argument_list|,
name|c
argument_list|)
return|;
block|}
comment|/**    * Filters that never filter by modifying the returned List of Cells can inherit this    * implementation that does nothing. {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|filterRowCells
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|filters
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|filters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|filterRowCells
argument_list|(
name|cells
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasFilterRow
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|filters
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|filters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|hasFilterRow
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFamilyEssential
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|filters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|isFamilyEssential
argument_list|(
name|name
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|filters
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|filters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isFamilyEssential
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setReversed
parameter_list|(
name|boolean
name|reversed
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|filters
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|filters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|setReversed
argument_list|(
name|reversed
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|reversed
operator|=
name|reversed
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|int
name|endIndex
init|=
name|this
operator|.
name|size
argument_list|()
operator|<
name|MAX_LOG_FILTERS
condition|?
name|this
operator|.
name|size
argument_list|()
else|:
name|MAX_LOG_FILTERS
decl_stmt|;
return|return
name|formatLogFilters
argument_list|(
name|filters
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|endIndex
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|String
name|formatLogFilters
parameter_list|(
name|List
argument_list|<
name|Filter
argument_list|>
name|logFilters
parameter_list|)
function_decl|;
block|}
end_class

end_unit

