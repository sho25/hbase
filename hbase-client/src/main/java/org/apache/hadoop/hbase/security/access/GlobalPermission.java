begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Represents an authorization for access whole cluster.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|GlobalPermission
extends|extends
name|Permission
block|{
comment|/** Default constructor for Writable, do not use */
specifier|public
name|GlobalPermission
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|scope
operator|=
name|Scope
operator|.
name|EMPTY
expr_stmt|;
block|}
comment|/**    * Construct a global permission.    * @param assigned assigned actions    */
name|GlobalPermission
parameter_list|(
name|Action
modifier|...
name|assigned
parameter_list|)
block|{
name|super
argument_list|(
name|assigned
argument_list|)
expr_stmt|;
name|this
operator|.
name|scope
operator|=
name|Scope
operator|.
name|GLOBAL
expr_stmt|;
block|}
comment|/**    * Construct a global permission.    * @param actionCode assigned actions    */
name|GlobalPermission
parameter_list|(
name|byte
index|[]
name|actionCode
parameter_list|)
block|{
name|super
argument_list|(
name|actionCode
argument_list|)
expr_stmt|;
name|this
operator|.
name|scope
operator|=
name|Scope
operator|.
name|GLOBAL
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|GlobalPermission
operator|&&
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[GlobalPermission: "
operator|+
name|rawExpression
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

