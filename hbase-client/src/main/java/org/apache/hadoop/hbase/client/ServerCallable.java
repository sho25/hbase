begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseClientRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_comment
comment|/**  * Abstract class that implements {@link Callable}.  Implementation stipulates  * return type and method we actually invoke on remote Server.  Usually  * used inside a try/catch that fields usual connection failures all wrapped  * up in a retry loop.  *<p>Call {@link #connect(boolean)} to connect to server hosting region  * that contains the passed row in the passed table before invoking  * {@link #call()}.  * @see HConnection#getRegionServerWithoutRetries(ServerCallable)  * @param<T> the class that the ServerCallable handles  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
specifier|abstract
class|class
name|ServerCallable
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Callable
argument_list|<
name|T
argument_list|>
block|{
specifier|protected
specifier|final
name|HConnection
name|connection
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|row
decl_stmt|;
specifier|protected
name|HRegionLocation
name|location
decl_stmt|;
specifier|protected
name|ClientProtocol
name|server
decl_stmt|;
specifier|protected
name|int
name|callTimeout
decl_stmt|;
specifier|protected
name|long
name|globalStartTime
decl_stmt|;
specifier|protected
name|long
name|startTime
decl_stmt|,
name|endTime
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|MIN_RPC_TIMEOUT
init|=
literal|2000
decl_stmt|;
comment|/**    * @param connection Connection to use.    * @param tableName Table name to which<code>row</code> belongs.    * @param row The row we want in<code>tableName</code>.    */
specifier|public
name|ServerCallable
parameter_list|(
name|HConnection
name|connection
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
name|this
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_OPERATION_TIMEOUT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ServerCallable
parameter_list|(
name|HConnection
name|connection
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|int
name|callTimeout
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|callTimeout
operator|=
name|callTimeout
expr_stmt|;
block|}
comment|/**    * Connect to the server hosting region with row from tablename.    * @param reload Set this to true if connection should re-find the region    * @throws IOException e    */
specifier|public
name|void
name|connect
parameter_list|(
specifier|final
name|boolean
name|reload
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|location
operator|=
name|connection
operator|.
name|getRegionLocation
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|reload
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|connection
operator|.
name|getClient
argument_list|(
name|location
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** @return the server name    * @deprecated Just use {@link #toString()} instead.    */
specifier|public
name|String
name|getServerName
parameter_list|()
block|{
if|if
condition|(
name|location
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|location
operator|.
name|getHostnamePort
argument_list|()
return|;
block|}
comment|/** @return the region name    * @deprecated Just use {@link #toString()} instead.    */
specifier|public
name|byte
index|[]
name|getRegionName
parameter_list|()
block|{
if|if
condition|(
name|location
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
return|;
block|}
comment|/** @return the row    * @deprecated Just use {@link #toString()} instead.    */
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
return|return
name|row
return|;
block|}
specifier|public
name|void
name|beforeCall
parameter_list|()
block|{
name|this
operator|.
name|startTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|int
name|remaining
init|=
call|(
name|int
call|)
argument_list|(
name|callTimeout
operator|-
operator|(
name|this
operator|.
name|startTime
operator|-
name|this
operator|.
name|globalStartTime
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|remaining
operator|<
name|MIN_RPC_TIMEOUT
condition|)
block|{
comment|// If there is no time left, we're trying anyway. It's too late.
comment|// 0 means no timeout, and it's not the intent here. So we secure both cases by
comment|// resetting to the minimum.
name|remaining
operator|=
name|MIN_RPC_TIMEOUT
expr_stmt|;
block|}
name|HBaseClientRPC
operator|.
name|setRpcTimeout
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|afterCall
parameter_list|()
block|{
name|HBaseClientRPC
operator|.
name|resetRpcTimeout
argument_list|()
expr_stmt|;
name|this
operator|.
name|endTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return {@link HConnection} instance used by this Callable.    */
name|HConnection
name|getConnection
parameter_list|()
block|{
return|return
name|this
operator|.
name|connection
return|;
block|}
comment|/**    * Run this instance with retries, timed waits,    * and refinds of missing regions.    *    * @return an object of type T    * @throws IOException if a remote or network exception occurs    * @throws RuntimeException other unspecified error    */
specifier|public
name|T
name|withRetries
parameter_list|()
throws|throws
name|IOException
throws|,
name|RuntimeException
block|{
name|Configuration
name|c
init|=
name|getConnection
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|long
name|pause
init|=
name|c
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_PAUSE
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numRetries
init|=
name|c
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_RETRIES_NUMBER
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RetriesExhaustedException
operator|.
name|ThrowableWithExtraContext
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|RetriesExhaustedException
operator|.
name|ThrowableWithExtraContext
argument_list|>
argument_list|()
decl_stmt|;
name|this
operator|.
name|globalStartTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|0
init|;
name|tries
operator|<
name|numRetries
condition|;
name|tries
operator|++
control|)
block|{
try|try
block|{
name|beforeCall
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|tries
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|=
name|translateException
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|SocketTimeoutException
operator|||
name|t
operator|instanceof
name|ConnectException
operator|||
name|t
operator|instanceof
name|RetriesExhaustedException
condition|)
block|{
comment|// if thrown these exceptions, we clear all the cache entries that
comment|// map to that slow/dead server; otherwise, let cache miss and ask
comment|// .META. again to find the new location
name|HRegionLocation
name|hrl
init|=
name|location
decl_stmt|;
if|if
condition|(
name|hrl
operator|!=
literal|null
condition|)
block|{
name|getConnection
argument_list|()
operator|.
name|clearCaches
argument_list|(
name|hrl
operator|.
name|getHostnamePort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|RetriesExhaustedException
operator|.
name|ThrowableWithExtraContext
name|qt
init|=
operator|new
name|RetriesExhaustedException
operator|.
name|ThrowableWithExtraContext
argument_list|(
name|t
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|qt
argument_list|)
expr_stmt|;
if|if
condition|(
name|tries
operator|==
name|numRetries
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|RetriesExhaustedException
argument_list|(
name|tries
argument_list|,
name|exceptions
argument_list|)
throw|;
block|}
name|long
name|expectedSleep
init|=
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
name|pause
argument_list|,
name|tries
argument_list|)
decl_stmt|;
comment|// If, after the planned sleep, there won't be enough time left, we stop now.
if|if
condition|(
operator|(
operator|(
name|this
operator|.
name|endTime
operator|-
name|this
operator|.
name|globalStartTime
operator|)
operator|+
name|MIN_RPC_TIMEOUT
operator|+
name|expectedSleep
operator|)
operator|>
name|this
operator|.
name|callTimeout
condition|)
block|{
throw|throw
operator|(
name|SocketTimeoutException
operator|)
operator|new
name|SocketTimeoutException
argument_list|(
literal|"Call to access row '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"' on table '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
operator|+
literal|"' failed on timeout. "
operator|+
literal|" callTimeout="
operator|+
name|this
operator|.
name|callTimeout
operator|+
literal|", time="
operator|+
operator|(
name|this
operator|.
name|endTime
operator|-
name|this
operator|.
name|startTime
operator|)
argument_list|)
operator|.
name|initCause
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|afterCall
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
name|pause
argument_list|,
name|tries
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted after tries="
operator|+
name|tries
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Run this instance against the server once.    * @return an object of type T    * @throws IOException if a remote or network exception occurs    * @throws RuntimeException other unspecified error    */
specifier|public
name|T
name|withoutRetries
parameter_list|()
throws|throws
name|IOException
throws|,
name|RuntimeException
block|{
name|this
operator|.
name|globalStartTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
try|try
block|{
name|beforeCall
argument_list|()
expr_stmt|;
name|connect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwable
name|t2
init|=
name|translateException
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|t2
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|t2
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t2
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|afterCall
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|Throwable
name|translateException
parameter_list|(
name|Throwable
name|t
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|t
operator|instanceof
name|UndeclaredThrowableException
condition|)
block|{
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|RemoteException
condition|)
block|{
name|t
operator|=
operator|(
operator|(
name|RemoteException
operator|)
name|t
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|ServiceException
condition|)
block|{
name|ServiceException
name|se
init|=
operator|(
name|ServiceException
operator|)
name|t
decl_stmt|;
name|Throwable
name|cause
init|=
name|se
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
operator|&&
name|cause
operator|instanceof
name|DoNotRetryIOException
condition|)
block|{
throw|throw
operator|(
name|DoNotRetryIOException
operator|)
name|cause
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|DoNotRetryIOException
condition|)
block|{
throw|throw
operator|(
name|DoNotRetryIOException
operator|)
name|t
throw|;
block|}
return|return
name|t
return|;
block|}
block|}
end_class

end_unit

