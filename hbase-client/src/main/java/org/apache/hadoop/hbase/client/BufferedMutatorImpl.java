begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license  * agreements. See the NOTICE file distributed with this work for additional information regarding  * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License. You may obtain a  * copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|BufferedMutatorParams
operator|.
name|UNSET
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  *<p>  * Used to communicate with a single HBase table similar to {@link Table}  * but meant for batched, potentially asynchronous puts. Obtain an instance from  * a {@link Connection} and call {@link #close()} afterwards. Provide an alternate  * to this implementation by setting {@link BufferedMutatorParams#implementationClassName(String)}  * or by setting alternate classname via the key {} in Configuration.  *</p>  *  *<p>  * While this can be used across threads, great care should be used when doing so.  * Errors are global to the buffered mutator and the Exceptions can be thrown on any  * thread that causes the flush for requests.  *</p>  *  * @see ConnectionFactory  * @see Connection  * @since 1.0.0  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|BufferedMutatorImpl
implements|implements
name|BufferedMutator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BufferedMutatorImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExceptionListener
name|listener
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentLinkedQueue
argument_list|<
name|Mutation
argument_list|>
name|writeAsyncBuffer
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|currentWriteBufferSize
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * Count the size of {@link BufferedMutatorImpl#writeAsyncBuffer}.    * The {@link ConcurrentLinkedQueue#size()} is NOT a constant-time operation.    */
specifier|private
specifier|final
name|AtomicInteger
name|undealtMutationCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|long
name|writeBufferSize
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|writeBufferPeriodicFlushTimeoutMs
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|writeBufferPeriodicFlushTimerTickMs
init|=
operator|new
name|AtomicLong
argument_list|(
name|MIN_WRITE_BUFFER_PERIODIC_FLUSH_TIMERTICK_MS
argument_list|)
decl_stmt|;
specifier|private
name|Timer
name|writeBufferPeriodicFlushTimer
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxKeyValueSize
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|pool
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|rpcTimeout
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|operationTimeout
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|cleanupPoolOnClose
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|AsyncProcess
name|ap
decl_stmt|;
annotation|@
name|VisibleForTesting
name|BufferedMutatorImpl
parameter_list|(
name|ClusterConnection
name|conn
parameter_list|,
name|BufferedMutatorParams
name|params
parameter_list|,
name|AsyncProcess
name|ap
parameter_list|)
block|{
if|if
condition|(
name|conn
operator|==
literal|null
operator|||
name|conn
operator|.
name|isClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Connection is null or closed."
argument_list|)
throw|;
block|}
name|this
operator|.
name|tableName
operator|=
name|params
operator|.
name|getTableName
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conn
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|params
operator|.
name|getListener
argument_list|()
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|getPool
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|pool
operator|=
name|HTable
operator|.
name|getDefaultExecutor
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cleanupPoolOnClose
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|pool
operator|=
name|params
operator|.
name|getPool
argument_list|()
expr_stmt|;
name|cleanupPoolOnClose
operator|=
literal|false
expr_stmt|;
block|}
name|ConnectionConfiguration
name|tableConf
init|=
operator|new
name|ConnectionConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|writeBufferSize
operator|=
name|params
operator|.
name|getWriteBufferSize
argument_list|()
operator|!=
name|UNSET
condition|?
name|params
operator|.
name|getWriteBufferSize
argument_list|()
else|:
name|tableConf
operator|.
name|getWriteBufferSize
argument_list|()
expr_stmt|;
comment|// Set via the setter because it does value validation and starts/stops the TimerTask
name|long
name|newWriteBufferPeriodicFlushTimeoutMs
init|=
name|params
operator|.
name|getWriteBufferPeriodicFlushTimeoutMs
argument_list|()
operator|!=
name|UNSET
condition|?
name|params
operator|.
name|getWriteBufferPeriodicFlushTimeoutMs
argument_list|()
else|:
name|tableConf
operator|.
name|getWriteBufferPeriodicFlushTimeoutMs
argument_list|()
decl_stmt|;
name|long
name|newWriteBufferPeriodicFlushTimerTickMs
init|=
name|params
operator|.
name|getWriteBufferPeriodicFlushTimerTickMs
argument_list|()
operator|!=
name|UNSET
condition|?
name|params
operator|.
name|getWriteBufferPeriodicFlushTimerTickMs
argument_list|()
else|:
name|tableConf
operator|.
name|getWriteBufferPeriodicFlushTimerTickMs
argument_list|()
decl_stmt|;
name|this
operator|.
name|setWriteBufferPeriodicFlush
argument_list|(
name|newWriteBufferPeriodicFlushTimeoutMs
argument_list|,
name|newWriteBufferPeriodicFlushTimerTickMs
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxKeyValueSize
operator|=
name|params
operator|.
name|getMaxKeyValueSize
argument_list|()
operator|!=
name|UNSET
condition|?
name|params
operator|.
name|getMaxKeyValueSize
argument_list|()
else|:
name|tableConf
operator|.
name|getMaxKeyValueSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcTimeout
operator|=
operator|new
name|AtomicInteger
argument_list|(
name|params
operator|.
name|getRpcTimeout
argument_list|()
operator|!=
name|UNSET
condition|?
name|params
operator|.
name|getRpcTimeout
argument_list|()
else|:
name|conn
operator|.
name|getConnectionConfiguration
argument_list|()
operator|.
name|getWriteRpcTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|operationTimeout
operator|=
operator|new
name|AtomicInteger
argument_list|(
name|params
operator|.
name|getOperationTimeout
argument_list|()
operator|!=
name|UNSET
condition|?
name|params
operator|.
name|getOperationTimeout
argument_list|()
else|:
name|conn
operator|.
name|getConnectionConfiguration
argument_list|()
operator|.
name|getOperationTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|ap
operator|=
name|ap
expr_stmt|;
block|}
name|BufferedMutatorImpl
parameter_list|(
name|ClusterConnection
name|conn
parameter_list|,
name|RpcRetryingCallerFactory
name|rpcCallerFactory
parameter_list|,
name|RpcControllerFactory
name|rpcFactory
parameter_list|,
name|BufferedMutatorParams
name|params
parameter_list|)
block|{
name|this
argument_list|(
name|conn
argument_list|,
name|params
argument_list|,
comment|// puts need to track errors globally due to how the APIs currently work.
operator|new
name|AsyncProcess
argument_list|(
name|conn
argument_list|,
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|rpcCallerFactory
argument_list|,
name|rpcFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkClose
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot put when the BufferedMutator is closed."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
name|ExecutorService
name|getPool
parameter_list|()
block|{
return|return
name|pool
return|;
block|}
annotation|@
name|VisibleForTesting
name|AsyncProcess
name|getAsyncProcess
parameter_list|()
block|{
return|return
name|ap
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutate
parameter_list|(
name|Mutation
name|m
parameter_list|)
throws|throws
name|InterruptedIOException
throws|,
name|RetriesExhaustedWithDetailsException
block|{
name|mutate
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutate
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Mutation
argument_list|>
name|ms
parameter_list|)
throws|throws
name|InterruptedIOException
throws|,
name|RetriesExhaustedWithDetailsException
block|{
name|checkClose
argument_list|()
expr_stmt|;
name|long
name|toAddSize
init|=
literal|0
decl_stmt|;
name|int
name|toAddCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Mutation
name|m
range|:
name|ms
control|)
block|{
if|if
condition|(
name|m
operator|instanceof
name|Put
condition|)
block|{
name|HTable
operator|.
name|validatePut
argument_list|(
operator|(
name|Put
operator|)
name|m
argument_list|,
name|maxKeyValueSize
argument_list|)
expr_stmt|;
block|}
name|toAddSize
operator|+=
name|m
operator|.
name|heapSize
argument_list|()
expr_stmt|;
operator|++
name|toAddCount
expr_stmt|;
block|}
if|if
condition|(
name|currentWriteBufferSize
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
block|{
name|firstRecordInBufferTimestamp
operator|.
name|set
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|currentWriteBufferSize
operator|.
name|addAndGet
argument_list|(
name|toAddSize
argument_list|)
expr_stmt|;
name|writeAsyncBuffer
operator|.
name|addAll
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|undealtMutationCount
operator|.
name|addAndGet
argument_list|(
name|toAddCount
argument_list|)
expr_stmt|;
name|doFlush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|long
name|getExecutedWriteBufferPeriodicFlushes
parameter_list|()
block|{
return|return
name|executedWriteBufferPeriodicFlushes
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
specifier|final
name|AtomicLong
name|firstRecordInBufferTimestamp
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|executedWriteBufferPeriodicFlushes
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|void
name|timerCallbackForWriteBufferPeriodicFlush
parameter_list|()
block|{
if|if
condition|(
name|currentWriteBufferSize
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
comment|// Nothing to flush
block|}
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstRecordInBufferTimestamp
operator|.
name|get
argument_list|()
operator|+
name|writeBufferPeriodicFlushTimeoutMs
operator|.
name|get
argument_list|()
operator|>
name|now
condition|)
block|{
return|return;
comment|// No need to flush yet
block|}
comment|// The first record in the writebuffer has been in there too long --> flush
try|try
block|{
name|executedWriteBufferPeriodicFlushes
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedIOException
decl||
name|RetriesExhaustedWithDetailsException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception during timerCallbackForWriteBufferPeriodicFlush --> "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
comment|// Stop any running Periodic Flush timer.
name|disableWriteBufferPeriodicFlush
argument_list|()
expr_stmt|;
try|try
block|{
comment|// As we can have an operation in progress even if the buffer is empty, we call
comment|// doFlush at least one time.
name|doFlush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cleanupPoolOnClose
condition|)
block|{
name|this
operator|.
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|pool
operator|.
name|awaitTermination
argument_list|(
literal|600
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"close() failed to terminate pool after 10 minutes. Abandoning pool."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"waitForTermination interrupted"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|private
name|AsyncProcessTask
name|createTask
parameter_list|(
name|QueueRowAccess
name|access
parameter_list|)
block|{
return|return
operator|new
name|AsyncProcessTask
argument_list|(
name|AsyncProcessTask
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setRowAccess
argument_list|(
name|access
argument_list|)
operator|.
name|setSubmittedRows
argument_list|(
name|AsyncProcessTask
operator|.
name|SubmittedRows
operator|.
name|AT_LEAST_ONE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|getRpcTimeout
parameter_list|()
block|{
return|return
name|rpcTimeout
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getOperationTimeout
parameter_list|()
block|{
return|return
name|operationTimeout
operator|.
name|get
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|InterruptedIOException
throws|,
name|RetriesExhaustedWithDetailsException
block|{
name|checkClose
argument_list|()
expr_stmt|;
name|doFlush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Send the operations in the buffer to the servers.    *    * @param flushAll - if true, sends all the writes and wait for all of them to finish before    *                 returning. Otherwise, flush until buffer size is smaller than threshold    */
specifier|private
name|void
name|doFlush
parameter_list|(
name|boolean
name|flushAll
parameter_list|)
throws|throws
name|InterruptedIOException
throws|,
name|RetriesExhaustedWithDetailsException
block|{
name|List
argument_list|<
name|RetriesExhaustedWithDetailsException
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|flushAll
operator|&&
name|currentWriteBufferSize
operator|.
name|get
argument_list|()
operator|<=
name|writeBufferSize
condition|)
block|{
comment|// There is the room to accept more mutations.
break|break;
block|}
name|AsyncRequestFuture
name|asf
decl_stmt|;
try|try
init|(
name|QueueRowAccess
name|access
init|=
name|createQueueRowAccess
argument_list|()
init|)
block|{
if|if
condition|(
name|access
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// It means someone has gotten the ticker to run the flush.
break|break;
block|}
name|asf
operator|=
name|ap
operator|.
name|submit
argument_list|(
name|createTask
argument_list|(
name|access
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// DON'T do the wait in the try-with-resources. Otherwise, the undealt mutations won't
comment|// be released.
name|asf
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
if|if
condition|(
name|asf
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
name|asf
operator|.
name|getErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|RetriesExhaustedWithDetailsException
name|exception
init|=
name|makeException
argument_list|(
name|errors
argument_list|)
decl_stmt|;
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
else|else
block|{
name|listener
operator|.
name|onException
argument_list|(
name|exception
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|RetriesExhaustedWithDetailsException
name|makeException
parameter_list|(
name|List
argument_list|<
name|RetriesExhaustedWithDetailsException
argument_list|>
name|errors
parameter_list|)
block|{
switch|switch
condition|(
name|errors
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|null
return|;
case|case
literal|1
case|:
return|return
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
default|default:
name|List
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Row
argument_list|>
name|actions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|hostnameAndPort
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|errors
operator|.
name|forEach
argument_list|(
name|e
lambda|->
block|{
name|exceptions
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|exceptions
argument_list|)
expr_stmt|;
name|actions
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|actions
argument_list|)
expr_stmt|;
name|hostnameAndPort
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|hostnameAndPort
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
operator|new
name|RetriesExhaustedWithDetailsException
argument_list|(
name|exceptions
argument_list|,
name|actions
argument_list|,
name|hostnameAndPort
argument_list|)
return|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|long
name|getWriteBufferSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|writeBufferSize
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|setWriteBufferPeriodicFlush
parameter_list|(
name|long
name|timeoutMs
parameter_list|,
name|long
name|timerTickMs
parameter_list|)
block|{
name|long
name|originalTimeoutMs
init|=
name|this
operator|.
name|writeBufferPeriodicFlushTimeoutMs
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|originalTimerTickMs
init|=
name|this
operator|.
name|writeBufferPeriodicFlushTimerTickMs
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Both parameters have minimal values.
name|writeBufferPeriodicFlushTimeoutMs
operator|.
name|set
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|timeoutMs
argument_list|)
argument_list|)
expr_stmt|;
name|writeBufferPeriodicFlushTimerTickMs
operator|.
name|set
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|MIN_WRITE_BUFFER_PERIODIC_FLUSH_TIMERTICK_MS
argument_list|,
name|timerTickMs
argument_list|)
argument_list|)
expr_stmt|;
comment|// If something changed we stop the old Timer.
if|if
condition|(
name|writeBufferPeriodicFlushTimeoutMs
operator|.
name|get
argument_list|()
operator|!=
name|originalTimeoutMs
operator|||
name|writeBufferPeriodicFlushTimerTickMs
operator|.
name|get
argument_list|()
operator|!=
name|originalTimerTickMs
condition|)
block|{
if|if
condition|(
name|writeBufferPeriodicFlushTimer
operator|!=
literal|null
condition|)
block|{
name|writeBufferPeriodicFlushTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|writeBufferPeriodicFlushTimer
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// If we have the need for a timer and there is none we start it
if|if
condition|(
name|writeBufferPeriodicFlushTimer
operator|==
literal|null
operator|&&
name|writeBufferPeriodicFlushTimeoutMs
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writeBufferPeriodicFlushTimer
operator|=
operator|new
name|Timer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Create Timer running as Daemon.
name|writeBufferPeriodicFlushTimer
operator|.
name|schedule
argument_list|(
operator|new
name|TimerTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|BufferedMutatorImpl
operator|.
name|this
operator|.
name|timerCallbackForWriteBufferPeriodicFlush
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|writeBufferPeriodicFlushTimerTickMs
operator|.
name|get
argument_list|()
argument_list|,
name|writeBufferPeriodicFlushTimerTickMs
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getWriteBufferPeriodicFlushTimeoutMs
parameter_list|()
block|{
return|return
name|writeBufferPeriodicFlushTimeoutMs
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getWriteBufferPeriodicFlushTimerTickMs
parameter_list|()
block|{
return|return
name|writeBufferPeriodicFlushTimerTickMs
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRpcTimeout
parameter_list|(
name|int
name|rpcTimeout
parameter_list|)
block|{
name|this
operator|.
name|rpcTimeout
operator|.
name|set
argument_list|(
name|rpcTimeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setOperationTimeout
parameter_list|(
name|int
name|operationTimeout
parameter_list|)
block|{
name|this
operator|.
name|operationTimeout
operator|.
name|set
argument_list|(
name|operationTimeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|long
name|getCurrentWriteBufferSize
parameter_list|()
block|{
return|return
name|currentWriteBufferSize
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Count the mutations which haven't been processed.    * @return count of undealt mutation    */
annotation|@
name|VisibleForTesting
name|int
name|size
parameter_list|()
block|{
return|return
name|undealtMutationCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Count the mutations which haven't been flushed    * @return count of unflushed mutation    */
annotation|@
name|VisibleForTesting
name|int
name|getUnflushedSize
parameter_list|()
block|{
return|return
name|writeAsyncBuffer
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
name|QueueRowAccess
name|createQueueRowAccess
parameter_list|()
block|{
return|return
operator|new
name|QueueRowAccess
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
class|class
name|QueueRowAccess
implements|implements
name|RowAccess
argument_list|<
name|Row
argument_list|>
implements|,
name|Closeable
block|{
specifier|private
name|int
name|remainder
init|=
name|undealtMutationCount
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|Mutation
name|last
init|=
literal|null
decl_stmt|;
specifier|private
name|void
name|restoreLastMutation
parameter_list|()
block|{
comment|// restore the last mutation since it isn't submitted
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|writeAsyncBuffer
operator|.
name|add
argument_list|(
name|last
argument_list|)
expr_stmt|;
name|currentWriteBufferSize
operator|.
name|addAndGet
argument_list|(
name|last
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
name|last
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|restoreLastMutation
argument_list|()
expr_stmt|;
if|if
condition|(
name|remainder
operator|>
literal|0
condition|)
block|{
name|undealtMutationCount
operator|.
name|addAndGet
argument_list|(
name|remainder
argument_list|)
expr_stmt|;
name|remainder
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Row
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Row
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|countDown
init|=
name|remainder
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|countDown
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Row
name|next
parameter_list|()
block|{
name|restoreLastMutation
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|last
operator|=
name|writeAsyncBuffer
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|currentWriteBufferSize
operator|.
name|addAndGet
argument_list|(
operator|-
name|last
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
operator|--
name|countDown
expr_stmt|;
return|return
name|last
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
operator|--
name|remainder
expr_stmt|;
name|last
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|remainder
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|remainder
operator|<=
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

