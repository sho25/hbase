begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license  * agreements. See the NOTICE file distributed with this work for additional information regarding  * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License. You may obtain a  * copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software distributed under the  * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either  * express or implied. See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_comment
comment|/**  *<p>  * Used to communicate with a single HBase table similar to {@link Table}  * but meant for batched, potentially asynchronous puts. Obtain an instance from  * a {@link Connection} and call {@link #close()} afterwards. Provide an alternate  * to this implementation by setting {@link BufferedMutatorParams#implementationClassName(String)}  * or by setting alternate classname via the key {} in Configuration.  *</p>  *  *<p>  * While this can be used across threads, great care should be used when doing so.  * Errors are global to the buffered mutator and the Exceptions can be thrown on any  * thread that causes the flush for requests.  *</p>  *  * @see ConnectionFactory  * @see Connection  * @since 1.0.0  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|BufferedMutatorImpl
implements|implements
name|BufferedMutator
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BufferedMutatorImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExceptionListener
name|listener
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentLinkedQueue
argument_list|<
name|Mutation
argument_list|>
name|writeAsyncBuffer
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|currentWriteBufferSize
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * Count the size of {@link BufferedMutatorImpl#writeAsyncBuffer}.    * The {@link ConcurrentLinkedQueue#size()} is NOT a constant-time operation.    */
specifier|private
specifier|final
name|AtomicInteger
name|undealtMutationCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|writeBufferSize
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxKeyValueSize
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|pool
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|rpcTimeout
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|operationTimeout
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|cleanupPoolOnClose
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|AsyncProcess
name|ap
decl_stmt|;
annotation|@
name|VisibleForTesting
name|BufferedMutatorImpl
parameter_list|(
name|ClusterConnection
name|conn
parameter_list|,
name|BufferedMutatorParams
name|params
parameter_list|,
name|AsyncProcess
name|ap
parameter_list|)
block|{
if|if
condition|(
name|conn
operator|==
literal|null
operator|||
name|conn
operator|.
name|isClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Connection is null or closed."
argument_list|)
throw|;
block|}
name|this
operator|.
name|tableName
operator|=
name|params
operator|.
name|getTableName
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conn
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|params
operator|.
name|getListener
argument_list|()
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|getPool
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|pool
operator|=
name|HTable
operator|.
name|getDefaultExecutor
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cleanupPoolOnClose
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|pool
operator|=
name|params
operator|.
name|getPool
argument_list|()
expr_stmt|;
name|cleanupPoolOnClose
operator|=
literal|false
expr_stmt|;
block|}
name|ConnectionConfiguration
name|tableConf
init|=
operator|new
name|ConnectionConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|writeBufferSize
operator|=
name|params
operator|.
name|getWriteBufferSize
argument_list|()
operator|!=
name|BufferedMutatorParams
operator|.
name|UNSET
condition|?
name|params
operator|.
name|getWriteBufferSize
argument_list|()
else|:
name|tableConf
operator|.
name|getWriteBufferSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxKeyValueSize
operator|=
name|params
operator|.
name|getMaxKeyValueSize
argument_list|()
operator|!=
name|BufferedMutatorParams
operator|.
name|UNSET
condition|?
name|params
operator|.
name|getMaxKeyValueSize
argument_list|()
else|:
name|tableConf
operator|.
name|getMaxKeyValueSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcTimeout
operator|=
operator|new
name|AtomicInteger
argument_list|(
name|params
operator|.
name|getRpcTimeout
argument_list|()
operator|!=
name|BufferedMutatorParams
operator|.
name|UNSET
condition|?
name|params
operator|.
name|getRpcTimeout
argument_list|()
else|:
name|conn
operator|.
name|getConnectionConfiguration
argument_list|()
operator|.
name|getWriteRpcTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|operationTimeout
operator|=
operator|new
name|AtomicInteger
argument_list|(
name|params
operator|.
name|getOperationTimeout
argument_list|()
operator|!=
name|BufferedMutatorParams
operator|.
name|UNSET
condition|?
name|params
operator|.
name|getOperationTimeout
argument_list|()
else|:
name|conn
operator|.
name|getConnectionConfiguration
argument_list|()
operator|.
name|getOperationTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|ap
operator|=
name|ap
expr_stmt|;
block|}
name|BufferedMutatorImpl
parameter_list|(
name|ClusterConnection
name|conn
parameter_list|,
name|RpcRetryingCallerFactory
name|rpcCallerFactory
parameter_list|,
name|RpcControllerFactory
name|rpcFactory
parameter_list|,
name|BufferedMutatorParams
name|params
parameter_list|)
block|{
name|this
argument_list|(
name|conn
argument_list|,
name|params
argument_list|,
comment|// puts need to track errors globally due to how the APIs currently work.
operator|new
name|AsyncProcess
argument_list|(
name|conn
argument_list|,
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|rpcCallerFactory
argument_list|,
literal|true
argument_list|,
name|rpcFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|ExecutorService
name|getPool
parameter_list|()
block|{
return|return
name|pool
return|;
block|}
annotation|@
name|VisibleForTesting
name|AsyncProcess
name|getAsyncProcess
parameter_list|()
block|{
return|return
name|ap
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutate
parameter_list|(
name|Mutation
name|m
parameter_list|)
throws|throws
name|InterruptedIOException
throws|,
name|RetriesExhaustedWithDetailsException
block|{
name|mutate
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutate
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Mutation
argument_list|>
name|ms
parameter_list|)
throws|throws
name|InterruptedIOException
throws|,
name|RetriesExhaustedWithDetailsException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot put when the BufferedMutator is closed."
argument_list|)
throw|;
block|}
name|long
name|toAddSize
init|=
literal|0
decl_stmt|;
name|int
name|toAddCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Mutation
name|m
range|:
name|ms
control|)
block|{
if|if
condition|(
name|m
operator|instanceof
name|Put
condition|)
block|{
name|validatePut
argument_list|(
operator|(
name|Put
operator|)
name|m
argument_list|)
expr_stmt|;
block|}
name|toAddSize
operator|+=
name|m
operator|.
name|heapSize
argument_list|()
expr_stmt|;
operator|++
name|toAddCount
expr_stmt|;
block|}
comment|// This behavior is highly non-intuitive... it does not protect us against
comment|// 94-incompatible behavior, which is a timing issue because hasError, the below code
comment|// and setter of hasError are not synchronized. Perhaps it should be removed.
if|if
condition|(
name|ap
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|currentWriteBufferSize
operator|.
name|addAndGet
argument_list|(
name|toAddSize
argument_list|)
expr_stmt|;
name|writeAsyncBuffer
operator|.
name|addAll
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|undealtMutationCount
operator|.
name|addAndGet
argument_list|(
name|toAddCount
argument_list|)
expr_stmt|;
name|backgroundFlushCommits
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentWriteBufferSize
operator|.
name|addAndGet
argument_list|(
name|toAddSize
argument_list|)
expr_stmt|;
name|writeAsyncBuffer
operator|.
name|addAll
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|undealtMutationCount
operator|.
name|addAndGet
argument_list|(
name|toAddCount
argument_list|)
expr_stmt|;
block|}
comment|// Now try and queue what needs to be queued.
while|while
condition|(
name|undealtMutationCount
operator|.
name|get
argument_list|()
operator|!=
literal|0
operator|&&
name|currentWriteBufferSize
operator|.
name|get
argument_list|()
operator|>
name|writeBufferSize
condition|)
block|{
name|backgroundFlushCommits
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// validate for well-formedness
specifier|public
name|void
name|validatePut
parameter_list|(
specifier|final
name|Put
name|put
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|HTable
operator|.
name|validatePut
argument_list|(
name|put
argument_list|,
name|maxKeyValueSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|this
operator|.
name|closed
condition|)
block|{
return|return;
block|}
comment|// As we can have an operation in progress even if the buffer is empty, we call
comment|// backgroundFlushCommits at least one time.
name|backgroundFlushCommits
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|cleanupPoolOnClose
condition|)
block|{
name|this
operator|.
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|boolean
name|terminated
decl_stmt|;
name|int
name|loopCnt
init|=
literal|0
decl_stmt|;
do|do
block|{
comment|// wait until the pool has terminated
name|terminated
operator|=
name|this
operator|.
name|pool
operator|.
name|awaitTermination
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|loopCnt
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|loopCnt
operator|>=
literal|10
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"close() failed to terminate pool after 10 minutes. Abandoning pool."
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
do|while
condition|(
operator|!
name|terminated
condition|)
do|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"waitForTermination interrupted"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|flush
parameter_list|()
throws|throws
name|InterruptedIOException
throws|,
name|RetriesExhaustedWithDetailsException
block|{
comment|// As we can have an operation in progress even if the buffer is empty, we call
comment|// backgroundFlushCommits at least one time.
name|backgroundFlushCommits
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Send the operations in the buffer to the servers. Does not wait for the server's answer. If    * the is an error (max retried reach from a previous flush or bad operation), it tries to send    * all operations in the buffer and sends an exception.    *    * @param synchronous - if true, sends all the writes and wait for all of them to finish before    *        returning.    */
specifier|private
name|void
name|backgroundFlushCommits
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
throws|throws
name|InterruptedIOException
throws|,
name|RetriesExhaustedWithDetailsException
block|{
if|if
condition|(
operator|!
name|synchronous
operator|&&
name|writeAsyncBuffer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|synchronous
condition|)
block|{
name|QueueRowAccess
name|taker
init|=
operator|new
name|QueueRowAccess
argument_list|()
decl_stmt|;
name|AsyncProcessTask
name|task
init|=
name|wrapAsyncProcessTask
argument_list|(
name|taker
argument_list|)
decl_stmt|;
try|try
block|{
name|ap
operator|.
name|submit
argument_list|(
name|task
argument_list|)
expr_stmt|;
if|if
condition|(
name|ap
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|tableName
operator|+
literal|": One or more of the operations have failed -"
operator|+
literal|" waiting for all operation in progress to finish (successfully or not)"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|taker
operator|.
name|restoreRemainder
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|synchronous
operator|||
name|ap
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|QueueRowAccess
name|taker
init|=
operator|new
name|QueueRowAccess
argument_list|()
decl_stmt|;
name|AsyncProcessTask
name|task
init|=
name|wrapAsyncProcessTask
argument_list|(
name|taker
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|taker
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ap
operator|.
name|submit
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|taker
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|taker
operator|.
name|restoreRemainder
argument_list|()
expr_stmt|;
block|}
name|RetriesExhaustedWithDetailsException
name|error
init|=
name|ap
operator|.
name|waitForAllPreviousOpsAndReset
argument_list|(
literal|null
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
throw|throw
name|error
throw|;
block|}
else|else
block|{
name|this
operator|.
name|listener
operator|.
name|onException
argument_list|(
name|error
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Reuse the AsyncProcessTask when calling {@link BufferedMutatorImpl#backgroundFlushCommits(boolean)}.    * @param taker access the inner buffer.    * @return An AsyncProcessTask which always returns the latest rpc and operation timeout.    */
specifier|private
name|AsyncProcessTask
name|wrapAsyncProcessTask
parameter_list|(
name|QueueRowAccess
name|taker
parameter_list|)
block|{
name|AsyncProcessTask
name|task
init|=
name|AsyncProcessTask
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|setRowAccess
argument_list|(
name|taker
argument_list|)
operator|.
name|setSubmittedRows
argument_list|(
name|AsyncProcessTask
operator|.
name|SubmittedRows
operator|.
name|AT_LEAST_ONE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|AsyncProcessTask
argument_list|(
name|task
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|getRpcTimeout
parameter_list|()
block|{
return|return
name|rpcTimeout
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getOperationTimeout
parameter_list|()
block|{
return|return
name|operationTimeout
operator|.
name|get
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|long
name|getWriteBufferSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|writeBufferSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRpcTimeout
parameter_list|(
name|int
name|rpcTimeout
parameter_list|)
block|{
name|this
operator|.
name|rpcTimeout
operator|.
name|set
argument_list|(
name|rpcTimeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setOperationTimeout
parameter_list|(
name|int
name|operationTimeout
parameter_list|)
block|{
name|this
operator|.
name|operationTimeout
operator|.
name|set
argument_list|(
name|operationTimeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|long
name|getCurrentWriteBufferSize
parameter_list|()
block|{
return|return
name|currentWriteBufferSize
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
name|int
name|size
parameter_list|()
block|{
return|return
name|undealtMutationCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
class|class
name|QueueRowAccess
implements|implements
name|RowAccess
argument_list|<
name|Row
argument_list|>
block|{
specifier|private
name|int
name|remainder
init|=
name|undealtMutationCount
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|void
name|reset
parameter_list|()
block|{
name|restoreRemainder
argument_list|()
expr_stmt|;
name|remainder
operator|=
name|undealtMutationCount
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Row
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Row
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|Mutation
argument_list|>
name|iter
init|=
name|writeAsyncBuffer
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|private
name|int
name|countDown
init|=
name|remainder
decl_stmt|;
specifier|private
name|Mutation
name|last
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|countDown
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|iter
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Row
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|last
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
operator|--
name|countDown
expr_stmt|;
return|return
name|last
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|currentWriteBufferSize
operator|.
name|addAndGet
argument_list|(
operator|-
name|last
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
operator|--
name|remainder
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|remainder
return|;
block|}
name|void
name|restoreRemainder
parameter_list|()
block|{
if|if
condition|(
name|remainder
operator|>
literal|0
condition|)
block|{
name|undealtMutationCount
operator|.
name|addAndGet
argument_list|(
name|remainder
argument_list|)
expr_stmt|;
name|remainder
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|remainder
operator|<=
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

