begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_comment
comment|/**  * Provides clients with an RPC connection to call Coprocessor Endpoint  * {@link com.google.protobuf.Service}s  * against a given table region.  An instance of this class may be obtained  * by calling {@link org.apache.hadoop.hbase.client.Table#coprocessorService(byte[])},  * but should normally only be used in creating a new {@link com.google.protobuf.Service} stub to  * call the endpoint methods.  * @see org.apache.hadoop.hbase.client.Table#coprocessorService(byte[])  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|RegionCoprocessorRpcChannel
extends|extends
name|SyncCoprocessorRpcChannel
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegionCoprocessorRpcChannel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|table
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|row
decl_stmt|;
specifier|private
specifier|final
name|ClusterConnection
name|conn
decl_stmt|;
specifier|private
name|byte
index|[]
name|lastRegion
decl_stmt|;
specifier|private
specifier|final
name|int
name|operationTimeout
decl_stmt|;
specifier|private
specifier|final
name|RpcRetryingCallerFactory
name|rpcCallerFactory
decl_stmt|;
comment|/**    * Constructor    * @param conn connection to use    * @param table to connect to    * @param row to locate region with    */
name|RegionCoprocessorRpcChannel
parameter_list|(
name|ClusterConnection
name|conn
parameter_list|,
name|TableName
name|table
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|operationTimeout
operator|=
name|conn
operator|.
name|getConnectionConfiguration
argument_list|()
operator|.
name|getOperationTimeout
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcCallerFactory
operator|=
name|conn
operator|.
name|getRpcRetryingCallerFactory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Message
name|callExecService
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|Descriptors
operator|.
name|MethodDescriptor
name|method
parameter_list|,
specifier|final
name|Message
name|request
parameter_list|,
specifier|final
name|Message
name|responsePrototype
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Call: "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|", "
operator|+
name|request
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Can't be null!"
argument_list|)
throw|;
block|}
name|ClientServiceCallable
argument_list|<
name|CoprocessorServiceResponse
argument_list|>
name|callable
init|=
operator|new
name|ClientServiceCallable
argument_list|<
name|CoprocessorServiceResponse
argument_list|>
argument_list|(
name|this
operator|.
name|conn
argument_list|,
name|this
operator|.
name|table
argument_list|,
name|this
operator|.
name|row
argument_list|,
name|this
operator|.
name|conn
operator|.
name|getRpcControllerFactory
argument_list|()
operator|.
name|newController
argument_list|()
argument_list|,
name|HConstants
operator|.
name|PRIORITY_UNSET
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|CoprocessorServiceResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|regionName
init|=
name|getLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|CoprocessorServiceRequest
name|csr
init|=
name|CoprocessorRpcUtils
operator|.
name|getCoprocessorServiceRequest
argument_list|(
name|method
argument_list|,
name|request
argument_list|,
name|row
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
return|return
name|getStub
argument_list|()
operator|.
name|execService
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|csr
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|CoprocessorServiceResponse
name|result
init|=
name|this
operator|.
name|rpcCallerFactory
operator|.
expr|<
name|CoprocessorServiceResponse
operator|>
name|newCaller
argument_list|()
operator|.
name|callWithRetries
argument_list|(
name|callable
argument_list|,
name|operationTimeout
argument_list|)
decl_stmt|;
name|this
operator|.
name|lastRegion
operator|=
name|result
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
return|return
name|CoprocessorRpcUtils
operator|.
name|getResponse
argument_list|(
name|result
argument_list|,
name|responsePrototype
argument_list|)
return|;
block|}
comment|/**    * Get last region this RpcChannel communicated with    * @return region name as byte array    */
specifier|public
name|byte
index|[]
name|getLastRegion
parameter_list|()
block|{
return|return
name|lastRegion
return|;
block|}
block|}
end_class

end_unit

