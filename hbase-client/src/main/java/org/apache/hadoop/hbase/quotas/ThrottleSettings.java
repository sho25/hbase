begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetQuotaRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|TimedQuota
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|ThrottleSettings
extends|extends
name|QuotaSettings
block|{
specifier|final
name|QuotaProtos
operator|.
name|ThrottleRequest
name|proto
decl_stmt|;
name|ThrottleSettings
parameter_list|(
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|regionServer
parameter_list|,
specifier|final
name|QuotaProtos
operator|.
name|ThrottleRequest
name|proto
parameter_list|)
block|{
name|super
argument_list|(
name|userName
argument_list|,
name|tableName
argument_list|,
name|namespace
argument_list|,
name|regionServer
argument_list|)
expr_stmt|;
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
block|}
specifier|public
name|ThrottleType
name|getThrottleType
parameter_list|()
block|{
return|return
name|ProtobufUtil
operator|.
name|toThrottleType
argument_list|(
name|proto
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|long
name|getSoftLimit
parameter_list|()
block|{
return|return
name|proto
operator|.
name|hasTimedQuota
argument_list|()
condition|?
name|proto
operator|.
name|getTimedQuota
argument_list|()
operator|.
name|getSoftLimit
argument_list|()
else|:
operator|-
literal|1
return|;
block|}
comment|/**    * Returns a copy of the internal state of<code>this</code>    */
annotation|@
name|VisibleForTesting
name|QuotaProtos
operator|.
name|ThrottleRequest
name|getProto
parameter_list|()
block|{
return|return
name|proto
operator|.
name|toBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|TimeUnit
name|getTimeUnit
parameter_list|()
block|{
return|return
name|proto
operator|.
name|hasTimedQuota
argument_list|()
condition|?
name|ProtobufUtil
operator|.
name|toTimeUnit
argument_list|(
name|proto
operator|.
name|getTimedQuota
argument_list|()
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|QuotaScope
name|getQuotaScope
parameter_list|()
block|{
return|return
name|proto
operator|.
name|hasTimedQuota
argument_list|()
condition|?
name|ProtobufUtil
operator|.
name|toQuotaScope
argument_list|(
name|proto
operator|.
name|getTimedQuota
argument_list|()
operator|.
name|getScope
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|QuotaType
name|getQuotaType
parameter_list|()
block|{
return|return
name|QuotaType
operator|.
name|THROTTLE
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setupSetQuotaRequest
parameter_list|(
name|SetQuotaRequest
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setThrottle
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"TYPE => THROTTLE"
argument_list|)
expr_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasType
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|", THROTTLE_TYPE => "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|proto
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasTimedQuota
argument_list|()
condition|)
block|{
name|QuotaProtos
operator|.
name|TimedQuota
name|timedQuota
init|=
name|proto
operator|.
name|getTimedQuota
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", LIMIT => "
argument_list|)
expr_stmt|;
if|if
condition|(
name|timedQuota
operator|.
name|hasSoftLimit
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|getThrottleType
argument_list|()
condition|)
block|{
case|case
name|REQUEST_NUMBER
case|:
case|case
name|WRITE_NUMBER
case|:
case|case
name|READ_NUMBER
case|:
name|builder
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%dreq"
argument_list|,
name|timedQuota
operator|.
name|getSoftLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|REQUEST_SIZE
case|:
case|case
name|WRITE_SIZE
case|:
case|case
name|READ_SIZE
case|:
name|builder
operator|.
name|append
argument_list|(
name|sizeToString
argument_list|(
name|timedQuota
operator|.
name|getSoftLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|REQUEST_CAPACITY_UNIT
case|:
case|case
name|READ_CAPACITY_UNIT
case|:
case|case
name|WRITE_CAPACITY_UNIT
case|:
name|builder
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%dCU"
argument_list|,
name|timedQuota
operator|.
name|getSoftLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
block|}
elseif|else
if|if
condition|(
name|timedQuota
operator|.
name|hasShare
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%.2f%%"
argument_list|,
name|timedQuota
operator|.
name|getShare
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|timeToString
argument_list|(
name|ProtobufUtil
operator|.
name|toTimeUnit
argument_list|(
name|timedQuota
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|timedQuota
operator|.
name|hasScope
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|", SCOPE => "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|timedQuota
operator|.
name|getScope
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|", LIMIT => NONE"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ThrottleSettings
name|merge
parameter_list|(
name|QuotaSettings
name|other
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|other
operator|instanceof
name|ThrottleSettings
condition|)
block|{
name|ThrottleSettings
name|otherThrottle
init|=
operator|(
name|ThrottleSettings
operator|)
name|other
decl_stmt|;
comment|// Make sure this and the other target the same "subject"
name|validateQuotaTarget
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|QuotaProtos
operator|.
name|ThrottleRequest
operator|.
name|Builder
name|builder
init|=
name|proto
operator|.
name|toBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|otherThrottle
operator|.
name|proto
operator|.
name|hasType
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|QuotaProtos
operator|.
name|ThrottleRequest
name|otherProto
init|=
name|otherThrottle
operator|.
name|proto
decl_stmt|;
if|if
condition|(
name|otherProto
operator|.
name|hasTimedQuota
argument_list|()
condition|)
block|{
if|if
condition|(
name|otherProto
operator|.
name|hasTimedQuota
argument_list|()
condition|)
block|{
name|validateTimedQuota
argument_list|(
name|otherProto
operator|.
name|getTimedQuota
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|proto
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|otherProto
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot merge a ThrottleRequest for "
operator|+
name|proto
operator|.
name|getType
argument_list|()
operator|+
literal|" with "
operator|+
name|otherProto
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
name|QuotaProtos
operator|.
name|TimedQuota
operator|.
name|Builder
name|timedQuotaBuilder
init|=
name|proto
operator|.
name|getTimedQuota
argument_list|()
operator|.
name|toBuilder
argument_list|()
decl_stmt|;
name|timedQuotaBuilder
operator|.
name|mergeFrom
argument_list|(
name|otherProto
operator|.
name|getTimedQuota
argument_list|()
argument_list|)
expr_stmt|;
name|QuotaProtos
operator|.
name|ThrottleRequest
name|mergedReq
init|=
name|builder
operator|.
name|setTimedQuota
argument_list|(
name|timedQuotaBuilder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|ThrottleSettings
argument_list|(
name|getUserName
argument_list|()
argument_list|,
name|getTableName
argument_list|()
argument_list|,
name|getNamespace
argument_list|()
argument_list|,
name|getRegionServer
argument_list|()
argument_list|,
name|mergedReq
argument_list|)
return|;
block|}
block|}
return|return
name|this
return|;
block|}
specifier|private
name|void
name|validateTimedQuota
parameter_list|(
specifier|final
name|TimedQuota
name|timedQuota
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|timedQuota
operator|.
name|getSoftLimit
argument_list|()
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"The throttle limit must be greater then 0, got "
operator|+
name|timedQuota
operator|.
name|getSoftLimit
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|static
name|ThrottleSettings
name|fromTimedQuota
parameter_list|(
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|regionServer
parameter_list|,
name|ThrottleType
name|type
parameter_list|,
name|QuotaProtos
operator|.
name|TimedQuota
name|timedQuota
parameter_list|)
block|{
name|QuotaProtos
operator|.
name|ThrottleRequest
operator|.
name|Builder
name|builder
init|=
name|QuotaProtos
operator|.
name|ThrottleRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setType
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoThrottleType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTimedQuota
argument_list|(
name|timedQuota
argument_list|)
expr_stmt|;
return|return
operator|new
name|ThrottleSettings
argument_list|(
name|userName
argument_list|,
name|tableName
argument_list|,
name|namespace
argument_list|,
name|regionServer
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

