begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_comment
comment|/**  * This class is used to unify HTable calls with AsyncProcess Framework. HTable can use  * AsyncProcess directly though this class. Also adds global timeout tracking on top of  * RegionServerCallable and implements Cancellable.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|abstract
class|class
name|CancellableRegionServerCallable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|RegionServerCallable
argument_list|<
name|T
argument_list|>
implements|implements
name|Cancellable
block|{
specifier|private
specifier|final
name|RetryingTimeTracker
name|tracker
init|=
operator|new
name|RetryingTimeTracker
argument_list|()
decl_stmt|;
name|CancellableRegionServerCallable
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|RpcControllerFactory
name|rpcControllerFactory
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|,
name|rpcControllerFactory
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
comment|/* Override so can mess with the callTimeout.    * (non-Javadoc)    * @see org.apache.hadoop.hbase.client.RegionServerCallable#rpcCall(int)    */
annotation|@
name|Override
specifier|public
name|T
name|call
parameter_list|(
name|int
name|callTimeout
parameter_list|)
throws|throws
name|IOException
block|{
comment|// It is expected (it seems) that tracker.start can be called multiple times (on each trip
comment|// through the call when retrying). Also, we can call start and no need of a stop.
name|this
operator|.
name|tracker
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|remainingTime
init|=
name|tracker
operator|.
name|getRemainingTime
argument_list|(
name|callTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|remainingTime
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Timeout for mutate row"
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|call
argument_list|(
name|remainingTime
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|getRpcController
argument_list|()
operator|.
name|startCancel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|getRpcController
argument_list|()
operator|.
name|isCanceled
argument_list|()
return|;
block|}
block|}
end_class

end_unit

