begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_comment
comment|/**  * This class is used to unify HTable calls with AsyncProcess Framework. HTable can use  * AsyncProcess directly though this class. Also adds global timeout tracking on top of  * RegionServerCallable and implements Cancellable.  * Global timeout tracking conflicts with logic in RpcRetryingCallerImpl's callWithRetries. So you  * can only use this callable in AsyncProcess which only uses callWithoutRetries and retries in its  * own implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|abstract
class|class
name|CancellableRegionServerCallable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ClientServiceCallable
argument_list|<
name|T
argument_list|>
implements|implements
name|Cancellable
block|{
specifier|private
specifier|final
name|RetryingTimeTracker
name|tracker
decl_stmt|;
specifier|private
specifier|final
name|int
name|rpcTimeout
decl_stmt|;
name|CancellableRegionServerCallable
parameter_list|(
name|ConnectionImplementation
name|connection
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|RpcController
name|rpcController
parameter_list|,
name|int
name|rpcTimeout
parameter_list|,
name|RetryingTimeTracker
name|tracker
parameter_list|,
name|int
name|priority
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|rpcController
argument_list|,
name|priority
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcTimeout
operator|=
name|rpcTimeout
expr_stmt|;
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
block|}
comment|/* Override so can mess with the callTimeout.    * (non-Javadoc)    * @see org.apache.hadoop.hbase.client.RegionServerCallable#rpcCall(int)    */
annotation|@
name|Override
specifier|public
name|T
name|call
parameter_list|(
name|int
name|operationTimeout
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isCancelled
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
comment|// It is expected (it seems) that tracker.start can be called multiple times (on each trip
comment|// through the call when retrying). Also, we can call start and no need of a stop.
name|this
operator|.
name|tracker
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|remainingTime
init|=
name|tracker
operator|.
name|getRemainingTime
argument_list|(
name|operationTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|remainingTime
operator|<=
literal|1
condition|)
block|{
comment|// "1" is a special return value in RetryingTimeTracker, see its implementation.
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Operation rpcTimeout"
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|call
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|rpcTimeout
argument_list|,
name|remainingTime
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prepare
parameter_list|(
name|boolean
name|reload
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isCancelled
argument_list|()
condition|)
return|return;
if|if
condition|(
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
name|super
operator|.
name|prepare
argument_list|(
name|reload
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setStubByServiceName
parameter_list|(
name|ServerName
name|serviceName
parameter_list|)
throws|throws
name|IOException
block|{
name|setStub
argument_list|(
name|getConnection
argument_list|()
operator|.
name|getClient
argument_list|(
name|serviceName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|getRpcController
argument_list|()
operator|.
name|startCancel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|getRpcController
argument_list|()
operator|.
name|isCanceled
argument_list|()
return|;
block|}
specifier|protected
name|ClientProtos
operator|.
name|MultiResponse
name|doMulti
parameter_list|(
name|ClientProtos
operator|.
name|MultiRequest
name|request
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
block|{
return|return
name|getStub
argument_list|()
operator|.
name|multi
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
specifier|protected
name|ClientProtos
operator|.
name|ScanResponse
name|doScan
parameter_list|(
name|ClientProtos
operator|.
name|ScanRequest
name|request
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
block|{
return|return
name|getStub
argument_list|()
operator|.
name|scan
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
specifier|protected
name|ClientProtos
operator|.
name|PrepareBulkLoadResponse
name|doPrepareBulkLoad
parameter_list|(
name|ClientProtos
operator|.
name|PrepareBulkLoadRequest
name|request
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
block|{
return|return
name|getStub
argument_list|()
operator|.
name|prepareBulkLoad
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
specifier|protected
name|ClientProtos
operator|.
name|BulkLoadHFileResponse
name|doBulkLoadHFile
parameter_list|(
name|ClientProtos
operator|.
name|BulkLoadHFileRequest
name|request
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
block|{
return|return
name|getStub
argument_list|()
operator|.
name|bulkLoadHFile
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
specifier|protected
name|ClientProtos
operator|.
name|CleanupBulkLoadResponse
name|doCleanupBulkLoad
parameter_list|(
name|ClientProtos
operator|.
name|CleanupBulkLoadRequest
name|request
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
block|{
return|return
name|getStub
argument_list|()
operator|.
name|cleanupBulkLoad
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
end_class

end_unit

