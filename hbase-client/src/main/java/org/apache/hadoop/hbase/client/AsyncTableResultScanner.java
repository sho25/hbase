begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|calcEstimatedSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|filterCells
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * The {@link ResultScanner} implementation for {@link AsyncTable}. It will fetch data automatically  * in background and cache it in memory. Typically the {@link #maxCacheSize} will be  * {@code 2 * scan.getMaxResultSize()}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|AsyncTableResultScanner
implements|implements
name|ResultScanner
implements|,
name|RawScanResultConsumer
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AsyncTableResultScanner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|RawAsyncTable
name|rawTable
decl_stmt|;
specifier|private
specifier|final
name|Scan
name|scan
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxCacheSize
decl_stmt|;
specifier|private
specifier|final
name|Queue
argument_list|<
name|Result
argument_list|>
name|queue
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|cacheSize
decl_stmt|;
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|private
name|Throwable
name|error
decl_stmt|;
specifier|private
name|boolean
name|prefetchStopped
decl_stmt|;
specifier|private
name|int
name|numberOfOnCompleteToIgnore
decl_stmt|;
comment|// used to filter out cells that already returned when we restart a scan
specifier|private
name|Cell
name|lastCell
decl_stmt|;
specifier|public
name|AsyncTableResultScanner
parameter_list|(
name|RawAsyncTable
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|long
name|maxCacheSize
parameter_list|)
block|{
name|this
operator|.
name|rawTable
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|scan
operator|=
name|scan
expr_stmt|;
name|this
operator|.
name|maxCacheSize
operator|=
name|maxCacheSize
expr_stmt|;
name|table
operator|.
name|scan
argument_list|(
name|scan
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addToCache
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
name|queue
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|cacheSize
operator|+=
name|calcEstimatedSize
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|stopPrefetch
parameter_list|(
name|Result
name|lastResult
parameter_list|)
block|{
name|prefetchStopped
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|lastResult
operator|.
name|isPartial
argument_list|()
operator|||
name|scan
operator|.
name|getBatch
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scan
operator|.
name|withStartRow
argument_list|(
name|lastResult
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|lastCell
operator|=
name|lastResult
operator|.
name|rawCells
argument_list|()
index|[
name|lastResult
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|withStartRow
argument_list|(
name|lastResult
operator|.
name|getRow
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"0x%x"
argument_list|,
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|)
operator|+
literal|" stop prefetching when scanning "
operator|+
name|rawTable
operator|.
name|getName
argument_list|()
operator|+
literal|" as the cache size "
operator|+
name|cacheSize
operator|+
literal|" is greater than the maxCacheSize "
operator|+
name|maxCacheSize
operator|+
literal|", the next start row is "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|)
operator|+
literal|", lastCell is "
operator|+
name|lastCell
argument_list|)
expr_stmt|;
block|}
comment|// Ignore an onComplete call as the scan is stopped by us.
comment|// Here we can not use a simple boolean flag. A scan operation can cross multiple regions and
comment|// the regions may be located on different regionservers, so it is possible that the methods of
comment|// RawScanResultConsumer are called in different rpc framework threads and overlapped with each
comment|// other. It may happen that
comment|// 1. we stop scan1
comment|// 2. we start scan2
comment|// 3. we stop scan2
comment|// 4. onComplete for scan1 is called
comment|// 5. onComplete for scan2 is called
comment|// So if we use a boolean flag here then we can only ignore the onComplete in step4 and think
comment|// that the onComplete in step 5 tells us there is no data.
name|numberOfOnCompleteToIgnore
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|onNext
parameter_list|(
name|Result
index|[]
name|results
parameter_list|)
block|{
assert|assert
name|results
operator|.
name|length
operator|>
literal|0
assert|;
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Result
name|firstResult
init|=
name|results
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|lastCell
operator|!=
literal|null
condition|)
block|{
name|firstResult
operator|=
name|filterCells
argument_list|(
name|firstResult
argument_list|,
name|lastCell
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstResult
operator|!=
literal|null
condition|)
block|{
comment|// do not set lastCell to null if the result after filtering is null as there may still be
comment|// other cells that can be filtered out
name|lastCell
operator|=
literal|null
expr_stmt|;
name|addToCache
argument_list|(
name|firstResult
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|results
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// the only one result is null
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|addToCache
argument_list|(
name|firstResult
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|addToCache
argument_list|(
name|results
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|notifyAll
argument_list|()
expr_stmt|;
if|if
condition|(
name|cacheSize
operator|<
name|maxCacheSize
condition|)
block|{
return|return
literal|true
return|;
block|}
name|stopPrefetch
argument_list|(
name|results
index|[
name|results
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|onHeartbeat
parameter_list|()
block|{
return|return
operator|!
name|closed
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onError
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onComplete
parameter_list|()
block|{
comment|// Do not mark the scanner as closed if the scan is stopped by us due to cache size limit since
comment|// we may resume later by starting a new scan. See resumePrefetch.
if|if
condition|(
name|numberOfOnCompleteToIgnore
operator|>
literal|0
condition|)
block|{
name|numberOfOnCompleteToIgnore
operator|--
expr_stmt|;
return|return;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|resumePrefetch
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"0x%x"
argument_list|,
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|)
operator|+
literal|" resume prefetching"
argument_list|)
expr_stmt|;
block|}
name|prefetchStopped
operator|=
literal|false
expr_stmt|;
name|rawTable
operator|.
name|scan
argument_list|(
name|scan
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Result
name|next
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|error
argument_list|,
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|error
argument_list|)
throw|;
block|}
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
block|}
name|Result
name|result
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|cacheSize
operator|-=
name|calcEstimatedSize
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefetchStopped
operator|&&
name|cacheSize
operator|<=
name|maxCacheSize
operator|/
literal|2
condition|)
block|{
name|resumePrefetch
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|queue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cacheSize
operator|=
literal|0
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|renewLease
parameter_list|()
block|{
comment|// we will do prefetching in the background and if there is no space we will just terminate the
comment|// background scan operation. So there is no reason to renew lease here.
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

