begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * For creating {@link ReplicationPeerConfig}.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
interface|interface
name|ReplicationPeerConfigBuilder
block|{
comment|/**    * Set the clusterKey which is the concatenation of the slave cluster's:    * hbase.zookeeper.quorum:hbase.zookeeper.property.clientPort:zookeeper.znode.parent    */
name|ReplicationPeerConfigBuilder
name|setClusterKey
parameter_list|(
name|String
name|clusterKey
parameter_list|)
function_decl|;
comment|/**    * Sets the ReplicationEndpoint plugin class for this peer.    * @param replicationEndpointImpl a class implementing ReplicationEndpoint    */
name|ReplicationPeerConfigBuilder
name|setReplicationEndpointImpl
parameter_list|(
name|String
name|replicationEndpointImpl
parameter_list|)
function_decl|;
comment|/**    * Sets a "raw" configuration property for this replication peer. For experts only.    * @param key Configuration property key    * @param value Configuration property value    * @return {@code this}    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
name|ReplicationPeerConfigBuilder
name|putConfiguration
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
function_decl|;
comment|/**    * Adds all of the provided "raw" configuration entries to {@code this}.    * @param configuration A collection of raw configuration entries    * @return {@code this}    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|default
name|ReplicationPeerConfigBuilder
name|putAllConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configuration
parameter_list|)
block|{
name|configuration
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|putConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Sets the serialized peer configuration data    * @return {@code this}    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
name|ReplicationPeerConfigBuilder
name|putPeerData
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
function_decl|;
comment|/**    * Sets all of the provided serialized peer configuration data.    * @return {@code this}    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|default
name|ReplicationPeerConfigBuilder
name|putAllPeerData
parameter_list|(
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|peerData
parameter_list|)
block|{
name|peerData
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|putPeerData
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Sets an explicit map of tables and column families in those tables that should be replicated    * to the given peer. Use {@link #setReplicateAllUserTables(boolean)} to replicate all tables    * to a peer.    *    * @param tableCFsMap A map from tableName to column family names. An empty collection can be    *    passed to indicate replicating all column families.    * @return {@code this}    * @see #setReplicateAllUserTables(boolean)    */
name|ReplicationPeerConfigBuilder
name|setTableCFsMap
parameter_list|(
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCFsMap
parameter_list|)
function_decl|;
comment|/**    * Sets a unique collection of HBase namespaces that should be replicated to this peer.    * @param namespaces A set of namespaces to be replicated to this peer.    * @return {@code this}    */
name|ReplicationPeerConfigBuilder
name|setNamespaces
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
parameter_list|)
function_decl|;
comment|/**    * Sets the speed, in bytes per second, for any one RegionServer to replicate data to the peer.    * @param bandwidth Bytes per second    * @return {@code this}.    */
name|ReplicationPeerConfigBuilder
name|setBandwidth
parameter_list|(
name|long
name|bandwidth
parameter_list|)
function_decl|;
comment|/**    * Configures HBase to replicate all user tables (not system tables) to the peer. Default is    * {@code true}.    * @param replicateAllUserTables True if all user tables should be replicated, else false.    * @return {@code this}    */
name|ReplicationPeerConfigBuilder
name|setReplicateAllUserTables
parameter_list|(
name|boolean
name|replicateAllUserTables
parameter_list|)
function_decl|;
comment|/**    * Sets the mapping of table name to column families which should not be replicated. This    * method sets state which is mutually exclusive to {@link #setTableCFsMap(Map)}. Invoking this    * method is only relevant when all user tables are being replicated.    *    * @param tableCFsMap A mapping of table names to column families which should not be    *    replicated. An empty list of column families implies all families for the table.    * @return {@code this}.    */
name|ReplicationPeerConfigBuilder
name|setExcludeTableCFsMap
parameter_list|(
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCFsMap
parameter_list|)
function_decl|;
comment|/**    * Sets the collection of namespaces which should not be replicated when all user tables are    * configured to be replicated. This method sets state which is mutually exclusive to    * {@link #setNamespaces(Set)}. Invoking this method is only relevant when all user tables are    * being replicated.    *    * @param namespaces A set of namespaces whose tables should not be replicated.    * @return {@code this}    */
name|ReplicationPeerConfigBuilder
name|setExcludeNamespaces
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
parameter_list|)
function_decl|;
comment|/**    *<p>    * Sets whether we should preserve order when replicating, i.e, serial replication.    *</p>    *<p>    * Default {@code false}.    *</p>    * @param serial {@code true} means preserve order, otherwise {@code false}.    * @return {@code this}    */
name|ReplicationPeerConfigBuilder
name|setSerial
parameter_list|(
name|boolean
name|serial
parameter_list|)
function_decl|;
comment|/**    * Set the remote peer cluster's wal directory. Used by synchronous replication.    * @param dir the remote peer cluster's wal directory    * @return {@code this}    */
name|ReplicationPeerConfigBuilder
name|setRemoteWALDir
parameter_list|(
name|String
name|dir
parameter_list|)
function_decl|;
comment|/**    * Builds the configuration object from the current state of {@code this}.    * @return A {@link ReplicationPeerConfig} instance.    */
name|ReplicationPeerConfig
name|build
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

