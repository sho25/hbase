begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
operator|.
name|ModifyableColumnFamilyDescriptor
import|;
end_import

begin_comment
comment|/**  * HTableDescriptor contains the details about an HBase table  such as the descriptors of  * all the column families, is the table a catalog table,<code> hbase:meta</code>,  * if the table is read only, the maximum size of the memstore,  * when the region split should occur, coprocessors associated with it etc...  * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0.  *             Use {@link TableDescriptorBuilder} to build {@link HTableDescriptor}.  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|HTableDescriptor
implements|implements
name|TableDescriptor
implements|,
name|Comparable
argument_list|<
name|HTableDescriptor
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SPLIT_POLICY
init|=
name|TableDescriptorBuilder
operator|.
name|SPLIT_POLICY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAX_FILESIZE
init|=
name|TableDescriptorBuilder
operator|.
name|MAX_FILESIZE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OWNER
init|=
name|TableDescriptorBuilder
operator|.
name|OWNER
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Bytes
name|OWNER_KEY
init|=
name|TableDescriptorBuilder
operator|.
name|OWNER_KEY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|READONLY
init|=
name|TableDescriptorBuilder
operator|.
name|READONLY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMPACTION_ENABLED
init|=
name|TableDescriptorBuilder
operator|.
name|COMPACTION_ENABLED
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MEMSTORE_FLUSHSIZE
init|=
name|TableDescriptorBuilder
operator|.
name|MEMSTORE_FLUSHSIZE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FLUSH_POLICY
init|=
name|TableDescriptorBuilder
operator|.
name|FLUSH_POLICY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IS_ROOT
init|=
literal|"IS_ROOT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IS_META
init|=
name|TableDescriptorBuilder
operator|.
name|IS_META
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DURABILITY
init|=
name|TableDescriptorBuilder
operator|.
name|DURABILITY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REGION_REPLICATION
init|=
name|TableDescriptorBuilder
operator|.
name|REGION_REPLICATION
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REGION_MEMSTORE_REPLICATION
init|=
name|TableDescriptorBuilder
operator|.
name|REGION_MEMSTORE_REPLICATION
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NORMALIZATION_ENABLED
init|=
name|TableDescriptorBuilder
operator|.
name|NORMALIZATION_ENABLED
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PRIORITY
init|=
name|TableDescriptorBuilder
operator|.
name|PRIORITY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_READONLY
init|=
name|TableDescriptorBuilder
operator|.
name|DEFAULT_READONLY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_COMPACTION_ENABLED
init|=
name|TableDescriptorBuilder
operator|.
name|DEFAULT_COMPACTION_ENABLED
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NORMALIZATION_ENABLED
init|=
name|TableDescriptorBuilder
operator|.
name|DEFAULT_NORMALIZATION_ENABLED
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_MEMSTORE_FLUSH_SIZE
init|=
name|TableDescriptorBuilder
operator|.
name|DEFAULT_MEMSTORE_FLUSH_SIZE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_REGION_REPLICATION
init|=
name|TableDescriptorBuilder
operator|.
name|DEFAULT_REGION_REPLICATION
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_REGION_MEMSTORE_REPLICATION
init|=
name|TableDescriptorBuilder
operator|.
name|DEFAULT_REGION_MEMSTORE_REPLICATION
decl_stmt|;
specifier|protected
specifier|final
name|ModifyableTableDescriptor
name|delegatee
decl_stmt|;
comment|/**    * Construct a table descriptor specifying a TableName object    * @param name Table name.    * @see<a href="https://issues.apache.org/jira/browse/HBASE-174">HADOOP-1581 HBASE: (HBASE-174) Un-openable tablename bug</a>    */
specifier|public
name|HTableDescriptor
parameter_list|(
specifier|final
name|TableName
name|name
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ModifyableTableDescriptor
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a table descriptor by cloning the descriptor passed as a parameter.    *<p>    * Makes a deep copy of the supplied descriptor.    * Can make a modifiable descriptor from an ImmutableHTableDescriptor.    * @param desc The descriptor.    */
specifier|public
name|HTableDescriptor
parameter_list|(
specifier|final
name|HTableDescriptor
name|desc
parameter_list|)
block|{
name|this
argument_list|(
name|desc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|HTableDescriptor
parameter_list|(
specifier|final
name|HTableDescriptor
name|desc
parameter_list|,
name|boolean
name|deepClone
parameter_list|)
block|{
name|this
argument_list|(
name|deepClone
condition|?
operator|new
name|ModifyableTableDescriptor
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|desc
argument_list|)
else|:
name|desc
operator|.
name|delegatee
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HTableDescriptor
parameter_list|(
specifier|final
name|TableDescriptor
name|desc
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ModifyableTableDescriptor
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|desc
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a table descriptor by cloning the descriptor passed as a parameter    * but using a different table name.    *<p>    * Makes a deep copy of the supplied descriptor.    * Can make a modifiable descriptor from an ImmutableHTableDescriptor.    * @param name Table name.    * @param desc The descriptor.    */
specifier|public
name|HTableDescriptor
parameter_list|(
specifier|final
name|TableName
name|name
parameter_list|,
specifier|final
name|HTableDescriptor
name|desc
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ModifyableTableDescriptor
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|HTableDescriptor
parameter_list|(
name|ModifyableTableDescriptor
name|delegatee
parameter_list|)
block|{
name|this
operator|.
name|delegatee
operator|=
name|delegatee
expr_stmt|;
block|}
comment|/**    * This is vestigial API. It will be removed in 3.0.    *    * @return always return the false    */
specifier|public
name|boolean
name|isRootRegion
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Checks if this table is<code> hbase:meta</code>    * region.    *    * @return true if this table is<code> hbase:meta</code>    * region    */
annotation|@
name|Override
specifier|public
name|boolean
name|isMetaRegion
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|isMetaRegion
argument_list|()
return|;
block|}
comment|/**    * Checks if the table is a<code>hbase:meta</code> table    *    * @return true if table is<code> hbase:meta</code> region.    */
annotation|@
name|Override
specifier|public
name|boolean
name|isMetaTable
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|isMetaTable
argument_list|()
return|;
block|}
comment|/**    * @return Getter for fetching an unmodifiable map.    */
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Bytes
argument_list|,
name|Bytes
argument_list|>
name|getValues
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getValues
argument_list|()
return|;
block|}
comment|/**    * Setter for storing metadata as a (key, value) pair in map    *    * @param key The key.    * @param value The value. If null, removes the setting.    */
specifier|public
name|HTableDescriptor
name|setValue
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/*    * Setter for storing metadata as a (key, value) pair in map    *    * @param key The key.    * @param value The value. If null, removes the setting.    */
specifier|public
name|HTableDescriptor
name|setValue
parameter_list|(
specifier|final
name|Bytes
name|key
parameter_list|,
specifier|final
name|Bytes
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Setter for storing metadata as a (key, value) pair in map    *    * @param key The key.    * @param value The value. If null, removes the setting.    */
specifier|public
name|HTableDescriptor
name|setValue
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Remove metadata represented by the key from the map    *    * @param key Key whose key and value we're to remove from HTableDescriptor    * parameters.    */
specifier|public
name|void
name|remove
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|removeValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove metadata represented by the key from the map    *    * @param key Key whose key and value we're to remove from HTableDescriptor    * parameters.    */
specifier|public
name|void
name|remove
parameter_list|(
name|Bytes
name|key
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|removeValue
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove metadata represented by the key from the map    *    * @param key Key whose key and value we're to remove from HTableDescriptor    * parameters.    */
specifier|public
name|void
name|remove
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|removeValue
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if the readOnly flag of the table is set. If the readOnly flag is    * set then the contents of the table can only be read from but not modified.    *    * @return true if all columns in the table should be read only    */
annotation|@
name|Override
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|isReadOnly
argument_list|()
return|;
block|}
comment|/**    * Setting the table as read only sets all the columns in the table as read    * only. By default all tables are modifiable, but if the readOnly flag is    * set to true then the contents of the table can only be read but not modified.    *    * @param readOnly True if all of the columns in the table should be read    * only.    */
specifier|public
name|HTableDescriptor
name|setReadOnly
parameter_list|(
specifier|final
name|boolean
name|readOnly
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setReadOnly
argument_list|(
name|readOnly
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Check if the compaction enable flag of the table is true. If flag is    * false then no minor/major compactions will be done in real.    *    * @return true if table compaction enabled    */
annotation|@
name|Override
specifier|public
name|boolean
name|isCompactionEnabled
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|isCompactionEnabled
argument_list|()
return|;
block|}
comment|/**    * Setting the table compaction enable flag.    *    * @param isEnable True if enable compaction.    */
specifier|public
name|HTableDescriptor
name|setCompactionEnabled
parameter_list|(
specifier|final
name|boolean
name|isEnable
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setCompactionEnabled
argument_list|(
name|isEnable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Check if normalization enable flag of the table is true. If flag is    * false then no region normalizer won't attempt to normalize this table.    *    * @return true if region normalization is enabled for this table    */
annotation|@
name|Override
specifier|public
name|boolean
name|isNormalizationEnabled
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|isNormalizationEnabled
argument_list|()
return|;
block|}
comment|/**    * Setting the table normalization enable flag.    *    * @param isEnable True if enable normalization.    */
specifier|public
name|HTableDescriptor
name|setNormalizationEnabled
parameter_list|(
specifier|final
name|boolean
name|isEnable
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setNormalizationEnabled
argument_list|(
name|isEnable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Sets the {@link Durability} setting for the table. This defaults to Durability.USE_DEFAULT.    * @param durability enum value    */
specifier|public
name|HTableDescriptor
name|setDurability
parameter_list|(
name|Durability
name|durability
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setDurability
argument_list|(
name|durability
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Returns the durability setting for the table.    * @return durability setting for the table.    */
annotation|@
name|Override
specifier|public
name|Durability
name|getDurability
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getDurability
argument_list|()
return|;
block|}
comment|/**    * Get the name of the table    *    * @return TableName    */
annotation|@
name|Override
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getTableName
argument_list|()
return|;
block|}
comment|/**    * Get the name of the table as a String    *    * @return name of table as a String    */
specifier|public
name|String
name|getNameAsString
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
return|;
block|}
comment|/**    * This sets the class associated with the region split policy which    * determines when a region split should occur.  The class used by    * default is defined in org.apache.hadoop.hbase.regionserver.RegionSplitPolicy    * @param clazz the class name    */
specifier|public
name|HTableDescriptor
name|setRegionSplitPolicyClassName
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setRegionSplitPolicyClassName
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * This gets the class associated with the region split policy which    * determines when a region split should occur.  The class used by    * default is defined in org.apache.hadoop.hbase.regionserver.RegionSplitPolicy    *    * @return the class name of the region split policy for this table.    * If this returns null, the default split policy is used.    */
annotation|@
name|Override
specifier|public
name|String
name|getRegionSplitPolicyClassName
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getRegionSplitPolicyClassName
argument_list|()
return|;
block|}
comment|/**    * Returns the maximum size upto which a region can grow to after which a region    * split is triggered. The region size is represented by the size of the biggest    * store file in that region.    *    * @return max hregion size for table, -1 if not set.    *    * @see #setMaxFileSize(long)    */
annotation|@
name|Override
specifier|public
name|long
name|getMaxFileSize
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getMaxFileSize
argument_list|()
return|;
block|}
comment|/**    * Sets the maximum size upto which a region can grow to after which a region    * split is triggered. The region size is represented by the size of the biggest    * store file in that region, i.e. If the biggest store file grows beyond the    * maxFileSize, then the region split is triggered. This defaults to a value of    * 256 MB.    *<p>    * This is not an absolute value and might vary. Assume that a single row exceeds    * the maxFileSize then the storeFileSize will be greater than maxFileSize since    * a single row cannot be split across multiple regions    *</p>    *    * @param maxFileSize The maximum file size that a store file can grow to    * before a split is triggered.    */
specifier|public
name|HTableDescriptor
name|setMaxFileSize
parameter_list|(
name|long
name|maxFileSize
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setMaxFileSize
argument_list|(
name|maxFileSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Returns the size of the memstore after which a flush to filesystem is triggered.    *    * @return memory cache flush size for each hregion, -1 if not set.    *    * @see #setMemStoreFlushSize(long)    */
annotation|@
name|Override
specifier|public
name|long
name|getMemStoreFlushSize
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getMemStoreFlushSize
argument_list|()
return|;
block|}
comment|/**    * Represents the maximum size of the memstore after which the contents of the    * memstore are flushed to the filesystem. This defaults to a size of 64 MB.    *    * @param memstoreFlushSize memory cache flush size for each hregion    */
specifier|public
name|HTableDescriptor
name|setMemStoreFlushSize
parameter_list|(
name|long
name|memstoreFlushSize
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setMemStoreFlushSize
argument_list|(
name|memstoreFlushSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * This sets the class associated with the flush policy which determines determines the stores    * need to be flushed when flushing a region. The class used by default is defined in    * org.apache.hadoop.hbase.regionserver.FlushPolicy.    * @param clazz the class name    */
specifier|public
name|HTableDescriptor
name|setFlushPolicyClassName
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setFlushPolicyClassName
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * This gets the class associated with the flush policy which determines the stores need to be    * flushed when flushing a region. The class used by default is defined in    * org.apache.hadoop.hbase.regionserver.FlushPolicy.    * @return the class name of the flush policy for this table. If this returns null, the default    *         flush policy is used.    */
annotation|@
name|Override
specifier|public
name|String
name|getFlushPolicyClassName
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getFlushPolicyClassName
argument_list|()
return|;
block|}
comment|/**    * Adds a column family.    * For the updating purpose please use {@link #modifyFamily(HColumnDescriptor)} instead.    * @param family HColumnDescriptor of family to add.    */
specifier|public
name|HTableDescriptor
name|addFamily
parameter_list|(
specifier|final
name|HColumnDescriptor
name|family
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|addColumnFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Modifies the existing column family.    * @param family HColumnDescriptor of family to update    * @return this (for chained invocation)    */
specifier|public
name|HTableDescriptor
name|modifyFamily
parameter_list|(
specifier|final
name|HColumnDescriptor
name|family
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|modifyColumnFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Checks to see if this table contains the given column family    * @param familyName Family name or column name.    * @return true if the table contains the specified family name    */
specifier|public
name|boolean
name|hasFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|familyName
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|hasColumnFamily
argument_list|(
name|familyName
argument_list|)
return|;
block|}
comment|/**    * @return Name of this table and then a map of all of the column family    * descriptors.    * @see #getNameAsString()    */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @return Name of this table and then a map of all of the column family    * descriptors (with only the non-default column family attributes)    */
specifier|public
name|String
name|toStringCustomizedValues
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|toStringCustomizedValues
argument_list|()
return|;
block|}
comment|/**    * @return map of all table attributes formatted into string.    */
specifier|public
name|String
name|toStringTableAttributes
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|toStringTableAttributes
argument_list|()
return|;
block|}
comment|/**    * Compare the contents of the descriptor with another one passed as a parameter.    * Checks if the obj passed is an instance of HTableDescriptor, if yes then the    * contents of the descriptors are compared.    *    * @return true if the contents of the the two descriptors exactly match    *    * @see java.lang.Object#equals(java.lang.Object)    */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|HTableDescriptor
condition|)
block|{
return|return
name|delegatee
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|HTableDescriptor
operator|)
name|obj
operator|)
operator|.
name|delegatee
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * @see java.lang.Object#hashCode()    */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|// Comparable
comment|/**    * Compares the descriptor with another descriptor which is passed as a parameter.    * This compares the content of the two descriptors and not the reference.    *    * @return 0 if the contents of the descriptors are exactly matching,    *         1 if there is a mismatch in the contents    */
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|HTableDescriptor
name|other
parameter_list|)
block|{
return|return
name|TableDescriptor
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|this
argument_list|,
name|other
argument_list|)
return|;
block|}
comment|/**    * Returns an unmodifiable collection of all the {@link HColumnDescriptor}    * of all the column families of the table.    * @deprecated Use {@link #getColumnFamilies}.    * @return Immutable collection of {@link HColumnDescriptor} of all the    * column families.    */
annotation|@
name|Deprecated
specifier|public
name|Collection
argument_list|<
name|HColumnDescriptor
argument_list|>
name|getFamilies
parameter_list|()
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|delegatee
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|toHColumnDescriptor
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Return true if there are at least one cf whose replication scope is serial.    */
annotation|@
name|Override
specifier|public
name|boolean
name|hasSerialReplicationScope
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|hasSerialReplicationScope
argument_list|()
return|;
block|}
comment|/**    * Returns the configured replicas per region    */
annotation|@
name|Override
specifier|public
name|int
name|getRegionReplication
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getRegionReplication
argument_list|()
return|;
block|}
comment|/**    * Sets the number of replicas per region.    * @param regionReplication the replication factor per region    */
specifier|public
name|HTableDescriptor
name|setRegionReplication
parameter_list|(
name|int
name|regionReplication
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setRegionReplication
argument_list|(
name|regionReplication
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * @return true if the read-replicas memstore replication is enabled.    */
annotation|@
name|Override
specifier|public
name|boolean
name|hasRegionMemstoreReplication
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|hasRegionMemstoreReplication
argument_list|()
return|;
block|}
comment|/**    * Enable or Disable the memstore replication from the primary region to the replicas.    * The replication will be used only for meta operations (e.g. flush, compaction, ...)    *    * @param memstoreReplication true if the new data written to the primary region    *                                 should be replicated.    *                            false if the secondaries can tollerate to have new    *                                  data only when the primary flushes the memstore.    */
specifier|public
name|HTableDescriptor
name|setRegionMemstoreReplication
parameter_list|(
name|boolean
name|memstoreReplication
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setRegionMemstoreReplication
argument_list|(
name|memstoreReplication
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|HTableDescriptor
name|setPriority
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getPriority
argument_list|()
return|;
block|}
comment|/**    * Returns all the column family names of the current table. The map of    * HTableDescriptor contains mapping of family name to HColumnDescriptors.    * This returns all the keys of the family map which represents the column    * family names of the table.    *    * @return Immutable sorted set of the keys of the families.    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0    *             (<a href="https://issues.apache.org/jira/browse/HBASE-18008">HBASE-18008</a>).    *             Use {@link #getColumnFamilyNames()}.    */
annotation|@
name|Deprecated
specifier|public
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|getFamiliesKeys
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getColumnFamilyNames
argument_list|()
return|;
block|}
comment|/**    * Returns the count of the column families of the table.    *    * @return Count of column families of the table    */
annotation|@
name|Override
specifier|public
name|int
name|getColumnFamilyCount
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getColumnFamilyCount
argument_list|()
return|;
block|}
comment|/**    * Returns an array all the {@link HColumnDescriptor} of the column families    * of the table.    *    * @return Array of all the HColumnDescriptors of the current table    *    * @see #getFamilies()    */
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|HColumnDescriptor
index|[]
name|getColumnFamilies
parameter_list|()
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|delegatee
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|toHColumnDescriptor
argument_list|)
operator|.
name|toArray
argument_list|(
name|size
lambda|->
operator|new
name|HColumnDescriptor
index|[
name|size
index|]
argument_list|)
return|;
block|}
comment|/**    * Returns the HColumnDescriptor for a specific column family with name as    * specified by the parameter column.    * @param column Column family name    * @return Column descriptor for the passed family name or the family on    * passed in column.    * @deprecated Use {@link #getColumnFamily(byte[])}.    */
annotation|@
name|Deprecated
specifier|public
name|HColumnDescriptor
name|getFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|column
parameter_list|)
block|{
return|return
name|toHColumnDescriptor
argument_list|(
name|delegatee
operator|.
name|getColumnFamily
argument_list|(
name|column
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Removes the HColumnDescriptor with name specified by the parameter column    * from the table descriptor    *    * @param column Name of the column family to be removed.    * @return Column descriptor for the passed family name or the family on    * passed in column.    */
specifier|public
name|HColumnDescriptor
name|removeFamily
parameter_list|(
specifier|final
name|byte
index|[]
name|column
parameter_list|)
block|{
return|return
name|toHColumnDescriptor
argument_list|(
name|getDelegateeForModification
argument_list|()
operator|.
name|removeColumnFamily
argument_list|(
name|column
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Return a HColumnDescriptor for user to keep the compatibility as much as possible.    * @param desc read-only ColumnFamilyDescriptor    * @return The older implementation of ColumnFamilyDescriptor    */
specifier|protected
name|HColumnDescriptor
name|toHColumnDescriptor
parameter_list|(
name|ColumnFamilyDescriptor
name|desc
parameter_list|)
block|{
if|if
condition|(
name|desc
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|desc
operator|instanceof
name|ModifyableColumnFamilyDescriptor
condition|)
block|{
return|return
operator|new
name|HColumnDescriptor
argument_list|(
operator|(
name|ModifyableColumnFamilyDescriptor
operator|)
name|desc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|desc
operator|instanceof
name|HColumnDescriptor
condition|)
block|{
return|return
operator|(
name|HColumnDescriptor
operator|)
name|desc
return|;
block|}
else|else
block|{
return|return
operator|new
name|HColumnDescriptor
argument_list|(
operator|new
name|ModifyableColumnFamilyDescriptor
argument_list|(
name|desc
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Add a table coprocessor to this table. The coprocessor    * type must be org.apache.hadoop.hbase.coprocessor.RegionCoprocessor.    * It won't check if the class can be loaded or not.    * Whether a coprocessor is loadable or not will be determined when    * a region is opened.    * @param className Full class name.    * @throws IOException    */
specifier|public
name|HTableDescriptor
name|addCoprocessor
parameter_list|(
name|String
name|className
parameter_list|)
throws|throws
name|IOException
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|addCoprocessor
argument_list|(
name|className
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Add a table coprocessor to this table. The coprocessor    * type must be org.apache.hadoop.hbase.coprocessor.RegionCoprocessor.    * It won't check if the class can be loaded or not.    * Whether a coprocessor is loadable or not will be determined when    * a region is opened.    * @param jarFilePath Path of the jar file. If it's null, the class will be    * loaded from default classloader.    * @param className Full class name.    * @param priority Priority    * @param kvs Arbitrary key-value parameter pairs passed into the coprocessor.    * @throws IOException    */
specifier|public
name|HTableDescriptor
name|addCoprocessor
parameter_list|(
name|String
name|className
parameter_list|,
name|Path
name|jarFilePath
parameter_list|,
name|int
name|priority
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|kvs
parameter_list|)
throws|throws
name|IOException
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|addCoprocessor
argument_list|(
name|className
argument_list|,
name|jarFilePath
argument_list|,
name|priority
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Add a table coprocessor to this table. The coprocessor    * type must be org.apache.hadoop.hbase.coprocessor.RegionCoprocessor.    * It won't check if the class can be loaded or not.    * Whether a coprocessor is loadable or not will be determined when    * a region is opened.    * @param specStr The Coprocessor specification all in in one String formatted so matches    * {@link HConstants#CP_HTD_ATTR_VALUE_PATTERN}    * @throws IOException    */
specifier|public
name|HTableDescriptor
name|addCoprocessorWithSpec
parameter_list|(
specifier|final
name|String
name|specStr
parameter_list|)
throws|throws
name|IOException
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|addCoprocessorWithSpec
argument_list|(
name|specStr
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Check if the table has an attached co-processor represented by the name className    *    * @param classNameToMatch - Class name of the co-processor    * @return true of the table has a co-processor className    */
annotation|@
name|Override
specifier|public
name|boolean
name|hasCoprocessor
parameter_list|(
name|String
name|classNameToMatch
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|hasCoprocessor
argument_list|(
name|classNameToMatch
argument_list|)
return|;
block|}
comment|/**    * Return the list of attached co-processor represented by their name className    *    * @return The list of co-processors classNames    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCoprocessors
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getCoprocessors
argument_list|()
return|;
block|}
comment|/**    * Remove a coprocessor from those set on the table    * @param className Class name of the co-processor    */
specifier|public
name|void
name|removeCoprocessor
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|removeCoprocessor
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|static
name|String
name|NAMESPACE_FAMILY_INFO
init|=
name|TableDescriptorBuilder
operator|.
name|NAMESPACE_FAMILY_INFO
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|NAMESPACE_FAMILY_INFO_BYTES
init|=
name|TableDescriptorBuilder
operator|.
name|NAMESPACE_FAMILY_INFO_BYTES
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|NAMESPACE_COL_DESC_BYTES
init|=
name|TableDescriptorBuilder
operator|.
name|NAMESPACE_COL_DESC_BYTES
decl_stmt|;
comment|/** Table descriptor for namespace table */
specifier|public
specifier|static
specifier|final
name|HTableDescriptor
name|NAMESPACE_TABLEDESC
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableDescriptorBuilder
operator|.
name|NAMESPACE_TABLEDESC
argument_list|)
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|HTableDescriptor
name|setOwner
parameter_list|(
name|User
name|owner
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// used by admin.rb:alter(table_name,*args) to update owner.
annotation|@
name|Deprecated
specifier|public
name|HTableDescriptor
name|setOwnerString
parameter_list|(
name|String
name|ownerString
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setOwnerString
argument_list|(
name|ownerString
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|String
name|getOwnerString
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getOwnerString
argument_list|()
return|;
block|}
comment|/**    * @return This instance serialized with pb with pb magic prefix    * @see #parseFrom(byte[])    */
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
return|return
name|TableDescriptorBuilder
operator|.
name|toByteArray
argument_list|(
name|delegatee
argument_list|)
return|;
block|}
comment|/**    * @param bytes A pb serialized {@link HTableDescriptor} instance with pb magic prefix    * @return An instance of {@link HTableDescriptor} made from<code>bytes</code>    * @throws DeserializationException    * @throws IOException    * @see #toByteArray()    */
specifier|public
specifier|static
name|HTableDescriptor
name|parseFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
throws|,
name|IOException
block|{
name|TableDescriptor
name|desc
init|=
name|TableDescriptorBuilder
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|instanceof
name|ModifyableTableDescriptor
condition|)
block|{
return|return
operator|new
name|HTableDescriptor
argument_list|(
operator|(
name|ModifyableTableDescriptor
operator|)
name|desc
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|HTableDescriptor
argument_list|(
name|desc
argument_list|)
return|;
block|}
block|}
comment|/**    * Getter for accessing the configuration value by key    */
specifier|public
name|String
name|getConfigurationValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Getter for fetching an unmodifiable map.    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getConfiguration
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getValues
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|e
lambda|->
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getOffset
argument_list|()
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|,
name|e
lambda|->
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getOffset
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Setter for storing a configuration setting in map.    * @param key Config key. Same as XML config key e.g. hbase.something.or.other.    * @param value String value. If null, removes the setting.    */
specifier|public
name|HTableDescriptor
name|setConfiguration
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|setValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Remove a config setting represented by the key from the map    */
specifier|public
name|void
name|removeConfiguration
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
name|getDelegateeForModification
argument_list|()
operator|.
name|removeValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Bytes
name|getValue
parameter_list|(
name|Bytes
name|key
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getValue
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|getColumnFamilyNames
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|getColumnFamilyNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasColumnFamily
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|hasColumnFamily
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ColumnFamilyDescriptor
name|getColumnFamily
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|getColumnFamily
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|protected
name|ModifyableTableDescriptor
name|getDelegateeForModification
parameter_list|()
block|{
return|return
name|delegatee
return|;
block|}
block|}
end_class

end_unit

