begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|setCoprocessorError
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|MethodDescriptor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompareOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RetriesExhaustedException
operator|.
name|ThrowableWithExtraContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
operator|.
name|Call
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|TimeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Booleans
import|;
end_import

begin_comment
comment|/**  * The table implementation based on {@link AsyncTable}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|TableOverAsyncTable
implements|implements
name|Table
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TableOverAsyncTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AsyncConnectionImpl
name|conn
decl_stmt|;
specifier|private
specifier|final
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|pool
decl_stmt|;
name|TableOverAsyncTable
parameter_list|(
name|AsyncConnectionImpl
name|conn
parameter_list|,
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
block|{
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getName
parameter_list|()
block|{
return|return
name|table
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|table
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableDescriptor
name|getDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|FutureUtils
operator|.
name|get
argument_list|(
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|getDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|(
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FutureUtils
operator|.
name|get
argument_list|(
name|table
operator|.
name|exists
argument_list|(
name|get
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
index|[]
name|exists
parameter_list|(
name|List
argument_list|<
name|Get
argument_list|>
name|gets
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Booleans
operator|.
name|toArray
argument_list|(
name|FutureUtils
operator|.
name|get
argument_list|(
name|table
operator|.
name|existsAll
argument_list|(
name|gets
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|batch
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|actions
parameter_list|,
name|Object
index|[]
name|results
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ArrayUtils
operator|.
name|isEmpty
argument_list|(
name|results
argument_list|)
condition|)
block|{
name|FutureUtils
operator|.
name|get
argument_list|(
name|table
operator|.
name|batchAll
argument_list|(
name|actions
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|ThrowableWithExtraContext
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Object
argument_list|>
argument_list|>
name|futures
init|=
name|table
operator|.
name|batch
argument_list|(
name|actions
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|results
operator|.
name|length
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|results
index|[
name|i
index|]
operator|=
name|FutureUtils
operator|.
name|get
argument_list|(
name|futures
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|results
index|[
name|i
index|]
operator|=
name|e
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ThrowableWithExtraContext
argument_list|(
name|e
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|,
literal|"Error when processing "
operator|+
name|actions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RetriesExhaustedException
argument_list|(
name|errors
operator|.
name|size
argument_list|()
argument_list|,
name|errors
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
parameter_list|>
name|void
name|batchCallback
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|actions
parameter_list|,
name|Object
index|[]
name|results
parameter_list|,
name|Callback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|ConcurrentLinkedQueue
argument_list|<
name|ThrowableWithExtraContext
argument_list|>
name|errors
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|actions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|AsyncTableRegionLocator
name|locator
init|=
name|conn
operator|.
name|getRegionLocator
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|R
argument_list|>
argument_list|>
name|futures
init|=
name|table
operator|.
expr|<
name|R
operator|>
name|batch
argument_list|(
name|actions
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|futures
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|i
decl_stmt|;
name|FutureUtils
operator|.
name|addListener
argument_list|(
name|futures
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
parameter_list|(
name|r
parameter_list|,
name|e
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ThrowableWithExtraContext
argument_list|(
name|e
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|,
literal|"Error when processing "
operator|+
name|actions
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ArrayUtils
operator|.
name|isEmpty
argument_list|(
name|results
argument_list|)
condition|)
block|{
name|results
index|[
name|index
index|]
operator|=
name|e
expr_stmt|;
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|ArrayUtils
operator|.
name|isEmpty
argument_list|(
name|results
argument_list|)
condition|)
block|{
name|results
index|[
name|index
index|]
operator|=
name|r
expr_stmt|;
block|}
name|FutureUtils
operator|.
name|addListener
argument_list|(
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|actions
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|l
parameter_list|,
name|le
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|le
operator|!=
literal|null
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|ThrowableWithExtraContext
argument_list|(
name|le
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|,
literal|"Error when finding the region for row "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|actions
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|callback
operator|.
name|update
argument_list|(
name|l
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|actions
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RetriesExhaustedException
argument_list|(
name|errors
operator|.
name|size
argument_list|()
argument_list|,
name|errors
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Result
name|get
parameter_list|(
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FutureUtils
operator|.
name|get
argument_list|(
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
index|[]
name|get
parameter_list|(
name|List
argument_list|<
name|Get
argument_list|>
name|gets
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FutureUtils
operator|.
name|get
argument_list|(
name|table
operator|.
name|getAll
argument_list|(
name|gets
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|Result
index|[
literal|0
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|table
operator|.
name|getScanner
argument_list|(
name|family
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultScanner
name|getScanner
parameter_list|(
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|table
operator|.
name|getScanner
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
name|FutureUtils
operator|.
name|get
argument_list|(
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|List
argument_list|<
name|Put
argument_list|>
name|puts
parameter_list|)
throws|throws
name|IOException
block|{
name|FutureUtils
operator|.
name|get
argument_list|(
name|table
operator|.
name|putAll
argument_list|(
name|puts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
name|FutureUtils
operator|.
name|get
argument_list|(
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
parameter_list|)
throws|throws
name|IOException
block|{
name|FutureUtils
operator|.
name|get
argument_list|(
name|table
operator|.
name|deleteAll
argument_list|(
name|deletes
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|CheckAndMutateBuilderImpl
implements|implements
name|CheckAndMutateBuilder
block|{
specifier|private
specifier|final
name|AsyncTable
operator|.
name|CheckAndMutateBuilder
name|builder
decl_stmt|;
specifier|public
name|CheckAndMutateBuilderImpl
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncTable
operator|.
name|CheckAndMutateBuilder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CheckAndMutateBuilder
name|qualifier
parameter_list|(
name|byte
index|[]
name|qualifier
parameter_list|)
block|{
name|builder
operator|.
name|qualifier
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|CheckAndMutateBuilder
name|timeRange
parameter_list|(
name|TimeRange
name|timeRange
parameter_list|)
block|{
name|builder
operator|.
name|timeRange
argument_list|(
name|timeRange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|CheckAndMutateBuilder
name|ifNotExists
parameter_list|()
block|{
name|builder
operator|.
name|ifNotExists
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|CheckAndMutateBuilder
name|ifMatches
parameter_list|(
name|CompareOperator
name|compareOp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|builder
operator|.
name|ifMatches
argument_list|(
name|compareOp
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|thenPut
parameter_list|(
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FutureUtils
operator|.
name|get
argument_list|(
name|builder
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|thenDelete
parameter_list|(
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FutureUtils
operator|.
name|get
argument_list|(
name|builder
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|thenMutate
parameter_list|(
name|RowMutations
name|mutation
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FutureUtils
operator|.
name|get
argument_list|(
name|builder
operator|.
name|thenMutate
argument_list|(
name|mutation
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CheckAndMutateBuilder
name|checkAndMutate
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|)
block|{
return|return
operator|new
name|CheckAndMutateBuilderImpl
argument_list|(
name|table
operator|.
name|checkAndMutate
argument_list|(
name|row
argument_list|,
name|family
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mutateRow
parameter_list|(
name|RowMutations
name|rm
parameter_list|)
throws|throws
name|IOException
block|{
name|FutureUtils
operator|.
name|get
argument_list|(
name|table
operator|.
name|mutateRow
argument_list|(
name|rm
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|append
parameter_list|(
name|Append
name|append
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FutureUtils
operator|.
name|get
argument_list|(
name|table
operator|.
name|append
argument_list|(
name|append
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|increment
parameter_list|(
name|Increment
name|increment
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FutureUtils
operator|.
name|get
argument_list|(
name|table
operator|.
name|increment
argument_list|(
name|increment
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|incrementColumnValue
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|amount
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FutureUtils
operator|.
name|get
argument_list|(
name|table
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|amount
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|incrementColumnValue
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|amount
parameter_list|,
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FutureUtils
operator|.
name|get
argument_list|(
name|table
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|amount
argument_list|,
name|durability
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{   }
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|private
specifier|static
specifier|final
class|class
name|RegionCoprocessorRpcChannel
extends|extends
name|RegionCoprocessorRpcChannelImpl
implements|implements
name|CoprocessorRpcChannel
block|{
name|RegionCoprocessorRpcChannel
parameter_list|(
name|AsyncConnectionImpl
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|RegionInfo
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|long
name|rpcTimeoutNs
parameter_list|,
name|long
name|operationTimeoutNs
parameter_list|)
block|{
name|super
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
name|region
argument_list|,
name|row
argument_list|,
name|rpcTimeoutNs
argument_list|,
name|operationTimeoutNs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|callMethod
parameter_list|(
name|MethodDescriptor
name|method
parameter_list|,
name|RpcController
name|controller
parameter_list|,
name|Message
name|request
parameter_list|,
name|Message
name|responsePrototype
parameter_list|,
name|RpcCallback
argument_list|<
name|Message
argument_list|>
name|done
parameter_list|)
block|{
name|ClientCoprocessorRpcController
name|c
init|=
operator|new
name|ClientCoprocessorRpcController
argument_list|()
decl_stmt|;
name|CoprocessorBlockingRpcCallback
argument_list|<
name|Message
argument_list|>
name|callback
init|=
operator|new
name|CoprocessorBlockingRpcCallback
argument_list|<>
argument_list|()
decl_stmt|;
name|super
operator|.
name|callMethod
argument_list|(
name|method
argument_list|,
name|c
argument_list|,
name|request
argument_list|,
name|responsePrototype
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|Message
name|ret
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|callback
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|setCoprocessorError
argument_list|(
name|controller
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|c
operator|.
name|failed
argument_list|()
condition|)
block|{
name|setCoprocessorError
argument_list|(
name|controller
argument_list|,
name|c
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|done
operator|.
name|run
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Message
name|callBlockingMethod
parameter_list|(
name|MethodDescriptor
name|method
parameter_list|,
name|RpcController
name|controller
parameter_list|,
name|Message
name|request
parameter_list|,
name|Message
name|responsePrototype
parameter_list|)
throws|throws
name|ServiceException
block|{
name|ClientCoprocessorRpcController
name|c
init|=
operator|new
name|ClientCoprocessorRpcController
argument_list|()
decl_stmt|;
name|CoprocessorBlockingRpcCallback
argument_list|<
name|Message
argument_list|>
name|done
init|=
operator|new
name|CoprocessorBlockingRpcCallback
argument_list|<>
argument_list|()
decl_stmt|;
name|callMethod
argument_list|(
name|method
argument_list|,
name|c
argument_list|,
name|request
argument_list|,
name|responsePrototype
argument_list|,
name|done
argument_list|)
expr_stmt|;
name|Message
name|ret
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|done
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|c
operator|.
name|failed
argument_list|()
condition|)
block|{
name|setCoprocessorError
argument_list|(
name|controller
argument_list|,
name|c
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
name|c
operator|.
name|getFailed
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RegionCoprocessorRpcChannel
name|coprocessorService
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
operator|new
name|RegionCoprocessorRpcChannel
argument_list|(
name|conn
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|row
argument_list|,
name|getRpcTimeout
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|,
name|getOperationTimeout
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get the corresponding start keys and regions for an arbitrary range of keys.    *<p>    * @param startKey Starting row in range, inclusive    * @param endKey Ending row in range    * @param includeEndKey true if endRow is inclusive, false if exclusive    * @return A pair of list of start keys and list of HRegionLocations that contain the specified    *         range    * @throws IOException if a remote or network exception occurs    */
specifier|private
name|Pair
argument_list|<
name|List
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|,
name|List
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|>
name|getKeysAndRegionsInRange
parameter_list|(
specifier|final
name|byte
index|[]
name|startKey
parameter_list|,
specifier|final
name|byte
index|[]
name|endKey
parameter_list|,
specifier|final
name|boolean
name|includeEndKey
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getKeysAndRegionsInRange
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|includeEndKey
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Get the corresponding start keys and regions for an arbitrary range of keys.    *<p>    * @param startKey Starting row in range, inclusive    * @param endKey Ending row in range    * @param includeEndKey true if endRow is inclusive, false if exclusive    * @param reload true to reload information or false to use cached information    * @return A pair of list of start keys and list of HRegionLocations that contain the specified    *         range    * @throws IOException if a remote or network exception occurs    */
specifier|private
name|Pair
argument_list|<
name|List
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|,
name|List
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|>
name|getKeysAndRegionsInRange
parameter_list|(
specifier|final
name|byte
index|[]
name|startKey
parameter_list|,
specifier|final
name|byte
index|[]
name|endKey
parameter_list|,
specifier|final
name|boolean
name|includeEndKey
parameter_list|,
specifier|final
name|boolean
name|reload
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|endKeyIsEndOfTable
init|=
name|Bytes
operator|.
name|equals
argument_list|(
name|endKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|)
operator|>
literal|0
operator|)
operator|&&
operator|!
name|endKeyIsEndOfTable
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid range: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|startKey
argument_list|)
operator|+
literal|"> "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|endKey
argument_list|)
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|keysInRange
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regionsInRange
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|currentKey
init|=
name|startKey
decl_stmt|;
do|do
block|{
name|HRegionLocation
name|regionLocation
init|=
name|FutureUtils
operator|.
name|get
argument_list|(
name|conn
operator|.
name|getRegionLocator
argument_list|(
name|getName
argument_list|()
argument_list|)
operator|.
name|getRegionLocation
argument_list|(
name|currentKey
argument_list|,
name|reload
argument_list|)
argument_list|)
decl_stmt|;
name|keysInRange
operator|.
name|add
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
name|regionsInRange
operator|.
name|add
argument_list|(
name|regionLocation
argument_list|)
expr_stmt|;
name|currentKey
operator|=
name|regionLocation
operator|.
name|getRegion
argument_list|()
operator|.
name|getEndKey
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|currentKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|&&
operator|(
name|endKeyIsEndOfTable
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|currentKey
argument_list|,
name|endKey
argument_list|)
operator|<
literal|0
operator|||
operator|(
name|includeEndKey
operator|&&
name|Bytes
operator|.
name|compareTo
argument_list|(
name|currentKey
argument_list|,
name|endKey
argument_list|)
operator|==
literal|0
operator|)
operator|)
condition|)
do|;
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|keysInRange
argument_list|,
name|regionsInRange
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getStartKeysInRange
parameter_list|(
name|byte
index|[]
name|start
parameter_list|,
name|byte
index|[]
name|end
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|start
operator|==
literal|null
condition|)
block|{
name|start
operator|=
name|HConstants
operator|.
name|EMPTY_START_ROW
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|==
literal|null
condition|)
block|{
name|end
operator|=
name|HConstants
operator|.
name|EMPTY_END_ROW
expr_stmt|;
block|}
return|return
name|getKeysAndRegionsInRange
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
literal|true
argument_list|)
operator|.
name|getFirst
argument_list|()
return|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|StubCall
parameter_list|<
name|R
parameter_list|>
block|{
name|R
name|call
parameter_list|(
name|RegionCoprocessorRpcChannel
name|channel
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
specifier|private
parameter_list|<
name|R
parameter_list|>
name|void
name|coprocssorService
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|Callback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|,
name|StubCall
argument_list|<
name|R
argument_list|>
name|call
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// get regions covered by the row range
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|keys
init|=
name|getStartKeysInRange
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Future
argument_list|<
name|R
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|byte
index|[]
name|r
range|:
name|keys
control|)
block|{
name|RegionCoprocessorRpcChannel
name|channel
init|=
name|coprocessorService
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|R
argument_list|>
name|future
init|=
name|pool
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|R
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|R
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|R
name|result
init|=
name|call
operator|.
name|call
argument_list|(
name|channel
argument_list|)
decl_stmt|;
name|byte
index|[]
name|region
init|=
name|channel
operator|.
name|getLastRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|update
argument_list|(
name|region
argument_list|,
name|r
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|futures
operator|.
name|put
argument_list|(
name|r
argument_list|,
name|future
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|e
parameter_list|)
block|{
comment|// maybe the connection has been closed, let's check
if|if
condition|(
name|pool
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Connection is closed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|HBaseIOException
argument_list|(
literal|"Coprocessor operation is rejected"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Future
argument_list|<
name|R
argument_list|>
argument_list|>
name|e
range|:
name|futures
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error calling coprocessor service "
operator|+
name|serviceName
operator|+
literal|" for row "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|ee
argument_list|)
expr_stmt|;
throw|throw
name|ee
operator|.
name|getCause
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Interrupted calling coprocessor service "
operator|+
name|serviceName
operator|+
literal|" for row "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Service
parameter_list|,
name|R
parameter_list|>
name|void
name|coprocessorService
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|service
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|Call
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|,
name|Callback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|Throwable
block|{
name|coprocssorService
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|callback
argument_list|,
name|channel
lambda|->
block|{
name|T
name|instance
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
operator|.
name|newServiceStub
argument_list|(
name|service
argument_list|,
name|channel
argument_list|)
decl_stmt|;
return|return
name|callable
operator|.
name|call
argument_list|(
name|instance
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
extends|extends
name|Message
parameter_list|>
name|void
name|batchCoprocessorService
parameter_list|(
name|MethodDescriptor
name|methodDescriptor
parameter_list|,
name|Message
name|request
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|R
name|responsePrototype
parameter_list|,
name|Callback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|Throwable
block|{
name|coprocssorService
argument_list|(
name|methodDescriptor
operator|.
name|getFullName
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|callback
argument_list|,
name|channel
lambda|->
block|{
return|return
operator|(
name|R
operator|)
name|channel
operator|.
name|callBlockingMethod
argument_list|(
name|methodDescriptor
argument_list|,
literal|null
argument_list|,
name|request
argument_list|,
name|responsePrototype
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRpcTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|table
operator|.
name|getRpcTimeout
argument_list|(
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getReadRpcTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|table
operator|.
name|getReadRpcTimeout
argument_list|(
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getWriteRpcTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|table
operator|.
name|getWriteRpcTimeout
argument_list|(
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getOperationTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|table
operator|.
name|getOperationTimeout
argument_list|(
name|unit
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionLocator
name|getRegionLocator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|conn
operator|.
name|toConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

