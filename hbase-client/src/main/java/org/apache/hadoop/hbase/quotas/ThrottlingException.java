begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Describe the throttling result.  *  * TODO: At some point this will be handled on the client side to prevent  * operation to go on the server if the waitInterval is grater than the one got  * as result of this exception.  */
end_comment

begin_class
specifier|public
class|class
name|ThrottlingException
extends|extends
name|QuotaExceededException
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1406576492085155743L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ThrottlingException
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
enum|enum
name|Type
block|{
name|NumRequestsExceeded
block|,
name|NumReadRequestsExceeded
block|,
name|NumWriteRequestsExceeded
block|,
name|WriteSizeExceeded
block|,
name|ReadSizeExceeded
block|,   }
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|MSG_TYPE
init|=
operator|new
name|String
index|[]
block|{
literal|"number of requests exceeded"
block|,
literal|"number of read requests exceeded"
block|,
literal|"number of write requests exceeded"
block|,
literal|"write size limit exceeded"
block|,
literal|"read size limit exceeded"
block|,   }
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MSG_WAIT
init|=
literal|" - wait "
decl_stmt|;
specifier|private
name|long
name|waitInterval
decl_stmt|;
specifier|private
name|Type
name|type
decl_stmt|;
specifier|public
name|ThrottlingException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// Dirty workaround to get the information after
comment|// ((RemoteException)e.getCause()).unwrapRemoteException()
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_TYPE
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|int
name|index
init|=
name|msg
operator|.
name|indexOf
argument_list|(
name|MSG_TYPE
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|String
name|waitTimeStr
init|=
name|msg
operator|.
name|substring
argument_list|(
name|index
operator|+
name|MSG_TYPE
index|[
name|i
index|]
operator|.
name|length
argument_list|()
operator|+
name|MSG_WAIT
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|type
operator|=
name|Type
operator|.
name|values
argument_list|()
index|[
name|i
index|]
expr_stmt|;
empty_stmt|;
name|waitInterval
operator|=
name|timeFromString
argument_list|(
name|waitTimeStr
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|public
name|ThrottlingException
parameter_list|(
specifier|final
name|Type
name|type
parameter_list|,
specifier|final
name|long
name|waitInterval
parameter_list|,
specifier|final
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|waitInterval
operator|=
name|waitInterval
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
specifier|public
name|long
name|getWaitInterval
parameter_list|()
block|{
return|return
name|this
operator|.
name|waitInterval
return|;
block|}
specifier|public
specifier|static
name|void
name|throwNumRequestsExceeded
parameter_list|(
specifier|final
name|long
name|waitInterval
parameter_list|)
throws|throws
name|ThrottlingException
block|{
name|throwThrottlingException
argument_list|(
name|Type
operator|.
name|NumRequestsExceeded
argument_list|,
name|waitInterval
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|throwNumReadRequestsExceeded
parameter_list|(
specifier|final
name|long
name|waitInterval
parameter_list|)
throws|throws
name|ThrottlingException
block|{
name|throwThrottlingException
argument_list|(
name|Type
operator|.
name|NumReadRequestsExceeded
argument_list|,
name|waitInterval
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|throwNumWriteRequestsExceeded
parameter_list|(
specifier|final
name|long
name|waitInterval
parameter_list|)
throws|throws
name|ThrottlingException
block|{
name|throwThrottlingException
argument_list|(
name|Type
operator|.
name|NumWriteRequestsExceeded
argument_list|,
name|waitInterval
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|throwWriteSizeExceeded
parameter_list|(
specifier|final
name|long
name|waitInterval
parameter_list|)
throws|throws
name|ThrottlingException
block|{
name|throwThrottlingException
argument_list|(
name|Type
operator|.
name|WriteSizeExceeded
argument_list|,
name|waitInterval
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|throwReadSizeExceeded
parameter_list|(
specifier|final
name|long
name|waitInterval
parameter_list|)
throws|throws
name|ThrottlingException
block|{
name|throwThrottlingException
argument_list|(
name|Type
operator|.
name|ReadSizeExceeded
argument_list|,
name|waitInterval
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|throwThrottlingException
parameter_list|(
specifier|final
name|Type
name|type
parameter_list|,
specifier|final
name|long
name|waitInterval
parameter_list|)
throws|throws
name|ThrottlingException
block|{
name|String
name|msg
init|=
name|MSG_TYPE
index|[
name|type
operator|.
name|ordinal
argument_list|()
index|]
operator|+
name|MSG_WAIT
operator|+
name|formatTime
argument_list|(
name|waitInterval
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ThrottlingException
argument_list|(
name|type
argument_list|,
name|waitInterval
argument_list|,
name|msg
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|String
name|formatTime
parameter_list|(
name|long
name|timeDiff
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|long
name|hours
init|=
name|timeDiff
operator|/
operator|(
literal|60
operator|*
literal|60
operator|*
literal|1000
operator|)
decl_stmt|;
name|long
name|rem
init|=
operator|(
name|timeDiff
operator|%
operator|(
literal|60
operator|*
literal|60
operator|*
literal|1000
operator|)
operator|)
decl_stmt|;
name|long
name|minutes
init|=
name|rem
operator|/
operator|(
literal|60
operator|*
literal|1000
operator|)
decl_stmt|;
name|rem
operator|=
name|rem
operator|%
operator|(
literal|60
operator|*
literal|1000
operator|)
expr_stmt|;
name|float
name|seconds
init|=
name|rem
operator|/
literal|1000.0f
decl_stmt|;
if|if
condition|(
name|hours
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|hours
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"hrs, "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minutes
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|minutes
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"mins, "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%.2fsec"
argument_list|,
name|seconds
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|long
name|timeFromString
parameter_list|(
name|String
name|timeDiff
parameter_list|)
block|{
name|Pattern
index|[]
name|patterns
init|=
operator|new
name|Pattern
index|[]
block|{
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(\\d+\\.\\d\\d)sec"
argument_list|)
block|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(\\d+)mins, (\\d+\\.\\d\\d)sec"
argument_list|)
block|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(\\d+)hrs, (\\d+)mins, (\\d+\\.\\d\\d)sec"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|patterns
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Matcher
name|m
init|=
name|patterns
index|[
name|i
index|]
operator|.
name|matcher
argument_list|(
name|timeDiff
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|long
name|time
init|=
name|Math
operator|.
name|round
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
operator|*
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|time
operator|+=
name|Long
operator|.
name|parseLong
argument_list|(
name|m
operator|.
name|group
argument_list|(
name|i
argument_list|)
argument_list|)
operator|*
operator|(
literal|60
operator|*
literal|1000
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
name|time
operator|+=
name|Long
operator|.
name|parseLong
argument_list|(
name|m
operator|.
name|group
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
operator|*
operator|(
literal|60
operator|*
literal|60
operator|*
literal|1000
operator|)
expr_stmt|;
block|}
return|return
name|time
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

