begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Status information on the HBase cluster.  *<p>  *<tt>ClusterStatus</tt> provides clients with information such as:  *<ul>  *<li>The count and names of region servers in the cluster.</li>  *<li>The count and names of dead region servers in the cluster.</li>  *<li>The name of the active master for the cluster.</li>  *<li>The name(s) of the backup master(s) for the cluster, if they exist.</li>  *<li>The average cluster load.</li>  *<li>The number of regions deployed on the cluster.</li>  *<li>The number of requests since last report.</li>  *<li>Detailed region server loading and resource usage information,  *  per server and per region.</li>  *<li>Regions in transition at master</li>  *<li>The unique cluster ID</li>  *</ul>  *<tt>{@link Option}</tt> provides a way to get desired ClusterStatus information.  * The following codes will get all the cluster information.  *<pre>  * {@code  * // Original version still works  * Admin admin = connection.getAdmin();  * ClusterStatus status = admin.getClusterStatus();  * // or below, a new version which has the same effects  * ClusterStatus status = admin.getClusterStatus(EnumSet.allOf(Option.class));  * }  *</pre>  * If information about live servers is the only wanted.  * then codes in the following way:  *<pre>  * {@code  * Admin admin = connection.getAdmin();  * ClusterStatus status = admin.getClusterStatus(EnumSet.of(Option.LIVE_SERVERS));  * }  *</pre>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|ClusterStatus
block|{
comment|// TODO: remove this in 3.0
specifier|private
specifier|static
specifier|final
name|byte
name|VERSION
init|=
literal|2
decl_stmt|;
specifier|private
name|String
name|hbaseVersion
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerLoad
argument_list|>
name|liveServers
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|deadServers
decl_stmt|;
specifier|private
name|ServerName
name|master
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|backupMasters
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RegionState
argument_list|>
name|intransition
decl_stmt|;
specifier|private
name|String
name|clusterId
decl_stmt|;
specifier|private
name|String
index|[]
name|masterCoprocessors
decl_stmt|;
specifier|private
name|Boolean
name|balancerOn
decl_stmt|;
comment|/**    * Use {@link ClusterStatus.Builder} to construct a ClusterStatus instead.    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0    *             (<a href="https://issues.apache.org/jira/browse/HBASE-15511">HBASE-15511</a>).    */
annotation|@
name|Deprecated
specifier|public
name|ClusterStatus
parameter_list|(
specifier|final
name|String
name|hbaseVersion
parameter_list|,
specifier|final
name|String
name|clusterid
parameter_list|,
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerLoad
argument_list|>
name|servers
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|deadServers
parameter_list|,
specifier|final
name|ServerName
name|master
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|backupMasters
parameter_list|,
specifier|final
name|List
argument_list|<
name|RegionState
argument_list|>
name|rit
parameter_list|,
specifier|final
name|String
index|[]
name|masterCoprocessors
parameter_list|,
specifier|final
name|Boolean
name|balancerOn
parameter_list|)
block|{
comment|// TODO: make this constructor private
name|this
operator|.
name|hbaseVersion
operator|=
name|hbaseVersion
expr_stmt|;
name|this
operator|.
name|liveServers
operator|=
name|servers
expr_stmt|;
name|this
operator|.
name|deadServers
operator|=
name|deadServers
expr_stmt|;
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
name|this
operator|.
name|backupMasters
operator|=
name|backupMasters
expr_stmt|;
name|this
operator|.
name|intransition
operator|=
name|rit
expr_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|clusterid
expr_stmt|;
name|this
operator|.
name|masterCoprocessors
operator|=
name|masterCoprocessors
expr_stmt|;
name|this
operator|.
name|balancerOn
operator|=
name|balancerOn
expr_stmt|;
block|}
comment|/**    * @return the names of region servers on the dead list    */
specifier|public
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|getDeadServerNames
parameter_list|()
block|{
if|if
condition|(
name|deadServers
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
expr|<
name|ServerName
operator|>
name|emptyList
argument_list|()
return|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|deadServers
argument_list|)
return|;
block|}
comment|/**    * @return the number of region servers in the cluster    */
specifier|public
name|int
name|getServersSize
parameter_list|()
block|{
return|return
name|liveServers
operator|!=
literal|null
condition|?
name|liveServers
operator|.
name|size
argument_list|()
else|:
literal|0
return|;
block|}
comment|/**    * @return the number of dead region servers in the cluster    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0    *             (<a href="https://issues.apache.org/jira/browse/HBASE-13656">HBASE-13656</a>).    *             Use {@link #getDeadServersSize()}.    */
annotation|@
name|Deprecated
specifier|public
name|int
name|getDeadServers
parameter_list|()
block|{
return|return
name|getDeadServersSize
argument_list|()
return|;
block|}
comment|/**    * @return the number of dead region servers in the cluster    */
specifier|public
name|int
name|getDeadServersSize
parameter_list|()
block|{
return|return
name|deadServers
operator|!=
literal|null
condition|?
name|deadServers
operator|.
name|size
argument_list|()
else|:
literal|0
return|;
block|}
comment|/**    * @return the average cluster load    */
specifier|public
name|double
name|getAverageLoad
parameter_list|()
block|{
name|int
name|load
init|=
name|getRegionsCount
argument_list|()
decl_stmt|;
name|int
name|serverSize
init|=
name|getServersSize
argument_list|()
decl_stmt|;
return|return
name|serverSize
operator|!=
literal|0
condition|?
operator|(
name|double
operator|)
name|load
operator|/
operator|(
name|double
operator|)
name|serverSize
else|:
literal|0.0
return|;
block|}
comment|/**    * @return the number of regions deployed on the cluster    */
specifier|public
name|int
name|getRegionsCount
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|liveServers
operator|!=
literal|null
operator|&&
operator|!
name|liveServers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|ServerLoad
argument_list|>
name|e
range|:
name|this
operator|.
name|liveServers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|count
operator|+=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getNumberOfRegions
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
comment|/**    * @return the number of requests since last report    */
specifier|public
name|int
name|getRequestsCount
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|liveServers
operator|!=
literal|null
operator|&&
operator|!
name|liveServers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|ServerLoad
argument_list|>
name|e
range|:
name|this
operator|.
name|liveServers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|count
operator|+=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getNumberOfRequests
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
comment|/**    * @return the HBase version string as reported by the HMaster    */
specifier|public
name|String
name|getHBaseVersion
parameter_list|()
block|{
return|return
name|hbaseVersion
return|;
block|}
comment|/**    * @see java.lang.Object#equals(java.lang.Object)    */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|ClusterStatus
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ClusterStatus
name|other
init|=
operator|(
name|ClusterStatus
operator|)
name|o
decl_stmt|;
comment|//TODO Override the equals() methods in ServerLoad.
return|return
name|Objects
operator|.
name|equal
argument_list|(
name|getHBaseVersion
argument_list|()
argument_list|,
name|other
operator|.
name|getHBaseVersion
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|this
operator|.
name|liveServers
argument_list|,
name|other
operator|.
name|liveServers
argument_list|)
operator|&&
name|getDeadServerNames
argument_list|()
operator|.
name|containsAll
argument_list|(
name|other
operator|.
name|getDeadServerNames
argument_list|()
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|getMasterCoprocessors
argument_list|()
argument_list|,
name|other
operator|.
name|getMasterCoprocessors
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|getMaster
argument_list|()
argument_list|,
name|other
operator|.
name|getMaster
argument_list|()
argument_list|)
operator|&&
name|getBackupMasters
argument_list|()
operator|.
name|containsAll
argument_list|(
name|other
operator|.
name|getBackupMasters
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @see java.lang.Object#hashCode()    */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|hbaseVersion
argument_list|,
name|liveServers
argument_list|,
name|deadServers
argument_list|,
name|master
argument_list|,
name|backupMasters
argument_list|)
return|;
block|}
comment|/**    *    * @return the object version number    * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0    */
annotation|@
name|Deprecated
specifier|public
name|byte
name|getVersion
parameter_list|()
block|{
return|return
name|VERSION
return|;
block|}
comment|//
comment|// Getters
comment|//
specifier|public
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|getServers
parameter_list|()
block|{
if|if
condition|(
name|liveServers
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
expr|<
name|ServerName
operator|>
name|emptyList
argument_list|()
return|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|this
operator|.
name|liveServers
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns detailed information about the current master {@link ServerName}.    * @return current master information if it exists    */
specifier|public
name|ServerName
name|getMaster
parameter_list|()
block|{
return|return
name|this
operator|.
name|master
return|;
block|}
comment|/**    * @return the number of backup masters in the cluster    */
specifier|public
name|int
name|getBackupMastersSize
parameter_list|()
block|{
return|return
name|backupMasters
operator|!=
literal|null
condition|?
name|backupMasters
operator|.
name|size
argument_list|()
else|:
literal|0
return|;
block|}
comment|/**    * @return the names of backup masters    */
specifier|public
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|getBackupMasters
parameter_list|()
block|{
if|if
condition|(
name|backupMasters
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
expr|<
name|ServerName
operator|>
name|emptyList
argument_list|()
return|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|this
operator|.
name|backupMasters
argument_list|)
return|;
block|}
comment|/**    * @param sn    * @return Server's load or null if not found.    */
specifier|public
name|ServerLoad
name|getLoad
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
block|{
return|return
name|liveServers
operator|!=
literal|null
condition|?
name|liveServers
operator|.
name|get
argument_list|(
name|sn
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
name|List
argument_list|<
name|RegionState
argument_list|>
name|getRegionsInTransition
parameter_list|()
block|{
return|return
name|this
operator|.
name|intransition
return|;
block|}
specifier|public
name|String
name|getClusterId
parameter_list|()
block|{
return|return
name|clusterId
return|;
block|}
specifier|public
name|String
index|[]
name|getMasterCoprocessors
parameter_list|()
block|{
return|return
name|masterCoprocessors
return|;
block|}
specifier|public
name|long
name|getLastMajorCompactionTsForTable
parameter_list|(
name|TableName
name|table
parameter_list|)
block|{
name|long
name|result
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|getServers
argument_list|()
control|)
block|{
name|ServerLoad
name|load
init|=
name|getLoad
argument_list|(
name|server
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionLoad
name|rl
range|:
name|load
operator|.
name|getRegionsLoad
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|table
operator|.
name|equals
argument_list|(
name|HRegionInfo
operator|.
name|getTable
argument_list|(
name|rl
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|Math
operator|.
name|min
argument_list|(
name|result
argument_list|,
name|rl
operator|.
name|getLastMajorCompactionTs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|?
literal|0
else|:
name|result
return|;
block|}
specifier|public
name|long
name|getLastMajorCompactionTsForRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|region
parameter_list|)
block|{
for|for
control|(
name|ServerName
name|server
range|:
name|getServers
argument_list|()
control|)
block|{
name|ServerLoad
name|load
init|=
name|getLoad
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|RegionLoad
name|rl
init|=
name|load
operator|.
name|getRegionsLoad
argument_list|()
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|rl
operator|!=
literal|null
condition|)
block|{
return|return
name|rl
operator|.
name|getLastMajorCompactionTs
argument_list|()
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|boolean
name|isBalancerOn
parameter_list|()
block|{
return|return
name|balancerOn
operator|!=
literal|null
operator|&&
name|balancerOn
return|;
block|}
specifier|public
name|Boolean
name|getBalancerOn
parameter_list|()
block|{
return|return
name|balancerOn
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Master: "
operator|+
name|master
argument_list|)
expr_stmt|;
name|int
name|backupMastersSize
init|=
name|getBackupMastersSize
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nNumber of backup masters: "
operator|+
name|backupMastersSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|backupMastersSize
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ServerName
name|serverName
range|:
name|backupMasters
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n  "
operator|+
name|serverName
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|serversSize
init|=
name|getServersSize
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nNumber of live region servers: "
operator|+
name|serversSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|serversSize
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ServerName
name|serverName
range|:
name|liveServers
operator|.
name|keySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n  "
operator|+
name|serverName
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|deadServerSize
init|=
name|getDeadServersSize
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nNumber of dead region servers: "
operator|+
name|deadServerSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|deadServerSize
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ServerName
name|serverName
range|:
name|deadServers
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n  "
operator|+
name|serverName
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\nAverage load: "
operator|+
name|getAverageLoad
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nNumber of requests: "
operator|+
name|getRequestsCount
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nNumber of regions: "
operator|+
name|getRegionsCount
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|ritSize
init|=
operator|(
name|intransition
operator|!=
literal|null
operator|)
condition|?
name|intransition
operator|.
name|size
argument_list|()
else|:
literal|0
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nNumber of regions in transition: "
operator|+
name|ritSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|ritSize
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|RegionState
name|state
range|:
name|intransition
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n  "
operator|+
name|state
operator|.
name|toDescriptiveString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**    * Builder for construct a ClusterStatus.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|String
name|hbaseVersion
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerLoad
argument_list|>
name|liveServers
init|=
literal|null
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|deadServers
init|=
literal|null
decl_stmt|;
specifier|private
name|ServerName
name|master
init|=
literal|null
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|backupMasters
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RegionState
argument_list|>
name|intransition
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|clusterId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
index|[]
name|masterCoprocessors
init|=
literal|null
decl_stmt|;
specifier|private
name|Boolean
name|balancerOn
init|=
literal|null
decl_stmt|;
specifier|private
name|Builder
parameter_list|()
block|{}
specifier|public
name|Builder
name|setHBaseVersion
parameter_list|(
name|String
name|hbaseVersion
parameter_list|)
block|{
name|this
operator|.
name|hbaseVersion
operator|=
name|hbaseVersion
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setLiveServers
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerLoad
argument_list|>
name|liveServers
parameter_list|)
block|{
name|this
operator|.
name|liveServers
operator|=
name|liveServers
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setDeadServers
parameter_list|(
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|deadServers
parameter_list|)
block|{
name|this
operator|.
name|deadServers
operator|=
name|deadServers
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setMaster
parameter_list|(
name|ServerName
name|master
parameter_list|)
block|{
name|this
operator|.
name|master
operator|=
name|master
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setBackupMasters
parameter_list|(
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|backupMasters
parameter_list|)
block|{
name|this
operator|.
name|backupMasters
operator|=
name|backupMasters
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setRegionState
parameter_list|(
name|List
argument_list|<
name|RegionState
argument_list|>
name|intransition
parameter_list|)
block|{
name|this
operator|.
name|intransition
operator|=
name|intransition
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setClusterId
parameter_list|(
name|String
name|clusterId
parameter_list|)
block|{
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setMasterCoprocessors
parameter_list|(
name|String
index|[]
name|masterCoprocessors
parameter_list|)
block|{
name|this
operator|.
name|masterCoprocessors
operator|=
name|masterCoprocessors
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setBalancerOn
parameter_list|(
name|Boolean
name|balancerOn
parameter_list|)
block|{
name|this
operator|.
name|balancerOn
operator|=
name|balancerOn
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ClusterStatus
name|build
parameter_list|()
block|{
return|return
operator|new
name|ClusterStatus
argument_list|(
name|hbaseVersion
argument_list|,
name|clusterId
argument_list|,
name|liveServers
argument_list|,
name|deadServers
argument_list|,
name|master
argument_list|,
name|backupMasters
argument_list|,
name|intransition
argument_list|,
name|masterCoprocessors
argument_list|,
name|balancerOn
argument_list|)
return|;
block|}
block|}
comment|/**    * Kinds of ClusterStatus    */
specifier|public
enum|enum
name|Option
block|{
name|HBASE_VERSION
block|,
comment|/** status about hbase version */
name|CLUSTER_ID
block|,
comment|/** status about cluster id */
name|BALANCER_ON
block|,
comment|/** status about balancer is on or not */
name|LIVE_SERVERS
block|,
comment|/** status about live region servers */
name|DEAD_SERVERS
block|,
comment|/** status about dead region servers */
name|MASTER
block|,
comment|/** status about master */
name|BACKUP_MASTERS
block|,
comment|/** status about backup masters */
name|MASTER_COPROCESSORS
block|,
comment|/** status about master coprocessors */
name|REGIONS_IN_TRANSITION
block|;
comment|/** status about regions in transition */
block|}
block|}
end_class

end_unit

