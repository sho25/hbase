begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotEnabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Implementations make a RPC call against a RegionService via a protobuf Service.  * Implement rpcCall() and the parent class setClientByServiceName; this latter is where the  * RPC stub gets set (the appropriate protobuf 'Service'/Client). Be sure to make use of the  * RpcController that this instance is carrying via #getRpcController().  *  *<p>TODO: this class is actually tied to one region, because most of the paths make use of  *       the regioninfo part of location when building requests. The only reason it works for  *       multi-region requests (e.g. batch) is that they happen to not use the region parts.  *       This could be done cleaner (e.g. having a generic parameter and 2 derived classes,  *       RegionCallable and actual RegionServerCallable with ServerName.  *  * @param<T> The class that the ServerCallable handles.  * @param<S> The protocol to use (Admin or Client or even an Endpoint over in MetaTableAccessor).  */
end_comment

begin_comment
comment|// TODO: MasterCallable and this Class have a lot in common. UNIFY!
end_comment

begin_comment
comment|// Public but should be package private only it is used by MetaTableAccessor. FIX!!
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|RegionServerCallable
parameter_list|<
name|T
parameter_list|,
name|S
parameter_list|>
implements|implements
name|RetryingCallable
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|Connection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|row
decl_stmt|;
comment|/**    * Some subclasses want to set their own location. Make it protected.    */
specifier|protected
name|HRegionLocation
name|location
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|MIN_WAIT_DEAD_SERVER
init|=
literal|10000
decl_stmt|;
specifier|protected
name|S
name|stub
decl_stmt|;
comment|/**    * This is 99% of the time a HBaseRpcController but also used doing Coprocessor Endpoints and in    * this case, it is a ServerRpcControllable which is not a HBaseRpcController.    * Can be null!    */
specifier|protected
specifier|final
name|RpcController
name|rpcController
decl_stmt|;
comment|/**    * @param connection Connection to use.    * @param rpcController Controller to use; can be shaded or non-shaded.    * @param tableName Table name to which<code>row</code> belongs.    * @param row The row we want in<code>tableName</code>.    */
specifier|public
name|RegionServerCallable
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|RpcController
name|rpcController
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|rpcController
operator|=
name|rpcController
expr_stmt|;
block|}
specifier|protected
name|RpcController
name|getRpcController
parameter_list|()
block|{
return|return
name|this
operator|.
name|rpcController
return|;
block|}
specifier|protected
name|void
name|setStub
parameter_list|(
name|S
name|stub
parameter_list|)
block|{
name|this
operator|.
name|stub
operator|=
name|stub
expr_stmt|;
block|}
specifier|protected
name|S
name|getStub
parameter_list|()
block|{
return|return
name|this
operator|.
name|stub
return|;
block|}
comment|/**    * Override that changes call Exception from {@link Exception} to {@link IOException}.    * Also does set up of the rpcController.    */
specifier|public
name|T
name|call
parameter_list|(
name|int
name|callTimeout
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// Iff non-null and an instance of a SHADED rpcController, do config! Unshaded -- i.e.
comment|// com.google.protobuf.RpcController or null -- will just skip over this config.
if|if
condition|(
name|getRpcController
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RpcController
name|shadedRpcController
init|=
operator|(
name|RpcController
operator|)
name|getRpcController
argument_list|()
decl_stmt|;
comment|// Do a reset to clear previous states, such as CellScanner.
name|shadedRpcController
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|shadedRpcController
operator|instanceof
name|HBaseRpcController
condition|)
block|{
name|HBaseRpcController
name|hrc
init|=
operator|(
name|HBaseRpcController
operator|)
name|getRpcController
argument_list|()
decl_stmt|;
comment|// If it is an instance of HBaseRpcController, we can set priority on the controller based
comment|// off the tableName. Set call timeout too.
name|hrc
operator|.
name|setPriority
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|hrc
operator|.
name|setCallTimeout
argument_list|(
name|callTimeout
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rpcCall
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|handleRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Run the RPC call. Implement this method. To get at the rpcController that has been created    * and configured to make this rpc call, use getRpcController(). We are trying to contain    * rpcController references so we don't pollute codebase with protobuf references; keep the    * protobuf references contained and only present in a few classes rather than all about the    * code base.    * @throws Exception    */
specifier|protected
specifier|abstract
name|T
name|rpcCall
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**    * Get the RpcController CellScanner.    * If the RpcController is a HBaseRpcController, which it is in all cases except    * when we are processing Coprocessor Endpoint, then this method returns a reference to the    * CellScanner that the HBaseRpcController is carrying. Do it up here in this Callable    * so we don't have to scatter ugly instanceof tests around the codebase. Will return null    * if called in a Coproccessor Endpoint context. Should never happen.    */
specifier|protected
name|CellScanner
name|getRpcControllerCellScanner
parameter_list|()
block|{
return|return
operator|(
name|getRpcController
argument_list|()
operator|!=
literal|null
operator|&&
name|getRpcController
argument_list|()
operator|instanceof
name|HBaseRpcController
operator|)
condition|?
operator|(
operator|(
name|HBaseRpcController
operator|)
name|getRpcController
argument_list|()
operator|)
operator|.
name|cellScanner
argument_list|()
else|:
literal|null
return|;
block|}
specifier|protected
name|void
name|setRpcControllerCellScanner
parameter_list|(
name|CellScanner
name|cellScanner
parameter_list|)
block|{
if|if
condition|(
name|getRpcController
argument_list|()
operator|!=
literal|null
operator|&&
name|getRpcController
argument_list|()
operator|instanceof
name|HBaseRpcController
condition|)
block|{
operator|(
operator|(
name|HBaseRpcController
operator|)
name|this
operator|.
name|rpcController
operator|)
operator|.
name|setCellScanner
argument_list|(
name|cellScanner
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return {@link ClusterConnection} instance used by this Callable.    */
specifier|protected
name|ClusterConnection
name|getConnection
parameter_list|()
block|{
return|return
operator|(
name|ClusterConnection
operator|)
name|this
operator|.
name|connection
return|;
block|}
specifier|protected
name|HRegionLocation
name|getLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|location
return|;
block|}
specifier|protected
name|void
name|setLocation
parameter_list|(
specifier|final
name|HRegionLocation
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
return|;
block|}
specifier|public
name|byte
index|[]
name|getRow
parameter_list|()
block|{
return|return
name|this
operator|.
name|row
return|;
block|}
specifier|public
name|void
name|throwable
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|boolean
name|retrying
parameter_list|)
block|{
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|getConnection
argument_list|()
operator|.
name|updateCachedLocations
argument_list|(
name|tableName
argument_list|,
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|row
argument_list|,
name|t
argument_list|,
name|location
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getExceptionMessageAdditionalDetail
parameter_list|()
block|{
return|return
literal|"row '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"' on table '"
operator|+
name|tableName
operator|+
literal|"' at "
operator|+
name|location
return|;
block|}
specifier|public
name|long
name|sleep
parameter_list|(
name|long
name|pause
parameter_list|,
name|int
name|tries
parameter_list|)
block|{
name|long
name|sleep
init|=
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
name|pause
argument_list|,
name|tries
argument_list|)
decl_stmt|;
if|if
condition|(
name|sleep
operator|<
name|MIN_WAIT_DEAD_SERVER
operator|&&
operator|(
name|location
operator|==
literal|null
operator|||
name|getConnection
argument_list|()
operator|.
name|isDeadServer
argument_list|(
name|location
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|sleep
operator|=
name|ConnectionUtils
operator|.
name|addJitter
argument_list|(
name|MIN_WAIT_DEAD_SERVER
argument_list|,
literal|0.10f
argument_list|)
expr_stmt|;
block|}
return|return
name|sleep
return|;
block|}
comment|/**    * @return the HRegionInfo for the current region    */
specifier|public
name|HRegionInfo
name|getHRegionInfo
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|location
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|this
operator|.
name|location
operator|.
name|getRegionInfo
argument_list|()
return|;
block|}
specifier|public
name|void
name|prepare
parameter_list|(
specifier|final
name|boolean
name|reload
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check table state if this is a retry
if|if
condition|(
name|reload
operator|&&
name|tableName
operator|!=
literal|null
operator|&&
operator|!
name|tableName
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|&&
name|getConnection
argument_list|()
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableNotEnabledException
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" is disabled."
argument_list|)
throw|;
block|}
try|try
init|(
name|RegionLocator
name|regionLocator
init|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|this
operator|.
name|location
operator|=
name|regionLocator
operator|.
name|getRegionLocation
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|location
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to find location, tableName="
operator|+
name|tableName
operator|+
literal|", row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|", reload="
operator|+
name|reload
argument_list|)
throw|;
block|}
name|setStubByServiceName
argument_list|(
name|this
operator|.
name|location
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the RCP client stub    * @param serviceName to get the rpc stub for    * @throws IOException When client could not be created    */
specifier|protected
specifier|abstract
name|void
name|setStubByServiceName
parameter_list|(
name|ServerName
name|serviceName
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

