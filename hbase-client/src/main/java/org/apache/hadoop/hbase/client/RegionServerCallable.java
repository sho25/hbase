begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_comment
comment|/**  * Implementations make an rpc call against a RegionService via a protobuf Service.  * Implement rpcCall(). Be sure to make use of the RpcController that this instance is carrying  * via {@link #getRpcController()}.  *  *<p>TODO: this class is actually tied to one region, because most of the paths make use of  *       the regioninfo part of location when building requests. The only reason it works for  *       multi-region requests (e.g. batch) is that they happen to not use the region parts.  *       This could be done cleaner (e.g. having a generic parameter and 2 derived classes,  *       RegionCallable and actual RegionServerCallable with ServerName.  *  * @param<T> the class that the ServerCallable handles  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|RegionServerCallable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractRegionServerCallable
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|ClientService
operator|.
name|BlockingInterface
name|stub
decl_stmt|;
comment|/* This is 99% of the time a PayloadCarryingRpcController but this RegionServerCallable is    * also used doing Coprocessor Endpoints and in this case, it is a ServerRpcControllable which is    * not a PayloadCarryingRpcController. Too hard to untangle it all at this stage since    * downstreamers are using RegionServerCallable invoking CPEPs so just do ugly instanceof    * checks in the below.    */
specifier|private
specifier|final
name|RpcController
name|rpcController
decl_stmt|;
comment|/**    * @param connection Connection to use.    * @param tableName Table name to which<code>row</code> belongs.    * @param row The row we want in<code>tableName</code>.    */
specifier|public
name|RegionServerCallable
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RpcControllerFactory
name|rpcControllerFactory
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
name|this
argument_list|(
name|connection
argument_list|,
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RegionServerCallable
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RpcController
name|rpcController
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcController
operator|=
name|rpcController
expr_stmt|;
block|}
name|void
name|setClientByServiceName
parameter_list|(
name|ServerName
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|setStub
argument_list|(
name|getConnection
argument_list|()
operator|.
name|getClient
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return Client Rpc protobuf communication stub    */
specifier|protected
name|ClientService
operator|.
name|BlockingInterface
name|getStub
parameter_list|()
block|{
return|return
name|this
operator|.
name|stub
return|;
block|}
comment|/**    * Set the client protobuf communication stub    * @param stub to set    */
name|void
name|setStub
parameter_list|(
specifier|final
name|ClientService
operator|.
name|BlockingInterface
name|stub
parameter_list|)
block|{
name|this
operator|.
name|stub
operator|=
name|stub
expr_stmt|;
block|}
comment|/**    * Override that changes call Exception from {@link Exception} to {@link IOException}. It also    * does setup of an rpcController and calls through to the unimplemented    * rpcCall() method. If rpcController is an instance of PayloadCarryingRpcController,    * we will set a timeout on it.    */
annotation|@
name|Override
specifier|public
name|T
name|call
parameter_list|(
name|int
name|callTimeout
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|this
operator|.
name|rpcController
operator|!=
literal|null
condition|)
block|{
comment|// Do a reset to clear previous states, such as CellScanner.
name|this
operator|.
name|rpcController
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rpcController
operator|instanceof
name|HBaseRpcController
condition|)
block|{
name|HBaseRpcController
name|pcrc
init|=
operator|(
name|HBaseRpcController
operator|)
name|this
operator|.
name|rpcController
decl_stmt|;
comment|// If it is an instance of PayloadCarryingRpcController, we can set priority on the
comment|// controller based off the tableName. RpcController may be null in tests when mocking so allow
comment|// for null controller.
name|pcrc
operator|.
name|setPriority
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|pcrc
operator|.
name|setCallTimeout
argument_list|(
name|callTimeout
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rpcCall
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|handleRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Run the RPC call. Implement this method. To get at the rpcController that has been created    * and configured to make this rpc call, use getRpcController(). We are trying to contain    * rpcController references so we don't pollute codebase with protobuf references; keep the    * protobuf references contained and only present in a few classes rather than all about the    * code base.    * @throws Exception    */
specifier|protected
specifier|abstract
name|T
name|rpcCall
parameter_list|()
throws|throws
name|Exception
function_decl|;
specifier|protected
name|RpcController
name|getRpcController
parameter_list|()
block|{
return|return
name|this
operator|.
name|rpcController
return|;
block|}
comment|/**    * Get the RpcController CellScanner.    * If the RpcController is a PayloadCarryingRpcController, which it is in all cases except    * when we are processing Coprocessor Endpoint, then this method returns a reference to the    * CellScanner that the PayloadCarryingRpcController is carrying. Do it up here in this Callable    * so we don't have to scatter ugly instanceof tests around the codebase. Will fail if called in    * a Coproccessor Endpoint context. Should never happen.    */
specifier|protected
name|CellScanner
name|getRpcControllerCellScanner
parameter_list|()
block|{
return|return
operator|(
operator|(
name|HBaseRpcController
operator|)
name|this
operator|.
name|rpcController
operator|)
operator|.
name|cellScanner
argument_list|()
return|;
block|}
specifier|protected
name|void
name|setRpcControllerCellScanner
parameter_list|(
name|CellScanner
name|cellScanner
parameter_list|)
block|{
operator|(
operator|(
name|HBaseRpcController
operator|)
name|this
operator|.
name|rpcController
operator|)
operator|.
name|setCellScanner
argument_list|(
name|cellScanner
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

