begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * A configuration for the replication peer cluster.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
class|class
name|ReplicationPeerConfig
block|{
specifier|private
name|String
name|clusterKey
decl_stmt|;
specifier|private
name|String
name|replicationEndpointImpl
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|peerData
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configuration
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|TableName
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCFsMap
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|bandwidth
init|=
literal|0
decl_stmt|;
specifier|public
name|ReplicationPeerConfig
parameter_list|()
block|{
name|this
operator|.
name|peerData
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the clusterKey which is the concatenation of the slave cluster's:    *          hbase.zookeeper.quorum:hbase.zookeeper.property.clientPort:zookeeper.znode.parent    */
specifier|public
name|ReplicationPeerConfig
name|setClusterKey
parameter_list|(
name|String
name|clusterKey
parameter_list|)
block|{
name|this
operator|.
name|clusterKey
operator|=
name|clusterKey
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Sets the ReplicationEndpoint plugin class for this peer.    * @param replicationEndpointImpl a class implementing ReplicationEndpoint    */
specifier|public
name|ReplicationPeerConfig
name|setReplicationEndpointImpl
parameter_list|(
name|String
name|replicationEndpointImpl
parameter_list|)
block|{
name|this
operator|.
name|replicationEndpointImpl
operator|=
name|replicationEndpointImpl
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|getClusterKey
parameter_list|()
block|{
return|return
name|clusterKey
return|;
block|}
specifier|public
name|String
name|getReplicationEndpointImpl
parameter_list|()
block|{
return|return
name|replicationEndpointImpl
return|;
block|}
specifier|public
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|getPeerData
parameter_list|()
block|{
return|return
name|peerData
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
specifier|public
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getTableCFsMap
parameter_list|()
block|{
return|return
operator|(
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|tableCFsMap
return|;
block|}
specifier|public
name|ReplicationPeerConfig
name|setTableCFsMap
parameter_list|(
name|Map
argument_list|<
name|TableName
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCFsMap
parameter_list|)
block|{
name|this
operator|.
name|tableCFsMap
operator|=
name|tableCFsMap
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNamespaces
parameter_list|()
block|{
return|return
name|this
operator|.
name|namespaces
return|;
block|}
specifier|public
name|ReplicationPeerConfig
name|setNamespaces
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
parameter_list|)
block|{
name|this
operator|.
name|namespaces
operator|=
name|namespaces
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|long
name|getBandwidth
parameter_list|()
block|{
return|return
name|this
operator|.
name|bandwidth
return|;
block|}
specifier|public
name|ReplicationPeerConfig
name|setBandwidth
parameter_list|(
name|long
name|bandwidth
parameter_list|)
block|{
name|this
operator|.
name|bandwidth
operator|=
name|bandwidth
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"clusterKey="
argument_list|)
operator|.
name|append
argument_list|(
name|clusterKey
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"replicationEndpointImpl="
argument_list|)
operator|.
name|append
argument_list|(
name|replicationEndpointImpl
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
if|if
condition|(
name|namespaces
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"namespaces="
argument_list|)
operator|.
name|append
argument_list|(
name|namespaces
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tableCFsMap
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"tableCFs="
argument_list|)
operator|.
name|append
argument_list|(
name|tableCFsMap
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"bandwidth="
argument_list|)
operator|.
name|append
argument_list|(
name|bandwidth
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Decide whether the table need replicate to the peer cluster    * @param table name of the table    * @return true if the table need replicate to the peer cluster    */
specifier|public
name|boolean
name|needToReplicate
parameter_list|(
name|TableName
name|table
parameter_list|)
block|{
comment|// If null means user has explicitly not configured any namespaces and table CFs
comment|// so all the tables data are applicable for replication
if|if
condition|(
name|namespaces
operator|==
literal|null
operator|&&
name|tableCFsMap
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|namespaces
operator|!=
literal|null
operator|&&
name|namespaces
operator|.
name|contains
argument_list|(
name|table
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|tableCFsMap
operator|!=
literal|null
operator|&&
name|tableCFsMap
operator|.
name|containsKey
argument_list|(
name|table
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

