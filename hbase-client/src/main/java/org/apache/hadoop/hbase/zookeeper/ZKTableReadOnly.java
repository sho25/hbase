begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Non-instantiable class that provides helper functions for  * clients other than AssignmentManager for reading the  * state of a table in ZK.  *  *<p>Does not cache state like {@link ZKTable}, actually reads from ZK each call.  */
end_comment

begin_class
specifier|public
class|class
name|ZKTableReadOnly
block|{
specifier|private
name|ZKTableReadOnly
parameter_list|()
block|{}
comment|/**    * Go to zookeeper and see if state of table is {@code ZooKeeperProtos.Table.State#DISABLED}.    * This method does not use cache.    * This method is for clients other than AssignmentManager    * @param zkw    * @param tableName    * @return True if table is enabled.    * @throws KeeperException    */
specifier|public
specifier|static
name|boolean
name|isDisabledTable
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|KeeperException
block|{
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|state
init|=
name|getTableState
argument_list|(
name|zkw
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
return|return
name|isTableState
argument_list|(
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|DISABLED
argument_list|,
name|state
argument_list|)
return|;
block|}
comment|/**    * Go to zookeeper and see if state of table is {@code ZooKeeperProtos.Table.State#ENABLED}.    * This method does not use cache.    * This method is for clients other than AssignmentManager    * @param zkw    * @param tableName    * @return True if table is enabled.    * @throws KeeperException    */
specifier|public
specifier|static
name|boolean
name|isEnabledTable
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|KeeperException
block|{
return|return
name|getTableState
argument_list|(
name|zkw
argument_list|,
name|tableName
argument_list|)
operator|==
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|ENABLED
return|;
block|}
comment|/**    * Go to zookeeper and see if state of table is {@code ZooKeeperProtos.Table.State#DISABLING}    * of {@code ZooKeeperProtos.Table.State#DISABLED}.    * This method does not use cache.    * This method is for clients other than AssignmentManager.    * @param zkw    * @param tableName    * @return True if table is enabled.    * @throws KeeperException    */
specifier|public
specifier|static
name|boolean
name|isDisablingOrDisabledTable
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|KeeperException
block|{
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|state
init|=
name|getTableState
argument_list|(
name|zkw
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
return|return
name|isTableState
argument_list|(
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|DISABLING
argument_list|,
name|state
argument_list|)
operator|||
name|isTableState
argument_list|(
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|DISABLED
argument_list|,
name|state
argument_list|)
return|;
block|}
comment|/**    * Gets a list of all the tables set as disabled in zookeeper.    * @return Set of disabled tables, empty Set if none    * @throws KeeperException    */
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getDisabledTables
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|)
throws|throws
name|KeeperException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|disabledTables
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|tableZNode
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|state
init|=
name|getTableState
argument_list|(
name|zkw
argument_list|,
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|DISABLED
condition|)
name|disabledTables
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|disabledTables
return|;
block|}
comment|/**    * Gets a list of all the tables set as disabled in zookeeper.    * @return Set of disabled tables, empty Set if none    * @throws KeeperException    */
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getDisabledOrDisablingTables
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|)
throws|throws
name|KeeperException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|disabledTables
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|tableZNode
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|state
init|=
name|getTableState
argument_list|(
name|zkw
argument_list|,
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|DISABLED
operator|||
name|state
operator|==
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|DISABLING
condition|)
name|disabledTables
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|disabledTables
return|;
block|}
specifier|static
name|boolean
name|isTableState
parameter_list|(
specifier|final
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|expectedState
parameter_list|,
specifier|final
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|currentState
parameter_list|)
block|{
return|return
name|currentState
operator|!=
literal|null
operator|&&
name|currentState
operator|.
name|equals
argument_list|(
name|expectedState
argument_list|)
return|;
block|}
comment|/**    * @param zkw    * @param child    * @return Null or {@link ZooKeeperProtos.Table.State} found in znode.    * @throws KeeperException    */
specifier|static
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
name|getTableState
parameter_list|(
specifier|final
name|ZooKeeperWatcher
name|zkw
parameter_list|,
specifier|final
name|String
name|child
parameter_list|)
throws|throws
name|KeeperException
block|{
name|String
name|znode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|tableZNode
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|znode
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
operator|<=
literal|0
condition|)
return|return
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|ENABLED
return|;
try|try
block|{
name|ProtobufUtil
operator|.
name|expectPBMagicPrefix
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|Builder
name|builder
init|=
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|int
name|magicLen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|Table
name|t
init|=
name|builder
operator|.
name|mergeFrom
argument_list|(
name|data
argument_list|,
name|magicLen
argument_list|,
name|data
operator|.
name|length
operator|-
name|magicLen
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|t
operator|.
name|getState
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|KeeperException
name|ke
init|=
operator|new
name|KeeperException
operator|.
name|DataInconsistencyException
argument_list|()
decl_stmt|;
name|ke
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ke
throw|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
name|ZKUtil
operator|.
name|convert
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

