begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncProcess
operator|.
name|RowChecker
operator|.
name|ReturnCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_comment
comment|/**  * This class  allows a continuous flow of requests. It's written to be compatible with a  * synchronous caller such as HTable.  *<p>  * The caller sends a buffer of operation, by calling submit. This class extract from this list  * the operations it can send, i.e. the operations that are on region that are not considered  * as busy. The process is asynchronous, i.e. it returns immediately when if has finished to  * iterate on the list. If, and only if, the maximum number of current task is reached, the call  * to submit will block. Alternatively, the caller can call submitAll, in which case all the  * operations will be sent. Each call to submit returns a future-like object that can be used  * to track operation progress.  *</p>  *<p>  * The class manages internally the retries.  *</p>  *<p>  * The class can be constructed in regular mode, or "global error" mode. In global error mode,  * AP tracks errors across all calls (each "future" also has global view of all errors). That  * mode is necessary for backward compat with HTable behavior, where multiple submissions are  * made and the errors can propagate using any put/flush call, from previous calls.  * In "regular" mode, the errors are tracked inside the Future object that is returned.  * The results are always tracked inside the Future object and can be retrieved when the call  * has finished. Partial results can also be retrieved if some part of multi-request failed.  *</p>  *<p>  * This class is thread safe in regular mode; in global error code, submitting operations and  * retrieving errors from different threads may be not thread safe.  * Internally, the class is thread safe enough to manage simultaneously new submission and results  * arising from older operations.  *</p>  *<p>  * Internally, this class works with {@link Row}, this mean it could be theoretically used for  * gets as well.  *</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|AsyncProcess
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AsyncProcess
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|AtomicLong
name|COUNTER
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PRIMARY_CALL_TIMEOUT_KEY
init|=
literal|"hbase.client.primaryCallTimeout.multiget"
decl_stmt|;
comment|/**    * Configure the number of failures after which the client will start logging. A few failures    * is fine: region moved, then is not opened, then is overloaded. We try to have an acceptable    * heuristic for the number of errors we don't log. 9 was chosen because we wait for 1s at    * this stage.    */
specifier|public
specifier|static
specifier|final
name|String
name|START_LOG_ERRORS_AFTER_COUNT_KEY
init|=
literal|"hbase.client.start.log.errors.counter"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_START_LOG_ERRORS_AFTER_COUNT
init|=
literal|9
decl_stmt|;
comment|/**    * Configuration to decide whether to log details for batch error    */
specifier|public
specifier|static
specifier|final
name|String
name|LOG_DETAILS_FOR_BATCH_ERROR
init|=
literal|"hbase.client.log.batcherrors.details"
decl_stmt|;
specifier|protected
specifier|final
name|int
name|thresholdToLogUndoneTaskDetails
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|THRESHOLD_TO_LOG_UNDONE_TASK_DETAILS
init|=
literal|"hbase.client.threshold.log.details"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_THRESHOLD_TO_LOG_UNDONE_TASK_DETAILS
init|=
literal|10
decl_stmt|;
specifier|private
specifier|final
name|int
name|THRESHOLD_TO_LOG_REGION_DETAILS
init|=
literal|2
decl_stmt|;
comment|/**    * The maximum size of single RegionServer.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_MAX_PERREQUEST_HEAPSIZE
init|=
literal|"hbase.client.max.perrequest.heapsize"
decl_stmt|;
comment|/**    * Default value of #HBASE_CLIENT_MAX_PERREQUEST_HEAPSIZE    */
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_HBASE_CLIENT_MAX_PERREQUEST_HEAPSIZE
init|=
literal|4194304
decl_stmt|;
comment|/**    * The maximum size of submit.    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_CLIENT_MAX_SUBMIT_HEAPSIZE
init|=
literal|"hbase.client.max.submit.heapsize"
decl_stmt|;
comment|/**    * Default value of #HBASE_CLIENT_MAX_SUBMIT_HEAPSIZE    */
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_HBASE_CLIENT_MAX_SUBMIT_HEAPSIZE
init|=
name|DEFAULT_HBASE_CLIENT_MAX_PERREQUEST_HEAPSIZE
decl_stmt|;
comment|/**    * Return value from a submit that didn't contain any requests.    */
specifier|private
specifier|static
specifier|final
name|AsyncRequestFuture
name|NO_REQS_RESULT
init|=
operator|new
name|AsyncRequestFuture
argument_list|()
block|{
specifier|final
name|Object
index|[]
name|result
init|=
operator|new
name|Object
index|[
literal|0
index|]
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasError
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|RetriesExhaustedWithDetailsException
name|getErrors
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|getFailedOperations
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|getResults
parameter_list|()
block|{
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|waitUntilDone
parameter_list|()
throws|throws
name|InterruptedIOException
block|{     }
block|}
decl_stmt|;
comment|// TODO: many of the fields should be made private
specifier|protected
specifier|final
name|long
name|id
decl_stmt|;
specifier|protected
specifier|final
name|ClusterConnection
name|connection
decl_stmt|;
specifier|protected
specifier|final
name|RpcRetryingCallerFactory
name|rpcCallerFactory
decl_stmt|;
specifier|protected
specifier|final
name|RpcControllerFactory
name|rpcFactory
decl_stmt|;
specifier|protected
specifier|final
name|BatchErrors
name|globalErrors
decl_stmt|;
specifier|protected
specifier|final
name|ExecutorService
name|pool
decl_stmt|;
specifier|protected
specifier|final
name|AtomicLong
name|tasksInProgress
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|ConcurrentMap
argument_list|<
name|byte
index|[]
argument_list|,
name|AtomicInteger
argument_list|>
name|taskCounterPerRegion
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|byte
index|[]
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|ConcurrentMap
argument_list|<
name|ServerName
argument_list|,
name|AtomicInteger
argument_list|>
name|taskCounterPerServer
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ServerName
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|()
decl_stmt|;
comment|// Start configuration settings.
specifier|protected
specifier|final
name|int
name|startLogErrorsCnt
decl_stmt|;
comment|/**    * The number of tasks simultaneously executed on the cluster.    */
specifier|protected
specifier|final
name|int
name|maxTotalConcurrentTasks
decl_stmt|;
comment|/**    * The max heap size of all tasks simultaneously executed on a server.    */
specifier|protected
specifier|final
name|long
name|maxHeapSizePerRequest
decl_stmt|;
specifier|protected
specifier|final
name|long
name|maxHeapSizeSubmit
decl_stmt|;
comment|/**    * The number of tasks we run in parallel on a single region.    * With 1 (the default) , we ensure that the ordering of the queries is respected: we don't start    * a set of operations on a region before the previous one is done. As well, this limits    * the pressure we put on the region server.    */
specifier|protected
specifier|final
name|int
name|maxConcurrentTasksPerRegion
decl_stmt|;
comment|/**    * The number of task simultaneously executed on a single region server.    */
specifier|protected
specifier|final
name|int
name|maxConcurrentTasksPerServer
decl_stmt|;
specifier|protected
specifier|final
name|long
name|pause
decl_stmt|;
specifier|protected
specifier|final
name|long
name|pauseForCQTBE
decl_stmt|;
comment|// pause for CallQueueTooBigException, if specified
specifier|protected
name|int
name|numTries
decl_stmt|;
specifier|protected
name|int
name|serverTrackerTimeout
decl_stmt|;
specifier|protected
name|int
name|rpcTimeout
decl_stmt|;
specifier|protected
name|int
name|operationTimeout
decl_stmt|;
specifier|protected
name|long
name|primaryCallTimeoutMicroseconds
decl_stmt|;
comment|/** Whether to log details for batch errors */
specifier|protected
specifier|final
name|boolean
name|logBatchErrorDetails
decl_stmt|;
comment|// End configuration settings.
specifier|public
name|AsyncProcess
parameter_list|(
name|ClusterConnection
name|hc
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|RpcRetryingCallerFactory
name|rpcCaller
parameter_list|,
name|boolean
name|useGlobalErrors
parameter_list|,
name|RpcControllerFactory
name|rpcFactory
parameter_list|,
name|int
name|rpcTimeout
parameter_list|,
name|int
name|operationTimeout
parameter_list|)
block|{
if|if
condition|(
name|hc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ClusterConnection cannot be null."
argument_list|)
throw|;
block|}
name|this
operator|.
name|connection
operator|=
name|hc
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|globalErrors
operator|=
name|useGlobalErrors
condition|?
operator|new
name|BatchErrors
argument_list|()
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|COUNTER
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|this
operator|.
name|pause
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_PAUSE
argument_list|)
expr_stmt|;
name|long
name|configuredPauseForCQTBE
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE_FOR_CQTBE
argument_list|,
name|pause
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuredPauseForCQTBE
operator|<
name|pause
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The "
operator|+
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE_FOR_CQTBE
operator|+
literal|" setting: "
operator|+
name|configuredPauseForCQTBE
operator|+
literal|" is smaller than "
operator|+
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
operator|+
literal|", will use "
operator|+
name|pause
operator|+
literal|" instead."
argument_list|)
expr_stmt|;
name|this
operator|.
name|pauseForCQTBE
operator|=
name|pause
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|pauseForCQTBE
operator|=
name|configuredPauseForCQTBE
expr_stmt|;
block|}
comment|// how many times we could try in total, one more than retry number
name|this
operator|.
name|numTries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_RETRIES_NUMBER
argument_list|)
operator|+
literal|1
expr_stmt|;
name|this
operator|.
name|rpcTimeout
operator|=
name|rpcTimeout
expr_stmt|;
name|this
operator|.
name|operationTimeout
operator|=
name|operationTimeout
expr_stmt|;
name|this
operator|.
name|primaryCallTimeoutMicroseconds
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|PRIMARY_CALL_TIMEOUT_KEY
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxTotalConcurrentTasks
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_MAX_TOTAL_TASKS
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_MAX_TOTAL_TASKS
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxConcurrentTasksPerServer
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_MAX_PERSERVER_TASKS
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_MAX_PERSERVER_TASKS
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxConcurrentTasksPerRegion
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_MAX_PERREGION_TASKS
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_MAX_PERREGION_TASKS
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxHeapSizePerRequest
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HBASE_CLIENT_MAX_PERREQUEST_HEAPSIZE
argument_list|,
name|DEFAULT_HBASE_CLIENT_MAX_PERREQUEST_HEAPSIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxHeapSizeSubmit
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HBASE_CLIENT_MAX_SUBMIT_HEAPSIZE
argument_list|,
name|DEFAULT_HBASE_CLIENT_MAX_SUBMIT_HEAPSIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|startLogErrorsCnt
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|START_LOG_ERRORS_AFTER_COUNT_KEY
argument_list|,
name|DEFAULT_START_LOG_ERRORS_AFTER_COUNT
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|maxTotalConcurrentTasks
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxTotalConcurrentTasks="
operator|+
name|maxTotalConcurrentTasks
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|maxConcurrentTasksPerServer
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxConcurrentTasksPerServer="
operator|+
name|maxConcurrentTasksPerServer
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|maxConcurrentTasksPerRegion
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxConcurrentTasksPerRegion="
operator|+
name|maxConcurrentTasksPerRegion
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|maxHeapSizePerRequest
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxHeapSizePerServer="
operator|+
name|maxHeapSizePerRequest
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|maxHeapSizeSubmit
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxHeapSizeSubmit="
operator|+
name|maxHeapSizeSubmit
argument_list|)
throw|;
block|}
comment|// Server tracker allows us to do faster, and yet useful (hopefully), retries.
comment|// However, if we are too useful, we might fail very quickly due to retry count limit.
comment|// To avoid this, we are going to cheat for now (see HBASE-7659), and calculate maximum
comment|// retry time if normal retries were used. Then we will retry until this time runs out.
comment|// If we keep hitting one server, the net effect will be the incremental backoff, and
comment|// essentially the same number of retries as planned. If we have to do faster retries,
comment|// we will do more retries in aggregate, but the user will be none the wiser.
name|this
operator|.
name|serverTrackerTimeout
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|numTries
condition|;
operator|++
name|i
control|)
block|{
name|serverTrackerTimeout
operator|+=
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
name|this
operator|.
name|pause
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rpcCallerFactory
operator|=
name|rpcCaller
expr_stmt|;
name|this
operator|.
name|rpcFactory
operator|=
name|rpcFactory
expr_stmt|;
name|this
operator|.
name|logBatchErrorDetails
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|LOG_DETAILS_FOR_BATCH_ERROR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|thresholdToLogUndoneTaskDetails
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|THRESHOLD_TO_LOG_UNDONE_TASK_DETAILS
argument_list|,
name|DEFAULT_THRESHOLD_TO_LOG_UNDONE_TASK_DETAILS
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return pool if non null, otherwise returns this.pool if non null, otherwise throws    *         RuntimeException    */
specifier|protected
name|ExecutorService
name|getPool
parameter_list|(
name|ExecutorService
name|pool
parameter_list|)
block|{
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
return|return
name|pool
return|;
block|}
if|if
condition|(
name|this
operator|.
name|pool
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|pool
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Neither AsyncProcess nor request have ExecutorService"
argument_list|)
throw|;
block|}
comment|/**    * See #submit(ExecutorService, TableName, RowAccess, boolean, Batch.Callback, boolean).    * Uses default ExecutorService for this AP (must have been created with one).    */
specifier|public
parameter_list|<
name|CResult
parameter_list|>
name|AsyncRequestFuture
name|submit
parameter_list|(
name|TableName
name|tableName
parameter_list|,
specifier|final
name|RowAccess
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|rows
parameter_list|,
name|boolean
name|atLeastOne
parameter_list|,
name|Batch
operator|.
name|Callback
argument_list|<
name|CResult
argument_list|>
name|callback
parameter_list|,
name|boolean
name|needResults
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
return|return
name|submit
argument_list|(
literal|null
argument_list|,
name|tableName
argument_list|,
name|rows
argument_list|,
name|atLeastOne
argument_list|,
name|callback
argument_list|,
name|needResults
argument_list|)
return|;
block|}
comment|/**    * See {@link #submit(ExecutorService, TableName, RowAccess, boolean, Batch.Callback, boolean)}.    * Uses the {@link ListRowAccess} to wrap the {@link List}.    */
specifier|public
parameter_list|<
name|CResult
parameter_list|>
name|AsyncRequestFuture
name|submit
parameter_list|(
name|ExecutorService
name|pool
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|rows
parameter_list|,
name|boolean
name|atLeastOne
parameter_list|,
name|Batch
operator|.
name|Callback
argument_list|<
name|CResult
argument_list|>
name|callback
parameter_list|,
name|boolean
name|needResults
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
return|return
name|submit
argument_list|(
name|pool
argument_list|,
name|tableName
argument_list|,
operator|new
name|ListRowAccess
argument_list|(
name|rows
argument_list|)
argument_list|,
name|atLeastOne
argument_list|,
name|callback
argument_list|,
name|needResults
argument_list|)
return|;
block|}
comment|/**    * Extract from the rows list what we can submit. The rows we can not submit are kept in the    * list. Does not send requests to replicas (not currently used for anything other    * than streaming puts anyway).    *    * @param pool ExecutorService to use.    * @param tableName The table for which this request is needed.    * @param callback Batch callback. Only called on success (94 behavior).    * @param needResults Whether results are needed, or can be discarded.    * @param rows - the submitted row. Modified by the method: we remove the rows we took.    * @param atLeastOne true if we should submit at least a subset.    */
specifier|public
parameter_list|<
name|CResult
parameter_list|>
name|AsyncRequestFuture
name|submit
parameter_list|(
name|ExecutorService
name|pool
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|RowAccess
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|rows
parameter_list|,
name|boolean
name|atLeastOne
parameter_list|,
name|Batch
operator|.
name|Callback
argument_list|<
name|CResult
argument_list|>
name|callback
parameter_list|,
name|boolean
name|needResults
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
if|if
condition|(
name|rows
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|NO_REQS_RESULT
return|;
block|}
name|Map
argument_list|<
name|ServerName
argument_list|,
name|MultiAction
argument_list|>
name|actionsByServer
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|MultiAction
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Action
argument_list|>
name|retainedActions
init|=
operator|new
name|ArrayList
argument_list|<
name|Action
argument_list|>
argument_list|(
name|rows
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|NonceGenerator
name|ng
init|=
name|this
operator|.
name|connection
operator|.
name|getNonceGenerator
argument_list|()
decl_stmt|;
name|long
name|nonceGroup
init|=
name|ng
operator|.
name|getNonceGroup
argument_list|()
decl_stmt|;
comment|// Currently, nonce group is per entire client.
comment|// Location errors that happen before we decide what requests to take.
name|List
argument_list|<
name|Exception
argument_list|>
name|locationErrors
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|locationErrorRows
init|=
literal|null
decl_stmt|;
name|RowCheckerHost
name|checker
init|=
name|createRowCheckerHost
argument_list|()
decl_stmt|;
name|boolean
name|firstIter
init|=
literal|true
decl_stmt|;
do|do
block|{
comment|// Wait until there is at least one slot for a new task.
name|waitForMaximumCurrentTasks
argument_list|(
name|maxTotalConcurrentTasks
operator|-
literal|1
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|posInList
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|firstIter
condition|)
block|{
name|checker
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|it
init|=
name|rows
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Row
name|r
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|HRegionLocation
name|loc
decl_stmt|;
try|try
block|{
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"#"
operator|+
name|id
operator|+
literal|", row cannot be null"
argument_list|)
throw|;
block|}
comment|// Make sure we get 0-s replica.
name|RegionLocations
name|locs
init|=
name|connection
operator|.
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|r
operator|.
name|getRow
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|RegionReplicaUtil
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|locs
operator|==
literal|null
operator|||
name|locs
operator|.
name|isEmpty
argument_list|()
operator|||
name|locs
operator|.
name|getDefaultRegionLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"#"
operator|+
name|id
operator|+
literal|", no location found, aborting submit for"
operator|+
literal|" tableName="
operator|+
name|tableName
operator|+
literal|" rowkey="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|loc
operator|=
name|locs
operator|.
name|getDefaultRegionLocation
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|locationErrors
operator|=
operator|new
name|ArrayList
argument_list|<
name|Exception
argument_list|>
argument_list|()
expr_stmt|;
name|locationErrorRows
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get region location "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
comment|// This action failed before creating ars. Retain it, but do not add to submit list.
comment|// We will then add it to ars in an already-failed state.
name|retainedActions
operator|.
name|add
argument_list|(
operator|new
name|Action
argument_list|(
name|r
argument_list|,
operator|++
name|posInList
argument_list|)
argument_list|)
expr_stmt|;
name|locationErrors
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|locationErrorRows
operator|.
name|add
argument_list|(
name|posInList
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
comment|// Backward compat: we stop considering actions on location error.
block|}
name|long
name|rowSize
init|=
operator|(
name|r
operator|instanceof
name|Mutation
operator|)
condition|?
operator|(
operator|(
name|Mutation
operator|)
name|r
operator|)
operator|.
name|heapSize
argument_list|()
else|:
literal|0
decl_stmt|;
name|ReturnCode
name|code
init|=
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|loc
argument_list|,
name|rowSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|==
name|ReturnCode
operator|.
name|END
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|code
operator|==
name|ReturnCode
operator|.
name|INCLUDE
condition|)
block|{
name|Action
name|action
init|=
operator|new
name|Action
argument_list|(
name|r
argument_list|,
operator|++
name|posInList
argument_list|)
decl_stmt|;
name|setNonce
argument_list|(
name|ng
argument_list|,
name|r
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|retainedActions
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
comment|// TODO: replica-get is not supported on this path
name|byte
index|[]
name|regionName
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|addAction
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|,
name|regionName
argument_list|,
name|action
argument_list|,
name|actionsByServer
argument_list|,
name|nonceGroup
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|firstIter
operator|=
literal|false
expr_stmt|;
block|}
do|while
condition|(
name|retainedActions
operator|.
name|isEmpty
argument_list|()
operator|&&
name|atLeastOne
operator|&&
operator|(
name|locationErrors
operator|==
literal|null
operator|)
condition|)
do|;
if|if
condition|(
name|retainedActions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|NO_REQS_RESULT
return|;
return|return
name|submitMultiActions
argument_list|(
name|tableName
argument_list|,
name|retainedActions
argument_list|,
name|nonceGroup
argument_list|,
name|callback
argument_list|,
literal|null
argument_list|,
name|needResults
argument_list|,
name|locationErrors
argument_list|,
name|locationErrorRows
argument_list|,
name|actionsByServer
argument_list|,
name|pool
argument_list|)
return|;
block|}
specifier|private
name|RowCheckerHost
name|createRowCheckerHost
parameter_list|()
block|{
return|return
operator|new
name|RowCheckerHost
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|TaskCountChecker
argument_list|(
name|maxTotalConcurrentTasks
argument_list|,
name|maxConcurrentTasksPerServer
argument_list|,
name|maxConcurrentTasksPerRegion
argument_list|,
name|tasksInProgress
argument_list|,
name|taskCounterPerServer
argument_list|,
name|taskCounterPerRegion
argument_list|)
argument_list|,
operator|new
name|RequestSizeChecker
argument_list|(
name|maxHeapSizePerRequest
argument_list|)
argument_list|,
operator|new
name|SubmittedSizeChecker
argument_list|(
name|maxHeapSizeSubmit
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
parameter_list|<
name|CResult
parameter_list|>
name|AsyncRequestFuture
name|submitMultiActions
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|List
argument_list|<
name|Action
argument_list|>
name|retainedActions
parameter_list|,
name|long
name|nonceGroup
parameter_list|,
name|Batch
operator|.
name|Callback
argument_list|<
name|CResult
argument_list|>
name|callback
parameter_list|,
name|Object
index|[]
name|results
parameter_list|,
name|boolean
name|needResults
parameter_list|,
name|List
argument_list|<
name|Exception
argument_list|>
name|locationErrors
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|locationErrorRows
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|MultiAction
argument_list|>
name|actionsByServer
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
block|{
name|AsyncRequestFutureImpl
argument_list|<
name|CResult
argument_list|>
name|ars
init|=
name|createAsyncRequestFuture
argument_list|(
name|tableName
argument_list|,
name|retainedActions
argument_list|,
name|nonceGroup
argument_list|,
name|pool
argument_list|,
name|callback
argument_list|,
name|results
argument_list|,
name|needResults
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// Add location errors if any
if|if
condition|(
name|locationErrors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locationErrors
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|originalIndex
init|=
name|locationErrorRows
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Row
name|row
init|=
name|retainedActions
operator|.
name|get
argument_list|(
name|originalIndex
argument_list|)
operator|.
name|getAction
argument_list|()
decl_stmt|;
name|ars
operator|.
name|manageError
argument_list|(
name|originalIndex
argument_list|,
name|row
argument_list|,
name|AsyncRequestFutureImpl
operator|.
name|Retry
operator|.
name|NO_LOCATION_PROBLEM
argument_list|,
name|locationErrors
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|ars
operator|.
name|sendMultiAction
argument_list|(
name|actionsByServer
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|ars
return|;
block|}
specifier|public
name|void
name|setRpcTimeout
parameter_list|(
name|int
name|rpcTimeout
parameter_list|)
block|{
name|this
operator|.
name|rpcTimeout
operator|=
name|rpcTimeout
expr_stmt|;
block|}
specifier|public
name|void
name|setOperationTimeout
parameter_list|(
name|int
name|operationTimeout
parameter_list|)
block|{
name|this
operator|.
name|operationTimeout
operator|=
name|operationTimeout
expr_stmt|;
block|}
comment|/**    * Helper that is used when grouping the actions per region server.    *    * @param server - server    * @param regionName - regionName    * @param action - the action to add to the multiaction    * @param actionsByServer the multiaction per server    * @param nonceGroup Nonce group.    */
specifier|static
name|void
name|addAction
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|,
name|Action
name|action
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|MultiAction
argument_list|>
name|actionsByServer
parameter_list|,
name|long
name|nonceGroup
parameter_list|)
block|{
name|MultiAction
name|multiAction
init|=
name|actionsByServer
operator|.
name|get
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|multiAction
operator|==
literal|null
condition|)
block|{
name|multiAction
operator|=
operator|new
name|MultiAction
argument_list|()
expr_stmt|;
name|actionsByServer
operator|.
name|put
argument_list|(
name|server
argument_list|,
name|multiAction
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|.
name|hasNonce
argument_list|()
operator|&&
operator|!
name|multiAction
operator|.
name|hasNonceGroup
argument_list|()
condition|)
block|{
name|multiAction
operator|.
name|setNonceGroup
argument_list|(
name|nonceGroup
argument_list|)
expr_stmt|;
block|}
name|multiAction
operator|.
name|add
argument_list|(
name|regionName
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|CResult
parameter_list|>
name|AsyncRequestFuture
name|submitAll
parameter_list|(
name|ExecutorService
name|pool
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|rows
parameter_list|,
name|Batch
operator|.
name|Callback
argument_list|<
name|CResult
argument_list|>
name|callback
parameter_list|,
name|Object
index|[]
name|results
parameter_list|)
block|{
return|return
name|submitAll
argument_list|(
name|pool
argument_list|,
name|tableName
argument_list|,
name|rows
argument_list|,
name|callback
argument_list|,
name|results
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Submit immediately the list of rows, whatever the server status. Kept for backward    * compatibility: it allows to be used with the batch interface that return an array of objects.    *    * @param pool ExecutorService to use.    * @param tableName name of the table for which the submission is made.    * @param rows the list of rows.    * @param callback the callback.    * @param results Optional array to return the results thru; backward compat.    * @param rpcTimeout rpc timeout for this batch, set -1 if want to use current setting.    */
specifier|public
parameter_list|<
name|CResult
parameter_list|>
name|AsyncRequestFuture
name|submitAll
parameter_list|(
name|ExecutorService
name|pool
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|rows
parameter_list|,
name|Batch
operator|.
name|Callback
argument_list|<
name|CResult
argument_list|>
name|callback
parameter_list|,
name|Object
index|[]
name|results
parameter_list|,
name|CancellableRegionServerCallable
name|callable
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
block|{
name|List
argument_list|<
name|Action
argument_list|>
name|actions
init|=
operator|new
name|ArrayList
argument_list|<
name|Action
argument_list|>
argument_list|(
name|rows
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// The position will be used by the processBatch to match the object array returned.
name|int
name|posInList
init|=
operator|-
literal|1
decl_stmt|;
name|NonceGenerator
name|ng
init|=
name|this
operator|.
name|connection
operator|.
name|getNonceGenerator
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
name|r
range|:
name|rows
control|)
block|{
name|posInList
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|Put
condition|)
block|{
name|Put
name|put
init|=
operator|(
name|Put
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|put
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No columns to insert for #"
operator|+
operator|(
name|posInList
operator|+
literal|1
operator|)
operator|+
literal|" item"
argument_list|)
throw|;
block|}
block|}
name|Action
name|action
init|=
operator|new
name|Action
argument_list|(
name|r
argument_list|,
name|posInList
argument_list|)
decl_stmt|;
name|setNonce
argument_list|(
name|ng
argument_list|,
name|r
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
name|AsyncRequestFutureImpl
argument_list|<
name|CResult
argument_list|>
name|ars
init|=
name|createAsyncRequestFuture
argument_list|(
name|tableName
argument_list|,
name|actions
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|getPool
argument_list|(
name|pool
argument_list|)
argument_list|,
name|callback
argument_list|,
name|results
argument_list|,
name|results
operator|!=
literal|null
argument_list|,
name|callable
argument_list|,
name|rpcTimeout
argument_list|)
decl_stmt|;
name|ars
operator|.
name|groupAndSendMultiAction
argument_list|(
name|actions
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|ars
return|;
block|}
specifier|private
name|void
name|setNonce
parameter_list|(
name|NonceGenerator
name|ng
parameter_list|,
name|Row
name|r
parameter_list|,
name|Action
name|action
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|Append
operator|)
operator|&&
operator|!
operator|(
name|r
operator|instanceof
name|Increment
operator|)
condition|)
return|return;
name|action
operator|.
name|setNonce
argument_list|(
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
expr_stmt|;
comment|// Action handles NO_NONCE, so it's ok if ng is disabled.
block|}
specifier|protected
parameter_list|<
name|CResult
parameter_list|>
name|AsyncRequestFutureImpl
argument_list|<
name|CResult
argument_list|>
name|createAsyncRequestFuture
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|List
argument_list|<
name|Action
argument_list|>
name|actions
parameter_list|,
name|long
name|nonceGroup
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|Batch
operator|.
name|Callback
argument_list|<
name|CResult
argument_list|>
name|callback
parameter_list|,
name|Object
index|[]
name|results
parameter_list|,
name|boolean
name|needResults
parameter_list|,
name|CancellableRegionServerCallable
name|callable
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
block|{
return|return
operator|new
name|AsyncRequestFutureImpl
argument_list|<
name|CResult
argument_list|>
argument_list|(
name|tableName
argument_list|,
name|actions
argument_list|,
name|nonceGroup
argument_list|,
name|getPool
argument_list|(
name|pool
argument_list|)
argument_list|,
name|needResults
argument_list|,
name|results
argument_list|,
name|callback
argument_list|,
name|callable
argument_list|,
name|operationTimeout
argument_list|,
name|rpcTimeout
operator|>
literal|0
condition|?
name|rpcTimeout
else|:
name|this
operator|.
name|rpcTimeout
argument_list|,
name|this
argument_list|)
return|;
block|}
comment|/** Wait until the async does not have more than max tasks in progress. */
specifier|protected
name|void
name|waitForMaximumCurrentTasks
parameter_list|(
name|int
name|max
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
name|waitForMaximumCurrentTasks
argument_list|(
name|max
argument_list|,
name|tasksInProgress
argument_list|,
name|id
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|// Break out this method so testable
annotation|@
name|VisibleForTesting
name|void
name|waitForMaximumCurrentTasks
parameter_list|(
name|int
name|max
parameter_list|,
specifier|final
name|AtomicLong
name|tasksInProgress
parameter_list|,
specifier|final
name|long
name|id
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
name|long
name|lastLog
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|long
name|currentInProgress
decl_stmt|,
name|oldInProgress
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
while|while
condition|(
operator|(
name|currentInProgress
operator|=
name|tasksInProgress
operator|.
name|get
argument_list|()
operator|)
operator|>
name|max
condition|)
block|{
if|if
condition|(
name|oldInProgress
operator|!=
name|currentInProgress
condition|)
block|{
comment|// Wait for in progress to change.
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|>
name|lastLog
operator|+
literal|10000
condition|)
block|{
name|lastLog
operator|=
name|now
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"#"
operator|+
name|id
operator|+
literal|", waiting for some tasks to finish. Expected max="
operator|+
name|max
operator|+
literal|", tasksInProgress="
operator|+
name|currentInProgress
operator|+
literal|" hasError="
operator|+
name|hasError
argument_list|()
operator|+
name|tableName
operator|==
literal|null
condition|?
literal|""
else|:
literal|", tableName="
operator|+
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentInProgress
operator|<=
name|thresholdToLogUndoneTaskDetails
condition|)
block|{
name|logDetailsOfUndoneTasks
argument_list|(
name|currentInProgress
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|oldInProgress
operator|=
name|currentInProgress
expr_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|tasksInProgress
init|)
block|{
if|if
condition|(
name|tasksInProgress
operator|.
name|get
argument_list|()
operator|==
name|oldInProgress
condition|)
block|{
name|tasksInProgress
operator|.
name|wait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"#"
operator|+
name|id
operator|+
literal|", interrupted."
operator|+
literal|" currentNumberOfTask="
operator|+
name|currentInProgress
argument_list|)
throw|;
block|}
block|}
block|}
name|void
name|logDetailsOfUndoneTasks
parameter_list|(
name|long
name|taskInProgress
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|AtomicInteger
argument_list|>
name|entry
range|:
name|taskCounterPerServer
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|servers
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Left over "
operator|+
name|taskInProgress
operator|+
literal|" task(s) are processed on server(s): "
operator|+
name|servers
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskInProgress
operator|<=
name|THRESHOLD_TO_LOG_REGION_DETAILS
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|AtomicInteger
argument_list|>
name|entry
range|:
name|taskCounterPerRegion
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Regions against which left over task(s) are processed: "
operator|+
name|regions
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Only used w/useGlobalErrors ctor argument, for HTable backward compat.    * @return Whether there were any errors in any request since the last time    *          {@link #waitForAllPreviousOpsAndReset(List, String)} was called, or AP was created.    */
specifier|public
name|boolean
name|hasError
parameter_list|()
block|{
return|return
name|globalErrors
operator|.
name|hasErrors
argument_list|()
return|;
block|}
comment|/**    * Only used w/useGlobalErrors ctor argument, for HTable backward compat.    * Waits for all previous operations to finish, and returns errors and (optionally)    * failed operations themselves.    * @param failedRows an optional list into which the rows that failed since the last time    *        {@link #waitForAllPreviousOpsAndReset(List, String)} was called, or AP was created, are saved.    * @param tableName name of the table    * @return all the errors since the last time {@link #waitForAllPreviousOpsAndReset(List, String)}    *          was called, or AP was created.    */
specifier|public
name|RetriesExhaustedWithDetailsException
name|waitForAllPreviousOpsAndReset
parameter_list|(
name|List
argument_list|<
name|Row
argument_list|>
name|failedRows
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
name|waitForMaximumCurrentTasks
argument_list|(
literal|0
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|globalErrors
operator|.
name|hasErrors
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|failedRows
operator|!=
literal|null
condition|)
block|{
name|failedRows
operator|.
name|addAll
argument_list|(
name|globalErrors
operator|.
name|actions
argument_list|)
expr_stmt|;
block|}
name|RetriesExhaustedWithDetailsException
name|result
init|=
name|globalErrors
operator|.
name|makeException
argument_list|(
name|logBatchErrorDetails
argument_list|)
decl_stmt|;
name|globalErrors
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * increment the tasks counters for a given set of regions. MT safe.    */
specifier|protected
name|void
name|incTaskCounters
parameter_list|(
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|regions
parameter_list|,
name|ServerName
name|sn
parameter_list|)
block|{
name|tasksInProgress
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|AtomicInteger
name|serverCnt
init|=
name|taskCounterPerServer
operator|.
name|get
argument_list|(
name|sn
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverCnt
operator|==
literal|null
condition|)
block|{
name|taskCounterPerServer
operator|.
name|putIfAbsent
argument_list|(
name|sn
argument_list|,
operator|new
name|AtomicInteger
argument_list|()
argument_list|)
expr_stmt|;
name|serverCnt
operator|=
name|taskCounterPerServer
operator|.
name|get
argument_list|(
name|sn
argument_list|)
expr_stmt|;
block|}
name|serverCnt
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|regBytes
range|:
name|regions
control|)
block|{
name|AtomicInteger
name|regionCnt
init|=
name|taskCounterPerRegion
operator|.
name|get
argument_list|(
name|regBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionCnt
operator|==
literal|null
condition|)
block|{
name|regionCnt
operator|=
operator|new
name|AtomicInteger
argument_list|()
expr_stmt|;
name|AtomicInteger
name|oldCnt
init|=
name|taskCounterPerRegion
operator|.
name|putIfAbsent
argument_list|(
name|regBytes
argument_list|,
name|regionCnt
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldCnt
operator|!=
literal|null
condition|)
block|{
name|regionCnt
operator|=
name|oldCnt
expr_stmt|;
block|}
block|}
name|regionCnt
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Decrements the counters for a given region and the region server. MT Safe.    */
specifier|protected
name|void
name|decTaskCounters
parameter_list|(
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|regions
parameter_list|,
name|ServerName
name|sn
parameter_list|)
block|{
for|for
control|(
name|byte
index|[]
name|regBytes
range|:
name|regions
control|)
block|{
name|AtomicInteger
name|regionCnt
init|=
name|taskCounterPerRegion
operator|.
name|get
argument_list|(
name|regBytes
argument_list|)
decl_stmt|;
name|regionCnt
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
name|taskCounterPerServer
operator|.
name|get
argument_list|(
name|sn
argument_list|)
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|tasksInProgress
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|tasksInProgress
init|)
block|{
name|tasksInProgress
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Create a caller. Isolated to be easily overridden in the tests.    */
annotation|@
name|VisibleForTesting
specifier|protected
name|RpcRetryingCaller
argument_list|<
name|AbstractResponse
argument_list|>
name|createCaller
parameter_list|(
name|CancellableRegionServerCallable
name|callable
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
block|{
return|return
name|rpcCallerFactory
operator|.
expr|<
name|AbstractResponse
operator|>
name|newCaller
argument_list|(
name|rpcTimeout
argument_list|)
return|;
block|}
comment|/**    * Creates the server error tracker to use inside process.    * Currently, to preserve the main assumption about current retries, and to work well with    * the retry-limit-based calculation, the calculation is local per Process object.    * We may benefit from connection-wide tracking of server errors.    * @return ServerErrorTracker to use, null if there is no ServerErrorTracker on this connection    */
specifier|protected
name|ConnectionImplementation
operator|.
name|ServerErrorTracker
name|createServerErrorTracker
parameter_list|()
block|{
return|return
operator|new
name|ConnectionImplementation
operator|.
name|ServerErrorTracker
argument_list|(
name|this
operator|.
name|serverTrackerTimeout
argument_list|,
name|this
operator|.
name|numTries
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|isReplicaGet
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
return|return
operator|(
name|row
operator|instanceof
name|Get
operator|)
operator|&&
operator|(
operator|(
operator|(
name|Get
operator|)
name|row
operator|)
operator|.
name|getConsistency
argument_list|()
operator|==
name|Consistency
operator|.
name|TIMELINE
operator|)
return|;
block|}
comment|/**    * Collect all advices from checkers and make the final decision.    */
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|RowCheckerHost
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|RowChecker
argument_list|>
name|checkers
decl_stmt|;
specifier|private
name|boolean
name|isEnd
init|=
literal|false
decl_stmt|;
name|RowCheckerHost
parameter_list|(
specifier|final
name|List
argument_list|<
name|RowChecker
argument_list|>
name|checkers
parameter_list|)
block|{
name|this
operator|.
name|checkers
operator|=
name|checkers
expr_stmt|;
block|}
name|void
name|reset
parameter_list|()
throws|throws
name|InterruptedIOException
block|{
name|isEnd
operator|=
literal|false
expr_stmt|;
name|InterruptedIOException
name|e
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RowChecker
name|checker
range|:
name|checkers
control|)
block|{
try|try
block|{
name|checker
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedIOException
name|ex
parameter_list|)
block|{
name|e
operator|=
name|ex
expr_stmt|;
block|}
block|}
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|ReturnCode
name|canTakeOperation
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|,
name|long
name|rowSize
parameter_list|)
block|{
if|if
condition|(
name|isEnd
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|END
return|;
block|}
name|ReturnCode
name|code
init|=
name|ReturnCode
operator|.
name|INCLUDE
decl_stmt|;
for|for
control|(
name|RowChecker
name|checker
range|:
name|checkers
control|)
block|{
switch|switch
condition|(
name|checker
operator|.
name|canTakeOperation
argument_list|(
name|loc
argument_list|,
name|rowSize
argument_list|)
condition|)
block|{
case|case
name|END
case|:
name|isEnd
operator|=
literal|true
expr_stmt|;
name|code
operator|=
name|ReturnCode
operator|.
name|END
expr_stmt|;
break|break;
case|case
name|SKIP
case|:
name|code
operator|=
name|ReturnCode
operator|.
name|SKIP
expr_stmt|;
break|break;
case|case
name|INCLUDE
case|:
default|default:
break|break;
block|}
if|if
condition|(
name|code
operator|==
name|ReturnCode
operator|.
name|END
condition|)
block|{
break|break;
block|}
block|}
for|for
control|(
name|RowChecker
name|checker
range|:
name|checkers
control|)
block|{
name|checker
operator|.
name|notifyFinal
argument_list|(
name|code
argument_list|,
name|loc
argument_list|,
name|rowSize
argument_list|)
expr_stmt|;
block|}
return|return
name|code
return|;
block|}
block|}
comment|/**    * Provide a way to control the flow of rows iteration.    */
comment|// Visible for Testing. Adding @VisibleForTesting here doesn't work for some reason.
interface|interface
name|RowChecker
block|{
enum|enum
name|ReturnCode
block|{
comment|/**        * Accept current row.        */
name|INCLUDE
block|,
comment|/**        * Skip current row.        */
name|SKIP
block|,
comment|/**        * No more row can be included.        */
name|END
block|}
empty_stmt|;
name|ReturnCode
name|canTakeOperation
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|,
name|long
name|rowSize
parameter_list|)
function_decl|;
comment|/**      * Add the final ReturnCode to the checker.      * The ReturnCode may be reversed, so the checker need the final decision to update      * the inner state.      */
name|void
name|notifyFinal
parameter_list|(
name|ReturnCode
name|code
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|long
name|rowSize
parameter_list|)
function_decl|;
comment|/**      * Reset the inner state.      */
name|void
name|reset
parameter_list|()
throws|throws
name|InterruptedIOException
function_decl|;
block|}
comment|/**    * limit the heapsize of total submitted data.    * Reduce the limit of heapsize for submitting quickly    * if there is no running task.    */
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|SubmittedSizeChecker
implements|implements
name|RowChecker
block|{
specifier|private
specifier|final
name|long
name|maxHeapSizeSubmit
decl_stmt|;
specifier|private
name|long
name|heapSize
init|=
literal|0
decl_stmt|;
name|SubmittedSizeChecker
parameter_list|(
specifier|final
name|long
name|maxHeapSizeSubmit
parameter_list|)
block|{
name|this
operator|.
name|maxHeapSizeSubmit
operator|=
name|maxHeapSizeSubmit
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|canTakeOperation
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|,
name|long
name|rowSize
parameter_list|)
block|{
if|if
condition|(
name|heapSize
operator|>=
name|maxHeapSizeSubmit
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|END
return|;
block|}
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyFinal
parameter_list|(
name|ReturnCode
name|code
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|long
name|rowSize
parameter_list|)
block|{
if|if
condition|(
name|code
operator|==
name|ReturnCode
operator|.
name|INCLUDE
condition|)
block|{
name|heapSize
operator|+=
name|rowSize
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|heapSize
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/**    * limit the max number of tasks in an AsyncProcess.    */
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|TaskCountChecker
implements|implements
name|RowChecker
block|{
specifier|private
specifier|static
specifier|final
name|long
name|MAX_WAITING_TIME
init|=
literal|1000
decl_stmt|;
comment|//ms
specifier|private
specifier|final
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsIncluded
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serversIncluded
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxConcurrentTasksPerRegion
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxTotalConcurrentTasks
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxConcurrentTasksPerServer
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|AtomicInteger
argument_list|>
name|taskCounterPerRegion
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|AtomicInteger
argument_list|>
name|taskCounterPerServer
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|busyRegions
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|tasksInProgress
decl_stmt|;
name|TaskCountChecker
parameter_list|(
specifier|final
name|int
name|maxTotalConcurrentTasks
parameter_list|,
specifier|final
name|int
name|maxConcurrentTasksPerServer
parameter_list|,
specifier|final
name|int
name|maxConcurrentTasksPerRegion
parameter_list|,
specifier|final
name|AtomicLong
name|tasksInProgress
parameter_list|,
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|AtomicInteger
argument_list|>
name|taskCounterPerServer
parameter_list|,
specifier|final
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|AtomicInteger
argument_list|>
name|taskCounterPerRegion
parameter_list|)
block|{
name|this
operator|.
name|maxTotalConcurrentTasks
operator|=
name|maxTotalConcurrentTasks
expr_stmt|;
name|this
operator|.
name|maxConcurrentTasksPerRegion
operator|=
name|maxConcurrentTasksPerRegion
expr_stmt|;
name|this
operator|.
name|maxConcurrentTasksPerServer
operator|=
name|maxConcurrentTasksPerServer
expr_stmt|;
name|this
operator|.
name|taskCounterPerRegion
operator|=
name|taskCounterPerRegion
expr_stmt|;
name|this
operator|.
name|taskCounterPerServer
operator|=
name|taskCounterPerServer
expr_stmt|;
name|this
operator|.
name|tasksInProgress
operator|=
name|tasksInProgress
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|InterruptedIOException
block|{
comment|// prevent the busy-waiting
name|waitForRegion
argument_list|()
expr_stmt|;
name|regionsIncluded
operator|.
name|clear
argument_list|()
expr_stmt|;
name|serversIncluded
operator|.
name|clear
argument_list|()
expr_stmt|;
name|busyRegions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|waitForRegion
parameter_list|()
throws|throws
name|InterruptedIOException
block|{
if|if
condition|(
name|busyRegions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|EnvironmentEdge
name|ee
init|=
name|EnvironmentEdgeManager
operator|.
name|getDelegate
argument_list|()
decl_stmt|;
specifier|final
name|long
name|start
init|=
name|ee
operator|.
name|currentTime
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|ee
operator|.
name|currentTime
argument_list|()
operator|-
name|start
operator|)
operator|<=
name|MAX_WAITING_TIME
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|region
range|:
name|busyRegions
control|)
block|{
name|AtomicInteger
name|count
init|=
name|taskCounterPerRegion
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
operator|||
name|count
operator|.
name|get
argument_list|()
operator|<
name|maxConcurrentTasksPerRegion
condition|)
block|{
return|return;
block|}
block|}
try|try
block|{
synchronized|synchronized
init|(
name|tasksInProgress
init|)
block|{
name|tasksInProgress
operator|.
name|wait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Interrupted."
operator|+
literal|" tasksInProgress="
operator|+
name|tasksInProgress
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * 1) check the regions is allowed.      * 2) check the concurrent tasks for regions.      * 3) check the total concurrent tasks.      * 4) check the concurrent tasks for server.      * @param loc      * @param rowSize      * @return      */
annotation|@
name|Override
specifier|public
name|ReturnCode
name|canTakeOperation
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|,
name|long
name|rowSize
parameter_list|)
block|{
name|HRegionInfo
name|regionInfo
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionsIncluded
operator|.
name|contains
argument_list|(
name|regionInfo
argument_list|)
condition|)
block|{
comment|// We already know what to do with this region.
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
name|AtomicInteger
name|regionCnt
init|=
name|taskCounterPerRegion
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionCnt
operator|!=
literal|null
operator|&&
name|regionCnt
operator|.
name|get
argument_list|()
operator|>=
name|maxConcurrentTasksPerRegion
condition|)
block|{
comment|// Too many tasks on this region already.
return|return
name|ReturnCode
operator|.
name|SKIP
return|;
block|}
name|int
name|newServers
init|=
name|serversIncluded
operator|.
name|size
argument_list|()
operator|+
operator|(
name|serversIncluded
operator|.
name|contains
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|newServers
operator|+
name|tasksInProgress
operator|.
name|get
argument_list|()
operator|)
operator|>
name|maxTotalConcurrentTasks
condition|)
block|{
comment|// Too many tasks.
return|return
name|ReturnCode
operator|.
name|SKIP
return|;
block|}
name|AtomicInteger
name|serverCnt
init|=
name|taskCounterPerServer
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverCnt
operator|!=
literal|null
operator|&&
name|serverCnt
operator|.
name|get
argument_list|()
operator|>=
name|maxConcurrentTasksPerServer
condition|)
block|{
comment|// Too many tasks for this individual server
return|return
name|ReturnCode
operator|.
name|SKIP
return|;
block|}
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyFinal
parameter_list|(
name|ReturnCode
name|code
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|long
name|rowSize
parameter_list|)
block|{
if|if
condition|(
name|code
operator|==
name|ReturnCode
operator|.
name|INCLUDE
condition|)
block|{
name|regionsIncluded
operator|.
name|add
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
name|serversIncluded
operator|.
name|add
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|busyRegions
operator|.
name|add
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * limit the request size for each regionserver.    */
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|RequestSizeChecker
implements|implements
name|RowChecker
block|{
specifier|private
specifier|final
name|long
name|maxHeapSizePerRequest
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Long
argument_list|>
name|serverRequestSizes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|RequestSizeChecker
parameter_list|(
specifier|final
name|long
name|maxHeapSizePerRequest
parameter_list|)
block|{
name|this
operator|.
name|maxHeapSizePerRequest
operator|=
name|maxHeapSizePerRequest
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|serverRequestSizes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|canTakeOperation
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|,
name|long
name|rowSize
parameter_list|)
block|{
comment|// Is it ok for limit of request size?
name|long
name|currentRequestSize
init|=
name|serverRequestSizes
operator|.
name|containsKey
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|?
name|serverRequestSizes
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
else|:
literal|0L
decl_stmt|;
comment|// accept at least one request
if|if
condition|(
name|currentRequestSize
operator|==
literal|0
operator|||
name|currentRequestSize
operator|+
name|rowSize
operator|<=
name|maxHeapSizePerRequest
condition|)
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
return|return
name|ReturnCode
operator|.
name|SKIP
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyFinal
parameter_list|(
name|ReturnCode
name|code
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|long
name|rowSize
parameter_list|)
block|{
if|if
condition|(
name|code
operator|==
name|ReturnCode
operator|.
name|INCLUDE
condition|)
block|{
name|long
name|currentRequestSize
init|=
name|serverRequestSizes
operator|.
name|containsKey
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|?
name|serverRequestSizes
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
else|:
literal|0L
decl_stmt|;
name|serverRequestSizes
operator|.
name|put
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|,
name|currentRequestSize
operator|+
name|rowSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|ListRowAccess
parameter_list|<
name|T
parameter_list|>
implements|implements
name|RowAccess
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|data
decl_stmt|;
name|ListRowAccess
parameter_list|(
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|data
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|data
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|data
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

