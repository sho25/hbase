begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncProcessTask
operator|.
name|SubmittedRows
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RequestController
operator|.
name|ReturnCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * This class  allows a continuous flow of requests. It's written to be compatible with a  * synchronous caller such as HTable.  *<p>  * The caller sends a buffer of operation, by calling submit. This class extract from this list  * the operations it can send, i.e. the operations that are on region that are not considered  * as busy. The process is asynchronous, i.e. it returns immediately when if has finished to  * iterate on the list. If, and only if, the maximum number of current task is reached, the call  * to submit will block. Alternatively, the caller can call submitAll, in which case all the  * operations will be sent. Each call to submit returns a future-like object that can be used  * to track operation progress.  *</p>  *<p>  * The class manages internally the retries.  *</p>  *<p>  * The errors are tracked inside the Future object that is returned.  * The results are always tracked inside the Future object and can be retrieved when the call  * has finished. Partial results can also be retrieved if some part of multi-request failed.  *</p>  *<p>  * This class is thread safe.  * Internally, the class is thread safe enough to manage simultaneously new submission and results  * arising from older operations.  *</p>  *<p>  * Internally, this class works with {@link Row}, this mean it could be theoretically used for  * gets as well.  *</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
class|class
name|AsyncProcess
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AsyncProcess
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|COUNTER
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PRIMARY_CALL_TIMEOUT_KEY
init|=
literal|"hbase.client.primaryCallTimeout.multiget"
decl_stmt|;
comment|/**    * Configure the number of failures after which the client will start logging. A few failures    * is fine: region moved, then is not opened, then is overloaded. We try to have an acceptable    * heuristic for the number of errors we don't log. 5 was chosen because we wait for 1s at    * this stage.    */
specifier|public
specifier|static
specifier|final
name|String
name|START_LOG_ERRORS_AFTER_COUNT_KEY
init|=
literal|"hbase.client.start.log.errors.counter"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_START_LOG_ERRORS_AFTER_COUNT
init|=
literal|5
decl_stmt|;
comment|/**    * Configuration to decide whether to log details for batch error    */
specifier|public
specifier|static
specifier|final
name|String
name|LOG_DETAILS_FOR_BATCH_ERROR
init|=
literal|"hbase.client.log.batcherrors.details"
decl_stmt|;
comment|/**    * Return value from a submit that didn't contain any requests.    */
specifier|private
specifier|static
specifier|final
name|AsyncRequestFuture
name|NO_REQS_RESULT
init|=
operator|new
name|AsyncRequestFuture
argument_list|()
block|{
specifier|final
name|Object
index|[]
name|result
init|=
operator|new
name|Object
index|[
literal|0
index|]
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasError
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|RetriesExhaustedWithDetailsException
name|getErrors
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|getFailedOperations
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|getResults
parameter_list|()
block|{
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|waitUntilDone
parameter_list|()
throws|throws
name|InterruptedIOException
block|{     }
block|}
decl_stmt|;
comment|// TODO: many of the fields should be made private
specifier|final
name|long
name|id
decl_stmt|;
specifier|final
name|ClusterConnection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|RpcRetryingCallerFactory
name|rpcCallerFactory
decl_stmt|;
specifier|final
name|RpcControllerFactory
name|rpcFactory
decl_stmt|;
comment|// Start configuration settings.
specifier|final
name|int
name|startLogErrorsCnt
decl_stmt|;
specifier|final
name|long
name|pause
decl_stmt|;
specifier|final
name|long
name|pauseForCQTBE
decl_stmt|;
comment|// pause for CallQueueTooBigException, if specified
specifier|final
name|int
name|numTries
decl_stmt|;
annotation|@
name|VisibleForTesting
name|long
name|serverTrackerTimeout
decl_stmt|;
specifier|final
name|long
name|primaryCallTimeoutMicroseconds
decl_stmt|;
comment|/** Whether to log details for batch errors */
specifier|final
name|boolean
name|logBatchErrorDetails
decl_stmt|;
comment|// End configuration settings.
comment|/**    * The traffic control for requests.    */
annotation|@
name|VisibleForTesting
specifier|final
name|RequestController
name|requestController
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LOG_DETAILS_PERIOD
init|=
literal|"hbase.client.log.detail.period.ms"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_LOG_DETAILS_PERIOD
init|=
literal|10000
decl_stmt|;
specifier|private
specifier|final
name|int
name|periodToLog
decl_stmt|;
name|AsyncProcess
parameter_list|(
name|ClusterConnection
name|hc
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|RpcRetryingCallerFactory
name|rpcCaller
parameter_list|,
name|RpcControllerFactory
name|rpcFactory
parameter_list|)
block|{
if|if
condition|(
name|hc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ClusterConnection cannot be null."
argument_list|)
throw|;
block|}
name|this
operator|.
name|connection
operator|=
name|hc
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|COUNTER
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|this
operator|.
name|pause
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_PAUSE
argument_list|)
expr_stmt|;
name|long
name|configuredPauseForCQTBE
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE_FOR_CQTBE
argument_list|,
name|pause
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuredPauseForCQTBE
operator|<
name|pause
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The "
operator|+
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE_FOR_CQTBE
operator|+
literal|" setting: "
operator|+
name|configuredPauseForCQTBE
operator|+
literal|" is smaller than "
operator|+
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
operator|+
literal|", will use "
operator|+
name|pause
operator|+
literal|" instead."
argument_list|)
expr_stmt|;
name|this
operator|.
name|pauseForCQTBE
operator|=
name|pause
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|pauseForCQTBE
operator|=
name|configuredPauseForCQTBE
expr_stmt|;
block|}
comment|// how many times we could try in total, one more than retry number
name|this
operator|.
name|numTries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_RETRIES_NUMBER
argument_list|)
operator|+
literal|1
expr_stmt|;
name|this
operator|.
name|primaryCallTimeoutMicroseconds
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|PRIMARY_CALL_TIMEOUT_KEY
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|this
operator|.
name|startLogErrorsCnt
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|START_LOG_ERRORS_AFTER_COUNT_KEY
argument_list|,
name|DEFAULT_START_LOG_ERRORS_AFTER_COUNT
argument_list|)
expr_stmt|;
name|this
operator|.
name|periodToLog
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|LOG_DETAILS_PERIOD
argument_list|,
name|DEFAULT_LOG_DETAILS_PERIOD
argument_list|)
expr_stmt|;
comment|// Server tracker allows us to do faster, and yet useful (hopefully), retries.
comment|// However, if we are too useful, we might fail very quickly due to retry count limit.
comment|// To avoid this, we are going to cheat for now (see HBASE-7659), and calculate maximum
comment|// retry time if normal retries were used. Then we will retry until this time runs out.
comment|// If we keep hitting one server, the net effect will be the incremental backoff, and
comment|// essentially the same number of retries as planned. If we have to do faster retries,
comment|// we will do more retries in aggregate, but the user will be none the wiser.
name|this
operator|.
name|serverTrackerTimeout
operator|=
literal|0L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|numTries
condition|;
operator|++
name|i
control|)
block|{
name|serverTrackerTimeout
operator|=
name|serverTrackerTimeout
operator|+
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
name|this
operator|.
name|pause
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rpcCallerFactory
operator|=
name|rpcCaller
expr_stmt|;
name|this
operator|.
name|rpcFactory
operator|=
name|rpcFactory
expr_stmt|;
name|this
operator|.
name|logBatchErrorDetails
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|LOG_DETAILS_FOR_BATCH_ERROR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|requestController
operator|=
name|RequestControllerFactory
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * The submitted task may be not accomplished at all if there are too many running tasks or    * other limits.    * @param<CResult> The class to cast the result    * @param task The setting and data    * @return AsyncRequestFuture    */
specifier|public
parameter_list|<
name|CResult
parameter_list|>
name|AsyncRequestFuture
name|submit
parameter_list|(
name|AsyncProcessTask
argument_list|<
name|CResult
argument_list|>
name|task
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
name|AsyncRequestFuture
name|reqFuture
init|=
name|checkTask
argument_list|(
name|task
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqFuture
operator|!=
literal|null
condition|)
block|{
return|return
name|reqFuture
return|;
block|}
name|SubmittedRows
name|submittedRows
init|=
name|task
operator|.
name|getSubmittedRows
argument_list|()
operator|==
literal|null
condition|?
name|SubmittedRows
operator|.
name|ALL
else|:
name|task
operator|.
name|getSubmittedRows
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|submittedRows
condition|)
block|{
case|case
name|ALL
case|:
return|return
name|submitAll
argument_list|(
name|task
argument_list|)
return|;
case|case
name|AT_LEAST_ONE
case|:
return|return
name|submit
argument_list|(
name|task
argument_list|,
literal|true
argument_list|)
return|;
default|default:
return|return
name|submit
argument_list|(
name|task
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
comment|/**    * Extract from the rows list what we can submit. The rows we can not submit are kept in the    * list. Does not send requests to replicas (not currently used for anything other    * than streaming puts anyway).    *    * @param task The setting and data    * @param atLeastOne true if we should submit at least a subset.    */
specifier|private
parameter_list|<
name|CResult
parameter_list|>
name|AsyncRequestFuture
name|submit
parameter_list|(
name|AsyncProcessTask
argument_list|<
name|CResult
argument_list|>
name|task
parameter_list|,
name|boolean
name|atLeastOne
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
name|TableName
name|tableName
init|=
name|task
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|RowAccess
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|rows
init|=
name|task
operator|.
name|getRowAccess
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|MultiAction
argument_list|>
name|actionsByServer
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Action
argument_list|>
name|retainedActions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rows
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|NonceGenerator
name|ng
init|=
name|this
operator|.
name|connection
operator|.
name|getNonceGenerator
argument_list|()
decl_stmt|;
name|long
name|nonceGroup
init|=
name|ng
operator|.
name|getNonceGroup
argument_list|()
decl_stmt|;
comment|// Currently, nonce group is per entire client.
comment|// Location errors that happen before we decide what requests to take.
name|List
argument_list|<
name|Exception
argument_list|>
name|locationErrors
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|locationErrorRows
init|=
literal|null
decl_stmt|;
name|RequestController
operator|.
name|Checker
name|checker
init|=
name|requestController
operator|.
name|newChecker
argument_list|()
decl_stmt|;
name|boolean
name|firstIter
init|=
literal|true
decl_stmt|;
do|do
block|{
comment|// Wait until there is at least one slot for a new task.
name|requestController
operator|.
name|waitForFreeSlot
argument_list|(
name|id
argument_list|,
name|periodToLog
argument_list|,
name|getLogger
argument_list|(
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|posInList
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|firstIter
condition|)
block|{
name|checker
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|it
init|=
name|rows
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Row
name|r
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|HRegionLocation
name|loc
decl_stmt|;
try|try
block|{
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"#"
operator|+
name|id
operator|+
literal|", row cannot be null"
argument_list|)
throw|;
block|}
comment|// Make sure we get 0-s replica.
name|RegionLocations
name|locs
init|=
name|connection
operator|.
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|r
operator|.
name|getRow
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|RegionReplicaUtil
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|locs
operator|==
literal|null
operator|||
name|locs
operator|.
name|isEmpty
argument_list|()
operator|||
name|locs
operator|.
name|getDefaultRegionLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"#"
operator|+
name|id
operator|+
literal|", no location found, aborting submit for"
operator|+
literal|" tableName="
operator|+
name|tableName
operator|+
literal|" rowkey="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|loc
operator|=
name|locs
operator|.
name|getDefaultRegionLocation
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|locationErrors
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|locationErrorRows
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get region location "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
comment|// This action failed before creating ars. Retain it, but do not add to submit list.
comment|// We will then add it to ars in an already-failed state.
name|int
name|priority
init|=
name|HConstants
operator|.
name|NORMAL_QOS
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|Mutation
condition|)
block|{
name|priority
operator|=
operator|(
operator|(
name|Mutation
operator|)
name|r
operator|)
operator|.
name|getPriority
argument_list|()
expr_stmt|;
block|}
name|retainedActions
operator|.
name|add
argument_list|(
operator|new
name|Action
argument_list|(
name|r
argument_list|,
operator|++
name|posInList
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|locationErrors
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|locationErrorRows
operator|.
name|add
argument_list|(
name|posInList
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
comment|// Backward compat: we stop considering actions on location error.
block|}
name|ReturnCode
name|code
init|=
name|checker
operator|.
name|canTakeRow
argument_list|(
name|loc
argument_list|,
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|==
name|ReturnCode
operator|.
name|END
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|code
operator|==
name|ReturnCode
operator|.
name|INCLUDE
condition|)
block|{
name|int
name|priority
init|=
name|HConstants
operator|.
name|NORMAL_QOS
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|Mutation
condition|)
block|{
name|priority
operator|=
operator|(
operator|(
name|Mutation
operator|)
name|r
operator|)
operator|.
name|getPriority
argument_list|()
expr_stmt|;
block|}
name|Action
name|action
init|=
operator|new
name|Action
argument_list|(
name|r
argument_list|,
operator|++
name|posInList
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|setNonce
argument_list|(
name|ng
argument_list|,
name|r
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|retainedActions
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
comment|// TODO: replica-get is not supported on this path
name|byte
index|[]
name|regionName
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|addAction
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|,
name|regionName
argument_list|,
name|action
argument_list|,
name|actionsByServer
argument_list|,
name|nonceGroup
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|firstIter
operator|=
literal|false
expr_stmt|;
block|}
do|while
condition|(
name|retainedActions
operator|.
name|isEmpty
argument_list|()
operator|&&
name|atLeastOne
operator|&&
operator|(
name|locationErrors
operator|==
literal|null
operator|)
condition|)
do|;
if|if
condition|(
name|retainedActions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|NO_REQS_RESULT
return|;
return|return
name|submitMultiActions
argument_list|(
name|task
argument_list|,
name|retainedActions
argument_list|,
name|nonceGroup
argument_list|,
name|locationErrors
argument_list|,
name|locationErrorRows
argument_list|,
name|actionsByServer
argument_list|)
return|;
block|}
parameter_list|<
name|CResult
parameter_list|>
name|AsyncRequestFuture
name|submitMultiActions
parameter_list|(
name|AsyncProcessTask
name|task
parameter_list|,
name|List
argument_list|<
name|Action
argument_list|>
name|retainedActions
parameter_list|,
name|long
name|nonceGroup
parameter_list|,
name|List
argument_list|<
name|Exception
argument_list|>
name|locationErrors
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|locationErrorRows
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|MultiAction
argument_list|>
name|actionsByServer
parameter_list|)
block|{
name|AsyncRequestFutureImpl
argument_list|<
name|CResult
argument_list|>
name|ars
init|=
name|createAsyncRequestFuture
argument_list|(
name|task
argument_list|,
name|retainedActions
argument_list|,
name|nonceGroup
argument_list|)
decl_stmt|;
comment|// Add location errors if any
if|if
condition|(
name|locationErrors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locationErrors
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|originalIndex
init|=
name|locationErrorRows
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Row
name|row
init|=
name|retainedActions
operator|.
name|get
argument_list|(
name|originalIndex
argument_list|)
operator|.
name|getAction
argument_list|()
decl_stmt|;
name|ars
operator|.
name|manageError
argument_list|(
name|originalIndex
argument_list|,
name|row
argument_list|,
name|AsyncRequestFutureImpl
operator|.
name|Retry
operator|.
name|NO_LOCATION_PROBLEM
argument_list|,
name|locationErrors
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|ars
operator|.
name|sendMultiAction
argument_list|(
name|actionsByServer
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|ars
return|;
block|}
comment|/**    * Helper that is used when grouping the actions per region server.    *    * @param server - server    * @param regionName - regionName    * @param action - the action to add to the multiaction    * @param actionsByServer the multiaction per server    * @param nonceGroup Nonce group.    */
specifier|static
name|void
name|addAction
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|,
name|Action
name|action
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|MultiAction
argument_list|>
name|actionsByServer
parameter_list|,
name|long
name|nonceGroup
parameter_list|)
block|{
name|MultiAction
name|multiAction
init|=
name|actionsByServer
operator|.
name|get
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|multiAction
operator|==
literal|null
condition|)
block|{
name|multiAction
operator|=
operator|new
name|MultiAction
argument_list|()
expr_stmt|;
name|actionsByServer
operator|.
name|put
argument_list|(
name|server
argument_list|,
name|multiAction
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|.
name|hasNonce
argument_list|()
operator|&&
operator|!
name|multiAction
operator|.
name|hasNonceGroup
argument_list|()
condition|)
block|{
name|multiAction
operator|.
name|setNonceGroup
argument_list|(
name|nonceGroup
argument_list|)
expr_stmt|;
block|}
name|multiAction
operator|.
name|add
argument_list|(
name|regionName
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
comment|/**    * Submit immediately the list of rows, whatever the server status. Kept for backward    * compatibility: it allows to be used with the batch interface that return an array of objects.    * @param task The setting and data    */
specifier|private
parameter_list|<
name|CResult
parameter_list|>
name|AsyncRequestFuture
name|submitAll
parameter_list|(
name|AsyncProcessTask
name|task
parameter_list|)
block|{
name|RowAccess
argument_list|<
name|?
extends|extends
name|Row
argument_list|>
name|rows
init|=
name|task
operator|.
name|getRowAccess
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Action
argument_list|>
name|actions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rows
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// The position will be used by the processBatch to match the object array returned.
name|int
name|posInList
init|=
operator|-
literal|1
decl_stmt|;
name|NonceGenerator
name|ng
init|=
name|this
operator|.
name|connection
operator|.
name|getNonceGenerator
argument_list|()
decl_stmt|;
name|int
name|highestPriority
init|=
name|HConstants
operator|.
name|PRIORITY_UNSET
decl_stmt|;
for|for
control|(
name|Row
name|r
range|:
name|rows
control|)
block|{
name|posInList
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|Put
condition|)
block|{
name|Put
name|put
init|=
operator|(
name|Put
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|put
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No columns to insert for #"
operator|+
operator|(
name|posInList
operator|+
literal|1
operator|)
operator|+
literal|" item"
argument_list|)
throw|;
block|}
name|highestPriority
operator|=
name|Math
operator|.
name|max
argument_list|(
name|put
operator|.
name|getPriority
argument_list|()
argument_list|,
name|highestPriority
argument_list|)
expr_stmt|;
block|}
name|Action
name|action
init|=
operator|new
name|Action
argument_list|(
name|r
argument_list|,
name|posInList
argument_list|,
name|highestPriority
argument_list|)
decl_stmt|;
name|setNonce
argument_list|(
name|ng
argument_list|,
name|r
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
name|AsyncRequestFutureImpl
argument_list|<
name|CResult
argument_list|>
name|ars
init|=
name|createAsyncRequestFuture
argument_list|(
name|task
argument_list|,
name|actions
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|)
decl_stmt|;
name|ars
operator|.
name|groupAndSendMultiAction
argument_list|(
name|actions
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|ars
return|;
block|}
specifier|private
parameter_list|<
name|CResult
parameter_list|>
name|AsyncRequestFuture
name|checkTask
parameter_list|(
name|AsyncProcessTask
argument_list|<
name|CResult
argument_list|>
name|task
parameter_list|)
block|{
if|if
condition|(
name|task
operator|.
name|getRowAccess
argument_list|()
operator|==
literal|null
operator|||
name|task
operator|.
name|getRowAccess
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|NO_REQS_RESULT
return|;
block|}
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|task
operator|.
name|getPool
argument_list|()
argument_list|,
literal|"The pool can't be NULL"
argument_list|)
expr_stmt|;
name|checkOperationTimeout
argument_list|(
name|task
operator|.
name|getOperationTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|checkRpcTimeout
argument_list|(
name|task
operator|.
name|getRpcTimeout
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|setNonce
parameter_list|(
name|NonceGenerator
name|ng
parameter_list|,
name|Row
name|r
parameter_list|,
name|Action
name|action
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|Append
operator|)
operator|&&
operator|!
operator|(
name|r
operator|instanceof
name|Increment
operator|)
condition|)
return|return;
name|action
operator|.
name|setNonce
argument_list|(
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
expr_stmt|;
comment|// Action handles NO_NONCE, so it's ok if ng is disabled.
block|}
specifier|private
name|int
name|checkTimeout
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
if|if
condition|(
name|timeout
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The "
operator|+
name|name
operator|+
literal|" must be bigger than zero,"
operator|+
literal|"current value is"
operator|+
name|timeout
argument_list|)
throw|;
block|}
return|return
name|timeout
return|;
block|}
specifier|private
name|int
name|checkOperationTimeout
parameter_list|(
name|int
name|operationTimeout
parameter_list|)
block|{
return|return
name|checkTimeout
argument_list|(
literal|"operation timeout"
argument_list|,
name|operationTimeout
argument_list|)
return|;
block|}
specifier|private
name|int
name|checkRpcTimeout
parameter_list|(
name|int
name|rpcTimeout
parameter_list|)
block|{
return|return
name|checkTimeout
argument_list|(
literal|"rpc timeout"
argument_list|,
name|rpcTimeout
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
argument_list|<
name|CResult
argument_list|>
name|AsyncRequestFutureImpl
argument_list|<
name|CResult
argument_list|>
name|createAsyncRequestFuture
parameter_list|(
name|AsyncProcessTask
name|task
parameter_list|,
name|List
argument_list|<
name|Action
argument_list|>
name|actions
parameter_list|,
name|long
name|nonceGroup
parameter_list|)
block|{
return|return
operator|new
name|AsyncRequestFutureImpl
argument_list|<>
argument_list|(
name|task
argument_list|,
name|actions
argument_list|,
name|nonceGroup
argument_list|,
name|this
argument_list|)
return|;
block|}
comment|/** Wait until the async does not have more than max tasks in progress. */
specifier|protected
name|void
name|waitForMaximumCurrentTasks
parameter_list|(
name|int
name|max
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
name|requestController
operator|.
name|waitForMaximumCurrentTasks
argument_list|(
name|max
argument_list|,
name|id
argument_list|,
name|periodToLog
argument_list|,
name|getLogger
argument_list|(
name|tableName
argument_list|,
name|max
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Consumer
argument_list|<
name|Long
argument_list|>
name|getLogger
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|long
name|max
parameter_list|)
block|{
return|return
parameter_list|(
name|currentInProgress
parameter_list|)
lambda|->
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"#"
operator|+
name|id
operator|+
operator|(
name|max
operator|<
literal|0
condition|?
literal|", waiting for any free slot"
else|:
literal|", waiting for some tasks to finish. Expected max="
operator|+
name|max
operator|)
operator|+
literal|", tasksInProgress="
operator|+
name|currentInProgress
operator|+
operator|(
name|tableName
operator|==
literal|null
condition|?
literal|""
else|:
literal|", tableName="
operator|+
name|tableName
operator|)
argument_list|)
expr_stmt|;
block|}
return|;
block|}
name|void
name|incTaskCounters
parameter_list|(
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|regions
parameter_list|,
name|ServerName
name|sn
parameter_list|)
block|{
name|requestController
operator|.
name|incTaskCounters
argument_list|(
name|regions
argument_list|,
name|sn
argument_list|)
expr_stmt|;
block|}
name|void
name|decTaskCounters
parameter_list|(
name|Collection
argument_list|<
name|byte
index|[]
argument_list|>
name|regions
parameter_list|,
name|ServerName
name|sn
parameter_list|)
block|{
name|requestController
operator|.
name|decTaskCounters
argument_list|(
name|regions
argument_list|,
name|sn
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a caller. Isolated to be easily overridden in the tests.    */
annotation|@
name|VisibleForTesting
specifier|protected
name|RpcRetryingCaller
argument_list|<
name|AbstractResponse
argument_list|>
name|createCaller
parameter_list|(
name|CancellableRegionServerCallable
name|callable
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
block|{
return|return
name|rpcCallerFactory
operator|.
expr|<
name|AbstractResponse
operator|>
name|newCaller
argument_list|(
name|checkRpcTimeout
argument_list|(
name|rpcTimeout
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Creates the server error tracker to use inside process.    * Currently, to preserve the main assumption about current retries, and to work well with    * the retry-limit-based calculation, the calculation is local per Process object.    * We may benefit from connection-wide tracking of server errors.    * @return ServerErrorTracker to use, null if there is no ServerErrorTracker on this connection    */
name|ConnectionImplementation
operator|.
name|ServerErrorTracker
name|createServerErrorTracker
parameter_list|()
block|{
return|return
operator|new
name|ConnectionImplementation
operator|.
name|ServerErrorTracker
argument_list|(
name|this
operator|.
name|serverTrackerTimeout
argument_list|,
name|this
operator|.
name|numTries
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|isReplicaGet
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
return|return
operator|(
name|row
operator|instanceof
name|Get
operator|)
operator|&&
operator|(
operator|(
operator|(
name|Get
operator|)
name|row
operator|)
operator|.
name|getConsistency
argument_list|()
operator|==
name|Consistency
operator|.
name|TIMELINE
operator|)
return|;
block|}
block|}
end_class

end_unit

