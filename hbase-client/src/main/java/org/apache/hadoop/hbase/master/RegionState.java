begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  * State of a Region while undergoing transitions.  * Region state cannot be modified except the stamp field.  * So it is almost immutable.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionState
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
block|{
specifier|public
enum|enum
name|State
block|{
name|OFFLINE
block|,
comment|// region is in an offline state
name|PENDING_OPEN
block|,
comment|// sent rpc to server to open but has not begun
name|OPENING
block|,
comment|// server has begun to open but not yet done
name|OPEN
block|,
comment|// server opened region and updated meta
name|PENDING_CLOSE
block|,
comment|// sent rpc to server to close but has not begun
name|CLOSING
block|,
comment|// server has begun to close but not yet done
name|CLOSED
block|,
comment|// server closed region and updated meta
name|SPLITTING
block|,
comment|// server started split of a region
name|SPLIT
block|,
comment|// server completed split of a region
name|FAILED_OPEN
block|,
comment|// failed to open, and won't retry any more
name|FAILED_CLOSE
block|,
comment|// failed to close, and won't retry any more
name|MERGING
block|,
comment|// server started merge a region
name|MERGED
comment|// server completed merge a region
block|}
comment|// Many threads can update the state at the stamp at the same time
specifier|private
specifier|final
name|AtomicLong
name|stamp
decl_stmt|;
specifier|private
name|HRegionInfo
name|hri
decl_stmt|;
specifier|private
specifier|volatile
name|ServerName
name|serverName
decl_stmt|;
specifier|private
specifier|volatile
name|State
name|state
decl_stmt|;
specifier|public
name|RegionState
parameter_list|()
block|{
name|this
operator|.
name|stamp
operator|=
operator|new
name|AtomicLong
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RegionState
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|State
name|state
parameter_list|)
block|{
name|this
argument_list|(
name|region
argument_list|,
name|state
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RegionState
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
name|State
name|state
parameter_list|,
name|long
name|stamp
parameter_list|,
name|ServerName
name|serverName
parameter_list|)
block|{
name|this
operator|.
name|hri
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|stamp
operator|=
operator|new
name|AtomicLong
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverName
operator|=
name|serverName
expr_stmt|;
block|}
specifier|public
name|void
name|updateTimestampToNow
parameter_list|()
block|{
name|setTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|State
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
specifier|public
name|long
name|getStamp
parameter_list|()
block|{
return|return
name|stamp
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|HRegionInfo
name|getRegion
parameter_list|()
block|{
return|return
name|hri
return|;
block|}
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
name|serverName
return|;
block|}
specifier|public
name|boolean
name|isClosing
parameter_list|()
block|{
return|return
name|state
operator|==
name|State
operator|.
name|CLOSING
return|;
block|}
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|state
operator|==
name|State
operator|.
name|CLOSED
return|;
block|}
specifier|public
name|boolean
name|isPendingClose
parameter_list|()
block|{
return|return
name|state
operator|==
name|State
operator|.
name|PENDING_CLOSE
return|;
block|}
specifier|public
name|boolean
name|isOpening
parameter_list|()
block|{
return|return
name|state
operator|==
name|State
operator|.
name|OPENING
return|;
block|}
specifier|public
name|boolean
name|isOpened
parameter_list|()
block|{
return|return
name|state
operator|==
name|State
operator|.
name|OPEN
return|;
block|}
specifier|public
name|boolean
name|isPendingOpen
parameter_list|()
block|{
return|return
name|state
operator|==
name|State
operator|.
name|PENDING_OPEN
return|;
block|}
specifier|public
name|boolean
name|isOffline
parameter_list|()
block|{
return|return
name|state
operator|==
name|State
operator|.
name|OFFLINE
return|;
block|}
specifier|public
name|boolean
name|isSplitting
parameter_list|()
block|{
return|return
name|state
operator|==
name|State
operator|.
name|SPLITTING
return|;
block|}
specifier|public
name|boolean
name|isSplit
parameter_list|()
block|{
return|return
name|state
operator|==
name|State
operator|.
name|SPLIT
return|;
block|}
specifier|public
name|boolean
name|isFailedOpen
parameter_list|()
block|{
return|return
name|state
operator|==
name|State
operator|.
name|FAILED_OPEN
return|;
block|}
specifier|public
name|boolean
name|isFailedClose
parameter_list|()
block|{
return|return
name|state
operator|==
name|State
operator|.
name|FAILED_CLOSE
return|;
block|}
specifier|public
name|boolean
name|isMerging
parameter_list|()
block|{
return|return
name|state
operator|==
name|State
operator|.
name|MERGING
return|;
block|}
specifier|public
name|boolean
name|isMerged
parameter_list|()
block|{
return|return
name|state
operator|==
name|State
operator|.
name|MERGED
return|;
block|}
specifier|public
name|boolean
name|isOpenOrMergingOnServer
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
block|{
return|return
name|isOnServer
argument_list|(
name|sn
argument_list|)
operator|&&
operator|(
name|isOpened
argument_list|()
operator|||
name|isMerging
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|isPendingOpenOrOpeningOnServer
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
block|{
return|return
name|isOnServer
argument_list|(
name|sn
argument_list|)
operator|&&
operator|(
name|isPendingOpen
argument_list|()
operator|||
name|isOpening
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|isPendingCloseOrClosingOnServer
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
block|{
return|return
name|isOnServer
argument_list|(
name|sn
argument_list|)
operator|&&
operator|(
name|isPendingClose
argument_list|()
operator|||
name|isClosing
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|isOnServer
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
block|{
return|return
name|serverName
operator|!=
literal|null
operator|&&
name|serverName
operator|.
name|equals
argument_list|(
name|sn
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{"
operator|+
name|hri
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|" state="
operator|+
name|state
operator|+
literal|", ts="
operator|+
name|stamp
operator|+
literal|", server="
operator|+
name|serverName
operator|+
literal|"}"
return|;
block|}
comment|/**    * A slower (but more easy-to-read) stringification     */
specifier|public
name|String
name|toDescriptiveString
parameter_list|()
block|{
name|long
name|lstamp
init|=
name|stamp
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|relTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lstamp
decl_stmt|;
return|return
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" state="
operator|+
name|state
operator|+
literal|", ts="
operator|+
operator|new
name|Date
argument_list|(
name|lstamp
argument_list|)
operator|+
literal|" ("
operator|+
operator|(
name|relTime
operator|/
literal|1000
operator|)
operator|+
literal|"s ago)"
operator|+
literal|", server="
operator|+
name|serverName
return|;
block|}
comment|/**    * Convert a RegionState to an HBaseProtos.RegionState    *    * @return the converted HBaseProtos.RegionState    */
specifier|public
name|ClusterStatusProtos
operator|.
name|RegionState
name|convert
parameter_list|()
block|{
name|ClusterStatusProtos
operator|.
name|RegionState
operator|.
name|Builder
name|regionState
init|=
name|ClusterStatusProtos
operator|.
name|RegionState
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ClusterStatusProtos
operator|.
name|RegionState
operator|.
name|State
name|rs
decl_stmt|;
switch|switch
condition|(
name|regionState
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|OFFLINE
case|:
name|rs
operator|=
name|ClusterStatusProtos
operator|.
name|RegionState
operator|.
name|State
operator|.
name|OFFLINE
expr_stmt|;
break|break;
case|case
name|PENDING_OPEN
case|:
name|rs
operator|=
name|ClusterStatusProtos
operator|.
name|RegionState
operator|.
name|State
operator|.
name|PENDING_OPEN
expr_stmt|;
break|break;
case|case
name|OPENING
case|:
name|rs
operator|=
name|ClusterStatusProtos
operator|.
name|RegionState
operator|.
name|State
operator|.
name|OPENING
expr_stmt|;
break|break;
case|case
name|OPEN
case|:
name|rs
operator|=
name|ClusterStatusProtos
operator|.
name|RegionState
operator|.
name|State
operator|.
name|OPEN
expr_stmt|;
break|break;
case|case
name|PENDING_CLOSE
case|:
name|rs
operator|=
name|ClusterStatusProtos
operator|.
name|RegionState
operator|.
name|State
operator|.
name|PENDING_CLOSE
expr_stmt|;
break|break;
case|case
name|CLOSING
case|:
name|rs
operator|=
name|ClusterStatusProtos
operator|.
name|RegionState
operator|.
name|State
operator|.
name|CLOSING
expr_stmt|;
break|break;
case|case
name|CLOSED
case|:
name|rs
operator|=
name|ClusterStatusProtos
operator|.
name|RegionState
operator|.
name|State
operator|.
name|CLOSED
expr_stmt|;
break|break;
case|case
name|SPLITTING
case|:
name|rs
operator|=
name|ClusterStatusProtos
operator|.
name|RegionState
operator|.
name|State
operator|.
name|SPLITTING
expr_stmt|;
break|break;
case|case
name|SPLIT
case|:
name|rs
operator|=
name|ClusterStatusProtos
operator|.
name|RegionState
operator|.
name|State
operator|.
name|SPLIT
expr_stmt|;
break|break;
case|case
name|FAILED_OPEN
case|:
name|rs
operator|=
name|ClusterStatusProtos
operator|.
name|RegionState
operator|.
name|State
operator|.
name|FAILED_OPEN
expr_stmt|;
break|break;
case|case
name|FAILED_CLOSE
case|:
name|rs
operator|=
name|ClusterStatusProtos
operator|.
name|RegionState
operator|.
name|State
operator|.
name|FAILED_CLOSE
expr_stmt|;
break|break;
case|case
name|MERGING
case|:
name|rs
operator|=
name|ClusterStatusProtos
operator|.
name|RegionState
operator|.
name|State
operator|.
name|MERGING
expr_stmt|;
break|break;
case|case
name|MERGED
case|:
name|rs
operator|=
name|ClusterStatusProtos
operator|.
name|RegionState
operator|.
name|State
operator|.
name|MERGED
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|""
argument_list|)
throw|;
block|}
name|regionState
operator|.
name|setRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|regionState
operator|.
name|setState
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|regionState
operator|.
name|setStamp
argument_list|(
name|getStamp
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|regionState
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protobuf HBaseProtos.RegionState to a RegionState    *    * @return the RegionState    */
specifier|public
specifier|static
name|RegionState
name|convert
parameter_list|(
name|ClusterStatusProtos
operator|.
name|RegionState
name|proto
parameter_list|)
block|{
name|RegionState
operator|.
name|State
name|state
decl_stmt|;
switch|switch
condition|(
name|proto
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|OFFLINE
case|:
name|state
operator|=
name|State
operator|.
name|OFFLINE
expr_stmt|;
break|break;
case|case
name|PENDING_OPEN
case|:
name|state
operator|=
name|State
operator|.
name|PENDING_OPEN
expr_stmt|;
break|break;
case|case
name|OPENING
case|:
name|state
operator|=
name|State
operator|.
name|OPENING
expr_stmt|;
break|break;
case|case
name|OPEN
case|:
name|state
operator|=
name|State
operator|.
name|OPEN
expr_stmt|;
break|break;
case|case
name|PENDING_CLOSE
case|:
name|state
operator|=
name|State
operator|.
name|PENDING_CLOSE
expr_stmt|;
break|break;
case|case
name|CLOSING
case|:
name|state
operator|=
name|State
operator|.
name|CLOSING
expr_stmt|;
break|break;
case|case
name|CLOSED
case|:
name|state
operator|=
name|State
operator|.
name|CLOSED
expr_stmt|;
break|break;
case|case
name|SPLITTING
case|:
name|state
operator|=
name|State
operator|.
name|SPLITTING
expr_stmt|;
break|break;
case|case
name|SPLIT
case|:
name|state
operator|=
name|State
operator|.
name|SPLIT
expr_stmt|;
break|break;
case|case
name|FAILED_OPEN
case|:
name|state
operator|=
name|State
operator|.
name|FAILED_OPEN
expr_stmt|;
break|break;
case|case
name|FAILED_CLOSE
case|:
name|state
operator|=
name|State
operator|.
name|FAILED_CLOSE
expr_stmt|;
break|break;
case|case
name|MERGING
case|:
name|state
operator|=
name|State
operator|.
name|MERGING
expr_stmt|;
break|break;
case|case
name|MERGED
case|:
name|state
operator|=
name|State
operator|.
name|MERGED
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|""
argument_list|)
throw|;
block|}
return|return
operator|new
name|RegionState
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
argument_list|,
name|state
argument_list|,
name|proto
operator|.
name|getStamp
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|void
name|setTimestamp
parameter_list|(
specifier|final
name|long
name|timestamp
parameter_list|)
block|{
name|stamp
operator|.
name|set
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
comment|/**    * @deprecated Writables are going away    */
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|hri
operator|=
operator|new
name|HRegionInfo
argument_list|()
expr_stmt|;
name|hri
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|readUTF
argument_list|()
argument_list|)
expr_stmt|;
name|stamp
operator|.
name|set
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @deprecated Writables are going away    */
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|hri
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|state
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|stamp
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

