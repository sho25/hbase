begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|HashedWheelTimer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Factory to create an AsyncRpcRetryCaller.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|AsyncRpcRetryingCallerFactory
block|{
specifier|private
specifier|final
name|AsyncConnectionImpl
name|conn
decl_stmt|;
specifier|private
specifier|final
name|HashedWheelTimer
name|retryTimer
decl_stmt|;
specifier|public
name|AsyncRpcRetryingCallerFactory
parameter_list|(
name|AsyncConnectionImpl
name|conn
parameter_list|,
name|HashedWheelTimer
name|retryTimer
parameter_list|)
block|{
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|retryTimer
operator|=
name|retryTimer
expr_stmt|;
block|}
specifier|public
class|class
name|SingleRequestCallerBuilder
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
name|TableName
name|tableName
decl_stmt|;
specifier|private
name|byte
index|[]
name|row
decl_stmt|;
specifier|private
name|AsyncSingleRequestRpcRetryingCaller
operator|.
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
decl_stmt|;
specifier|private
name|long
name|operationTimeoutNs
init|=
operator|-
literal|1L
decl_stmt|;
specifier|private
name|long
name|rpcTimeoutNs
init|=
operator|-
literal|1L
decl_stmt|;
specifier|public
name|SingleRequestCallerBuilder
argument_list|<
name|T
argument_list|>
name|table
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SingleRequestCallerBuilder
argument_list|<
name|T
argument_list|>
name|row
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SingleRequestCallerBuilder
argument_list|<
name|T
argument_list|>
name|action
parameter_list|(
name|AsyncSingleRequestRpcRetryingCaller
operator|.
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
block|{
name|this
operator|.
name|callable
operator|=
name|callable
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SingleRequestCallerBuilder
argument_list|<
name|T
argument_list|>
name|operationTimeout
parameter_list|(
name|long
name|operationTimeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|this
operator|.
name|operationTimeoutNs
operator|=
name|unit
operator|.
name|toNanos
argument_list|(
name|operationTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SingleRequestCallerBuilder
argument_list|<
name|T
argument_list|>
name|rpcTimeout
parameter_list|(
name|long
name|rpcTimeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|this
operator|.
name|rpcTimeoutNs
operator|=
name|unit
operator|.
name|toNanos
argument_list|(
name|rpcTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|AsyncSingleRequestRpcRetryingCaller
argument_list|<
name|T
argument_list|>
name|build
parameter_list|()
block|{
return|return
operator|new
name|AsyncSingleRequestRpcRetryingCaller
argument_list|<>
argument_list|(
name|retryTimer
argument_list|,
name|conn
argument_list|,
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|tableName
argument_list|,
literal|"tableName is null"
argument_list|)
argument_list|,
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|row
argument_list|,
literal|"row is null"
argument_list|)
argument_list|,
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|callable
argument_list|,
literal|"action is null"
argument_list|)
argument_list|,
name|conn
operator|.
name|connConf
operator|.
name|getPauseNs
argument_list|()
argument_list|,
name|conn
operator|.
name|connConf
operator|.
name|getMaxRetries
argument_list|()
argument_list|,
name|operationTimeoutNs
argument_list|,
name|rpcTimeoutNs
argument_list|,
name|conn
operator|.
name|connConf
operator|.
name|getStartLogErrorsCnt
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Shortcut for {@code build().call()}      */
specifier|public
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|call
parameter_list|()
block|{
return|return
name|build
argument_list|()
operator|.
name|call
argument_list|()
return|;
block|}
block|}
comment|/**    * Create retry caller for single action, such as get, put, delete, etc.    */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|SingleRequestCallerBuilder
argument_list|<
name|T
argument_list|>
name|single
parameter_list|()
block|{
return|return
operator|new
name|SingleRequestCallerBuilder
argument_list|<>
argument_list|()
return|;
block|}
block|}
end_class

end_unit

