begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MultiRowMutationProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PairOfSameType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Read/write operations on region and assignment information store in  *<code>hbase:meta</code>.  *  * Some of the methods of this class take ZooKeeperWatcher as a param. The only reason  * for this is because when used on client-side (like from HBaseAdmin), we want to use  * short-living connection (opened before each operation, closed right after), while  * when used on HM or HRS (like in AssignmentManager) we want permanent connection.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetaTableAccessor
block|{
comment|/*    * HBASE-10070 adds a replicaId to HRI, meaning more than one HRI can be defined for the    * same table range (table, startKey, endKey). For every range, there will be at least one    * HRI defined which is called default replica.    *    * Meta layout (as of 0.98 + HBASE-10070) is like:    * For each table range, there is a single row, formatted like:    *<tableName>,<startKey>,<regionId>,<encodedRegionName>. This row corresponds to the regionName    * of the default region replica.    * Columns are:    * info:regioninfo         => contains serialized HRI for the default region replica    * info:server             => contains hostname:port (in string form) for the server hosting    *                            the default regionInfo replica    * info:server_<replicaId> => contains hostname:port (in string form) for the server hosting the    *                            regionInfo replica with replicaId    * info:serverstartcode    => contains server start code (in binary long form) for the server    *                            hosting the default regionInfo replica    * info:serverstartcode_<replicaId> => contains server start code (in binary long form) for the    *                                     server hosting the regionInfo replica with replicaId    * info:seqnumDuringOpen    => contains seqNum (in binary long form) for the region at the time    *                             the server opened the region with default replicaId    * info:seqnumDuringOpen_<replicaId> => contains seqNum (in binary long form) for the region at    *                             the time the server opened the region with replicaId    * info:splitA              => contains a serialized HRI for the first daughter region if the    *                             region is split    * info:splitB              => contains a serialized HRI for the second daughter region if the    *                             region is split    * info:mergeA              => contains a serialized HRI for the first parent region if the    *                             region is the result of a merge    * info:mergeB              => contains a serialized HRI for the second parent region if the    *                             region is the result of a merge    *    * The actual layout of meta should be encapsulated inside MetaTableAccessor methods,    * and should not leak out of it (through Result objects, etc)    */
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MetaTableAccessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|META_REGION_PREFIX
decl_stmt|;
static|static
block|{
comment|// Copy the prefix from FIRST_META_REGIONINFO into META_REGION_PREFIX.
comment|// FIRST_META_REGIONINFO == 'hbase:meta,,1'.  META_REGION_PREFIX == 'hbase:meta,'
name|int
name|len
init|=
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
operator|.
name|length
operator|-
literal|2
decl_stmt|;
name|META_REGION_PREFIX
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|META_REGION_PREFIX
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
comment|/** The delimiter for meta columns for replicaIds> 0 */
specifier|protected
specifier|static
specifier|final
name|char
name|META_REPLICA_ID_DELIMITER
init|=
literal|'_'
decl_stmt|;
comment|/** A regex for parsing server columns from meta. See above javadoc for meta layout */
specifier|private
specifier|static
specifier|final
name|Pattern
name|SERVER_COLUMN_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^server(_[0-9a-fA-F]{4})?$"
argument_list|)
decl_stmt|;
comment|////////////////////////
comment|// Reading operations //
comment|////////////////////////
comment|/**    * Performs a full scan of a<code>hbase:meta</code> table.    * @return List of {@link org.apache.hadoop.hbase.client.Result}    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|Result
argument_list|>
name|fullScanOfMeta
parameter_list|(
name|HConnection
name|hConnection
parameter_list|)
throws|throws
name|IOException
block|{
name|CollectAllVisitor
name|v
init|=
operator|new
name|CollectAllVisitor
argument_list|()
decl_stmt|;
name|fullScan
argument_list|(
name|hConnection
argument_list|,
name|v
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|v
operator|.
name|getResults
argument_list|()
return|;
block|}
comment|/**    * Performs a full scan of<code>hbase:meta</code>.    * @param hConnection connection we're using    * @param visitor Visitor invoked against each row.    * @throws IOException    */
specifier|public
specifier|static
name|void
name|fullScan
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
specifier|final
name|Visitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|fullScan
argument_list|(
name|hConnection
argument_list|,
name|visitor
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs a full scan of<code>hbase:meta</code>.    * @param hConnection connection we're using    * @return List of {@link Result}    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|Result
argument_list|>
name|fullScan
parameter_list|(
name|HConnection
name|hConnection
parameter_list|)
throws|throws
name|IOException
block|{
name|CollectAllVisitor
name|v
init|=
operator|new
name|CollectAllVisitor
argument_list|()
decl_stmt|;
name|fullScan
argument_list|(
name|hConnection
argument_list|,
name|v
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|v
operator|.
name|getResults
argument_list|()
return|;
block|}
comment|/**    * Callers should call close on the returned {@link HTable} instance.    * @param hConnection connection we're using to access table    * @param tableName Table to get an {@link org.apache.hadoop.hbase.client.HTable} against.    * @return An {@link org.apache.hadoop.hbase.client.HTable} for<code>tableName</code>    * @throws IOException    * @SuppressWarnings("deprecation")    */
specifier|private
specifier|static
name|Table
name|getHTable
parameter_list|(
specifier|final
name|HConnection
name|hConnection
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We used to pass whole CatalogTracker in here, now we just pass in HConnection
if|if
condition|(
name|hConnection
operator|==
literal|null
operator|||
name|hConnection
operator|.
name|isClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"No connection"
argument_list|)
throw|;
block|}
return|return
operator|new
name|HTable
argument_list|(
name|tableName
argument_list|,
name|hConnection
argument_list|)
return|;
block|}
comment|/**    * Callers should call close on the returned {@link HTable} instance.    * @param hConnection connection we're using to access Meta    * @return An {@link HTable} for<code>hbase:meta</code>    * @throws IOException    */
specifier|static
name|Table
name|getMetaHTable
parameter_list|(
specifier|final
name|HConnection
name|hConnection
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getHTable
argument_list|(
name|hConnection
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
return|;
block|}
comment|/**    * @param t Table to use (will be closed when done).    * @param g Get to run    * @throws IOException    */
specifier|private
specifier|static
name|Result
name|get
parameter_list|(
specifier|final
name|Table
name|t
parameter_list|,
specifier|final
name|Get
name|g
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
return|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Gets the region info and assignment for the specified region.    * @param hConnection connection we're using    * @param regionName Region to lookup.    * @return Location and HRegionInfo for<code>regionName</code>    * @throws IOException    * @deprecated use {@link #getRegionLocation(HConnection, byte[])} instead    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|getRegion
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionLocation
name|location
init|=
name|getRegionLocation
argument_list|(
name|hConnection
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
return|return
name|location
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|location
operator|.
name|getServerName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns the HRegionLocation from meta for the given region    * @param hConnection connection we're using    * @param regionName region we're looking for    * @return HRegionLocation for the given region    * @throws IOException    */
specifier|public
specifier|static
name|HRegionLocation
name|getRegionLocation
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|regionName
decl_stmt|;
name|HRegionInfo
name|parsedInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parsedInfo
operator|=
name|parseRegionInfoFromRegionName
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|row
operator|=
name|getMetaKeyForRegion
argument_list|(
name|parsedInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|parseEx
parameter_list|)
block|{
comment|// Ignore. This is used with tableName passed as regionName.
block|}
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|get
argument_list|(
name|getMetaHTable
argument_list|(
name|hConnection
argument_list|)
argument_list|,
name|get
argument_list|)
decl_stmt|;
name|RegionLocations
name|locations
init|=
name|getRegionLocations
argument_list|(
name|r
argument_list|)
decl_stmt|;
return|return
name|locations
operator|==
literal|null
condition|?
literal|null
else|:
name|locations
operator|.
name|getRegionLocation
argument_list|(
name|parsedInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|parsedInfo
operator|.
name|getReplicaId
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns the HRegionLocation from meta for the given region    * @param hConnection connection we're using    * @param regionInfo region information    * @return HRegionLocation for the given region    * @throws IOException    */
specifier|public
specifier|static
name|HRegionLocation
name|getRegionLocation
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|getMetaKeyForRegion
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|get
argument_list|(
name|getMetaHTable
argument_list|(
name|hConnection
argument_list|)
argument_list|,
name|get
argument_list|)
decl_stmt|;
return|return
name|getRegionLocation
argument_list|(
name|r
argument_list|,
name|regionInfo
argument_list|,
name|regionInfo
operator|.
name|getReplicaId
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns the row key to use for this regionInfo */
specifier|public
specifier|static
name|byte
index|[]
name|getMetaKeyForRegion
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|)
block|{
return|return
name|RegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|regionInfo
argument_list|)
operator|.
name|getRegionName
argument_list|()
return|;
block|}
comment|/** Returns an HRI parsed from this regionName. Not all the fields of the HRI    * is stored in the name, so the returned object should only be used for the fields    * in the regionName.    */
specifier|protected
specifier|static
name|HRegionInfo
name|parseRegionInfoFromRegionName
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|fields
init|=
name|HRegionInfo
operator|.
name|parseRegionName
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|long
name|regionId
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|fields
index|[
literal|2
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|replicaId
init|=
name|fields
operator|.
name|length
operator|>
literal|3
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|fields
index|[
literal|3
index|]
argument_list|)
argument_list|,
literal|16
argument_list|)
else|:
literal|0
decl_stmt|;
return|return
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|fields
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|fields
index|[
literal|1
index|]
argument_list|,
name|fields
index|[
literal|1
index|]
argument_list|,
literal|false
argument_list|,
name|regionId
argument_list|,
name|replicaId
argument_list|)
return|;
block|}
comment|/**    * Gets the result in hbase:meta for the specified region.    * @param hConnection connection we're using    * @param regionName region we're looking for    * @return result of the specified region    * @throws IOException    */
specifier|public
specifier|static
name|Result
name|getRegionResult
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
return|return
name|get
argument_list|(
name|getMetaHTable
argument_list|(
name|hConnection
argument_list|)
argument_list|,
name|get
argument_list|)
return|;
block|}
comment|/**    * Get regions from the merge qualifier of the specified merged region    * @return null if it doesn't contain merge qualifier, else two merge regions    * @throws IOException    */
specifier|public
specifier|static
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HRegionInfo
argument_list|>
name|getRegionsFromMergeQualifier
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|Result
name|result
init|=
name|getRegionResult
argument_list|(
name|hConnection
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|mergeA
init|=
name|getHRegionInfo
argument_list|(
name|result
argument_list|,
name|HConstants
operator|.
name|MERGEA_QUALIFIER
argument_list|)
decl_stmt|;
name|HRegionInfo
name|mergeB
init|=
name|getHRegionInfo
argument_list|(
name|result
argument_list|,
name|HConstants
operator|.
name|MERGEB_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeA
operator|==
literal|null
operator|&&
name|mergeB
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|HRegionInfo
argument_list|>
argument_list|(
name|mergeA
argument_list|,
name|mergeB
argument_list|)
return|;
block|}
comment|/**    * Checks if the specified table exists.  Looks at the hbase:meta table hosted on    * the specified server.    * @param hConnection connection we're using    * @param tableName table to check    * @return true if the table exists in meta, false if not    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|tableExists
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
comment|// Catalog tables always exist.
return|return
literal|true
return|;
block|}
comment|// Make a version of ResultCollectingVisitor that only collects the first
name|CollectingVisitor
argument_list|<
name|HRegionInfo
argument_list|>
name|visitor
init|=
operator|new
name|CollectingVisitor
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
block|{
specifier|private
name|HRegionInfo
name|current
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionLocations
name|locations
init|=
name|getRegionLocations
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|locations
operator|==
literal|null
operator|||
name|locations
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No serialized HRegionInfo in "
operator|+
name|r
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|this
operator|.
name|current
operator|=
name|locations
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|current
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No serialized HRegionInfo in "
operator|+
name|r
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|isInsideTable
argument_list|(
name|this
operator|.
name|current
argument_list|,
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// Else call super and add this Result to the collection.
name|super
operator|.
name|visit
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// Stop collecting regions from table after we get one.
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|void
name|add
parameter_list|(
name|Result
name|r
parameter_list|)
block|{
comment|// Add the current HRI.
name|this
operator|.
name|results
operator|.
name|add
argument_list|(
name|this
operator|.
name|current
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|fullScan
argument_list|(
name|hConnection
argument_list|,
name|visitor
argument_list|,
name|getTableStartRowForMeta
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// If visitor has results>= 1 then table exists.
return|return
name|visitor
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
literal|1
return|;
block|}
comment|/**    * Gets all of the regions of the specified table. Do not use this method    * to get meta table regions, use methods in MetaTableLocator instead.    * @param hConnection connection we're using    * @param tableName table we're looking for    * @return Ordered list of {@link HRegionInfo}.    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getTableRegions
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getTableRegions
argument_list|(
name|hConnection
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Gets all of the regions of the specified table. Do not use this method    * to get meta table regions, use methods in MetaTableLocator instead.    * @param hConnection connection we're using    * @param tableName table we're looking for    * @param excludeOfflinedSplitParents If true, do not include offlined split    * parents in the return.    * @return Ordered list of {@link HRegionInfo}.    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getTableRegions
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
name|TableName
name|tableName
parameter_list|,
specifier|final
name|boolean
name|excludeOfflinedSplitParents
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|getTableRegionsAndLocations
argument_list|(
name|hConnection
argument_list|,
name|tableName
argument_list|,
name|excludeOfflinedSplitParents
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|getListOfHRegionInfos
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|static
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getListOfHRegionInfos
parameter_list|(
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|pairs
parameter_list|)
block|{
if|if
condition|(
name|pairs
operator|==
literal|null
operator|||
name|pairs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|pairs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
range|:
name|pairs
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * @param current region of current table we're working with    * @param tableName table we're checking against    * @return True if<code>current</code> tablename is equal to    *<code>tableName</code>    */
specifier|static
name|boolean
name|isInsideTable
parameter_list|(
specifier|final
name|HRegionInfo
name|current
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|tableName
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getTable
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @param tableName table we're working with    * @return Place to start Scan in<code>hbase:meta</code> when passed a    *<code>tableName</code>; returns&lt;tableName&rt;&lt;,&rt;&lt;,&rt;    */
specifier|static
name|byte
index|[]
name|getTableStartRowForMeta
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|byte
index|[]
name|startRow
init|=
operator|new
name|byte
index|[
name|tableName
operator|.
name|getName
argument_list|()
operator|.
name|length
operator|+
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|startRow
argument_list|,
literal|0
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|startRow
index|[
name|startRow
operator|.
name|length
operator|-
literal|2
index|]
operator|=
name|HConstants
operator|.
name|DELIMITER
expr_stmt|;
name|startRow
index|[
name|startRow
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|HConstants
operator|.
name|DELIMITER
expr_stmt|;
return|return
name|startRow
return|;
block|}
comment|/**    * This method creates a Scan object that will only scan catalog rows that    * belong to the specified table. It doesn't specify any columns.    * This is a better alternative to just using a start row and scan until    * it hits a new table since that requires parsing the HRI to get the table    * name.    * @param tableName bytes of table's name    * @return configured Scan object    */
specifier|public
specifier|static
name|Scan
name|getScanForTableName
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|String
name|strName
init|=
name|tableName
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
comment|// Start key is just the table name with delimiters
name|byte
index|[]
name|startKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|strName
operator|+
literal|",,"
argument_list|)
decl_stmt|;
comment|// Stop key appends the smallest possible char to the table name
name|byte
index|[]
name|stopKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|strName
operator|+
literal|" ,,"
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|startKey
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|stopKey
argument_list|)
expr_stmt|;
return|return
name|scan
return|;
block|}
comment|/**    * Do not use this method to get meta table regions, use methods in MetaTableLocator instead.    * @param hConnection connection we're using    * @param tableName table we're looking for    * @return Return list of regioninfos and server.    * @throws IOException    * @throws InterruptedException    */
specifier|public
specifier|static
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|getTableRegionsAndLocations
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|getTableRegionsAndLocations
argument_list|(
name|hConnection
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Do not use this method to get meta table regions, use methods in MetaTableLocator instead.    * @param hConnection connection we're using    * @param tableName table to work with    * @return Return list of regioninfos and server addresses.    * @throws IOException    * @throws InterruptedException    */
specifier|public
specifier|static
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|getTableRegionsAndLocations
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|boolean
name|excludeOfflinedSplitParents
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"This method can't be used to locate meta regions;"
operator|+
literal|" use MetaTableLocator instead"
argument_list|)
throw|;
block|}
comment|// Make a version of CollectingVisitor that collects HRegionInfo and ServerAddress
name|CollectingVisitor
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|visitor
init|=
operator|new
name|CollectingVisitor
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|private
name|RegionLocations
name|current
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|current
operator|=
name|getRegionLocations
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
operator|||
name|current
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No serialized HRegionInfo in "
operator|+
name|r
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|HRegionInfo
name|hri
init|=
name|current
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isInsideTable
argument_list|(
name|hri
argument_list|,
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|excludeOfflinedSplitParents
operator|&&
name|hri
operator|.
name|isSplitParent
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// Else call super and add this Result to the collection.
return|return
name|super
operator|.
name|visit
argument_list|(
name|r
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|add
parameter_list|(
name|Result
name|r
parameter_list|)
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|HRegionLocation
name|loc
range|:
name|current
operator|.
name|getRegionLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|results
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|fullScan
argument_list|(
name|hConnection
argument_list|,
name|visitor
argument_list|,
name|getTableStartRowForMeta
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|visitor
operator|.
name|getResults
argument_list|()
return|;
block|}
comment|/**    * @param hConnection connection we're using    * @param serverName server whose regions we're interested in    * @return List of user regions installed on this server (does not include    * catalog regions).    * @throws IOException    */
specifier|public
specifier|static
name|NavigableMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
name|getServerUserRegions
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|NavigableMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
name|hris
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
argument_list|()
decl_stmt|;
comment|// Fill the above hris map with entries from hbase:meta that have the passed
comment|// servername.
name|CollectingVisitor
argument_list|<
name|Result
argument_list|>
name|v
init|=
operator|new
name|CollectingVisitor
argument_list|<
name|Result
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|void
name|add
parameter_list|(
name|Result
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|RegionLocations
name|locations
init|=
name|getRegionLocations
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|locations
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|HRegionLocation
name|loc
range|:
name|locations
operator|.
name|getRegionLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|loc
operator|.
name|getServerName
argument_list|()
operator|!=
literal|null
operator|&&
name|loc
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
name|hris
operator|.
name|put
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
decl_stmt|;
name|fullScan
argument_list|(
name|hConnection
argument_list|,
name|v
argument_list|)
expr_stmt|;
return|return
name|hris
return|;
block|}
specifier|public
specifier|static
name|void
name|fullScanMetaAndPrint
parameter_list|(
name|HConnection
name|hConnection
parameter_list|)
throws|throws
name|IOException
block|{
name|Visitor
name|v
init|=
operator|new
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
name|LOG
operator|.
name|info
argument_list|(
literal|"fullScanMetaAndPrint.Current Meta Row: "
operator|+
name|r
argument_list|)
expr_stmt|;
name|RegionLocations
name|locations
init|=
name|getRegionLocations
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|locations
operator|==
literal|null
condition|)
return|return
literal|true
return|;
for|for
control|(
name|HRegionLocation
name|loc
range|:
name|locations
operator|.
name|getRegionLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"fullScanMetaAndPrint.HRI Print= "
operator|+
name|loc
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|fullScan
argument_list|(
name|hConnection
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs a full scan of a catalog table.    * @param hConnection connection we're using    * @param visitor Visitor invoked against each row.    * @param startrow Where to start the scan. Pass null if want to begin scan    * at first row.    *<code>hbase:meta</code>, the default (pass false to scan hbase:meta)    * @throws IOException    */
specifier|public
specifier|static
name|void
name|fullScan
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
specifier|final
name|Visitor
name|visitor
parameter_list|,
specifier|final
name|byte
index|[]
name|startrow
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
if|if
condition|(
name|startrow
operator|!=
literal|null
condition|)
name|scan
operator|.
name|setStartRow
argument_list|(
name|startrow
argument_list|)
expr_stmt|;
if|if
condition|(
name|startrow
operator|==
literal|null
condition|)
block|{
name|int
name|caching
init|=
name|hConnection
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_META_SCANNER_CACHING
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
name|caching
argument_list|)
expr_stmt|;
block|}
name|scan
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|Table
name|metaTable
init|=
name|getMetaHTable
argument_list|(
name|hConnection
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|scanner
operator|=
name|metaTable
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|Result
name|data
decl_stmt|;
while|while
condition|(
operator|(
name|data
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
comment|// Break if visit returns false.
if|if
condition|(
operator|!
name|visitor
operator|.
name|visit
argument_list|(
name|data
argument_list|)
condition|)
break|break;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|metaTable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns the column family used for meta columns.    * @return HConstants.CATALOG_FAMILY.    */
specifier|protected
specifier|static
name|byte
index|[]
name|getFamily
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|CATALOG_FAMILY
return|;
block|}
comment|/**    * Returns the column qualifier for serialized region info    * @return HConstants.REGIONINFO_QUALIFIER    */
specifier|protected
specifier|static
name|byte
index|[]
name|getRegionInfoColumn
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
return|;
block|}
comment|/**    * Returns the column qualifier for server column for replicaId    * @param replicaId the replicaId of the region    * @return a byte[] for server column qualifier    */
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|byte
index|[]
name|getServerColumn
parameter_list|(
name|int
name|replicaId
parameter_list|)
block|{
return|return
name|replicaId
operator|==
literal|0
condition|?
name|HConstants
operator|.
name|SERVER_QUALIFIER
else|:
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HConstants
operator|.
name|SERVER_QUALIFIER_STR
operator|+
name|META_REPLICA_ID_DELIMITER
operator|+
name|String
operator|.
name|format
argument_list|(
name|HRegionInfo
operator|.
name|REPLICA_ID_FORMAT
argument_list|,
name|replicaId
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns the column qualifier for server start code column for replicaId    * @param replicaId the replicaId of the region    * @return a byte[] for server start code column qualifier    */
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|byte
index|[]
name|getStartCodeColumn
parameter_list|(
name|int
name|replicaId
parameter_list|)
block|{
return|return
name|replicaId
operator|==
literal|0
condition|?
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
else|:
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HConstants
operator|.
name|STARTCODE_QUALIFIER_STR
operator|+
name|META_REPLICA_ID_DELIMITER
operator|+
name|String
operator|.
name|format
argument_list|(
name|HRegionInfo
operator|.
name|REPLICA_ID_FORMAT
argument_list|,
name|replicaId
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns the column qualifier for seqNum column for replicaId    * @param replicaId the replicaId of the region    * @return a byte[] for seqNum column qualifier    */
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|byte
index|[]
name|getSeqNumColumn
parameter_list|(
name|int
name|replicaId
parameter_list|)
block|{
return|return
name|replicaId
operator|==
literal|0
condition|?
name|HConstants
operator|.
name|SEQNUM_QUALIFIER
else|:
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HConstants
operator|.
name|SEQNUM_QUALIFIER_STR
operator|+
name|META_REPLICA_ID_DELIMITER
operator|+
name|String
operator|.
name|format
argument_list|(
name|HRegionInfo
operator|.
name|REPLICA_ID_FORMAT
argument_list|,
name|replicaId
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Parses the replicaId from the server column qualifier. See top of the class javadoc    * for the actual meta layout    * @param serverColumn the column qualifier    * @return an int for the replicaId    */
annotation|@
name|VisibleForTesting
specifier|static
name|int
name|parseReplicaIdFromServerColumn
parameter_list|(
name|byte
index|[]
name|serverColumn
parameter_list|)
block|{
name|String
name|serverStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|serverColumn
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|SERVER_COLUMN_PATTERN
operator|.
name|matcher
argument_list|(
name|serverStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
operator|&&
name|matcher
operator|.
name|groupCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|group
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
operator|&&
name|group
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|group
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|16
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Returns a {@link ServerName} from catalog table {@link Result}.    * @param r Result to pull from    * @return A ServerName instance or null if necessary fields not found or empty.    */
specifier|private
specifier|static
name|ServerName
name|getServerName
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|,
specifier|final
name|int
name|replicaId
parameter_list|)
block|{
name|byte
index|[]
name|serverColumn
init|=
name|getServerColumn
argument_list|(
name|replicaId
argument_list|)
decl_stmt|;
name|Cell
name|cell
init|=
name|r
operator|.
name|getColumnLatestCell
argument_list|(
name|getFamily
argument_list|()
argument_list|,
name|serverColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
operator|||
name|cell
operator|.
name|getValueLength
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|String
name|hostAndPort
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|startcodeColumn
init|=
name|getStartCodeColumn
argument_list|(
name|replicaId
argument_list|)
decl_stmt|;
name|cell
operator|=
name|r
operator|.
name|getColumnLatestCell
argument_list|(
name|getFamily
argument_list|()
argument_list|,
name|startcodeColumn
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
operator|||
name|cell
operator|.
name|getValueLength
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|ServerName
operator|.
name|valueOf
argument_list|(
name|hostAndPort
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * The latest seqnum that the server writing to meta observed when opening the region.    * E.g. the seqNum when the result of {@link #getServerName(Result, int)} was written.    * @param r Result to pull the seqNum from    * @return SeqNum, or HConstants.NO_SEQNUM if there's no value written.    */
specifier|private
specifier|static
name|long
name|getSeqNumDuringOpen
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|,
specifier|final
name|int
name|replicaId
parameter_list|)
block|{
name|Cell
name|cell
init|=
name|r
operator|.
name|getColumnLatestCell
argument_list|(
name|getFamily
argument_list|()
argument_list|,
name|getSeqNumColumn
argument_list|(
name|replicaId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
operator|||
name|cell
operator|.
name|getValueLength
argument_list|()
operator|==
literal|0
condition|)
return|return
name|HConstants
operator|.
name|NO_SEQNUM
return|;
return|return
name|Bytes
operator|.
name|toLong
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns an HRegionLocationList extracted from the result.    * @return an HRegionLocationList containing all locations for the region range or null if    *  we can't deserialize the result.    */
specifier|public
specifier|static
name|RegionLocations
name|getRegionLocations
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|HRegionInfo
name|regionInfo
init|=
name|getHRegionInfo
argument_list|(
name|r
argument_list|,
name|getRegionInfoColumn
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionInfo
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
init|=
name|r
operator|.
name|getNoVersionMap
argument_list|()
decl_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|getRegionLocation
argument_list|(
name|r
argument_list|,
name|regionInfo
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|infoMap
init|=
name|familyMap
operator|.
name|get
argument_list|(
name|getFamily
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|infoMap
operator|==
literal|null
condition|)
return|return
operator|new
name|RegionLocations
argument_list|(
name|locations
argument_list|)
return|;
comment|// iterate until all serverName columns are seen
name|int
name|replicaId
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|serverColumn
init|=
name|getServerColumn
argument_list|(
name|replicaId
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|serverMap
init|=
name|infoMap
operator|.
name|tailMap
argument_list|(
name|serverColumn
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverMap
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|RegionLocations
argument_list|(
name|locations
argument_list|)
return|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|serverMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|replicaId
operator|=
name|parseReplicaIdFromServerColumn
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|replicaId
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|locations
operator|.
name|add
argument_list|(
name|getRegionLocation
argument_list|(
name|r
argument_list|,
name|regionInfo
argument_list|,
name|replicaId
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RegionLocations
argument_list|(
name|locations
argument_list|)
return|;
block|}
comment|/**    * Returns the HRegionLocation parsed from the given meta row Result    * for the given regionInfo and replicaId. The regionInfo can be the default region info    * for the replica.    * @param r the meta row result    * @param regionInfo RegionInfo for default replica    * @param replicaId the replicaId for the HRegionLocation    * @return HRegionLocation parsed from the given meta row Result for the given replicaId    */
specifier|private
specifier|static
name|HRegionLocation
name|getRegionLocation
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|int
name|replicaId
parameter_list|)
block|{
name|ServerName
name|serverName
init|=
name|getServerName
argument_list|(
name|r
argument_list|,
name|replicaId
argument_list|)
decl_stmt|;
name|long
name|seqNum
init|=
name|getSeqNumDuringOpen
argument_list|(
name|r
argument_list|,
name|replicaId
argument_list|)
decl_stmt|;
name|HRegionInfo
name|replicaInfo
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|regionInfo
argument_list|,
name|replicaId
argument_list|)
decl_stmt|;
return|return
operator|new
name|HRegionLocation
argument_list|(
name|replicaInfo
argument_list|,
name|serverName
argument_list|,
name|seqNum
argument_list|)
return|;
block|}
comment|/**    * Returns HRegionInfo object from the column    * HConstants.CATALOG_FAMILY:HConstants.REGIONINFO_QUALIFIER of the catalog    * table Result.    * @param data a Result object from the catalog table scan    * @return HRegionInfo or null    */
specifier|public
specifier|static
name|HRegionInfo
name|getHRegionInfo
parameter_list|(
name|Result
name|data
parameter_list|)
block|{
return|return
name|getHRegionInfo
argument_list|(
name|data
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
return|;
block|}
comment|/**    * Returns the HRegionInfo object from the column {@link HConstants#CATALOG_FAMILY} and    *<code>qualifier</code> of the catalog table result.    * @param r a Result object from the catalog table scan    * @param qualifier Column family qualifier    * @return An HRegionInfo instance or null.    */
specifier|private
specifier|static
name|HRegionInfo
name|getHRegionInfo
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
block|{
name|Cell
name|cell
init|=
name|r
operator|.
name|getColumnLatestCell
argument_list|(
name|getFamily
argument_list|()
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|HRegionInfo
operator|.
name|parseFromOrNull
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns the daughter regions by reading the corresponding columns of the catalog table    * Result.    * @param data a Result object from the catalog table scan    * @return a pair of HRegionInfo or PairOfSameType(null, null) if the region is not a split    * parent    */
specifier|public
specifier|static
name|PairOfSameType
argument_list|<
name|HRegionInfo
argument_list|>
name|getDaughterRegions
parameter_list|(
name|Result
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|splitA
init|=
name|getHRegionInfo
argument_list|(
name|data
argument_list|,
name|HConstants
operator|.
name|SPLITA_QUALIFIER
argument_list|)
decl_stmt|;
name|HRegionInfo
name|splitB
init|=
name|getHRegionInfo
argument_list|(
name|data
argument_list|,
name|HConstants
operator|.
name|SPLITB_QUALIFIER
argument_list|)
decl_stmt|;
return|return
operator|new
name|PairOfSameType
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|splitA
argument_list|,
name|splitB
argument_list|)
return|;
block|}
comment|/**    * Returns the merge regions by reading the corresponding columns of the catalog table    * Result.    * @param data a Result object from the catalog table scan    * @return a pair of HRegionInfo or PairOfSameType(null, null) if the region is not a split    * parent    */
specifier|public
specifier|static
name|PairOfSameType
argument_list|<
name|HRegionInfo
argument_list|>
name|getMergeRegions
parameter_list|(
name|Result
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|mergeA
init|=
name|getHRegionInfo
argument_list|(
name|data
argument_list|,
name|HConstants
operator|.
name|MERGEA_QUALIFIER
argument_list|)
decl_stmt|;
name|HRegionInfo
name|mergeB
init|=
name|getHRegionInfo
argument_list|(
name|data
argument_list|,
name|HConstants
operator|.
name|MERGEB_QUALIFIER
argument_list|)
decl_stmt|;
return|return
operator|new
name|PairOfSameType
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|mergeA
argument_list|,
name|mergeB
argument_list|)
return|;
block|}
comment|/**    * Implementations 'visit' a catalog table row.    */
specifier|public
interface|interface
name|Visitor
block|{
comment|/**      * Visit the catalog table row.      * @param r A row from catalog table      * @return True if we are to proceed scanning the table, else false if      * we are to stop now.      */
name|boolean
name|visit
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * A {@link Visitor} that collects content out of passed {@link Result}.    */
specifier|static
specifier|abstract
class|class
name|CollectingVisitor
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Visitor
block|{
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|abstract
name|void
name|add
parameter_list|(
name|Result
name|r
parameter_list|)
function_decl|;
comment|/**      * @return Collected results; wait till visits complete to collect all      * possible results      */
name|List
argument_list|<
name|T
argument_list|>
name|getResults
parameter_list|()
block|{
return|return
name|this
operator|.
name|results
return|;
block|}
block|}
comment|/**    * Collects all returned.    */
specifier|static
class|class
name|CollectAllVisitor
extends|extends
name|CollectingVisitor
argument_list|<
name|Result
argument_list|>
block|{
annotation|@
name|Override
name|void
name|add
parameter_list|(
name|Result
name|r
parameter_list|)
block|{
name|this
operator|.
name|results
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Count regions in<code>hbase:meta</code> for passed table.    * @param c Configuration object    * @param tableName table name to count regions for    * @return Count or regions in table<code>tableName</code>    * @throws IOException    */
specifier|public
specifier|static
name|int
name|getRegionCount
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|c
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|t
operator|.
name|getRegionLocations
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|////////////////////////
comment|// Editing operations //
comment|////////////////////////
comment|/**    * Generates and returns a Put containing the region into for the catalog table    */
specifier|public
specifier|static
name|Put
name|makePutFromRegionInfo
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|addRegionInfo
argument_list|(
name|put
argument_list|,
name|regionInfo
argument_list|)
expr_stmt|;
return|return
name|put
return|;
block|}
comment|/**    * Generates and returns a Delete containing the region info for the catalog    * table    */
specifier|public
specifier|static
name|Delete
name|makeDeleteFromRegionInfo
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|)
block|{
if|if
condition|(
name|regionInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't make a delete for null region"
argument_list|)
throw|;
block|}
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|delete
return|;
block|}
comment|/**    * Adds split daughters to the Put    */
specifier|public
specifier|static
name|Put
name|addDaughtersToPut
parameter_list|(
name|Put
name|put
parameter_list|,
name|HRegionInfo
name|splitA
parameter_list|,
name|HRegionInfo
name|splitB
parameter_list|)
block|{
if|if
condition|(
name|splitA
operator|!=
literal|null
condition|)
block|{
name|put
operator|.
name|addImmutable
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SPLITA_QUALIFIER
argument_list|,
name|splitA
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|splitB
operator|!=
literal|null
condition|)
block|{
name|put
operator|.
name|addImmutable
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SPLITB_QUALIFIER
argument_list|,
name|splitB
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|put
return|;
block|}
comment|/**    * Put the passed<code>p</code> to the<code>hbase:meta</code> table.    * @param hConnection connection we're using    * @param p Put to add to hbase:meta    * @throws IOException    */
specifier|static
name|void
name|putToMetaTable
parameter_list|(
specifier|final
name|HConnection
name|hConnection
parameter_list|,
specifier|final
name|Put
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|put
argument_list|(
name|getMetaHTable
argument_list|(
name|hConnection
argument_list|)
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param t Table to use (will be closed when done).    * @param p put to make    * @throws IOException    */
specifier|private
specifier|static
name|void
name|put
parameter_list|(
specifier|final
name|Table
name|t
parameter_list|,
specifier|final
name|Put
name|p
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Put the passed<code>ps</code> to the<code>hbase:meta</code> table.    * @param hConnection connection we're using    * @param ps Put to add to hbase:meta    * @throws IOException    */
specifier|public
specifier|static
name|void
name|putsToMetaTable
parameter_list|(
specifier|final
name|HConnection
name|hConnection
parameter_list|,
specifier|final
name|List
argument_list|<
name|Put
argument_list|>
name|ps
parameter_list|)
throws|throws
name|IOException
block|{
name|Table
name|t
init|=
name|getMetaHTable
argument_list|(
name|hConnection
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|put
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Delete the passed<code>d</code> from the<code>hbase:meta</code> table.    * @param hConnection connection we're using    * @param d Delete to add to hbase:meta    * @throws IOException    */
specifier|static
name|void
name|deleteFromMetaTable
parameter_list|(
specifier|final
name|HConnection
name|hConnection
parameter_list|,
specifier|final
name|Delete
name|d
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Delete
argument_list|>
name|dels
init|=
operator|new
name|ArrayList
argument_list|<
name|Delete
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|dels
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|deleteFromMetaTable
argument_list|(
name|hConnection
argument_list|,
name|dels
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete the passed<code>deletes</code> from the<code>hbase:meta</code> table.    * @param hConnection connection we're using    * @param deletes Deletes to add to hbase:meta  This list should support #remove.    * @throws IOException    */
specifier|public
specifier|static
name|void
name|deleteFromMetaTable
parameter_list|(
specifier|final
name|HConnection
name|hConnection
parameter_list|,
specifier|final
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
parameter_list|)
throws|throws
name|IOException
block|{
name|Table
name|t
init|=
name|getMetaHTable
argument_list|(
name|hConnection
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|delete
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Deletes some replica columns corresponding to replicas for the passed rows    * @param metaRows rows in hbase:meta    * @param replicaIndexToDeleteFrom the replica ID we would start deleting from    * @param numReplicasToRemove how many replicas to remove    * @param hConnection connection we're using to access meta table    * @throws IOException    */
specifier|public
specifier|static
name|void
name|removeRegionReplicasFromMeta
parameter_list|(
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|metaRows
parameter_list|,
name|int
name|replicaIndexToDeleteFrom
parameter_list|,
name|int
name|numReplicasToRemove
parameter_list|,
name|HConnection
name|hConnection
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|absoluteIndex
init|=
name|replicaIndexToDeleteFrom
operator|+
name|numReplicasToRemove
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|row
range|:
name|metaRows
control|)
block|{
name|Delete
name|deleteReplicaLocations
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|replicaIndexToDeleteFrom
init|;
name|i
operator|<
name|absoluteIndex
condition|;
name|i
operator|++
control|)
block|{
name|deleteReplicaLocations
operator|.
name|deleteColumns
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|getServerColumn
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|deleteReplicaLocations
operator|.
name|deleteColumns
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|getSeqNumColumn
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|deleteReplicaLocations
operator|.
name|deleteColumns
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|getStartCodeColumn
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|deleteFromMetaTable
argument_list|(
name|hConnection
argument_list|,
name|deleteReplicaLocations
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Execute the passed<code>mutations</code> against<code>hbase:meta</code> table.    * @param hConnection connection we're using    * @param mutations Puts and Deletes to execute on hbase:meta    * @throws IOException    */
specifier|public
specifier|static
name|void
name|mutateMetaTable
parameter_list|(
specifier|final
name|HConnection
name|hConnection
parameter_list|,
specifier|final
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
throws|throws
name|IOException
block|{
name|Table
name|t
init|=
name|getMetaHTable
argument_list|(
name|hConnection
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|batch
argument_list|(
name|mutations
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|InterruptedIOException
name|ie
init|=
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|ie
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ie
throw|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Adds a hbase:meta row for the specified new region.    * @param hConnection connection we're using    * @param regionInfo region information    * @throws IOException if problem connecting or updating meta    */
specifier|public
specifier|static
name|void
name|addRegionToMeta
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|putToMetaTable
argument_list|(
name|hConnection
argument_list|,
name|makePutFromRegionInfo
argument_list|(
name|regionInfo
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a hbase:meta row for the specified new region to the given catalog table. The    * HTable is not flushed or closed.    * @param meta the HTable for META    * @param regionInfo region information    * @throws IOException if problem connecting or updating meta    */
specifier|public
specifier|static
name|void
name|addRegionToMeta
parameter_list|(
name|Table
name|meta
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|addRegionToMeta
argument_list|(
name|meta
argument_list|,
name|regionInfo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a (single) hbase:meta row for the specified new region and its daughters. Note that this    * does not add its daughter's as different rows, but adds information about the daughters    * in the same row as the parent. Use    * {@link #splitRegion(org.apache.hadoop.hbase.client.HConnection,    *   HRegionInfo, HRegionInfo, HRegionInfo, ServerName)}    * if you want to do that.    * @param meta the HTable for META    * @param regionInfo region information    * @param splitA first split daughter of the parent regionInfo    * @param splitB second split daughter of the parent regionInfo    * @throws IOException if problem connecting or updating meta    */
specifier|public
specifier|static
name|void
name|addRegionToMeta
parameter_list|(
name|Table
name|meta
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|,
name|HRegionInfo
name|splitA
parameter_list|,
name|HRegionInfo
name|splitB
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
name|makePutFromRegionInfo
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|addDaughtersToPut
argument_list|(
name|put
argument_list|,
name|splitA
argument_list|,
name|splitB
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Adds a (single) hbase:meta row for the specified new region and its daughters. Note that this    * does not add its daughter's as different rows, but adds information about the daughters    * in the same row as the parent. Use    * {@link #splitRegion(HConnection, HRegionInfo, HRegionInfo, HRegionInfo, ServerName)}    * if you want to do that.    * @param hConnection connection we're using    * @param regionInfo region information    * @param splitA first split daughter of the parent regionInfo    * @param splitB second split daughter of the parent regionInfo    * @throws IOException if problem connecting or updating meta    */
specifier|public
specifier|static
name|void
name|addRegionToMeta
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|,
name|HRegionInfo
name|splitA
parameter_list|,
name|HRegionInfo
name|splitB
parameter_list|)
throws|throws
name|IOException
block|{
name|Table
name|meta
init|=
name|getMetaHTable
argument_list|(
name|hConnection
argument_list|)
decl_stmt|;
try|try
block|{
name|addRegionToMeta
argument_list|(
name|meta
argument_list|,
name|regionInfo
argument_list|,
name|splitA
argument_list|,
name|splitB
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Adds a hbase:meta row for each of the specified new regions.    * @param hConnection connection we're using    * @param regionInfos region information list    * @throws IOException if problem connecting or updating meta    */
specifier|public
specifier|static
name|void
name|addRegionsToMeta
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionInfos
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|regionInfos
control|)
block|{
if|if
condition|(
name|RegionReplicaUtil
operator|.
name|isDefaultReplica
argument_list|(
name|regionInfo
argument_list|)
condition|)
block|{
name|puts
operator|.
name|add
argument_list|(
name|makePutFromRegionInfo
argument_list|(
name|regionInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|putsToMetaTable
argument_list|(
name|hConnection
argument_list|,
name|puts
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added "
operator|+
name|puts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a daughter region entry to meta.    * @param regionInfo the region to put    * @param sn the location of the region    * @param openSeqNum the latest sequence number obtained when the region was open    */
specifier|public
specifier|static
name|void
name|addDaughter
parameter_list|(
specifier|final
name|HConnection
name|hConnection
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|ServerName
name|sn
parameter_list|,
specifier|final
name|long
name|openSeqNum
parameter_list|)
throws|throws
name|NotAllMetaRegionsOnlineException
throws|,
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|addRegionInfo
argument_list|(
name|put
argument_list|,
name|regionInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|sn
operator|!=
literal|null
condition|)
block|{
name|addLocation
argument_list|(
name|put
argument_list|,
name|sn
argument_list|,
name|openSeqNum
argument_list|,
name|regionInfo
operator|.
name|getReplicaId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|putToMetaTable
argument_list|(
name|hConnection
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added daughter "
operator|+
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
operator|+
operator|(
name|sn
operator|==
literal|null
condition|?
literal|", serverName=null"
else|:
literal|", serverName="
operator|+
name|sn
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Merge the two regions into one in an atomic operation. Deletes the two    * merging regions in hbase:meta and adds the merged region with the information of    * two merging regions.    * @param hConnection connection we're using    * @param mergedRegion the merged region    * @param regionA    * @param regionB    * @param sn the location of the region    * @throws IOException    */
specifier|public
specifier|static
name|void
name|mergeRegions
parameter_list|(
specifier|final
name|HConnection
name|hConnection
parameter_list|,
name|HRegionInfo
name|mergedRegion
parameter_list|,
name|HRegionInfo
name|regionA
parameter_list|,
name|HRegionInfo
name|regionB
parameter_list|,
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
name|Table
name|meta
init|=
name|getMetaHTable
argument_list|(
name|hConnection
argument_list|)
decl_stmt|;
try|try
block|{
name|HRegionInfo
name|copyOfMerged
init|=
operator|new
name|HRegionInfo
argument_list|(
name|mergedRegion
argument_list|)
decl_stmt|;
comment|// Put for parent
name|Put
name|putOfMerged
init|=
name|makePutFromRegionInfo
argument_list|(
name|copyOfMerged
argument_list|)
decl_stmt|;
name|putOfMerged
operator|.
name|addImmutable
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|MERGEA_QUALIFIER
argument_list|,
name|regionA
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|putOfMerged
operator|.
name|addImmutable
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|MERGEB_QUALIFIER
argument_list|,
name|regionB
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// Deletes for merging regions
name|Delete
name|deleteA
init|=
name|makeDeleteFromRegionInfo
argument_list|(
name|regionA
argument_list|)
decl_stmt|;
name|Delete
name|deleteB
init|=
name|makeDeleteFromRegionInfo
argument_list|(
name|regionB
argument_list|)
decl_stmt|;
comment|// The merged is a new region, openSeqNum = 1 is fine.
name|addLocation
argument_list|(
name|putOfMerged
argument_list|,
name|sn
argument_list|,
literal|1
argument_list|,
name|mergedRegion
operator|.
name|getReplicaId
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tableRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mergedRegion
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
name|HConstants
operator|.
name|DELIMITER
argument_list|)
decl_stmt|;
name|multiMutate
argument_list|(
name|meta
argument_list|,
name|tableRow
argument_list|,
name|putOfMerged
argument_list|,
name|deleteA
argument_list|,
name|deleteB
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Splits the region into two in an atomic operation. Offlines the parent    * region with the information that it is split into two, and also adds    * the daughter regions. Does not add the location information to the daughter    * regions since they are not open yet.    * @param hConnection connection we're using    * @param parent the parent region which is split    * @param splitA Split daughter region A    * @param splitB Split daughter region A    * @param sn the location of the region    */
specifier|public
specifier|static
name|void
name|splitRegion
parameter_list|(
specifier|final
name|HConnection
name|hConnection
parameter_list|,
name|HRegionInfo
name|parent
parameter_list|,
name|HRegionInfo
name|splitA
parameter_list|,
name|HRegionInfo
name|splitB
parameter_list|,
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
name|Table
name|meta
init|=
name|getMetaHTable
argument_list|(
name|hConnection
argument_list|)
decl_stmt|;
try|try
block|{
name|HRegionInfo
name|copyOfParent
init|=
operator|new
name|HRegionInfo
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|copyOfParent
operator|.
name|setOffline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|copyOfParent
operator|.
name|setSplit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//Put for parent
name|Put
name|putParent
init|=
name|makePutFromRegionInfo
argument_list|(
name|copyOfParent
argument_list|)
decl_stmt|;
name|addDaughtersToPut
argument_list|(
name|putParent
argument_list|,
name|splitA
argument_list|,
name|splitB
argument_list|)
expr_stmt|;
comment|//Puts for daughters
name|Put
name|putA
init|=
name|makePutFromRegionInfo
argument_list|(
name|splitA
argument_list|)
decl_stmt|;
name|Put
name|putB
init|=
name|makePutFromRegionInfo
argument_list|(
name|splitB
argument_list|)
decl_stmt|;
name|addLocation
argument_list|(
name|putA
argument_list|,
name|sn
argument_list|,
literal|1
argument_list|,
name|splitA
operator|.
name|getReplicaId
argument_list|()
argument_list|)
expr_stmt|;
comment|//new regions, openSeqNum = 1 is fine.
name|addLocation
argument_list|(
name|putB
argument_list|,
name|sn
argument_list|,
literal|1
argument_list|,
name|splitB
operator|.
name|getReplicaId
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tableRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|parent
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
name|HConstants
operator|.
name|DELIMITER
argument_list|)
decl_stmt|;
name|multiMutate
argument_list|(
name|meta
argument_list|,
name|tableRow
argument_list|,
name|putParent
argument_list|,
name|putA
argument_list|,
name|putB
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Performs an atomic multi-Mutate operation against the given table.    */
specifier|private
specifier|static
name|void
name|multiMutate
parameter_list|(
name|Table
name|table
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|Mutation
modifier|...
name|mutations
parameter_list|)
throws|throws
name|IOException
block|{
name|CoprocessorRpcChannel
name|channel
init|=
name|table
operator|.
name|coprocessorService
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|MultiRowMutationProtos
operator|.
name|MutateRowsRequest
operator|.
name|Builder
name|mmrBuilder
init|=
name|MultiRowMutationProtos
operator|.
name|MutateRowsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Mutation
name|mutation
range|:
name|mutations
control|)
block|{
if|if
condition|(
name|mutation
operator|instanceof
name|Put
condition|)
block|{
name|mmrBuilder
operator|.
name|addMutationRequest
argument_list|(
name|ProtobufUtil
operator|.
name|toMutation
argument_list|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|PUT
argument_list|,
name|mutation
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mutation
operator|instanceof
name|Delete
condition|)
block|{
name|mmrBuilder
operator|.
name|addMutationRequest
argument_list|(
name|ProtobufUtil
operator|.
name|toMutation
argument_list|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|DELETE
argument_list|,
name|mutation
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"multi in MetaEditor doesn't support "
operator|+
name|mutation
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|MultiRowMutationProtos
operator|.
name|MultiRowMutationService
operator|.
name|BlockingInterface
name|service
init|=
name|MultiRowMutationProtos
operator|.
name|MultiRowMutationService
operator|.
name|newBlockingStub
argument_list|(
name|channel
argument_list|)
decl_stmt|;
try|try
block|{
name|service
operator|.
name|mutateRows
argument_list|(
literal|null
argument_list|,
name|mmrBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|ex
parameter_list|)
block|{
name|ProtobufUtil
operator|.
name|toIOException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Updates the location of the specified region in hbase:meta to be the specified    * server hostname and startcode.    *<p>    * Uses passed catalog tracker to get a connection to the server hosting    * hbase:meta and makes edits to that region.    *    * @param hConnection connection we're using    * @param regionInfo region to update location of    * @param sn Server name    * @throws IOException    */
specifier|public
specifier|static
name|void
name|updateRegionLocation
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|,
name|ServerName
name|sn
parameter_list|,
name|long
name|updateSeqNum
parameter_list|)
throws|throws
name|IOException
block|{
name|updateLocation
argument_list|(
name|hConnection
argument_list|,
name|regionInfo
argument_list|,
name|sn
argument_list|,
name|updateSeqNum
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates the location of the specified region to be the specified server.    *<p>    * Connects to the specified server which should be hosting the specified    * catalog region name to perform the edit.    *    * @param hConnection connection we're using    * @param regionInfo region to update location of    * @param sn Server name    * @param openSeqNum the latest sequence number obtained when the region was open    * @throws IOException In particular could throw {@link java.net.ConnectException}    * if the server is down on other end.    */
specifier|private
specifier|static
name|void
name|updateLocation
parameter_list|(
specifier|final
name|HConnection
name|hConnection
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|,
name|ServerName
name|sn
parameter_list|,
name|long
name|openSeqNum
parameter_list|)
throws|throws
name|IOException
block|{
comment|// region replicas are kept in the primary region's row
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|getMetaKeyForRegion
argument_list|(
name|regionInfo
argument_list|)
argument_list|)
decl_stmt|;
name|addLocation
argument_list|(
name|put
argument_list|,
name|sn
argument_list|,
name|openSeqNum
argument_list|,
name|regionInfo
operator|.
name|getReplicaId
argument_list|()
argument_list|)
expr_stmt|;
name|putToMetaTable
argument_list|(
name|hConnection
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updated row "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" with server="
operator|+
name|sn
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes the specified region from META.    * @param hConnection connection we're using    * @param regionInfo region to be deleted from META    * @throws IOException    */
specifier|public
specifier|static
name|void
name|deleteRegion
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|deleteFromMetaTable
argument_list|(
name|hConnection
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes the specified regions from META.    * @param hConnection connection we're using    * @param regionsInfo list of regions to be deleted from META    * @throws IOException    */
specifier|public
specifier|static
name|void
name|deleteRegions
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<
name|Delete
argument_list|>
argument_list|(
name|regionsInfo
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regionsInfo
control|)
block|{
name|deletes
operator|.
name|add
argument_list|(
operator|new
name|Delete
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|deleteFromMetaTable
argument_list|(
name|hConnection
argument_list|,
name|deletes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted "
operator|+
name|regionsInfo
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds and Removes the specified regions from hbase:meta    * @param hConnection connection we're using    * @param regionsToRemove list of regions to be deleted from META    * @param regionsToAdd list of regions to be added to META    * @throws IOException    */
specifier|public
specifier|static
name|void
name|mutateRegions
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
specifier|final
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsToRemove
parameter_list|,
specifier|final
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsToAdd
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutation
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionsToRemove
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regionsToRemove
control|)
block|{
name|mutation
operator|.
name|add
argument_list|(
operator|new
name|Delete
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|regionsToAdd
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regionsToAdd
control|)
block|{
name|mutation
operator|.
name|add
argument_list|(
name|makePutFromRegionInfo
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|mutateMetaTable
argument_list|(
name|hConnection
argument_list|,
name|mutation
argument_list|)
expr_stmt|;
if|if
condition|(
name|regionsToRemove
operator|!=
literal|null
operator|&&
name|regionsToRemove
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleted "
operator|+
name|regionsToRemove
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|regionsToAdd
operator|!=
literal|null
operator|&&
name|regionsToAdd
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added "
operator|+
name|regionsToAdd
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Overwrites the specified regions from hbase:meta    * @param hConnection connection we're using    * @param regionInfos list of regions to be added to META    * @throws IOException    */
specifier|public
specifier|static
name|void
name|overwriteRegions
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionInfos
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteRegions
argument_list|(
name|hConnection
argument_list|,
name|regionInfos
argument_list|)
expr_stmt|;
comment|// Why sleep? This is the easiest way to ensure that the previous deletes does not
comment|// eclipse the following puts, that might happen in the same ts from the server.
comment|// See HBASE-9906, and HBASE-9879. Once either HBASE-9879, HBASE-8770 is fixed,
comment|// or HBASE-9905 is fixed and meta uses seqIds, we do not need the sleep.
name|Threads
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|addRegionsToMeta
argument_list|(
name|hConnection
argument_list|,
name|regionInfos
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Overwritten "
operator|+
name|regionInfos
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes merge qualifiers for the specified merged region.    * @param hConnection connection we're using    * @param mergedRegion    * @throws IOException    */
specifier|public
specifier|static
name|void
name|deleteMergeQualifiers
parameter_list|(
name|HConnection
name|hConnection
parameter_list|,
specifier|final
name|HRegionInfo
name|mergedRegion
parameter_list|)
throws|throws
name|IOException
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|mergedRegion
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|MERGEA_QUALIFIER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|MERGEB_QUALIFIER
argument_list|)
expr_stmt|;
name|deleteFromMetaTable
argument_list|(
name|hConnection
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted references in merged region "
operator|+
name|mergedRegion
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", qualifier="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|HConstants
operator|.
name|MERGEA_QUALIFIER
argument_list|)
operator|+
literal|" and qualifier="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|HConstants
operator|.
name|MERGEB_QUALIFIER
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Put
name|addRegionInfo
parameter_list|(
specifier|final
name|Put
name|p
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
block|{
name|p
operator|.
name|addImmutable
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|,
name|hri
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
specifier|public
specifier|static
name|Put
name|addLocation
parameter_list|(
specifier|final
name|Put
name|p
parameter_list|,
specifier|final
name|ServerName
name|sn
parameter_list|,
name|long
name|openSeqNum
parameter_list|,
name|int
name|replicaId
parameter_list|)
block|{
comment|// using regionserver's local time as the timestamp of Put.
comment|// See: HBASE-11536
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|p
operator|.
name|addImmutable
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|getServerColumn
argument_list|(
name|replicaId
argument_list|)
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addImmutable
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|getStartCodeColumn
argument_list|(
name|replicaId
argument_list|)
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|getStartcode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addImmutable
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|getSeqNumColumn
argument_list|(
name|replicaId
argument_list|)
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|openSeqNum
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
block|}
end_class

end_unit

