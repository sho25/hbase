begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|NonNull
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Consistency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FirstKeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SubstringComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MultiRowMutationProtos
operator|.
name|MultiRowMutationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MultiRowMutationProtos
operator|.
name|MutateRowsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MultiRowMutationProtos
operator|.
name|MutateRowsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ExceptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PairOfSameType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_comment
comment|/**  *<p>  * Read/write operations on<code>hbase:meta</code> region as well as assignment information stored  * to<code>hbase:meta</code>.  *</p>  *<p>  * Some of the methods of this class take ZooKeeperWatcher as a param. The only reason for this is  * when this class is used on client-side (e.g. HBaseAdmin), we want to use short-lived connection  * (opened before each operation, closed right after), while when used on HM or HRS (like in  * AssignmentManager) we want permanent connection.  *</p>  *<p>  * HBASE-10070 adds a replicaId to HRI, meaning more than one HRI can be defined for the same table  * range (table, startKey, endKey). For every range, there will be at least one HRI defined which is  * called default replica.  *</p>  *<p>  *<h2>Meta layout</h2>  *  *<pre>  * For each table there is single row named for the table with a 'table' column family.  * The column family currently has one column in it, the 'state' column:  *  * table:state             => contains table state  *  * Then for each table range ('Region'), there is a single row, formatted as:  *&lt;tableName&gt;,&lt;startKey&gt;,&lt;regionId&gt;,&lt;encodedRegionName&gt;.  * This row is the serialized regionName of the default region replica.  * Columns are:  * info:regioninfo         => contains serialized HRI for the default region replica  * info:server             => contains hostname:port (in string form) for the server hosting  *                            the default regionInfo replica  * info:server_&lt;replicaId&gt => contains hostname:port (in string form) for the server hosting  *                                 the regionInfo replica with replicaId  * info:serverstartcode    => contains server start code (in binary long form) for the server  *                            hosting the default regionInfo replica  * info:serverstartcode_&lt;replicaId&gt => contains server start code (in binary long form) for  *                                          the server hosting the regionInfo replica with  *                                          replicaId  * info:seqnumDuringOpen   => contains seqNum (in binary long form) for the region at the time  *                             the server opened the region with default replicaId  * info:seqnumDuringOpen_&lt;replicaId&gt => contains seqNum (in binary long form) for the region  *                                           at the time the server opened the region with  *                                           replicaId  * info:splitA             => contains a serialized HRI for the first daughter region if the  *                             region is split  * info:splitB             => contains a serialized HRI for the second daughter region if the  *                             region is split  * info:merge*             => contains a serialized HRI for a merge parent region. There will be two  *                             or more of these columns in a row. A row that has these columns is  *                             undergoing a merge and is the result of the merge. Columns listed  *                             in marge* columns are the parents of this merged region. Example  *                             columns: info:merge0001, info:merge0002. You make also see 'mergeA',  *                             and 'mergeB'. This is old form replaced by the new format that allows  *                             for more than two parents to be merged at a time.  * TODO: Add rep_barrier for serial replication explaination. See SerialReplicationChecker.  *</pre>  *</p>  *<p>  * The actual layout of meta should be encapsulated inside MetaTableAccessor methods, and should not  * leak out of it (through Result objects, etc)  *</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|MetaTableAccessor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MetaTableAccessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|METALOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hbase.META"
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|REPLICATION_PARENT_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|ESCAPE_BYTE
init|=
operator|(
name|byte
operator|)
literal|0xFF
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|SEPARATED_BYTE
init|=
literal|0x00
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
enum|enum
name|QueryType
block|{
name|ALL
parameter_list|(
name|HConstants
operator|.
name|TABLE_FAMILY
parameter_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
parameter_list|)
operator|,
constructor|REGION(HConstants.CATALOG_FAMILY
block|)
enum|,
name|TABLE
parameter_list|(
name|HConstants
operator|.
name|TABLE_FAMILY
parameter_list|)
operator|,
constructor|REPLICATION(HConstants.REPLICATION_BARRIER_FAMILY
block|)
class|;
end_class

begin_decl_stmt
specifier|private
specifier|final
name|byte
index|[]
index|[]
name|families
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|QueryType
argument_list|(
name|byte
index|[]
operator|...
name|families
argument_list|)
block|{
name|this
operator|.
name|families
operator|=
name|families
block|;     }
name|byte
index|[]
index|[]
name|getFamilies
argument_list|()
block|{
return|return
name|this
operator|.
name|families
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|/** The delimiter for meta columns for replicaIds&gt; 0 */
end_comment

begin_decl_stmt
unit|static
specifier|final
name|char
name|META_REPLICA_ID_DELIMITER
init|=
literal|'_'
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** A regex for parsing server columns from meta. See above javadoc for meta layout */
end_comment

begin_decl_stmt
specifier|private
specifier|static
specifier|final
name|Pattern
name|SERVER_COLUMN_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^server(_[0-9a-fA-F]{4})?$"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|////////////////////////
end_comment

begin_comment
comment|// Reading operations //
end_comment

begin_comment
comment|////////////////////////
end_comment

begin_comment
comment|/**    * Performs a full scan of<code>hbase:meta</code> for regions.    * @param connection connection we're using    * @param visitor Visitor invoked against each row in regions family.    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|fullScanRegions
parameter_list|(
name|Connection
name|connection
parameter_list|,
specifier|final
name|Visitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|scanMeta
argument_list|(
name|connection
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|QueryType
operator|.
name|REGION
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Performs a full scan of<code>hbase:meta</code> for regions.    * @param connection connection we're using    */
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|Result
argument_list|>
name|fullScanRegions
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fullScan
argument_list|(
name|connection
argument_list|,
name|QueryType
operator|.
name|REGION
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Performs a full scan of<code>hbase:meta</code> for tables.    * @param connection connection we're using    * @param visitor Visitor invoked against each row in tables family.    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|fullScanTables
parameter_list|(
name|Connection
name|connection
parameter_list|,
specifier|final
name|Visitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|scanMeta
argument_list|(
name|connection
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|QueryType
operator|.
name|TABLE
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Performs a full scan of<code>hbase:meta</code>.    * @param connection connection we're using    * @param type scanned part of meta    * @return List of {@link Result}    */
end_comment

begin_function
specifier|private
specifier|static
name|List
argument_list|<
name|Result
argument_list|>
name|fullScan
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|QueryType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|CollectAllVisitor
name|v
init|=
operator|new
name|CollectAllVisitor
argument_list|()
decl_stmt|;
name|scanMeta
argument_list|(
name|connection
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|type
argument_list|,
name|v
argument_list|)
expr_stmt|;
return|return
name|v
operator|.
name|getResults
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Callers should call close on the returned {@link Table} instance.    * @param connection connection we're using to access Meta    * @return An {@link Table} for<code>hbase:meta</code>    * @throws NullPointerException if {@code connection} is {@code null}    */
end_comment

begin_function
specifier|public
specifier|static
name|Table
name|getMetaHTable
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We used to pass whole CatalogTracker in here, now we just pass in Connection
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|connection
argument_list|,
literal|"Connection cannot be null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|isClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"connection is closed"
argument_list|)
throw|;
block|}
return|return
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * @param t Table to use (will be closed when done).    * @param g Get to run    */
end_comment

begin_function
specifier|private
specifier|static
name|Result
name|get
parameter_list|(
specifier|final
name|Table
name|t
parameter_list|,
specifier|final
name|Get
name|g
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|t
operator|==
literal|null
condition|)
return|return
literal|null
return|;
try|try
block|{
return|return
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
return|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Gets the region info and assignment for the specified region.    * @param connection connection we're using    * @param regionName Region to lookup.    * @return Location and RegionInfo for<code>regionName</code>    * @deprecated use {@link #getRegionLocation(Connection, byte[])} instead    */
end_comment

begin_function
annotation|@
name|Deprecated
specifier|public
specifier|static
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|getRegion
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionLocation
name|location
init|=
name|getRegionLocation
argument_list|(
name|connection
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
return|return
name|location
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Pair
argument_list|<>
argument_list|(
name|location
operator|.
name|getRegion
argument_list|()
argument_list|,
name|location
operator|.
name|getServerName
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the HRegionLocation from meta for the given region    * @param connection connection we're using    * @param regionName region we're looking for    * @return HRegionLocation for the given region    */
end_comment

begin_function
specifier|public
specifier|static
name|HRegionLocation
name|getRegionLocation
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|regionName
decl_stmt|;
name|RegionInfo
name|parsedInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parsedInfo
operator|=
name|parseRegionInfoFromRegionName
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|row
operator|=
name|getMetaKeyForRegion
argument_list|(
name|parsedInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|parseEx
parameter_list|)
block|{
comment|// Ignore. This is used with tableName passed as regionName.
block|}
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|get
argument_list|(
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
argument_list|,
name|get
argument_list|)
decl_stmt|;
name|RegionLocations
name|locations
init|=
name|getRegionLocations
argument_list|(
name|r
argument_list|)
decl_stmt|;
return|return
name|locations
operator|==
literal|null
condition|?
literal|null
else|:
name|locations
operator|.
name|getRegionLocation
argument_list|(
name|parsedInfo
operator|==
literal|null
condition|?
literal|0
else|:
name|parsedInfo
operator|.
name|getReplicaId
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the HRegionLocation from meta for the given region    * @param connection connection we're using    * @param regionInfo region information    * @return HRegionLocation for the given region    */
end_comment

begin_function
specifier|public
specifier|static
name|HRegionLocation
name|getRegionLocation
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|getMetaKeyForRegion
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|get
argument_list|(
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
argument_list|,
name|get
argument_list|)
decl_stmt|;
return|return
name|getRegionLocation
argument_list|(
name|r
argument_list|,
name|regionInfo
argument_list|,
name|regionInfo
operator|.
name|getReplicaId
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/** Returns the row key to use for this regionInfo */
end_comment

begin_function
specifier|public
specifier|static
name|byte
index|[]
name|getMetaKeyForRegion
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
return|return
name|RegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|regionInfo
argument_list|)
operator|.
name|getRegionName
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/** Returns an HRI parsed from this regionName. Not all the fields of the HRI    * is stored in the name, so the returned object should only be used for the fields    * in the regionName.    */
end_comment

begin_comment
comment|// This should be moved to RegionInfo? TODO.
end_comment

begin_function
specifier|public
specifier|static
name|RegionInfo
name|parseRegionInfoFromRegionName
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|fields
init|=
name|RegionInfo
operator|.
name|parseRegionName
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|long
name|regionId
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|fields
index|[
literal|2
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|replicaId
init|=
name|fields
operator|.
name|length
operator|>
literal|3
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|fields
index|[
literal|3
index|]
argument_list|)
argument_list|,
literal|16
argument_list|)
else|:
literal|0
decl_stmt|;
return|return
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|fields
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|fields
index|[
literal|1
index|]
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|fields
index|[
literal|2
index|]
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
argument_list|)
operator|.
name|setReplicaId
argument_list|(
name|replicaId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Gets the result in hbase:meta for the specified region.    * @param connection connection we're using    * @param regionName region we're looking for    * @return result of the specified region    */
end_comment

begin_function
specifier|public
specifier|static
name|Result
name|getRegionResult
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
return|return
name|get
argument_list|(
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
argument_list|,
name|get
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Scans META table for a row whose key contains the specified<B>regionEncodedName</B>,    * returning a single related<code>Result</code> instance if any row is found, null otherwise.    *    * @param connection the connection to query META table.    * @param regionEncodedName the region encoded name to look for at META.    * @return<code>Result</code> instance with the row related info in META, null otherwise.    * @throws IOException if any errors occur while querying META.    */
end_comment

begin_function
specifier|public
specifier|static
name|Result
name|scanByRegionEncodedName
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|regionEncodedName
parameter_list|)
throws|throws
name|IOException
block|{
name|RowFilter
name|rowFilter
init|=
operator|new
name|RowFilter
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
name|regionEncodedName
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
name|getMetaScan
argument_list|(
name|connection
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|rowFilter
argument_list|)
expr_stmt|;
name|ResultScanner
name|resultScanner
init|=
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
return|return
name|resultScanner
operator|.
name|next
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * @return Return all regioninfos listed in the 'info:merge*' columns of    *   the<code>regionName</code> row.    */
end_comment

begin_function
annotation|@
name|Nullable
specifier|public
specifier|static
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getMergeRegions
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getMergeRegions
argument_list|(
name|getRegionResult
argument_list|(
name|connection
argument_list|,
name|regionName
argument_list|)
operator|.
name|rawCells
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * @return Deserialized regioninfo values taken from column values that match    *   the regex 'info:merge.*' in array of<code>cells</code>.    */
end_comment

begin_function
annotation|@
name|Nullable
specifier|public
specifier|static
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getMergeRegions
parameter_list|(
name|Cell
index|[]
name|cells
parameter_list|)
block|{
if|if
condition|(
name|cells
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionsToMerge
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
if|if
condition|(
operator|!
name|isMergeQualifierPrefix
argument_list|(
name|cell
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Ok. This cell is that of a info:merge* column.
name|RegionInfo
name|ri
init|=
name|RegionInfo
operator|.
name|parseFromOrNull
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ri
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|regionsToMerge
operator|==
literal|null
condition|)
block|{
name|regionsToMerge
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|regionsToMerge
operator|.
name|add
argument_list|(
name|ri
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|regionsToMerge
return|;
block|}
end_function

begin_comment
comment|/**    * @return True if any merge regions present in<code>cells</code>; i.e.    *   the column in<code>cell</code> matches the regex 'info:merge.*'.    */
end_comment

begin_function
specifier|public
specifier|static
name|boolean
name|hasMergeRegions
parameter_list|(
name|Cell
index|[]
name|cells
parameter_list|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
if|if
condition|(
operator|!
name|isMergeQualifierPrefix
argument_list|(
name|cell
argument_list|)
condition|)
block|{
continue|continue;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_comment
comment|/**    * @return True if the column in<code>cell</code> matches the regex 'info:merge.*'.    */
end_comment

begin_function
specifier|private
specifier|static
name|boolean
name|isMergeQualifierPrefix
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
comment|// Check to see if has family and that qualifier starts with the merge qualifier 'merge'
return|return
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|cell
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|&&
name|PrivateCellUtil
operator|.
name|qualifierStartsWith
argument_list|(
name|cell
argument_list|,
name|HConstants
operator|.
name|MERGE_QUALIFIER_PREFIX
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Checks if the specified table exists.  Looks at the hbase:meta table hosted on    * the specified server.    * @param connection connection we're using    * @param tableName table to check    * @return true if the table exists in meta, false if not    */
end_comment

begin_function
specifier|public
specifier|static
name|boolean
name|tableExists
parameter_list|(
name|Connection
name|connection
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Catalog tables always exist.
return|return
name|tableName
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|||
name|getTableState
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|)
operator|!=
literal|null
return|;
block|}
end_function

begin_comment
comment|/**    * Lists all of the regions currently in META.    *    * @param connection to connect with    * @param excludeOfflinedSplitParents False if we are to include offlined/splitparents regions,    *                                    true and we'll leave out offlined regions from returned list    * @return List of all user-space regions.    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getAllRegions
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|boolean
name|excludeOfflinedSplitParents
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|result
decl_stmt|;
name|result
operator|=
name|getTableRegionsAndLocations
argument_list|(
name|connection
argument_list|,
literal|null
argument_list|,
name|excludeOfflinedSplitParents
argument_list|)
expr_stmt|;
return|return
name|getListOfRegionInfos
argument_list|(
name|result
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Gets all of the regions of the specified table. Do not use this method    * to get meta table regions, use methods in MetaTableLocator instead.    * @param connection connection we're using    * @param tableName table we're looking for    * @return Ordered list of {@link RegionInfo}.    */
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getTableRegions
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getTableRegions
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Gets all of the regions of the specified table. Do not use this method    * to get meta table regions, use methods in MetaTableLocator instead.    * @param connection connection we're using    * @param tableName table we're looking for    * @param excludeOfflinedSplitParents If true, do not include offlined split    * parents in the return.    * @return Ordered list of {@link RegionInfo}.    */
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getTableRegions
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|TableName
name|tableName
parameter_list|,
specifier|final
name|boolean
name|excludeOfflinedSplitParents
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|result
init|=
name|getTableRegionsAndLocations
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|excludeOfflinedSplitParents
argument_list|)
decl_stmt|;
return|return
name|getListOfRegionInfos
argument_list|(
name|result
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getListOfRegionInfos
parameter_list|(
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|pairs
parameter_list|)
block|{
if|if
condition|(
name|pairs
operator|==
literal|null
operator|||
name|pairs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|pairs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
range|:
name|pairs
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function

begin_comment
comment|/**    * @param tableName table we're working with    * @return start row for scanning META according to query type    */
end_comment

begin_function
specifier|public
specifier|static
name|byte
index|[]
name|getTableStartRowForMeta
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|QueryType
name|type
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|REGION
case|:
name|byte
index|[]
name|startRow
init|=
operator|new
name|byte
index|[
name|tableName
operator|.
name|getName
argument_list|()
operator|.
name|length
operator|+
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|startRow
argument_list|,
literal|0
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|startRow
index|[
name|startRow
operator|.
name|length
operator|-
literal|2
index|]
operator|=
name|HConstants
operator|.
name|DELIMITER
expr_stmt|;
name|startRow
index|[
name|startRow
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|HConstants
operator|.
name|DELIMITER
expr_stmt|;
return|return
name|startRow
return|;
case|case
name|ALL
case|:
case|case
name|TABLE
case|:
default|default:
return|return
name|tableName
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
end_function

begin_comment
comment|/**    * @param tableName table we're working with    * @return stop row for scanning META according to query type    */
end_comment

begin_function
specifier|public
specifier|static
name|byte
index|[]
name|getTableStopRowForMeta
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|QueryType
name|type
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|byte
index|[]
name|stopRow
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|REGION
case|:
name|stopRow
operator|=
operator|new
name|byte
index|[
name|tableName
operator|.
name|getName
argument_list|()
operator|.
name|length
operator|+
literal|3
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|stopRow
argument_list|,
literal|0
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|3
index|]
operator|=
literal|' '
expr_stmt|;
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|2
index|]
operator|=
name|HConstants
operator|.
name|DELIMITER
expr_stmt|;
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|HConstants
operator|.
name|DELIMITER
expr_stmt|;
break|break;
case|case
name|ALL
case|:
case|case
name|TABLE
case|:
default|default:
name|stopRow
operator|=
operator|new
name|byte
index|[
name|tableName
operator|.
name|getName
argument_list|()
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|stopRow
argument_list|,
literal|0
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|stopRow
index|[
name|stopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|=
literal|' '
expr_stmt|;
break|break;
block|}
return|return
name|stopRow
return|;
block|}
end_function

begin_comment
comment|/**    * This method creates a Scan object that will only scan catalog rows that    * belong to the specified table. It doesn't specify any columns.    * This is a better alternative to just using a start row and scan until    * it hits a new table since that requires parsing the HRI to get the table    * name.    * @param tableName bytes of table's name    * @return configured Scan object    */
end_comment

begin_function
annotation|@
name|Deprecated
specifier|public
specifier|static
name|Scan
name|getScanForTableName
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
comment|// Start key is just the table name with delimiters
name|byte
index|[]
name|startKey
init|=
name|getTableStartRowForMeta
argument_list|(
name|tableName
argument_list|,
name|QueryType
operator|.
name|REGION
argument_list|)
decl_stmt|;
comment|// Stop key appends the smallest possible char to the table name
name|byte
index|[]
name|stopKey
init|=
name|getTableStopRowForMeta
argument_list|(
name|tableName
argument_list|,
name|QueryType
operator|.
name|REGION
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
name|getMetaScan
argument_list|(
name|connection
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|startKey
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|stopKey
argument_list|)
expr_stmt|;
return|return
name|scan
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|Scan
name|getMetaScan
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|int
name|rowUpperLimit
parameter_list|)
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|int
name|scannerCaching
init|=
name|connection
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_META_SCANNER_CACHING
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_META_SCANNER_CACHING
argument_list|)
decl_stmt|;
if|if
condition|(
name|connection
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|USE_META_REPLICAS
argument_list|,
name|HConstants
operator|.
name|DEFAULT_USE_META_REPLICAS
argument_list|)
condition|)
block|{
name|scan
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rowUpperLimit
operator|>
literal|0
condition|)
block|{
name|scan
operator|.
name|setLimit
argument_list|(
name|rowUpperLimit
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReadType
argument_list|(
name|Scan
operator|.
name|ReadType
operator|.
name|PREAD
argument_list|)
expr_stmt|;
block|}
name|scan
operator|.
name|setCaching
argument_list|(
name|scannerCaching
argument_list|)
expr_stmt|;
return|return
name|scan
return|;
block|}
end_function

begin_comment
comment|/**    * Do not use this method to get meta table regions, use methods in MetaTableLocator instead.    * @param connection connection we're using    * @param tableName table we're looking for    * @return Return list of regioninfos and server.    */
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|getTableRegionsAndLocations
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getTableRegionsAndLocations
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Do not use this method to get meta table regions, use methods in MetaTableLocator instead.    * @param connection connection we're using    * @param tableName table to work with, can be null for getting all regions    * @param excludeOfflinedSplitParents don't return split parents    * @return Return list of regioninfos and server addresses.    */
end_comment

begin_comment
comment|// What happens here when 1M regions in hbase:meta? This won't scale?
end_comment

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|getTableRegionsAndLocations
parameter_list|(
name|Connection
name|connection
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|boolean
name|excludeOfflinedSplitParents
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tableName
operator|!=
literal|null
operator|&&
name|tableName
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"This method can't be used to locate meta regions;"
operator|+
literal|" use MetaTableLocator instead"
argument_list|)
throw|;
block|}
comment|// Make a version of CollectingVisitor that collects RegionInfo and ServerAddress
name|CollectingVisitor
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|visitor
init|=
operator|new
name|CollectingVisitor
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|private
name|RegionLocations
name|current
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|current
operator|=
name|getRegionLocations
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
operator|||
name|current
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No serialized RegionInfo in "
operator|+
name|r
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|RegionInfo
name|hri
init|=
name|current
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|getRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludeOfflinedSplitParents
operator|&&
name|hri
operator|.
name|isSplitParent
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// Else call super and add this Result to the collection.
return|return
name|super
operator|.
name|visit
argument_list|(
name|r
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|add
parameter_list|(
name|Result
name|r
parameter_list|)
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|HRegionLocation
name|loc
range|:
name|current
operator|.
name|getRegionLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|results
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|loc
operator|.
name|getRegion
argument_list|()
argument_list|,
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|scanMeta
argument_list|(
name|connection
argument_list|,
name|getTableStartRowForMeta
argument_list|(
name|tableName
argument_list|,
name|QueryType
operator|.
name|REGION
argument_list|)
argument_list|,
name|getTableStopRowForMeta
argument_list|(
name|tableName
argument_list|,
name|QueryType
operator|.
name|REGION
argument_list|)
argument_list|,
name|QueryType
operator|.
name|REGION
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
return|return
name|visitor
operator|.
name|getResults
argument_list|()
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|fullScanMetaAndPrint
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
name|Visitor
name|v
init|=
name|r
lambda|->
block|{
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"fullScanMetaAndPrint.Current Meta Row: "
operator|+
name|r
argument_list|)
expr_stmt|;
name|TableState
name|state
init|=
name|getTableState
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"fullScanMetaAndPrint.Table State={}"
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RegionLocations
name|locations
init|=
name|getRegionLocations
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|locations
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|HRegionLocation
name|loc
range|:
name|locations
operator|.
name|getRegionLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"fullScanMetaAndPrint.HRI Print={}"
argument_list|,
name|loc
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
decl_stmt|;
name|scanMeta
argument_list|(
name|connection
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|QueryType
operator|.
name|ALL
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|scanMetaForTableRegions
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|Visitor
name|visitor
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|scanMeta
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|QueryType
operator|.
name|REGION
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|scanMeta
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|TableName
name|table
parameter_list|,
name|QueryType
name|type
parameter_list|,
name|int
name|maxRows
parameter_list|,
specifier|final
name|Visitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|scanMeta
argument_list|(
name|connection
argument_list|,
name|getTableStartRowForMeta
argument_list|(
name|table
argument_list|,
name|type
argument_list|)
argument_list|,
name|getTableStopRowForMeta
argument_list|(
name|table
argument_list|,
name|type
argument_list|)
argument_list|,
name|type
argument_list|,
name|maxRows
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|scanMeta
parameter_list|(
name|Connection
name|connection
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|byte
index|[]
name|startRow
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|byte
index|[]
name|stopRow
parameter_list|,
name|QueryType
name|type
parameter_list|,
specifier|final
name|Visitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|scanMeta
argument_list|(
name|connection
argument_list|,
name|startRow
argument_list|,
name|stopRow
argument_list|,
name|type
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Performs a scan of META table for given table starting from given row.    * @param connection connection we're using    * @param visitor    visitor to call    * @param tableName  table withing we scan    * @param row        start scan from this row    * @param rowLimit   max number of rows to return    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|scanMeta
parameter_list|(
name|Connection
name|connection
parameter_list|,
specifier|final
name|Visitor
name|visitor
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|int
name|rowLimit
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|startRow
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tableName
operator|!=
literal|null
condition|)
block|{
name|startRow
operator|=
name|getTableStartRowForMeta
argument_list|(
name|tableName
argument_list|,
name|QueryType
operator|.
name|REGION
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
block|{
name|RegionInfo
name|closestRi
init|=
name|getClosestRegionInfo
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
decl_stmt|;
name|startRow
operator|=
name|RegionInfo
operator|.
name|createRegionName
argument_list|(
name|tableName
argument_list|,
name|closestRi
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|HConstants
operator|.
name|ZEROES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|stopRow
operator|=
name|getTableStopRowForMeta
argument_list|(
name|tableName
argument_list|,
name|QueryType
operator|.
name|REGION
argument_list|)
expr_stmt|;
block|}
name|scanMeta
argument_list|(
name|connection
argument_list|,
name|startRow
argument_list|,
name|stopRow
argument_list|,
name|QueryType
operator|.
name|REGION
argument_list|,
name|rowLimit
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Performs a scan of META table.    * @param connection connection we're using    * @param startRow Where to start the scan. Pass null if want to begin scan    *                 at first row.    * @param stopRow Where to stop the scan. Pass null if want to scan all rows    *                from the start one    * @param type scanned part of meta    * @param maxRows maximum rows to return    * @param visitor Visitor invoked against each row.    */
end_comment

begin_function
specifier|static
name|void
name|scanMeta
parameter_list|(
name|Connection
name|connection
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|byte
index|[]
name|startRow
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|byte
index|[]
name|stopRow
parameter_list|,
name|QueryType
name|type
parameter_list|,
name|int
name|maxRows
parameter_list|,
specifier|final
name|Visitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|scanMeta
argument_list|(
name|connection
argument_list|,
name|startRow
argument_list|,
name|stopRow
argument_list|,
name|type
argument_list|,
literal|null
argument_list|,
name|maxRows
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|scanMeta
parameter_list|(
name|Connection
name|connection
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|byte
index|[]
name|startRow
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|byte
index|[]
name|stopRow
parameter_list|,
name|QueryType
name|type
parameter_list|,
annotation|@
name|Nullable
name|Filter
name|filter
parameter_list|,
name|int
name|maxRows
parameter_list|,
specifier|final
name|Visitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|rowUpperLimit
init|=
name|maxRows
operator|>
literal|0
condition|?
name|maxRows
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|Scan
name|scan
init|=
name|getMetaScan
argument_list|(
name|connection
argument_list|,
name|rowUpperLimit
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|type
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|startRow
operator|!=
literal|null
condition|)
block|{
name|scan
operator|.
name|withStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stopRow
operator|!=
literal|null
condition|)
block|{
name|scan
operator|.
name|withStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Scanning META"
operator|+
literal|" starting at row="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|startRow
argument_list|)
operator|+
literal|" stopping at row="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|stopRow
argument_list|)
operator|+
literal|" for max="
operator|+
name|rowUpperLimit
operator|+
literal|" with caching="
operator|+
name|scan
operator|.
name|getCaching
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|currentRow
init|=
literal|0
decl_stmt|;
try|try
init|(
name|Table
name|metaTable
init|=
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
init|)
block|{
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|metaTable
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|Result
name|data
decl_stmt|;
while|while
condition|(
operator|(
name|data
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
comment|// Break if visit returns false.
if|if
condition|(
operator|!
name|visitor
operator|.
name|visit
argument_list|(
name|data
argument_list|)
condition|)
break|break;
if|if
condition|(
operator|++
name|currentRow
operator|>=
name|rowUpperLimit
condition|)
break|break;
block|}
block|}
block|}
if|if
condition|(
name|visitor
operator|instanceof
name|Closeable
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|Closeable
operator|)
name|visitor
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|ExceptionUtil
operator|.
name|rethrowIfInterrupt
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got exception in closing the meta scanner visitor"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * @return Get closest metatable region row to passed<code>row</code>    */
end_comment

begin_function
annotation|@
name|NonNull
specifier|private
specifier|static
name|RegionInfo
name|getClosestRegionInfo
parameter_list|(
name|Connection
name|connection
parameter_list|,
annotation|@
name|NonNull
specifier|final
name|TableName
name|tableName
parameter_list|,
annotation|@
name|NonNull
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|searchRow
init|=
name|RegionInfo
operator|.
name|createRegionName
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|HConstants
operator|.
name|NINES
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
name|getMetaScan
argument_list|(
name|connection
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|withStartRow
argument_list|(
name|searchRow
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|resultScanner
init|=
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|Result
name|result
init|=
name|resultScanner
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
literal|"Cannot find row in META "
operator|+
literal|" for table: "
operator|+
name|tableName
operator|+
literal|", row="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
argument_list|)
throw|;
block|}
name|RegionInfo
name|regionInfo
init|=
name|getRegionInfo
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"RegionInfo was null or empty in Meta for "
operator|+
name|tableName
operator|+
literal|", row="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|regionInfo
return|;
block|}
block|}
end_function

begin_comment
comment|/**    * Returns the column family used for meta columns.    * @return HConstants.CATALOG_FAMILY.    */
end_comment

begin_function
specifier|public
specifier|static
name|byte
index|[]
name|getCatalogFamily
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|CATALOG_FAMILY
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the column family used for table columns.    * @return HConstants.TABLE_FAMILY.    */
end_comment

begin_function
specifier|private
specifier|static
name|byte
index|[]
name|getTableFamily
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|TABLE_FAMILY
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the column qualifier for serialized region info    * @return HConstants.REGIONINFO_QUALIFIER    */
end_comment

begin_function
specifier|public
specifier|static
name|byte
index|[]
name|getRegionInfoColumn
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the column qualifier for serialized table state    * @return HConstants.TABLE_STATE_QUALIFIER    */
end_comment

begin_function
specifier|private
specifier|static
name|byte
index|[]
name|getTableStateColumn
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|TABLE_STATE_QUALIFIER
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the column qualifier for serialized region state    * @return HConstants.STATE_QUALIFIER    */
end_comment

begin_function
specifier|private
specifier|static
name|byte
index|[]
name|getRegionStateColumn
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|STATE_QUALIFIER
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the column qualifier for serialized region state    * @param replicaId the replicaId of the region    * @return a byte[] for state qualifier    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
specifier|static
name|byte
index|[]
name|getRegionStateColumn
parameter_list|(
name|int
name|replicaId
parameter_list|)
block|{
return|return
name|replicaId
operator|==
literal|0
condition|?
name|HConstants
operator|.
name|STATE_QUALIFIER
else|:
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HConstants
operator|.
name|STATE_QUALIFIER_STR
operator|+
name|META_REPLICA_ID_DELIMITER
operator|+
name|String
operator|.
name|format
argument_list|(
name|RegionInfo
operator|.
name|REPLICA_ID_FORMAT
argument_list|,
name|replicaId
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the column qualifier for serialized region state    * @param replicaId the replicaId of the region    * @return a byte[] for sn column qualifier    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
specifier|static
name|byte
index|[]
name|getServerNameColumn
parameter_list|(
name|int
name|replicaId
parameter_list|)
block|{
return|return
name|replicaId
operator|==
literal|0
condition|?
name|HConstants
operator|.
name|SERVERNAME_QUALIFIER
else|:
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HConstants
operator|.
name|SERVERNAME_QUALIFIER_STR
operator|+
name|META_REPLICA_ID_DELIMITER
operator|+
name|String
operator|.
name|format
argument_list|(
name|RegionInfo
operator|.
name|REPLICA_ID_FORMAT
argument_list|,
name|replicaId
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the column qualifier for server column for replicaId    * @param replicaId the replicaId of the region    * @return a byte[] for server column qualifier    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|byte
index|[]
name|getServerColumn
parameter_list|(
name|int
name|replicaId
parameter_list|)
block|{
return|return
name|replicaId
operator|==
literal|0
condition|?
name|HConstants
operator|.
name|SERVER_QUALIFIER
else|:
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HConstants
operator|.
name|SERVER_QUALIFIER_STR
operator|+
name|META_REPLICA_ID_DELIMITER
operator|+
name|String
operator|.
name|format
argument_list|(
name|RegionInfo
operator|.
name|REPLICA_ID_FORMAT
argument_list|,
name|replicaId
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the column qualifier for server start code column for replicaId    * @param replicaId the replicaId of the region    * @return a byte[] for server start code column qualifier    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|byte
index|[]
name|getStartCodeColumn
parameter_list|(
name|int
name|replicaId
parameter_list|)
block|{
return|return
name|replicaId
operator|==
literal|0
condition|?
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
else|:
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HConstants
operator|.
name|STARTCODE_QUALIFIER_STR
operator|+
name|META_REPLICA_ID_DELIMITER
operator|+
name|String
operator|.
name|format
argument_list|(
name|RegionInfo
operator|.
name|REPLICA_ID_FORMAT
argument_list|,
name|replicaId
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the column qualifier for seqNum column for replicaId    * @param replicaId the replicaId of the region    * @return a byte[] for seqNum column qualifier    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|byte
index|[]
name|getSeqNumColumn
parameter_list|(
name|int
name|replicaId
parameter_list|)
block|{
return|return
name|replicaId
operator|==
literal|0
condition|?
name|HConstants
operator|.
name|SEQNUM_QUALIFIER
else|:
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HConstants
operator|.
name|SEQNUM_QUALIFIER_STR
operator|+
name|META_REPLICA_ID_DELIMITER
operator|+
name|String
operator|.
name|format
argument_list|(
name|RegionInfo
operator|.
name|REPLICA_ID_FORMAT
argument_list|,
name|replicaId
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Parses the replicaId from the server column qualifier. See top of the class javadoc    * for the actual meta layout    * @param serverColumn the column qualifier    * @return an int for the replicaId    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
specifier|static
name|int
name|parseReplicaIdFromServerColumn
parameter_list|(
name|byte
index|[]
name|serverColumn
parameter_list|)
block|{
name|String
name|serverStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|serverColumn
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|SERVER_COLUMN_PATTERN
operator|.
name|matcher
argument_list|(
name|serverStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
operator|&&
name|matcher
operator|.
name|groupCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|group
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
operator|&&
name|group
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|group
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|16
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_comment
comment|/**    * Returns a {@link ServerName} from catalog table {@link Result}.    * @param r Result to pull from    * @return A ServerName instance or null if necessary fields not found or empty.    */
end_comment

begin_function
annotation|@
name|Nullable
annotation|@
name|InterfaceAudience
operator|.
name|Private
comment|// for use by HMaster#getTableRegionRow which is used for testing only
specifier|public
specifier|static
name|ServerName
name|getServerName
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|,
specifier|final
name|int
name|replicaId
parameter_list|)
block|{
name|byte
index|[]
name|serverColumn
init|=
name|getServerColumn
argument_list|(
name|replicaId
argument_list|)
decl_stmt|;
name|Cell
name|cell
init|=
name|r
operator|.
name|getColumnLatestCell
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|,
name|serverColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
operator|||
name|cell
operator|.
name|getValueLength
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|String
name|hostAndPort
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|startcodeColumn
init|=
name|getStartCodeColumn
argument_list|(
name|replicaId
argument_list|)
decl_stmt|;
name|cell
operator|=
name|r
operator|.
name|getColumnLatestCell
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|,
name|startcodeColumn
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
operator|||
name|cell
operator|.
name|getValueLength
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
try|try
block|{
return|return
name|ServerName
operator|.
name|valueOf
argument_list|(
name|hostAndPort
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Ignoring invalid region for server "
operator|+
name|hostAndPort
operator|+
literal|"; cell="
operator|+
name|cell
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
end_function

begin_comment
comment|/**    * The latest seqnum that the server writing to meta observed when opening the region.    * E.g. the seqNum when the result of {@link #getServerName(Result, int)} was written.    * @param r Result to pull the seqNum from    * @return SeqNum, or HConstants.NO_SEQNUM if there's no value written.    */
end_comment

begin_function
specifier|private
specifier|static
name|long
name|getSeqNumDuringOpen
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|,
specifier|final
name|int
name|replicaId
parameter_list|)
block|{
name|Cell
name|cell
init|=
name|r
operator|.
name|getColumnLatestCell
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|,
name|getSeqNumColumn
argument_list|(
name|replicaId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
operator|||
name|cell
operator|.
name|getValueLength
argument_list|()
operator|==
literal|0
condition|)
return|return
name|HConstants
operator|.
name|NO_SEQNUM
return|;
return|return
name|Bytes
operator|.
name|toLong
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the daughter regions by reading the corresponding columns of the catalog table    * Result.    * @param data a Result object from the catalog table scan    * @return pair of RegionInfo or PairOfSameType(null, null) if region is not a split parent    */
end_comment

begin_function
specifier|public
specifier|static
name|PairOfSameType
argument_list|<
name|RegionInfo
argument_list|>
name|getDaughterRegions
parameter_list|(
name|Result
name|data
parameter_list|)
block|{
name|RegionInfo
name|splitA
init|=
name|getRegionInfo
argument_list|(
name|data
argument_list|,
name|HConstants
operator|.
name|SPLITA_QUALIFIER
argument_list|)
decl_stmt|;
name|RegionInfo
name|splitB
init|=
name|getRegionInfo
argument_list|(
name|data
argument_list|,
name|HConstants
operator|.
name|SPLITB_QUALIFIER
argument_list|)
decl_stmt|;
return|return
operator|new
name|PairOfSameType
argument_list|<>
argument_list|(
name|splitA
argument_list|,
name|splitB
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns an HRegionLocationList extracted from the result.    * @return an HRegionLocationList containing all locations for the region range or null if    *  we can't deserialize the result.    */
end_comment

begin_function
annotation|@
name|Nullable
specifier|public
specifier|static
name|RegionLocations
name|getRegionLocations
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|RegionInfo
name|regionInfo
init|=
name|getRegionInfo
argument_list|(
name|r
argument_list|,
name|getRegionInfoColumn
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionInfo
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|familyMap
init|=
name|r
operator|.
name|getNoVersionMap
argument_list|()
decl_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|getRegionLocation
argument_list|(
name|r
argument_list|,
name|regionInfo
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|infoMap
init|=
name|familyMap
operator|.
name|get
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|infoMap
operator|==
literal|null
condition|)
return|return
operator|new
name|RegionLocations
argument_list|(
name|locations
argument_list|)
return|;
comment|// iterate until all serverName columns are seen
name|int
name|replicaId
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|serverColumn
init|=
name|getServerColumn
argument_list|(
name|replicaId
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|serverMap
decl_stmt|;
name|serverMap
operator|=
name|infoMap
operator|.
name|tailMap
argument_list|(
name|serverColumn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverMap
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|RegionLocations
argument_list|(
name|locations
argument_list|)
return|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|serverMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|replicaId
operator|=
name|parseReplicaIdFromServerColumn
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|replicaId
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|HRegionLocation
name|location
init|=
name|getRegionLocation
argument_list|(
name|r
argument_list|,
name|regionInfo
argument_list|,
name|replicaId
argument_list|)
decl_stmt|;
comment|// In case the region replica is newly created, it's location might be null. We usually do not
comment|// have HRL's in RegionLocations object with null ServerName. They are handled as null HRLs.
if|if
condition|(
name|location
operator|.
name|getServerName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|locations
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|locations
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|RegionLocations
argument_list|(
name|locations
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the HRegionLocation parsed from the given meta row Result    * for the given regionInfo and replicaId. The regionInfo can be the default region info    * for the replica.    * @param r the meta row result    * @param regionInfo RegionInfo for default replica    * @param replicaId the replicaId for the HRegionLocation    * @return HRegionLocation parsed from the given meta row Result for the given replicaId    */
end_comment

begin_function
specifier|private
specifier|static
name|HRegionLocation
name|getRegionLocation
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|,
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|int
name|replicaId
parameter_list|)
block|{
name|ServerName
name|serverName
init|=
name|getServerName
argument_list|(
name|r
argument_list|,
name|replicaId
argument_list|)
decl_stmt|;
name|long
name|seqNum
init|=
name|getSeqNumDuringOpen
argument_list|(
name|r
argument_list|,
name|replicaId
argument_list|)
decl_stmt|;
name|RegionInfo
name|replicaInfo
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|regionInfo
argument_list|,
name|replicaId
argument_list|)
decl_stmt|;
return|return
operator|new
name|HRegionLocation
argument_list|(
name|replicaInfo
argument_list|,
name|serverName
argument_list|,
name|seqNum
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns RegionInfo object from the column    * HConstants.CATALOG_FAMILY:HConstants.REGIONINFO_QUALIFIER of the catalog    * table Result.    * @param data a Result object from the catalog table scan    * @return RegionInfo or null    */
end_comment

begin_function
specifier|public
specifier|static
name|RegionInfo
name|getRegionInfo
parameter_list|(
name|Result
name|data
parameter_list|)
block|{
return|return
name|getRegionInfo
argument_list|(
name|data
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the RegionInfo object from the column {@link HConstants#CATALOG_FAMILY} and    *<code>qualifier</code> of the catalog table result.    * @param r a Result object from the catalog table scan    * @param qualifier Column family qualifier    * @return An RegionInfo instance or null.    */
end_comment

begin_function
annotation|@
name|Nullable
specifier|public
specifier|static
name|RegionInfo
name|getRegionInfo
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
block|{
name|Cell
name|cell
init|=
name|r
operator|.
name|getColumnLatestCell
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|RegionInfo
operator|.
name|parseFromOrNull
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Fetch table state for given table from META table    * @param conn connection to use    * @param tableName table to fetch state for    */
end_comment

begin_function
annotation|@
name|Nullable
specifier|public
specifier|static
name|TableState
name|getTableState
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
return|return
operator|new
name|TableState
argument_list|(
name|tableName
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
return|;
block|}
name|Table
name|metaHTable
init|=
name|getMetaHTable
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|addColumn
argument_list|(
name|getTableFamily
argument_list|()
argument_list|,
name|getTableStateColumn
argument_list|()
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|metaHTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
return|return
name|getTableState
argument_list|(
name|result
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Fetch table states from META table    * @param conn connection to use    * @return map {tableName -&gt; state}    */
end_comment

begin_function
specifier|public
specifier|static
name|Map
argument_list|<
name|TableName
argument_list|,
name|TableState
argument_list|>
name|getTableStates
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|TableState
argument_list|>
name|states
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Visitor
name|collector
init|=
name|r
lambda|->
block|{
name|TableState
name|state
init|=
name|getTableState
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|states
operator|.
name|put
argument_list|(
name|state
operator|.
name|getTableName
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
decl_stmt|;
name|fullScanTables
argument_list|(
name|conn
argument_list|,
name|collector
argument_list|)
expr_stmt|;
return|return
name|states
return|;
block|}
end_function

begin_comment
comment|/**    * Updates state in META    * @param conn connection to use    * @param tableName table to look for    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|updateTableState
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|TableState
operator|.
name|State
name|actual
parameter_list|)
throws|throws
name|IOException
block|{
name|updateTableState
argument_list|(
name|conn
argument_list|,
operator|new
name|TableState
argument_list|(
name|tableName
argument_list|,
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Decode table state from META Result.    * Should contain cell from HConstants.TABLE_FAMILY    * @return null if not found    */
end_comment

begin_function
annotation|@
name|Nullable
specifier|public
specifier|static
name|TableState
name|getTableState
parameter_list|(
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|Cell
name|cell
init|=
name|r
operator|.
name|getColumnLatestCell
argument_list|(
name|getTableFamily
argument_list|()
argument_list|,
name|getTableStateColumn
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|TableState
operator|.
name|parseFrom
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
operator|+
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Implementations 'visit' a catalog table row.    */
end_comment

begin_interface
specifier|public
interface|interface
name|Visitor
block|{
comment|/**      * Visit the catalog table row.      * @param r A row from catalog table      * @return True if we are to proceed scanning the table, else false if      * we are to stop now.      */
name|boolean
name|visit
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

begin_comment
comment|/**    * Implementations 'visit' a catalog table row but with close() at the end.    */
end_comment

begin_interface
specifier|public
interface|interface
name|CloseableVisitor
extends|extends
name|Visitor
extends|,
name|Closeable
block|{   }
end_interface

begin_comment
comment|/**    * A {@link Visitor} that collects content out of passed {@link Result}.    */
end_comment

begin_class
specifier|static
specifier|abstract
class|class
name|CollectingVisitor
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Visitor
block|{
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|abstract
name|void
name|add
parameter_list|(
name|Result
name|r
parameter_list|)
function_decl|;
comment|/**      * @return Collected results; wait till visits complete to collect all      * possible results      */
name|List
argument_list|<
name|T
argument_list|>
name|getResults
parameter_list|()
block|{
return|return
name|this
operator|.
name|results
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * Collects all returned.    */
end_comment

begin_class
specifier|static
class|class
name|CollectAllVisitor
extends|extends
name|CollectingVisitor
argument_list|<
name|Result
argument_list|>
block|{
annotation|@
name|Override
name|void
name|add
parameter_list|(
name|Result
name|r
parameter_list|)
block|{
name|this
operator|.
name|results
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**    * A Visitor that skips offline regions and split parents    */
end_comment

begin_class
specifier|public
specifier|static
specifier|abstract
class|class
name|DefaultVisitorBase
implements|implements
name|Visitor
block|{
name|DefaultVisitorBase
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|boolean
name|visitInternal
parameter_list|(
name|Result
name|rowResult
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|rowResult
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionInfo
name|info
init|=
name|getRegionInfo
argument_list|(
name|rowResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|//skip over offline and split regions
if|if
condition|(
operator|!
operator|(
name|info
operator|.
name|isOffline
argument_list|()
operator|||
name|info
operator|.
name|isSplit
argument_list|()
operator|)
condition|)
block|{
return|return
name|visitInternal
argument_list|(
name|rowResult
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

begin_comment
comment|/**    * Count regions in<code>hbase:meta</code> for passed table.    * @param c Configuration object    * @param tableName table name to count regions for    * @return Count or regions in table<code>tableName</code>    */
end_comment

begin_function
specifier|public
specifier|static
name|int
name|getRegionCount
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c
argument_list|)
init|)
block|{
return|return
name|getRegionCount
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|)
return|;
block|}
block|}
end_function

begin_comment
comment|/**    * Count regions in<code>hbase:meta</code> for passed table.    * @param connection Connection object    * @param tableName table name to count regions for    * @return Count or regions in table<code>tableName</code>    */
end_comment

begin_function
specifier|public
specifier|static
name|int
name|getRegionCount
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|RegionLocator
name|locator
init|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|locations
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
return|return
name|locations
operator|==
literal|null
condition|?
literal|0
else|:
name|locations
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_function

begin_comment
comment|////////////////////////
end_comment

begin_comment
comment|// Editing operations //
end_comment

begin_comment
comment|////////////////////////
end_comment

begin_comment
comment|/**    * Generates and returns a Put containing the region into for the catalog table    */
end_comment

begin_function
specifier|public
specifier|static
name|Put
name|makePutFromRegionInfo
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|addRegionInfo
argument_list|(
operator|new
name|Put
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|ts
argument_list|)
argument_list|,
name|regionInfo
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Generates and returns a Delete containing the region info for the catalog table    */
end_comment

begin_function
specifier|private
specifier|static
name|Delete
name|makeDeleteFromRegionInfo
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|long
name|ts
parameter_list|)
block|{
if|if
condition|(
name|regionInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't make a delete for null region"
argument_list|)
throw|;
block|}
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|,
name|ts
argument_list|)
expr_stmt|;
return|return
name|delete
return|;
block|}
end_function

begin_comment
comment|/**    * Adds split daughters to the Put    */
end_comment

begin_function
specifier|private
specifier|static
name|Put
name|addDaughtersToPut
parameter_list|(
name|Put
name|put
parameter_list|,
name|RegionInfo
name|splitA
parameter_list|,
name|RegionInfo
name|splitB
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|splitA
operator|!=
literal|null
condition|)
block|{
name|put
operator|.
name|add
argument_list|(
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|HConstants
operator|.
name|SPLITA_QUALIFIER
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|put
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|RegionInfo
operator|.
name|toByteArray
argument_list|(
name|splitA
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|splitB
operator|!=
literal|null
condition|)
block|{
name|put
operator|.
name|add
argument_list|(
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|HConstants
operator|.
name|SPLITB_QUALIFIER
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|put
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|RegionInfo
operator|.
name|toByteArray
argument_list|(
name|splitB
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|put
return|;
block|}
end_function

begin_comment
comment|/**    * Put the passed<code>p</code> to the<code>hbase:meta</code> table.    * @param connection connection we're using    * @param p Put to add to hbase:meta    */
end_comment

begin_function
specifier|private
specifier|static
name|void
name|putToMetaTable
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|Put
name|p
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
init|)
block|{
name|put
argument_list|(
name|table
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * @param t Table to use    * @param p put to make    */
end_comment

begin_function
specifier|private
specifier|static
name|void
name|put
parameter_list|(
name|Table
name|t
parameter_list|,
name|Put
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|debugLogMutation
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Put the passed<code>ps</code> to the<code>hbase:meta</code> table.    * @param connection connection we're using    * @param ps Put to add to hbase:meta    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|putsToMetaTable
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
specifier|final
name|List
argument_list|<
name|Put
argument_list|>
name|ps
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
init|(
name|Table
name|t
init|=
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
init|)
block|{
name|debugLogMutations
argument_list|(
name|ps
argument_list|)
expr_stmt|;
comment|// the implementation for putting a single Put is much simpler so here we do a check first.
if|if
condition|(
name|ps
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|t
operator|.
name|put
argument_list|(
name|ps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|.
name|put
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Delete the passed<code>d</code> from the<code>hbase:meta</code> table.    * @param connection connection we're using    * @param d Delete to add to hbase:meta    */
end_comment

begin_function
specifier|private
specifier|static
name|void
name|deleteFromMetaTable
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
specifier|final
name|Delete
name|d
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Delete
argument_list|>
name|dels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|dels
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|deleteFromMetaTable
argument_list|(
name|connection
argument_list|,
name|dels
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Delete the passed<code>deletes</code> from the<code>hbase:meta</code> table.    * @param connection connection we're using    * @param deletes Deletes to add to hbase:meta  This list should support #remove.    */
end_comment

begin_function
specifier|private
specifier|static
name|void
name|deleteFromMetaTable
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
specifier|final
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|t
init|=
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
init|)
block|{
name|debugLogMutations
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Deletes some replica columns corresponding to replicas for the passed rows    * @param metaRows rows in hbase:meta    * @param replicaIndexToDeleteFrom the replica ID we would start deleting from    * @param numReplicasToRemove how many replicas to remove    * @param connection connection we're using to access meta table    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|removeRegionReplicasFromMeta
parameter_list|(
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|metaRows
parameter_list|,
name|int
name|replicaIndexToDeleteFrom
parameter_list|,
name|int
name|numReplicasToRemove
parameter_list|,
name|Connection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|absoluteIndex
init|=
name|replicaIndexToDeleteFrom
operator|+
name|numReplicasToRemove
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|row
range|:
name|metaRows
control|)
block|{
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|Delete
name|deleteReplicaLocations
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|replicaIndexToDeleteFrom
init|;
name|i
operator|<
name|absoluteIndex
condition|;
name|i
operator|++
control|)
block|{
name|deleteReplicaLocations
operator|.
name|addColumns
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|,
name|getServerColumn
argument_list|(
name|i
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|deleteReplicaLocations
operator|.
name|addColumns
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|,
name|getSeqNumColumn
argument_list|(
name|i
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|deleteReplicaLocations
operator|.
name|addColumns
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|,
name|getStartCodeColumn
argument_list|(
name|i
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|deleteReplicaLocations
operator|.
name|addColumns
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|,
name|getServerNameColumn
argument_list|(
name|i
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|deleteReplicaLocations
operator|.
name|addColumns
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|,
name|getRegionStateColumn
argument_list|(
name|i
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
name|deleteFromMetaTable
argument_list|(
name|connection
argument_list|,
name|deleteReplicaLocations
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|Put
name|addRegionStateToPut
parameter_list|(
name|Put
name|put
parameter_list|,
name|RegionState
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|put
operator|.
name|add
argument_list|(
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|getRegionStateColumn
argument_list|()
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|put
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Cell
operator|.
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|state
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|put
return|;
block|}
end_function

begin_comment
comment|/**    * Update state column in hbase:meta.    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|updateRegionState
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RegionInfo
name|ri
parameter_list|,
name|RegionState
operator|.
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|RegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|ri
argument_list|)
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|MetaTableAccessor
operator|.
name|putsToMetaTable
argument_list|(
name|connection
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|addRegionStateToPut
argument_list|(
name|put
argument_list|,
name|state
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Adds daughter region infos to hbase:meta row for the specified region. Note that this does not    * add its daughter's as different rows, but adds information about the daughters in the same row    * as the parent. Use    * {@link #splitRegion(Connection, RegionInfo, long, RegionInfo, RegionInfo, ServerName, int)}    * if you want to do that.    * @param connection connection we're using    * @param regionInfo RegionInfo of parent region    * @param splitA first split daughter of the parent regionInfo    * @param splitB second split daughter of the parent regionInfo    * @throws IOException if problem connecting or updating meta    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|addSplitsToParent
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RegionInfo
name|regionInfo
parameter_list|,
name|RegionInfo
name|splitA
parameter_list|,
name|RegionInfo
name|splitB
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|meta
init|=
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
init|)
block|{
name|Put
name|put
init|=
name|makePutFromRegionInfo
argument_list|(
name|regionInfo
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
decl_stmt|;
name|addDaughtersToPut
argument_list|(
name|put
argument_list|,
name|splitA
argument_list|,
name|splitB
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|debugLogMutation
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added region {}"
argument_list|,
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Adds a (single) hbase:meta row for the specified new region and its daughters. Note that this    * does not add its daughter's as different rows, but adds information about the daughters    * in the same row as the parent. Use    * {@link #splitRegion(Connection, RegionInfo, long, RegionInfo, RegionInfo, ServerName, int)}    * if you want to do that.    * @param connection connection we're using    * @param regionInfo region information    * @throws IOException if problem connecting or updating meta    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|void
name|addRegionToMeta
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|addRegionsToMeta
argument_list|(
name|connection
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|regionInfo
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Adds a hbase:meta row for each of the specified new regions. Initial state for new regions    * is CLOSED.    * @param connection connection we're using    * @param regionInfos region information list    * @throws IOException if problem connecting or updating meta    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|addRegionsToMeta
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionInfos
parameter_list|,
name|int
name|regionReplication
parameter_list|)
throws|throws
name|IOException
block|{
name|addRegionsToMeta
argument_list|(
name|connection
argument_list|,
name|regionInfos
argument_list|,
name|regionReplication
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Adds a hbase:meta row for each of the specified new regions. Initial state for new regions    * is CLOSED.    * @param connection connection we're using    * @param regionInfos region information list    * @param ts desired timestamp    * @throws IOException if problem connecting or updating meta    */
end_comment

begin_function
specifier|private
specifier|static
name|void
name|addRegionsToMeta
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionInfos
parameter_list|,
name|int
name|regionReplication
parameter_list|,
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|regionInfos
control|)
block|{
if|if
condition|(
name|RegionReplicaUtil
operator|.
name|isDefaultReplica
argument_list|(
name|regionInfo
argument_list|)
condition|)
block|{
name|Put
name|put
init|=
name|makePutFromRegionInfo
argument_list|(
name|regionInfo
argument_list|,
name|ts
argument_list|)
decl_stmt|;
comment|// New regions are added with initial state of CLOSED.
name|addRegionStateToPut
argument_list|(
name|put
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
comment|// Add empty locations for region replicas so that number of replicas can be cached
comment|// whenever the primary region is looked up from meta
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|regionReplication
condition|;
name|i
operator|++
control|)
block|{
name|addEmptyLocation
argument_list|(
name|put
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
name|putsToMetaTable
argument_list|(
name|connection
argument_list|,
name|puts
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added {} regions to meta."
argument_list|,
name|puts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|Put
name|addMergeRegions
parameter_list|(
name|Put
name|put
parameter_list|,
name|Collection
argument_list|<
name|RegionInfo
argument_list|>
name|mergeRegions
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|limit
init|=
literal|10000
decl_stmt|;
comment|// Arbitrary limit. No room in our formatted 'task0000' below for more.
name|int
name|max
init|=
name|mergeRegions
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|max
operator|>
name|limit
condition|)
block|{
comment|// Should never happen!!!!! But just in case.
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't merge "
operator|+
name|max
operator|+
literal|" regions in one go; "
operator|+
name|limit
operator|+
literal|" is upper-limit."
argument_list|)
throw|;
block|}
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RegionInfo
name|ri
range|:
name|mergeRegions
control|)
block|{
name|String
name|qualifier
init|=
name|String
operator|.
name|format
argument_list|(
name|HConstants
operator|.
name|MERGE_QUALIFIER_PREFIX_STR
operator|+
literal|"%04d"
argument_list|,
name|counter
operator|++
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qualifier
argument_list|)
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|put
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|RegionInfo
operator|.
name|toByteArray
argument_list|(
name|ri
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|put
return|;
block|}
end_function

begin_comment
comment|/**    * Merge regions into one in an atomic operation. Deletes the merging regions in    * hbase:meta and adds the merged region.    * @param connection connection we're using    * @param mergedRegion the merged region    * @param parentSeqNum Parent regions to merge and their next open sequence id used    *   by serial replication. Set to -1 if not needed by this table.    * @param sn the location of the region    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|mergeRegions
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RegionInfo
name|mergedRegion
parameter_list|,
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|Long
argument_list|>
name|parentSeqNum
parameter_list|,
name|ServerName
name|sn
parameter_list|,
name|int
name|regionReplication
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|meta
init|=
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
init|)
block|{
name|long
name|time
init|=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|replicationParents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|parentSeqNum
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RegionInfo
name|ri
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|long
name|seqNum
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Deletes for merging regions
name|mutations
operator|.
name|add
argument_list|(
name|makeDeleteFromRegionInfo
argument_list|(
name|ri
argument_list|,
name|time
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|seqNum
operator|>
literal|0
condition|)
block|{
name|mutations
operator|.
name|add
argument_list|(
name|makePutForReplicationBarrier
argument_list|(
name|ri
argument_list|,
name|seqNum
argument_list|,
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|replicationParents
operator|.
name|add
argument_list|(
name|ri
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Put for parent
name|Put
name|putOfMerged
init|=
name|makePutFromRegionInfo
argument_list|(
name|mergedRegion
argument_list|,
name|time
argument_list|)
decl_stmt|;
name|putOfMerged
operator|=
name|addMergeRegions
argument_list|(
name|putOfMerged
argument_list|,
name|parentSeqNum
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set initial state to CLOSED.
comment|// NOTE: If initial state is not set to CLOSED then merged region gets added with the
comment|// default OFFLINE state. If Master gets restarted after this step, start up sequence of
comment|// master tries to assign this offline region. This is followed by re-assignments of the
comment|// merged region from resumed {@link MergeTableRegionsProcedure}
name|addRegionStateToPut
argument_list|(
name|putOfMerged
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|mutations
operator|.
name|add
argument_list|(
name|putOfMerged
argument_list|)
expr_stmt|;
comment|// The merged is a new region, openSeqNum = 1 is fine. ServerName may be null
comment|// if crash after merge happened but before we got to here.. means in-memory
comment|// locations of offlined merged, now-closed, regions is lost. Should be ok. We
comment|// assign the merged region later.
if|if
condition|(
name|sn
operator|!=
literal|null
condition|)
block|{
name|addLocation
argument_list|(
name|putOfMerged
argument_list|,
name|sn
argument_list|,
literal|1
argument_list|,
name|mergedRegion
operator|.
name|getReplicaId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add empty locations for region replicas of the merged region so that number of replicas
comment|// can be cached whenever the primary region is looked up from meta
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|regionReplication
condition|;
name|i
operator|++
control|)
block|{
name|addEmptyLocation
argument_list|(
name|putOfMerged
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
comment|// add parent reference for serial replication
if|if
condition|(
operator|!
name|replicationParents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addReplicationParent
argument_list|(
name|putOfMerged
argument_list|,
name|replicationParents
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|tableRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mergedRegion
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
name|HConstants
operator|.
name|DELIMITER
argument_list|)
decl_stmt|;
name|multiMutate
argument_list|(
name|meta
argument_list|,
name|tableRow
argument_list|,
name|mutations
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Splits the region into two in an atomic operation. Offlines the parent region with the    * information that it is split into two, and also adds the daughter regions. Does not add the    * location information to the daughter regions since they are not open yet.    * @param connection connection we're using    * @param parent the parent region which is split    * @param parentOpenSeqNum the next open sequence id for parent region, used by serial    *          replication. -1 if not necessary.    * @param splitA Split daughter region A    * @param splitB Split daughter region B    * @param sn the location of the region    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|splitRegion
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RegionInfo
name|parent
parameter_list|,
name|long
name|parentOpenSeqNum
parameter_list|,
name|RegionInfo
name|splitA
parameter_list|,
name|RegionInfo
name|splitB
parameter_list|,
name|ServerName
name|sn
parameter_list|,
name|int
name|regionReplication
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|meta
init|=
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
init|)
block|{
name|long
name|time
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
comment|// Put for parent
name|Put
name|putParent
init|=
name|makePutFromRegionInfo
argument_list|(
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|parent
argument_list|)
operator|.
name|setOffline
argument_list|(
literal|true
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|time
argument_list|)
decl_stmt|;
name|addDaughtersToPut
argument_list|(
name|putParent
argument_list|,
name|splitA
argument_list|,
name|splitB
argument_list|)
expr_stmt|;
comment|// Puts for daughters
name|Put
name|putA
init|=
name|makePutFromRegionInfo
argument_list|(
name|splitA
argument_list|,
name|time
argument_list|)
decl_stmt|;
name|Put
name|putB
init|=
name|makePutFromRegionInfo
argument_list|(
name|splitB
argument_list|,
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentOpenSeqNum
operator|>
literal|0
condition|)
block|{
name|addReplicationBarrier
argument_list|(
name|putParent
argument_list|,
name|parentOpenSeqNum
argument_list|)
expr_stmt|;
name|addReplicationParent
argument_list|(
name|putA
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|addReplicationParent
argument_list|(
name|putB
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Set initial state to CLOSED
comment|// NOTE: If initial state is not set to CLOSED then daughter regions get added with the
comment|// default OFFLINE state. If Master gets restarted after this step, start up sequence of
comment|// master tries to assign these offline regions. This is followed by re-assignments of the
comment|// daughter regions from resumed {@link SplitTableRegionProcedure}
name|addRegionStateToPut
argument_list|(
name|putA
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|addRegionStateToPut
argument_list|(
name|putB
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
name|addSequenceNum
argument_list|(
name|putA
argument_list|,
literal|1
argument_list|,
name|splitA
operator|.
name|getReplicaId
argument_list|()
argument_list|)
expr_stmt|;
comment|// new regions, openSeqNum = 1 is fine.
name|addSequenceNum
argument_list|(
name|putB
argument_list|,
literal|1
argument_list|,
name|splitB
operator|.
name|getReplicaId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add empty locations for region replicas of daughters so that number of replicas can be
comment|// cached whenever the primary region is looked up from meta
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|regionReplication
condition|;
name|i
operator|++
control|)
block|{
name|addEmptyLocation
argument_list|(
name|putA
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|addEmptyLocation
argument_list|(
name|putB
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|tableRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|parent
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
name|HConstants
operator|.
name|DELIMITER
argument_list|)
decl_stmt|;
name|multiMutate
argument_list|(
name|meta
argument_list|,
name|tableRow
argument_list|,
name|putParent
argument_list|,
name|putA
argument_list|,
name|putB
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Update state of the table in meta.    * @param connection what we use for update    * @param state new state    */
end_comment

begin_function
specifier|private
specifier|static
name|void
name|updateTableState
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|TableState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
name|makePutFromTableState
argument_list|(
name|state
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
decl_stmt|;
name|putToMetaTable
argument_list|(
name|connection
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updated {} in hbase:meta"
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Construct PUT for given state    * @param state new state    */
end_comment

begin_function
specifier|public
specifier|static
name|Put
name|makePutFromTableState
parameter_list|(
name|TableState
name|state
parameter_list|,
name|long
name|ts
parameter_list|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|state
operator|.
name|getTableName
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|getTableFamily
argument_list|()
argument_list|,
name|getTableStateColumn
argument_list|()
argument_list|,
name|state
operator|.
name|convert
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|put
return|;
block|}
end_function

begin_comment
comment|/**    * Remove state for table from meta    * @param connection to use for deletion    * @param table to delete state for    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|deleteTableState
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|TableName
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|time
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|getTableFamily
argument_list|()
argument_list|,
name|getTableStateColumn
argument_list|()
argument_list|,
name|time
argument_list|)
expr_stmt|;
name|deleteFromMetaTable
argument_list|(
name|connection
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted table "
operator|+
name|table
operator|+
literal|" state from META"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|multiMutate
parameter_list|(
name|Table
name|table
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|Mutation
modifier|...
name|mutations
parameter_list|)
throws|throws
name|IOException
block|{
name|multiMutate
argument_list|(
name|table
argument_list|,
name|row
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|mutations
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Performs an atomic multi-mutate operation against the given table.    */
end_comment

begin_function
specifier|private
specifier|static
name|void
name|multiMutate
parameter_list|(
specifier|final
name|Table
name|table
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
parameter_list|)
throws|throws
name|IOException
block|{
name|debugLogMutations
argument_list|(
name|mutations
argument_list|)
expr_stmt|;
name|Batch
operator|.
name|Call
argument_list|<
name|MultiRowMutationService
argument_list|,
name|MutateRowsResponse
argument_list|>
name|callable
init|=
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|MultiRowMutationService
argument_list|,
name|MutateRowsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MutateRowsResponse
name|call
parameter_list|(
name|MultiRowMutationService
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
name|MutateRowsRequest
operator|.
name|Builder
name|builder
init|=
name|MutateRowsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Mutation
name|mutation
range|:
name|mutations
control|)
block|{
if|if
condition|(
name|mutation
operator|instanceof
name|Put
condition|)
block|{
name|builder
operator|.
name|addMutationRequest
argument_list|(
name|ProtobufUtil
operator|.
name|toMutation
argument_list|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|PUT
argument_list|,
name|mutation
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mutation
operator|instanceof
name|Delete
condition|)
block|{
name|builder
operator|.
name|addMutationRequest
argument_list|(
name|ProtobufUtil
operator|.
name|toMutation
argument_list|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|DELETE
argument_list|,
name|mutation
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"multi in MetaEditor doesn't support "
operator|+
name|mutation
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|ServerRpcController
name|controller
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|CoprocessorRpcUtils
operator|.
name|BlockingRpcCallback
argument_list|<
name|MutateRowsResponse
argument_list|>
name|rpcCallback
init|=
operator|new
name|CoprocessorRpcUtils
operator|.
name|BlockingRpcCallback
argument_list|<>
argument_list|()
decl_stmt|;
name|instance
operator|.
name|mutateRows
argument_list|(
name|controller
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|rpcCallback
argument_list|)
expr_stmt|;
name|MutateRowsResponse
name|resp
init|=
name|rpcCallback
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|controller
operator|.
name|failedOnException
argument_list|()
condition|)
block|{
throw|throw
name|controller
operator|.
name|getFailedOn
argument_list|()
throw|;
block|}
return|return
name|resp
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|table
operator|.
name|coprocessorService
argument_list|(
name|MultiRowMutationService
operator|.
name|class
argument_list|,
name|row
argument_list|,
name|row
argument_list|,
name|callable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|propagateIfPossible
argument_list|(
name|e
argument_list|,
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Updates the location of the specified region in hbase:meta to be the specified server hostname    * and startcode.    *<p>    * Uses passed catalog tracker to get a connection to the server hosting hbase:meta and makes    * edits to that region.    * @param connection connection we're using    * @param regionInfo region to update location of    * @param openSeqNum the latest sequence number obtained when the region was open    * @param sn Server name    * @param masterSystemTime wall clock time from master if passed in the open region RPC    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|void
name|updateRegionLocation
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RegionInfo
name|regionInfo
parameter_list|,
name|ServerName
name|sn
parameter_list|,
name|long
name|openSeqNum
parameter_list|,
name|long
name|masterSystemTime
parameter_list|)
throws|throws
name|IOException
block|{
name|updateLocation
argument_list|(
name|connection
argument_list|,
name|regionInfo
argument_list|,
name|sn
argument_list|,
name|openSeqNum
argument_list|,
name|masterSystemTime
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Updates the location of the specified region to be the specified server.    *<p>    * Connects to the specified server which should be hosting the specified catalog region name to    * perform the edit.    * @param connection connection we're using    * @param regionInfo region to update location of    * @param sn Server name    * @param openSeqNum the latest sequence number obtained when the region was open    * @param masterSystemTime wall clock time from master if passed in the open region RPC    * @throws IOException In particular could throw {@link java.net.ConnectException} if the server    *           is down on other end.    */
end_comment

begin_function
specifier|private
specifier|static
name|void
name|updateLocation
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RegionInfo
name|regionInfo
parameter_list|,
name|ServerName
name|sn
parameter_list|,
name|long
name|openSeqNum
parameter_list|,
name|long
name|masterSystemTime
parameter_list|)
throws|throws
name|IOException
block|{
comment|// region replicas are kept in the primary region's row
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|getMetaKeyForRegion
argument_list|(
name|regionInfo
argument_list|)
argument_list|,
name|masterSystemTime
argument_list|)
decl_stmt|;
name|addRegionInfo
argument_list|(
name|put
argument_list|,
name|regionInfo
argument_list|)
expr_stmt|;
name|addLocation
argument_list|(
name|put
argument_list|,
name|sn
argument_list|,
name|openSeqNum
argument_list|,
name|regionInfo
operator|.
name|getReplicaId
argument_list|()
argument_list|)
expr_stmt|;
name|putToMetaTable
argument_list|(
name|connection
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updated row {} with server="
argument_list|,
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|sn
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Deletes the specified region from META.    * @param connection connection we're using    * @param regionInfo region to be deleted from META    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|deleteRegionInfo
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|RegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
name|deleteFromMetaTable
argument_list|(
name|connection
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted "
operator|+
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Deletes the specified regions from META.    * @param connection connection we're using    * @param regionsInfo list of regions to be deleted from META    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|deleteRegionInfos
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionsInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteRegionInfos
argument_list|(
name|connection
argument_list|,
name|regionsInfo
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Deletes the specified regions from META.    * @param connection connection we're using    * @param regionsInfo list of regions to be deleted from META    */
end_comment

begin_function
specifier|private
specifier|static
name|void
name|deleteRegionInfos
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionsInfo
parameter_list|,
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|regionsInfo
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionInfo
name|hri
range|:
name|regionsInfo
control|)
block|{
name|Delete
name|e
init|=
operator|new
name|Delete
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|e
operator|.
name|addFamily
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|deletes
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|deleteFromMetaTable
argument_list|(
name|connection
argument_list|,
name|deletes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted {} regions from META"
argument_list|,
name|regionsInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleted regions: {}"
argument_list|,
name|regionsInfo
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Overwrites the specified regions from hbase:meta. Deletes old rows for the given regions and    * adds new ones. Regions added back have state CLOSED.    * @param connection connection we're using    * @param regionInfos list of regions to be added to META    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|overwriteRegions
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionInfos
parameter_list|,
name|int
name|regionReplication
parameter_list|)
throws|throws
name|IOException
block|{
comment|// use master time for delete marker and the Put
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|deleteRegionInfos
argument_list|(
name|connection
argument_list|,
name|regionInfos
argument_list|,
name|now
argument_list|)
expr_stmt|;
comment|// Why sleep? This is the easiest way to ensure that the previous deletes does not
comment|// eclipse the following puts, that might happen in the same ts from the server.
comment|// See HBASE-9906, and HBASE-9879. Once either HBASE-9879, HBASE-8770 is fixed,
comment|// or HBASE-9905 is fixed and meta uses seqIds, we do not need the sleep.
comment|//
comment|// HBASE-13875 uses master timestamp for the mutations. The 20ms sleep is not needed
name|addRegionsToMeta
argument_list|(
name|connection
argument_list|,
name|regionInfos
argument_list|,
name|regionReplication
argument_list|,
name|now
operator|+
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Overwritten "
operator|+
name|regionInfos
operator|.
name|size
argument_list|()
operator|+
literal|" regions to Meta"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Overwritten regions: {} "
argument_list|,
name|regionInfos
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Deletes merge qualifiers for the specified merge region.    * @param connection connection we're using    * @param mergeRegion the merged region    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|deleteMergeQualifiers
parameter_list|(
name|Connection
name|connection
parameter_list|,
specifier|final
name|RegionInfo
name|mergeRegion
parameter_list|)
throws|throws
name|IOException
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|mergeRegion
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
comment|// NOTE: We are doing a new hbase:meta read here.
name|Cell
index|[]
name|cells
init|=
name|getRegionResult
argument_list|(
name|connection
argument_list|,
name|mergeRegion
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|rawCells
argument_list|()
decl_stmt|;
if|if
condition|(
name|cells
operator|==
literal|null
operator|||
name|cells
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
if|if
condition|(
operator|!
name|isMergeQualifierPrefix
argument_list|(
name|cell
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|byte
index|[]
name|qualifier
init|=
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|,
name|qualifier
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
name|deleteFromMetaTable
argument_list|(
name|connection
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted merge references in "
operator|+
name|mergeRegion
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", deleted qualifiers "
operator|+
name|qualifiers
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Bytes
operator|::
name|toStringBinary
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Put
name|addRegionInfo
parameter_list|(
specifier|final
name|Put
name|p
parameter_list|,
specifier|final
name|RegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
block|{
name|p
operator|.
name|add
argument_list|(
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|p
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|p
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|Put
argument_list|)
comment|// Serialize the Default Replica HRI otherwise scan of hbase:meta
comment|// shows an info:regioninfo value with encoded name and region
comment|// name that differs from that of the hbase;meta row.
operator|.
name|setValue
argument_list|(
name|RegionInfo
operator|.
name|toByteArray
argument_list|(
name|RegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|hri
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Put
name|addLocation
parameter_list|(
name|Put
name|p
parameter_list|,
name|ServerName
name|sn
parameter_list|,
name|long
name|openSeqNum
parameter_list|,
name|int
name|replicaId
parameter_list|)
throws|throws
name|IOException
block|{
name|CellBuilder
name|builder
init|=
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
decl_stmt|;
return|return
name|p
operator|.
name|add
argument_list|(
name|builder
operator|.
name|clear
argument_list|()
operator|.
name|setRow
argument_list|(
name|p
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|getServerColumn
argument_list|(
name|replicaId
argument_list|)
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|p
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Cell
operator|.
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|getAddress
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|builder
operator|.
name|clear
argument_list|()
operator|.
name|setRow
argument_list|(
name|p
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|getStartCodeColumn
argument_list|(
name|replicaId
argument_list|)
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|p
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Cell
operator|.
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|getStartcode
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|builder
operator|.
name|clear
argument_list|()
operator|.
name|setRow
argument_list|(
name|p
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|getSeqNumColumn
argument_list|(
name|replicaId
argument_list|)
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|p
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|openSeqNum
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|writeRegionName
parameter_list|(
name|ByteArrayOutputStream
name|out
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
block|{
for|for
control|(
name|byte
name|b
range|:
name|regionName
control|)
block|{
if|if
condition|(
name|b
operator|==
name|ESCAPE_BYTE
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|ESCAPE_BYTE
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|byte
index|[]
name|getParentsBytes
parameter_list|(
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|parents
parameter_list|)
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|RegionInfo
argument_list|>
name|iter
init|=
name|parents
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|writeRegionName
argument_list|(
name|bos
argument_list|,
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|bos
operator|.
name|write
argument_list|(
name|ESCAPE_BYTE
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|SEPARATED_BYTE
argument_list|)
expr_stmt|;
name|writeRegionName
argument_list|(
name|bos
argument_list|,
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|parseParentsBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|parents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|bytes
index|[
name|i
index|]
operator|==
name|ESCAPE_BYTE
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|bytes
index|[
name|i
index|]
operator|==
name|SEPARATED_BYTE
condition|)
block|{
name|parents
operator|.
name|add
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|bos
operator|.
name|reset
argument_list|()
expr_stmt|;
continue|continue;
block|}
comment|// fall through to append the byte
block|}
name|bos
operator|.
name|write
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bos
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|parents
operator|.
name|add
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|parents
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|addReplicationParent
parameter_list|(
name|Put
name|put
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|parents
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|value
init|=
name|getParentsBytes
argument_list|(
name|parents
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|REPLICATION_PARENT_QUALIFIER
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|put
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Put
name|makePutForReplicationBarrier
parameter_list|(
name|RegionInfo
name|regionInfo
parameter_list|,
name|long
name|openSeqNum
parameter_list|,
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|addReplicationBarrier
argument_list|(
name|put
argument_list|,
name|openSeqNum
argument_list|)
expr_stmt|;
return|return
name|put
return|;
block|}
end_function

begin_comment
comment|/**    * See class comment on SerialReplicationChecker    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|addReplicationBarrier
parameter_list|(
name|Put
name|put
parameter_list|,
name|long
name|openSeqNum
parameter_list|)
throws|throws
name|IOException
block|{
name|put
operator|.
name|add
argument_list|(
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|HConstants
operator|.
name|SEQNUM_QUALIFIER
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|put
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|openSeqNum
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|Put
name|addEmptyLocation
parameter_list|(
name|Put
name|p
parameter_list|,
name|int
name|replicaId
parameter_list|)
throws|throws
name|IOException
block|{
name|CellBuilder
name|builder
init|=
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
decl_stmt|;
return|return
name|p
operator|.
name|add
argument_list|(
name|builder
operator|.
name|clear
argument_list|()
operator|.
name|setRow
argument_list|(
name|p
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|getServerColumn
argument_list|(
name|replicaId
argument_list|)
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|p
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|builder
operator|.
name|clear
argument_list|()
operator|.
name|setRow
argument_list|(
name|p
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|getStartCodeColumn
argument_list|(
name|replicaId
argument_list|)
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|p
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Cell
operator|.
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|builder
operator|.
name|clear
argument_list|()
operator|.
name|setRow
argument_list|(
name|p
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|getSeqNumColumn
argument_list|(
name|replicaId
argument_list|)
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|p
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Cell
operator|.
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_class
specifier|public
specifier|static
specifier|final
class|class
name|ReplicationBarrierResult
block|{
specifier|private
specifier|final
name|long
index|[]
name|barriers
decl_stmt|;
specifier|private
specifier|final
name|RegionState
operator|.
name|State
name|state
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|parentRegionNames
decl_stmt|;
name|ReplicationBarrierResult
parameter_list|(
name|long
index|[]
name|barriers
parameter_list|,
name|State
name|state
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|parentRegionNames
parameter_list|)
block|{
name|this
operator|.
name|barriers
operator|=
name|barriers
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|parentRegionNames
operator|=
name|parentRegionNames
expr_stmt|;
block|}
specifier|public
name|long
index|[]
name|getBarriers
parameter_list|()
block|{
return|return
name|barriers
return|;
block|}
specifier|public
name|RegionState
operator|.
name|State
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getParentRegionNames
parameter_list|()
block|{
return|return
name|parentRegionNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ReplicationBarrierResult [barriers="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|barriers
argument_list|)
operator|+
literal|", state="
operator|+
name|state
operator|+
literal|", parentRegionNames="
operator|+
name|parentRegionNames
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Bytes
operator|::
name|toStringBinary
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
end_class

begin_function
specifier|private
specifier|static
name|long
name|getReplicationBarrier
parameter_list|(
name|Cell
name|c
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toLong
argument_list|(
name|c
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|c
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getValueLength
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|long
index|[]
name|getReplicationBarriers
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
return|return
name|result
operator|.
name|getColumnCells
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|,
name|HConstants
operator|.
name|SEQNUM_QUALIFIER
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|MetaTableAccessor
operator|::
name|getReplicationBarrier
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|distinct
argument_list|()
operator|.
name|toArray
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|ReplicationBarrierResult
name|getReplicationBarrierResult
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
name|long
index|[]
name|barriers
init|=
name|getReplicationBarriers
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stateBytes
init|=
name|result
operator|.
name|getValue
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|,
name|getRegionStateColumn
argument_list|()
argument_list|)
decl_stmt|;
name|RegionState
operator|.
name|State
name|state
init|=
name|stateBytes
operator|!=
literal|null
condition|?
name|RegionState
operator|.
name|State
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|stateBytes
argument_list|)
argument_list|)
else|:
literal|null
decl_stmt|;
name|byte
index|[]
name|parentRegionsBytes
init|=
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|,
name|REPLICATION_PARENT_QUALIFIER
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|parentRegionNames
init|=
name|parentRegionsBytes
operator|!=
literal|null
condition|?
name|parseParentsBytes
argument_list|(
name|parentRegionsBytes
argument_list|)
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
return|return
operator|new
name|ReplicationBarrierResult
argument_list|(
name|barriers
argument_list|,
name|state
argument_list|,
name|parentRegionNames
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|ReplicationBarrierResult
name|getReplicationBarrierResult
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|encodedRegionName
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|metaStartKey
init|=
name|RegionInfo
operator|.
name|createRegionName
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|HConstants
operator|.
name|NINES
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|byte
index|[]
name|metaStopKey
init|=
name|RegionInfo
operator|.
name|createRegionName
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|metaStartKey
argument_list|)
operator|.
name|withStopRow
argument_list|(
name|metaStopKey
argument_list|)
operator|.
name|addColumn
argument_list|(
name|getCatalogFamily
argument_list|()
argument_list|,
name|getRegionStateColumn
argument_list|()
argument_list|)
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|)
operator|.
name|readAllVersions
argument_list|()
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
operator|.
name|setCaching
argument_list|(
literal|10
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|getMetaHTable
argument_list|(
name|conn
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
for|for
control|(
name|Result
name|result
init|;
condition|;
control|)
block|{
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ReplicationBarrierResult
argument_list|(
operator|new
name|long
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
name|byte
index|[]
name|regionName
init|=
name|result
operator|.
name|getRow
argument_list|()
decl_stmt|;
comment|// TODO: we may look up a region which has already been split or merged so we need to check
comment|// whether the encoded name matches. Need to find a way to quit earlier when there is no
comment|// record for the given region, for now it will scan to the end of the table.
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|encodedRegionName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|RegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|regionName
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
return|return
name|getReplicationBarrierResult
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|long
index|[]
name|getReplicationBarrier
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|table
init|=
name|getMetaHTable
argument_list|(
name|conn
argument_list|)
init|)
block|{
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|regionName
argument_list|)
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|,
name|HConstants
operator|.
name|SEQNUM_QUALIFIER
argument_list|)
operator|.
name|readAllVersions
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getReplicationBarriers
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|getTableEncodedRegionNameAndLastBarrier
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|scanMeta
argument_list|(
name|conn
argument_list|,
name|getTableStartRowForMeta
argument_list|(
name|tableName
argument_list|,
name|QueryType
operator|.
name|REPLICATION
argument_list|)
argument_list|,
name|getTableStopRowForMeta
argument_list|(
name|tableName
argument_list|,
name|QueryType
operator|.
name|REPLICATION
argument_list|)
argument_list|,
name|QueryType
operator|.
name|REPLICATION
argument_list|,
name|r
lambda|->
block|{
name|byte
index|[]
name|value
init|=
name|r
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|,
name|HConstants
operator|.
name|SEQNUM_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|long
name|lastBarrier
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|String
name|encodedRegionName
init|=
name|RegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|newPair
argument_list|(
name|encodedRegionName
argument_list|,
name|lastBarrier
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getTableEncodedRegionNamesForSerialReplication
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|scanMeta
argument_list|(
name|conn
argument_list|,
name|getTableStartRowForMeta
argument_list|(
name|tableName
argument_list|,
name|QueryType
operator|.
name|REPLICATION
argument_list|)
argument_list|,
name|getTableStopRowForMeta
argument_list|(
name|tableName
argument_list|,
name|QueryType
operator|.
name|REPLICATION
argument_list|)
argument_list|,
name|QueryType
operator|.
name|REPLICATION
argument_list|,
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|r
lambda|->
block|{
name|list
operator|.
name|add
argument_list|(
name|RegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|debugLogMutations
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Mutation
argument_list|>
name|mutations
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|METALOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Logging each mutation in separate line makes it easier to see diff between them visually
comment|// because of common starting indentation.
for|for
control|(
name|Mutation
name|mutation
range|:
name|mutations
control|)
block|{
name|debugLogMutation
argument_list|(
name|mutation
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|debugLogMutation
parameter_list|(
name|Mutation
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|METALOG
operator|.
name|debug
argument_list|(
literal|"{} {}"
argument_list|,
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|p
operator|.
name|toJSON
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|Put
name|addSequenceNum
parameter_list|(
name|Put
name|p
parameter_list|,
name|long
name|openSeqNum
parameter_list|,
name|int
name|replicaId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|p
operator|.
name|add
argument_list|(
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|SHALLOW_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|p
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|getSeqNumColumn
argument_list|(
name|replicaId
argument_list|)
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|p
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|openSeqNum
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

