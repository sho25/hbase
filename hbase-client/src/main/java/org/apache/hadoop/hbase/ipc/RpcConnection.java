begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|HashedWheelTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AuthenticationProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|ConnectionHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|UserInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|SecurityInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenSelector
import|;
end_import

begin_comment
comment|/**  * Base class for ipc connection.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|abstract
class|class
name|RpcConnection
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RpcConnection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|ConnectionId
name|remoteId
decl_stmt|;
specifier|protected
specifier|final
name|AuthMethod
name|authMethod
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|useSasl
decl_stmt|;
specifier|protected
specifier|final
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
decl_stmt|;
specifier|protected
specifier|final
name|String
name|serverPrincipal
decl_stmt|;
comment|// server's krb5 principal name
specifier|protected
specifier|final
name|int
name|reloginMaxBackoff
decl_stmt|;
comment|// max pause before relogin on sasl failure
specifier|protected
specifier|final
name|Codec
name|codec
decl_stmt|;
specifier|protected
specifier|final
name|CompressionCodec
name|compressor
decl_stmt|;
specifier|protected
specifier|final
name|HashedWheelTimer
name|timeoutTimer
decl_stmt|;
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|protected
specifier|static
name|String
name|CRYPTO_AES_ENABLED_KEY
init|=
literal|"hbase.rpc.crypto.encryption.aes.enabled"
decl_stmt|;
specifier|protected
specifier|static
name|boolean
name|CRYPTO_AES_ENABLED_DEFAULT
init|=
literal|false
decl_stmt|;
comment|// the last time we were picked up from connection pool.
specifier|protected
name|long
name|lastTouched
decl_stmt|;
specifier|protected
name|RpcConnection
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HashedWheelTimer
name|timeoutTimer
parameter_list|,
name|ConnectionId
name|remoteId
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|boolean
name|isSecurityEnabled
parameter_list|,
name|Codec
name|codec
parameter_list|,
name|CompressionCodec
name|compressor
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|remoteId
operator|.
name|getAddress
argument_list|()
operator|.
name|isUnresolved
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnknownHostException
argument_list|(
literal|"unknown host: "
operator|+
name|remoteId
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|timeoutTimer
operator|=
name|timeoutTimer
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|codec
expr_stmt|;
name|this
operator|.
name|compressor
operator|=
name|compressor
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|UserGroupInformation
name|ticket
init|=
name|remoteId
operator|.
name|getTicket
argument_list|()
operator|.
name|getUGI
argument_list|()
decl_stmt|;
name|SecurityInfo
name|securityInfo
init|=
name|SecurityInfo
operator|.
name|getInfo
argument_list|(
name|remoteId
operator|.
name|getServiceName
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|useSasl
operator|=
name|isSecurityEnabled
expr_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
init|=
literal|null
decl_stmt|;
name|String
name|serverPrincipal
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useSasl
operator|&&
name|securityInfo
operator|!=
literal|null
condition|)
block|{
name|AuthenticationProtos
operator|.
name|TokenIdentifier
operator|.
name|Kind
name|tokenKind
init|=
name|securityInfo
operator|.
name|getTokenKind
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenKind
operator|!=
literal|null
condition|)
block|{
name|TokenSelector
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|tokenSelector
init|=
name|AbstractRpcClient
operator|.
name|TOKEN_HANDLERS
operator|.
name|get
argument_list|(
name|tokenKind
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenSelector
operator|!=
literal|null
condition|)
block|{
name|token
operator|=
name|tokenSelector
operator|.
name|selectToken
argument_list|(
operator|new
name|Text
argument_list|(
name|clusterId
argument_list|)
argument_list|,
name|ticket
operator|.
name|getTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No token selector found for type "
operator|+
name|tokenKind
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|serverKey
init|=
name|securityInfo
operator|.
name|getServerPrincipal
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverKey
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't obtain server Kerberos config key from SecurityInfo"
argument_list|)
throw|;
block|}
name|serverPrincipal
operator|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|serverKey
argument_list|)
argument_list|,
name|remoteId
operator|.
name|address
operator|.
name|getAddress
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"RPC Server Kerberos principal name for service="
operator|+
name|remoteId
operator|.
name|getServiceName
argument_list|()
operator|+
literal|" is "
operator|+
name|serverPrincipal
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
name|this
operator|.
name|serverPrincipal
operator|=
name|serverPrincipal
expr_stmt|;
if|if
condition|(
operator|!
name|useSasl
condition|)
block|{
name|authMethod
operator|=
name|AuthMethod
operator|.
name|SIMPLE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|authMethod
operator|=
name|AuthMethod
operator|.
name|DIGEST
expr_stmt|;
block|}
else|else
block|{
name|authMethod
operator|=
name|AuthMethod
operator|.
name|KERBEROS
expr_stmt|;
block|}
comment|// Log if debug AND non-default auth, else if trace enabled.
comment|// No point logging obvious.
if|if
condition|(
operator|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
operator|!
name|authMethod
operator|.
name|equals
argument_list|(
name|AuthMethod
operator|.
name|SIMPLE
argument_list|)
operator|)
operator|||
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
comment|// Only log if not default auth.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Use "
operator|+
name|authMethod
operator|+
literal|" authentication for service "
operator|+
name|remoteId
operator|.
name|serviceName
operator|+
literal|", sasl="
operator|+
name|useSasl
argument_list|)
expr_stmt|;
block|}
name|reloginMaxBackoff
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.security.relogin.maxbackoff"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|this
operator|.
name|remoteId
operator|=
name|remoteId
expr_stmt|;
block|}
specifier|private
name|UserInformation
name|getUserInfo
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
if|if
condition|(
name|ugi
operator|==
literal|null
operator|||
name|authMethod
operator|==
name|AuthMethod
operator|.
name|DIGEST
condition|)
block|{
comment|// Don't send user for token auth
return|return
literal|null
return|;
block|}
name|UserInformation
operator|.
name|Builder
name|userInfoPB
init|=
name|UserInformation
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|authMethod
operator|==
name|AuthMethod
operator|.
name|KERBEROS
condition|)
block|{
comment|// Send effective user for Kerberos auth
name|userInfoPB
operator|.
name|setEffectiveUser
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authMethod
operator|==
name|AuthMethod
operator|.
name|SIMPLE
condition|)
block|{
comment|// Send both effective user and real user for simple auth
name|userInfoPB
operator|.
name|setEffectiveUser
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|userInfoPB
operator|.
name|setRealUser
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|userInfoPB
operator|.
name|build
argument_list|()
return|;
block|}
specifier|protected
name|UserGroupInformation
name|getUGI
parameter_list|()
block|{
name|UserGroupInformation
name|ticket
init|=
name|remoteId
operator|.
name|getTicket
argument_list|()
operator|.
name|getUGI
argument_list|()
decl_stmt|;
if|if
condition|(
name|authMethod
operator|==
name|AuthMethod
operator|.
name|KERBEROS
condition|)
block|{
if|if
condition|(
name|ticket
operator|!=
literal|null
operator|&&
name|ticket
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ticket
operator|=
name|ticket
operator|.
name|getRealUser
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ticket
return|;
block|}
specifier|protected
name|boolean
name|shouldAuthenticateOverKrb
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|loginUser
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|realUser
init|=
name|currentUser
operator|.
name|getRealUser
argument_list|()
decl_stmt|;
return|return
name|authMethod
operator|==
name|AuthMethod
operator|.
name|KERBEROS
operator|&&
name|loginUser
operator|!=
literal|null
operator|&&
comment|// Make sure user logged in using Kerberos either keytab or TGT
name|loginUser
operator|.
name|hasKerberosCredentials
argument_list|()
operator|&&
comment|// relogin only in case it is the login user (e.g. JT)
comment|// or superuser (like oozie).
operator|(
name|loginUser
operator|.
name|equals
argument_list|(
name|currentUser
argument_list|)
operator|||
name|loginUser
operator|.
name|equals
argument_list|(
name|realUser
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|void
name|relogin
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isLoginKeytabBased
argument_list|()
condition|)
block|{
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|reloginFromKeytab
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|reloginFromTicketCache
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|scheduleTimeoutTask
parameter_list|(
specifier|final
name|Call
name|call
parameter_list|)
block|{
if|if
condition|(
name|call
operator|.
name|timeout
operator|>
literal|0
condition|)
block|{
name|call
operator|.
name|timeoutTask
operator|=
name|timeoutTimer
operator|.
name|newTimeout
argument_list|(
operator|new
name|TimerTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|Timeout
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
name|call
operator|.
name|setTimeout
argument_list|(
operator|new
name|CallTimeoutException
argument_list|(
literal|"Call id="
operator|+
name|call
operator|.
name|id
operator|+
literal|", waitTime="
operator|+
operator|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|call
operator|.
name|getStartTime
argument_list|()
operator|)
operator|+
literal|", rpcTimeout="
operator|+
name|call
operator|.
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
name|callTimeout
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|call
operator|.
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|byte
index|[]
name|getConnectionHeaderPreamble
parameter_list|()
block|{
comment|// Assemble the preamble up in a buffer first and then send it. Writing individual elements,
comment|// they are getting sent across piecemeal according to wireshark and then server is messing
comment|// up the reading on occasion (the passed in stream is not buffered yet).
comment|// Preamble is six bytes -- 'HBas' + VERSION + AUTH_CODE
name|int
name|rpcHeaderLen
init|=
name|HConstants
operator|.
name|RPC_HEADER
operator|.
name|length
decl_stmt|;
name|byte
index|[]
name|preamble
init|=
operator|new
name|byte
index|[
name|rpcHeaderLen
operator|+
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|HConstants
operator|.
name|RPC_HEADER
argument_list|,
literal|0
argument_list|,
name|preamble
argument_list|,
literal|0
argument_list|,
name|rpcHeaderLen
argument_list|)
expr_stmt|;
name|preamble
index|[
name|rpcHeaderLen
index|]
operator|=
name|HConstants
operator|.
name|RPC_CURRENT_VERSION
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|preamble
index|[
name|rpcHeaderLen
operator|+
literal|1
index|]
operator|=
name|authMethod
operator|.
name|code
expr_stmt|;
block|}
return|return
name|preamble
return|;
block|}
specifier|protected
name|ConnectionHeader
name|getConnectionHeader
parameter_list|()
block|{
name|ConnectionHeader
operator|.
name|Builder
name|builder
init|=
name|ConnectionHeader
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setServiceName
argument_list|(
name|remoteId
operator|.
name|getServiceName
argument_list|()
argument_list|)
expr_stmt|;
name|UserInformation
name|userInfoPB
decl_stmt|;
if|if
condition|(
operator|(
name|userInfoPB
operator|=
name|getUserInfo
argument_list|(
name|remoteId
operator|.
name|ticket
operator|.
name|getUGI
argument_list|()
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setUserInfo
argument_list|(
name|userInfoPB
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|codec
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setCellBlockCodecClass
argument_list|(
name|this
operator|.
name|codec
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|compressor
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setCellBlockCompressorClass
argument_list|(
name|this
operator|.
name|compressor
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setVersionInfo
argument_list|(
name|ProtobufUtil
operator|.
name|getVersionInfo
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isCryptoAESEnable
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|CRYPTO_AES_ENABLED_KEY
argument_list|,
name|CRYPTO_AES_ENABLED_DEFAULT
argument_list|)
decl_stmt|;
comment|// if Crypto AES enable, setup Cipher transformation
if|if
condition|(
name|isCryptoAESEnable
condition|)
block|{
name|builder
operator|.
name|setRpcCryptoCipherTransformation
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.rpc.crypto.encryption.aes.cipher.transform"
argument_list|,
literal|"AES/CTR/NoPadding"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|callTimeout
parameter_list|(
name|Call
name|call
parameter_list|)
function_decl|;
specifier|public
name|ConnectionId
name|remoteId
parameter_list|()
block|{
return|return
name|remoteId
return|;
block|}
specifier|public
name|long
name|getLastTouched
parameter_list|()
block|{
return|return
name|lastTouched
return|;
block|}
specifier|public
name|void
name|setLastTouched
parameter_list|(
name|long
name|lastTouched
parameter_list|)
block|{
name|this
operator|.
name|lastTouched
operator|=
name|lastTouched
expr_stmt|;
block|}
comment|/**    * Tell the idle connection sweeper whether we could be swept.    */
specifier|public
specifier|abstract
name|boolean
name|isActive
parameter_list|()
function_decl|;
comment|/**    * Just close connection. Do not need to remove from connection pool.    */
specifier|public
specifier|abstract
name|void
name|shutdown
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|sendRequest
parameter_list|(
name|Call
name|call
parameter_list|,
name|HBaseRpcController
name|hrc
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Does the clean up work after the connection is removed from the connection pool    */
specifier|public
specifier|abstract
name|void
name|cleanupConnection
parameter_list|()
function_decl|;
block|}
end_class

end_unit

