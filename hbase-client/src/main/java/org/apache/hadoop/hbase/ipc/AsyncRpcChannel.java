begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|Bootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBufOutputStream
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|LengthFieldBasedFrameDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|GenericFutureListener
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Promise
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MetricsConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|ConnectionClosingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AuthenticationProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|TracingProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|SaslClientHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|SaslUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|SecurityInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|token
operator|.
name|AuthenticationTokenSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Trace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_comment
comment|/**  * Netty RPC channel  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|AsyncRpcChannel
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AsyncRpcChannel
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_SASL_RETRIES
init|=
literal|5
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|Map
argument_list|<
name|AuthenticationProtos
operator|.
name|TokenIdentifier
operator|.
name|Kind
argument_list|,
name|TokenSelector
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|tokenHandlers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|tokenHandlers
operator|.
name|put
argument_list|(
name|AuthenticationProtos
operator|.
name|TokenIdentifier
operator|.
name|Kind
operator|.
name|HBASE_AUTH_TOKEN
argument_list|,
operator|new
name|AuthenticationTokenSelector
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AsyncRpcClient
name|client
decl_stmt|;
comment|// Contains the channel to work with.
comment|// Only exists when connected
specifier|private
name|Channel
name|channel
decl_stmt|;
name|String
name|name
decl_stmt|;
specifier|final
name|User
name|ticket
decl_stmt|;
specifier|final
name|String
name|serviceName
decl_stmt|;
specifier|final
name|InetSocketAddress
name|address
decl_stmt|;
specifier|private
name|int
name|failureCounter
init|=
literal|0
decl_stmt|;
name|boolean
name|useSasl
decl_stmt|;
name|AuthMethod
name|authMethod
decl_stmt|;
specifier|private
name|int
name|reloginMaxBackoff
decl_stmt|;
specifier|private
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
decl_stmt|;
specifier|private
name|String
name|serverPrincipal
decl_stmt|;
comment|// NOTE: closed and connected flags below are only changed when a lock on pendingCalls
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|AsyncCall
argument_list|>
name|pendingCalls
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|AsyncCall
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|connected
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|private
name|Timeout
name|cleanupTimer
decl_stmt|;
specifier|private
specifier|final
name|TimerTask
name|timeoutTask
init|=
operator|new
name|TimerTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|Timeout
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
name|cleanupCalls
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**    * Constructor for netty RPC channel    *    * @param bootstrap to construct channel on    * @param client    to connect with    * @param ticket of user which uses connection    * @param serviceName name of service to connect to    * @param address to connect to    */
specifier|public
name|AsyncRpcChannel
parameter_list|(
name|Bootstrap
name|bootstrap
parameter_list|,
specifier|final
name|AsyncRpcClient
name|client
parameter_list|,
name|User
name|ticket
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|InetSocketAddress
name|address
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|ticket
operator|=
name|ticket
expr_stmt|;
name|this
operator|.
name|serviceName
operator|=
name|serviceName
expr_stmt|;
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|connect
argument_list|(
name|bootstrap
argument_list|)
operator|.
name|channel
argument_list|()
expr_stmt|;
name|name
operator|=
operator|(
literal|"IPC Client ("
operator|+
name|channel
operator|.
name|hashCode
argument_list|()
operator|+
literal|") to "
operator|+
name|address
operator|.
name|toString
argument_list|()
operator|+
operator|(
operator|(
name|ticket
operator|==
literal|null
operator|)
condition|?
literal|" from unknown user"
else|:
operator|(
literal|" from "
operator|+
name|ticket
operator|.
name|getName
argument_list|()
operator|)
operator|)
operator|)
expr_stmt|;
block|}
comment|/**    * Connect to channel    *    * @param bootstrap to connect to    * @return future of connection    */
specifier|private
name|ChannelFuture
name|connect
parameter_list|(
specifier|final
name|Bootstrap
name|bootstrap
parameter_list|)
block|{
return|return
name|bootstrap
operator|.
name|remoteAddress
argument_list|(
name|address
argument_list|)
operator|.
name|connect
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|GenericFutureListener
argument_list|<
name|ChannelFuture
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
specifier|final
name|ChannelFuture
name|f
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|retryOrClose
argument_list|(
name|bootstrap
argument_list|,
name|failureCounter
operator|++
argument_list|,
name|client
operator|.
name|failureSleep
argument_list|,
name|f
operator|.
name|cause
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|channel
operator|=
name|f
operator|.
name|channel
argument_list|()
expr_stmt|;
name|setupAuthorization
argument_list|()
expr_stmt|;
name|ByteBuf
name|b
init|=
name|channel
operator|.
name|alloc
argument_list|()
operator|.
name|directBuffer
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|createPreamble
argument_list|(
name|b
argument_list|,
name|authMethod
argument_list|)
expr_stmt|;
name|channel
operator|.
name|writeAndFlush
argument_list|(
name|b
argument_list|)
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE_ON_FAILURE
argument_list|)
expr_stmt|;
if|if
condition|(
name|useSasl
condition|)
block|{
name|UserGroupInformation
name|ticket
init|=
name|AsyncRpcChannel
operator|.
name|this
operator|.
name|ticket
operator|.
name|getUGI
argument_list|()
decl_stmt|;
if|if
condition|(
name|authMethod
operator|==
name|AuthMethod
operator|.
name|KERBEROS
condition|)
block|{
if|if
condition|(
name|ticket
operator|!=
literal|null
operator|&&
name|ticket
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ticket
operator|=
name|ticket
operator|.
name|getRealUser
argument_list|()
expr_stmt|;
block|}
block|}
name|SaslClientHandler
name|saslHandler
decl_stmt|;
if|if
condition|(
name|ticket
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FatalConnectionException
argument_list|(
literal|"ticket/user is null"
argument_list|)
throw|;
block|}
specifier|final
name|UserGroupInformation
name|realTicket
init|=
name|ticket
decl_stmt|;
name|saslHandler
operator|=
name|ticket
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|SaslClientHandler
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SaslClientHandler
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getSaslHandler
argument_list|(
name|realTicket
argument_list|,
name|bootstrap
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|saslHandler
operator|!=
literal|null
condition|)
block|{
comment|// Sasl connect is successful. Let's set up Sasl channel handler
name|channel
operator|.
name|pipeline
argument_list|()
operator|.
name|addFirst
argument_list|(
name|saslHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// fall back to simple auth because server told us so.
name|authMethod
operator|=
name|AuthMethod
operator|.
name|SIMPLE
expr_stmt|;
name|useSasl
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|startHBaseConnection
argument_list|(
name|f
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Start HBase connection    *    * @param ch channel to start connection on    */
specifier|private
name|void
name|startHBaseConnection
parameter_list|(
name|Channel
name|ch
parameter_list|)
block|{
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"frameDecoder"
argument_list|,
operator|new
name|LengthFieldBasedFrameDecoder
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|AsyncServerResponseHandler
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|writeChannelHeader
argument_list|(
name|ch
argument_list|)
operator|.
name|addListener
argument_list|(
operator|new
name|GenericFutureListener
argument_list|<
name|ChannelFuture
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|future
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|close
argument_list|(
name|future
operator|.
name|cause
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|AsyncCall
argument_list|>
name|callsToWrite
decl_stmt|;
synchronized|synchronized
init|(
name|pendingCalls
init|)
block|{
name|connected
operator|=
literal|true
expr_stmt|;
name|callsToWrite
operator|=
operator|new
name|ArrayList
argument_list|<
name|AsyncCall
argument_list|>
argument_list|(
name|pendingCalls
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AsyncCall
name|call
range|:
name|callsToWrite
control|)
block|{
name|writeRequest
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|close
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get SASL handler    * @param bootstrap to reconnect to    * @return new SASL handler    * @throws java.io.IOException if handler failed to create    */
specifier|private
name|SaslClientHandler
name|getSaslHandler
parameter_list|(
specifier|final
name|UserGroupInformation
name|realTicket
parameter_list|,
specifier|final
name|Bootstrap
name|bootstrap
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SaslClientHandler
argument_list|(
name|realTicket
argument_list|,
name|authMethod
argument_list|,
name|token
argument_list|,
name|serverPrincipal
argument_list|,
name|client
operator|.
name|fallbackAllowed
argument_list|,
name|client
operator|.
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.rpc.protection"
argument_list|,
name|SaslUtil
operator|.
name|QualityOfProtection
operator|.
name|AUTHENTICATION
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
operator|new
name|SaslClientHandler
operator|.
name|SaslExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|int
name|retryCount
parameter_list|,
name|Random
name|random
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
try|try
block|{
comment|// Handle Sasl failure. Try to potentially get new credentials
name|handleSaslConnectionFailure
argument_list|(
name|retryCount
argument_list|,
name|cause
argument_list|,
name|realTicket
argument_list|)
expr_stmt|;
name|retryOrClose
argument_list|(
name|bootstrap
argument_list|,
name|failureCounter
operator|++
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
name|reloginMaxBackoff
argument_list|)
operator|+
literal|1
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|close
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
operator|new
name|SaslClientHandler
operator|.
name|SaslSuccessfulConnectHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
name|startHBaseConnection
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Retry to connect or close    *    * @param bootstrap      to connect with    * @param failureCount   failure count    * @param e              exception of fail    */
specifier|private
name|void
name|retryOrClose
parameter_list|(
specifier|final
name|Bootstrap
name|bootstrap
parameter_list|,
name|int
name|failureCount
parameter_list|,
name|long
name|timeout
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|failureCount
operator|<
name|client
operator|.
name|maxRetries
condition|)
block|{
name|client
operator|.
name|newTimeout
argument_list|(
operator|new
name|TimerTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|Timeout
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
name|connect
argument_list|(
name|bootstrap
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
operator|.
name|failedServers
operator|.
name|addToFailedServers
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Calls method on channel    * @param method to call    * @param controller to run call with    * @param request to send    * @param responsePrototype to construct response with    */
specifier|public
name|Promise
argument_list|<
name|Message
argument_list|>
name|callMethod
parameter_list|(
specifier|final
name|Descriptors
operator|.
name|MethodDescriptor
name|method
parameter_list|,
specifier|final
name|PayloadCarryingRpcController
name|controller
parameter_list|,
specifier|final
name|Message
name|request
parameter_list|,
specifier|final
name|Message
name|responsePrototype
parameter_list|,
name|MetricsConnection
operator|.
name|CallStats
name|callStats
parameter_list|)
block|{
specifier|final
name|AsyncCall
name|call
init|=
operator|new
name|AsyncCall
argument_list|(
name|channel
operator|.
name|eventLoop
argument_list|()
argument_list|,
name|client
operator|.
name|callIdCnt
operator|.
name|getAndIncrement
argument_list|()
argument_list|,
name|method
argument_list|,
name|request
argument_list|,
name|controller
argument_list|,
name|responsePrototype
argument_list|,
name|callStats
argument_list|)
decl_stmt|;
name|controller
operator|.
name|notifyOnCancel
argument_list|(
operator|new
name|RpcCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|Object
name|parameter
parameter_list|)
block|{
comment|// TODO: do not need to call AsyncCall.setFailed?
synchronized|synchronized
init|(
name|pendingCalls
init|)
block|{
name|pendingCalls
operator|.
name|remove
argument_list|(
name|call
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// TODO: this should be handled by PayloadCarryingRpcController.
if|if
condition|(
name|controller
operator|.
name|isCanceled
argument_list|()
condition|)
block|{
comment|// To finish if the call was cancelled before we set the notification (race condition)
name|call
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|call
return|;
block|}
synchronized|synchronized
init|(
name|pendingCalls
init|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
name|Promise
argument_list|<
name|Message
argument_list|>
name|promise
init|=
name|channel
operator|.
name|eventLoop
argument_list|()
operator|.
name|newPromise
argument_list|()
decl_stmt|;
name|promise
operator|.
name|setFailure
argument_list|(
operator|new
name|ConnectException
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|promise
return|;
block|}
name|pendingCalls
operator|.
name|put
argument_list|(
name|call
operator|.
name|id
argument_list|,
name|call
argument_list|)
expr_stmt|;
comment|// Add timeout for cleanup if none is present
if|if
condition|(
name|cleanupTimer
operator|==
literal|null
operator|&&
name|call
operator|.
name|getRpcTimeout
argument_list|()
operator|>
literal|0
condition|)
block|{
name|cleanupTimer
operator|=
name|client
operator|.
name|newTimeout
argument_list|(
name|timeoutTask
argument_list|,
name|call
operator|.
name|getRpcTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|connected
condition|)
block|{
return|return
name|call
return|;
block|}
block|}
name|writeRequest
argument_list|(
name|call
argument_list|)
expr_stmt|;
return|return
name|call
return|;
block|}
name|AsyncCall
name|removePendingCall
parameter_list|(
name|int
name|id
parameter_list|)
block|{
synchronized|synchronized
init|(
name|pendingCalls
init|)
block|{
return|return
name|pendingCalls
operator|.
name|remove
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
comment|/**    * Write the channel header    *    * @param channel to write to    * @return future of write    * @throws java.io.IOException on failure to write    */
specifier|private
name|ChannelFuture
name|writeChannelHeader
parameter_list|(
name|Channel
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
name|RPCProtos
operator|.
name|ConnectionHeader
operator|.
name|Builder
name|headerBuilder
init|=
name|RPCProtos
operator|.
name|ConnectionHeader
operator|.
name|newBuilder
argument_list|()
operator|.
name|setServiceName
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|RPCProtos
operator|.
name|UserInformation
name|userInfoPB
init|=
name|buildUserInfo
argument_list|(
name|ticket
operator|.
name|getUGI
argument_list|()
argument_list|,
name|authMethod
argument_list|)
decl_stmt|;
if|if
condition|(
name|userInfoPB
operator|!=
literal|null
condition|)
block|{
name|headerBuilder
operator|.
name|setUserInfo
argument_list|(
name|userInfoPB
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|client
operator|.
name|codec
operator|!=
literal|null
condition|)
block|{
name|headerBuilder
operator|.
name|setCellBlockCodecClass
argument_list|(
name|client
operator|.
name|codec
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|client
operator|.
name|compressor
operator|!=
literal|null
condition|)
block|{
name|headerBuilder
operator|.
name|setCellBlockCompressorClass
argument_list|(
name|client
operator|.
name|compressor
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|headerBuilder
operator|.
name|setVersionInfo
argument_list|(
name|ProtobufUtil
operator|.
name|getVersionInfo
argument_list|()
argument_list|)
expr_stmt|;
name|RPCProtos
operator|.
name|ConnectionHeader
name|header
init|=
name|headerBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|totalSize
init|=
name|IPCUtil
operator|.
name|getTotalSizeWhenWrittenDelimited
argument_list|(
name|header
argument_list|)
decl_stmt|;
name|ByteBuf
name|b
init|=
name|channel
operator|.
name|alloc
argument_list|()
operator|.
name|directBuffer
argument_list|(
name|totalSize
argument_list|)
decl_stmt|;
name|b
operator|.
name|writeInt
argument_list|(
name|header
operator|.
name|getSerializedSize
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|writeBytes
argument_list|(
name|header
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|channel
operator|.
name|writeAndFlush
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|/**    * Write request to channel    *    * @param call    to write    */
specifier|private
name|void
name|writeRequest
parameter_list|(
specifier|final
name|AsyncCall
name|call
parameter_list|)
block|{
try|try
block|{
specifier|final
name|RPCProtos
operator|.
name|RequestHeader
operator|.
name|Builder
name|requestHeaderBuilder
init|=
name|RPCProtos
operator|.
name|RequestHeader
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|requestHeaderBuilder
operator|.
name|setCallId
argument_list|(
name|call
operator|.
name|id
argument_list|)
operator|.
name|setMethodName
argument_list|(
name|call
operator|.
name|method
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setRequestParam
argument_list|(
name|call
operator|.
name|param
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|Trace
operator|.
name|isTracing
argument_list|()
condition|)
block|{
name|Span
name|s
init|=
name|Trace
operator|.
name|currentSpan
argument_list|()
decl_stmt|;
name|requestHeaderBuilder
operator|.
name|setTraceInfo
argument_list|(
name|TracingProtos
operator|.
name|RPCTInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setParentId
argument_list|(
name|s
operator|.
name|getSpanId
argument_list|()
argument_list|)
operator|.
name|setTraceId
argument_list|(
name|s
operator|.
name|getTraceId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
name|cellBlock
init|=
name|client
operator|.
name|buildCellBlock
argument_list|(
name|call
operator|.
name|controller
operator|.
name|cellScanner
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cellBlock
operator|!=
literal|null
condition|)
block|{
specifier|final
name|RPCProtos
operator|.
name|CellBlockMeta
operator|.
name|Builder
name|cellBlockBuilder
init|=
name|RPCProtos
operator|.
name|CellBlockMeta
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|cellBlockBuilder
operator|.
name|setLength
argument_list|(
name|cellBlock
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|requestHeaderBuilder
operator|.
name|setCellBlockMeta
argument_list|(
name|cellBlockBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Only pass priority if there one.  Let zero be same as no priority.
if|if
condition|(
name|call
operator|.
name|controller
operator|.
name|getPriority
argument_list|()
operator|!=
name|PayloadCarryingRpcController
operator|.
name|PRIORITY_UNSET
condition|)
block|{
name|requestHeaderBuilder
operator|.
name|setPriority
argument_list|(
name|call
operator|.
name|controller
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RPCProtos
operator|.
name|RequestHeader
name|rh
init|=
name|requestHeaderBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|totalSize
init|=
name|IPCUtil
operator|.
name|getTotalSizeWhenWrittenDelimited
argument_list|(
name|rh
argument_list|,
name|call
operator|.
name|param
argument_list|)
decl_stmt|;
if|if
condition|(
name|cellBlock
operator|!=
literal|null
condition|)
block|{
name|totalSize
operator|+=
name|cellBlock
operator|.
name|remaining
argument_list|()
expr_stmt|;
block|}
name|ByteBuf
name|b
init|=
name|channel
operator|.
name|alloc
argument_list|()
operator|.
name|directBuffer
argument_list|(
literal|4
operator|+
name|totalSize
argument_list|)
decl_stmt|;
try|try
init|(
name|ByteBufOutputStream
name|out
init|=
operator|new
name|ByteBufOutputStream
argument_list|(
name|b
argument_list|)
init|)
block|{
name|call
operator|.
name|callStats
operator|.
name|setRequestSizeBytes
argument_list|(
name|IPCUtil
operator|.
name|write
argument_list|(
name|out
argument_list|,
name|rh
argument_list|,
name|call
operator|.
name|param
argument_list|,
name|cellBlock
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|channel
operator|.
name|writeAndFlush
argument_list|(
name|b
argument_list|)
operator|.
name|addListener
argument_list|(
operator|new
name|CallWriteListener
argument_list|(
name|this
argument_list|,
name|call
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|close
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set up server authorization    *    * @throws java.io.IOException if auth setup failed    */
specifier|private
name|void
name|setupAuthorization
parameter_list|()
throws|throws
name|IOException
block|{
name|SecurityInfo
name|securityInfo
init|=
name|SecurityInfo
operator|.
name|getInfo
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|this
operator|.
name|useSasl
operator|=
name|client
operator|.
name|userProvider
operator|.
name|isHBaseSecurityEnabled
argument_list|()
expr_stmt|;
name|this
operator|.
name|token
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|useSasl
operator|&&
name|securityInfo
operator|!=
literal|null
condition|)
block|{
name|AuthenticationProtos
operator|.
name|TokenIdentifier
operator|.
name|Kind
name|tokenKind
init|=
name|securityInfo
operator|.
name|getTokenKind
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenKind
operator|!=
literal|null
condition|)
block|{
name|TokenSelector
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|tokenSelector
init|=
name|tokenHandlers
operator|.
name|get
argument_list|(
name|tokenKind
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenSelector
operator|!=
literal|null
condition|)
block|{
name|token
operator|=
name|tokenSelector
operator|.
name|selectToken
argument_list|(
operator|new
name|Text
argument_list|(
name|client
operator|.
name|clusterId
argument_list|)
argument_list|,
name|ticket
operator|.
name|getUGI
argument_list|()
operator|.
name|getTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No token selector found for type "
operator|+
name|tokenKind
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|serverKey
init|=
name|securityInfo
operator|.
name|getServerPrincipal
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverKey
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't obtain server Kerberos config key from SecurityInfo"
argument_list|)
throw|;
block|}
name|this
operator|.
name|serverPrincipal
operator|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|client
operator|.
name|conf
operator|.
name|get
argument_list|(
name|serverKey
argument_list|)
argument_list|,
name|address
operator|.
name|getAddress
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"RPC Server Kerberos principal name for service="
operator|+
name|serviceName
operator|+
literal|" is "
operator|+
name|serverPrincipal
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|useSasl
condition|)
block|{
name|authMethod
operator|=
name|AuthMethod
operator|.
name|SIMPLE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|authMethod
operator|=
name|AuthMethod
operator|.
name|DIGEST
expr_stmt|;
block|}
else|else
block|{
name|authMethod
operator|=
name|AuthMethod
operator|.
name|KERBEROS
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Use "
operator|+
name|authMethod
operator|+
literal|" authentication for service "
operator|+
name|serviceName
operator|+
literal|", sasl="
operator|+
name|useSasl
argument_list|)
expr_stmt|;
block|}
name|reloginMaxBackoff
operator|=
name|client
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.security.relogin.maxbackoff"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Build the user information    *    * @param ugi        User Group Information    * @param authMethod Authorization method    * @return UserInformation protobuf    */
specifier|private
name|RPCProtos
operator|.
name|UserInformation
name|buildUserInfo
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|AuthMethod
name|authMethod
parameter_list|)
block|{
if|if
condition|(
name|ugi
operator|==
literal|null
operator|||
name|authMethod
operator|==
name|AuthMethod
operator|.
name|DIGEST
condition|)
block|{
comment|// Don't send user for token auth
return|return
literal|null
return|;
block|}
name|RPCProtos
operator|.
name|UserInformation
operator|.
name|Builder
name|userInfoPB
init|=
name|RPCProtos
operator|.
name|UserInformation
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|authMethod
operator|==
name|AuthMethod
operator|.
name|KERBEROS
condition|)
block|{
comment|// Send effective user for Kerberos auth
name|userInfoPB
operator|.
name|setEffectiveUser
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authMethod
operator|==
name|AuthMethod
operator|.
name|SIMPLE
condition|)
block|{
comment|//Send both effective user and real user for simple auth
name|userInfoPB
operator|.
name|setEffectiveUser
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|userInfoPB
operator|.
name|setRealUser
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|userInfoPB
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Create connection preamble    *    * @param byteBuf    to write to    * @param authMethod to write    */
specifier|private
name|void
name|createPreamble
parameter_list|(
name|ByteBuf
name|byteBuf
parameter_list|,
name|AuthMethod
name|authMethod
parameter_list|)
block|{
name|byteBuf
operator|.
name|writeBytes
argument_list|(
name|HConstants
operator|.
name|RPC_HEADER
argument_list|)
expr_stmt|;
name|byteBuf
operator|.
name|writeByte
argument_list|(
name|HConstants
operator|.
name|RPC_CURRENT_VERSION
argument_list|)
expr_stmt|;
name|byteBuf
operator|.
name|writeByte
argument_list|(
name|authMethod
operator|.
name|code
argument_list|)
expr_stmt|;
block|}
comment|/**    * Close connection    *    * @param e exception on close    */
specifier|public
name|void
name|close
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|client
operator|.
name|removeConnection
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Move closing from the requesting thread to the channel thread
name|channel
operator|.
name|eventLoop
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|List
argument_list|<
name|AsyncCall
argument_list|>
name|toCleanup
decl_stmt|;
synchronized|synchronized
init|(
name|pendingCalls
init|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
name|toCleanup
operator|=
operator|new
name|ArrayList
argument_list|<
name|AsyncCall
argument_list|>
argument_list|(
name|pendingCalls
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|pendingCalls
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|IOException
name|closeException
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|IOException
condition|)
block|{
name|closeException
operator|=
operator|(
name|IOException
operator|)
name|e
expr_stmt|;
block|}
else|else
block|{
name|closeException
operator|=
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// log the info
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
name|closeException
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|name
operator|+
literal|": closing ipc connection to "
operator|+
name|address
argument_list|,
name|closeException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cleanupTimer
operator|!=
literal|null
condition|)
block|{
name|cleanupTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|cleanupTimer
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|AsyncCall
name|call
range|:
name|toCleanup
control|)
block|{
name|call
operator|.
name|setFailed
argument_list|(
name|closeException
operator|!=
literal|null
condition|?
name|closeException
else|:
operator|new
name|ConnectionClosingException
argument_list|(
literal|"Call id="
operator|+
name|call
operator|.
name|id
operator|+
literal|" on server "
operator|+
name|address
operator|+
literal|" aborted: connection is closing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|channel
operator|.
name|disconnect
argument_list|()
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|name
operator|+
literal|": closed"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clean up calls.    */
specifier|private
name|void
name|cleanupCalls
parameter_list|()
block|{
name|List
argument_list|<
name|AsyncCall
argument_list|>
name|toCleanup
init|=
operator|new
name|ArrayList
argument_list|<
name|AsyncCall
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|currentTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|long
name|nextCleanupTaskDelay
init|=
operator|-
literal|1L
decl_stmt|;
synchronized|synchronized
init|(
name|pendingCalls
init|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|AsyncCall
argument_list|>
name|iter
init|=
name|pendingCalls
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AsyncCall
name|call
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|long
name|timeout
init|=
name|call
operator|.
name|getRpcTimeout
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|currentTime
operator|-
name|call
operator|.
name|getStartTime
argument_list|()
operator|>=
name|timeout
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|toCleanup
operator|.
name|add
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|nextCleanupTaskDelay
operator|<
literal|0
operator|||
name|timeout
operator|<
name|nextCleanupTaskDelay
condition|)
block|{
name|nextCleanupTaskDelay
operator|=
name|timeout
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|nextCleanupTaskDelay
operator|>
literal|0
condition|)
block|{
name|cleanupTimer
operator|=
name|client
operator|.
name|newTimeout
argument_list|(
name|timeoutTask
argument_list|,
name|nextCleanupTaskDelay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cleanupTimer
operator|=
literal|null
expr_stmt|;
block|}
block|}
for|for
control|(
name|AsyncCall
name|call
range|:
name|toCleanup
control|)
block|{
name|call
operator|.
name|setFailed
argument_list|(
operator|new
name|CallTimeoutException
argument_list|(
literal|"Call id="
operator|+
name|call
operator|.
name|id
operator|+
literal|", waitTime="
operator|+
operator|(
name|currentTime
operator|-
name|call
operator|.
name|getStartTime
argument_list|()
operator|)
operator|+
literal|", rpcTimeout="
operator|+
name|call
operator|.
name|getRpcTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check if the connection is alive    *    * @return true if alive    */
specifier|public
name|boolean
name|isAlive
parameter_list|()
block|{
return|return
name|channel
operator|.
name|isOpen
argument_list|()
return|;
block|}
comment|/**    * Check if user should authenticate over Kerberos    *    * @return true if should be authenticated over Kerberos    * @throws java.io.IOException on failure of check    */
specifier|private
specifier|synchronized
name|boolean
name|shouldAuthenticateOverKrb
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|loginUser
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|realUser
init|=
name|currentUser
operator|.
name|getRealUser
argument_list|()
decl_stmt|;
return|return
name|authMethod
operator|==
name|AuthMethod
operator|.
name|KERBEROS
operator|&&
name|loginUser
operator|!=
literal|null
operator|&&
comment|//Make sure user logged in using Kerberos either keytab or TGT
name|loginUser
operator|.
name|hasKerberosCredentials
argument_list|()
operator|&&
comment|// relogin only in case it is the login user (e.g. JT)
comment|// or superuser (like oozie).
operator|(
name|loginUser
operator|.
name|equals
argument_list|(
name|currentUser
argument_list|)
operator|||
name|loginUser
operator|.
name|equals
argument_list|(
name|realUser
argument_list|)
operator|)
return|;
block|}
comment|/**    * If multiple clients with the same principal try to connect    * to the same server at the same time, the server assumes a    * replay attack is in progress. This is a feature of kerberos.    * In order to work around this, what is done is that the client    * backs off randomly and tries to initiate the connection    * again.    * The other problem is to do with ticket expiry. To handle that,    * a relogin is attempted.    *<p>    * The retry logic is governed by the {@link #shouldAuthenticateOverKrb}    * method. In case when the user doesn't have valid credentials, we don't    * need to retry (from cache or ticket). In such cases, it is prudent to    * throw a runtime exception when we receive a SaslException from the    * underlying authentication implementation, so there is no retry from    * other high level (for eg, HCM or HBaseAdmin).    *</p>    *    * @param currRetries retry count    * @param ex          exception describing fail    * @param user        which is trying to connect    * @throws java.io.IOException  if IO fail    * @throws InterruptedException if thread is interrupted    */
specifier|private
name|void
name|handleSaslConnectionFailure
parameter_list|(
specifier|final
name|int
name|currRetries
parameter_list|,
specifier|final
name|Throwable
name|ex
parameter_list|,
specifier|final
name|UserGroupInformation
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|shouldAuthenticateOverKrb
argument_list|()
condition|)
block|{
if|if
condition|(
name|currRetries
operator|<
name|MAX_SASL_RETRIES
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception encountered while connecting to the server : "
operator|+
name|ex
argument_list|)
expr_stmt|;
comment|//try re-login
if|if
condition|(
name|UserGroupInformation
operator|.
name|isLoginKeytabBased
argument_list|()
condition|)
block|{
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|reloginFromKeytab
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|reloginFromTicketCache
argument_list|()
expr_stmt|;
block|}
comment|// Should reconnect
return|return
literal|null
return|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Couldn't setup connection for "
operator|+
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
operator|+
literal|" to "
operator|+
name|serverPrincipal
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception encountered while connecting to "
operator|+
literal|"the server : "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|RemoteException
condition|)
block|{
throw|throw
operator|(
name|RemoteException
operator|)
name|ex
throw|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|SaslException
condition|)
block|{
name|String
name|msg
init|=
literal|"SASL authentication failed."
operator|+
literal|" The most likely cause is missing or invalid credentials."
operator|+
literal|" Consider 'kinit'."
decl_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
name|msg
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|,
name|ex
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getConnectionHashCode
parameter_list|()
block|{
return|return
name|ConnectionId
operator|.
name|hashCode
argument_list|(
name|ticket
argument_list|,
name|serviceName
argument_list|,
name|address
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getConnectionHashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|AsyncRpcChannel
condition|)
block|{
name|AsyncRpcChannel
name|channel
init|=
operator|(
name|AsyncRpcChannel
operator|)
name|obj
decl_stmt|;
return|return
name|channel
operator|.
name|hashCode
argument_list|()
operator|==
name|obj
operator|.
name|hashCode
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|address
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|this
operator|.
name|serviceName
operator|+
literal|"/"
operator|+
name|this
operator|.
name|ticket
return|;
block|}
comment|/**    * Listens to call writes and fails if write failed    */
specifier|private
specifier|static
specifier|final
class|class
name|CallWriteListener
implements|implements
name|ChannelFutureListener
block|{
specifier|private
specifier|final
name|AsyncRpcChannel
name|rpcChannel
decl_stmt|;
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
specifier|public
name|CallWriteListener
parameter_list|(
name|AsyncRpcChannel
name|asyncRpcChannel
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|rpcChannel
operator|=
name|asyncRpcChannel
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|future
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|AsyncCall
name|call
init|=
name|rpcChannel
operator|.
name|removePendingCall
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|call
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|future
operator|.
name|cause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
name|call
operator|.
name|setFailed
argument_list|(
operator|(
name|IOException
operator|)
name|future
operator|.
name|cause
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|call
operator|.
name|setFailed
argument_list|(
operator|new
name|IOException
argument_list|(
name|future
operator|.
name|cause
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

