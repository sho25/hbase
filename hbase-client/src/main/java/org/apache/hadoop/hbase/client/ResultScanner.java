begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|metrics
operator|.
name|ScanMetrics
import|;
end_import

begin_comment
comment|/**  * Interface for client-side scanning. Go to {@link Table} to obtain instances.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
interface|interface
name|ResultScanner
extends|extends
name|Closeable
extends|,
name|Iterable
argument_list|<
name|Result
argument_list|>
block|{
annotation|@
name|Override
specifier|default
name|Iterator
argument_list|<
name|Result
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Result
argument_list|>
argument_list|()
block|{
comment|// The next RowResult, possibly pre-read
name|Result
name|next
init|=
literal|null
decl_stmt|;
comment|// return true if there is another item pending, false if there isn't.
comment|// this method is where the actual advancing takes place, but you need
comment|// to call next() to consume it. hasNext() will only advance if there
comment|// isn't a pending next().
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
return|return
operator|(
name|next
operator|=
name|ResultScanner
operator|.
name|this
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// get the pending next item and advance the iterator. returns null if
comment|// there is no next item.
annotation|@
name|Override
specifier|public
name|Result
name|next
parameter_list|()
block|{
comment|// since hasNext() does the real advancing, we call this to determine
comment|// if there is a next before proceeding.
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// if we get to here, then hasNext() has given us an item to return.
comment|// we want to return the item and then null out the next pointer, so
comment|// we use a temporary variable.
name|Result
name|temp
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|temp
return|;
block|}
block|}
return|;
block|}
comment|/**    * Grab the next row's worth of values. The scanner will return a Result.    * @return Result object if there is another row, null if the scanner is exhausted.    * @throws IOException e    */
name|Result
name|next
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Get nbRows rows. How many RPCs are made is determined by the {@link Scan#setCaching(int)}    * setting (or hbase.client.scanner.caching in hbase-site.xml).    * @param nbRows number of rows to return    * @return Between zero and nbRows rowResults. Scan is done if returned array is of zero-length    *         (We never return null).    * @throws IOException    */
specifier|default
name|Result
index|[]
name|next
parameter_list|(
name|int
name|nbRows
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Result
argument_list|>
name|resultSets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nbRows
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbRows
condition|;
name|i
operator|++
control|)
block|{
name|Result
name|next
init|=
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|resultSets
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|resultSets
operator|.
name|toArray
argument_list|(
operator|new
name|Result
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**    * Closes the scanner and releases any resources it has allocated    */
annotation|@
name|Override
name|void
name|close
parameter_list|()
function_decl|;
comment|/**    * Allow the client to renew the scanner's lease on the server.    * @return true if the lease was successfully renewed, false otherwise.    */
name|boolean
name|renewLease
parameter_list|()
function_decl|;
comment|/**    * @return the scan metrics, or {@code null} if we do not enable metrics.    */
name|ScanMetrics
name|getScanMetrics
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

