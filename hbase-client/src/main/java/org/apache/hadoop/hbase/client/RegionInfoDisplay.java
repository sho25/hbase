begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Utility used composing RegionInfo for 'display'; e.g. on the web UI  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RegionInfoDisplay
block|{
specifier|public
specifier|final
specifier|static
name|String
name|DISPLAY_KEYS_KEY
init|=
literal|"hbase.display.keys"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|HIDDEN_END_KEY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hidden-end-key"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|HIDDEN_START_KEY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hidden-start-key"
argument_list|)
decl_stmt|;
comment|/**    * Get the descriptive name as {@link RegionState} does it but with hidden    * startkey optionally    * @return descriptive string    */
specifier|public
specifier|static
name|String
name|getDescriptiveNameFromRegionStateForDisplay
parameter_list|(
name|RegionState
name|state
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|DISPLAY_KEYS_KEY
argument_list|,
literal|true
argument_list|)
condition|)
return|return
name|state
operator|.
name|toDescriptiveString
argument_list|()
return|;
name|String
name|descriptiveStringFromState
init|=
name|state
operator|.
name|toDescriptiveString
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|descriptiveStringFromState
operator|.
name|lastIndexOf
argument_list|(
literal|" state="
argument_list|)
decl_stmt|;
name|String
name|regionName
init|=
name|getRegionNameAsStringForDisplay
argument_list|(
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|state
operator|.
name|getRegion
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|regionName
operator|+
name|descriptiveStringFromState
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
return|;
block|}
comment|/**    * Get the end key for display. Optionally hide the real end key.    * @return the endkey    */
specifier|public
specifier|static
name|byte
index|[]
name|getEndKeyForDisplay
parameter_list|(
name|RegionInfo
name|ri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|displayKey
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DISPLAY_KEYS_KEY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|displayKey
condition|)
return|return
name|ri
operator|.
name|getEndKey
argument_list|()
return|;
return|return
name|HIDDEN_END_KEY
return|;
block|}
comment|/**    * Get the start key for display. Optionally hide the real start key.    * @param ri    * @param conf    * @return the startkey    */
specifier|public
specifier|static
name|byte
index|[]
name|getStartKeyForDisplay
parameter_list|(
name|RegionInfo
name|ri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|displayKey
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DISPLAY_KEYS_KEY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|displayKey
condition|)
return|return
name|ri
operator|.
name|getStartKey
argument_list|()
return|;
return|return
name|HIDDEN_START_KEY
return|;
block|}
comment|/**    * Get the region name for display. Optionally hide the start key.    * @param ri    * @param conf    * @return region name as String    */
specifier|public
specifier|static
name|String
name|getRegionNameAsStringForDisplay
parameter_list|(
name|RegionInfo
name|ri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|getRegionNameForDisplay
argument_list|(
name|ri
argument_list|,
name|conf
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get the region name for display. Optionally hide the start key.    * @param ri    * @param conf    * @return region name bytes    */
specifier|public
specifier|static
name|byte
index|[]
name|getRegionNameForDisplay
parameter_list|(
name|RegionInfo
name|ri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|displayKey
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DISPLAY_KEYS_KEY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|displayKey
operator|||
name|ri
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
return|return
name|ri
operator|.
name|getRegionName
argument_list|()
return|;
block|}
else|else
block|{
comment|// create a modified regionname with the startkey replaced but preserving
comment|// the other parts including the encodedname.
try|try
block|{
name|byte
index|[]
index|[]
name|regionNameParts
init|=
name|RegionInfo
operator|.
name|parseRegionName
argument_list|(
name|ri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|regionNameParts
index|[
literal|1
index|]
operator|=
name|HIDDEN_START_KEY
expr_stmt|;
comment|//replace the real startkey
name|int
name|len
init|=
literal|0
decl_stmt|;
comment|// get the total length
for|for
control|(
name|byte
index|[]
name|b
range|:
name|regionNameParts
control|)
block|{
name|len
operator|+=
name|b
operator|.
name|length
expr_stmt|;
block|}
name|byte
index|[]
name|encodedRegionName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|RegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|ri
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|len
operator|+=
name|encodedRegionName
operator|.
name|length
expr_stmt|;
comment|//allocate some extra bytes for the delimiters and the last '.'
name|byte
index|[]
name|modifiedName
init|=
operator|new
name|byte
index|[
name|len
operator|+
name|regionNameParts
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|lengthSoFar
init|=
literal|0
decl_stmt|;
name|int
name|loopCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|b
range|:
name|regionNameParts
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|modifiedName
argument_list|,
name|lengthSoFar
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|lengthSoFar
operator|+=
name|b
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|loopCount
operator|++
operator|==
literal|2
condition|)
name|modifiedName
index|[
name|lengthSoFar
operator|++
index|]
operator|=
name|RegionInfo
operator|.
name|REPLICA_ID_DELIMITER
expr_stmt|;
else|else
name|modifiedName
index|[
name|lengthSoFar
operator|++
index|]
operator|=
name|HConstants
operator|.
name|DELIMITER
expr_stmt|;
block|}
comment|// replace the last comma with '.'
name|modifiedName
index|[
name|lengthSoFar
operator|-
literal|1
index|]
operator|=
name|RegionInfo
operator|.
name|ENC_SEPARATOR
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|encodedRegionName
argument_list|,
literal|0
argument_list|,
name|modifiedName
argument_list|,
name|lengthSoFar
argument_list|,
name|encodedRegionName
operator|.
name|length
argument_list|)
expr_stmt|;
name|lengthSoFar
operator|+=
name|encodedRegionName
operator|.
name|length
expr_stmt|;
name|modifiedName
index|[
name|lengthSoFar
index|]
operator|=
name|RegionInfo
operator|.
name|ENC_SEPARATOR
expr_stmt|;
return|return
name|modifiedName
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//LOG.warn("Encountered exception " + e);
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

