begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_comment
comment|/**  * Provides client-side metrics related to scan operations  * The data can be passed to mapreduce framework or other systems.  * We use atomic longs so that one thread can increment,  * while another atomically resets to zero after the values are reported  * to hadoop's counters.  *  * Some of these metrics are general for any client operation such as put  * However, there is no need for this. So they are defined under scan operation  * for now.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ScanMetrics
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ScanMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Hash to hold the String -> Atomic Long mappings.    */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicLong
argument_list|>
name|counters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AtomicLong
argument_list|>
argument_list|()
decl_stmt|;
comment|// AtomicLongs to hold the metrics values.  These are all updated through ClientScanner and
comment|// ScannerCallable.  They are atomic longs so that atomic getAndSet can be used to reset the
comment|// values after progress is passed to hadoop's counters.
comment|/**    * number of RPC calls    */
specifier|public
specifier|final
name|AtomicLong
name|countOfRPCcalls
init|=
name|createCounter
argument_list|(
literal|"RPC_CALLS"
argument_list|)
decl_stmt|;
comment|/**    * number of remote RPC calls    */
specifier|public
specifier|final
name|AtomicLong
name|countOfRemoteRPCcalls
init|=
name|createCounter
argument_list|(
literal|"REMOTE_RPC_CALLS"
argument_list|)
decl_stmt|;
comment|/**    * sum of milliseconds between sequential next calls    */
specifier|public
specifier|final
name|AtomicLong
name|sumOfMillisSecBetweenNexts
init|=
name|createCounter
argument_list|(
literal|"MILLIS_BETWEEN_NEXTS"
argument_list|)
decl_stmt|;
comment|/**    * number of NotServingRegionException caught    */
specifier|public
specifier|final
name|AtomicLong
name|countOfNSRE
init|=
name|createCounter
argument_list|(
literal|"NOT_SERVING_REGION_EXCEPTION"
argument_list|)
decl_stmt|;
comment|/**    * number of bytes in Result objects from region servers    */
specifier|public
specifier|final
name|AtomicLong
name|countOfBytesInResults
init|=
name|createCounter
argument_list|(
literal|"BYTES_IN_RESULTS"
argument_list|)
decl_stmt|;
comment|/**    * number of bytes in Result objects from remote region servers    */
specifier|public
specifier|final
name|AtomicLong
name|countOfBytesInRemoteResults
init|=
name|createCounter
argument_list|(
literal|"BYTES_IN_REMOTE_RESULTS"
argument_list|)
decl_stmt|;
comment|/**    * number of regions    */
specifier|public
specifier|final
name|AtomicLong
name|countOfRegions
init|=
name|createCounter
argument_list|(
literal|"REGIONS_SCANNED"
argument_list|)
decl_stmt|;
comment|/**    * number of RPC retries    */
specifier|public
specifier|final
name|AtomicLong
name|countOfRPCRetries
init|=
name|createCounter
argument_list|(
literal|"RPC_RETRIES"
argument_list|)
decl_stmt|;
comment|/**    * number of remote RPC retries    */
specifier|public
specifier|final
name|AtomicLong
name|countOfRemoteRPCRetries
init|=
name|createCounter
argument_list|(
literal|"REMOTE_RPC_RETRIES"
argument_list|)
decl_stmt|;
comment|/**    * constructor    */
specifier|public
name|ScanMetrics
parameter_list|()
block|{   }
specifier|private
name|AtomicLong
name|createCounter
parameter_list|(
name|String
name|counterName
parameter_list|)
block|{
name|AtomicLong
name|c
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|counters
operator|.
name|put
argument_list|(
name|counterName
argument_list|,
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
specifier|public
name|void
name|setCounter
parameter_list|(
name|String
name|counterName
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|AtomicLong
name|c
init|=
name|this
operator|.
name|counters
operator|.
name|get
argument_list|(
name|counterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get all of the values since the last time this function was called.    *    * Calling this function will reset all AtomicLongs in the instance back to 0.    *    * @return A Map of String -> Long for metrics    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getMetricsMap
parameter_list|()
block|{
comment|//Create a builder
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|//For every entry add the value and reset the AtomicLong back to zero
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AtomicLong
argument_list|>
name|e
range|:
name|this
operator|.
name|counters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Build the immutable map so that people can't mess around with it.
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

