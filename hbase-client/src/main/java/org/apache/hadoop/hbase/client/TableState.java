begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_comment
comment|/**  * Represents table state.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|TableState
block|{
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|static
enum|enum
name|State
block|{
name|ENABLED
block|,
name|DISABLED
block|,
name|DISABLING
block|,
name|ENABLING
block|;
comment|/**      * Covert from PB version of State      *      * @param state convert from      * @return POJO      */
specifier|public
specifier|static
name|State
name|convert
parameter_list|(
name|HBaseProtos
operator|.
name|TableState
operator|.
name|State
name|state
parameter_list|)
block|{
name|State
name|ret
decl_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|ENABLED
case|:
name|ret
operator|=
name|State
operator|.
name|ENABLED
expr_stmt|;
break|break;
case|case
name|DISABLED
case|:
name|ret
operator|=
name|State
operator|.
name|DISABLED
expr_stmt|;
break|break;
case|case
name|DISABLING
case|:
name|ret
operator|=
name|State
operator|.
name|DISABLING
expr_stmt|;
break|break;
case|case
name|ENABLING
case|:
name|ret
operator|=
name|State
operator|.
name|ENABLING
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|state
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Covert to PB version of State      *      * @return PB      */
specifier|public
name|HBaseProtos
operator|.
name|TableState
operator|.
name|State
name|convert
parameter_list|()
block|{
name|HBaseProtos
operator|.
name|TableState
operator|.
name|State
name|state
decl_stmt|;
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|ENABLED
case|:
name|state
operator|=
name|HBaseProtos
operator|.
name|TableState
operator|.
name|State
operator|.
name|ENABLED
expr_stmt|;
break|break;
case|case
name|DISABLED
case|:
name|state
operator|=
name|HBaseProtos
operator|.
name|TableState
operator|.
name|State
operator|.
name|DISABLED
expr_stmt|;
break|break;
case|case
name|DISABLING
case|:
name|state
operator|=
name|HBaseProtos
operator|.
name|TableState
operator|.
name|State
operator|.
name|DISABLING
expr_stmt|;
break|break;
case|case
name|ENABLING
case|:
name|state
operator|=
name|HBaseProtos
operator|.
name|TableState
operator|.
name|State
operator|.
name|ENABLING
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|state
return|;
block|}
block|}
specifier|private
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|private
specifier|final
name|State
name|state
decl_stmt|;
comment|/**    * Create instance of TableState.    * @param tableName name of the table    * @param state table state    */
specifier|public
name|TableState
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
comment|/**    * @return table state    */
specifier|public
name|State
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
comment|/**    * Table name for state    *    * @return milliseconds    */
specifier|public
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**    * Check that table in given states    * @param state state    * @return true if satisfies    */
specifier|public
name|boolean
name|inStates
parameter_list|(
name|State
name|state
parameter_list|)
block|{
return|return
name|this
operator|.
name|state
operator|.
name|equals
argument_list|(
name|state
argument_list|)
return|;
block|}
comment|/**    * Check that table in given states    * @param states state list    * @return true if satisfies    */
specifier|public
name|boolean
name|inStates
parameter_list|(
name|State
modifier|...
name|states
parameter_list|)
block|{
for|for
control|(
name|State
name|s
range|:
name|states
control|)
block|{
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
name|this
operator|.
name|state
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Covert to PB version of TableState    * @return PB    */
specifier|public
name|HBaseProtos
operator|.
name|TableState
name|convert
parameter_list|()
block|{
return|return
name|HBaseProtos
operator|.
name|TableState
operator|.
name|newBuilder
argument_list|()
operator|.
name|setState
argument_list|(
name|this
operator|.
name|state
operator|.
name|convert
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Covert from PB version of TableState    *    * @param tableName table this state of    * @param tableState convert from    * @return POJO    */
specifier|public
specifier|static
name|TableState
name|convert
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|HBaseProtos
operator|.
name|TableState
name|tableState
parameter_list|)
block|{
name|TableState
operator|.
name|State
name|state
init|=
name|State
operator|.
name|convert
argument_list|(
name|tableState
operator|.
name|getState
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|TableState
argument_list|(
name|tableName
argument_list|,
name|state
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableState
name|parseFrom
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
try|try
block|{
return|return
name|convert
argument_list|(
name|tableName
argument_list|,
name|HBaseProtos
operator|.
name|TableState
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Static version of state checker    * @param state desired    * @param target equals to any of    * @return true if satisfies    */
specifier|public
specifier|static
name|boolean
name|isInStates
parameter_list|(
name|State
name|state
parameter_list|,
name|State
modifier|...
name|target
parameter_list|)
block|{
for|for
control|(
name|State
name|tableState
range|:
name|target
control|)
block|{
if|if
condition|(
name|state
operator|.
name|equals
argument_list|(
name|tableState
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|TableState
name|that
init|=
operator|(
name|TableState
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|state
operator|!=
name|that
operator|.
name|state
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|tableName
operator|!=
literal|null
condition|?
operator|!
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
else|:
name|that
operator|.
name|tableName
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
operator|(
name|tableName
operator|!=
literal|null
condition|?
name|tableName
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|state
operator|!=
literal|null
condition|?
name|state
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TableState{"
operator|+
literal|", tableName="
operator|+
name|tableName
operator|+
literal|", state="
operator|+
name|state
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

