begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_comment
comment|/**  * Tracks the amount of time remaining for an operation.  */
end_comment

begin_class
class|class
name|RetryingTimeTracker
block|{
specifier|private
name|long
name|globalStartTime
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|globalStartTime
operator|<
literal|0
condition|)
block|{
name|this
operator|.
name|globalStartTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getRemainingTime
parameter_list|(
name|int
name|callTimeout
parameter_list|)
block|{
if|if
condition|(
name|callTimeout
operator|<=
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
if|if
condition|(
name|callTimeout
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
name|int
name|remainingTime
init|=
call|(
name|int
call|)
argument_list|(
name|callTimeout
operator|-
operator|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|this
operator|.
name|globalStartTime
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|remainingTime
operator|<
literal|1
condition|)
block|{
comment|// If there is no time left, we're trying anyway. It's too late.
comment|// 0 means no timeout, and it's not the intent here. So we secure both cases by
comment|// resetting to the minimum.
name|remainingTime
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|remainingTime
return|;
block|}
block|}
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|globalStartTime
return|;
block|}
block|}
end_class

end_unit

