begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
operator|.
name|META_TABLE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FutureUtils
operator|.
name|addListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AsyncMetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CacheEvictionStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CacheEvictionStatsAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetricsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
operator|.
name|QueryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionMetricsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotDisabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotEnabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncRpcRetryingCallerFactory
operator|.
name|AdminRequestCallerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncRpcRetryingCallerFactory
operator|.
name|MasterRequestCallerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncRpcRetryingCallerFactory
operator|.
name|ServerRequestCallerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
operator|.
name|ReadType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|ReplicationPeerConfigUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|TableCFs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|security
operator|.
name|SecurityCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaTableUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|SyncReplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|ShadedAccessControlUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|UserPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|ClientSnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RestoreSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ForeignExceptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|HashedWheelTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|GrantRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|GrantResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|RevokeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|RevokeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ClearCompactionQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ClearCompactionQueuesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ClearRegionBlockCacheRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ClearRegionBlockCacheResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CompactRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CompactRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CompactionSwitchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CompactionSwitchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|FlushRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|FlushRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetOnlineRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetOnlineRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionLoadRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionLoadResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|RollWALWriterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|RollWALWriterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|StopServerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|StopServerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|UpdateConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|UpdateConfigurationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|ProcedureDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|TableSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AbortProcedureRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AbortProcedureResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AddColumnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AddColumnResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AssignRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AssignRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|BalanceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|BalanceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ClearDeadServersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ClearDeadServersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateNamespaceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateNamespaceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DecommissionRegionServersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DecommissionRegionServersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteColumnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteColumnResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteNamespaceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteNamespaceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteSnapshotRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteSnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DisableTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DisableTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|EnableCatalogJanitorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|EnableCatalogJanitorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|EnableTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|EnableTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ExecProcedureRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ExecProcedureResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetClusterStatusRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetClusterStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetCompletedSnapshotsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetCompletedSnapshotsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetLocksRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetLocksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetNamespaceDescriptorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetNamespaceDescriptorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetProcedureResultRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetProcedureResultResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetProceduresRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetProceduresResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableDescriptorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableDescriptorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableNamesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableNamesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsBalancerEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsBalancerEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsCatalogJanitorEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsCatalogJanitorEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsCleanerChoreEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsCleanerChoreEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsInMaintenanceModeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsInMaintenanceModeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsNormalizerEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsNormalizerEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsProcedureDoneRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsProcedureDoneResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsRpcThrottleEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsRpcThrottleEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsSnapshotDoneRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsSnapshotDoneResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsSplitOrMergeEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsSplitOrMergeEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListDecommissionedRegionServersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListDecommissionedRegionServersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListNamespaceDescriptorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListNamespaceDescriptorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListTableDescriptorsByNamespaceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListTableDescriptorsByNamespaceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListTableNamesByNamespaceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListTableNamesByNamespaceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MajorCompactionTimestampForRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MajorCompactionTimestampRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MajorCompactionTimestampResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MergeTableRegionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MergeTableRegionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyColumnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyColumnResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyNamespaceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyNamespaceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MoveRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MoveRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|NormalizeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|NormalizeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|OfflineRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|OfflineRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RecommissionRegionServerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RecommissionRegionServerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RestoreSnapshotRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RestoreSnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RunCatalogScanRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RunCatalogScanResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RunCleanerChoreRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RunCleanerChoreResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SecurityCapabilitiesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SecurityCapabilitiesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetBalancerRunningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetBalancerRunningResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetCleanerChoreRunningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetCleanerChoreRunningResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetNormalizerRunningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetNormalizerRunningResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetQuotaRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetQuotaResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetSplitOrMergeEnabledRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetSplitOrMergeEnabledResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ShutdownRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ShutdownResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SnapshotRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SplitTableRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SplitTableRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|StopMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|StopMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SwitchRpcThrottleRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SwitchRpcThrottleResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|TruncateTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|TruncateTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|UnassignRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|UnassignRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetQuotaStatesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetQuotaStatesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetSpaceQuotaRegionSizesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetSpaceQuotaRegionSizesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetSpaceQuotaRegionSizesResponse
operator|.
name|RegionSizes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetSpaceQuotaSnapshotsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetSpaceQuotaSnapshotsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|AddReplicationPeerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|AddReplicationPeerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|DisableReplicationPeerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|DisableReplicationPeerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|EnableReplicationPeerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|EnableReplicationPeerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|GetReplicationPeerConfigRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|GetReplicationPeerConfigResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|ListReplicationPeersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|ListReplicationPeersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|RemoveReplicationPeerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|RemoveReplicationPeerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|TransitReplicationPeerSyncReplicationStateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|TransitReplicationPeerSyncReplicationStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|UpdateReplicationPeerConfigRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|UpdateReplicationPeerConfigResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
import|;
end_import

begin_comment
comment|/**  * The implementation of AsyncAdmin.  *<p>  * The word 'Raw' means that this is a low level class. The returned {@link CompletableFuture} will  * be finished inside the rpc framework thread, which means that the callbacks registered to the  * {@link CompletableFuture} will also be executed inside the rpc framework thread. So users who use  * this class should not try to do time consuming tasks in the callbacks.  * @since 2.0.0  * @see AsyncHBaseAdmin  * @see AsyncConnection#getAdmin()  * @see AsyncConnection#getAdminBuilder()  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|RawAsyncHBaseAdmin
implements|implements
name|AsyncAdmin
block|{
specifier|public
specifier|static
specifier|final
name|String
name|FLUSH_TABLE_PROCEDURE_SIGNATURE
init|=
literal|"flush-table-proc"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AsyncHBaseAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AsyncConnectionImpl
name|connection
decl_stmt|;
specifier|private
specifier|final
name|HashedWheelTimer
name|retryTimer
decl_stmt|;
specifier|private
specifier|final
name|AsyncTable
argument_list|<
name|AdvancedScanResultConsumer
argument_list|>
name|metaTable
decl_stmt|;
specifier|private
specifier|final
name|long
name|rpcTimeoutNs
decl_stmt|;
specifier|private
specifier|final
name|long
name|operationTimeoutNs
decl_stmt|;
specifier|private
specifier|final
name|long
name|pauseNs
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxAttempts
decl_stmt|;
specifier|private
specifier|final
name|int
name|startLogErrorsCnt
decl_stmt|;
specifier|private
specifier|final
name|NonceGenerator
name|ng
decl_stmt|;
name|RawAsyncHBaseAdmin
parameter_list|(
name|AsyncConnectionImpl
name|connection
parameter_list|,
name|HashedWheelTimer
name|retryTimer
parameter_list|,
name|AsyncAdminBuilderBase
name|builder
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|retryTimer
operator|=
name|retryTimer
expr_stmt|;
name|this
operator|.
name|metaTable
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcTimeoutNs
operator|=
name|builder
operator|.
name|rpcTimeoutNs
expr_stmt|;
name|this
operator|.
name|operationTimeoutNs
operator|=
name|builder
operator|.
name|operationTimeoutNs
expr_stmt|;
name|this
operator|.
name|pauseNs
operator|=
name|builder
operator|.
name|pauseNs
expr_stmt|;
name|this
operator|.
name|maxAttempts
operator|=
name|builder
operator|.
name|maxAttempts
expr_stmt|;
name|this
operator|.
name|startLogErrorsCnt
operator|=
name|builder
operator|.
name|startLogErrorsCnt
expr_stmt|;
name|this
operator|.
name|ng
operator|=
name|connection
operator|.
name|getNonceGenerator
argument_list|()
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|MasterRequestCallerBuilder
argument_list|<
name|T
argument_list|>
name|newMasterCaller
parameter_list|()
block|{
return|return
name|this
operator|.
name|connection
operator|.
name|callerFactory
operator|.
expr|<
name|T
operator|>
name|masterRequest
argument_list|()
operator|.
name|rpcTimeout
argument_list|(
name|rpcTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|operationTimeout
argument_list|(
name|operationTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|pause
argument_list|(
name|pauseNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|maxAttempts
argument_list|(
name|maxAttempts
argument_list|)
operator|.
name|startLogErrorsCnt
argument_list|(
name|startLogErrorsCnt
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|AdminRequestCallerBuilder
argument_list|<
name|T
argument_list|>
name|newAdminCaller
parameter_list|()
block|{
return|return
name|this
operator|.
name|connection
operator|.
name|callerFactory
operator|.
expr|<
name|T
operator|>
name|adminRequest
argument_list|()
operator|.
name|rpcTimeout
argument_list|(
name|rpcTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|operationTimeout
argument_list|(
name|operationTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|pause
argument_list|(
name|pauseNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|maxAttempts
argument_list|(
name|maxAttempts
argument_list|)
operator|.
name|startLogErrorsCnt
argument_list|(
name|startLogErrorsCnt
argument_list|)
return|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|MasterRpcCall
parameter_list|<
name|RESP
parameter_list|,
name|REQ
parameter_list|>
block|{
name|void
name|call
parameter_list|(
name|MasterService
operator|.
name|Interface
name|stub
parameter_list|,
name|HBaseRpcController
name|controller
parameter_list|,
name|REQ
name|req
parameter_list|,
name|RpcCallback
argument_list|<
name|RESP
argument_list|>
name|done
parameter_list|)
function_decl|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|AdminRpcCall
parameter_list|<
name|RESP
parameter_list|,
name|REQ
parameter_list|>
block|{
name|void
name|call
parameter_list|(
name|AdminService
operator|.
name|Interface
name|stub
parameter_list|,
name|HBaseRpcController
name|controller
parameter_list|,
name|REQ
name|req
parameter_list|,
name|RpcCallback
argument_list|<
name|RESP
argument_list|>
name|done
parameter_list|)
function_decl|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|Converter
parameter_list|<
name|D
parameter_list|,
name|S
parameter_list|>
block|{
name|D
name|convert
parameter_list|(
name|S
name|src
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
parameter_list|<
name|PREQ
parameter_list|,
name|PRESP
parameter_list|,
name|RESP
parameter_list|>
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|call
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|,
name|MasterService
operator|.
name|Interface
name|stub
parameter_list|,
name|PREQ
name|preq
parameter_list|,
name|MasterRpcCall
argument_list|<
name|PRESP
argument_list|,
name|PREQ
argument_list|>
name|rpcCall
parameter_list|,
name|Converter
argument_list|<
name|RESP
argument_list|,
name|PRESP
argument_list|>
name|respConverter
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|rpcCall
operator|.
name|call
argument_list|(
name|stub
argument_list|,
name|controller
argument_list|,
name|preq
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|PRESP
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|PRESP
name|resp
parameter_list|)
block|{
if|if
condition|(
name|controller
operator|.
name|failed
argument_list|()
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|controller
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|future
operator|.
name|complete
argument_list|(
name|respConverter
operator|.
name|convert
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|private
parameter_list|<
name|PREQ
parameter_list|,
name|PRESP
parameter_list|,
name|RESP
parameter_list|>
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|adminCall
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|,
name|AdminService
operator|.
name|Interface
name|stub
parameter_list|,
name|PREQ
name|preq
parameter_list|,
name|AdminRpcCall
argument_list|<
name|PRESP
argument_list|,
name|PREQ
argument_list|>
name|rpcCall
parameter_list|,
name|Converter
argument_list|<
name|RESP
argument_list|,
name|PRESP
argument_list|>
name|respConverter
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|RESP
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|rpcCall
operator|.
name|call
argument_list|(
name|stub
argument_list|,
name|controller
argument_list|,
name|preq
argument_list|,
operator|new
name|RpcCallback
argument_list|<
name|PRESP
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|PRESP
name|resp
parameter_list|)
block|{
if|if
condition|(
name|controller
operator|.
name|failed
argument_list|()
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IOException
argument_list|(
name|controller
operator|.
name|errorText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|future
operator|.
name|complete
argument_list|(
name|respConverter
operator|.
name|convert
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|private
parameter_list|<
name|PREQ
parameter_list|,
name|PRESP
parameter_list|>
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|procedureCall
parameter_list|(
name|PREQ
name|preq
parameter_list|,
name|MasterRpcCall
argument_list|<
name|PRESP
argument_list|,
name|PREQ
argument_list|>
name|rpcCall
parameter_list|,
name|Converter
argument_list|<
name|Long
argument_list|,
name|PRESP
argument_list|>
name|respConverter
parameter_list|,
name|ProcedureBiConsumer
name|consumer
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Long
argument_list|>
name|procFuture
init|=
name|this
operator|.
expr|<
name|Long
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<PREQ
argument_list|,
name|PRESP
argument_list|,
name|Long
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|preq
argument_list|,
name|rpcCall
argument_list|,
name|respConverter
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
return|return
name|waitProcedureResult
argument_list|(
name|procFuture
argument_list|)
operator|.
name|whenComplete
argument_list|(
name|consumer
argument_list|)
return|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|TableOperator
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|operate
parameter_list|(
name|TableName
name|table
parameter_list|)
function_decl|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|tableExists
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|TableName
operator|.
name|isMetaTableName
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
literal|true
argument_list|)
return|;
block|}
return|return
name|AsyncMetaTableAccessor
operator|.
name|tableExists
argument_list|(
name|metaTable
argument_list|,
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|TableDescriptor
argument_list|>
argument_list|>
name|listTableDescriptors
parameter_list|(
name|boolean
name|includeSysTables
parameter_list|)
block|{
return|return
name|getTableDescriptors
argument_list|(
name|RequestConverter
operator|.
name|buildGetTableDescriptorsRequest
argument_list|(
literal|null
argument_list|,
name|includeSysTables
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * {@link #listTableDescriptors(boolean)}    */
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|TableDescriptor
argument_list|>
argument_list|>
name|listTableDescriptors
parameter_list|(
name|Pattern
name|pattern
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pattern
argument_list|,
literal|"pattern is null. If you don't specify a pattern, use listTables(boolean) instead"
argument_list|)
expr_stmt|;
return|return
name|getTableDescriptors
argument_list|(
name|RequestConverter
operator|.
name|buildGetTableDescriptorsRequest
argument_list|(
name|pattern
argument_list|,
name|includeSysTables
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|TableDescriptor
argument_list|>
argument_list|>
name|getTableDescriptors
parameter_list|(
name|GetTableDescriptorsRequest
name|request
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|List
argument_list|<
name|TableDescriptor
argument_list|>
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetTableDescriptorsRequest
argument_list|,
name|GetTableDescriptorsResponse
argument_list|,
name|List
argument_list|<
name|TableDescriptor
argument_list|>
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|request
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getTableDescriptors
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|ProtobufUtil
operator|.
name|toTableDescriptorList
argument_list|(
name|resp
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|TableName
argument_list|>
argument_list|>
name|listTableNames
parameter_list|(
name|boolean
name|includeSysTables
parameter_list|)
block|{
return|return
name|getTableNames
argument_list|(
name|RequestConverter
operator|.
name|buildGetTableNamesRequest
argument_list|(
literal|null
argument_list|,
name|includeSysTables
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|TableName
argument_list|>
argument_list|>
name|listTableNames
parameter_list|(
name|Pattern
name|pattern
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pattern
argument_list|,
literal|"pattern is null. If you don't specify a pattern, use listTableNames(boolean) instead"
argument_list|)
expr_stmt|;
return|return
name|getTableNames
argument_list|(
name|RequestConverter
operator|.
name|buildGetTableNamesRequest
argument_list|(
name|pattern
argument_list|,
name|includeSysTables
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|TableName
argument_list|>
argument_list|>
name|getTableNames
parameter_list|(
name|GetTableNamesRequest
name|request
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|List
argument_list|<
name|TableName
argument_list|>
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetTableNamesRequest
argument_list|,
name|GetTableNamesResponse
argument_list|,
name|List
argument_list|<
name|TableName
argument_list|>
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|request
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getTableNames
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|ProtobufUtil
operator|.
name|toTableNameList
argument_list|(
name|resp
operator|.
name|getTableNamesList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|TableDescriptor
argument_list|>
argument_list|>
name|listTableDescriptorsByNamespace
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|List
argument_list|<
name|TableDescriptor
argument_list|>
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<ListTableDescriptorsByNamespaceRequest
argument_list|,
name|ListTableDescriptorsByNamespaceResponse
argument_list|,
name|List
argument_list|<
name|TableDescriptor
argument_list|>
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|ListTableDescriptorsByNamespaceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNamespaceName
argument_list|(
name|name
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|listTableDescriptorsByNamespace
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|ProtobufUtil
operator|.
name|toTableDescriptorList
argument_list|(
name|resp
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|TableName
argument_list|>
argument_list|>
name|listTableNamesByNamespace
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|List
argument_list|<
name|TableName
argument_list|>
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<ListTableNamesByNamespaceRequest
argument_list|,
name|ListTableNamesByNamespaceResponse
argument_list|,
name|List
argument_list|<
name|TableName
argument_list|>
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|ListTableNamesByNamespaceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNamespaceName
argument_list|(
name|name
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|listTableNamesByNamespace
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|ProtobufUtil
operator|.
name|toTableNameList
argument_list|(
name|resp
operator|.
name|getTableNameList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|TableDescriptor
argument_list|>
name|getDescriptor
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|TableDescriptor
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|this
operator|.
expr|<
name|List
argument_list|<
name|TableSchema
argument_list|>
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetTableDescriptorsRequest
argument_list|,
name|GetTableDescriptorsResponse
argument_list|,
name|List
argument_list|<
name|TableSchema
argument_list|>
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildGetTableDescriptorsRequest
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getTableDescriptors
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getTableSchemaList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
argument_list|,
parameter_list|(
name|tableSchemas
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
lambda|if (!tableSchemas.isEmpty(
argument_list|)
block|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|ProtobufUtil
operator|.
name|toTableDescriptor
argument_list|(
name|tableSchemas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|future
return|;
end_return

begin_function
unit|}    @
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createTable
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|)
block|{
return|return
name|createTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildCreateTableRequest
argument_list|(
name|desc
argument_list|,
literal|null
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createTable
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|int
name|numRegions
parameter_list|)
block|{
try|try
block|{
return|return
name|createTable
argument_list|(
name|desc
argument_list|,
name|getSplitKeys
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
name|failedFuture
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createTable
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|,
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|splitKeys
argument_list|,
literal|"splitKeys is null. If you don't specify splitKeys,"
operator|+
literal|" use createTable(TableDescriptor) instead"
argument_list|)
expr_stmt|;
try|try
block|{
name|verifySplitKeys
argument_list|(
name|splitKeys
argument_list|)
expr_stmt|;
return|return
name|createTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildCreateTableRequest
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
name|failedFuture
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|CreateTableRequest
name|request
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|tableName
argument_list|,
literal|"table name is null"
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
expr|<
name|CreateTableRequest
operator|,
name|CreateTableResponse
operator|>
name|procedureCall
argument_list|(
name|request
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|createTable
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|CreateTableProcedureBiConsumer
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|modifyTable
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|ModifyTableRequest
operator|,
name|ModifyTableResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildModifyTableRequest
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|desc
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|modifyTable
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|ModifyTableProcedureBiConsumer
argument_list|(
name|this
argument_list|,
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|DeleteTableRequest
operator|,
name|DeleteTableResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildDeleteTableRequest
argument_list|(
name|tableName
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|deleteTable
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|DeleteTableProcedureBiConsumer
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|truncateTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|boolean
name|preserveSplits
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|TruncateTableRequest
operator|,
name|TruncateTableResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildTruncateTableRequest
argument_list|(
name|tableName
argument_list|,
name|preserveSplits
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|truncateTable
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|TruncateTableProcedureBiConsumer
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|enableTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|EnableTableRequest
operator|,
name|EnableTableResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildEnableTableRequest
argument_list|(
name|tableName
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|enableTable
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|EnableTableProcedureBiConsumer
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|disableTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|DisableTableRequest
operator|,
name|DisableTableResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildDisableTableRequest
argument_list|(
name|tableName
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|disableTable
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|DisableTableProcedureBiConsumer
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isTableEnabled
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|TableName
operator|.
name|isMetaTableName
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
literal|true
argument_list|)
return|;
block|}
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|AsyncMetaTableAccessor
operator|.
name|getTableState
argument_list|(
name|metaTable
argument_list|,
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|state
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|state
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|state
operator|.
name|get
argument_list|()
operator|.
name|inStates
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isTableDisabled
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|TableName
operator|.
name|isMetaTableName
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
literal|false
argument_list|)
return|;
block|}
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|AsyncMetaTableAccessor
operator|.
name|getTableState
argument_list|(
name|metaTable
argument_list|,
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|state
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|state
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|state
operator|.
name|get
argument_list|()
operator|.
name|inStates
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isTableAvailable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|isTableAvailable
argument_list|(
name|tableName
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isTableAvailable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|splitKeys
argument_list|,
literal|"splitKeys is null. If you don't specify splitKeys,"
operator|+
literal|" use isTableAvailable(TableName) instead"
argument_list|)
expr_stmt|;
return|return
name|isTableAvailable
argument_list|(
name|tableName
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|splitKeys
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isTableAvailable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Optional
argument_list|<
name|byte
index|[]
index|[]
argument_list|>
name|splitKeys
parameter_list|)
block|{
if|if
condition|(
name|TableName
operator|.
name|isMetaTableName
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
return|return
name|connection
operator|.
name|registry
operator|.
name|getMetaRegionLocation
argument_list|()
operator|.
name|thenApply
argument_list|(
name|locs
lambda|->
name|Stream
operator|.
name|of
argument_list|(
name|locs
operator|.
name|getRegionLocations
argument_list|()
argument_list|)
operator|.
name|allMatch
argument_list|(
name|loc
lambda|->
name|loc
operator|!=
literal|null
operator|&&
name|loc
operator|.
name|getServerName
argument_list|()
operator|!=
literal|null
argument_list|)
argument_list|)
return|;
block|}
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|enabled
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addListener
argument_list|(
name|AsyncMetaTableAccessor
operator|.
name|getTableHRegionLocations
argument_list|(
name|metaTable
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|locations
parameter_list|,
name|error1
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error1
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error1
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|notDeployedRegions
init|=
name|locations
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|loc
lambda|->
name|loc
operator|.
name|getServerName
argument_list|()
operator|==
literal|null
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|notDeployedRegions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" has "
operator|+
name|notDeployedRegions
operator|.
name|size
argument_list|()
operator|+
literal|" regions"
argument_list|)
expr_stmt|;
block|}
name|future
operator|.
name|complete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|Optional
argument_list|<
name|Boolean
argument_list|>
name|available
init|=
name|splitKeys
operator|.
name|map
argument_list|(
name|keys
lambda|->
name|compareRegionsWithSplitKeys
argument_list|(
name|locations
argument_list|,
name|keys
argument_list|)
argument_list|)
decl_stmt|;
name|future
operator|.
name|complete
argument_list|(
name|available
operator|.
name|orElse
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|private
name|boolean
name|compareRegionsWithSplitKeys
parameter_list|(
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|locations
parameter_list|,
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
block|{
name|int
name|regionCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HRegionLocation
name|location
range|:
name|locations
control|)
block|{
name|RegionInfo
name|info
init|=
name|location
operator|.
name|getRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
condition|)
block|{
name|regionCount
operator|++
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|byte
index|[]
name|splitKey
range|:
name|splitKeys
control|)
block|{
comment|// Just check if the splitkey is available
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKey
argument_list|)
condition|)
block|{
name|regionCount
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|regionCount
operator|==
name|splitKeys
operator|.
name|length
operator|+
literal|1
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|addColumnFamily
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ColumnFamilyDescriptor
name|columnFamily
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|AddColumnRequest
operator|,
name|AddColumnResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildAddColumnRequest
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|addColumn
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|AddColumnFamilyProcedureBiConsumer
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteColumnFamily
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|DeleteColumnRequest
operator|,
name|DeleteColumnResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildDeleteColumnRequest
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|deleteColumn
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|DeleteColumnFamilyProcedureBiConsumer
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|modifyColumnFamily
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ColumnFamilyDescriptor
name|columnFamily
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|ModifyColumnRequest
operator|,
name|ModifyColumnResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildModifyColumnRequest
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|modifyColumn
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|ModifyColumnFamilyProcedureBiConsumer
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createNamespace
parameter_list|(
name|NamespaceDescriptor
name|descriptor
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|CreateNamespaceRequest
operator|,
name|CreateNamespaceResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildCreateNamespaceRequest
argument_list|(
name|descriptor
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|createNamespace
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|CreateNamespaceProcedureBiConsumer
argument_list|(
name|descriptor
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|modifyNamespace
parameter_list|(
name|NamespaceDescriptor
name|descriptor
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|ModifyNamespaceRequest
operator|,
name|ModifyNamespaceResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildModifyNamespaceRequest
argument_list|(
name|descriptor
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|modifyNamespace
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|ModifyNamespaceProcedureBiConsumer
argument_list|(
name|descriptor
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteNamespace
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|DeleteNamespaceRequest
operator|,
name|DeleteNamespaceResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildDeleteNamespaceRequest
argument_list|(
name|name
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|deleteNamespace
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|DeleteNamespaceProcedureBiConsumer
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|getNamespaceDescriptor
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|NamespaceDescriptor
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetNamespaceDescriptorRequest
argument_list|,
name|GetNamespaceDescriptorResponse
argument_list|,
name|NamespaceDescriptor
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildGetNamespaceDescriptorRequest
argument_list|(
name|name
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getNamespaceDescriptor
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|ProtobufUtil
operator|.
name|toNamespaceDescriptor
argument_list|(
name|resp
operator|.
name|getNamespaceDescriptor
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|NamespaceDescriptor
argument_list|>
argument_list|>
name|listNamespaceDescriptors
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|List
argument_list|<
name|NamespaceDescriptor
argument_list|>
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<ListNamespaceDescriptorsRequest
argument_list|,
name|ListNamespaceDescriptorsResponse
argument_list|,
name|List
argument_list|<
name|NamespaceDescriptor
argument_list|>
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|ListNamespaceDescriptorsRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|listNamespaceDescriptors
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|ProtobufUtil
operator|.
name|toNamespaceDescriptorList
argument_list|(
name|resp
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|getRegions
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|List
argument_list|<
name|RegionInfo
argument_list|>
operator|>
name|newAdminCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetOnlineRegionRequest
argument_list|,
name|GetOnlineRegionResponse
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
operator|>
name|adminCall
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildGetOnlineRegionRequest
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getOnlineRegion
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|ProtobufUtil
operator|.
name|getRegionInfos
argument_list|(
name|resp
argument_list|)
argument_list|)
argument_list|)
operator|.
name|serverName
argument_list|(
name|serverName
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|getRegions
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
return|return
name|connection
operator|.
name|getLocator
argument_list|()
operator|.
name|getRegionLocation
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|operationTimeoutNs
argument_list|)
operator|.
name|thenApply
argument_list|(
name|loc
lambda|->
name|Collections
operator|.
name|singletonList
argument_list|(
name|loc
operator|.
name|getRegion
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|AsyncMetaTableAccessor
operator|.
name|getTableHRegionLocations
argument_list|(
name|metaTable
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|thenApply
argument_list|(
name|locs
lambda|->
name|locs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|loc
lambda|->
name|loc
operator|.
name|getRegion
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|flush
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|exists
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|exists
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addListener
argument_list|(
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|tableEnabled
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|tableEnabled
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|TableNotEnabledException
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addListener
argument_list|(
name|execProcedure
argument_list|(
name|FLUSH_TABLE_PROCEDURE_SIGNATURE
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err3
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err3
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|flushRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getRegionLocation
argument_list|(
name|regionName
argument_list|)
argument_list|,
parameter_list|(
name|location
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|ServerName
name|serverName
init|=
name|location
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|NoServerForRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|flush
argument_list|(
name|serverName
argument_list|,
name|location
operator|.
name|getRegion
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|flush
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|RegionInfo
name|regionInfo
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newAdminCaller
argument_list|()
operator|.
name|serverName
argument_list|(
name|serverName
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<FlushRegionRequest
argument_list|,
name|FlushRegionResponse
argument_list|,
name|Void
operator|>
name|adminCall
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildFlushRegionRequest
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|flushRegion
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|flushRegionServer
parameter_list|(
name|ServerName
name|sn
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getRegions
argument_list|(
name|sn
argument_list|)
argument_list|,
parameter_list|(
name|hRegionInfos
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|compactFutures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hRegionInfos
operator|!=
literal|null
condition|)
block|{
name|hRegionInfos
operator|.
name|forEach
argument_list|(
name|region
lambda|->
name|compactFutures
operator|.
name|add
argument_list|(
name|flush
argument_list|(
name|sn
argument_list|,
name|region
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addListener
argument_list|(
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|compactFutures
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
argument_list|<
name|?
argument_list|>
index|[
name|compactFutures
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|compact
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|CompactType
name|compactType
parameter_list|)
block|{
return|return
name|compact
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|compactType
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|compact
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|,
name|CompactType
name|compactType
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|columnFamily
argument_list|,
literal|"columnFamily is null. "
operator|+
literal|"If you don't specify a columnFamily, use compact(TableName) instead"
argument_list|)
expr_stmt|;
return|return
name|compact
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|,
literal|false
argument_list|,
name|compactType
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|compactRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
return|return
name|compactRegion
argument_list|(
name|regionName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|compactRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|columnFamily
argument_list|,
literal|"columnFamily is null."
operator|+
literal|" If you don't specify a columnFamily, use compactRegion(regionName) instead"
argument_list|)
expr_stmt|;
return|return
name|compactRegion
argument_list|(
name|regionName
argument_list|,
name|columnFamily
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|majorCompact
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|CompactType
name|compactType
parameter_list|)
block|{
return|return
name|compact
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|compactType
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|majorCompact
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|,
name|CompactType
name|compactType
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|columnFamily
argument_list|,
literal|"columnFamily is null."
operator|+
literal|"If you don't specify a columnFamily, use compact(TableName) instead"
argument_list|)
expr_stmt|;
return|return
name|compact
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|,
literal|true
argument_list|,
name|compactType
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|majorCompactRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
return|return
name|compactRegion
argument_list|(
name|regionName
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|majorCompactRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|columnFamily
argument_list|,
literal|"columnFamily is null."
operator|+
literal|" If you don't specify a columnFamily, use majorCompactRegion(regionName) instead"
argument_list|)
expr_stmt|;
return|return
name|compactRegion
argument_list|(
name|regionName
argument_list|,
name|columnFamily
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|compactRegionServer
parameter_list|(
name|ServerName
name|sn
parameter_list|)
block|{
return|return
name|compactRegionServer
argument_list|(
name|sn
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|majorCompactRegionServer
parameter_list|(
name|ServerName
name|sn
parameter_list|)
block|{
return|return
name|compactRegionServer
argument_list|(
name|sn
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|compactRegionServer
parameter_list|(
name|ServerName
name|sn
parameter_list|,
name|boolean
name|major
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getRegions
argument_list|(
name|sn
argument_list|)
argument_list|,
parameter_list|(
name|hRegionInfos
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|compactFutures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hRegionInfos
operator|!=
literal|null
condition|)
block|{
name|hRegionInfos
operator|.
name|forEach
argument_list|(
name|region
lambda|->
name|compactFutures
operator|.
name|add
argument_list|(
name|compact
argument_list|(
name|sn
argument_list|,
name|region
argument_list|,
name|major
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addListener
argument_list|(
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|compactFutures
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
argument_list|<
name|?
argument_list|>
index|[
name|compactFutures
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|compactRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|,
name|boolean
name|major
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getRegionLocation
argument_list|(
name|regionName
argument_list|)
argument_list|,
parameter_list|(
name|location
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|ServerName
name|serverName
init|=
name|location
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|NoServerForRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|compact
argument_list|(
name|location
operator|.
name|getServerName
argument_list|()
argument_list|,
name|location
operator|.
name|getRegion
argument_list|()
argument_list|,
name|major
argument_list|,
name|columnFamily
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_comment
comment|/**    * List all region locations for the specific table.    */
end_comment

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|>
name|getTableHRegionLocations
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
comment|// For meta table, we use zk to fetch all locations.
name|AsyncRegistry
name|registry
init|=
name|AsyncRegistryFactory
operator|.
name|getRegistry
argument_list|(
name|connection
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|addListener
argument_list|(
name|registry
operator|.
name|getMetaRegionLocation
argument_list|()
argument_list|,
parameter_list|(
name|metaRegions
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|metaRegions
operator|==
literal|null
operator|||
name|metaRegions
operator|.
name|isEmpty
argument_list|()
operator|||
name|metaRegions
operator|.
name|getDefaultRegionLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"meta region does not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|metaRegions
operator|.
name|getDefaultRegionLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// close the registry.
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|registry
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
else|else
block|{
comment|// For non-meta table, we fetch all locations by scanning hbase:meta table
return|return
name|AsyncMetaTableAccessor
operator|.
name|getTableHRegionLocations
argument_list|(
name|metaTable
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
block|}
end_function

begin_comment
comment|/**    * Compact column family of a table, Asynchronous operation even if CompletableFuture.get()    */
end_comment

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|compact
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|,
name|boolean
name|major
parameter_list|,
name|CompactType
name|compactType
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|compactType
condition|)
block|{
case|case
name|MOB
case|:
name|addListener
argument_list|(
name|connection
operator|.
name|registry
operator|.
name|getMasterAddress
argument_list|()
argument_list|,
parameter_list|(
name|serverName
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|RegionInfo
name|regionInfo
init|=
name|RegionInfo
operator|.
name|createMobRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|addListener
argument_list|(
name|compact
argument_list|(
name|serverName
argument_list|,
name|regionInfo
argument_list|,
name|major
argument_list|,
name|columnFamily
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
name|NORMAL
case|:
name|addListener
argument_list|(
name|getTableHRegionLocations
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|locations
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|CompletableFuture
argument_list|<
name|?
argument_list|>
index|[]
name|compactFutures
init|=
name|locations
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|l
lambda|->
name|l
operator|.
name|getRegion
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|filter
argument_list|(
name|l
lambda|->
operator|!
name|l
operator|.
name|getRegion
argument_list|()
operator|.
name|isOffline
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|l
lambda|->
name|l
operator|.
name|getServerName
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|map
argument_list|(
name|l
lambda|->
name|compact
argument_list|(
name|l
operator|.
name|getServerName
argument_list|()
argument_list|,
name|l
operator|.
name|getRegion
argument_list|()
argument_list|,
name|major
argument_list|,
name|columnFamily
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|CompletableFuture
argument_list|<
name|?
argument_list|>
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
comment|// future complete unless all of the compact futures are completed.
name|addListener
argument_list|(
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|compactFutures
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown compactType: "
operator|+
name|compactType
argument_list|)
throw|;
block|}
return|return
name|future
return|;
block|}
end_function

begin_comment
comment|/**    * Compact the region at specific region server.    */
end_comment

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|compact
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|,
specifier|final
name|RegionInfo
name|hri
parameter_list|,
specifier|final
name|boolean
name|major
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newAdminCaller
argument_list|()
operator|.
name|serverName
argument_list|(
name|sn
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<CompactRegionRequest
argument_list|,
name|CompactRegionResponse
argument_list|,
name|Void
operator|>
name|adminCall
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildCompactRegionRequest
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|major
argument_list|,
name|columnFamily
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|compactRegion
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
name|byte
index|[]
name|toEncodeRegionName
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
try|try
block|{
return|return
name|RegionInfo
operator|.
name|isEncodedRegionName
argument_list|(
name|regionName
argument_list|)
condition|?
name|regionName
else|:
name|Bytes
operator|.
name|toBytes
argument_list|(
name|RegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|regionName
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|regionName
return|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|checkAndGetTableName
parameter_list|(
name|byte
index|[]
name|encodeRegionName
parameter_list|,
name|AtomicReference
argument_list|<
name|TableName
argument_list|>
name|tableName
parameter_list|,
name|CompletableFuture
argument_list|<
name|TableName
argument_list|>
name|result
parameter_list|)
block|{
name|addListener
argument_list|(
name|getRegionLocation
argument_list|(
name|encodeRegionName
argument_list|)
argument_list|,
parameter_list|(
name|location
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|RegionInfo
name|regionInfo
init|=
name|location
operator|.
name|getRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionInfo
operator|.
name|getReplicaId
argument_list|()
operator|!=
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
name|result
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't invoke merge on non-default regions directly"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|tableName
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|regionInfo
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|tableName
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|regionInfo
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
comment|// tables of this two region should be same.
name|result
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot merge regions from two different tables "
operator|+
name|tableName
operator|.
name|get
argument_list|()
operator|+
literal|" and "
operator|+
name|regionInfo
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|complete
argument_list|(
name|tableName
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|TableName
argument_list|>
name|checkRegionsAndGetTableName
parameter_list|(
name|byte
index|[]
name|encodeRegionNameA
parameter_list|,
name|byte
index|[]
name|encodeRegionNameB
parameter_list|)
block|{
name|AtomicReference
argument_list|<
name|TableName
argument_list|>
name|tableNameRef
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|CompletableFuture
argument_list|<
name|TableName
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|checkAndGetTableName
argument_list|(
name|encodeRegionNameA
argument_list|,
name|tableNameRef
argument_list|,
name|future
argument_list|)
expr_stmt|;
name|checkAndGetTableName
argument_list|(
name|encodeRegionNameB
argument_list|,
name|tableNameRef
argument_list|,
name|future
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|mergeSwitch
parameter_list|(
name|boolean
name|on
parameter_list|)
block|{
return|return
name|setSplitOrMergeOn
argument_list|(
name|on
argument_list|,
name|MasterSwitchType
operator|.
name|MERGE
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isMergeEnabled
parameter_list|()
block|{
return|return
name|isSplitOrMergeOn
argument_list|(
name|MasterSwitchType
operator|.
name|MERGE
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|splitSwitch
parameter_list|(
name|boolean
name|on
parameter_list|)
block|{
return|return
name|setSplitOrMergeOn
argument_list|(
name|on
argument_list|,
name|MasterSwitchType
operator|.
name|SPLIT
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isSplitEnabled
parameter_list|()
block|{
return|return
name|isSplitOrMergeOn
argument_list|(
name|MasterSwitchType
operator|.
name|SPLIT
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|setSplitOrMergeOn
parameter_list|(
name|boolean
name|on
parameter_list|,
name|MasterSwitchType
name|switchType
parameter_list|)
block|{
name|SetSplitOrMergeEnabledRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildSetSplitOrMergeEnabledRequest
argument_list|(
name|on
argument_list|,
literal|false
argument_list|,
name|switchType
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<SetSplitOrMergeEnabledRequest
argument_list|,
name|SetSplitOrMergeEnabledResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|request
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|setSplitOrMergeEnabled
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getPrevValueList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isSplitOrMergeOn
parameter_list|(
name|MasterSwitchType
name|switchType
parameter_list|)
block|{
name|IsSplitOrMergeEnabledRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildIsSplitOrMergeEnabledRequest
argument_list|(
name|switchType
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<IsSplitOrMergeEnabledRequest
argument_list|,
name|IsSplitOrMergeEnabledResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|request
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getEnabled
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|mergeRegions
parameter_list|(
name|byte
index|[]
name|nameOfRegionA
parameter_list|,
name|byte
index|[]
name|nameOfRegionB
parameter_list|,
name|boolean
name|forcible
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|encodeRegionNameA
init|=
name|toEncodeRegionName
argument_list|(
name|nameOfRegionA
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|encodeRegionNameB
init|=
name|toEncodeRegionName
argument_list|(
name|nameOfRegionB
argument_list|)
decl_stmt|;
name|addListener
argument_list|(
name|checkRegionsAndGetTableName
argument_list|(
name|encodeRegionNameA
argument_list|,
name|encodeRegionNameB
argument_list|)
argument_list|,
parameter_list|(
name|tableName
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|MergeTableRegionsRequest
name|request
init|=
literal|null
decl_stmt|;
try|try
block|{
name|request
operator|=
name|RequestConverter
operator|.
name|buildMergeTableRegionsRequest
argument_list|(
operator|new
name|byte
index|[]
index|[]
block|{
name|encodeRegionNameA
operator|,
name|encodeRegionNameB
block|}
operator|,
name|forcible
operator|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
operator|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
end_catch

begin_expr_stmt
name|addListener
argument_list|(
name|this
operator|.
expr|<
name|MergeTableRegionsRequest
argument_list|,
name|MergeTableRegionsResponse
operator|>
name|procedureCall
argument_list|(
name|request
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|mergeTableRegions
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|MergeTableRegionProcedureBiConsumer
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
lambda|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|future
return|;
end_return

begin_function
unit|}    @
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|split
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|exist
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|exist
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|metaTable
operator|.
name|scanAll
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|setReadType
argument_list|(
name|ReadType
operator|.
name|PREAD
argument_list|)
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|withStartRow
argument_list|(
name|MetaTableAccessor
operator|.
name|getTableStartRowForMeta
argument_list|(
name|tableName
argument_list|,
name|QueryType
operator|.
name|REGION
argument_list|)
argument_list|)
operator|.
name|withStopRow
argument_list|(
name|MetaTableAccessor
operator|.
name|getTableStopRowForMeta
argument_list|(
name|tableName
argument_list|,
name|QueryType
operator|.
name|REGION
argument_list|)
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|results
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|splitFutures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|results
control|)
block|{
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
operator|||
name|MetaTableAccessor
operator|.
name|getRegionInfo
argument_list|(
name|r
argument_list|)
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|RegionLocations
name|rl
init|=
name|MetaTableAccessor
operator|.
name|getRegionLocations
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|rl
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HRegionLocation
name|h
range|:
name|rl
operator|.
name|getRegionLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|h
operator|!=
literal|null
operator|&&
name|h
operator|.
name|getServerName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RegionInfo
name|hri
init|=
name|h
operator|.
name|getRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|hri
operator|==
literal|null
operator|||
name|hri
operator|.
name|isSplitParent
argument_list|()
operator|||
name|hri
operator|.
name|getReplicaId
argument_list|()
operator|!=
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
continue|continue;
block|}
name|splitFutures
operator|.
name|add
argument_list|(
name|split
argument_list|(
name|hri
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|addListener
argument_list|(
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|splitFutures
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
argument_list|<
name|?
argument_list|>
index|[
name|splitFutures
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|exception
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|exception
argument_list|)
expr_stmt|;
return|return;
block|}
name|future
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|split
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|splitPoint
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|result
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|splitPoint
operator|==
literal|null
condition|)
block|{
return|return
name|failedFuture
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"splitPoint can not be null."
argument_list|)
argument_list|)
return|;
block|}
name|addListener
argument_list|(
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
operator|.
name|getRegionLocation
argument_list|(
name|splitPoint
argument_list|)
argument_list|,
parameter_list|(
name|loc
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|loc
operator|==
literal|null
operator|||
name|loc
operator|.
name|getRegion
argument_list|()
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Region does not found: rowKey="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|splitPoint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addListener
argument_list|(
name|splitRegion
argument_list|(
name|loc
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|splitPoint
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|splitRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getRegionLocation
argument_list|(
name|regionName
argument_list|)
argument_list|,
parameter_list|(
name|location
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
name|RegionInfo
name|regionInfo
init|=
name|location
operator|.
name|getRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionInfo
operator|.
name|getReplicaId
argument_list|()
operator|!=
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't split replicas directly. "
operator|+
literal|"Replicas are auto-split when their primary is split."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|ServerName
name|serverName
init|=
name|location
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|NoServerForRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|split
argument_list|(
name|regionInfo
argument_list|,
literal|null
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|splitRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|byte
index|[]
name|splitPoint
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|splitPoint
argument_list|,
literal|"splitPoint is null. If you don't specify a splitPoint, use splitRegion(byte[]) instead"
argument_list|)
expr_stmt|;
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getRegionLocation
argument_list|(
name|regionName
argument_list|)
argument_list|,
parameter_list|(
name|location
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
name|RegionInfo
name|regionInfo
init|=
name|location
operator|.
name|getRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionInfo
operator|.
name|getReplicaId
argument_list|()
operator|!=
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't split replicas directly. "
operator|+
literal|"Replicas are auto-split when their primary is split."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|ServerName
name|serverName
init|=
name|location
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|NoServerForRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
operator|!=
literal|null
operator|&&
name|Bytes
operator|.
name|compareTo
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitPoint
argument_list|)
operator|==
literal|0
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"should not give a splitkey which equals to startkey!"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|split
argument_list|(
name|regionInfo
argument_list|,
name|splitPoint
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|split
parameter_list|(
specifier|final
name|RegionInfo
name|hri
parameter_list|,
name|byte
index|[]
name|splitPoint
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|TableName
name|tableName
init|=
name|hri
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|SplitTableRegionRequest
name|request
init|=
literal|null
decl_stmt|;
try|try
block|{
name|request
operator|=
name|RequestConverter
operator|.
name|buildSplitTableRegionRequest
argument_list|(
name|hri
argument_list|,
name|splitPoint
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
name|addListener
argument_list|(
name|this
operator|.
expr|<
name|SplitTableRegionRequest
argument_list|,
name|SplitTableRegionResponse
operator|>
name|procedureCall
argument_list|(
name|request
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|splitRegion
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|SplitTableRegionProcedureBiConsumer
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
lambda|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|future
return|;
end_return

begin_function
unit|}    @
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|assign
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
argument_list|,
parameter_list|(
name|regionInfo
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|this
operator|.
expr|<
name|Void
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
operator|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<AssignRegionRequest
operator|,
name|AssignRegionResponse
operator|,
name|Void
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildAssignRegionRequest
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|assignRegion
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
operator|)
argument_list|)
operator|.
name|call
argument_list|()
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
lambda|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|future
return|;
end_return

begin_function
unit|}    @
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|unassign
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|boolean
name|forcible
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
argument_list|,
parameter_list|(
name|regionInfo
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|this
operator|.
expr|<
name|Void
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
operator|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<UnassignRegionRequest
operator|,
name|UnassignRegionResponse
operator|,
name|Void
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildUnassignRegionRequest
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|forcible
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|unassignRegion
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
operator|)
argument_list|)
operator|.
name|call
argument_list|()
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
lambda|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|future
return|;
end_return

begin_function
unit|}    @
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|offline
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
argument_list|,
parameter_list|(
name|regionInfo
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|this
operator|.
expr|<
name|Void
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
operator|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<OfflineRegionRequest
operator|,
name|OfflineRegionResponse
operator|,
name|Void
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildOfflineRegionRequest
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|offlineRegion
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
operator|)
argument_list|)
operator|.
name|call
argument_list|()
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
lambda|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|future
return|;
end_return

begin_function
unit|}    @
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|move
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
argument_list|,
parameter_list|(
name|regionInfo
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|moveRegion
argument_list|(
name|RequestConverter
operator|.
name|buildMoveRegionRequest
argument_list|(
name|regionInfo
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|move
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|ServerName
name|destServerName
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|destServerName
argument_list|,
literal|"destServerName is null. If you don't specify a destServerName, use move(byte[]) instead"
argument_list|)
expr_stmt|;
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
argument_list|,
parameter_list|(
name|regionInfo
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|moveRegion
argument_list|(
name|RequestConverter
operator|.
name|buildMoveRegionRequest
argument_list|(
name|regionInfo
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|destServerName
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|moveRegion
parameter_list|(
name|MoveRegionRequest
name|request
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<MoveRegionRequest
argument_list|,
name|MoveRegionResponse
argument_list|,
name|Void
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|request
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|moveRegion
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|setQuota
parameter_list|(
name|QuotaSettings
name|quota
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<SetQuotaRequest
argument_list|,
name|SetQuotaResponse
argument_list|,
name|Void
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|QuotaSettings
operator|.
name|buildSetQuotaRequestProto
argument_list|(
name|quota
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|setQuota
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
literal|null
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|QuotaSettings
argument_list|>
argument_list|>
name|getQuota
parameter_list|(
name|QuotaFilter
name|filter
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|QuotaSettings
argument_list|>
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|Scan
name|scan
init|=
name|QuotaTableUtil
operator|.
name|makeScan
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|this
operator|.
name|connection
operator|.
name|getTableBuilder
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|scan
argument_list|(
name|scan
argument_list|,
operator|new
name|AdvancedScanResultConsumer
argument_list|()
block|{
name|List
argument_list|<
name|QuotaSettings
argument_list|>
name|settings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onNext
parameter_list|(
name|Result
index|[]
name|results
parameter_list|,
name|ScanController
name|controller
parameter_list|)
block|{
for|for
control|(
name|Result
name|result
range|:
name|results
control|)
block|{
try|try
block|{
name|QuotaTableUtil
operator|.
name|parseResultToCollection
argument_list|(
name|result
argument_list|,
name|settings
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|controller
operator|.
name|terminate
argument_list|()
expr_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onError
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onComplete
parameter_list|()
block|{
name|future
operator|.
name|complete
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|addReplicationPeer
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|,
name|boolean
name|enabled
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|AddReplicationPeerRequest
operator|,
name|AddReplicationPeerResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildAddReplicationPeerRequest
argument_list|(
name|peerId
argument_list|,
name|peerConfig
argument_list|,
name|enabled
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|addReplicationPeer
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|ReplicationProcedureBiConsumer
argument_list|(
name|peerId
argument_list|,
parameter_list|()
lambda|->
literal|"ADD_REPLICATION_PEER"
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|removeReplicationPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|RemoveReplicationPeerRequest
operator|,
name|RemoveReplicationPeerResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildRemoveReplicationPeerRequest
argument_list|(
name|peerId
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|removeReplicationPeer
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|ReplicationProcedureBiConsumer
argument_list|(
name|peerId
argument_list|,
parameter_list|()
lambda|->
literal|"REMOVE_REPLICATION_PEER"
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|enableReplicationPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|EnableReplicationPeerRequest
operator|,
name|EnableReplicationPeerResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildEnableReplicationPeerRequest
argument_list|(
name|peerId
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|enableReplicationPeer
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|ReplicationProcedureBiConsumer
argument_list|(
name|peerId
argument_list|,
parameter_list|()
lambda|->
literal|"ENABLE_REPLICATION_PEER"
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|disableReplicationPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|DisableReplicationPeerRequest
operator|,
name|DisableReplicationPeerResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildDisableReplicationPeerRequest
argument_list|(
name|peerId
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|disableReplicationPeer
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|ReplicationProcedureBiConsumer
argument_list|(
name|peerId
argument_list|,
parameter_list|()
lambda|->
literal|"DISABLE_REPLICATION_PEER"
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|ReplicationPeerConfig
argument_list|>
name|getReplicationPeerConfig
parameter_list|(
name|String
name|peerId
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|ReplicationPeerConfig
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetReplicationPeerConfigRequest
argument_list|,
name|GetReplicationPeerConfigResponse
argument_list|,
name|ReplicationPeerConfig
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildGetReplicationPeerConfigRequest
argument_list|(
name|peerId
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getReplicationPeerConfig
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|ReplicationPeerConfigUtil
operator|.
name|convert
argument_list|(
name|resp
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|updateReplicationPeerConfig
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|UpdateReplicationPeerConfigRequest
operator|,
name|UpdateReplicationPeerConfigResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildUpdateReplicationPeerConfigRequest
argument_list|(
name|peerId
argument_list|,
name|peerConfig
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|ReplicationProcedureBiConsumer
argument_list|(
name|peerId
argument_list|,
parameter_list|()
lambda|->
literal|"UPDATE_REPLICATION_PEER_CONFIG"
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|transitReplicationPeerSyncReplicationState
parameter_list|(
name|String
name|peerId
parameter_list|,
name|SyncReplicationState
name|clusterState
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|TransitReplicationPeerSyncReplicationStateRequest
operator|,
name|TransitReplicationPeerSyncReplicationStateResponse
operator|>
name|procedureCall
argument_list|(
name|RequestConverter
operator|.
name|buildTransitReplicationPeerSyncReplicationStateRequest
argument_list|(
name|peerId
argument_list|,
name|clusterState
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|,
operator|new
name|ReplicationProcedureBiConsumer
argument_list|(
name|peerId
argument_list|,
parameter_list|()
lambda|->
literal|"TRANSIT_REPLICATION_PEER_SYNCHRONOUS_REPLICATION_STATE"
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|appendReplicationPeerTableCFs
parameter_list|(
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
parameter_list|)
block|{
if|if
condition|(
name|tableCfs
operator|==
literal|null
condition|)
block|{
return|return
name|failedFuture
argument_list|(
operator|new
name|ReplicationException
argument_list|(
literal|"tableCfs is null"
argument_list|)
argument_list|)
return|;
block|}
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getReplicationPeerConfig
argument_list|(
name|id
argument_list|)
argument_list|,
parameter_list|(
name|peerConfig
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|completeExceptionally
argument_list|(
name|future
argument_list|,
name|error
argument_list|)
condition|)
block|{
name|ReplicationPeerConfig
name|newPeerConfig
init|=
name|ReplicationPeerConfigUtil
operator|.
name|appendTableCFsToReplicationPeerConfig
argument_list|(
name|tableCfs
argument_list|,
name|peerConfig
argument_list|)
decl_stmt|;
name|addListener
argument_list|(
name|updateReplicationPeerConfig
argument_list|(
name|id
argument_list|,
name|newPeerConfig
argument_list|)
argument_list|,
parameter_list|(
name|result
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|completeExceptionally
argument_list|(
name|future
argument_list|,
name|error
argument_list|)
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|removeReplicationPeerTableCFs
parameter_list|(
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
parameter_list|)
block|{
if|if
condition|(
name|tableCfs
operator|==
literal|null
condition|)
block|{
return|return
name|failedFuture
argument_list|(
operator|new
name|ReplicationException
argument_list|(
literal|"tableCfs is null"
argument_list|)
argument_list|)
return|;
block|}
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getReplicationPeerConfig
argument_list|(
name|id
argument_list|)
argument_list|,
parameter_list|(
name|peerConfig
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|completeExceptionally
argument_list|(
name|future
argument_list|,
name|error
argument_list|)
condition|)
block|{
name|ReplicationPeerConfig
name|newPeerConfig
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newPeerConfig
operator|=
name|ReplicationPeerConfigUtil
operator|.
name|removeTableCFsFromReplicationPeerConfig
argument_list|(
name|tableCfs
argument_list|,
name|peerConfig
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|updateReplicationPeerConfig
argument_list|(
name|id
argument_list|,
name|newPeerConfig
argument_list|)
argument_list|,
parameter_list|(
name|result
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|completeExceptionally
argument_list|(
name|future
argument_list|,
name|error
argument_list|)
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
argument_list|>
name|listReplicationPeers
parameter_list|()
block|{
return|return
name|listReplicationPeers
argument_list|(
name|RequestConverter
operator|.
name|buildListReplicationPeersRequest
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
argument_list|>
name|listReplicationPeers
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pattern
argument_list|,
literal|"pattern is null. If you don't specify a pattern, use listReplicationPeers() instead"
argument_list|)
expr_stmt|;
return|return
name|listReplicationPeers
argument_list|(
name|RequestConverter
operator|.
name|buildListReplicationPeersRequest
argument_list|(
name|pattern
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
argument_list|>
name|listReplicationPeers
parameter_list|(
name|ListReplicationPeersRequest
name|request
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<ListReplicationPeersRequest
argument_list|,
name|ListReplicationPeersResponse
argument_list|,
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|request
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|listReplicationPeers
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getPeerDescList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ReplicationPeerConfigUtil
operator|::
name|toReplicationPeerDescription
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|TableCFs
argument_list|>
argument_list|>
name|listReplicatedTableCFs
parameter_list|()
block|{
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|TableCFs
argument_list|>
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|TableCFs
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|listTableDescriptors
argument_list|()
argument_list|,
parameter_list|(
name|tables
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|completeExceptionally
argument_list|(
name|future
argument_list|,
name|error
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|TableCFs
argument_list|>
name|replicatedTableCFs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|tables
operator|.
name|forEach
argument_list|(
name|table
lambda|->
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|cfs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Stream
operator|.
name|of
argument_list|(
name|table
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|column
lambda|->
name|column
operator|.
name|getScope
argument_list|()
operator|!=
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
argument_list|)
operator|.
name|forEach
argument_list|(
name|column
lambda|->
block|{
name|cfs
operator|.
name|put
argument_list|(
name|column
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|column
operator|.
name|getScope
argument_list|()
argument_list|)
argument_list|;
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cfs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|replicatedTableCFs
operator|.
name|add
argument_list|(
operator|new
name|TableCFs
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|cfs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|future
operator|.
name|complete
argument_list|(
name|replicatedTableCFs
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|future
return|;
end_return

begin_function
unit|}    @
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|snapshot
parameter_list|(
name|SnapshotDescription
name|snapshotDesc
parameter_list|)
block|{
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|snapshot
init|=
name|ProtobufUtil
operator|.
name|createHBaseProtosSnapshotDesc
argument_list|(
name|snapshotDesc
argument_list|)
decl_stmt|;
try|try
block|{
name|ClientSnapshotDescriptionUtils
operator|.
name|assertSnapshotRequestIsValid
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
name|failedFuture
argument_list|(
name|e
argument_list|)
return|;
block|}
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|SnapshotRequest
name|request
init|=
name|SnapshotRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSnapshot
argument_list|(
name|snapshot
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|this
operator|.
expr|<
name|Long
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<SnapshotRequest
argument_list|,
name|SnapshotResponse
argument_list|,
name|Long
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|request
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|snapshot
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|resp
operator|.
name|getExpectedTimeout
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
argument_list|,
parameter_list|(
name|expectedTimeout
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
lambda|TimerTask pollingTask
init|=
operator|new
name|TimerTask
argument_list|(
argument_list|)
block|{
name|int
name|tries
operator|=
literal|0
block|;
name|long
name|startTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
block|;
name|long
name|endTime
operator|=
name|startTime
operator|+
name|expectedTimeout
block|;
name|long
name|maxPauseTime
operator|=
name|expectedTimeout
operator|/
name|maxAttempts
block|;            @
name|Override
specifier|public
name|void
name|run
argument_list|(
name|Timeout
name|timeout
argument_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|<
name|endTime
condition|)
block|{
name|addListener
argument_list|(
name|isSnapshotFinished
argument_list|(
name|snapshotDesc
argument_list|)
argument_list|,
parameter_list|(
name|done
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|done
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// retry again after pauseTime.
name|long
name|pauseTime
init|=
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|pauseNs
argument_list|)
argument_list|,
operator|++
name|tries
argument_list|)
decl_stmt|;
name|pauseTime
operator|=
name|Math
operator|.
name|min
argument_list|(
name|pauseTime
argument_list|,
name|maxPauseTime
argument_list|)
expr_stmt|;
name|AsyncConnectionImpl
operator|.
name|RETRY_TIMER
operator|.
name|newTimeout
argument_list|(
name|this
argument_list|,
name|pauseTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_block
unit|} else
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Snapshot '"
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
operator|+
literal|"' wasn't completed in expectedTime:"
operator|+
name|expectedTimeout
operator|+
literal|" ms"
argument_list|,
name|snapshotDesc
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_block

begin_empty_stmt
unit|}         }
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|AsyncConnectionImpl
operator|.
name|RETRY_TIMER
operator|.
name|newTimeout
argument_list|(
name|pollingTask
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
end_expr_stmt

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|future
return|;
end_return

begin_function
unit|}    @
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isSnapshotFinished
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<IsSnapshotDoneRequest
argument_list|,
name|IsSnapshotDoneResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|IsSnapshotDoneRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSnapshot
argument_list|(
name|ProtobufUtil
operator|.
name|createHBaseProtosSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|isSnapshotDone
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|resp
operator|.
name|getDone
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|restoreSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|)
block|{
name|boolean
name|takeFailSafeSnapshot
init|=
name|this
operator|.
name|connection
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|SNAPSHOT_RESTORE_TAKE_FAILSAFE_SNAPSHOT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_SNAPSHOT_RESTORE_TAKE_FAILSAFE_SNAPSHOT
argument_list|)
decl_stmt|;
return|return
name|restoreSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|takeFailSafeSnapshot
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|restoreSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|boolean
name|takeFailSafeSnapshot
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|listSnapshots
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|snapshotName
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|snapshotDescriptions
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|TableName
name|tableName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|snapshotDescriptions
operator|!=
literal|null
operator|&&
operator|!
name|snapshotDescriptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|SnapshotDescription
name|snap
range|:
name|snapshotDescriptions
control|)
block|{
if|if
condition|(
name|snap
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|snapshotName
argument_list|)
condition|)
block|{
name|tableName
operator|=
name|snap
operator|.
name|getTableName
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|RestoreSnapshotException
argument_list|(
literal|"Unable to find the table name for snapshot="
operator|+
name|snapshotName
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|TableName
name|finalTableName
init|=
name|tableName
decl_stmt|;
name|addListener
argument_list|(
name|tableExists
argument_list|(
name|finalTableName
argument_list|)
argument_list|,
parameter_list|(
name|exists
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|exists
condition|)
block|{
comment|// if table does not exist, then just clone snapshot into new table.
name|completeConditionalOnFuture
argument_list|(
name|future
argument_list|,
name|internalRestoreSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|finalTableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addListener
argument_list|(
name|isTableDisabled
argument_list|(
name|finalTableName
argument_list|)
argument_list|,
parameter_list|(
name|disabled
parameter_list|,
name|err4
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err4
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err4
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|disabled
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|TableNotDisabledException
argument_list|(
name|finalTableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|completeConditionalOnFuture
argument_list|(
name|future
argument_list|,
name|restoreSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|finalTableName
argument_list|,
name|takeFailSafeSnapshot
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|restoreSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|boolean
name|takeFailSafeSnapshot
parameter_list|)
block|{
if|if
condition|(
name|takeFailSafeSnapshot
condition|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Step.1 Take a snapshot of the current state
name|String
name|failSafeSnapshotSnapshotNameFormat
init|=
name|this
operator|.
name|connection
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|SNAPSHOT_RESTORE_FAILSAFE_NAME
argument_list|,
name|HConstants
operator|.
name|DEFAULT_SNAPSHOT_RESTORE_FAILSAFE_NAME
argument_list|)
decl_stmt|;
specifier|final
name|String
name|failSafeSnapshotSnapshotName
init|=
name|failSafeSnapshotSnapshotNameFormat
operator|.
name|replace
argument_list|(
literal|"{snapshot.name}"
argument_list|,
name|snapshotName
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{table.name}"
argument_list|,
name|tableName
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
name|TableName
operator|.
name|NAMESPACE_DELIM
argument_list|,
literal|'.'
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{restore.timestamp}"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Taking restore-failsafe snapshot: "
operator|+
name|failSafeSnapshotSnapshotName
argument_list|)
expr_stmt|;
name|addListener
argument_list|(
name|snapshot
argument_list|(
name|failSafeSnapshotSnapshotName
argument_list|,
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Step.2 Restore snapshot
name|addListener
argument_list|(
name|internalRestoreSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|void2
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
comment|// Step.3.a Something went wrong during the restore and try to rollback.
name|addListener
argument_list|(
name|internalRestoreSnapshot
argument_list|(
name|failSafeSnapshotSnapshotName
argument_list|,
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|void3
parameter_list|,
name|err3
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err3
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Restore snapshot="
operator|+
name|snapshotName
operator|+
literal|" failed. Rollback to snapshot="
operator|+
name|failSafeSnapshotSnapshotName
operator|+
literal|" succeeded."
decl_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|RestoreSnapshotException
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Step.3.b If the restore is succeeded, delete the pre-restore snapshot.
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting restore-failsafe snapshot: "
operator|+
name|failSafeSnapshotSnapshotName
argument_list|)
expr_stmt|;
name|addListener
argument_list|(
name|deleteSnapshot
argument_list|(
name|failSafeSnapshotSnapshotName
argument_list|)
argument_list|,
parameter_list|(
name|ret3
parameter_list|,
name|err3
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err3
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to remove the failsafe snapshot: "
operator|+
name|failSafeSnapshotSnapshotName
argument_list|,
name|err3
argument_list|)
expr_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|ret3
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
else|else
block|{
return|return
name|internalRestoreSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
block|}
end_function

begin_function
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|completeConditionalOnFuture
parameter_list|(
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|dependentFuture
parameter_list|,
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|parentFuture
parameter_list|)
block|{
name|addListener
argument_list|(
name|parentFuture
argument_list|,
parameter_list|(
name|res
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|dependentFuture
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dependentFuture
operator|.
name|complete
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|cloneSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|exists
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exists
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|TableExistsException
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|completeConditionalOnFuture
argument_list|(
name|future
argument_list|,
name|internalRestoreSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|internalRestoreSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|snapshot
init|=
name|SnapshotProtos
operator|.
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|snapshotName
argument_list|)
operator|.
name|setTable
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|ClientSnapshotDescriptionUtils
operator|.
name|assertSnapshotRequestIsValid
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
name|failedFuture
argument_list|(
name|e
argument_list|)
return|;
block|}
return|return
name|waitProcedureResult
argument_list|(
name|this
operator|.
expr|<
name|Long
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<RestoreSnapshotRequest
argument_list|,
name|RestoreSnapshotResponse
argument_list|,
name|Long
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RestoreSnapshotRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSnapshot
argument_list|(
name|snapshot
argument_list|)
operator|.
name|setNonceGroup
argument_list|(
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|)
operator|.
name|setNonce
argument_list|(
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|restoreSnapshot
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getProcId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
argument_list|>
name|listSnapshots
parameter_list|()
block|{
return|return
name|getCompletedSnapshots
argument_list|(
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
argument_list|>
name|listSnapshots
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pattern
argument_list|,
literal|"pattern is null. If you don't specify a pattern, use listSnapshots() instead"
argument_list|)
expr_stmt|;
return|return
name|getCompletedSnapshots
argument_list|(
name|pattern
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
argument_list|>
name|getCompletedSnapshots
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetCompletedSnapshotsRequest
argument_list|,
name|GetCompletedSnapshotsResponse
argument_list|,
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|GetCompletedSnapshotsRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getCompletedSnapshots
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|ProtobufUtil
operator|.
name|toSnapshotDescriptionList
argument_list|(
name|resp
argument_list|,
name|pattern
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
argument_list|>
name|listTableSnapshots
parameter_list|(
name|Pattern
name|tableNamePattern
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|tableNamePattern
argument_list|,
literal|"tableNamePattern is null."
operator|+
literal|" If you don't specify a tableNamePattern, use listSnapshots() instead"
argument_list|)
expr_stmt|;
return|return
name|getCompletedSnapshots
argument_list|(
name|tableNamePattern
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
argument_list|>
name|listTableSnapshots
parameter_list|(
name|Pattern
name|tableNamePattern
parameter_list|,
name|Pattern
name|snapshotNamePattern
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|tableNamePattern
argument_list|,
literal|"tableNamePattern is null."
operator|+
literal|" If you don't specify a tableNamePattern, use listSnapshots(Pattern) instead"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|snapshotNamePattern
argument_list|,
literal|"snapshotNamePattern is null."
operator|+
literal|" If you don't specify a snapshotNamePattern, use listTableSnapshots(Pattern) instead"
argument_list|)
expr_stmt|;
return|return
name|getCompletedSnapshots
argument_list|(
name|tableNamePattern
argument_list|,
name|snapshotNamePattern
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
argument_list|>
name|getCompletedSnapshots
parameter_list|(
name|Pattern
name|tableNamePattern
parameter_list|,
name|Pattern
name|snapshotNamePattern
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|listTableNames
argument_list|(
name|tableNamePattern
argument_list|,
literal|false
argument_list|)
argument_list|,
parameter_list|(
name|tableNames
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|tableNames
operator|==
literal|null
operator|||
name|tableNames
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|getCompletedSnapshots
argument_list|(
name|snapshotNamePattern
argument_list|)
argument_list|,
parameter_list|(
name|snapshotDescList
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|snapshotDescList
operator|==
literal|null
operator|||
name|snapshotDescList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|future
operator|.
name|complete
argument_list|(
name|snapshotDescList
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|snap
lambda|->
operator|(
name|snap
operator|!=
literal|null
operator|&&
name|tableNames
operator|.
name|contains
argument_list|(
name|snap
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|)
block|{
return|return
name|internalDeleteSnapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|snapshotName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteSnapshots
parameter_list|()
block|{
return|return
name|internalDeleteSnapshots
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteSnapshots
parameter_list|(
name|Pattern
name|snapshotNamePattern
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|snapshotNamePattern
argument_list|,
literal|"snapshotNamePattern is null."
operator|+
literal|" If you don't specify a snapshotNamePattern, use deleteSnapshots() instead"
argument_list|)
expr_stmt|;
return|return
name|internalDeleteSnapshots
argument_list|(
literal|null
argument_list|,
name|snapshotNamePattern
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteTableSnapshots
parameter_list|(
name|Pattern
name|tableNamePattern
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|tableNamePattern
argument_list|,
literal|"tableNamePattern is null."
operator|+
literal|" If you don't specify a tableNamePattern, use deleteSnapshots() instead"
argument_list|)
expr_stmt|;
return|return
name|internalDeleteSnapshots
argument_list|(
name|tableNamePattern
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|deleteTableSnapshots
parameter_list|(
name|Pattern
name|tableNamePattern
parameter_list|,
name|Pattern
name|snapshotNamePattern
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|tableNamePattern
argument_list|,
literal|"tableNamePattern is null."
operator|+
literal|" If you don't specify a tableNamePattern, use deleteSnapshots(Pattern) instead"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|snapshotNamePattern
argument_list|,
literal|"snapshotNamePattern is null."
operator|+
literal|" If you don't specify a snapshotNamePattern, use deleteSnapshots(Pattern) instead"
argument_list|)
expr_stmt|;
return|return
name|internalDeleteSnapshots
argument_list|(
name|tableNamePattern
argument_list|,
name|snapshotNamePattern
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|internalDeleteSnapshots
parameter_list|(
name|Pattern
name|tableNamePattern
parameter_list|,
name|Pattern
name|snapshotNamePattern
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
argument_list|>
name|listSnapshotsFuture
decl_stmt|;
if|if
condition|(
name|tableNamePattern
operator|==
literal|null
condition|)
block|{
name|listSnapshotsFuture
operator|=
name|getCompletedSnapshots
argument_list|(
name|snapshotNamePattern
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listSnapshotsFuture
operator|=
name|getCompletedSnapshots
argument_list|(
name|tableNamePattern
argument_list|,
name|snapshotNamePattern
argument_list|)
expr_stmt|;
block|}
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|listSnapshotsFuture
argument_list|,
operator|(
parameter_list|(
name|snapshotDescriptions
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|snapshotDescriptions
operator|==
literal|null
operator|||
name|snapshotDescriptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|snapshotDescriptions
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|internalDeleteSnapshot
argument_list|)
operator|.
name|toArray
argument_list|(
name|CompletableFuture
index|[]
operator|::
operator|new
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|v
parameter_list|,
name|e
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
operator|)
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|internalDeleteSnapshot
parameter_list|(
name|SnapshotDescription
name|snapshot
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<DeleteSnapshotRequest
argument_list|,
name|DeleteSnapshotResponse
argument_list|,
name|Void
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|DeleteSnapshotRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSnapshot
argument_list|(
name|ProtobufUtil
operator|.
name|createHBaseProtosSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|deleteSnapshot
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|execProcedure
parameter_list|(
name|String
name|signature
parameter_list|,
name|String
name|instance
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|ProcedureDescription
name|procDesc
init|=
name|ProtobufUtil
operator|.
name|buildProcedureDescription
argument_list|(
name|signature
argument_list|,
name|instance
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|addListener
argument_list|(
name|this
operator|.
expr|<
name|Long
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<ExecProcedureRequest
argument_list|,
name|ExecProcedureResponse
argument_list|,
name|Long
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|ExecProcedureRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcedure
argument_list|(
name|procDesc
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|execProcedure
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|resp
operator|.
name|getExpectedTimeout
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
argument_list|,
parameter_list|(
name|expectedTimeout
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
lambda|TimerTask pollingTask
init|=
operator|new
name|TimerTask
argument_list|(
argument_list|)
block|{
name|int
name|tries
operator|=
literal|0
block|;
name|long
name|startTime
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
block|;
name|long
name|endTime
operator|=
name|startTime
operator|+
name|expectedTimeout
block|;
name|long
name|maxPauseTime
operator|=
name|expectedTimeout
operator|/
name|maxAttempts
block|;            @
name|Override
specifier|public
name|void
name|run
argument_list|(
name|Timeout
name|timeout
argument_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|<
name|endTime
condition|)
block|{
name|addListener
argument_list|(
name|isProcedureFinished
argument_list|(
name|signature
argument_list|,
name|instance
argument_list|,
name|props
argument_list|)
argument_list|,
parameter_list|(
name|done
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|done
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// retry again after pauseTime.
name|long
name|pauseTime
init|=
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|pauseNs
argument_list|)
argument_list|,
operator|++
name|tries
argument_list|)
decl_stmt|;
name|pauseTime
operator|=
name|Math
operator|.
name|min
argument_list|(
name|pauseTime
argument_list|,
name|maxPauseTime
argument_list|)
expr_stmt|;
name|AsyncConnectionImpl
operator|.
name|RETRY_TIMER
operator|.
name|newTimeout
argument_list|(
name|this
argument_list|,
name|pauseTime
argument_list|,
name|TimeUnit
operator|.
name|MICROSECONDS
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_block
unit|} else
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Procedure '"
operator|+
name|signature
operator|+
literal|" : "
operator|+
name|instance
operator|+
literal|"' wasn't completed in expectedTime:"
operator|+
name|expectedTimeout
operator|+
literal|" ms"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_block

begin_empty_stmt
unit|}         }
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Queue the polling task into RETRY_TIMER to poll procedure state asynchronously.
end_comment

begin_expr_stmt
name|AsyncConnectionImpl
operator|.
name|RETRY_TIMER
operator|.
name|newTimeout
argument_list|(
name|pollingTask
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
end_expr_stmt

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|future
return|;
end_return

begin_function
unit|}    @
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|byte
index|[]
argument_list|>
name|execProcedureWithReturn
parameter_list|(
name|String
name|signature
parameter_list|,
name|String
name|instance
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
name|ProcedureDescription
name|proDesc
init|=
name|ProtobufUtil
operator|.
name|buildProcedureDescription
argument_list|(
name|signature
argument_list|,
name|instance
argument_list|,
name|props
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
expr|<
name|byte
index|[]
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<ExecProcedureRequest
argument_list|,
name|ExecProcedureResponse
argument_list|,
name|byte
index|[]
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|ExecProcedureRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcedure
argument_list|(
name|proDesc
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|execProcedureWithRet
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|resp
operator|.
name|hasReturnData
argument_list|()
condition|?
name|resp
operator|.
name|getReturnData
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isProcedureFinished
parameter_list|(
name|String
name|signature
parameter_list|,
name|String
name|instance
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
name|ProcedureDescription
name|proDesc
init|=
name|ProtobufUtil
operator|.
name|buildProcedureDescription
argument_list|(
name|signature
argument_list|,
name|instance
argument_list|,
name|props
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<IsProcedureDoneRequest
argument_list|,
name|IsProcedureDoneResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|IsProcedureDoneRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcedure
argument_list|(
name|proDesc
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|isProcedureDone
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|resp
operator|.
name|getDone
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|abortProcedure
parameter_list|(
name|long
name|procId
parameter_list|,
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<AbortProcedureRequest
argument_list|,
name|AbortProcedureResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|AbortProcedureRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|abortProcedure
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|resp
operator|.
name|getIsProcedureAborted
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|String
argument_list|>
name|getProcedures
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|String
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetProceduresRequest
argument_list|,
name|GetProceduresResponse
argument_list|,
name|String
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|GetProceduresRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getProcedures
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|ProtobufUtil
operator|.
name|toProcedureJson
argument_list|(
name|resp
operator|.
name|getProcedureList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|String
argument_list|>
name|getLocks
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|String
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetLocksRequest
argument_list|,
name|GetLocksResponse
argument_list|,
name|String
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|GetLocksRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getLocks
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|ProtobufUtil
operator|.
name|toLockJson
argument_list|(
name|resp
operator|.
name|getLockList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|decommissionRegionServers
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|,
name|boolean
name|offload
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<DecommissionRegionServersRequest
argument_list|,
name|DecommissionRegionServersResponse
argument_list|,
name|Void
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildDecommissionRegionServersRequest
argument_list|(
name|servers
argument_list|,
name|offload
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|decommissionRegionServers
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|listDecommissionedRegionServers
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|List
argument_list|<
name|ServerName
argument_list|>
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<ListDecommissionedRegionServersRequest
argument_list|,
name|ListDecommissionedRegionServersResponse
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|ListDecommissionedRegionServersRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|listDecommissionedRegionServers
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|resp
operator|.
name|getServerNameList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ProtobufUtil
operator|::
name|toServerName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|recommissionRegionServer
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|encodedRegionNames
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<RecommissionRegionServerRequest
argument_list|,
name|RecommissionRegionServerResponse
argument_list|,
name|Void
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildRecommissionRegionServerRequest
argument_list|(
name|server
argument_list|,
name|encodedRegionNames
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|recommissionRegionServer
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    * Get the region location for the passed region name. The region name may be a full region name    * or encoded region name. If the region does not found, then it'll throw an    * UnknownRegionException wrapped by a {@link CompletableFuture}    * @param regionNameOrEncodedRegionName    * @return region location, wrapped by a {@link CompletableFuture}    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|getRegionLocation
parameter_list|(
name|byte
index|[]
name|regionNameOrEncodedRegionName
parameter_list|)
block|{
if|if
condition|(
name|regionNameOrEncodedRegionName
operator|==
literal|null
condition|)
block|{
return|return
name|failedFuture
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Passed region name can't be null"
argument_list|)
argument_list|)
return|;
block|}
try|try
block|{
name|CompletableFuture
argument_list|<
name|Optional
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|>
name|future
decl_stmt|;
if|if
condition|(
name|RegionInfo
operator|.
name|isEncodedRegionName
argument_list|(
name|regionNameOrEncodedRegionName
argument_list|)
condition|)
block|{
name|future
operator|=
name|AsyncMetaTableAccessor
operator|.
name|getRegionLocationWithEncodedName
argument_list|(
name|metaTable
argument_list|,
name|regionNameOrEncodedRegionName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|=
name|AsyncMetaTableAccessor
operator|.
name|getRegionLocation
argument_list|(
name|metaTable
argument_list|,
name|regionNameOrEncodedRegionName
argument_list|)
expr_stmt|;
block|}
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|returnedFuture
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|future
argument_list|,
parameter_list|(
name|location
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|returnedFuture
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|location
operator|.
name|isPresent
argument_list|()
operator|||
name|location
operator|.
name|get
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|==
literal|null
condition|)
block|{
name|returnedFuture
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|UnknownRegionException
argument_list|(
literal|"Invalid region name or encoded region name: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionNameOrEncodedRegionName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|returnedFuture
operator|.
name|complete
argument_list|(
name|location
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|returnedFuture
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|failedFuture
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
end_function

begin_comment
comment|/**    * Get the region info for the passed region name. The region name may be a full region name or    * encoded region name. If the region does not found, then it'll throw an UnknownRegionException    * wrapped by a {@link CompletableFuture}    * @param regionNameOrEncodedRegionName    * @return region info, wrapped by a {@link CompletableFuture}    */
end_comment

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|RegionInfo
argument_list|>
name|getRegionInfo
parameter_list|(
name|byte
index|[]
name|regionNameOrEncodedRegionName
parameter_list|)
block|{
if|if
condition|(
name|regionNameOrEncodedRegionName
operator|==
literal|null
condition|)
block|{
return|return
name|failedFuture
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Passed region name can't be null"
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|regionNameOrEncodedRegionName
argument_list|,
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|regionNameOrEncodedRegionName
argument_list|,
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
return|;
block|}
name|CompletableFuture
argument_list|<
name|RegionInfo
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getRegionLocation
argument_list|(
name|regionNameOrEncodedRegionName
argument_list|)
argument_list|,
parameter_list|(
name|location
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|location
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|private
name|byte
index|[]
index|[]
name|getSplitKeys
parameter_list|(
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|int
name|numRegions
parameter_list|)
block|{
if|if
condition|(
name|numRegions
operator|<
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must create at least three regions"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|)
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Start key must be smaller than end key"
argument_list|)
throw|;
block|}
if|if
condition|(
name|numRegions
operator|==
literal|3
condition|)
block|{
return|return
operator|new
name|byte
index|[]
index|[]
block|{
name|startKey
block|,
name|endKey
block|}
return|;
block|}
name|byte
index|[]
index|[]
name|splitKeys
init|=
name|Bytes
operator|.
name|split
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
operator|-
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitKeys
operator|==
literal|null
operator|||
name|splitKeys
operator|.
name|length
operator|!=
name|numRegions
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to split key range into enough regions"
argument_list|)
throw|;
block|}
return|return
name|splitKeys
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|verifySplitKeys
parameter_list|(
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|splitKeys
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
comment|// Verify there are no duplicate split keys
name|byte
index|[]
name|lastKey
init|=
literal|null
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|splitKey
range|:
name|splitKeys
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|splitKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Empty split key must not be passed in the split keys."
argument_list|)
throw|;
block|}
if|if
condition|(
name|lastKey
operator|!=
literal|null
operator|&&
name|Bytes
operator|.
name|equals
argument_list|(
name|splitKey
argument_list|,
name|lastKey
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All split keys must be unique, "
operator|+
literal|"found duplicate: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|splitKey
argument_list|)
operator|+
literal|", "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|lastKey
argument_list|)
argument_list|)
throw|;
block|}
name|lastKey
operator|=
name|splitKey
expr_stmt|;
block|}
block|}
end_function

begin_class
specifier|private
specifier|static
specifier|abstract
class|class
name|ProcedureBiConsumer
implements|implements
name|BiConsumer
argument_list|<
name|Void
argument_list|,
name|Throwable
argument_list|>
block|{
specifier|abstract
name|void
name|onFinished
parameter_list|()
function_decl|;
specifier|abstract
name|void
name|onError
parameter_list|(
name|Throwable
name|error
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
name|Void
name|v
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|onError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
name|onFinished
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
specifier|abstract
class|class
name|TableProcedureBiConsumer
extends|extends
name|ProcedureBiConsumer
block|{
specifier|protected
specifier|final
name|TableName
name|tableName
decl_stmt|;
name|TableProcedureBiConsumer
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|abstract
name|String
name|getOperationType
parameter_list|()
function_decl|;
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Operation: "
operator|+
name|getOperationType
argument_list|()
operator|+
literal|", "
operator|+
literal|"Table Name: "
operator|+
name|tableName
operator|.
name|getNameWithNamespaceInclAsString
argument_list|()
return|;
block|}
annotation|@
name|Override
name|void
name|onFinished
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getDescription
argument_list|()
operator|+
literal|" completed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onError
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getDescription
argument_list|()
operator|+
literal|" failed with "
operator|+
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
specifier|abstract
class|class
name|NamespaceProcedureBiConsumer
extends|extends
name|ProcedureBiConsumer
block|{
specifier|protected
specifier|final
name|String
name|namespaceName
decl_stmt|;
name|NamespaceProcedureBiConsumer
parameter_list|(
name|String
name|namespaceName
parameter_list|)
block|{
name|this
operator|.
name|namespaceName
operator|=
name|namespaceName
expr_stmt|;
block|}
specifier|abstract
name|String
name|getOperationType
parameter_list|()
function_decl|;
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Operation: "
operator|+
name|getOperationType
argument_list|()
operator|+
literal|", Namespace: "
operator|+
name|namespaceName
return|;
block|}
annotation|@
name|Override
name|void
name|onFinished
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getDescription
argument_list|()
operator|+
literal|" completed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onError
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getDescription
argument_list|()
operator|+
literal|" failed with "
operator|+
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
class|class
name|CreateTableProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|CreateTableProcedureBiConsumer
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"CREATE"
return|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
class|class
name|ModifyTableProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|ModifyTableProcedureBiConsumer
parameter_list|(
name|AsyncAdmin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"ENABLE"
return|;
block|}
block|}
end_class

begin_class
specifier|private
class|class
name|DeleteTableProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|DeleteTableProcedureBiConsumer
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"DELETE"
return|;
block|}
annotation|@
name|Override
name|void
name|onFinished
parameter_list|()
block|{
name|connection
operator|.
name|getLocator
argument_list|()
operator|.
name|clearCache
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|super
operator|.
name|onFinished
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
class|class
name|TruncateTableProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|TruncateTableProcedureBiConsumer
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"TRUNCATE"
return|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
class|class
name|EnableTableProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|EnableTableProcedureBiConsumer
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"ENABLE"
return|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
class|class
name|DisableTableProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|DisableTableProcedureBiConsumer
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"DISABLE"
return|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
class|class
name|AddColumnFamilyProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|AddColumnFamilyProcedureBiConsumer
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"ADD_COLUMN_FAMILY"
return|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
class|class
name|DeleteColumnFamilyProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|DeleteColumnFamilyProcedureBiConsumer
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"DELETE_COLUMN_FAMILY"
return|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
class|class
name|ModifyColumnFamilyProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|ModifyColumnFamilyProcedureBiConsumer
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"MODIFY_COLUMN_FAMILY"
return|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
class|class
name|CreateNamespaceProcedureBiConsumer
extends|extends
name|NamespaceProcedureBiConsumer
block|{
name|CreateNamespaceProcedureBiConsumer
parameter_list|(
name|String
name|namespaceName
parameter_list|)
block|{
name|super
argument_list|(
name|namespaceName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"CREATE_NAMESPACE"
return|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
class|class
name|DeleteNamespaceProcedureBiConsumer
extends|extends
name|NamespaceProcedureBiConsumer
block|{
name|DeleteNamespaceProcedureBiConsumer
parameter_list|(
name|String
name|namespaceName
parameter_list|)
block|{
name|super
argument_list|(
name|namespaceName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"DELETE_NAMESPACE"
return|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
class|class
name|ModifyNamespaceProcedureBiConsumer
extends|extends
name|NamespaceProcedureBiConsumer
block|{
name|ModifyNamespaceProcedureBiConsumer
parameter_list|(
name|String
name|namespaceName
parameter_list|)
block|{
name|super
argument_list|(
name|namespaceName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"MODIFY_NAMESPACE"
return|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
class|class
name|MergeTableRegionProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|MergeTableRegionProcedureBiConsumer
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"MERGE_REGIONS"
return|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
class|class
name|SplitTableRegionProcedureBiConsumer
extends|extends
name|TableProcedureBiConsumer
block|{
name|SplitTableRegionProcedureBiConsumer
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"SPLIT_REGION"
return|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|static
class|class
name|ReplicationProcedureBiConsumer
extends|extends
name|ProcedureBiConsumer
block|{
specifier|private
specifier|final
name|String
name|peerId
decl_stmt|;
specifier|private
specifier|final
name|Supplier
argument_list|<
name|String
argument_list|>
name|getOperation
decl_stmt|;
name|ReplicationProcedureBiConsumer
parameter_list|(
name|String
name|peerId
parameter_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
name|getOperation
parameter_list|)
block|{
name|this
operator|.
name|peerId
operator|=
name|peerId
expr_stmt|;
name|this
operator|.
name|getOperation
operator|=
name|getOperation
expr_stmt|;
block|}
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Operation: "
operator|+
name|getOperation
operator|.
name|get
argument_list|()
operator|+
literal|", peerId: "
operator|+
name|peerId
return|;
block|}
annotation|@
name|Override
name|void
name|onFinished
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getDescription
argument_list|()
operator|+
literal|" completed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onError
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getDescription
argument_list|()
operator|+
literal|" failed with "
operator|+
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|waitProcedureResult
parameter_list|(
name|CompletableFuture
argument_list|<
name|Long
argument_list|>
name|procFuture
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|procFuture
argument_list|,
parameter_list|(
name|procId
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
name|getProcedureResult
argument_list|(
name|procId
argument_list|,
name|future
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|getProcedureResult
parameter_list|(
name|long
name|procId
parameter_list|,
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
parameter_list|,
name|int
name|retries
parameter_list|)
block|{
name|addListener
argument_list|(
name|this
operator|.
expr|<
name|GetProcedureResultResponse
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetProcedureResultRequest
argument_list|,
name|GetProcedureResultResponse
argument_list|,
name|GetProcedureResultResponse
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|GetProcedureResultRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getProcedureResult
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
argument_list|,
parameter_list|(
name|response
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to get the procedure result procId={}"
argument_list|,
name|procId
argument_list|,
name|ConnectionUtils
operator|.
name|translateException
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
name|retryTimer
operator|.
name|newTimeout
argument_list|(
name|t
lambda|->
name|getProcedureResult
argument_list|(
name|procId
argument_list|,
name|future
argument_list|,
name|retries
operator|+
literal|1
argument_list|)
argument_list|,
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
name|pauseNs
argument_list|,
name|retries
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
return|return;
block|}
lambda|if (response.getState(
argument_list|)
operator|==
name|GetProcedureResultResponse
operator|.
name|State
operator|.
name|RUNNING
block|)
block|{
name|retryTimer
operator|.
name|newTimeout
argument_list|(
name|t
lambda|->
name|getProcedureResult
argument_list|(
name|procId
argument_list|,
name|future
argument_list|,
name|retries
operator|+
literal|1
argument_list|)
argument_list|,
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
name|pauseNs
argument_list|,
name|retries
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_if
if|if
condition|(
name|response
operator|.
name|hasException
argument_list|()
condition|)
block|{
name|IOException
name|ioe
init|=
name|ForeignExceptionUtil
operator|.
name|toIOException
argument_list|(
name|response
operator|.
name|getException
argument_list|()
argument_list|)
decl_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
end_if

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_function
unit|}    private
parameter_list|<
name|T
parameter_list|>
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|failedFuture
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|private
parameter_list|<
name|T
parameter_list|>
name|boolean
name|completeExceptionally
parameter_list|(
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|future
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|ClusterMetrics
argument_list|>
name|getClusterMetrics
parameter_list|()
block|{
return|return
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|ClusterMetrics
argument_list|>
name|getClusterMetrics
parameter_list|(
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|ClusterMetrics
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetClusterStatusRequest
argument_list|,
name|GetClusterStatusResponse
argument_list|,
name|ClusterMetrics
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildGetClusterStatusRequest
argument_list|(
name|options
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getClusterStatus
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|ClusterMetricsBuilder
operator|.
name|toClusterMetrics
argument_list|(
name|resp
operator|.
name|getClusterStatus
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|shutdown
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<ShutdownRequest
argument_list|,
name|ShutdownResponse
argument_list|,
name|Void
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|ShutdownRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|shutdown
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|stopMaster
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<StopMasterRequest
argument_list|,
name|StopMasterResponse
argument_list|,
name|Void
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|StopMasterRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|stopMaster
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|stopRegionServer
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
name|StopServerRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildStopServerRequest
argument_list|(
literal|"Called by admin client "
operator|+
name|this
operator|.
name|connection
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newAdminCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<StopServerRequest
argument_list|,
name|StopServerResponse
argument_list|,
name|Void
operator|>
name|adminCall
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|request
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|stopServer
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
argument_list|)
operator|.
name|serverName
argument_list|(
name|serverName
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|updateConfiguration
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newAdminCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<UpdateConfigurationRequest
argument_list|,
name|UpdateConfigurationResponse
argument_list|,
name|Void
operator|>
name|adminCall
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|UpdateConfigurationRequest
operator|.
name|getDefaultInstance
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|updateConfiguration
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
argument_list|)
operator|.
name|serverName
argument_list|(
name|serverName
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|updateConfiguration
parameter_list|()
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|,
name|Option
operator|.
name|MASTER
argument_list|,
name|Option
operator|.
name|BACKUP_MASTERS
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|status
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|status
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|forEach
argument_list|(
name|server
lambda|->
name|futures
operator|.
name|add
argument_list|(
name|updateConfiguration
argument_list|(
name|server
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|updateConfiguration
argument_list|(
name|status
operator|.
name|getMasterName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|getBackupMasterNames
argument_list|()
operator|.
name|forEach
argument_list|(
name|master
lambda|->
name|futures
operator|.
name|add
argument_list|(
name|updateConfiguration
argument_list|(
name|master
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|addListener
argument_list|(
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|futures
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
argument_list|<
name|?
argument_list|>
index|[
name|futures
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|result
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|rollWALWriter
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newAdminCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<RollWALWriterRequest
argument_list|,
name|RollWALWriterResponse
argument_list|,
name|Void
operator|>
name|adminCall
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildRollWALWriterRequest
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|rollWALWriter
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
argument_list|)
operator|.
name|serverName
argument_list|(
name|serverName
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|clearCompactionQueues
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|queues
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newAdminCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<ClearCompactionQueuesRequest
argument_list|,
name|ClearCompactionQueuesResponse
argument_list|,
name|Void
operator|>
name|adminCall
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildClearCompactionQueuesRequest
argument_list|(
name|queues
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|clearCompactionQueues
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
argument_list|)
operator|.
name|serverName
argument_list|(
name|serverName
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|SecurityCapability
argument_list|>
argument_list|>
name|getSecurityCapabilities
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|List
argument_list|<
name|SecurityCapability
argument_list|>
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<SecurityCapabilitiesRequest
argument_list|,
name|SecurityCapabilitiesResponse
argument_list|,
name|List
argument_list|<
name|SecurityCapability
argument_list|>
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|SecurityCapabilitiesRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getSecurityCapabilities
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|ProtobufUtil
operator|.
name|toSecurityCapabilityList
argument_list|(
name|resp
operator|.
name|getCapabilitiesList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|RegionMetrics
argument_list|>
argument_list|>
name|getRegionMetrics
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
name|getRegionMetrics
argument_list|(
name|GetRegionLoadRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
name|serverName
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|RegionMetrics
argument_list|>
argument_list|>
name|getRegionMetrics
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|tableName
argument_list|,
literal|"tableName is null. If you don't specify a tableName, use getRegionLoads() instead"
argument_list|)
expr_stmt|;
return|return
name|getRegionMetrics
argument_list|(
name|RequestConverter
operator|.
name|buildGetRegionLoadRequest
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|serverName
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|RegionMetrics
argument_list|>
argument_list|>
name|getRegionMetrics
parameter_list|(
name|GetRegionLoadRequest
name|request
parameter_list|,
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|List
argument_list|<
name|RegionMetrics
argument_list|>
operator|>
name|newAdminCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetRegionLoadRequest
argument_list|,
name|GetRegionLoadResponse
argument_list|,
name|List
argument_list|<
name|RegionMetrics
argument_list|>
operator|>
name|adminCall
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|request
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getRegionLoad
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|RegionMetricsBuilder
operator|::
name|toRegionMetrics
argument_list|)
argument_list|)
operator|.
name|serverName
argument_list|(
name|serverName
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isMasterInMaintenanceMode
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<IsInMaintenanceModeRequest
argument_list|,
name|IsInMaintenanceModeResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|IsInMaintenanceModeRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|isMasterInMaintenanceMode
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|resp
operator|.
name|getInMaintenanceMode
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|CompactionState
argument_list|>
name|getCompactionState
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|CompactType
name|compactType
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|CompactionState
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|compactType
condition|)
block|{
case|case
name|MOB
case|:
name|addListener
argument_list|(
name|connection
operator|.
name|registry
operator|.
name|getMasterAddress
argument_list|()
argument_list|,
parameter_list|(
name|serverName
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|RegionInfo
name|regionInfo
init|=
name|RegionInfo
operator|.
name|createMobRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|addListener
argument_list|(
name|this
operator|.
expr|<
name|GetRegionInfoResponse
operator|>
name|newAdminCaller
argument_list|()
operator|.
name|serverName
argument_list|(
name|serverName
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetRegionInfoRequest
argument_list|,
name|GetRegionInfoResponse
argument_list|,
name|GetRegionInfoResponse
operator|>
name|adminCall
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildGetRegionInfoRequest
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getRegionInfo
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|resp
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
argument_list|,
parameter_list|(
name|resp2
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
lambda|else
block|{
if|if
condition|(
name|resp2
operator|.
name|hasCompactionState
argument_list|()
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|ProtobufUtil
operator|.
name|createCompactionState
argument_list|(
name|resp2
operator|.
name|getCompactionState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|CompactionState
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|)
function|;
end_function

begin_break
break|break;
end_break

begin_case
case|case
name|NORMAL
case|:
end_case

begin_expr_stmt
name|addListener
argument_list|(
name|getTableHRegionLocations
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|locations
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|CompactionState
argument_list|>
name|regionStates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|CompactionState
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|locations
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|loc
lambda|->
name|loc
operator|.
name|getServerName
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|filter
argument_list|(
name|loc
lambda|->
name|loc
operator|.
name|getRegion
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|filter
argument_list|(
name|loc
lambda|->
operator|!
name|loc
operator|.
name|getRegion
argument_list|()
operator|.
name|isOffline
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|loc
lambda|->
name|loc
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|region
lambda|->
block|{
name|futures
operator|.
name|add
argument_list|(
name|getCompactionStateForRegion
argument_list|(
name|region
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|regionState
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
comment|// If any region compaction state is MAJOR_AND_MINOR
comment|// the table compaction state is MAJOR_AND_MINOR, too.
lambda|if (err2 != null
argument_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|regionState
operator|==
name|CompactionState
operator|.
name|MAJOR_AND_MINOR
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|regionState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regionStates
operator|.
name|add
argument_list|(
name|regionState
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|addListener
argument_list|(
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|futures
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
argument_list|<
name|?
argument_list|>
index|[
name|futures
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err3
parameter_list|)
lambda|->
block|{
comment|// If future not completed, check all regions's compaction state
if|if
condition|(
operator|!
name|future
operator|.
name|isCompletedExceptionally
argument_list|()
operator|&&
operator|!
name|future
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|CompactionState
name|state
init|=
name|CompactionState
operator|.
name|NONE
decl_stmt|;
for|for
control|(
name|CompactionState
name|regionState
range|:
name|regionStates
control|)
block|{
switch|switch
condition|(
name|regionState
condition|)
block|{
case|case
name|MAJOR
case|:
if|if
condition|(
name|state
operator|==
name|CompactionState
operator|.
name|MINOR
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|CompactionState
operator|.
name|MAJOR_AND_MINOR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|CompactionState
operator|.
name|MAJOR
expr_stmt|;
block|}
break|break;
case|case
name|MINOR
case|:
if|if
condition|(
name|state
operator|==
name|CompactionState
operator|.
name|MAJOR
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|CompactionState
operator|.
name|MAJOR_AND_MINOR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|CompactionState
operator|.
name|MINOR
expr_stmt|;
block|}
break|break;
case|case
name|NONE
case|:
default|default:
block|}
if|if
condition|(
operator|!
name|future
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_break
break|break;
end_break

begin_default
default|default:
end_default

begin_throw
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown compactType: "
operator|+
name|compactType
argument_list|)
throw|;
end_throw

begin_expr_stmt
unit|}      return
name|future
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|CompactionState
argument_list|>
name|getCompactionStateForRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|CompactionState
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getRegionLocation
argument_list|(
name|regionName
argument_list|)
argument_list|,
parameter_list|(
name|location
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|ServerName
name|serverName
init|=
name|location
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|NoServerForRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|this
operator|.
expr|<
name|GetRegionInfoResponse
operator|>
name|newAdminCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetRegionInfoRequest
argument_list|,
name|GetRegionInfoResponse
argument_list|,
name|GetRegionInfoResponse
operator|>
name|adminCall
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildGetRegionInfoRequest
argument_list|(
name|location
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getRegionInfo
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|resp
argument_list|)
argument_list|)
operator|.
name|serverName
argument_list|(
name|serverName
argument_list|)
operator|.
name|call
argument_list|()
argument_list|,
parameter_list|(
name|resp2
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
lambda|else
block|{
if|if
condition|(
name|resp2
operator|.
name|hasCompactionState
argument_list|()
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|ProtobufUtil
operator|.
name|createCompactionState
argument_list|(
name|resp2
operator|.
name|getCompactionState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|CompactionState
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|future
return|;
end_return

begin_function
unit|}    @
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Optional
argument_list|<
name|Long
argument_list|>
argument_list|>
name|getLastMajorCompactionTimestamp
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|MajorCompactionTimestampRequest
name|request
init|=
name|MajorCompactionTimestampRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|this
operator|.
expr|<
name|Optional
argument_list|<
name|Long
argument_list|>
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<MajorCompactionTimestampRequest
argument_list|,
name|MajorCompactionTimestampResponse
argument_list|,
name|Optional
argument_list|<
name|Long
argument_list|>
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|request
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|ProtobufUtil
operator|::
name|toOptionalTimestamp
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Optional
argument_list|<
name|Long
argument_list|>
argument_list|>
name|getLastMajorCompactionTimestampForRegion
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Optional
argument_list|<
name|Long
argument_list|>
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
comment|// regionName may be a full region name or encoded region name, so getRegionInfo(byte[]) first
name|addListener
argument_list|(
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
argument_list|,
parameter_list|(
name|region
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|MajorCompactionTimestampForRegionRequest
operator|.
name|Builder
name|builder
init|=
name|MajorCompactionTimestampForRegionRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setRegion
argument_list|(
name|RequestConverter
operator|.
name|buildRegionSpecifier
argument_list|(
name|RegionSpecifierType
operator|.
name|REGION_NAME
argument_list|,
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|addListener
argument_list|(
name|this
operator|.
expr|<
name|Optional
argument_list|<
name|Long
argument_list|>
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<MajorCompactionTimestampForRegionRequest
argument_list|,
name|MajorCompactionTimestampResponse
argument_list|,
name|Optional
argument_list|<
name|Long
argument_list|>
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getLastMajorCompactionTimestampForRegion
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|ProtobufUtil
operator|::
name|toOptionalTimestamp
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
argument_list|,
parameter_list|(
name|timestamp
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
lambda|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|future
return|;
end_return

begin_function
unit|}    @
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|compactionSwitch
parameter_list|(
name|boolean
name|switchState
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|serverNamesList
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getRegionServerList
argument_list|(
name|serverNamesList
argument_list|)
argument_list|,
parameter_list|(
name|serverNames
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Accessed by multiple threads.
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Boolean
argument_list|>
name|serverStates
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|(
name|serverNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|serverNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|serverNames
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|serverName
lambda|->
block|{
name|futures
operator|.
name|add
argument_list|(
name|switchCompact
argument_list|(
name|serverName
argument_list|,
name|switchState
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|serverState
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverStates
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|serverState
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|addListener
argument_list|(
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|futures
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
argument_list|<
name|?
argument_list|>
index|[
name|futures
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err3
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|future
operator|.
name|isCompletedExceptionally
argument_list|()
condition|)
block|{
if|if
condition|(
name|err3
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|serverStates
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|getRegionServerList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|serverNamesList
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverNamesList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CompletableFuture
argument_list|<
name|ClusterMetrics
argument_list|>
name|clusterMetricsCompletableFuture
init|=
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
decl_stmt|;
name|addListener
argument_list|(
name|clusterMetricsCompletableFuture
argument_list|,
parameter_list|(
name|clusterMetrics
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|clusterMetrics
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|serverList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|regionServerName
range|:
name|serverNamesList
control|)
block|{
name|ServerName
name|serverName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|serverName
operator|=
name|ServerName
operator|.
name|valueOf
argument_list|(
name|regionServerName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"ServerName format: %s"
argument_list|,
name|regionServerName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Null ServerName: %s"
argument_list|,
name|regionServerName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|future
operator|.
name|complete
argument_list|(
name|serverList
argument_list|)
expr_stmt|;
block|}
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|switchCompact
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|boolean
name|onOrOff
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newAdminCaller
argument_list|()
operator|.
name|serverName
argument_list|(
name|serverName
argument_list|)
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<CompactionSwitchRequest
argument_list|,
name|CompactionSwitchResponse
argument_list|,
name|Boolean
operator|>
name|adminCall
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|CompactionSwitchRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setEnabled
argument_list|(
name|onOrOff
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|compactionSwitch
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|resp
operator|.
name|getPrevState
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|balancerSwitch
parameter_list|(
specifier|final
name|boolean
name|on
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<SetBalancerRunningRequest
argument_list|,
name|SetBalancerRunningResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildSetBalancerRunningRequest
argument_list|(
name|on
argument_list|,
literal|true
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|setBalancerRunning
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getPrevBalanceValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|balance
parameter_list|(
name|boolean
name|forcible
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<BalanceRequest
argument_list|,
name|BalanceResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildBalanceRequest
argument_list|(
name|forcible
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|balance
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getBalancerRan
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isBalancerEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<IsBalancerEnabledRequest
argument_list|,
name|IsBalancerEnabledResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildIsBalancerEnabledRequest
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|isBalancerEnabled
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getEnabled
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|normalizerSwitch
parameter_list|(
name|boolean
name|on
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<SetNormalizerRunningRequest
argument_list|,
name|SetNormalizerRunningResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildSetNormalizerRunningRequest
argument_list|(
name|on
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|setNormalizerRunning
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getPrevNormalizerValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isNormalizerEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<IsNormalizerEnabledRequest
argument_list|,
name|IsNormalizerEnabledResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildIsNormalizerEnabledRequest
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|isNormalizerEnabled
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getEnabled
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|normalize
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<NormalizeRequest
argument_list|,
name|NormalizeResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildNormalizeRequest
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|normalize
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getNormalizerRan
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|cleanerChoreSwitch
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<SetCleanerChoreRunningRequest
argument_list|,
name|SetCleanerChoreRunningResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildSetCleanerChoreRunningRequest
argument_list|(
name|enabled
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|setCleanerChoreRunning
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getPrevValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isCleanerChoreEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<IsCleanerChoreEnabledRequest
argument_list|,
name|IsCleanerChoreEnabledResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildIsCleanerChoreEnabledRequest
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|isCleanerChoreEnabled
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|runCleanerChore
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<RunCleanerChoreRequest
argument_list|,
name|RunCleanerChoreResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildRunCleanerChoreRequest
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|runCleanerChore
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getCleanerChoreRan
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|catalogJanitorSwitch
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<EnableCatalogJanitorRequest
argument_list|,
name|EnableCatalogJanitorResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildEnableCatalogJanitorRequest
argument_list|(
name|enabled
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|enableCatalogJanitor
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getPrevValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isCatalogJanitorEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<IsCatalogJanitorEnabledRequest
argument_list|,
name|IsCatalogJanitorEnabledResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildIsCatalogJanitorEnabledRequest
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|isCatalogJanitorEnabled
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Integer
argument_list|>
name|runCatalogJanitor
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|Integer
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<RunCatalogScanRequest
argument_list|,
name|RunCatalogScanResponse
argument_list|,
name|Integer
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildCatalogScanRequest
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|runCatalogScan
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|resp
operator|.
name|getScanResult
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
parameter_list|<
name|S
parameter_list|,
name|R
parameter_list|>
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|coprocessorService
parameter_list|(
name|Function
argument_list|<
name|RpcChannel
argument_list|,
name|S
argument_list|>
name|stubMaker
parameter_list|,
name|ServiceCaller
argument_list|<
name|S
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|)
block|{
name|MasterCoprocessorRpcChannelImpl
name|channel
init|=
operator|new
name|MasterCoprocessorRpcChannelImpl
argument_list|(
name|this
operator|.
expr|<
name|Message
operator|>
name|newMasterCaller
argument_list|()
argument_list|)
decl_stmt|;
name|S
name|stub
init|=
name|stubMaker
operator|.
name|apply
argument_list|(
name|channel
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|ClientCoprocessorRpcController
name|controller
init|=
operator|new
name|ClientCoprocessorRpcController
argument_list|()
decl_stmt|;
name|callable
operator|.
name|call
argument_list|(
name|stub
argument_list|,
name|controller
argument_list|,
name|resp
lambda|->
block|{
if|if
condition|(
name|controller
operator|.
name|failed
argument_list|()
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|controller
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|resp
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
parameter_list|<
name|S
parameter_list|,
name|R
parameter_list|>
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|coprocessorService
parameter_list|(
name|Function
argument_list|<
name|RpcChannel
argument_list|,
name|S
argument_list|>
name|stubMaker
parameter_list|,
name|ServiceCaller
argument_list|<
name|S
argument_list|,
name|R
argument_list|>
name|callable
parameter_list|,
name|ServerName
name|serverName
parameter_list|)
block|{
name|RegionServerCoprocessorRpcChannelImpl
name|channel
init|=
operator|new
name|RegionServerCoprocessorRpcChannelImpl
argument_list|(
name|this
operator|.
expr|<
name|Message
operator|>
name|newServerCaller
argument_list|()
operator|.
name|serverName
argument_list|(
name|serverName
argument_list|)
argument_list|)
decl_stmt|;
name|S
name|stub
init|=
name|stubMaker
operator|.
name|apply
argument_list|(
name|channel
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|R
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|ClientCoprocessorRpcController
name|controller
init|=
operator|new
name|ClientCoprocessorRpcController
argument_list|()
decl_stmt|;
name|callable
operator|.
name|call
argument_list|(
name|stub
argument_list|,
name|controller
argument_list|,
name|resp
lambda|->
block|{
if|if
condition|(
name|controller
operator|.
name|failed
argument_list|()
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|controller
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|resp
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|clearDeadServers
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|List
argument_list|<
name|ServerName
argument_list|>
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<ClearDeadServersRequest
argument_list|,
name|ClearDeadServersResponse
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildClearDeadServersRequest
argument_list|(
name|servers
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|clearDeadServers
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
parameter_list|(
name|resp
parameter_list|)
lambda|->
name|ProtobufUtil
operator|.
name|toServerNameList
argument_list|(
name|resp
operator|.
name|getServerNameList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
parameter_list|<
name|T
parameter_list|>
name|ServerRequestCallerBuilder
argument_list|<
name|T
argument_list|>
name|newServerCaller
parameter_list|()
block|{
return|return
name|this
operator|.
name|connection
operator|.
name|callerFactory
operator|.
expr|<
name|T
operator|>
name|serverRequest
argument_list|()
operator|.
name|rpcTimeout
argument_list|(
name|rpcTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|operationTimeout
argument_list|(
name|operationTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|pause
argument_list|(
name|pauseNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|maxAttempts
argument_list|(
name|maxAttempts
argument_list|)
operator|.
name|startLogErrorsCnt
argument_list|(
name|startLogErrorsCnt
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|enableTableReplication
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
return|return
name|failedFuture
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Table name is null"
argument_list|)
argument_list|)
return|;
block|}
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|exist
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|exist
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|TableNotFoundException
argument_list|(
literal|"Table '"
operator|+
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"' does not exists."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|getTableSplits
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|splits
parameter_list|,
name|err1
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err1
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addListener
argument_list|(
name|checkAndSyncTableToPeerClusters
argument_list|(
name|tableName
argument_list|,
name|splits
argument_list|)
argument_list|,
parameter_list|(
name|result
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addListener
argument_list|(
name|setTableReplication
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
argument_list|,
parameter_list|(
name|result3
parameter_list|,
name|err3
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err3
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|result3
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|disableTableReplication
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
return|return
name|failedFuture
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Table name is null"
argument_list|)
argument_list|)
return|;
block|}
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|exist
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|exist
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|TableNotFoundException
argument_list|(
literal|"Table '"
operator|+
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"' does not exists."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|setTableReplication
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
argument_list|,
parameter_list|(
name|result
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|byte
index|[]
index|[]
argument_list|>
name|getTableSplits
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|byte
index|[]
index|[]
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getRegions
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|regions
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|regions
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
index|[]
name|splits
init|=
operator|new
name|byte
index|[
name|regions
operator|.
name|size
argument_list|()
operator|-
literal|1
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|regions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|splits
index|[
name|i
operator|-
literal|1
index|]
operator|=
name|regions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStartKey
argument_list|()
expr_stmt|;
block|}
name|future
operator|.
name|complete
argument_list|(
name|splits
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_comment
comment|/**    * Connect to peer and check the table descriptor on peer:    *<ol>    *<li>Create the same table on peer when not exist.</li>    *<li>Throw an exception if the table already has replication enabled on any of the column    * families.</li>    *<li>Throw an exception if the table exists on peer cluster but descriptors are not same.</li>    *</ol>    * @param tableName name of the table to sync to the peer    * @param splits table split keys    */
end_comment

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|checkAndSyncTableToPeerClusters
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|splits
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|listReplicationPeers
argument_list|()
argument_list|,
parameter_list|(
name|peers
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|peers
operator|==
literal|null
operator|||
name|peers
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Found no peer cluster for replication."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|peers
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|peer
lambda|->
name|peer
operator|.
name|getPeerConfig
argument_list|()
operator|.
name|needToReplicate
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|peer
lambda|->
block|{
name|futures
operator|.
name|add
argument_list|(
name|trySyncTableToPeerCluster
argument_list|(
name|tableName
argument_list|,
name|splits
argument_list|,
name|peer
argument_list|)
argument_list|)
argument_list|;
block|}
argument_list|)
expr_stmt|;
name|addListener
argument_list|(
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|futures
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
argument_list|<
name|?
argument_list|>
index|[
name|futures
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|result
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|future
return|;
end_return

begin_function
unit|}    private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|trySyncTableToPeerCluster
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|splits
parameter_list|,
name|ReplicationPeerDescription
name|peer
parameter_list|)
block|{
name|Configuration
name|peerConf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|peerConf
operator|=
name|ReplicationPeerConfigUtil
operator|.
name|getPeerClusterConfiguration
argument_list|(
name|connection
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|peer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|failedFuture
argument_list|(
name|e
argument_list|)
return|;
block|}
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|ConnectionFactory
operator|.
name|createAsyncConnection
argument_list|(
name|peerConf
argument_list|)
argument_list|,
parameter_list|(
name|conn
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|tableDesc
parameter_list|,
name|err1
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err1
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err1
argument_list|)
expr_stmt|;
return|return;
block|}
name|AsyncAdmin
name|peerAdmin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|peerAdmin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|exist
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|exist
condition|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createTableFuture
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|splits
operator|==
literal|null
condition|)
block|{
name|createTableFuture
operator|=
name|peerAdmin
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createTableFuture
operator|=
name|peerAdmin
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|,
name|splits
argument_list|)
expr_stmt|;
block|}
name|addListener
argument_list|(
name|createTableFuture
argument_list|,
parameter_list|(
name|result
parameter_list|,
name|err3
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err3
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addListener
argument_list|(
name|compareTableWithPeerCluster
argument_list|(
name|tableName
argument_list|,
name|tableDesc
argument_list|,
name|peer
argument_list|,
name|peerAdmin
argument_list|)
argument_list|,
parameter_list|(
name|result
parameter_list|,
name|err4
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err4
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|compareTableWithPeerCluster
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|TableDescriptor
name|tableDesc
parameter_list|,
name|ReplicationPeerDescription
name|peer
parameter_list|,
name|AsyncAdmin
name|peerAdmin
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|peerAdmin
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|peerTableDesc
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|peerTableDesc
operator|==
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to get table descriptor for table "
operator|+
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" from peer cluster "
operator|+
name|peer
operator|.
name|getPeerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|TableDescriptor
operator|.
name|COMPARATOR_IGNORE_REPLICATION
operator|.
name|compare
argument_list|(
name|peerTableDesc
argument_list|,
name|tableDesc
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" exists in peer cluster "
operator|+
name|peer
operator|.
name|getPeerId
argument_list|()
operator|+
literal|", but the table descriptors are not same when compared with source cluster."
operator|+
literal|" Thus can not enable the table's replication switch."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|future
operator|.
name|complete
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_comment
comment|/**    * Set the table's replication switch if the table's replication switch is already not set.    * @param tableName name of the table    * @param enableRep is replication switch enable or disable    */
end_comment

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|setTableReplication
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|boolean
name|enableRep
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|tableDesc
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|tableDesc
operator|.
name|matchReplicationScope
argument_list|(
name|enableRep
argument_list|)
condition|)
block|{
name|int
name|scope
init|=
name|enableRep
condition|?
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
else|:
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
decl_stmt|;
name|TableDescriptor
name|newTableDesc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableDesc
argument_list|)
operator|.
name|setReplicationScope
argument_list|(
name|scope
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|modifyTable
argument_list|(
name|newTableDesc
argument_list|)
argument_list|,
parameter_list|(
name|result
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|CacheEvictionStats
argument_list|>
name|clearBlockCache
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|CacheEvictionStats
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|getTableHRegionLocations
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|locations
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|regionInfoByServerName
init|=
name|locations
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|l
lambda|->
name|l
operator|.
name|getRegion
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|filter
argument_list|(
name|l
lambda|->
operator|!
name|l
operator|.
name|getRegion
argument_list|()
operator|.
name|isOffline
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|l
lambda|->
name|l
operator|.
name|getServerName
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|l
lambda|->
name|l
operator|.
name|getServerName
argument_list|()
argument_list|,
name|Collectors
operator|.
name|mapping
argument_list|(
name|l
lambda|->
name|l
operator|.
name|getRegion
argument_list|()
argument_list|,
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|CacheEvictionStats
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|CacheEvictionStatsAggregator
name|aggregator
init|=
operator|new
name|CacheEvictionStatsAggregator
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|regionInfoByServerName
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|clearBlockCache
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|stats
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aggregator
operator|.
name|append
argument_list|(
name|stats
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addListener
argument_list|(
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|futures
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
index|[
name|futures
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|,
parameter_list|(
name|ret
parameter_list|,
name|err3
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err3
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|aggregator
operator|.
name|sum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|cloneTableSchema
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|TableName
name|newTableName
parameter_list|,
name|boolean
name|preserveSplits
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|addListener
argument_list|(
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|exist
parameter_list|,
name|err
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|exist
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|tableExists
argument_list|(
name|newTableName
argument_list|)
argument_list|,
parameter_list|(
name|exist1
parameter_list|,
name|err1
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err1
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err1
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|exist1
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|TableExistsException
argument_list|(
name|newTableName
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|addListener
argument_list|(
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|tableDesc
parameter_list|,
name|err2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err2
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err2
argument_list|)
expr_stmt|;
return|return;
block|}
name|TableDescriptor
name|newTableDesc
init|=
name|TableDescriptorBuilder
operator|.
name|copy
argument_list|(
name|newTableName
argument_list|,
name|tableDesc
argument_list|)
decl_stmt|;
if|if
condition|(
name|preserveSplits
condition|)
block|{
name|addListener
argument_list|(
name|getTableSplits
argument_list|(
name|tableName
argument_list|)
argument_list|,
parameter_list|(
name|splits
parameter_list|,
name|err3
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err3
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addListener
argument_list|(
name|createTable
argument_list|(
name|newTableDesc
argument_list|,
name|splits
argument_list|)
argument_list|,
parameter_list|(
name|result
parameter_list|,
name|err4
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err4
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addListener
argument_list|(
name|createTable
argument_list|(
name|newTableDesc
argument_list|)
argument_list|,
parameter_list|(
name|result
parameter_list|,
name|err5
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|err5
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|err5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|complete
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|CacheEvictionStats
argument_list|>
name|clearBlockCache
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|hris
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|CacheEvictionStats
operator|>
name|newAdminCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<ClearRegionBlockCacheRequest
argument_list|,
name|ClearRegionBlockCacheResponse
argument_list|,
name|CacheEvictionStats
operator|>
name|adminCall
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildClearRegionBlockCacheRequest
argument_list|(
name|hris
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|clearRegionBlockCache
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|ProtobufUtil
operator|.
name|toCacheEvictionStats
argument_list|(
name|resp
operator|.
name|getStats
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|serverName
argument_list|(
name|serverName
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|switchRpcThrottle
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|future
init|=
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<SwitchRpcThrottleRequest
argument_list|,
name|SwitchRpcThrottleResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|SwitchRpcThrottleRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRpcThrottleEnabled
argument_list|(
name|enable
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|switchRpcThrottle
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|resp
operator|.
name|getPreviousRpcThrottleEnabled
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|isRpcThrottleEnabled
parameter_list|()
block|{
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|future
init|=
name|this
operator|.
expr|<
name|Boolean
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<IsRpcThrottleEnabledRequest
argument_list|,
name|IsRpcThrottleEnabledResponse
argument_list|,
name|Boolean
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|IsRpcThrottleEnabledRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|isRpcThrottleEnabled
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|resp
operator|.
name|getRpcThrottleEnabled
argument_list|()
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
return|return
name|future
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Map
argument_list|<
name|TableName
argument_list|,
name|Long
argument_list|>
argument_list|>
name|getSpaceQuotaTableSizes
parameter_list|()
block|{
return|return
name|this
operator|.
expr|<
name|Map
argument_list|<
name|TableName
argument_list|,
name|Long
argument_list|>
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetSpaceQuotaRegionSizesRequest
argument_list|,
name|GetSpaceQuotaRegionSizesResponse
argument_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|Long
argument_list|>
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildGetSpaceQuotaRegionSizesRequest
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getSpaceQuotaRegionSizes
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|resp
operator|.
name|getSizesList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|sizes
lambda|->
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|sizes
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|RegionSizes
operator|::
name|getSize
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
argument_list|>
name|getRegionServerSpaceQuotaSnapshots
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
operator|>
name|newAdminCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetSpaceQuotaSnapshotsRequest
argument_list|,
name|GetSpaceQuotaSnapshotsResponse
argument_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
operator|>
name|adminCall
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildGetSpaceQuotaSnapshotsRequest
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getSpaceQuotaSnapshots
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
name|resp
operator|.
name|getSnapshotsList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|snapshot
lambda|->
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|snapshot
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|snapshot
lambda|->
name|SpaceQuotaSnapshot
operator|.
name|toSpaceQuotaSnapshot
argument_list|(
name|snapshot
operator|.
name|getSnapshot
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|serverName
argument_list|(
name|serverName
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
name|CompletableFuture
argument_list|<
name|SpaceQuotaSnapshot
argument_list|>
name|getCurrentSpaceQuotaSnapshot
parameter_list|(
name|Converter
argument_list|<
name|SpaceQuotaSnapshot
argument_list|,
name|GetQuotaStatesResponse
argument_list|>
name|converter
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|SpaceQuotaSnapshot
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GetQuotaStatesRequest
argument_list|,
name|GetQuotaStatesResponse
argument_list|,
name|SpaceQuotaSnapshot
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|RequestConverter
operator|.
name|buildGetQuotaStatesRequest
argument_list|()
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|getQuotaStates
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|converter
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|SpaceQuotaSnapshot
argument_list|>
name|getCurrentSpaceQuotaSnapshot
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|getCurrentSpaceQuotaSnapshot
argument_list|(
name|resp
lambda|->
name|resp
operator|.
name|getNsSnapshotsList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|s
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
name|SpaceQuotaSnapshot
operator|.
name|toSpaceQuotaSnapshot
argument_list|(
name|s
operator|.
name|getSnapshot
argument_list|()
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|SpaceQuotaSnapshot
argument_list|>
name|getCurrentSpaceQuotaSnapshot
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|HBaseProtos
operator|.
name|TableName
name|protoTableName
init|=
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
return|return
name|getCurrentSpaceQuotaSnapshot
argument_list|(
name|resp
lambda|->
name|resp
operator|.
name|getTableSnapshotsList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|s
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|protoTableName
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
name|SpaceQuotaSnapshot
operator|.
name|toSpaceQuotaSnapshot
argument_list|(
name|s
operator|.
name|getSnapshot
argument_list|()
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|grant
parameter_list|(
name|UserPermission
name|userPermission
parameter_list|,
name|boolean
name|mergeExistingPermissions
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<GrantRequest
argument_list|,
name|GrantResponse
argument_list|,
name|Void
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|ShadedAccessControlUtil
operator|.
name|buildGrantRequest
argument_list|(
name|userPermission
argument_list|,
name|mergeExistingPermissions
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|grant
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|revoke
parameter_list|(
name|UserPermission
name|userPermission
parameter_list|)
block|{
return|return
name|this
operator|.
expr|<
name|Void
operator|>
name|newMasterCaller
argument_list|()
operator|.
name|action
argument_list|(
parameter_list|(
name|controller
parameter_list|,
name|stub
parameter_list|)
lambda|->
name|this
operator|.
block|<RevokeRequest
argument_list|,
name|RevokeResponse
argument_list|,
name|Void
operator|>
name|call
argument_list|(
name|controller
argument_list|,
name|stub
argument_list|,
name|ShadedAccessControlUtil
operator|.
name|buildRevokeRequest
argument_list|(
name|userPermission
argument_list|)
argument_list|,
parameter_list|(
name|s
parameter_list|,
name|c
parameter_list|,
name|req
parameter_list|,
name|done
parameter_list|)
lambda|->
name|s
operator|.
name|revoke
argument_list|(
name|c
argument_list|,
name|req
argument_list|,
name|done
argument_list|)
argument_list|,
name|resp
lambda|->
literal|null
argument_list|)
argument_list|)
operator|.
name|call
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

