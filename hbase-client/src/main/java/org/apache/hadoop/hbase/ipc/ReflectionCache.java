begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IpcProtocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * Save on relection by keeping around method, method argument, and constructor instances  */
end_comment

begin_class
class|class
name|ReflectionCache
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Message
argument_list|>
name|methodArgCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|methodInstanceCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ReflectionCache
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
name|Method
name|getMethod
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|IpcProtocol
argument_list|>
name|protocol
parameter_list|,
name|String
name|methodName
parameter_list|)
block|{
name|Method
name|method
init|=
name|this
operator|.
name|methodInstanceCache
operator|.
name|get
argument_list|(
name|methodName
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
return|return
name|method
return|;
name|Method
index|[]
name|methods
init|=
name|protocol
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|methods
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|m
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|methodInstanceCache
operator|.
name|put
argument_list|(
name|methodName
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
name|Message
name|getMethodArgType
parameter_list|(
name|Method
name|method
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|protoType
init|=
name|this
operator|.
name|methodArgCache
operator|.
name|get
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|protoType
operator|!=
literal|null
condition|)
return|return
name|protoType
return|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|args
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|arg
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// RpcController + Message in the method args
comment|// (generated code from RPC bits in .proto files have RpcController)
name|arg
operator|=
name|args
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|arg
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
comment|//unexpected
return|return
literal|null
return|;
block|}
comment|//in the protobuf methods, args[1] is the only significant argument
name|Method
name|newInstMethod
init|=
name|arg
operator|.
name|getMethod
argument_list|(
literal|"getDefaultInstance"
argument_list|)
decl_stmt|;
name|newInstMethod
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|protoType
operator|=
operator|(
name|Message
operator|)
name|newInstMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|methodArgCache
operator|.
name|put
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|protoType
argument_list|)
expr_stmt|;
return|return
name|protoType
return|;
block|}
block|}
end_class

end_unit

