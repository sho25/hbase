begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|QuotaStatusCalls
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnPrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|QualifierFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RegexStringComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufMagic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnsafeByteOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetQuotaStatesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetSpaceQuotaRegionSizesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetSpaceQuotaSnapshotsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetSpaceQuotaSnapshotsResponse
operator|.
name|TableQuotaSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetSpaceQuotaRegionSizesResponse
operator|.
name|RegionSizes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|Quotas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|SpaceQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_comment
comment|/**  * Helper class to interact with the quota table.  *<table>  *<tr><th>ROW-KEY</th><th>FAM/QUAL</th><th>DATA</th></tr>  *<tr><td>n.&lt;namespace&gt;</td><td>q:s</td><td>&lt;global-quotas&gt;</td></tr>  *<tr><td>n.&lt;namespace&gt;</td><td>u:p</td><td>&lt;namespace-quota policy&gt;</td></tr>  *<tr><td>n.&lt;namespace&gt;</td><td>u:s</td><td>&lt;SpaceQuotaSnapshot&gt;</td></tr>  *<tr><td>t.&lt;table&gt;</td><td>q:s</td><td>&lt;global-quotas&gt;</td></tr>  *<tr><td>t.&lt;table&gt;</td><td>u:p</td><td>&lt;table-quota policy&gt;</td></tr>  *<tr><td>t.&lt;table&gt;</td><td>u:ss.&lt;snapshot name&gt;</td><td>&lt;SpaceQuotaSnapshot&gt;</td></tr>  *<tr><td>u.&lt;user&gt;</td><td>q:s</td><td>&lt;global-quotas&gt;</td></tr>  *<tr><td>u.&lt;user&gt;</td><td>q:s.&lt;table&gt;</td><td>&lt;table-quotas&gt;</td></tr>  *<tr><td>u.&lt;user&gt;</td><td>q:s.&lt;ns&gt;</td><td>&lt;namespace-quotas&gt;</td></tr>  *</table  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|QuotaTableUtil
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|QuotaTableUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** System table for quotas */
specifier|public
specifier|static
specifier|final
name|TableName
name|QUOTA_TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE_NAME_STR
argument_list|,
literal|"quota"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|QUOTA_FAMILY_INFO
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|QUOTA_FAMILY_USAGE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"u"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|QUOTA_QUALIFIER_SETTINGS
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"s"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|QUOTA_QUALIFIER_SETTINGS_PREFIX
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"s."
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|QUOTA_QUALIFIER_POLICY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|QUOTA_SNAPSHOT_SIZE_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ss"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|QUOTA_POLICY_COLUMN
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|QUOTA_FAMILY_USAGE
argument_list|)
operator|+
literal|":"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|QUOTA_QUALIFIER_POLICY
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|QUOTA_USER_ROW_KEY_PREFIX
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"u."
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|QUOTA_TABLE_ROW_KEY_PREFIX
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"t."
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|QUOTA_NAMESPACE_ROW_KEY_PREFIX
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"n."
argument_list|)
decl_stmt|;
comment|/* =========================================================================    *  Quota "settings" helpers    */
specifier|public
specifier|static
name|Quotas
name|getTableQuota
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
specifier|final
name|TableName
name|table
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getQuotas
argument_list|(
name|connection
argument_list|,
name|getTableRowKey
argument_list|(
name|table
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Quotas
name|getNamespaceQuota
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getQuotas
argument_list|(
name|connection
argument_list|,
name|getNamespaceRowKey
argument_list|(
name|namespace
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Quotas
name|getUserQuota
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
specifier|final
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getQuotas
argument_list|(
name|connection
argument_list|,
name|getUserRowKey
argument_list|(
name|user
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Quotas
name|getUserQuota
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|TableName
name|table
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getQuotas
argument_list|(
name|connection
argument_list|,
name|getUserRowKey
argument_list|(
name|user
argument_list|)
argument_list|,
name|getSettingsQualifierForUserTable
argument_list|(
name|table
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Quotas
name|getUserQuota
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getQuotas
argument_list|(
name|connection
argument_list|,
name|getUserRowKey
argument_list|(
name|user
argument_list|)
argument_list|,
name|getSettingsQualifierForUserNamespace
argument_list|(
name|namespace
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Quotas
name|getQuotas
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
specifier|final
name|byte
index|[]
name|rowKey
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getQuotas
argument_list|(
name|connection
argument_list|,
name|rowKey
argument_list|,
name|QUOTA_QUALIFIER_SETTINGS
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Quotas
name|getQuotas
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
specifier|final
name|byte
index|[]
name|rowKey
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|QUOTA_FAMILY_INFO
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|doGet
argument_list|(
name|connection
argument_list|,
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|quotasFromData
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|QUOTA_FAMILY_INFO
argument_list|,
name|qualifier
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Get
name|makeGetForTableQuotas
parameter_list|(
specifier|final
name|TableName
name|table
parameter_list|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getTableRowKey
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|QUOTA_FAMILY_INFO
argument_list|)
expr_stmt|;
return|return
name|get
return|;
block|}
specifier|public
specifier|static
name|Get
name|makeGetForNamespaceQuotas
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getNamespaceRowKey
argument_list|(
name|namespace
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|QUOTA_FAMILY_INFO
argument_list|)
expr_stmt|;
return|return
name|get
return|;
block|}
specifier|public
specifier|static
name|Get
name|makeGetForUserQuotas
parameter_list|(
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|Iterable
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|namespaces
parameter_list|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getUserRowKey
argument_list|(
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|QUOTA_FAMILY_INFO
argument_list|,
name|QUOTA_QUALIFIER_SETTINGS
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|TableName
name|table
range|:
name|tables
control|)
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|QUOTA_FAMILY_INFO
argument_list|,
name|getSettingsQualifierForUserTable
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|ns
range|:
name|namespaces
control|)
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|QUOTA_FAMILY_INFO
argument_list|,
name|getSettingsQualifierForUserNamespace
argument_list|(
name|ns
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|get
return|;
block|}
specifier|public
specifier|static
name|Scan
name|makeScan
parameter_list|(
specifier|final
name|QuotaFilter
name|filter
parameter_list|)
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|QUOTA_FAMILY_INFO
argument_list|)
expr_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
operator|!
name|filter
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setFilter
argument_list|(
name|makeFilter
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|scan
return|;
block|}
comment|/**    * converts quotafilter to serializeable filterlists.    */
specifier|public
specifier|static
name|Filter
name|makeFilter
parameter_list|(
specifier|final
name|QuotaFilter
name|filter
parameter_list|)
block|{
name|FilterList
name|filterList
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isEmpty
argument_list|(
name|filter
operator|.
name|getUserFilter
argument_list|()
argument_list|)
condition|)
block|{
name|FilterList
name|userFilters
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|)
decl_stmt|;
name|boolean
name|hasFilter
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isEmpty
argument_list|(
name|filter
operator|.
name|getNamespaceFilter
argument_list|()
argument_list|)
condition|)
block|{
name|FilterList
name|nsFilters
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|)
decl_stmt|;
name|nsFilters
operator|.
name|addFilter
argument_list|(
operator|new
name|RowFilter
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
name|getUserRowKeyRegex
argument_list|(
name|filter
operator|.
name|getUserFilter
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|nsFilters
operator|.
name|addFilter
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
name|getSettingsQualifierRegexForUserNamespace
argument_list|(
name|filter
operator|.
name|getNamespaceFilter
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|userFilters
operator|.
name|addFilter
argument_list|(
name|nsFilters
argument_list|)
expr_stmt|;
name|hasFilter
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isEmpty
argument_list|(
name|filter
operator|.
name|getTableFilter
argument_list|()
argument_list|)
condition|)
block|{
name|FilterList
name|tableFilters
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|)
decl_stmt|;
name|tableFilters
operator|.
name|addFilter
argument_list|(
operator|new
name|RowFilter
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
name|getUserRowKeyRegex
argument_list|(
name|filter
operator|.
name|getUserFilter
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tableFilters
operator|.
name|addFilter
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
name|getSettingsQualifierRegexForUserTable
argument_list|(
name|filter
operator|.
name|getTableFilter
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|userFilters
operator|.
name|addFilter
argument_list|(
name|tableFilters
argument_list|)
expr_stmt|;
name|hasFilter
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasFilter
condition|)
block|{
name|userFilters
operator|.
name|addFilter
argument_list|(
operator|new
name|RowFilter
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
name|getUserRowKeyRegex
argument_list|(
name|filter
operator|.
name|getUserFilter
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|filterList
operator|.
name|addFilter
argument_list|(
name|userFilters
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Strings
operator|.
name|isEmpty
argument_list|(
name|filter
operator|.
name|getTableFilter
argument_list|()
argument_list|)
condition|)
block|{
name|filterList
operator|.
name|addFilter
argument_list|(
operator|new
name|RowFilter
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
name|getTableRowKeyRegex
argument_list|(
name|filter
operator|.
name|getTableFilter
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Strings
operator|.
name|isEmpty
argument_list|(
name|filter
operator|.
name|getNamespaceFilter
argument_list|()
argument_list|)
condition|)
block|{
name|filterList
operator|.
name|addFilter
argument_list|(
operator|new
name|RowFilter
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
name|getNamespaceRowKeyRegex
argument_list|(
name|filter
operator|.
name|getNamespaceFilter
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|filterList
return|;
block|}
comment|/**    * Creates a {@link Scan} which returns only quota snapshots from the quota table.    */
specifier|public
specifier|static
name|Scan
name|makeQuotaSnapshotScan
parameter_list|()
block|{
return|return
name|makeQuotaSnapshotScanForTable
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * Fetches all {@link SpaceQuotaSnapshot} objects from the {@code hbase:quota} table.    *    * @param conn The HBase connection    * @return A map of table names and their computed snapshot.    */
specifier|public
specifier|static
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|getSnapshots
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|snapshots
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|quotaTable
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|QUOTA_TABLE_NAME
argument_list|)
init|;
name|ResultScanner
name|rs
operator|=
name|quotaTable
operator|.
name|getScanner
argument_list|(
name|makeQuotaSnapshotScan
argument_list|()
argument_list|)
init|)
block|{
for|for
control|(
name|Result
name|r
range|:
name|rs
control|)
block|{
name|extractQuotaSnapshot
argument_list|(
name|r
argument_list|,
name|snapshots
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|snapshots
return|;
block|}
comment|/**    * Creates a {@link Scan} which returns only {@link SpaceQuotaSnapshot} from the quota table for a    * specific table.    * @param tn Optionally, a table name to limit the scan's rowkey space. Can be null.    */
specifier|public
specifier|static
name|Scan
name|makeQuotaSnapshotScanForTable
parameter_list|(
name|TableName
name|tn
parameter_list|)
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
comment|// Limit to "u:v" column
name|s
operator|.
name|addColumn
argument_list|(
name|QUOTA_FAMILY_USAGE
argument_list|,
name|QUOTA_QUALIFIER_POLICY
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|tn
condition|)
block|{
name|s
operator|.
name|setRowPrefixFilter
argument_list|(
name|QUOTA_TABLE_ROW_KEY_PREFIX
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|row
init|=
name|getTableRowKey
argument_list|(
name|tn
argument_list|)
decl_stmt|;
comment|// Limit rowspace to the "t:" prefix
name|s
operator|.
name|withStartRow
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
operator|.
name|withStopRow
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
comment|/**    * Extracts the {@link SpaceViolationPolicy} and {@link TableName} from the provided    * {@link Result} and adds them to the given {@link Map}. If the result does not contain    * the expected information or the serialized policy in the value is invalid, this method    * will throw an {@link IllegalArgumentException}.    *    * @param result A row from the quota table.    * @param snapshots A map of snapshots to add the result of this method into.    */
specifier|public
specifier|static
name|void
name|extractQuotaSnapshot
parameter_list|(
name|Result
name|result
parameter_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|snapshots
parameter_list|)
block|{
name|byte
index|[]
name|row
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|result
argument_list|)
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Provided result had a null row"
argument_list|)
throw|;
block|}
specifier|final
name|TableName
name|targetTableName
init|=
name|getTableFromRowKey
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Cell
name|c
init|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|QUOTA_FAMILY_USAGE
argument_list|,
name|QUOTA_QUALIFIER_POLICY
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Result did not contain the expected column "
operator|+
name|QUOTA_POLICY_COLUMN
operator|+
literal|", "
operator|+
name|result
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|ByteString
name|buffer
init|=
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|c
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|c
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getValueLength
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|QuotaProtos
operator|.
name|SpaceQuotaSnapshot
name|snapshot
init|=
name|QuotaProtos
operator|.
name|SpaceQuotaSnapshot
operator|.
name|parseFrom
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|snapshots
operator|.
name|put
argument_list|(
name|targetTableName
argument_list|,
name|SpaceQuotaSnapshot
operator|.
name|toSpaceQuotaSnapshot
argument_list|(
name|snapshot
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Result did not contain a valid SpaceQuota protocol buffer message"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|UserQuotasVisitor
block|{
name|void
name|visitUserQuotas
parameter_list|(
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|visitUserQuotas
parameter_list|(
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|TableName
name|table
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|visitUserQuotas
parameter_list|(
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|public
specifier|static
interface|interface
name|TableQuotasVisitor
block|{
name|void
name|visitTableQuotas
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|public
specifier|static
interface|interface
name|NamespaceQuotasVisitor
block|{
name|void
name|visitNamespaceQuotas
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|public
specifier|static
interface|interface
name|QuotasVisitor
extends|extends
name|UserQuotasVisitor
extends|,
name|TableQuotasVisitor
extends|,
name|NamespaceQuotasVisitor
block|{   }
specifier|public
specifier|static
name|void
name|parseResult
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|,
specifier|final
name|QuotasVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|result
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNamespaceRowKey
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|parseNamespaceResult
argument_list|(
name|result
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isTableRowKey
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|parseTableResult
argument_list|(
name|result
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isUserRowKey
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|parseUserResult
argument_list|(
name|result
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"unexpected row-key: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|parseResultToCollection
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|,
name|Collection
argument_list|<
name|QuotaSettings
argument_list|>
name|quotaSettings
parameter_list|)
throws|throws
name|IOException
block|{
name|QuotaTableUtil
operator|.
name|parseResult
argument_list|(
name|result
argument_list|,
operator|new
name|QuotaTableUtil
operator|.
name|QuotasVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visitUserQuotas
parameter_list|(
name|String
name|userName
parameter_list|,
name|Quotas
name|quotas
parameter_list|)
block|{
name|quotaSettings
operator|.
name|addAll
argument_list|(
name|QuotaSettingsFactory
operator|.
name|fromUserQuotas
argument_list|(
name|userName
argument_list|,
name|quotas
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitUserQuotas
parameter_list|(
name|String
name|userName
parameter_list|,
name|TableName
name|table
parameter_list|,
name|Quotas
name|quotas
parameter_list|)
block|{
name|quotaSettings
operator|.
name|addAll
argument_list|(
name|QuotaSettingsFactory
operator|.
name|fromUserQuotas
argument_list|(
name|userName
argument_list|,
name|table
argument_list|,
name|quotas
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitUserQuotas
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Quotas
name|quotas
parameter_list|)
block|{
name|quotaSettings
operator|.
name|addAll
argument_list|(
name|QuotaSettingsFactory
operator|.
name|fromUserQuotas
argument_list|(
name|userName
argument_list|,
name|namespace
argument_list|,
name|quotas
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitTableQuotas
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Quotas
name|quotas
parameter_list|)
block|{
name|quotaSettings
operator|.
name|addAll
argument_list|(
name|QuotaSettingsFactory
operator|.
name|fromTableQuotas
argument_list|(
name|tableName
argument_list|,
name|quotas
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitNamespaceQuotas
parameter_list|(
name|String
name|namespace
parameter_list|,
name|Quotas
name|quotas
parameter_list|)
block|{
name|quotaSettings
operator|.
name|addAll
argument_list|(
name|QuotaSettingsFactory
operator|.
name|fromNamespaceQuotas
argument_list|(
name|namespace
argument_list|,
name|quotas
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|parseNamespaceResult
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|,
specifier|final
name|NamespaceQuotasVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|namespace
init|=
name|getNamespaceFromRowKey
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|parseNamespaceResult
argument_list|(
name|namespace
argument_list|,
name|result
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|parseNamespaceResult
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|Result
name|result
parameter_list|,
specifier|final
name|NamespaceQuotasVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|result
operator|.
name|getValue
argument_list|(
name|QUOTA_FAMILY_INFO
argument_list|,
name|QUOTA_QUALIFIER_SETTINGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|Quotas
name|quotas
init|=
name|quotasFromData
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|visitNamespaceQuotas
argument_list|(
name|namespace
argument_list|,
name|quotas
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|parseTableResult
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|,
specifier|final
name|TableQuotasVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|TableName
name|table
init|=
name|getTableFromRowKey
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|parseTableResult
argument_list|(
name|table
argument_list|,
name|result
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|parseTableResult
parameter_list|(
specifier|final
name|TableName
name|table
parameter_list|,
specifier|final
name|Result
name|result
parameter_list|,
specifier|final
name|TableQuotasVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|result
operator|.
name|getValue
argument_list|(
name|QUOTA_FAMILY_INFO
argument_list|,
name|QUOTA_QUALIFIER_SETTINGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|Quotas
name|quotas
init|=
name|quotasFromData
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|visitTableQuotas
argument_list|(
name|table
argument_list|,
name|quotas
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|parseUserResult
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|,
specifier|final
name|UserQuotasVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|userName
init|=
name|getUserFromRowKey
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|parseUserResult
argument_list|(
name|userName
argument_list|,
name|result
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|parseUserResult
parameter_list|(
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|Result
name|result
parameter_list|,
specifier|final
name|UserQuotasVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|familyMap
init|=
name|result
operator|.
name|getFamilyMap
argument_list|(
name|QUOTA_FAMILY_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|familyMap
operator|==
literal|null
operator|||
name|familyMap
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|familyMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Quotas
name|quotas
init|=
name|quotasFromData
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|startsWith
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|QUOTA_QUALIFIER_SETTINGS_PREFIX
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|QUOTA_QUALIFIER_SETTINGS_PREFIX
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
name|TableName
operator|.
name|NAMESPACE_DELIM
condition|)
block|{
name|String
name|namespace
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|visitUserQuotas
argument_list|(
name|userName
argument_list|,
name|namespace
argument_list|,
name|quotas
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|visitUserQuotas
argument_list|(
name|userName
argument_list|,
name|table
argument_list|,
name|quotas
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|QUOTA_QUALIFIER_SETTINGS
argument_list|)
condition|)
block|{
name|visitor
operator|.
name|visitUserQuotas
argument_list|(
name|userName
argument_list|,
name|quotas
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Creates a {@link Put} to store the given {@code snapshot} for the given {@code tableName} in    * the quota table.    */
specifier|static
name|Put
name|createPutForSpaceSnapshot
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|getTableRowKey
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|QUOTA_FAMILY_USAGE
argument_list|,
name|QUOTA_QUALIFIER_POLICY
argument_list|,
name|SpaceQuotaSnapshot
operator|.
name|toProtoSnapshot
argument_list|(
name|snapshot
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
comment|/**    * Creates a {@link Get} for the HBase snapshot's size against the given table.    */
specifier|static
name|Get
name|makeGetForSnapshotSize
parameter_list|(
name|TableName
name|tn
parameter_list|,
name|String
name|snapshot
parameter_list|)
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|QUOTA_TABLE_ROW_KEY_PREFIX
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tn
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|g
operator|.
name|addColumn
argument_list|(
name|QUOTA_FAMILY_USAGE
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|QUOTA_SNAPSHOT_SIZE_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|snapshot
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|g
return|;
block|}
comment|/**    * Creates a {@link Put} to persist the current size of the {@code snapshot} with respect to    * the given {@code table}.    */
specifier|static
name|Put
name|createPutForSnapshotSize
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
name|snapshot
parameter_list|,
name|long
name|size
parameter_list|)
block|{
comment|// We just need a pb message with some `long usage`, so we can just reuse the
comment|// SpaceQuotaSnapshot message instead of creating a new one.
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|getTableRowKey
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|QUOTA_FAMILY_USAGE
argument_list|,
name|getSnapshotSizeQualifier
argument_list|(
name|snapshot
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|SpaceQuotaSnapshot
operator|.
name|newBuilder
argument_list|()
operator|.
name|setQuotaUsage
argument_list|(
name|size
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
comment|/**    * Creates a {@code Put} for the namespace's total snapshot size.    */
specifier|static
name|Put
name|createPutForNamespaceSnapshotSize
parameter_list|(
name|String
name|namespace
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|getNamespaceRowKey
argument_list|(
name|namespace
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|QUOTA_FAMILY_USAGE
argument_list|,
name|QUOTA_SNAPSHOT_SIZE_QUALIFIER
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|SpaceQuotaSnapshot
operator|.
name|newBuilder
argument_list|()
operator|.
name|setQuotaUsage
argument_list|(
name|size
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
comment|/**    * Fetches the computed size of all snapshots against tables in a namespace for space quotas.    */
specifier|static
name|long
name|getNamespaceSnapshotSize
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|quotaTable
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
init|)
block|{
name|Result
name|r
init|=
name|quotaTable
operator|.
name|get
argument_list|(
name|createGetNamespaceSnapshotSize
argument_list|(
name|namespace
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|0L
return|;
block|}
name|r
operator|.
name|advance
argument_list|()
expr_stmt|;
return|return
name|parseSnapshotSize
argument_list|(
name|r
operator|.
name|current
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not parse snapshot size value for namespace "
operator|+
name|namespace
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates a {@code Get} to fetch the namespace's total snapshot size.    */
specifier|static
name|Get
name|createGetNamespaceSnapshotSize
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|getNamespaceRowKey
argument_list|(
name|namespace
argument_list|)
argument_list|)
decl_stmt|;
name|g
operator|.
name|addColumn
argument_list|(
name|QUOTA_FAMILY_USAGE
argument_list|,
name|QUOTA_SNAPSHOT_SIZE_QUALIFIER
argument_list|)
expr_stmt|;
return|return
name|g
return|;
block|}
comment|/**    * Parses the snapshot size from the given Cell's value.    */
specifier|static
name|long
name|parseSnapshotSize
parameter_list|(
name|Cell
name|c
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|ByteString
name|bs
init|=
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|c
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|c
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getValueLength
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|QuotaProtos
operator|.
name|SpaceQuotaSnapshot
operator|.
name|parseFrom
argument_list|(
name|bs
argument_list|)
operator|.
name|getQuotaUsage
argument_list|()
return|;
block|}
specifier|static
name|Scan
name|createScanForSnapshotSizes
parameter_list|(
name|TableName
name|table
parameter_list|)
block|{
name|byte
index|[]
name|rowkey
init|=
name|getTableRowKey
argument_list|(
name|table
argument_list|)
decl_stmt|;
return|return
operator|new
name|Scan
argument_list|()
comment|// Fetch just this one row
operator|.
name|withStartRow
argument_list|(
name|rowkey
argument_list|)
operator|.
name|withStopRow
argument_list|(
name|rowkey
argument_list|,
literal|true
argument_list|)
comment|// Just the usage family
operator|.
name|addFamily
argument_list|(
name|QUOTA_FAMILY_USAGE
argument_list|)
comment|// Only the snapshot size qualifiers
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnPrefixFilter
argument_list|(
name|QUOTA_SNAPSHOT_SIZE_QUALIFIER
argument_list|)
argument_list|)
return|;
block|}
comment|/* =========================================================================    *  Space quota status RPC helpers    */
comment|/**    * Fetches the table sizes on the filesystem as tracked by the HBase Master.    */
specifier|public
specifier|static
name|Map
argument_list|<
name|TableName
argument_list|,
name|Long
argument_list|>
name|getMasterReportedTableSizes
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|conn
operator|instanceof
name|ClusterConnection
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected a ClusterConnection"
argument_list|)
throw|;
block|}
name|ClusterConnection
name|clusterConn
init|=
operator|(
name|ClusterConnection
operator|)
name|conn
decl_stmt|;
name|GetSpaceQuotaRegionSizesResponse
name|response
init|=
name|QuotaStatusCalls
operator|.
name|getMasterRegionSizes
argument_list|(
name|clusterConn
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|Long
argument_list|>
name|tableSizes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionSizes
name|sizes
range|:
name|response
operator|.
name|getSizesList
argument_list|()
control|)
block|{
name|TableName
name|tn
init|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|sizes
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|tableSizes
operator|.
name|put
argument_list|(
name|tn
argument_list|,
name|sizes
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tableSizes
return|;
block|}
comment|/**    * Fetches the observed {@link SpaceQuotaSnapshot}s observed by a RegionServer.    */
specifier|public
specifier|static
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|getRegionServerQuotaSnapshots
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|ServerName
name|regionServer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|conn
operator|instanceof
name|ClusterConnection
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected a ClusterConnection"
argument_list|)
throw|;
block|}
name|ClusterConnection
name|clusterConn
init|=
operator|(
name|ClusterConnection
operator|)
name|conn
decl_stmt|;
name|GetSpaceQuotaSnapshotsResponse
name|response
init|=
name|QuotaStatusCalls
operator|.
name|getRegionServerQuotaSnapshot
argument_list|(
name|clusterConn
argument_list|,
literal|0
argument_list|,
name|regionServer
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|snapshots
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableQuotaSnapshot
name|snapshot
range|:
name|response
operator|.
name|getSnapshotsList
argument_list|()
control|)
block|{
name|snapshots
operator|.
name|put
argument_list|(
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|snapshot
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|SpaceQuotaSnapshot
operator|.
name|toSpaceQuotaSnapshot
argument_list|(
name|snapshot
operator|.
name|getSnapshot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|snapshots
return|;
block|}
comment|/**    * Returns the Master's view of a quota on the given {@code tableName} or null if the    * Master has no quota information on that table.    */
specifier|public
specifier|static
name|SpaceQuotaSnapshot
name|getCurrentSnapshot
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|TableName
name|tn
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|conn
operator|instanceof
name|ClusterConnection
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected a ClusterConnection"
argument_list|)
throw|;
block|}
name|ClusterConnection
name|clusterConn
init|=
operator|(
name|ClusterConnection
operator|)
name|conn
decl_stmt|;
name|GetQuotaStatesResponse
name|resp
init|=
name|QuotaStatusCalls
operator|.
name|getMasterQuotaStates
argument_list|(
name|clusterConn
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|HBaseProtos
operator|.
name|TableName
name|protoTableName
init|=
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|tn
argument_list|)
decl_stmt|;
for|for
control|(
name|GetQuotaStatesResponse
operator|.
name|TableQuotaSnapshot
name|tableSnapshot
range|:
name|resp
operator|.
name|getTableSnapshotsList
argument_list|()
control|)
block|{
if|if
condition|(
name|protoTableName
operator|.
name|equals
argument_list|(
name|tableSnapshot
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|SpaceQuotaSnapshot
operator|.
name|toSpaceQuotaSnapshot
argument_list|(
name|tableSnapshot
operator|.
name|getSnapshot
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Returns the Master's view of a quota on the given {@code namespace} or null if the    * Master has no quota information on that namespace.    */
specifier|public
specifier|static
name|SpaceQuotaSnapshot
name|getCurrentSnapshot
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|conn
operator|instanceof
name|ClusterConnection
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected a ClusterConnection"
argument_list|)
throw|;
block|}
name|ClusterConnection
name|clusterConn
init|=
operator|(
name|ClusterConnection
operator|)
name|conn
decl_stmt|;
name|GetQuotaStatesResponse
name|resp
init|=
name|QuotaStatusCalls
operator|.
name|getMasterQuotaStates
argument_list|(
name|clusterConn
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|GetQuotaStatesResponse
operator|.
name|NamespaceQuotaSnapshot
name|nsSnapshot
range|:
name|resp
operator|.
name|getNsSnapshotsList
argument_list|()
control|)
block|{
if|if
condition|(
name|namespace
operator|.
name|equals
argument_list|(
name|nsSnapshot
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|SpaceQuotaSnapshot
operator|.
name|toSpaceQuotaSnapshot
argument_list|(
name|nsSnapshot
operator|.
name|getSnapshot
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/* =========================================================================    *  Quotas protobuf helpers    */
specifier|protected
specifier|static
name|Quotas
name|quotasFromData
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|quotasFromData
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|Quotas
name|quotasFromData
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|magicLen
init|=
name|ProtobufMagic
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ProtobufMagic
operator|.
name|isPBMagicPrefix
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|magicLen
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing pb magic prefix"
argument_list|)
throw|;
block|}
return|return
name|Quotas
operator|.
name|parseFrom
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|,
name|offset
operator|+
name|magicLen
argument_list|,
name|length
operator|-
name|magicLen
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|byte
index|[]
name|quotasToData
parameter_list|(
specifier|final
name|Quotas
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|stream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|ProtobufMagic
operator|.
name|PB_MAGIC
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return
name|stream
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isEmptyQuota
parameter_list|(
specifier|final
name|Quotas
name|quotas
parameter_list|)
block|{
name|boolean
name|hasSettings
init|=
literal|false
decl_stmt|;
name|hasSettings
operator||=
name|quotas
operator|.
name|hasThrottle
argument_list|()
expr_stmt|;
name|hasSettings
operator||=
name|quotas
operator|.
name|hasBypassGlobals
argument_list|()
expr_stmt|;
comment|// Only when there is a space quota, make sure there's actually both fields provided
comment|// Otherwise, it's a noop.
if|if
condition|(
name|quotas
operator|.
name|hasSpace
argument_list|()
condition|)
block|{
name|hasSettings
operator||=
operator|(
name|quotas
operator|.
name|getSpace
argument_list|()
operator|.
name|hasSoftLimit
argument_list|()
operator|&&
name|quotas
operator|.
name|getSpace
argument_list|()
operator|.
name|hasViolationPolicy
argument_list|()
operator|)
expr_stmt|;
block|}
return|return
operator|!
name|hasSettings
return|;
block|}
comment|/* =========================================================================    *  HTable helpers    */
specifier|protected
specifier|static
name|Result
name|doGet
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|QUOTA_TABLE_NAME
argument_list|)
init|)
block|{
return|return
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
return|;
block|}
block|}
specifier|protected
specifier|static
name|Result
index|[]
name|doGet
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
specifier|final
name|List
argument_list|<
name|Get
argument_list|>
name|gets
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|QUOTA_TABLE_NAME
argument_list|)
init|)
block|{
return|return
name|table
operator|.
name|get
argument_list|(
name|gets
argument_list|)
return|;
block|}
block|}
comment|/* =========================================================================    *  Quota table row key helpers    */
specifier|protected
specifier|static
name|byte
index|[]
name|getUserRowKey
parameter_list|(
specifier|final
name|String
name|user
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|add
argument_list|(
name|QUOTA_USER_ROW_KEY_PREFIX
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|byte
index|[]
name|getTableRowKey
parameter_list|(
specifier|final
name|TableName
name|table
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|add
argument_list|(
name|QUOTA_TABLE_ROW_KEY_PREFIX
argument_list|,
name|table
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|byte
index|[]
name|getNamespaceRowKey
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|add
argument_list|(
name|QUOTA_NAMESPACE_ROW_KEY_PREFIX
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|namespace
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|byte
index|[]
name|getSettingsQualifierForUserTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|add
argument_list|(
name|QUOTA_QUALIFIER_SETTINGS_PREFIX
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|byte
index|[]
name|getSettingsQualifierForUserNamespace
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|add
argument_list|(
name|QUOTA_QUALIFIER_SETTINGS_PREFIX
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|namespace
operator|+
name|TableName
operator|.
name|NAMESPACE_DELIM
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|String
name|getUserRowKeyRegex
parameter_list|(
specifier|final
name|String
name|user
parameter_list|)
block|{
return|return
name|getRowKeyRegEx
argument_list|(
name|QUOTA_USER_ROW_KEY_PREFIX
argument_list|,
name|user
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|String
name|getTableRowKeyRegex
parameter_list|(
specifier|final
name|String
name|table
parameter_list|)
block|{
return|return
name|getRowKeyRegEx
argument_list|(
name|QUOTA_TABLE_ROW_KEY_PREFIX
argument_list|,
name|table
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|String
name|getNamespaceRowKeyRegex
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|)
block|{
return|return
name|getRowKeyRegEx
argument_list|(
name|QUOTA_NAMESPACE_ROW_KEY_PREFIX
argument_list|,
name|namespace
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getRowKeyRegEx
parameter_list|(
specifier|final
name|byte
index|[]
name|prefix
parameter_list|,
specifier|final
name|String
name|regex
parameter_list|)
block|{
return|return
literal|'^'
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|prefix
argument_list|)
argument_list|)
operator|+
name|regex
operator|+
literal|'$'
return|;
block|}
specifier|protected
specifier|static
name|String
name|getSettingsQualifierRegexForUserTable
parameter_list|(
specifier|final
name|String
name|table
parameter_list|)
block|{
return|return
literal|'^'
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|QUOTA_QUALIFIER_SETTINGS_PREFIX
argument_list|)
argument_list|)
operator|+
name|table
operator|+
literal|"(?<!"
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|Character
operator|.
name|toString
argument_list|(
name|TableName
operator|.
name|NAMESPACE_DELIM
argument_list|)
argument_list|)
operator|+
literal|")$"
return|;
block|}
specifier|protected
specifier|static
name|String
name|getSettingsQualifierRegexForUserNamespace
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|)
block|{
return|return
literal|'^'
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|QUOTA_QUALIFIER_SETTINGS_PREFIX
argument_list|)
argument_list|)
operator|+
name|namespace
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|Character
operator|.
name|toString
argument_list|(
name|TableName
operator|.
name|NAMESPACE_DELIM
argument_list|)
argument_list|)
operator|+
literal|'$'
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|isNamespaceRowKey
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|startsWith
argument_list|(
name|key
argument_list|,
name|QUOTA_NAMESPACE_ROW_KEY_PREFIX
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|String
name|getNamespaceFromRowKey
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|key
argument_list|,
name|QUOTA_NAMESPACE_ROW_KEY_PREFIX
operator|.
name|length
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|isTableRowKey
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|startsWith
argument_list|(
name|key
argument_list|,
name|QUOTA_TABLE_ROW_KEY_PREFIX
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|TableName
name|getTableFromRowKey
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|TableName
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|key
argument_list|,
name|QUOTA_TABLE_ROW_KEY_PREFIX
operator|.
name|length
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|isUserRowKey
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|startsWith
argument_list|(
name|key
argument_list|,
name|QUOTA_USER_ROW_KEY_PREFIX
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|String
name|getUserFromRowKey
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|key
argument_list|,
name|QUOTA_USER_ROW_KEY_PREFIX
operator|.
name|length
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|SpaceQuota
name|getProtoViolationPolicy
parameter_list|(
name|SpaceViolationPolicy
name|policy
parameter_list|)
block|{
return|return
name|SpaceQuota
operator|.
name|newBuilder
argument_list|()
operator|.
name|setViolationPolicy
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoViolationPolicy
argument_list|(
name|policy
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|SpaceViolationPolicy
name|getViolationPolicy
parameter_list|(
name|SpaceQuota
name|proto
parameter_list|)
block|{
if|if
condition|(
operator|!
name|proto
operator|.
name|hasViolationPolicy
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Protobuf SpaceQuota does not have violation policy."
argument_list|)
throw|;
block|}
return|return
name|ProtobufUtil
operator|.
name|toViolationPolicy
argument_list|(
name|proto
operator|.
name|getViolationPolicy
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|byte
index|[]
name|getSnapshotSizeQualifier
parameter_list|(
name|String
name|snapshotName
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|add
argument_list|(
name|QUOTA_SNAPSHOT_SIZE_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|snapshotName
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|long
name|extractSnapshotSize
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|ByteString
name|byteStr
init|=
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|SpaceQuotaSnapshot
operator|.
name|parseFrom
argument_list|(
name|byteStr
argument_list|)
operator|.
name|getQuotaUsage
argument_list|()
return|;
block|}
block|}
end_class

end_unit

