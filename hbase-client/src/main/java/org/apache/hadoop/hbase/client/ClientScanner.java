begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|calcEstimatedSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|createClosestRowAfter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|createClosestRowBefore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|mutable
operator|.
name|MutableBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownScannerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ScannerCallable
operator|.
name|MoreResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|OutOfOrderScannerNextException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|ScannerResetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerStoppedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MapReduceProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Implements the scanner interface for the HBase client. If there are multiple regions in a table,  * this scanner will iterate through them all.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|abstract
class|class
name|ClientScanner
extends|extends
name|AbstractClientScanner
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ClientScanner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Scan
name|scan
decl_stmt|;
specifier|protected
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
comment|// Current region scanner is against. Gets cleared if current region goes
comment|// wonky: e.g. if it splits on us.
specifier|protected
name|HRegionInfo
name|currentRegion
init|=
literal|null
decl_stmt|;
specifier|protected
name|ScannerCallableWithReplicas
name|callable
init|=
literal|null
decl_stmt|;
specifier|protected
name|Queue
argument_list|<
name|Result
argument_list|>
name|cache
decl_stmt|;
comment|/**    * A list of partial results that have been returned from the server. This list should only    * contain results if this scanner does not have enough partial results to form the complete    * result.    */
specifier|protected
specifier|final
name|LinkedList
argument_list|<
name|Result
argument_list|>
name|partialResults
init|=
operator|new
name|LinkedList
argument_list|<
name|Result
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * The row for which we are accumulating partial Results (i.e. the row of the Results stored    * inside partialResults). Changes to partialResultsRow and partialResults are kept in sync via    * the methods {@link #addToPartialResults(Result)} and {@link #clearPartialResults()}    */
specifier|protected
name|byte
index|[]
name|partialResultsRow
init|=
literal|null
decl_stmt|;
comment|/**    * The last cell from a not full Row which is added to cache    */
specifier|protected
name|Cell
name|lastCellLoadedToCache
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|final
name|int
name|caching
decl_stmt|;
specifier|protected
name|long
name|lastNext
decl_stmt|;
comment|// Keep lastResult returned successfully in case we have to reset scanner.
specifier|protected
name|Result
name|lastResult
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|final
name|long
name|maxScannerResultSize
decl_stmt|;
specifier|private
specifier|final
name|ClusterConnection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|protected
specifier|final
name|int
name|scannerTimeout
decl_stmt|;
specifier|protected
name|boolean
name|scanMetricsPublished
init|=
literal|false
decl_stmt|;
specifier|protected
name|RpcRetryingCaller
argument_list|<
name|Result
index|[]
argument_list|>
name|caller
decl_stmt|;
specifier|protected
name|RpcControllerFactory
name|rpcControllerFactory
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
comment|// The timeout on the primary. Applicable if there are multiple replicas for a region
comment|// In that case, we will only wait for this much timeout on the primary before going
comment|// to the replicas and trying the same scan. Note that the retries will still happen
comment|// on each replica and the first successful results will be taken. A timeout of 0 is
comment|// disallowed.
specifier|protected
specifier|final
name|int
name|primaryOperationTimeout
decl_stmt|;
specifier|private
name|int
name|retries
decl_stmt|;
specifier|protected
specifier|final
name|ExecutorService
name|pool
decl_stmt|;
comment|/**    * Create a new ClientScanner for the specified table Note that the passed {@link Scan}'s start    * row maybe changed changed.    * @param conf The {@link Configuration} to use.    * @param scan {@link Scan} to use in this scanner    * @param tableName The table that we wish to scan    * @param connection Connection identifying the cluster    * @throws IOException    */
specifier|public
name|ClientScanner
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
name|ClusterConnection
name|connection
parameter_list|,
name|RpcRetryingCallerFactory
name|rpcFactory
parameter_list|,
name|RpcControllerFactory
name|controllerFactory
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|int
name|primaryOperationTimeout
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Scan table="
operator|+
name|tableName
operator|+
literal|", startRow="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|scan
operator|=
name|scan
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|lastNext
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|primaryOperationTimeout
operator|=
name|primaryOperationTimeout
expr_stmt|;
name|this
operator|.
name|retries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_RETRIES_NUMBER
argument_list|)
expr_stmt|;
if|if
condition|(
name|scan
operator|.
name|getMaxResultSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|maxScannerResultSize
operator|=
name|scan
operator|.
name|getMaxResultSize
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|maxScannerResultSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|scannerTimeout
operator|=
name|HBaseConfiguration
operator|.
name|getInt
argument_list|(
name|conf
argument_list|,
name|HConstants
operator|.
name|HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD
argument_list|,
name|HConstants
operator|.
name|HBASE_REGIONSERVER_LEASE_PERIOD_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD
argument_list|)
expr_stmt|;
comment|// check if application wants to collect scan metrics
name|initScanMetrics
argument_list|(
name|scan
argument_list|)
expr_stmt|;
comment|// Use the caching from the Scan. If not set, use the default cache setting for this table.
if|if
condition|(
name|this
operator|.
name|scan
operator|.
name|getCaching
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|caching
operator|=
name|this
operator|.
name|scan
operator|.
name|getCaching
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|caching
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_SCANNER_CACHING
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_SCANNER_CACHING
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|caller
operator|=
name|rpcFactory
operator|.
expr|<
name|Result
index|[]
operator|>
name|newCaller
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcControllerFactory
operator|=
name|controllerFactory
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|initCache
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|initCache
parameter_list|()
function_decl|;
specifier|protected
name|ClusterConnection
name|getConnection
parameter_list|()
block|{
return|return
name|this
operator|.
name|connection
return|;
block|}
specifier|protected
name|TableName
name|getTable
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
return|;
block|}
specifier|protected
name|int
name|getRetries
parameter_list|()
block|{
return|return
name|this
operator|.
name|retries
return|;
block|}
specifier|protected
name|int
name|getScannerTimeout
parameter_list|()
block|{
return|return
name|this
operator|.
name|scannerTimeout
return|;
block|}
specifier|protected
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
specifier|protected
name|Scan
name|getScan
parameter_list|()
block|{
return|return
name|scan
return|;
block|}
specifier|protected
name|ExecutorService
name|getPool
parameter_list|()
block|{
return|return
name|pool
return|;
block|}
specifier|protected
name|int
name|getPrimaryOperationTimeout
parameter_list|()
block|{
return|return
name|primaryOperationTimeout
return|;
block|}
specifier|protected
name|int
name|getCaching
parameter_list|()
block|{
return|return
name|caching
return|;
block|}
specifier|protected
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|lastNext
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|long
name|getMaxResultSize
parameter_list|()
block|{
return|return
name|maxScannerResultSize
return|;
block|}
comment|// returns true if the passed region endKey
specifier|protected
name|boolean
name|checkScanStopRow
parameter_list|(
specifier|final
name|byte
index|[]
name|endKey
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|scan
operator|.
name|getStopRow
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// there is a stop row, check to see if we are past it.
name|byte
index|[]
name|stopRow
init|=
name|scan
operator|.
name|getStopRow
argument_list|()
decl_stmt|;
name|int
name|cmp
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|stopRow
argument_list|,
literal|0
argument_list|,
name|stopRow
operator|.
name|length
argument_list|,
name|endKey
argument_list|,
literal|0
argument_list|,
name|endKey
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<=
literal|0
condition|)
block|{
comment|// stopRow<= endKey (endKey is equals to or larger than stopRow)
comment|// This is a stop.
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
comment|// unlikely.
block|}
specifier|protected
specifier|final
name|void
name|closeScanner
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|callable
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|callable
operator|.
name|setClose
argument_list|()
expr_stmt|;
name|call
argument_list|(
name|callable
argument_list|,
name|caller
argument_list|,
name|scannerTimeout
argument_list|)
expr_stmt|;
name|this
operator|.
name|callable
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Gets a scanner for the next region. If this.currentRegion != null, then we will move to the    * endrow of this.currentRegion. Else we will get scanner at the scan.getStartRow().    * @param nbRows the caching option of the scan    * @return the results fetched when open scanner, or null which means terminate the scan.    */
specifier|protected
name|Result
index|[]
name|nextScanner
parameter_list|(
name|int
name|nbRows
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Close the previous scanner if it's open
name|closeScanner
argument_list|()
expr_stmt|;
comment|// Where to start the next scanner
name|byte
index|[]
name|localStartKey
decl_stmt|;
comment|// if we're at end of table, close and return null to stop iterating
if|if
condition|(
name|this
operator|.
name|currentRegion
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|endKey
init|=
name|this
operator|.
name|currentRegion
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|endKey
operator|==
literal|null
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|endKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|||
name|checkScanStopRow
argument_list|(
name|endKey
argument_list|)
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Finished "
operator|+
name|this
operator|.
name|currentRegion
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|localStartKey
operator|=
name|endKey
expr_stmt|;
comment|// clear mvcc read point if we are going to switch regions
name|scan
operator|.
name|resetMvccReadPoint
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Finished "
operator|+
name|this
operator|.
name|currentRegion
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|localStartKey
operator|=
name|this
operator|.
name|scan
operator|.
name|getStartRow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
name|this
operator|.
name|currentRegion
operator|!=
literal|null
condition|)
block|{
comment|// Only worth logging if NOT first region in scan.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Advancing internal scanner to startKey at '"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|localStartKey
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|callable
operator|=
name|getScannerCallable
argument_list|(
name|localStartKey
argument_list|,
name|nbRows
argument_list|)
expr_stmt|;
comment|// Open a scanner on the region server starting at the
comment|// beginning of the region
name|Result
index|[]
name|rrs
init|=
name|call
argument_list|(
name|callable
argument_list|,
name|caller
argument_list|,
name|scannerTimeout
argument_list|)
decl_stmt|;
name|this
operator|.
name|currentRegion
operator|=
name|callable
operator|.
name|getHRegionInfo
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|scanMetrics
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|scanMetrics
operator|.
name|countOfRegions
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rrs
operator|!=
literal|null
operator|&&
name|rrs
operator|.
name|length
operator|==
literal|0
operator|&&
name|callable
operator|.
name|moreResultsForScan
argument_list|()
operator|==
name|MoreResults
operator|.
name|NO
condition|)
block|{
comment|// no results for the scan, return null to terminate the scan.
name|closed
operator|=
literal|true
expr_stmt|;
name|callable
operator|=
literal|null
expr_stmt|;
name|currentRegion
operator|=
literal|null
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|rrs
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|closeScanner
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
name|boolean
name|isAnyRPCcancelled
parameter_list|()
block|{
return|return
name|callable
operator|.
name|isAnyRPCcancelled
argument_list|()
return|;
block|}
specifier|private
name|Result
index|[]
name|call
parameter_list|(
name|ScannerCallableWithReplicas
name|callable
parameter_list|,
name|RpcRetryingCaller
argument_list|<
name|Result
index|[]
argument_list|>
name|caller
parameter_list|,
name|int
name|scannerTimeout
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
comment|// callWithoutRetries is at this layer. Within the ScannerCallableWithReplicas,
comment|// we do a callWithRetries
return|return
name|caller
operator|.
name|callWithoutRetries
argument_list|(
name|callable
argument_list|,
name|scannerTimeout
argument_list|)
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|protected
name|ScannerCallableWithReplicas
name|getScannerCallable
parameter_list|(
name|byte
index|[]
name|localStartKey
parameter_list|,
name|int
name|nbRows
parameter_list|)
block|{
name|scan
operator|.
name|setStartRow
argument_list|(
name|localStartKey
argument_list|)
expr_stmt|;
name|ScannerCallable
name|s
init|=
operator|new
name|ScannerCallable
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getTable
argument_list|()
argument_list|,
name|scan
argument_list|,
name|this
operator|.
name|scanMetrics
argument_list|,
name|this
operator|.
name|rpcControllerFactory
argument_list|)
decl_stmt|;
name|s
operator|.
name|setCaching
argument_list|(
name|nbRows
argument_list|)
expr_stmt|;
name|ScannerCallableWithReplicas
name|sr
init|=
operator|new
name|ScannerCallableWithReplicas
argument_list|(
name|tableName
argument_list|,
name|getConnection
argument_list|()
argument_list|,
name|s
argument_list|,
name|pool
argument_list|,
name|primaryOperationTimeout
argument_list|,
name|scan
argument_list|,
name|retries
argument_list|,
name|scannerTimeout
argument_list|,
name|caching
argument_list|,
name|conf
argument_list|,
name|caller
argument_list|)
decl_stmt|;
return|return
name|sr
return|;
block|}
comment|/**    * Publish the scan metrics. For now, we use scan.setAttribute to pass the metrics back to the    * application or TableInputFormat.Later, we could push it to other systems. We don't use metrics    * framework because it doesn't support multi-instances of the same metrics on the same machine;    * for scan/map reduce scenarios, we will have multiple scans running at the same time. By    * default, scan metrics are disabled; if the application wants to collect them, this behavior can    * be turned on by calling calling {@link Scan#setScanMetricsEnabled(boolean)}    *<p>    * This invocation clears the scan metrics. Metrics are aggregated in the Scan instance.    */
specifier|protected
name|void
name|writeScanMetrics
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|scanMetrics
operator|==
literal|null
operator|||
name|scanMetricsPublished
condition|)
block|{
return|return;
block|}
name|MapReduceProtos
operator|.
name|ScanMetrics
name|pScanMetrics
init|=
name|ProtobufUtil
operator|.
name|toScanMetrics
argument_list|(
name|scanMetrics
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setAttribute
argument_list|(
name|Scan
operator|.
name|SCAN_ATTRIBUTES_METRICS_DATA
argument_list|,
name|pScanMetrics
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|scanMetricsPublished
operator|=
literal|true
expr_stmt|;
block|}
specifier|protected
name|void
name|initSyncCache
parameter_list|()
block|{
name|cache
operator|=
operator|new
name|LinkedList
argument_list|<
name|Result
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|Result
name|nextWithSyncCache
parameter_list|()
throws|throws
name|IOException
block|{
comment|// If the scanner is closed and there's nothing left in the cache, next is a no-op.
if|if
condition|(
name|cache
operator|.
name|isEmpty
argument_list|()
operator|&&
name|this
operator|.
name|closed
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|cache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|loadCache
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|cache
operator|.
name|poll
argument_list|()
return|;
block|}
comment|// if we exhausted this scanner before calling close, write out the scan metrics
name|writeScanMetrics
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|int
name|getCacheSize
parameter_list|()
block|{
return|return
name|cache
operator|!=
literal|null
condition|?
name|cache
operator|.
name|size
argument_list|()
else|:
literal|0
return|;
block|}
specifier|private
name|boolean
name|scanExhausted
parameter_list|(
name|Result
index|[]
name|values
parameter_list|)
block|{
comment|// This means the server tells us the whole scan operation is done. Usually decided by filter or
comment|// limit.
return|return
name|values
operator|==
literal|null
operator|||
name|callable
operator|.
name|moreResultsForScan
argument_list|()
operator|==
name|MoreResults
operator|.
name|NO
return|;
block|}
specifier|private
name|boolean
name|regionExhausted
parameter_list|(
name|Result
index|[]
name|values
parameter_list|)
block|{
comment|// 1. Not a heartbeat message and we get nothing, this means the region is exhausted. And in the
comment|// old time we always return empty result for a open scanner operation so we add a check here to
comment|// keep compatible with the old logic. Should remove the isOpenScanner in the future.
comment|// 2. Server tells us that it has no more results for this region.
return|return
operator|(
name|values
operator|.
name|length
operator|==
literal|0
operator|&&
operator|!
name|callable
operator|.
name|isHeartbeatMessage
argument_list|()
operator|&&
operator|!
name|callable
operator|.
name|isOpenScanner
argument_list|()
operator|)
operator|||
name|callable
operator|.
name|moreResultsInRegion
argument_list|()
operator|==
name|MoreResults
operator|.
name|NO
return|;
block|}
specifier|private
name|void
name|closeScannerIfExhausted
parameter_list|(
name|boolean
name|exhausted
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|exhausted
condition|)
block|{
if|if
condition|(
operator|!
name|partialResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// XXX: continue if there are partial results. But in fact server should not set
comment|// hasMoreResults to false if there are partial results.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Server tells us there is no more results for this region but we still have"
operator|+
literal|" partialResults, this should not happen, retry on the current scanner anyway"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|closeScanner
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Result
index|[]
name|nextScannerWithRetries
parameter_list|(
name|int
name|nbRows
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
return|return
name|nextScanner
argument_list|(
name|nbRows
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|e
parameter_list|)
block|{
name|handleScanError
argument_list|(
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|handleScanError
parameter_list|(
name|DoNotRetryIOException
name|e
parameter_list|,
name|MutableBoolean
name|retryAfterOutOfOrderException
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
comment|// An exception was thrown which makes any partial results that we were collecting
comment|// invalid. The scanner will need to be reset to the beginning of a row.
name|clearPartialResults
argument_list|()
expr_stmt|;
comment|// DNRIOEs are thrown to make us break out of retries. Some types of DNRIOEs want us
comment|// to reset the scanner and come back in again.
comment|// If exception is any but the list below throw it back to the client; else setup
comment|// the scanner and retry.
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|cause
operator|!=
literal|null
operator|&&
name|cause
operator|instanceof
name|NotServingRegionException
operator|)
operator|||
operator|(
name|cause
operator|!=
literal|null
operator|&&
name|cause
operator|instanceof
name|RegionServerStoppedException
operator|)
operator|||
name|e
operator|instanceof
name|OutOfOrderScannerNextException
operator|||
name|e
operator|instanceof
name|UnknownScannerException
operator|||
name|e
operator|instanceof
name|ScannerResetException
condition|)
block|{
comment|// Pass. It is easier writing the if loop test as list of what is allowed rather than
comment|// as a list of what is not allowed... so if in here, it means we do not throw.
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
comment|// Else, its signal from depths of ScannerCallable that we need to reset the scanner.
if|if
condition|(
name|this
operator|.
name|lastResult
operator|!=
literal|null
condition|)
block|{
comment|// The region has moved. We need to open a brand new scanner at the new location.
comment|// Reset the startRow to the row we've seen last so that the new scanner starts at
comment|// the correct row. Otherwise we may see previously returned rows again.
comment|// (ScannerCallable by now has "relocated" the correct region)
if|if
condition|(
operator|!
name|this
operator|.
name|lastResult
operator|.
name|isPartial
argument_list|()
operator|&&
name|scan
operator|.
name|getBatch
argument_list|()
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|scan
operator|.
name|isReversed
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setStartRow
argument_list|(
name|createClosestRowBefore
argument_list|(
name|lastResult
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|setStartRow
argument_list|(
name|createClosestRowAfter
argument_list|(
name|lastResult
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// we need rescan this row because we only loaded partial row before
name|scan
operator|.
name|setStartRow
argument_list|(
name|lastResult
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|e
operator|instanceof
name|OutOfOrderScannerNextException
condition|)
block|{
if|if
condition|(
name|retryAfterOutOfOrderException
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|retryAfterOutOfOrderException
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|retryAfterOutOfOrderException
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: Why wrap this in a DNRIOE when it already is a DNRIOE?
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Failed after retry of OutOfOrderScannerNextException: was there a rpc timeout?"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Clear region.
name|this
operator|.
name|currentRegion
operator|=
literal|null
expr_stmt|;
comment|// Set this to zero so we don't try and do an rpc and close on remote server when
comment|// the exception we got was UnknownScanner or the Server is going down.
name|callable
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Contact the servers to load more {@link Result}s in the cache.    */
specifier|protected
name|void
name|loadCache
parameter_list|()
throws|throws
name|IOException
block|{
comment|// check if scanner was closed during previous prefetch
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
name|Result
index|[]
name|values
init|=
literal|null
decl_stmt|;
name|long
name|remainingResultSize
init|=
name|maxScannerResultSize
decl_stmt|;
name|int
name|countdown
init|=
name|this
operator|.
name|caching
decl_stmt|;
comment|// This is possible if we just stopped at the boundary of a region in the previous call.
if|if
condition|(
name|callable
operator|==
literal|null
condition|)
block|{
name|values
operator|=
name|nextScannerWithRetries
argument_list|(
name|countdown
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return;
block|}
block|}
comment|// We need to reset it if it's a new callable that was created with a countdown in nextScanner
name|callable
operator|.
name|setCaching
argument_list|(
name|this
operator|.
name|caching
argument_list|)
expr_stmt|;
comment|// This flag is set when we want to skip the result returned. We do
comment|// this when we reset scanner because it split under us.
name|MutableBoolean
name|retryAfterOutOfOrderException
init|=
operator|new
name|MutableBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
comment|// Server returns a null values if scanning is to stop. Else,
comment|// returns an empty array if scanning is to go on and we've just
comment|// exhausted current region.
comment|// now we will also fetch data when openScanner, so do not make a next call again if values
comment|// is already non-null.
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
name|call
argument_list|(
name|callable
argument_list|,
name|caller
argument_list|,
name|scannerTimeout
argument_list|)
expr_stmt|;
block|}
comment|// When the replica switch happens, we need to do certain operations again.
comment|// The callable will openScanner with the right startkey but we need to pick up
comment|// from there. Bypass the rest of the loop and let the catch-up happen in the beginning
comment|// of the loop as it happens for the cases where we see exceptions.
if|if
condition|(
name|callable
operator|.
name|switchedToADifferentReplica
argument_list|()
condition|)
block|{
comment|// Any accumulated partial results are no longer valid since the callable will
comment|// openScanner with the correct startkey and we must pick up from there
name|clearPartialResults
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentRegion
operator|=
name|callable
operator|.
name|getHRegionInfo
argument_list|()
expr_stmt|;
comment|// Now we will also fetch data when openScanner so usually we should not get a null
comment|// result, but at some places we still use null to indicate the scan is terminated, so add
comment|// a sanity check here. Should be removed later.
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
block|}
name|retryAfterOutOfOrderException
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|e
parameter_list|)
block|{
name|handleScanError
argument_list|(
name|e
argument_list|,
name|retryAfterOutOfOrderException
argument_list|)
expr_stmt|;
comment|// reopen the scanner
name|values
operator|=
name|nextScannerWithRetries
argument_list|(
name|countdown
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
break|break;
block|}
continue|continue;
block|}
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|scanMetrics
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|scanMetrics
operator|.
name|sumOfMillisSecBetweenNexts
operator|.
name|addAndGet
argument_list|(
name|currentTime
operator|-
name|lastNext
argument_list|)
expr_stmt|;
block|}
name|lastNext
operator|=
name|currentTime
expr_stmt|;
comment|// Groom the array of Results that we received back from the server before adding that
comment|// Results to the scanner's cache. If partial results are not allowed to be seen by the
comment|// caller, all book keeping will be performed within this method.
name|List
argument_list|<
name|Result
argument_list|>
name|resultsToAddToCache
init|=
name|getResultsToAddToCache
argument_list|(
name|values
argument_list|,
name|callable
operator|.
name|isHeartbeatMessage
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resultsToAddToCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Result
name|rs
range|:
name|resultsToAddToCache
control|)
block|{
name|rs
operator|=
name|filterLoadedCell
argument_list|(
name|rs
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|cache
operator|.
name|add
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|long
name|estimatedHeapSizeOfResult
init|=
name|calcEstimatedSize
argument_list|(
name|rs
argument_list|)
decl_stmt|;
name|countdown
operator|--
expr_stmt|;
name|remainingResultSize
operator|-=
name|estimatedHeapSizeOfResult
expr_stmt|;
name|addEstimatedSize
argument_list|(
name|estimatedHeapSizeOfResult
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastResult
operator|=
name|rs
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|lastResult
operator|.
name|isPartial
argument_list|()
operator|||
name|scan
operator|.
name|getBatch
argument_list|()
operator|>
literal|0
condition|)
block|{
name|updateLastCellLoadedToCache
argument_list|(
name|this
operator|.
name|lastResult
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|lastCellLoadedToCache
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|scan
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|limit
init|=
name|scan
operator|.
name|getLimit
argument_list|()
operator|-
name|resultsToAddToCache
operator|.
name|size
argument_list|()
decl_stmt|;
assert|assert
name|limit
operator|>=
literal|0
assert|;
name|scan
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|scanExhausted
argument_list|(
name|values
argument_list|)
condition|)
block|{
name|closeScanner
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|boolean
name|regionExhausted
init|=
name|regionExhausted
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|callable
operator|.
name|isHeartbeatMessage
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|cache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Caller of this method just wants a Result. If we see a heartbeat message, it means
comment|// processing of the scan is taking a long time server side. Rather than continue to
comment|// loop until a limit (e.g. size or caching) is reached, break out early to avoid causing
comment|// unnecesary delays to the caller
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Heartbeat message received and cache contains Results."
operator|+
literal|" Breaking out of scan loop"
argument_list|)
expr_stmt|;
block|}
comment|// we know that the region has not been exhausted yet so just break without calling
comment|// closeScannerIfExhausted
break|break;
block|}
block|}
if|if
condition|(
name|countdown
operator|<=
literal|0
condition|)
block|{
comment|// we have enough result.
name|closeScannerIfExhausted
argument_list|(
name|regionExhausted
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|remainingResultSize
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|cache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|closeScannerIfExhausted
argument_list|(
name|regionExhausted
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// we have reached the max result size but we still can not find anything to return to the
comment|// user. Reset the maxResultSize and try again.
name|remainingResultSize
operator|=
name|maxScannerResultSize
expr_stmt|;
block|}
block|}
comment|// we are done with the current region
if|if
condition|(
name|regionExhausted
condition|)
block|{
if|if
condition|(
operator|!
name|partialResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// XXX: continue if there are partial results. But in fact server should not set
comment|// hasMoreResults to false if there are partial results.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Server tells us there is no more results for this region but we still have"
operator|+
literal|" partialResults, this should not happen, retry on the current scanner anyway"
argument_list|)
expr_stmt|;
name|values
operator|=
literal|null
expr_stmt|;
comment|// reset values for the next call
continue|continue;
block|}
name|values
operator|=
name|nextScannerWithRetries
argument_list|(
name|countdown
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
else|else
block|{
name|values
operator|=
literal|null
expr_stmt|;
comment|// reset values for the next call
block|}
block|}
block|}
specifier|protected
name|void
name|addEstimatedSize
parameter_list|(
name|long
name|estimatedHeapSizeOfResult
parameter_list|)
block|{
return|return;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|int
name|getCacheCount
parameter_list|()
block|{
return|return
name|cache
operator|!=
literal|null
condition|?
name|cache
operator|.
name|size
argument_list|()
else|:
literal|0
return|;
block|}
comment|/**    * This method ensures all of our book keeping regarding partial results is kept up to date. This    * method should be called once we know that the results we received back from the RPC request do    * not contain errors. We return a list of results that should be added to the cache. In general,    * this list will contain all NON-partial results from the input array (unless the client has    * specified that they are okay with receiving partial results)    * @param resultsFromServer The array of {@link Result}s returned from the server    * @param heartbeatMessage Flag indicating whether or not the response received from the server    *          represented a complete response, or a heartbeat message that was sent to keep the    *          client-server connection alive    * @return the list of results that should be added to the cache.    * @throws IOException    */
specifier|protected
name|List
argument_list|<
name|Result
argument_list|>
name|getResultsToAddToCache
parameter_list|(
name|Result
index|[]
name|resultsFromServer
parameter_list|,
name|boolean
name|heartbeatMessage
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|resultSize
init|=
name|resultsFromServer
operator|!=
literal|null
condition|?
name|resultsFromServer
operator|.
name|length
else|:
literal|0
decl_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|resultsToAddToCache
init|=
operator|new
name|ArrayList
argument_list|<
name|Result
argument_list|>
argument_list|(
name|resultSize
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isBatchSet
init|=
name|scan
operator|!=
literal|null
operator|&&
name|scan
operator|.
name|getBatch
argument_list|()
operator|>
literal|0
decl_stmt|;
specifier|final
name|boolean
name|allowPartials
init|=
name|scan
operator|!=
literal|null
operator|&&
name|scan
operator|.
name|getAllowPartialResults
argument_list|()
decl_stmt|;
comment|// If the caller has indicated in their scan that they are okay with seeing partial results,
comment|// then simply add all results to the list. Note that since scan batching also returns results
comment|// for a row in pieces we treat batch being set as equivalent to allowing partials. The
comment|// implication of treating batching as equivalent to partial results is that it is possible
comment|// the caller will receive a result back where the number of cells in the result is less than
comment|// the batch size even though it may not be the last group of cells for that row.
if|if
condition|(
name|allowPartials
operator|||
name|isBatchSet
condition|)
block|{
name|addResultsToList
argument_list|(
name|resultsToAddToCache
argument_list|,
name|resultsFromServer
argument_list|,
literal|0
argument_list|,
operator|(
literal|null
operator|==
name|resultsFromServer
condition|?
literal|0
else|:
name|resultsFromServer
operator|.
name|length
operator|)
argument_list|)
expr_stmt|;
return|return
name|resultsToAddToCache
return|;
block|}
comment|// If no results were returned it indicates that either we have the all the partial results
comment|// necessary to construct the complete result or the server had to send a heartbeat message
comment|// to the client to keep the client-server connection alive
if|if
condition|(
name|resultsFromServer
operator|==
literal|null
operator|||
name|resultsFromServer
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// If this response was an empty heartbeat message, then we have not exhausted the region
comment|// and thus there may be more partials server side that still need to be added to the partial
comment|// list before we form the complete Result
if|if
condition|(
operator|!
name|partialResults
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|heartbeatMessage
condition|)
block|{
name|resultsToAddToCache
operator|.
name|add
argument_list|(
name|Result
operator|.
name|createCompleteResult
argument_list|(
name|partialResults
argument_list|)
argument_list|)
expr_stmt|;
name|clearPartialResults
argument_list|()
expr_stmt|;
block|}
return|return
name|resultsToAddToCache
return|;
block|}
comment|// In every RPC response there should be at most a single partial result. Furthermore, if
comment|// there is a partial result, it is guaranteed to be in the last position of the array.
name|Result
name|last
init|=
name|resultsFromServer
index|[
name|resultsFromServer
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|Result
name|partial
init|=
name|last
operator|.
name|isPartial
argument_list|()
condition|?
name|last
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"number results from RPC: "
argument_list|)
operator|.
name|append
argument_list|(
name|resultsFromServer
operator|.
name|length
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"partial != null: "
argument_list|)
operator|.
name|append
argument_list|(
name|partial
operator|!=
literal|null
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"number of partials so far: "
argument_list|)
operator|.
name|append
argument_list|(
name|partialResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// There are three possibilities cases that can occur while handling partial results
comment|//
comment|// 1. (partial != null&& partialResults.isEmpty())
comment|// This is the first partial result that we have received. It should be added to
comment|// the list of partialResults and await the next RPC request at which point another
comment|// portion of the complete result will be received
comment|//
comment|// 2. !partialResults.isEmpty()
comment|// Since our partialResults list is not empty it means that we have been accumulating partial
comment|// Results for a particular row. We cannot form the complete/whole Result for that row until
comment|// all partials for the row have been received. Thus we loop through all of the Results
comment|// returned from the server and determine whether or not all partial Results for the row have
comment|// been received. We know that we have received all of the partial Results for the row when:
comment|// i) We notice a row change in the Results
comment|// ii) We see a Result for the partial row that is NOT marked as a partial Result
comment|//
comment|// 3. (partial == null&& partialResults.isEmpty())
comment|// Business as usual. We are not accumulating partial results and there wasn't a partial result
comment|// in the RPC response. This means that all of the results we received from the server are
comment|// complete and can be added directly to the cache
if|if
condition|(
name|partial
operator|!=
literal|null
operator|&&
name|partialResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addToPartialResults
argument_list|(
name|partial
argument_list|)
expr_stmt|;
comment|// Exclude the last result, it's a partial
name|addResultsToList
argument_list|(
name|resultsToAddToCache
argument_list|,
name|resultsFromServer
argument_list|,
literal|0
argument_list|,
name|resultsFromServer
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|partialResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultsFromServer
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Result
name|result
init|=
name|resultsFromServer
index|[
name|i
index|]
decl_stmt|;
comment|// This result is from the same row as the partial Results. Add it to the list of partials
comment|// and check if it was the last partial Result for that row
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|partialResultsRow
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
condition|)
block|{
name|addToPartialResults
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// If the result is not a partial, it is a signal to us that it is the last Result we
comment|// need to form the complete Result client-side
if|if
condition|(
operator|!
name|result
operator|.
name|isPartial
argument_list|()
condition|)
block|{
name|resultsToAddToCache
operator|.
name|add
argument_list|(
name|Result
operator|.
name|createCompleteResult
argument_list|(
name|partialResults
argument_list|)
argument_list|)
expr_stmt|;
name|clearPartialResults
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// The row of this result differs from the row of the partial results we have received so
comment|// far. If our list of partials isn't empty, this is a signal to form the complete Result
comment|// since the row has now changed
if|if
condition|(
operator|!
name|partialResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resultsToAddToCache
operator|.
name|add
argument_list|(
name|Result
operator|.
name|createCompleteResult
argument_list|(
name|partialResults
argument_list|)
argument_list|)
expr_stmt|;
name|clearPartialResults
argument_list|()
expr_stmt|;
block|}
comment|// It's possible that in one response from the server we receive the final partial for
comment|// one row and receive a partial for a different row. Thus, make sure that all Results
comment|// are added to the proper list
if|if
condition|(
name|result
operator|.
name|isPartial
argument_list|()
condition|)
block|{
name|addToPartialResults
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultsToAddToCache
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// partial == null&& partialResults.isEmpty() -- business as usual
name|addResultsToList
argument_list|(
name|resultsToAddToCache
argument_list|,
name|resultsFromServer
argument_list|,
literal|0
argument_list|,
name|resultsFromServer
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|resultsToAddToCache
return|;
block|}
comment|/**    * A convenience method for adding a Result to our list of partials. This method ensure that only    * Results that belong to the same row as the other partials can be added to the list.    * @param result The result that we want to add to our list of partial Results    * @throws IOException    */
specifier|private
name|void
name|addToPartialResults
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|row
init|=
name|result
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|partialResultsRow
operator|!=
literal|null
operator|&&
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|partialResultsRow
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Partial result row does not match. All partial results must come "
operator|+
literal|"from the same row. partialResultsRow: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|partialResultsRow
argument_list|)
operator|+
literal|"row: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
argument_list|)
throw|;
block|}
name|partialResultsRow
operator|=
name|row
expr_stmt|;
name|partialResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**    * Convenience method for clearing the list of partials and resetting the partialResultsRow.    */
specifier|private
name|void
name|clearPartialResults
parameter_list|()
block|{
name|partialResults
operator|.
name|clear
argument_list|()
expr_stmt|;
name|partialResultsRow
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Helper method for adding results between the indices [start, end) to the outputList    * @param outputList the list that results will be added to    * @param inputArray the array that results are taken from    * @param start beginning index (inclusive)    * @param end ending index (exclusive)    */
specifier|private
name|void
name|addResultsToList
parameter_list|(
name|List
argument_list|<
name|Result
argument_list|>
name|outputList
parameter_list|,
name|Result
index|[]
name|inputArray
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
if|if
condition|(
name|inputArray
operator|==
literal|null
operator|||
name|start
argument_list|<
literal|0
operator|||
name|end
argument_list|>
name|inputArray
operator|.
name|length
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|outputList
operator|.
name|add
argument_list|(
name|inputArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
operator|!
name|scanMetricsPublished
condition|)
name|writeScanMetrics
argument_list|()
expr_stmt|;
if|if
condition|(
name|callable
operator|!=
literal|null
condition|)
block|{
name|callable
operator|.
name|setClose
argument_list|()
expr_stmt|;
try|try
block|{
name|call
argument_list|(
name|callable
argument_list|,
name|caller
argument_list|,
name|scannerTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownScannerException
name|e
parameter_list|)
block|{
comment|// We used to catch this error, interpret, and rethrow. However, we
comment|// have since decided that it's not nice for a scanner's close to
comment|// throw exceptions. Chances are it was just due to lease time out.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"scanner failed to close"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* An exception other than UnknownScanner is unexpected. */
name|LOG
operator|.
name|warn
argument_list|(
literal|"scanner failed to close."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|callable
operator|=
literal|null
expr_stmt|;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|renewLease
parameter_list|()
block|{
if|if
condition|(
name|callable
operator|!=
literal|null
condition|)
block|{
comment|// do not return any rows, do not advance the scanner
name|callable
operator|.
name|setRenew
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|caller
operator|.
name|callWithoutRetries
argument_list|(
name|callable
argument_list|,
name|this
operator|.
name|scannerTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|callable
operator|.
name|setRenew
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|updateLastCellLoadedToCache
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|lastCellLoadedToCache
operator|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
block|}
comment|/**    * Compare two Cells considering reversed scanner. ReversedScanner only reverses rows, not    * columns.    */
specifier|private
name|int
name|compare
parameter_list|(
name|Cell
name|a
parameter_list|,
name|Cell
name|b
parameter_list|)
block|{
name|CellComparator
name|comparator
init|=
name|currentRegion
operator|!=
literal|null
operator|&&
name|currentRegion
operator|.
name|isMetaRegion
argument_list|()
condition|?
name|CellComparator
operator|.
name|META_COMPARATOR
else|:
name|CellComparator
operator|.
name|COMPARATOR
decl_stmt|;
name|int
name|r
init|=
name|comparator
operator|.
name|compareRows
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|0
condition|)
block|{
return|return
name|this
operator|.
name|scan
operator|.
name|isReversed
argument_list|()
condition|?
operator|-
name|r
else|:
name|r
return|;
block|}
return|return
name|CellComparator
operator|.
name|compareWithoutRow
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
specifier|private
name|Result
name|filterLoadedCell
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
comment|// we only filter result when last result is partial
comment|// so lastCellLoadedToCache and result should have same row key.
comment|// However, if 1) read some cells; 1.1) delete this row at the same time 2) move region;
comment|// 3) read more cell. lastCellLoadedToCache and result will be not at same row.
if|if
condition|(
name|lastCellLoadedToCache
operator|==
literal|null
operator|||
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
if|if
condition|(
name|compare
argument_list|(
name|this
operator|.
name|lastCellLoadedToCache
argument_list|,
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|// The first cell of this result is larger than the last cell of loadcache.
comment|// If user do not allow partial result, it must be true.
return|return
name|result
return|;
block|}
if|if
condition|(
name|compare
argument_list|(
name|this
operator|.
name|lastCellLoadedToCache
argument_list|,
name|result
operator|.
name|rawCells
argument_list|()
index|[
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// The last cell of this result is smaller than the last cell of loadcache, skip all.
return|return
literal|null
return|;
block|}
comment|// The first one must not in filtered result, we start at the second.
name|int
name|index
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|compare
argument_list|(
name|this
operator|.
name|lastCellLoadedToCache
argument_list|,
name|result
operator|.
name|rawCells
argument_list|()
index|[
name|index
index|]
argument_list|)
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|index
operator|++
expr_stmt|;
block|}
name|Cell
index|[]
name|list
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
argument_list|,
name|index
argument_list|,
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
name|Result
operator|.
name|create
argument_list|(
name|list
argument_list|,
name|result
operator|.
name|getExists
argument_list|()
argument_list|,
name|result
operator|.
name|isStale
argument_list|()
argument_list|,
name|result
operator|.
name|isPartial
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

