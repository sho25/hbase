begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|metrics
operator|.
name|ScanMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|TimeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|ThrottleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationLoadSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationLoadSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|TablePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|UserPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|token
operator|.
name|AuthenticationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|Authorizations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|CellVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteStringer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|DynamicClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Converter functions exposed by ProtobufUtil  */
end_comment

begin_class
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED"
argument_list|,
name|justification
operator|=
literal|"None. Address sometime."
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ProtobufConverter
block|{
specifier|private
name|ProtobufConverter
parameter_list|()
block|{   }
comment|/**    * Many results are simple: no cell, exists true or false. To save on object creations,    *  we reuse them across calls.    */
specifier|private
specifier|final
specifier|static
name|Cell
index|[]
name|EMPTY_CELL_ARRAY
init|=
operator|new
name|Cell
index|[]
block|{}
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT
init|=
name|Result
operator|.
name|create
argument_list|(
name|EMPTY_CELL_ARRAY
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_EXISTS_TRUE
init|=
name|Result
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_EXISTS_FALSE
init|=
name|Result
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_STALE
init|=
name|Result
operator|.
name|create
argument_list|(
name|EMPTY_CELL_ARRAY
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_EXISTS_TRUE_STALE
init|=
name|Result
operator|.
name|create
argument_list|(
operator|(
name|Cell
index|[]
operator|)
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_EXISTS_FALSE_STALE
init|=
name|Result
operator|.
name|create
argument_list|(
operator|(
name|Cell
index|[]
operator|)
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB_EXISTS_TRUE
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB_EXISTS_FALSE
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB_STALE
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB_EXISTS_TRUE_STALE
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB_EXISTS_FALSE_STALE
decl_stmt|;
static|static
block|{
name|ClientProtos
operator|.
name|Result
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Result
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setExists
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB_EXISTS_TRUE
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setStale
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB_EXISTS_TRUE_STALE
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setExists
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB_EXISTS_FALSE
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setStale
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB_EXISTS_FALSE_STALE
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setStale
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB_STALE
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|/**    * Dynamic class loader to load filter/comparators    */
specifier|private
specifier|final
specifier|static
name|ClassLoader
name|CLASS_LOADER
decl_stmt|;
static|static
block|{
name|ClassLoader
name|parent
init|=
name|ProtobufUtil
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|CLASS_LOADER
operator|=
operator|new
name|DynamicClassLoader
argument_list|(
name|conf
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
comment|/**    * Convert a ServerName to a protocol buffer ServerName    *    * @param serverName the ServerName to convert    * @return the converted protocol buffer ServerName    * @see #toServerName(org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.ServerName)    */
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|ServerName
name|toServerName
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|Builder
name|builder
init|=
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setHostName
argument_list|(
name|serverName
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverName
operator|.
name|getPort
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|setPort
argument_list|(
name|serverName
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serverName
operator|.
name|getStartcode
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|setStartCode
argument_list|(
name|serverName
operator|.
name|getStartcode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer ServerName to a ServerName    *    * @param proto the protocol buffer ServerName to convert    * @return the converted ServerName    */
specifier|public
specifier|static
name|ServerName
name|toServerName
parameter_list|(
specifier|final
name|HBaseProtos
operator|.
name|ServerName
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|hostName
init|=
name|proto
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|long
name|startCode
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|port
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasPort
argument_list|()
condition|)
block|{
name|port
operator|=
name|proto
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStartCode
argument_list|()
condition|)
block|{
name|startCode
operator|=
name|proto
operator|.
name|getStartCode
argument_list|()
expr_stmt|;
block|}
return|return
name|ServerName
operator|.
name|valueOf
argument_list|(
name|hostName
argument_list|,
name|port
argument_list|,
name|startCode
argument_list|)
return|;
block|}
comment|/**    * Convert a protobuf Durability into a client Durability    */
specifier|public
specifier|static
name|Durability
name|toDurability
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|USE_DEFAULT
case|:
return|return
name|Durability
operator|.
name|USE_DEFAULT
return|;
case|case
name|SKIP_WAL
case|:
return|return
name|Durability
operator|.
name|SKIP_WAL
return|;
case|case
name|ASYNC_WAL
case|:
return|return
name|Durability
operator|.
name|ASYNC_WAL
return|;
case|case
name|SYNC_WAL
case|:
return|return
name|Durability
operator|.
name|SYNC_WAL
return|;
case|case
name|FSYNC_WAL
case|:
return|return
name|Durability
operator|.
name|FSYNC_WAL
return|;
default|default:
return|return
name|Durability
operator|.
name|USE_DEFAULT
return|;
block|}
block|}
comment|/**    * Convert a client Durability into a protobuf Durability    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
name|toDurability
parameter_list|(
specifier|final
name|Durability
name|d
parameter_list|)
block|{
switch|switch
condition|(
name|d
condition|)
block|{
case|case
name|USE_DEFAULT
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|USE_DEFAULT
return|;
case|case
name|SKIP_WAL
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|SKIP_WAL
return|;
case|case
name|ASYNC_WAL
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|ASYNC_WAL
return|;
case|case
name|SYNC_WAL
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|SYNC_WAL
return|;
case|case
name|FSYNC_WAL
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|FSYNC_WAL
return|;
default|default:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|USE_DEFAULT
return|;
block|}
block|}
comment|/**    * Convert a protocol buffer Get to a client Get    *    * @param proto the protocol buffer Get to convert    * @return the converted client Get    * @throws IOException    */
specifier|public
specifier|static
name|Get
name|toGet
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Get
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasCacheBlocks
argument_list|()
condition|)
block|{
name|get
operator|.
name|setCacheBlocks
argument_list|(
name|proto
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMaxVersions
argument_list|()
condition|)
block|{
name|get
operator|.
name|setMaxVersions
argument_list|(
name|proto
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStoreLimit
argument_list|()
condition|)
block|{
name|get
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
name|proto
operator|.
name|getStoreLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStoreOffset
argument_list|()
condition|)
block|{
name|get
operator|.
name|setRowOffsetPerColumnFamily
argument_list|(
name|proto
operator|.
name|getStoreOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasTimeRange
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
name|timeRange
init|=
name|proto
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
name|long
name|minStamp
init|=
literal|0
decl_stmt|;
name|long
name|maxStamp
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|timeRange
operator|.
name|hasFrom
argument_list|()
condition|)
block|{
name|minStamp
operator|=
name|timeRange
operator|.
name|getFrom
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timeRange
operator|.
name|hasTo
argument_list|()
condition|)
block|{
name|maxStamp
operator|=
name|timeRange
operator|.
name|getTo
argument_list|()
expr_stmt|;
block|}
name|get
operator|.
name|setTimeRange
argument_list|(
name|minStamp
argument_list|,
name|maxStamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|FilterProtos
operator|.
name|Filter
name|filter
init|=
name|proto
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|get
operator|.
name|setFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HBaseProtos
operator|.
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|get
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getColumnCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ClientProtos
operator|.
name|Column
name|column
range|:
name|proto
operator|.
name|getColumnList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|.
name|getQualifierCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ByteString
name|qualifier
range|:
name|column
operator|.
name|getQualifierList
argument_list|()
control|)
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|proto
operator|.
name|hasExistenceOnly
argument_list|()
operator|&&
name|proto
operator|.
name|getExistenceOnly
argument_list|()
condition|)
block|{
name|get
operator|.
name|setCheckExistenceOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasClosestRowBefore
argument_list|()
operator|&&
name|proto
operator|.
name|getClosestRowBefore
argument_list|()
condition|)
block|{
name|get
operator|.
name|setClosestRowBefore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasConsistency
argument_list|()
condition|)
block|{
name|get
operator|.
name|setConsistency
argument_list|(
name|toConsistency
argument_list|(
name|proto
operator|.
name|getConsistency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|get
return|;
block|}
specifier|public
specifier|static
name|Consistency
name|toConsistency
parameter_list|(
name|ClientProtos
operator|.
name|Consistency
name|consistency
parameter_list|)
block|{
switch|switch
condition|(
name|consistency
condition|)
block|{
case|case
name|STRONG
case|:
return|return
name|Consistency
operator|.
name|STRONG
return|;
case|case
name|TIMELINE
case|:
return|return
name|Consistency
operator|.
name|TIMELINE
return|;
default|default :
return|return
name|Consistency
operator|.
name|STRONG
return|;
block|}
block|}
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Consistency
name|toConsistency
parameter_list|(
name|Consistency
name|consistency
parameter_list|)
block|{
switch|switch
condition|(
name|consistency
condition|)
block|{
case|case
name|STRONG
case|:
return|return
name|ClientProtos
operator|.
name|Consistency
operator|.
name|STRONG
return|;
case|case
name|TIMELINE
case|:
return|return
name|ClientProtos
operator|.
name|Consistency
operator|.
name|TIMELINE
return|;
default|default :
return|return
name|ClientProtos
operator|.
name|Consistency
operator|.
name|STRONG
return|;
block|}
block|}
comment|/**    * Convert a protocol buffer Mutate to a Put.    *    * @param proto The protocol buffer MutationProto to convert    * @param cellScanner If non-null, the Cell data that goes with this proto.    * @return A client Put.    * @throws IOException    */
specifier|public
specifier|static
name|Put
name|toPut
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: Server-side at least why do we convert back to the Client types?  Why not just pb it?
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|PUT
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|long
name|timestamp
init|=
name|proto
operator|.
name|hasTimestamp
argument_list|()
condition|?
name|proto
operator|.
name|getTimestamp
argument_list|()
else|:
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|int
name|cellCount
init|=
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|?
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cellCount
operator|>
literal|0
condition|)
block|{
comment|// The proto has metadata only and the data is separate to be found in the cellScanner.
if|if
condition|(
name|cellScanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but no cellScanner: "
operator|+
name|toShortString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but at index "
operator|+
name|i
operator|+
literal|" no cell returned: "
operator|+
name|toShortString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|put
operator|==
literal|null
condition|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|put
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|proto
operator|.
name|hasRow
argument_list|()
condition|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"row cannot be null"
argument_list|)
throw|;
block|}
comment|// The proto has the metadata and the data itself
for|for
control|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
operator|.
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|qv
operator|.
name|hasValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required field: qualifier value"
argument_list|)
throw|;
block|}
name|ByteBuffer
name|qualifier
init|=
name|qv
operator|.
name|hasQualifier
argument_list|()
condition|?
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
else|:
literal|null
decl_stmt|;
name|ByteBuffer
name|value
init|=
name|qv
operator|.
name|hasValue
argument_list|()
condition|?
name|qv
operator|.
name|getValue
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
else|:
literal|null
decl_stmt|;
name|long
name|ts
init|=
name|timestamp
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTimestamp
argument_list|()
condition|)
block|{
name|ts
operator|=
name|qv
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|tags
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTags
argument_list|()
condition|)
block|{
name|tags
operator|=
name|qv
operator|.
name|getTags
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|Object
index|[]
name|array
init|=
name|Tag
operator|.
name|asList
argument_list|(
name|tags
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
name|tags
operator|.
name|length
argument_list|)
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Tag
index|[]
name|tagArray
init|=
operator|new
name|Tag
index|[
name|array
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tagArray
index|[
name|i
index|]
operator|=
operator|(
name|Tag
operator|)
name|array
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|qv
operator|.
name|hasDeleteType
argument_list|()
condition|)
block|{
name|byte
index|[]
name|qual
init|=
name|qv
operator|.
name|hasQualifier
argument_list|()
condition|?
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|family
argument_list|,
name|qual
argument_list|,
name|ts
argument_list|,
name|fromDeleteType
argument_list|(
name|qv
operator|.
name|getDeleteType
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|tags
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|addImmutable
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|,
name|value
argument_list|,
name|tagArray
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|qv
operator|.
name|hasDeleteType
argument_list|()
condition|)
block|{
name|byte
index|[]
name|qual
init|=
name|qv
operator|.
name|hasQualifier
argument_list|()
condition|?
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|family
argument_list|,
name|qual
argument_list|,
name|ts
argument_list|,
name|fromDeleteType
argument_list|(
name|qv
operator|.
name|getDeleteType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|addImmutable
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|put
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|proto
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|put
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|put
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Delete    *    * @param proto the protocol buffer Mutate to convert    * @param cellScanner if non-null, the data that goes with this delete.    * @return the converted client Delete    * @throws IOException    */
specifier|public
specifier|static
name|Delete
name|toDelete
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|DELETE
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|hasRow
argument_list|()
condition|?
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
name|long
name|timestamp
init|=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasTimestamp
argument_list|()
condition|)
block|{
name|timestamp
operator|=
name|proto
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
name|Delete
name|delete
init|=
literal|null
decl_stmt|;
name|int
name|cellCount
init|=
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|?
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cellCount
operator|>
literal|0
condition|)
block|{
comment|// The proto has metadata only and the data is separate to be found in the cellScanner.
if|if
condition|(
name|cellScanner
operator|==
literal|null
condition|)
block|{
comment|// TextFormat should be fine for a Delete since it carries no data, just coordinates.
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but no cellScanner: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
comment|// TextFormat should be fine for a Delete since it carries no data, just coordinates.
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but at index "
operator|+
name|i
operator|+
literal|" no cell returned: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|delete
operator|==
literal|null
condition|)
block|{
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|delete
operator|.
name|addDeleteMarker
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
for|for
control|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
operator|.
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|DeleteType
name|deleteType
init|=
name|qv
operator|.
name|getDeleteType
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasQualifier
argument_list|()
condition|)
block|{
name|qualifier
operator|=
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|long
name|ts
init|=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTimestamp
argument_list|()
condition|)
block|{
name|ts
operator|=
name|qv
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|==
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|DeleteType
operator|.
name|DELETE_ONE_VERSION
condition|)
block|{
name|delete
operator|.
name|deleteColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteType
operator|==
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|DeleteType
operator|.
name|DELETE_MULTIPLE_VERSIONS
condition|)
block|{
name|delete
operator|.
name|deleteColumns
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteType
operator|==
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|DeleteType
operator|.
name|DELETE_FAMILY_VERSION
condition|)
block|{
name|delete
operator|.
name|deleteFamilyVersion
argument_list|(
name|family
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|deleteFamily
argument_list|(
name|family
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|delete
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|proto
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|delete
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|delete
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to an Append    * @param cellScanner    * @param proto the protocol buffer Mutate to convert    * @return the converted client Append    * @throws IOException    */
specifier|public
specifier|static
name|Append
name|toAppend
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|APPEND
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|hasRow
argument_list|()
condition|?
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
name|Append
name|append
init|=
literal|null
decl_stmt|;
name|int
name|cellCount
init|=
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|?
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cellCount
operator|>
literal|0
condition|)
block|{
comment|// The proto has metadata only and the data is separate to be found in the cellScanner.
if|if
condition|(
name|cellScanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but no cellScanner: "
operator|+
name|toShortString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but at index "
operator|+
name|i
operator|+
literal|" no cell returned: "
operator|+
name|toShortString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|append
operator|==
literal|null
condition|)
block|{
name|append
operator|=
operator|new
name|Append
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|append
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|append
operator|=
operator|new
name|Append
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
operator|.
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qv
operator|.
name|hasValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required field: qualifier value"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|value
init|=
name|qv
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tags
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTags
argument_list|()
condition|)
block|{
name|tags
operator|=
name|qv
operator|.
name|getTags
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|append
operator|.
name|add
argument_list|(
name|CellUtil
operator|.
name|createCell
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|qv
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|value
argument_list|,
name|tags
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|append
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|proto
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|append
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|append
return|;
block|}
comment|/**    * Convert a MutateRequest to Mutation    *    * @param proto the protocol buffer Mutate to convert    * @return the converted Mutation    * @throws IOException    */
specifier|public
specifier|static
name|Mutation
name|toMutation
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|MutationProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|APPEND
condition|)
block|{
return|return
name|toAppend
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|DELETE
condition|)
block|{
return|return
name|toDelete
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|PUT
condition|)
block|{
return|return
name|toPut
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown mutation type "
operator|+
name|type
argument_list|)
throw|;
block|}
comment|/**    * Convert a protocol buffer Mutate to an Increment    *    * @param proto the protocol buffer Mutate to convert    * @return the converted client Increment    * @throws IOException    */
specifier|public
specifier|static
name|Increment
name|toIncrement
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|INCREMENT
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|hasRow
argument_list|()
condition|?
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
name|Increment
name|increment
init|=
literal|null
decl_stmt|;
name|int
name|cellCount
init|=
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|?
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cellCount
operator|>
literal|0
condition|)
block|{
comment|// The proto has metadata only and the data is separate to be found in the cellScanner.
if|if
condition|(
name|cellScanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but no cellScanner: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but at index "
operator|+
name|i
operator|+
literal|" no cell returned: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|increment
operator|==
literal|null
condition|)
block|{
name|increment
operator|=
operator|new
name|Increment
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|increment
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|increment
operator|=
operator|new
name|Increment
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
operator|.
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qv
operator|.
name|hasValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required field: qualifier value"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|value
init|=
name|qv
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tags
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTags
argument_list|()
condition|)
block|{
name|tags
operator|=
name|qv
operator|.
name|getTags
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|increment
operator|.
name|add
argument_list|(
name|CellUtil
operator|.
name|createCell
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|qv
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|value
argument_list|,
name|tags
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|proto
operator|.
name|hasTimeRange
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
name|timeRange
init|=
name|proto
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
name|long
name|minStamp
init|=
literal|0
decl_stmt|;
name|long
name|maxStamp
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|timeRange
operator|.
name|hasFrom
argument_list|()
condition|)
block|{
name|minStamp
operator|=
name|timeRange
operator|.
name|getFrom
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timeRange
operator|.
name|hasTo
argument_list|()
condition|)
block|{
name|maxStamp
operator|=
name|timeRange
operator|.
name|getTo
argument_list|()
expr_stmt|;
block|}
name|increment
operator|.
name|setTimeRange
argument_list|(
name|minStamp
argument_list|,
name|maxStamp
argument_list|)
expr_stmt|;
block|}
name|increment
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|proto
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|increment
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|increment
return|;
block|}
comment|/**    * Convert a client Scan to a protocol buffer Scan    *    * @param scan the client Scan to convert    * @return the converted protocol buffer Scan    * @throws IOException    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Scan
name|toScan
parameter_list|(
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientProtos
operator|.
name|Scan
operator|.
name|Builder
name|scanBuilder
init|=
name|ClientProtos
operator|.
name|Scan
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|scanBuilder
operator|.
name|setCacheBlocks
argument_list|(
name|scan
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|scan
operator|.
name|getBatch
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setBatchSize
argument_list|(
name|scan
operator|.
name|getBatch
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getMaxResultSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setMaxResultSize
argument_list|(
name|scan
operator|.
name|getMaxResultSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|isSmall
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setSmall
argument_list|(
name|scan
operator|.
name|isSmall
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|loadColumnFamiliesOnDemand
init|=
name|scan
operator|.
name|getLoadColumnFamiliesOnDemandValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|loadColumnFamiliesOnDemand
operator|!=
literal|null
condition|)
block|{
name|scanBuilder
operator|.
name|setLoadColumnFamiliesOnDemand
argument_list|(
name|loadColumnFamiliesOnDemand
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|scanBuilder
operator|.
name|setMaxVersions
argument_list|(
name|scan
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
name|TimeRange
name|timeRange
init|=
name|scan
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|timeRange
operator|.
name|isAllTime
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|Builder
name|timeRangeBuilder
init|=
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|timeRangeBuilder
operator|.
name|setFrom
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|timeRangeBuilder
operator|.
name|setTo
argument_list|(
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|scanBuilder
operator|.
name|setTimeRange
argument_list|(
name|timeRangeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attributes
init|=
name|scan
operator|.
name|getAttributesMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|NameBytesPair
operator|.
name|Builder
name|attributeBuilder
init|=
name|HBaseProtos
operator|.
name|NameBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|attributeBuilder
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|attributeBuilder
operator|.
name|setValue
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scanBuilder
operator|.
name|addAttribute
argument_list|(
name|attributeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|byte
index|[]
name|startRow
init|=
name|scan
operator|.
name|getStartRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|startRow
operator|!=
literal|null
operator|&&
name|startRow
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setStartRow
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|stopRow
init|=
name|scan
operator|.
name|getStopRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|stopRow
operator|!=
literal|null
operator|&&
name|stopRow
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setStopRow
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|scan
operator|.
name|getFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|hasFamilies
argument_list|()
condition|)
block|{
name|ClientProtos
operator|.
name|Column
operator|.
name|Builder
name|columnBuilder
init|=
name|ClientProtos
operator|.
name|Column
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|family
range|:
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|columnBuilder
operator|.
name|setFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
name|family
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|columnBuilder
operator|.
name|clearQualifier
argument_list|()
expr_stmt|;
if|if
condition|(
name|qualifiers
operator|!=
literal|null
operator|&&
name|qualifiers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|qualifiers
control|)
block|{
name|columnBuilder
operator|.
name|addQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|scanBuilder
operator|.
name|addColumn
argument_list|(
name|columnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|scan
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setStoreLimit
argument_list|(
name|scan
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setStoreOffset
argument_list|(
name|scan
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|isReversed
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setReversed
argument_list|(
name|scan
operator|.
name|isReversed
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getConsistency
argument_list|()
operator|==
name|Consistency
operator|.
name|TIMELINE
condition|)
block|{
name|scanBuilder
operator|.
name|setConsistency
argument_list|(
name|toConsistency
argument_list|(
name|scan
operator|.
name|getConsistency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getCaching
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setCaching
argument_list|(
name|scan
operator|.
name|getCaching
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|scanBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer Scan to a client Scan    *    * @param proto the protocol buffer Scan to convert    * @return the converted client Scan    * @throws IOException    */
specifier|public
specifier|static
name|Scan
name|toScan
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Scan
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|startRow
init|=
name|HConstants
operator|.
name|EMPTY_START_ROW
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
name|HConstants
operator|.
name|EMPTY_END_ROW
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasStartRow
argument_list|()
condition|)
block|{
name|startRow
operator|=
name|proto
operator|.
name|getStartRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStopRow
argument_list|()
condition|)
block|{
name|stopRow
operator|=
name|proto
operator|.
name|getStopRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|startRow
argument_list|,
name|stopRow
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasCacheBlocks
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setCacheBlocks
argument_list|(
name|proto
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMaxVersions
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|proto
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStoreLimit
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
name|proto
operator|.
name|getStoreLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStoreOffset
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setRowOffsetPerColumnFamily
argument_list|(
name|proto
operator|.
name|getStoreOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasLoadColumnFamiliesOnDemand
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setLoadColumnFamiliesOnDemand
argument_list|(
name|proto
operator|.
name|getLoadColumnFamiliesOnDemand
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasTimeRange
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
name|timeRange
init|=
name|proto
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
name|long
name|minStamp
init|=
literal|0
decl_stmt|;
name|long
name|maxStamp
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|timeRange
operator|.
name|hasFrom
argument_list|()
condition|)
block|{
name|minStamp
operator|=
name|timeRange
operator|.
name|getFrom
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timeRange
operator|.
name|hasTo
argument_list|()
condition|)
block|{
name|maxStamp
operator|=
name|timeRange
operator|.
name|getTo
argument_list|()
expr_stmt|;
block|}
name|scan
operator|.
name|setTimeRange
argument_list|(
name|minStamp
argument_list|,
name|maxStamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|FilterProtos
operator|.
name|Filter
name|filter
init|=
name|proto
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasBatchSize
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setBatch
argument_list|(
name|proto
operator|.
name|getBatchSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMaxResultSize
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setMaxResultSize
argument_list|(
name|proto
operator|.
name|getMaxResultSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasSmall
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setSmall
argument_list|(
name|proto
operator|.
name|getSmall
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HBaseProtos
operator|.
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|scan
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getColumnCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ClientProtos
operator|.
name|Column
name|column
range|:
name|proto
operator|.
name|getColumnList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|.
name|getQualifierCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ByteString
name|qualifier
range|:
name|column
operator|.
name|getQualifierList
argument_list|()
control|)
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|proto
operator|.
name|hasReversed
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setReversed
argument_list|(
name|proto
operator|.
name|getReversed
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasConsistency
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setConsistency
argument_list|(
name|toConsistency
argument_list|(
name|proto
operator|.
name|getConsistency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasCaching
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setCaching
argument_list|(
name|proto
operator|.
name|getCaching
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|scan
return|;
block|}
comment|/**    * Create a protocol buffer Get based on a client Get.    *    * @param get the client Get    * @return a protocol buffer Get    * @throws IOException    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Get
name|toGet
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientProtos
operator|.
name|Get
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Get
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setRow
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|get
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCacheBlocks
argument_list|(
name|get
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMaxVersions
argument_list|(
name|get
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|get
operator|.
name|getFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|get
operator|.
name|getFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TimeRange
name|timeRange
init|=
name|get
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|timeRange
operator|.
name|isAllTime
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|Builder
name|timeRangeBuilder
init|=
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|timeRangeBuilder
operator|.
name|setFrom
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|timeRangeBuilder
operator|.
name|setTo
argument_list|(
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTimeRange
argument_list|(
name|timeRangeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attributes
init|=
name|get
operator|.
name|getAttributesMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|NameBytesPair
operator|.
name|Builder
name|attributeBuilder
init|=
name|HBaseProtos
operator|.
name|NameBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|attributeBuilder
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|attributeBuilder
operator|.
name|setValue
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|attributeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|get
operator|.
name|hasFamilies
argument_list|()
condition|)
block|{
name|ClientProtos
operator|.
name|Column
operator|.
name|Builder
name|columnBuilder
init|=
name|ClientProtos
operator|.
name|Column
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|families
init|=
name|get
operator|.
name|getFamilyMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|family
range|:
name|families
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
name|family
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|columnBuilder
operator|.
name|setFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|columnBuilder
operator|.
name|clearQualifier
argument_list|()
expr_stmt|;
if|if
condition|(
name|qualifiers
operator|!=
literal|null
operator|&&
name|qualifiers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|qualifiers
control|)
block|{
name|columnBuilder
operator|.
name|addQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|addColumn
argument_list|(
name|columnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|get
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|setStoreLimit
argument_list|(
name|get
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|get
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|setStoreOffset
argument_list|(
name|get
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|get
operator|.
name|isCheckExistenceOnly
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setExistenceOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|get
operator|.
name|isClosestRowBefore
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setClosestRowBefore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|get
operator|.
name|getConsistency
argument_list|()
operator|!=
literal|null
operator|&&
name|get
operator|.
name|getConsistency
argument_list|()
operator|!=
name|Consistency
operator|.
name|STRONG
condition|)
block|{
name|builder
operator|.
name|setConsistency
argument_list|(
name|toConsistency
argument_list|(
name|get
operator|.
name|getConsistency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a client Increment to a protobuf Mutate.    *    * @param increment    * @return the converted mutate    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|Increment
name|increment
parameter_list|,
specifier|final
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|,
name|long
name|nonce
parameter_list|)
block|{
name|builder
operator|.
name|setRow
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|increment
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMutateType
argument_list|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|INCREMENT
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|increment
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nonce
operator|!=
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
name|builder
operator|.
name|setNonce
argument_list|(
name|nonce
argument_list|)
expr_stmt|;
block|}
name|TimeRange
name|timeRange
init|=
name|increment
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|timeRange
operator|.
name|isAllTime
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|Builder
name|timeRangeBuilder
init|=
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|timeRangeBuilder
operator|.
name|setFrom
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|timeRangeBuilder
operator|.
name|setTo
argument_list|(
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTimeRange
argument_list|(
name|timeRangeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
operator|.
name|Builder
name|columnBuilder
init|=
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
operator|.
name|QualifierValue
operator|.
name|Builder
name|valueBuilder
init|=
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
operator|.
name|QualifierValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|family
range|:
name|increment
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|columnBuilder
operator|.
name|setFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|columnBuilder
operator|.
name|clearQualifierValue
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|values
init|=
name|family
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|values
control|)
block|{
name|valueBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|valueBuilder
operator|.
name|setQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|valueBuilder
operator|.
name|setValue
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getTagsLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|valueBuilder
operator|.
name|setTags
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|columnBuilder
operator|.
name|addQualifierValue
argument_list|(
name|valueBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|addColumnValue
argument_list|(
name|columnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attributes
init|=
name|increment
operator|.
name|getAttributesMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|NameBytesPair
operator|.
name|Builder
name|attributeBuilder
init|=
name|HBaseProtos
operator|.
name|NameBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|attributeBuilder
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|attributeBuilder
operator|.
name|setValue
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|attributeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Create a protocol buffer Mutate based on a client Mutation    *    * @param type    * @param mutation    * @return a protobuf'd Mutation    * @throws IOException    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
specifier|final
name|long
name|nonce
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toMutation
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|newBuilder
argument_list|()
argument_list|,
name|nonce
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ClientProtos
operator|.
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toMutation
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
specifier|static
name|ClientProtos
operator|.
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|,
name|long
name|nonce
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|=
name|getMutationBuilderAndSetCommonFields
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|nonce
operator|!=
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
name|builder
operator|.
name|setNonce
argument_list|(
name|nonce
argument_list|)
expr_stmt|;
block|}
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
operator|.
name|Builder
name|columnBuilder
init|=
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
operator|.
name|QualifierValue
operator|.
name|Builder
name|valueBuilder
init|=
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
operator|.
name|QualifierValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|family
range|:
name|mutation
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|columnBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|columnBuilder
operator|.
name|setFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|family
operator|.
name|getValue
argument_list|()
control|)
block|{
name|valueBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|valueBuilder
operator|.
name|setQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|valueBuilder
operator|.
name|setValue
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|valueBuilder
operator|.
name|setTimestamp
argument_list|(
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getTagsLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|valueBuilder
operator|.
name|setTags
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|DELETE
operator|||
operator|(
name|type
operator|==
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|PUT
operator|&&
name|CellUtil
operator|.
name|isDelete
argument_list|(
name|cell
argument_list|)
operator|)
condition|)
block|{
name|KeyValue
operator|.
name|Type
name|keyValueType
init|=
name|KeyValue
operator|.
name|Type
operator|.
name|codeToType
argument_list|(
name|cell
operator|.
name|getTypeByte
argument_list|()
argument_list|)
decl_stmt|;
name|valueBuilder
operator|.
name|setDeleteType
argument_list|(
name|toDeleteType
argument_list|(
name|keyValueType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|columnBuilder
operator|.
name|addQualifierValue
argument_list|(
name|valueBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addColumnValue
argument_list|(
name|columnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ClientProtos
operator|.
name|MutationProto
name|toMutationNoData
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
specifier|final
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|,
name|long
name|nonce
parameter_list|)
throws|throws
name|IOException
block|{
name|getMutationBuilderAndSetCommonFields
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
name|mutation
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nonce
operator|!=
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
name|builder
operator|.
name|setNonce
argument_list|(
name|nonce
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Code shared by {@link ProtobufUtil#toMutation} and    * {@link ProtobufUtil#toMutationNoData(ClientProtos.MutationProto.MutationType,    * Mutation)}    * @param type    * @param mutation    * @return A partly-filled out protobuf'd Mutation.    */
specifier|private
specifier|static
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Builder
name|getMutationBuilderAndSetCommonFields
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setRow
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|mutation
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMutateType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|mutation
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTimestamp
argument_list|(
name|mutation
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attributes
init|=
name|mutation
operator|.
name|getAttributesMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|NameBytesPair
operator|.
name|Builder
name|attributeBuilder
init|=
name|HBaseProtos
operator|.
name|NameBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|attributeBuilder
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|attributeBuilder
operator|.
name|setValue
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|attributeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
comment|/**    * Convert a client Result to a protocol buffer Result    *    * @param result the client Result to convert    * @return the converted protocol buffer Result    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Result
name|toResult
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|getExists
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|toResult
argument_list|(
name|result
operator|.
name|getExists
argument_list|()
argument_list|,
name|result
operator|.
name|isStale
argument_list|()
argument_list|)
return|;
block|}
name|Cell
index|[]
name|cells
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
if|if
condition|(
name|cells
operator|==
literal|null
operator|||
name|cells
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|result
operator|.
name|isStale
argument_list|()
condition|?
name|EMPTY_RESULT_PB_STALE
else|:
name|EMPTY_RESULT_PB
return|;
block|}
name|ClientProtos
operator|.
name|Result
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Result
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|cells
control|)
block|{
name|builder
operator|.
name|addCell
argument_list|(
name|toCell
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setStale
argument_list|(
name|result
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setPartial
argument_list|(
name|result
operator|.
name|isPartial
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a client Result to a protocol buffer Result    *    * @param existence the client existence to send    * @return the converted protocol buffer Result    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Result
name|toResult
parameter_list|(
specifier|final
name|boolean
name|existence
parameter_list|,
name|boolean
name|stale
parameter_list|)
block|{
if|if
condition|(
name|stale
condition|)
block|{
return|return
name|existence
condition|?
name|EMPTY_RESULT_PB_EXISTS_TRUE_STALE
else|:
name|EMPTY_RESULT_PB_EXISTS_FALSE_STALE
return|;
block|}
else|else
block|{
return|return
name|existence
condition|?
name|EMPTY_RESULT_PB_EXISTS_TRUE
else|:
name|EMPTY_RESULT_PB_EXISTS_FALSE
return|;
block|}
block|}
comment|/**    * Convert a client Result to a protocol buffer Result.    * The pb Result does not include the Cell data.  That is for transport otherwise.    *    * @param result the client Result to convert    * @return the converted protocol buffer Result    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Result
name|toResultNoData
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|getExists
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|toResult
argument_list|(
name|result
operator|.
name|getExists
argument_list|()
argument_list|,
name|result
operator|.
name|isStale
argument_list|()
argument_list|)
return|;
name|int
name|size
init|=
name|result
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return
name|result
operator|.
name|isStale
argument_list|()
condition|?
name|EMPTY_RESULT_PB_STALE
else|:
name|EMPTY_RESULT_PB
return|;
name|ClientProtos
operator|.
name|Result
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Result
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStale
argument_list|(
name|result
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer Result to a client Result    *    * @param proto the protocol buffer Result to convert    * @return the converted client Result    */
specifier|public
specifier|static
name|Result
name|toResult
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Result
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|.
name|hasExists
argument_list|()
condition|)
block|{
if|if
condition|(
name|proto
operator|.
name|getStale
argument_list|()
condition|)
block|{
return|return
name|proto
operator|.
name|getExists
argument_list|()
condition|?
name|EMPTY_RESULT_EXISTS_TRUE_STALE
else|:
name|EMPTY_RESULT_EXISTS_FALSE_STALE
return|;
block|}
return|return
name|proto
operator|.
name|getExists
argument_list|()
condition|?
name|EMPTY_RESULT_EXISTS_TRUE
else|:
name|EMPTY_RESULT_EXISTS_FALSE
return|;
block|}
name|List
argument_list|<
name|CellProtos
operator|.
name|Cell
argument_list|>
name|values
init|=
name|proto
operator|.
name|getCellList
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|proto
operator|.
name|getStale
argument_list|()
condition|?
name|EMPTY_RESULT_STALE
else|:
name|EMPTY_RESULT
return|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CellProtos
operator|.
name|Cell
name|c
range|:
name|values
control|)
block|{
name|cells
operator|.
name|add
argument_list|(
name|toCell
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|,
literal|null
argument_list|,
name|proto
operator|.
name|getStale
argument_list|()
argument_list|,
name|proto
operator|.
name|getPartial
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Result to a client Result    *    * @param proto the protocol buffer Result to convert    * @param scanner Optional cell scanner.    * @return the converted client Result    * @throws IOException    */
specifier|public
specifier|static
name|Result
name|toResult
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Result
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CellProtos
operator|.
name|Cell
argument_list|>
name|values
init|=
name|proto
operator|.
name|getCellList
argument_list|()
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasExists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|values
operator|!=
literal|null
operator|&&
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
operator|&&
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad proto: exists with cells is no allowed "
operator|+
name|proto
argument_list|)
throw|;
block|}
if|if
condition|(
name|proto
operator|.
name|getStale
argument_list|()
condition|)
block|{
return|return
name|proto
operator|.
name|getExists
argument_list|()
condition|?
name|EMPTY_RESULT_EXISTS_TRUE_STALE
else|:
name|EMPTY_RESULT_EXISTS_FALSE_STALE
return|;
block|}
return|return
name|proto
operator|.
name|getExists
argument_list|()
condition|?
name|EMPTY_RESULT_EXISTS_TRUE
else|:
name|EMPTY_RESULT_EXISTS_FALSE
return|;
block|}
comment|// TODO: Unit test that has some Cells in scanner and some in the proto.
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|)
block|{
name|int
name|count
init|=
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
decl_stmt|;
name|cells
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|count
operator|+
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scanner
operator|.
name|advance
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed get "
operator|+
name|i
operator|+
literal|" of "
operator|+
name|count
argument_list|)
throw|;
name|cells
operator|.
name|add
argument_list|(
name|scanner
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|cells
operator|==
literal|null
condition|)
name|cells
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CellProtos
operator|.
name|Cell
name|c
range|:
name|values
control|)
block|{
name|cells
operator|.
name|add
argument_list|(
name|toCell
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|cells
operator|==
literal|null
operator|||
name|cells
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
operator|(
name|proto
operator|.
name|getStale
argument_list|()
condition|?
name|EMPTY_RESULT_STALE
else|:
name|EMPTY_RESULT
operator|)
else|:
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|,
literal|null
argument_list|,
name|proto
operator|.
name|getStale
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert a ByteArrayComparable to a protocol buffer Comparator    *    * @param comparator the ByteArrayComparable to convert    * @return the converted protocol buffer Comparator    */
specifier|public
specifier|static
name|ComparatorProtos
operator|.
name|Comparator
name|toComparator
parameter_list|(
name|ByteArrayComparable
name|comparator
parameter_list|)
block|{
name|ComparatorProtos
operator|.
name|Comparator
operator|.
name|Builder
name|builder
init|=
name|ComparatorProtos
operator|.
name|Comparator
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|comparator
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSerializedComparator
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|comparator
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer Comparator to a ByteArrayComparable    *    * @param proto the protocol buffer Comparator to convert    * @return the converted ByteArrayComparable    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|ByteArrayComparable
name|toComparator
parameter_list|(
name|ComparatorProtos
operator|.
name|Comparator
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|type
init|=
name|proto
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|funcName
init|=
literal|"parseFrom"
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|proto
operator|.
name|getSerializedComparator
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ByteArrayComparable
argument_list|>
name|c
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|ByteArrayComparable
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|type
argument_list|,
literal|true
argument_list|,
name|CLASS_LOADER
argument_list|)
decl_stmt|;
name|Method
name|parseFrom
init|=
name|c
operator|.
name|getMethod
argument_list|(
name|funcName
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|parseFrom
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to locate function: "
operator|+
name|funcName
operator|+
literal|" in type: "
operator|+
name|type
argument_list|)
throw|;
block|}
return|return
operator|(
name|ByteArrayComparable
operator|)
name|parseFrom
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a protocol buffer Filter to a client Filter    *    * @param proto the protocol buffer Filter to convert    * @return the converted Filter    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Filter
name|toFilter
parameter_list|(
name|FilterProtos
operator|.
name|Filter
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|type
init|=
name|proto
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|proto
operator|.
name|getSerializedFilter
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|funcName
init|=
literal|"parseFrom"
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Filter
argument_list|>
name|c
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Filter
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|type
argument_list|,
literal|true
argument_list|,
name|CLASS_LOADER
argument_list|)
decl_stmt|;
name|Method
name|parseFrom
init|=
name|c
operator|.
name|getMethod
argument_list|(
name|funcName
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|parseFrom
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to locate function: "
operator|+
name|funcName
operator|+
literal|" in type: "
operator|+
name|type
argument_list|)
throw|;
block|}
return|return
operator|(
name|Filter
operator|)
name|parseFrom
operator|.
name|invoke
argument_list|(
name|c
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Either we couldn't instantiate the method object, or "parseFrom" failed.
comment|// In either case, let's not retry.
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a client Filter to a protocol buffer Filter    *    * @param filter the Filter to convert    * @return the converted protocol buffer Filter    */
specifier|public
specifier|static
name|FilterProtos
operator|.
name|Filter
name|toFilter
parameter_list|(
name|Filter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|FilterProtos
operator|.
name|Filter
operator|.
name|Builder
name|builder
init|=
name|FilterProtos
operator|.
name|Filter
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|filter
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSerializedFilter
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|filter
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a delete KeyValue type to protocol buffer DeleteType.    *    * @param type    * @return protocol buffer DeleteType    * @throws IOException    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|DeleteType
name|toDeleteType
parameter_list|(
name|KeyValue
operator|.
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Delete
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|DeleteType
operator|.
name|DELETE_ONE_VERSION
return|;
case|case
name|DeleteColumn
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|DeleteType
operator|.
name|DELETE_MULTIPLE_VERSIONS
return|;
case|case
name|DeleteFamily
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|DeleteType
operator|.
name|DELETE_FAMILY
return|;
case|case
name|DeleteFamilyVersion
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|DeleteType
operator|.
name|DELETE_FAMILY_VERSION
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown delete type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a protocol buffer DeleteType to delete KeyValue type.    *    * @param type The DeleteType    * @return The type.    * @throws IOException    */
specifier|public
specifier|static
name|KeyValue
operator|.
name|Type
name|fromDeleteType
parameter_list|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|DeleteType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DELETE_ONE_VERSION
case|:
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
return|;
case|case
name|DELETE_MULTIPLE_VERSIONS
case|:
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
return|;
case|case
name|DELETE_FAMILY
case|:
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
return|;
case|case
name|DELETE_FAMILY_VERSION
case|:
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamilyVersion
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown delete type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a stringified protocol buffer exception Parameter to a Java Exception    *    * @param parameter the protocol buffer Parameter to convert    * @return the converted Exception    * @throws IOException if failed to deserialize the parameter    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Throwable
name|toException
parameter_list|(
specifier|final
name|HBaseProtos
operator|.
name|NameBytesPair
name|parameter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parameter
operator|==
literal|null
operator|||
operator|!
name|parameter
operator|.
name|hasValue
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|desc
init|=
name|parameter
operator|.
name|getValue
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|parameter
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|c
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|type
argument_list|,
literal|true
argument_list|,
name|CLASS_LOADER
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|cn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cn
operator|=
name|c
operator|.
name|getDeclaredConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|cn
operator|.
name|newInstance
argument_list|(
name|desc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// Could be a raw RemoteException. See HBASE-8987.
name|cn
operator|=
name|c
operator|.
name|getDeclaredConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|cn
operator|.
name|newInstance
argument_list|(
name|type
argument_list|,
name|desc
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Converts a Permission proto to a client Permission object.    *    * @param proto the protobuf Permission    * @return the converted Permission    */
specifier|public
specifier|static
name|Permission
name|toPermission
parameter_list|(
name|AccessControlProtos
operator|.
name|Permission
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|.
name|getType
argument_list|()
operator|!=
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Global
condition|)
block|{
return|return
name|toTablePermission
argument_list|(
name|proto
argument_list|)
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
name|actions
init|=
name|toPermissionActions
argument_list|(
name|proto
operator|.
name|getGlobalPermission
argument_list|()
operator|.
name|getActionList
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Permission
argument_list|(
name|actions
operator|.
name|toArray
argument_list|(
operator|new
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Converts a Permission proto to a client TablePermission object.    *    * @param proto the protobuf Permission    * @return the converted TablePermission    */
specifier|public
specifier|static
name|TablePermission
name|toTablePermission
parameter_list|(
name|AccessControlProtos
operator|.
name|Permission
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|.
name|getType
argument_list|()
operator|==
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Global
condition|)
block|{
name|AccessControlProtos
operator|.
name|GlobalPermission
name|perm
init|=
name|proto
operator|.
name|getGlobalPermission
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
name|actions
init|=
name|toPermissionActions
argument_list|(
name|perm
operator|.
name|getActionList
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|TablePermission
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|actions
operator|.
name|toArray
argument_list|(
operator|new
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|proto
operator|.
name|getType
argument_list|()
operator|==
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Namespace
condition|)
block|{
name|AccessControlProtos
operator|.
name|NamespacePermission
name|perm
init|=
name|proto
operator|.
name|getNamespacePermission
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
name|actions
init|=
name|toPermissionActions
argument_list|(
name|perm
operator|.
name|getActionList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proto
operator|.
name|hasNamespacePermission
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Namespace must not be empty in NamespacePermission"
argument_list|)
throw|;
block|}
name|String
name|namespace
init|=
name|perm
operator|.
name|getNamespaceName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
return|return
operator|new
name|TablePermission
argument_list|(
name|namespace
argument_list|,
name|actions
operator|.
name|toArray
argument_list|(
operator|new
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|proto
operator|.
name|getType
argument_list|()
operator|==
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Table
condition|)
block|{
name|AccessControlProtos
operator|.
name|TablePermission
name|perm
init|=
name|proto
operator|.
name|getTablePermission
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
name|actions
init|=
name|toPermissionActions
argument_list|(
name|perm
operator|.
name|getActionList
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|family
init|=
literal|null
decl_stmt|;
name|TableName
name|table
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|perm
operator|.
name|hasTableName
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"TableName cannot be empty"
argument_list|)
throw|;
block|}
name|table
operator|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|perm
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|perm
operator|.
name|hasFamily
argument_list|()
condition|)
name|family
operator|=
name|perm
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
if|if
condition|(
name|perm
operator|.
name|hasQualifier
argument_list|()
condition|)
name|qualifier
operator|=
name|perm
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
return|return
operator|new
name|TablePermission
argument_list|(
name|table
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|actions
operator|.
name|toArray
argument_list|(
operator|new
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unrecognize Perm Type: "
operator|+
name|proto
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Convert a client Permission to a Permission proto    *    * @param perm the client Permission    * @return the protobuf Permission    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|Permission
name|toPermission
parameter_list|(
name|Permission
name|perm
parameter_list|)
block|{
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Builder
name|ret
init|=
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|perm
operator|instanceof
name|TablePermission
condition|)
block|{
name|TablePermission
name|tablePerm
init|=
operator|(
name|TablePermission
operator|)
name|perm
decl_stmt|;
if|if
condition|(
name|tablePerm
operator|.
name|hasNamespace
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Namespace
argument_list|)
expr_stmt|;
name|AccessControlProtos
operator|.
name|NamespacePermission
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|NamespacePermission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNamespaceName
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|tablePerm
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Permission
operator|.
name|Action
name|actions
index|[]
init|=
name|perm
operator|.
name|getActions
argument_list|()
decl_stmt|;
if|if
condition|(
name|actions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|builder
operator|.
name|addAction
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|setNamespacePermission
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|build
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|tablePerm
operator|.
name|hasTable
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Table
argument_list|)
expr_stmt|;
name|AccessControlProtos
operator|.
name|TablePermission
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|TablePermission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|tablePerm
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tablePerm
operator|.
name|hasFamily
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|tablePerm
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tablePerm
operator|.
name|hasQualifier
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|tablePerm
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Permission
operator|.
name|Action
name|actions
index|[]
init|=
name|perm
operator|.
name|getActions
argument_list|()
decl_stmt|;
if|if
condition|(
name|actions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|builder
operator|.
name|addAction
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|setTablePermission
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|build
argument_list|()
return|;
block|}
block|}
name|ret
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Global
argument_list|)
expr_stmt|;
name|AccessControlProtos
operator|.
name|GlobalPermission
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|GlobalPermission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Permission
operator|.
name|Action
name|actions
index|[]
init|=
name|perm
operator|.
name|getActions
argument_list|()
decl_stmt|;
if|if
condition|(
name|actions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|builder
operator|.
name|addAction
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|setGlobalPermission
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Converts a list of Permission.Action proto to a list of client Permission.Action objects.    *    * @param protoActions the list of protobuf Actions    * @return the converted list of Actions    */
specifier|public
specifier|static
name|List
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
name|toPermissionActions
parameter_list|(
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|protoActions
parameter_list|)
block|{
name|List
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
name|actions
init|=
operator|new
name|ArrayList
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
argument_list|(
name|protoActions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
name|a
range|:
name|protoActions
control|)
block|{
name|actions
operator|.
name|add
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|actions
return|;
block|}
comment|/**    * Converts a Permission.Action proto to a client Permission.Action object.    *    * @param action the protobuf Action    * @return the converted Action    */
specifier|public
specifier|static
name|Permission
operator|.
name|Action
name|toPermissionAction
parameter_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|READ
case|:
return|return
name|Permission
operator|.
name|Action
operator|.
name|READ
return|;
case|case
name|WRITE
case|:
return|return
name|Permission
operator|.
name|Action
operator|.
name|WRITE
return|;
case|case
name|EXEC
case|:
return|return
name|Permission
operator|.
name|Action
operator|.
name|EXEC
return|;
case|case
name|CREATE
case|:
return|return
name|Permission
operator|.
name|Action
operator|.
name|CREATE
return|;
case|case
name|ADMIN
case|:
return|return
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown action value "
operator|+
name|action
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Convert a client Permission.Action to a Permission.Action proto    *    * @param action the client Action    * @return the protobuf Action    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
name|toPermissionAction
parameter_list|(
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|READ
case|:
return|return
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
operator|.
name|READ
return|;
case|case
name|WRITE
case|:
return|return
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
operator|.
name|WRITE
return|;
case|case
name|EXEC
case|:
return|return
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
operator|.
name|EXEC
return|;
case|case
name|CREATE
case|:
return|return
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
operator|.
name|CREATE
return|;
case|case
name|ADMIN
case|:
return|return
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown action value "
operator|+
name|action
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Convert a client user permission to a user permission proto    *    * @param perm the client UserPermission    * @return the protobuf UserPermission    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|UserPermission
name|toUserPermission
parameter_list|(
name|UserPermission
name|perm
parameter_list|)
block|{
return|return
name|AccessControlProtos
operator|.
name|UserPermission
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUser
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|perm
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setPermission
argument_list|(
name|toPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Converts a user permission proto to a client user permission object.    *    * @param proto the protobuf UserPermission    * @return the converted UserPermission    */
specifier|public
specifier|static
name|UserPermission
name|toUserPermission
parameter_list|(
name|AccessControlProtos
operator|.
name|UserPermission
name|proto
parameter_list|)
block|{
return|return
operator|new
name|UserPermission
argument_list|(
name|proto
operator|.
name|getUser
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|toTablePermission
argument_list|(
name|proto
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convert a ListMultimap&lt;String, TablePermission&gt; where key is username    * to a protobuf UserPermission    *    * @param perm the list of user and table permissions    * @return the protobuf UserTablePermissions    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|toUserTablePermissions
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perm
parameter_list|)
block|{
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|TablePermission
argument_list|>
argument_list|>
name|entry
range|:
name|perm
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
operator|.
name|Builder
name|userPermBuilder
init|=
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|userPermBuilder
operator|.
name|setUser
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TablePermission
name|tablePerm
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|userPermBuilder
operator|.
name|addPermissions
argument_list|(
name|toPermission
argument_list|(
name|tablePerm
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addUserPermissions
argument_list|(
name|userPermBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protobuf UserTablePermissions to a    * ListMultimap&lt;String, TablePermission&gt; where key is username.    *    * @param proto the protobuf UserPermission    * @return the converted UserPermission    */
specifier|public
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|toUserTablePermissions
parameter_list|(
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|proto
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perms
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
name|userPerm
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proto
operator|.
name|getUserPermissionsCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|userPerm
operator|=
name|proto
operator|.
name|getUserPermissions
argument_list|(
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|userPerm
operator|.
name|getPermissionsCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|TablePermission
name|tablePerm
init|=
name|toTablePermission
argument_list|(
name|userPerm
operator|.
name|getPermissions
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|perms
operator|.
name|put
argument_list|(
name|userPerm
operator|.
name|getUser
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|,
name|tablePerm
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|perms
return|;
block|}
comment|/**    * Converts a Token instance (with embedded identifier) to the protobuf representation.    *    * @param token the Token instance to copy    * @return the protobuf Token message    */
specifier|public
specifier|static
name|AuthenticationProtos
operator|.
name|Token
name|toToken
parameter_list|(
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|token
parameter_list|)
block|{
name|AuthenticationProtos
operator|.
name|Token
operator|.
name|Builder
name|builder
init|=
name|AuthenticationProtos
operator|.
name|Token
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setIdentifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setPassword
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|token
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|getService
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setService
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Converts a protobuf Token message back into a Token instance.    *    * @param proto the protobuf Token message    * @return the Token instance    */
specifier|public
specifier|static
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|toToken
parameter_list|(
name|AuthenticationProtos
operator|.
name|Token
name|proto
parameter_list|)
block|{
return|return
operator|new
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
argument_list|(
name|proto
operator|.
name|hasIdentifier
argument_list|()
condition|?
name|proto
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|,
name|proto
operator|.
name|hasPassword
argument_list|()
condition|?
name|proto
operator|.
name|getPassword
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|,
name|AuthenticationTokenIdentifier
operator|.
name|AUTH_TOKEN_TYPE
argument_list|,
name|proto
operator|.
name|hasService
argument_list|()
condition|?
operator|new
name|Text
argument_list|(
name|proto
operator|.
name|getService
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ScanMetrics
name|toScanMetrics
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|Parser
argument_list|<
name|MapReduceProtos
operator|.
name|ScanMetrics
argument_list|>
name|parser
init|=
name|MapReduceProtos
operator|.
name|ScanMetrics
operator|.
name|PARSER
decl_stmt|;
name|MapReduceProtos
operator|.
name|ScanMetrics
name|pScanMetrics
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pScanMetrics
operator|=
name|parser
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
comment|//Ignored there are just no key values to add.
block|}
name|ScanMetrics
name|scanMetrics
init|=
operator|new
name|ScanMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|pScanMetrics
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HBaseProtos
operator|.
name|NameInt64Pair
name|pair
range|:
name|pScanMetrics
operator|.
name|getMetricsList
argument_list|()
control|)
block|{
if|if
condition|(
name|pair
operator|.
name|hasName
argument_list|()
operator|&&
name|pair
operator|.
name|hasValue
argument_list|()
condition|)
block|{
name|scanMetrics
operator|.
name|setCounter
argument_list|(
name|pair
operator|.
name|getName
argument_list|()
argument_list|,
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|scanMetrics
return|;
block|}
specifier|public
specifier|static
name|MapReduceProtos
operator|.
name|ScanMetrics
name|toScanMetrics
parameter_list|(
name|ScanMetrics
name|scanMetrics
parameter_list|)
block|{
name|MapReduceProtos
operator|.
name|ScanMetrics
operator|.
name|Builder
name|builder
init|=
name|MapReduceProtos
operator|.
name|ScanMetrics
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|metrics
init|=
name|scanMetrics
operator|.
name|getMetricsMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|metrics
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HBaseProtos
operator|.
name|NameInt64Pair
name|nameInt64Pair
init|=
name|HBaseProtos
operator|.
name|NameInt64Pair
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addMetrics
argument_list|(
name|nameInt64Pair
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|CellProtos
operator|.
name|Cell
name|toCell
parameter_list|(
specifier|final
name|Cell
name|kv
parameter_list|)
block|{
comment|// Doing this is going to kill us if we do it for all data passed.
comment|// St.Ack 20121205
name|CellProtos
operator|.
name|Cell
operator|.
name|Builder
name|kvbuilder
init|=
name|CellProtos
operator|.
name|Cell
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|kvbuilder
operator|.
name|setRow
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setCellType
argument_list|(
name|CellProtos
operator|.
name|CellType
operator|.
name|valueOf
argument_list|(
name|kv
operator|.
name|getTypeByte
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setTimestamp
argument_list|(
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setValue
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|kvbuilder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Cell
name|toCell
parameter_list|(
specifier|final
name|CellProtos
operator|.
name|Cell
name|cell
parameter_list|)
block|{
comment|// Doing this is going to kill us if we do it for all data passed.
comment|// St.Ack 20121205
return|return
name|CellUtil
operator|.
name|createCell
argument_list|(
name|cell
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|,
operator|(
name|byte
operator|)
name|cell
operator|.
name|getCellType
argument_list|()
operator|.
name|getNumber
argument_list|()
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|NamespaceDescriptor
name|toProtoNamespaceDescriptor
parameter_list|(
name|NamespaceDescriptor
name|ns
parameter_list|)
block|{
name|HBaseProtos
operator|.
name|NamespaceDescriptor
operator|.
name|Builder
name|b
init|=
name|HBaseProtos
operator|.
name|NamespaceDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|ns
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|ns
operator|.
name|getConfiguration
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|b
operator|.
name|addConfiguration
argument_list|(
name|HBaseProtos
operator|.
name|NameStringPair
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NamespaceDescriptor
name|toNamespaceDescriptor
parameter_list|(
name|HBaseProtos
operator|.
name|NamespaceDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
name|NamespaceDescriptor
operator|.
name|Builder
name|b
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|NameStringPair
name|prop
range|:
name|desc
operator|.
name|getConfigurationList
argument_list|()
control|)
block|{
name|b
operator|.
name|addConfiguration
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|,
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|WALProtos
operator|.
name|CompactionDescriptor
name|toCompactionDescriptor
parameter_list|(
name|HRegionInfo
name|info
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|inputPaths
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|outputPaths
parameter_list|,
name|Path
name|storeDir
parameter_list|)
block|{
comment|// compaction descriptor contains relative paths.
comment|// input / output paths are relative to the store dir
comment|// store dir is relative to region dir
name|WALProtos
operator|.
name|CompactionDescriptor
operator|.
name|Builder
name|builder
init|=
name|WALProtos
operator|.
name|CompactionDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|info
operator|.
name|getTable
argument_list|()
operator|.
name|toBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setEncodedRegionName
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|info
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setFamilyName
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|family
argument_list|)
argument_list|)
operator|.
name|setStoreHomeDir
argument_list|(
name|storeDir
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|//make relative
for|for
control|(
name|Path
name|inputPath
range|:
name|inputPaths
control|)
block|{
name|builder
operator|.
name|addCompactionInput
argument_list|(
name|inputPath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//relative path
block|}
for|for
control|(
name|Path
name|outputPath
range|:
name|outputPaths
control|)
block|{
name|builder
operator|.
name|addCompactionOutput
argument_list|(
name|outputPath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setRegionName
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|info
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|WALProtos
operator|.
name|FlushDescriptor
name|toFlushDescriptor
parameter_list|(
name|WALProtos
operator|.
name|FlushDescriptor
operator|.
name|FlushAction
name|action
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|,
name|long
name|flushSeqId
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|committedFiles
parameter_list|)
block|{
name|WALProtos
operator|.
name|FlushDescriptor
operator|.
name|Builder
name|desc
init|=
name|WALProtos
operator|.
name|FlushDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAction
argument_list|(
name|action
argument_list|)
operator|.
name|setEncodedRegionName
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setRegionName
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setFlushSequenceNumber
argument_list|(
name|flushSeqId
argument_list|)
operator|.
name|setTableName
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|entry
range|:
name|committedFiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|WALProtos
operator|.
name|FlushDescriptor
operator|.
name|StoreFlushDescriptor
operator|.
name|Builder
name|builder
init|=
name|WALProtos
operator|.
name|FlushDescriptor
operator|.
name|StoreFlushDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setFamilyName
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStoreHomeDir
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//relative to region
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|builder
operator|.
name|addFlushOutput
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|desc
operator|.
name|addStoreFlushes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|WALProtos
operator|.
name|RegionEventDescriptor
name|toRegionEventDescriptor
parameter_list|(
name|WALProtos
operator|.
name|RegionEventDescriptor
operator|.
name|EventType
name|eventType
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|,
name|long
name|seqId
parameter_list|,
name|ServerName
name|server
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|storeFiles
parameter_list|)
block|{
name|WALProtos
operator|.
name|RegionEventDescriptor
operator|.
name|Builder
name|desc
init|=
name|WALProtos
operator|.
name|RegionEventDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setEventType
argument_list|(
name|eventType
argument_list|)
operator|.
name|setTableName
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setEncodedRegionName
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setRegionName
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setLogSequenceNumber
argument_list|(
name|seqId
argument_list|)
operator|.
name|setServer
argument_list|(
name|toServerName
argument_list|(
name|server
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|entry
range|:
name|storeFiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|WALProtos
operator|.
name|StoreDescriptor
operator|.
name|Builder
name|builder
init|=
name|WALProtos
operator|.
name|StoreDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setFamilyName
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStoreHomeDir
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|builder
operator|.
name|addStoreFile
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|desc
operator|.
name|addStores
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|TableName
name|toTableName
parameter_list|(
name|HBaseProtos
operator|.
name|TableName
name|tableNamePB
parameter_list|)
block|{
return|return
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableNamePB
operator|.
name|getNamespace
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
argument_list|,
name|tableNamePB
operator|.
name|getQualifier
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|TableName
name|toProtoTableName
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|HBaseProtos
operator|.
name|TableName
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNamespace
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|tableName
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|tableName
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer CellVisibility to a client CellVisibility    *    * @param proto    * @return the converted client CellVisibility    */
specifier|public
specifier|static
name|CellVisibility
name|toCellVisibility
parameter_list|(
name|ClientProtos
operator|.
name|CellVisibility
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|CellVisibility
argument_list|(
name|proto
operator|.
name|getExpression
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer CellVisibility bytes to a client CellVisibility    *    * @param protoBytes    * @return the converted client CellVisibility    * @throws DeserializationException    */
specifier|public
specifier|static
name|CellVisibility
name|toCellVisibility
parameter_list|(
name|byte
index|[]
name|protoBytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|protoBytes
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ClientProtos
operator|.
name|CellVisibility
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|CellVisibility
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|CellVisibility
name|proto
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proto
operator|=
name|builder
operator|.
name|mergeFrom
argument_list|(
name|protoBytes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|toCellVisibility
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer CellVisibility based on a client CellVisibility.    *    * @param cellVisibility    * @return a protocol buffer CellVisibility    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|CellVisibility
name|toCellVisibility
parameter_list|(
name|CellVisibility
name|cellVisibility
parameter_list|)
block|{
name|ClientProtos
operator|.
name|CellVisibility
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|CellVisibility
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setExpression
argument_list|(
name|cellVisibility
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer Authorizations to a client Authorizations    *    * @param proto    * @return the converted client Authorizations    */
specifier|public
specifier|static
name|Authorizations
name|toAuthorizations
parameter_list|(
name|ClientProtos
operator|.
name|Authorizations
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|Authorizations
argument_list|(
name|proto
operator|.
name|getLabelList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Authorizations bytes to a client Authorizations    *    * @param protoBytes    * @return the converted client Authorizations    * @throws DeserializationException    */
specifier|public
specifier|static
name|Authorizations
name|toAuthorizations
parameter_list|(
name|byte
index|[]
name|protoBytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|protoBytes
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ClientProtos
operator|.
name|Authorizations
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Authorizations
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|Authorizations
name|proto
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proto
operator|=
name|builder
operator|.
name|mergeFrom
argument_list|(
name|protoBytes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|toAuthorizations
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer Authorizations based on a client Authorizations.    *    * @param authorizations    * @return a protocol buffer Authorizations    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Authorizations
name|toAuthorizations
parameter_list|(
name|Authorizations
name|authorizations
parameter_list|)
block|{
name|ClientProtos
operator|.
name|Authorizations
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Authorizations
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|label
range|:
name|authorizations
operator|.
name|getLabels
argument_list|()
control|)
block|{
name|builder
operator|.
name|addLabel
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|toUsersAndPermissions
parameter_list|(
name|String
name|user
parameter_list|,
name|Permission
name|perms
parameter_list|)
block|{
return|return
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|newBuilder
argument_list|()
operator|.
name|addUserPermissions
argument_list|(
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUser
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|user
argument_list|)
argument_list|)
operator|.
name|addPermissions
argument_list|(
name|toPermission
argument_list|(
name|perms
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|toUsersAndPermissions
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|perms
parameter_list|)
block|{
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Permission
argument_list|>
argument_list|>
name|entry
range|:
name|perms
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
operator|.
name|Builder
name|userPermBuilder
init|=
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|userPermBuilder
operator|.
name|setUser
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Permission
name|perm
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|userPermBuilder
operator|.
name|addPermissions
argument_list|(
name|toPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addUserPermissions
argument_list|(
name|userPermBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|toUsersAndPermissions
parameter_list|(
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|proto
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|result
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
name|userPerms
range|:
name|proto
operator|.
name|getUserPermissionsList
argument_list|()
control|)
block|{
name|String
name|user
init|=
name|userPerms
operator|.
name|getUser
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|Permission
name|perm
range|:
name|userPerms
operator|.
name|getPermissionsList
argument_list|()
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|toPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Convert a protocol buffer TimeUnit to a client TimeUnit    *    * @param proto    * @return the converted client TimeUnit    */
specifier|public
specifier|static
name|TimeUnit
name|toTimeUnit
parameter_list|(
specifier|final
name|HBaseProtos
operator|.
name|TimeUnit
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|NANOSECONDS
case|:
return|return
name|TimeUnit
operator|.
name|NANOSECONDS
return|;
case|case
name|MICROSECONDS
case|:
return|return
name|TimeUnit
operator|.
name|MICROSECONDS
return|;
case|case
name|MILLISECONDS
case|:
return|return
name|TimeUnit
operator|.
name|MILLISECONDS
return|;
case|case
name|SECONDS
case|:
return|return
name|TimeUnit
operator|.
name|SECONDS
return|;
case|case
name|MINUTES
case|:
return|return
name|TimeUnit
operator|.
name|MINUTES
return|;
case|case
name|HOURS
case|:
return|return
name|TimeUnit
operator|.
name|HOURS
return|;
case|case
name|DAYS
case|:
return|return
name|TimeUnit
operator|.
name|DAYS
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid TimeUnit "
operator|+
name|proto
argument_list|)
throw|;
block|}
comment|/**    * Convert a client TimeUnit to a protocol buffer TimeUnit    *    * @param timeUnit    * @return the converted protocol buffer TimeUnit    */
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|TimeUnit
name|toProtoTimeUnit
parameter_list|(
specifier|final
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
switch|switch
condition|(
name|timeUnit
condition|)
block|{
case|case
name|NANOSECONDS
case|:
return|return
name|HBaseProtos
operator|.
name|TimeUnit
operator|.
name|NANOSECONDS
return|;
case|case
name|MICROSECONDS
case|:
return|return
name|HBaseProtos
operator|.
name|TimeUnit
operator|.
name|MICROSECONDS
return|;
case|case
name|MILLISECONDS
case|:
return|return
name|HBaseProtos
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
return|;
case|case
name|SECONDS
case|:
return|return
name|HBaseProtos
operator|.
name|TimeUnit
operator|.
name|SECONDS
return|;
case|case
name|MINUTES
case|:
return|return
name|HBaseProtos
operator|.
name|TimeUnit
operator|.
name|MINUTES
return|;
case|case
name|HOURS
case|:
return|return
name|HBaseProtos
operator|.
name|TimeUnit
operator|.
name|HOURS
return|;
case|case
name|DAYS
case|:
return|return
name|HBaseProtos
operator|.
name|TimeUnit
operator|.
name|DAYS
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid TimeUnit "
operator|+
name|timeUnit
argument_list|)
throw|;
block|}
comment|/**    * Convert a protocol buffer ThrottleType to a client ThrottleType    *    * @param proto    * @return the converted client ThrottleType    */
specifier|public
specifier|static
name|ThrottleType
name|toThrottleType
parameter_list|(
specifier|final
name|QuotaProtos
operator|.
name|ThrottleType
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|REQUEST_NUMBER
case|:
return|return
name|ThrottleType
operator|.
name|REQUEST_NUMBER
return|;
case|case
name|REQUEST_SIZE
case|:
return|return
name|ThrottleType
operator|.
name|REQUEST_SIZE
return|;
case|case
name|WRITE_NUMBER
case|:
return|return
name|ThrottleType
operator|.
name|WRITE_NUMBER
return|;
case|case
name|WRITE_SIZE
case|:
return|return
name|ThrottleType
operator|.
name|WRITE_SIZE
return|;
case|case
name|READ_NUMBER
case|:
return|return
name|ThrottleType
operator|.
name|READ_NUMBER
return|;
case|case
name|READ_SIZE
case|:
return|return
name|ThrottleType
operator|.
name|READ_SIZE
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid ThrottleType "
operator|+
name|proto
argument_list|)
throw|;
block|}
comment|/**    * Convert a client ThrottleType to a protocol buffer ThrottleType    *    * @param type    * @return the converted protocol buffer ThrottleType    */
specifier|public
specifier|static
name|QuotaProtos
operator|.
name|ThrottleType
name|toProtoThrottleType
parameter_list|(
specifier|final
name|ThrottleType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|REQUEST_NUMBER
case|:
return|return
name|QuotaProtos
operator|.
name|ThrottleType
operator|.
name|REQUEST_NUMBER
return|;
case|case
name|REQUEST_SIZE
case|:
return|return
name|QuotaProtos
operator|.
name|ThrottleType
operator|.
name|REQUEST_SIZE
return|;
case|case
name|WRITE_NUMBER
case|:
return|return
name|QuotaProtos
operator|.
name|ThrottleType
operator|.
name|WRITE_NUMBER
return|;
case|case
name|WRITE_SIZE
case|:
return|return
name|QuotaProtos
operator|.
name|ThrottleType
operator|.
name|WRITE_SIZE
return|;
case|case
name|READ_NUMBER
case|:
return|return
name|QuotaProtos
operator|.
name|ThrottleType
operator|.
name|READ_NUMBER
return|;
case|case
name|READ_SIZE
case|:
return|return
name|QuotaProtos
operator|.
name|ThrottleType
operator|.
name|READ_SIZE
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid ThrottleType "
operator|+
name|type
argument_list|)
throw|;
block|}
comment|/**    * Convert a protocol buffer QuotaScope to a client QuotaScope    *    * @param proto    * @return the converted client QuotaScope    */
specifier|public
specifier|static
name|QuotaScope
name|toQuotaScope
parameter_list|(
specifier|final
name|QuotaProtos
operator|.
name|QuotaScope
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|CLUSTER
case|:
return|return
name|QuotaScope
operator|.
name|CLUSTER
return|;
case|case
name|MACHINE
case|:
return|return
name|QuotaScope
operator|.
name|MACHINE
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid QuotaScope "
operator|+
name|proto
argument_list|)
throw|;
block|}
comment|/**    * Convert a client QuotaScope to a protocol buffer QuotaScope    *    * @param scope    * @return the converted protocol buffer QuotaScope    */
specifier|public
specifier|static
name|QuotaProtos
operator|.
name|QuotaScope
name|toProtoQuotaScope
parameter_list|(
specifier|final
name|QuotaScope
name|scope
parameter_list|)
block|{
switch|switch
condition|(
name|scope
condition|)
block|{
case|case
name|CLUSTER
case|:
return|return
name|QuotaProtos
operator|.
name|QuotaScope
operator|.
name|CLUSTER
return|;
case|case
name|MACHINE
case|:
return|return
name|QuotaProtos
operator|.
name|QuotaScope
operator|.
name|MACHINE
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid QuotaScope "
operator|+
name|scope
argument_list|)
throw|;
block|}
comment|/**    * Convert a protocol buffer QuotaType to a client QuotaType    *    * @param proto    * @return the converted client QuotaType    */
specifier|public
specifier|static
name|QuotaType
name|toQuotaScope
parameter_list|(
specifier|final
name|QuotaProtos
operator|.
name|QuotaType
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|THROTTLE
case|:
return|return
name|QuotaType
operator|.
name|THROTTLE
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid QuotaType "
operator|+
name|proto
argument_list|)
throw|;
block|}
comment|/**    * Convert a client QuotaType to a protocol buffer QuotaType    *    * @param type    * @return the converted protocol buffer QuotaType    */
specifier|public
specifier|static
name|QuotaProtos
operator|.
name|QuotaType
name|toProtoQuotaScope
parameter_list|(
specifier|final
name|QuotaType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|THROTTLE
case|:
return|return
name|QuotaProtos
operator|.
name|QuotaType
operator|.
name|THROTTLE
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid QuotaType "
operator|+
name|type
argument_list|)
throw|;
block|}
comment|/**    * Build a protocol buffer TimedQuota    *    * @param limit the allowed number of request/data per timeUnit    * @param timeUnit the limit time unit    * @param scope the quota scope    * @return the protocol buffer TimedQuota    */
specifier|public
specifier|static
name|QuotaProtos
operator|.
name|TimedQuota
name|toTimedQuota
parameter_list|(
specifier|final
name|long
name|limit
parameter_list|,
specifier|final
name|TimeUnit
name|timeUnit
parameter_list|,
specifier|final
name|QuotaScope
name|scope
parameter_list|)
block|{
return|return
name|QuotaProtos
operator|.
name|TimedQuota
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSoftLimit
argument_list|(
name|limit
argument_list|)
operator|.
name|setTimeUnit
argument_list|(
name|toProtoTimeUnit
argument_list|(
name|timeUnit
argument_list|)
argument_list|)
operator|.
name|setScope
argument_list|(
name|toProtoQuotaScope
argument_list|(
name|scope
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Generates a marker for the WAL so that we propagate the notion of a bulk region load    * throughout the WAL.    *    * @param tableName         The tableName into which the bulk load is being imported into.    * @param encodedRegionName Encoded region name of the region which is being bulk loaded.    * @param storeFiles        A set of store files of a column family are bulk loaded.    * @param bulkloadSeqId     sequence ID (by a force flush) used to create bulk load hfile    *                          name    * @return The WAL log marker for bulk loads.    */
specifier|public
specifier|static
name|WALProtos
operator|.
name|BulkLoadDescriptor
name|toBulkLoadDescriptor
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ByteString
name|encodedRegionName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|storeFiles
parameter_list|,
name|long
name|bulkloadSeqId
parameter_list|)
block|{
name|WALProtos
operator|.
name|BulkLoadDescriptor
operator|.
name|Builder
name|desc
init|=
name|WALProtos
operator|.
name|BulkLoadDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|setEncodedRegionName
argument_list|(
name|encodedRegionName
argument_list|)
operator|.
name|setBulkloadSeqNum
argument_list|(
name|bulkloadSeqId
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|entry
range|:
name|storeFiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|WALProtos
operator|.
name|StoreDescriptor
operator|.
name|Builder
name|builder
init|=
name|WALProtos
operator|.
name|StoreDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setFamilyName
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStoreHomeDir
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// relative to region
for|for
control|(
name|Path
name|path
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|builder
operator|.
name|addStoreFile
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|desc
operator|.
name|addStores
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Print out some subset of a MutationProto rather than all of it and its data    * @param proto Protobuf to print out    * @return Short String of mutation proto    */
specifier|static
name|String
name|toShortString
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|MutationProto
name|proto
parameter_list|)
block|{
return|return
literal|"row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
operator|+
literal|", type="
operator|+
name|proto
operator|.
name|getMutateType
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

