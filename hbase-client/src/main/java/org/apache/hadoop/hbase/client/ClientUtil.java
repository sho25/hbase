begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ClientUtil
block|{
specifier|public
specifier|static
name|boolean
name|areScanStartRowAndStopRowEqual
parameter_list|(
name|byte
index|[]
name|startRow
parameter_list|,
name|byte
index|[]
name|stopRow
parameter_list|)
block|{
return|return
name|startRow
operator|!=
literal|null
operator|&&
name|startRow
operator|.
name|length
operator|>
literal|0
operator|&&
name|Bytes
operator|.
name|equals
argument_list|(
name|startRow
argument_list|,
name|stopRow
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Cursor
name|createCursor
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
operator|new
name|Cursor
argument_list|(
name|row
argument_list|)
return|;
block|}
comment|/**    *<p>When scanning for a prefix the scan should stop immediately after the the last row that    * has the specified prefix. This method calculates the closest next rowKey immediately following    * the given rowKeyPrefix.</p>    *<p><b>IMPORTANT: This converts a rowKey<u>Prefix</u> into a rowKey</b>.</p>    *<p>If the prefix is an 'ASCII' string put into a byte[] then this is easy because you can    * simply increment the last byte of the array.    * But if your application uses real binary rowids you may run into the scenario that your    * prefix is something like:</p>    *&nbsp;&nbsp;&nbsp;<b>{ 0x12, 0x23, 0xFF, 0xFF }</b><br/>    * Then this stopRow needs to be fed into the actual scan<br/>    *&nbsp;&nbsp;&nbsp;<b>{ 0x12, 0x24 }</b> (Notice that it is shorter now)<br/>    * This method calculates the correct stop row value for this usecase.    *    * @param rowKeyPrefix the rowKey<u>Prefix</u>.    * @return the closest next rowKey immediately following the given rowKeyPrefix.    */
specifier|public
specifier|static
name|byte
index|[]
name|calculateTheClosestNextRowKeyForPrefix
parameter_list|(
name|byte
index|[]
name|rowKeyPrefix
parameter_list|)
block|{
comment|// Essentially we are treating it like an 'unsigned very very long' and doing +1 manually.
comment|// Search for the place where the trailing 0xFFs start
name|int
name|offset
init|=
name|rowKeyPrefix
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|offset
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|rowKeyPrefix
index|[
name|offset
operator|-
literal|1
index|]
operator|!=
operator|(
name|byte
operator|)
literal|0xFF
condition|)
block|{
break|break;
block|}
name|offset
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|==
literal|0
condition|)
block|{
comment|// We got an 0xFFFF... (only FFs) stopRow value which is
comment|// the last possible prefix before the end of the table.
comment|// So set it to stop at the 'end of the table'
return|return
name|HConstants
operator|.
name|EMPTY_END_ROW
return|;
block|}
comment|// Copy the right length of the original
name|byte
index|[]
name|newStopRow
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|rowKeyPrefix
argument_list|,
literal|0
argument_list|,
name|offset
argument_list|)
decl_stmt|;
comment|// And increment the last one
name|newStopRow
index|[
name|newStopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|++
expr_stmt|;
return|return
name|newStopRow
return|;
block|}
block|}
end_class

end_unit

