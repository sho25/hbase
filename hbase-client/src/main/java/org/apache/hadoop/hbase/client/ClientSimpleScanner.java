begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|createClosestRowAfter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|isEmptyStartRow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|noMoreResultsForScan
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_comment
comment|/**  * ClientSimpleScanner implements a sync scanner behaviour.  * The cache is a simple list.  * The prefetch is invoked only when the application finished processing the entire cache.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ClientSimpleScanner
extends|extends
name|ClientScanner
block|{
specifier|public
name|ClientSimpleScanner
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|TableName
name|name
parameter_list|,
name|ClusterConnection
name|connection
parameter_list|,
name|RpcRetryingCallerFactory
name|rpcCallerFactory
parameter_list|,
name|RpcControllerFactory
name|rpcControllerFactory
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|int
name|replicaCallTimeoutMicroSecondScan
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|configuration
argument_list|,
name|scan
argument_list|,
name|name
argument_list|,
name|connection
argument_list|,
name|rpcCallerFactory
argument_list|,
name|rpcControllerFactory
argument_list|,
name|pool
argument_list|,
name|replicaCallTimeoutMicroSecondScan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|setNewStartKey
parameter_list|()
block|{
if|if
condition|(
name|noMoreResultsForScan
argument_list|(
name|scan
argument_list|,
name|currentRegion
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|scan
operator|.
name|withStartRow
argument_list|(
name|currentRegion
operator|.
name|getEndKey
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ScannerCallable
name|createScannerCallable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|scan
operator|.
name|includeStartRow
argument_list|()
operator|&&
operator|!
name|isEmptyStartRow
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|)
condition|)
block|{
comment|// we have not implemented locate to next row for sync client yet, so here we change the
comment|// inclusive of start row to true.
name|scan
operator|.
name|withStartRow
argument_list|(
name|createClosestRowAfter
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ScannerCallable
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getTable
argument_list|()
argument_list|,
name|scan
argument_list|,
name|this
operator|.
name|scanMetrics
argument_list|,
name|this
operator|.
name|rpcControllerFactory
argument_list|)
return|;
block|}
block|}
end_class

end_unit

