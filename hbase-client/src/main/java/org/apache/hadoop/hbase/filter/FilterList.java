begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|FilterProtos
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link Filter} that represents an ordered List of Filters which will be  * evaluated with a specified boolean operator {@link Operator#MUST_PASS_ALL} (<code>AND</code>) or  * {@link Operator#MUST_PASS_ONE} (<code>OR</code>). Since you can use Filter Lists as children of  * Filter Lists, you can create a hierarchy of filters to be evaluated.<br>  * {@link Operator#MUST_PASS_ALL} evaluates lazily: evaluation stops as soon as one filter does not  * include the KeyValue.<br>  * {@link Operator#MUST_PASS_ONE} evaluates non-lazily: all filters are always evaluated.<br>  * Defaults to {@link Operator#MUST_PASS_ALL}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|final
specifier|public
class|class
name|FilterList
extends|extends
name|FilterBase
block|{
comment|/** set operator */
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
enum|enum
name|Operator
block|{
comment|/** !AND */
name|MUST_PASS_ALL
block|,
comment|/** !OR */
name|MUST_PASS_ONE
block|}
specifier|private
name|Operator
name|operator
decl_stmt|;
specifier|private
name|FilterListBase
name|filterListBase
decl_stmt|;
comment|/**    * Constructor that takes a set of {@link Filter}s and an operator.    * @param operator Operator to process filter set with.    * @param filters Set of row filters.    */
specifier|public
name|FilterList
parameter_list|(
specifier|final
name|Operator
name|operator
parameter_list|,
specifier|final
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
parameter_list|)
block|{
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|MUST_PASS_ALL
condition|)
block|{
name|filterListBase
operator|=
operator|new
name|FilterListWithAND
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|MUST_PASS_ONE
condition|)
block|{
name|filterListBase
operator|=
operator|new
name|FilterListWithOR
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|operator
operator|=
name|operator
expr_stmt|;
block|}
comment|/**    * Constructor that takes a set of {@link Filter}s. The default operator MUST_PASS_ALL is assumed.    * All filters are cloned to internal list.    * @param filters list of filters    */
specifier|public
name|FilterList
parameter_list|(
specifier|final
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
parameter_list|)
block|{
name|this
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filters
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor that takes a var arg number of {@link Filter}s. The default operator MUST_PASS_ALL    * is assumed.    * @param filters    */
specifier|public
name|FilterList
parameter_list|(
specifier|final
name|Filter
modifier|...
name|filters
parameter_list|)
block|{
name|this
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|filters
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor that takes an operator.    * @param operator Operator to process filter set with.    */
specifier|public
name|FilterList
parameter_list|(
specifier|final
name|Operator
name|operator
parameter_list|)
block|{
name|this
argument_list|(
name|operator
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor that takes a var arg number of {@link Filter}s and an operator.    * @param operator Operator to process filter set with.    * @param filters Filters to use    */
specifier|public
name|FilterList
parameter_list|(
specifier|final
name|Operator
name|operator
parameter_list|,
specifier|final
name|Filter
modifier|...
name|filters
parameter_list|)
block|{
name|this
argument_list|(
name|operator
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|filters
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the operator.    * @return operator    */
specifier|public
name|Operator
name|getOperator
parameter_list|()
block|{
return|return
name|operator
return|;
block|}
comment|/**    * Get the filters.    * @return filters    */
specifier|public
name|List
argument_list|<
name|Filter
argument_list|>
name|getFilters
parameter_list|()
block|{
return|return
name|filterListBase
operator|.
name|getFilters
argument_list|()
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|filterListBase
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|addFilter
parameter_list|(
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
parameter_list|)
block|{
name|filterListBase
operator|.
name|addFilterLists
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a filter.    * @param filter another filter    */
specifier|public
name|void
name|addFilter
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|addFilter
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|filterListBase
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterRowKey
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|filterListBase
operator|.
name|filterRowKey
argument_list|(
name|rowKey
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterRowKey
parameter_list|(
name|Cell
name|firstRowCell
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|filterListBase
operator|.
name|filterRowKey
argument_list|(
name|firstRowCell
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterAllRemaining
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|filterListBase
operator|.
name|filterAllRemaining
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|transformCell
parameter_list|(
name|Cell
name|c
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|filterListBase
operator|.
name|transformCell
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterKeyValue
parameter_list|(
name|Cell
name|c
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|filterListBase
operator|.
name|filterKeyValue
argument_list|(
name|c
argument_list|)
return|;
block|}
comment|/**    * Filters that never filter by modifying the returned List of Cells can inherit this    * implementation that does nothing. {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|filterRowCells
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
parameter_list|)
throws|throws
name|IOException
block|{
name|filterListBase
operator|.
name|filterRowCells
argument_list|(
name|cells
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasFilterRow
parameter_list|()
block|{
return|return
name|filterListBase
operator|.
name|hasFilterRow
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterRow
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|filterListBase
operator|.
name|filterRow
argument_list|()
return|;
block|}
comment|/**    * @return The filter serialized using pb    */
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
throws|throws
name|IOException
block|{
name|FilterProtos
operator|.
name|FilterList
operator|.
name|Builder
name|builder
init|=
name|FilterProtos
operator|.
name|FilterList
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setOperator
argument_list|(
name|FilterProtos
operator|.
name|FilterList
operator|.
name|Operator
operator|.
name|valueOf
argument_list|(
name|operator
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
name|filterListBase
operator|.
name|getFilters
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|filters
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|addFilters
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|filters
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**    * @param pbBytes A pb serialized {@link FilterList} instance    * @return An instance of {@link FilterList} made from<code>bytes</code>    * @throws DeserializationException    * @see #toByteArray    */
specifier|public
specifier|static
name|FilterList
name|parseFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|pbBytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
name|FilterProtos
operator|.
name|FilterList
name|proto
decl_stmt|;
try|try
block|{
name|proto
operator|=
name|FilterProtos
operator|.
name|FilterList
operator|.
name|parseFrom
argument_list|(
name|pbBytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Filter
argument_list|>
name|rowFilters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|proto
operator|.
name|getFiltersCount
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|FilterProtos
operator|.
name|Filter
argument_list|>
name|filtersList
init|=
name|proto
operator|.
name|getFiltersList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|filtersList
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|rowFilters
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|filtersList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|valueOf
argument_list|(
name|proto
operator|.
name|getOperator
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|rowFilters
argument_list|)
return|;
block|}
comment|/**    * @param other    * @return true if and only if the fields of the filter that are serialized are equal to the    *         corresponding fields in other. Used for testing.    */
name|boolean
name|areSerializedFieldsEqual
parameter_list|(
name|Filter
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|this
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|FilterList
operator|)
condition|)
return|return
literal|false
return|;
name|FilterList
name|o
init|=
operator|(
name|FilterList
operator|)
name|other
decl_stmt|;
return|return
name|this
operator|.
name|getOperator
argument_list|()
operator|.
name|equals
argument_list|(
name|o
operator|.
name|getOperator
argument_list|()
argument_list|)
operator|&&
operator|(
operator|(
name|this
operator|.
name|getFilters
argument_list|()
operator|==
name|o
operator|.
name|getFilters
argument_list|()
operator|)
operator|||
name|this
operator|.
name|getFilters
argument_list|()
operator|.
name|equals
argument_list|(
name|o
operator|.
name|getFilters
argument_list|()
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|getNextCellHint
parameter_list|(
name|Cell
name|currentCell
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|filterListBase
operator|.
name|getNextCellHint
argument_list|(
name|currentCell
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFamilyEssential
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|filterListBase
operator|.
name|isFamilyEssential
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setReversed
parameter_list|(
name|boolean
name|reversed
parameter_list|)
block|{
name|this
operator|.
name|reversed
operator|=
name|reversed
expr_stmt|;
name|this
operator|.
name|filterListBase
operator|.
name|setReversed
argument_list|(
name|reversed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReversed
parameter_list|()
block|{
assert|assert
name|this
operator|.
name|reversed
operator|==
name|this
operator|.
name|filterListBase
operator|.
name|isReversed
argument_list|()
assert|;
return|return
name|this
operator|.
name|reversed
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|filterListBase
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

