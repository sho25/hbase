begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|provider
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Objects
operator|.
name|requireNonNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|NotThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link AuthenticationProviderSelector} which can choose from the  * authentication implementations which HBase provides out of the box: Simple, Kerberos, and  * Delegation Token authentication.  *  * This implementation will ignore any {@link SaslAuthenticationProvider}'s which are available  * on the classpath or specified in the configuration because HBase cannot correctly choose which  * token should be returned to a client when multiple are present. It is expected that users  * implement their own {@link AuthenticationProviderSelector} when writing a custom provider.  *  * This implementation is not thread-safe. {@link #configure(Configuration, Collection)} and  * {@link #selectProvider(String, User)} is not safe if they are called concurrently.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|AUTHENTICATION
argument_list|)
annotation|@
name|NotThreadSafe
specifier|public
class|class
name|BuiltInProviderSelector
implements|implements
name|AuthenticationProviderSelector
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BuiltInProviderSelector
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
name|SimpleSaslClientAuthenticationProvider
name|simpleAuth
init|=
literal|null
decl_stmt|;
name|GssSaslClientAuthenticationProvider
name|krbAuth
init|=
literal|null
decl_stmt|;
name|DigestSaslClientAuthenticationProvider
name|digestAuth
init|=
literal|null
decl_stmt|;
name|Text
name|digestAuthTokenKind
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Collection
argument_list|<
name|SaslClientAuthenticationProvider
argument_list|>
name|providers
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|conf
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"configure() should only be called once"
argument_list|)
throw|;
block|}
name|this
operator|.
name|conf
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|SaslClientAuthenticationProvider
name|provider
range|:
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|providers
argument_list|)
control|)
block|{
specifier|final
name|String
name|name
init|=
name|provider
operator|.
name|getSaslAuthMethod
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|SimpleSaslAuthenticationProvider
operator|.
name|SASL_AUTH_METHOD
operator|.
name|getName
argument_list|()
operator|.
name|contentEquals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|simpleAuth
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Encountered multiple SimpleSaslClientAuthenticationProvider instances"
argument_list|)
throw|;
block|}
name|simpleAuth
operator|=
operator|(
name|SimpleSaslClientAuthenticationProvider
operator|)
name|provider
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|GssSaslAuthenticationProvider
operator|.
name|SASL_AUTH_METHOD
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|krbAuth
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Encountered multiple GssSaslClientAuthenticationProvider instances"
argument_list|)
throw|;
block|}
name|krbAuth
operator|=
operator|(
name|GssSaslClientAuthenticationProvider
operator|)
name|provider
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DigestSaslAuthenticationProvider
operator|.
name|SASL_AUTH_METHOD
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|digestAuth
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Encountered multiple DigestSaslClientAuthenticationProvider instances"
argument_list|)
throw|;
block|}
name|digestAuth
operator|=
operator|(
name|DigestSaslClientAuthenticationProvider
operator|)
name|provider
expr_stmt|;
name|digestAuthTokenKind
operator|=
operator|new
name|Text
argument_list|(
name|digestAuth
operator|.
name|getTokenKind
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring unknown SaslClientAuthenticationProvider: {}"
argument_list|,
name|provider
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|simpleAuth
operator|==
literal|null
operator|||
name|krbAuth
operator|==
literal|null
operator|||
name|digestAuth
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to load SIMPLE, KERBEROS, and DIGEST authentication "
operator|+
literal|"providers. Classpath is not sane."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|SaslClientAuthenticationProvider
argument_list|,
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|selectProvider
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|requireNonNull
argument_list|(
name|clusterId
argument_list|,
literal|"Null clusterId was given"
argument_list|)
expr_stmt|;
name|requireNonNull
argument_list|(
name|user
argument_list|,
literal|"Null user was given"
argument_list|)
expr_stmt|;
comment|// Superfluous: we don't do SIMPLE auth over SASL, but we should to simplify.
if|if
condition|(
operator|!
name|User
operator|.
name|isHBaseSecurityEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|simpleAuth
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|final
name|Text
name|clusterIdAsText
init|=
operator|new
name|Text
argument_list|(
name|clusterId
argument_list|)
decl_stmt|;
comment|// Must be digest auth, look for a token.
comment|// TestGenerateDelegationToken is written expecting DT is used when DT and Krb are both present.
comment|// (for whatever that's worth).
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
range|:
name|user
operator|.
name|getTokens
argument_list|()
control|)
block|{
comment|// We need to check for two things:
comment|//   1. This token is for the HBase cluster we want to talk to
comment|//   2. We have suppporting client implementation to handle the token (the "kind" of token)
if|if
condition|(
name|clusterIdAsText
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|)
operator|&&
name|digestAuthTokenKind
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|digestAuth
argument_list|,
name|token
argument_list|)
return|;
block|}
block|}
comment|// Unwrap PROXY auth'n method if that's what we have coming in.
specifier|final
name|UserGroupInformation
name|currentUser
init|=
name|user
operator|.
name|getUGI
argument_list|()
decl_stmt|;
comment|// May be null if Hadoop AuthenticationMethod is PROXY
specifier|final
name|UserGroupInformation
name|realUser
init|=
name|currentUser
operator|.
name|getRealUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentUser
operator|.
name|hasKerberosCredentials
argument_list|()
operator|||
operator|(
name|realUser
operator|!=
literal|null
operator|&&
name|realUser
operator|.
name|hasKerberosCredentials
argument_list|()
operator|)
condition|)
block|{
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|krbAuth
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|// This indicates that a client is requesting some authentication mechanism which the servers
comment|// don't know how to process (e.g. there is no provider which can support it). This may be
comment|// a bug or simply a misconfiguration of client *or* server.
name|LOG
operator|.
name|warn
argument_list|(
literal|"No matching SASL authentication provider and supporting token found from providers"
operator|+
literal|" for user: {}"
argument_list|,
name|user
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

