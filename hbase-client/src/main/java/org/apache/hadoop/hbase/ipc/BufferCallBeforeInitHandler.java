begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelDuplexHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPromise
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * We will expose the connection to upper layer before initialized, so we need to buffer the calls  * passed in and write them out once the connection is established.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|BufferCallBeforeInitHandler
extends|extends
name|ChannelDuplexHandler
block|{
specifier|private
enum|enum
name|BufferCallAction
block|{
name|FLUSH
block|,
name|FAIL
block|}
specifier|public
specifier|static
specifier|final
class|class
name|BufferCallEvent
block|{
specifier|public
specifier|final
name|BufferCallAction
name|action
decl_stmt|;
specifier|public
specifier|final
name|IOException
name|error
decl_stmt|;
specifier|private
name|BufferCallEvent
parameter_list|(
name|BufferCallBeforeInitHandler
operator|.
name|BufferCallAction
name|action
parameter_list|,
name|IOException
name|error
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
block|}
specifier|public
specifier|static
name|BufferCallBeforeInitHandler
operator|.
name|BufferCallEvent
name|success
parameter_list|()
block|{
return|return
name|SUCCESS_EVENT
return|;
block|}
specifier|public
specifier|static
name|BufferCallBeforeInitHandler
operator|.
name|BufferCallEvent
name|fail
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
return|return
operator|new
name|BufferCallEvent
argument_list|(
name|BufferCallAction
operator|.
name|FAIL
argument_list|,
name|error
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|BufferCallEvent
name|SUCCESS_EVENT
init|=
operator|new
name|BufferCallEvent
argument_list|(
name|BufferCallAction
operator|.
name|FLUSH
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Call
argument_list|>
name|id2Call
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|msg
parameter_list|,
name|ChannelPromise
name|promise
parameter_list|)
block|{
if|if
condition|(
name|msg
operator|instanceof
name|Call
condition|)
block|{
name|Call
name|call
init|=
operator|(
name|Call
operator|)
name|msg
decl_stmt|;
name|id2Call
operator|.
name|put
argument_list|(
name|call
operator|.
name|id
argument_list|,
name|call
argument_list|)
expr_stmt|;
comment|// The call is already in track so here we set the write operation as success.
comment|// We will fail the call directly if we can not write it out.
name|promise
operator|.
name|trySuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ctx
operator|.
name|write
argument_list|(
name|msg
argument_list|,
name|promise
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|userEventTriggered
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|evt
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|evt
operator|instanceof
name|BufferCallEvent
condition|)
block|{
name|BufferCallEvent
name|bcEvt
init|=
operator|(
name|BufferCallBeforeInitHandler
operator|.
name|BufferCallEvent
operator|)
name|evt
decl_stmt|;
switch|switch
condition|(
name|bcEvt
operator|.
name|action
condition|)
block|{
case|case
name|FLUSH
case|:
for|for
control|(
name|Call
name|call
range|:
name|id2Call
operator|.
name|values
argument_list|()
control|)
block|{
name|ctx
operator|.
name|write
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FAIL
case|:
for|for
control|(
name|Call
name|call
range|:
name|id2Call
operator|.
name|values
argument_list|()
control|)
block|{
name|call
operator|.
name|setException
argument_list|(
name|bcEvt
operator|.
name|error
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|ctx
operator|.
name|flush
argument_list|()
expr_stmt|;
name|ctx
operator|.
name|pipeline
argument_list|()
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|evt
operator|instanceof
name|CallEvent
condition|)
block|{
comment|// just remove the call for now until we add other call event other than timeout and cancel.
name|id2Call
operator|.
name|remove
argument_list|(
operator|(
operator|(
name|CallEvent
operator|)
name|evt
operator|)
operator|.
name|call
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ctx
operator|.
name|fireUserEventTriggered
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

