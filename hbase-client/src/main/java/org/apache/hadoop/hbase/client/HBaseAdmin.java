begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompoundConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ProcedureInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotDisabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|ReplicationSerDeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|TableCFs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|security
operator|.
name|SecurityCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|TimeoutIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|LockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaRetriever
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|FailedLogCloseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ClearCompactionQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CompactRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|FlushRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|RollWALWriterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|RollWALWriterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|StopServerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|UpdateConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|ProcedureDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|TableSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|LockServiceProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AbortProcedureRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AbortProcedureResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AddColumnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AddColumnResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|AssignRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateNamespaceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateNamespaceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteColumnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteColumnResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteNamespaceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteNamespaceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteSnapshotRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DeleteTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DisableTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DisableTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|DrainRegionServersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|EnableTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|EnableTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ExecProcedureRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ExecProcedureResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetClusterStatusRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetCompletedSnapshotsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetNamespaceDescriptorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetProcedureResultRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetProcedureResultResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetSchemaAlterStatusRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetSchemaAlterStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableDescriptorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableDescriptorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableNamesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsInMaintenanceModeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsInMaintenanceModeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsProcedureDoneRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsProcedureDoneResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsSnapshotDoneRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsSnapshotDoneResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListDrainingRegionServersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListLocksRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListLocksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListNamespaceDescriptorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListProceduresRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListTableDescriptorsByNamespaceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ListTableNamesByNamespaceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MajorCompactionTimestampForRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MajorCompactionTimestampRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MergeTableRegionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MergeTableRegionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyColumnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyColumnResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyNamespaceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyNamespaceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ModifyTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MoveRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RemoveDrainFromRegionServersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RestoreSnapshotRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|RestoreSnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SecurityCapabilitiesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetBalancerRunningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SetNormalizerRunningRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|ShutdownRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SnapshotRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|SnapshotResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|StopMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|TruncateTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|TruncateTableResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|UnassignRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ProcedureProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ReplicationProtos
operator|.
name|GetReplicationPeerConfigResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|ClientSnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|HBaseSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|RestoreSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|UnknownSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Addressing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ForeignExceptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MasterAddressTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MetaTableLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * HBaseAdmin is no longer a client API. It is marked InterfaceAudience.Private indicating that  * this is an HBase-internal class as defined in  * https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/InterfaceClassification.html  * There are no guarantees for backwards source / binary compatibility and methods or class can  * change or go away without deprecation.  * Use {@link Connection#getAdmin()} to obtain an instance of {@link Admin} instead of constructing  * an HBaseAdmin directly.  *  *<p>Connection should be an<i>unmanaged</i> connection obtained via  * {@link ConnectionFactory#createConnection(Configuration)}  *  * @see ConnectionFactory  * @see Connection  * @see Admin  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|HBaseAdmin
implements|implements
name|Admin
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HBaseAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ZK_IDENTIFIER_PREFIX
init|=
literal|"hbase-admin-on-"
decl_stmt|;
specifier|private
name|ClusterConnection
name|connection
decl_stmt|;
specifier|private
specifier|volatile
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|long
name|pause
decl_stmt|;
specifier|private
specifier|final
name|int
name|numRetries
decl_stmt|;
specifier|private
specifier|final
name|int
name|syncWaitTimeout
decl_stmt|;
specifier|private
name|boolean
name|aborted
decl_stmt|;
specifier|private
name|int
name|operationTimeout
decl_stmt|;
specifier|private
name|int
name|rpcTimeout
decl_stmt|;
specifier|private
name|RpcRetryingCallerFactory
name|rpcCallerFactory
decl_stmt|;
specifier|private
name|RpcControllerFactory
name|rpcControllerFactory
decl_stmt|;
specifier|private
name|NonceGenerator
name|ng
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|getOperationTimeout
parameter_list|()
block|{
return|return
name|operationTimeout
return|;
block|}
name|HBaseAdmin
parameter_list|(
name|ClusterConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|connection
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
comment|// TODO: receive ConnectionConfiguration here rather than re-parsing these configs every time.
name|this
operator|.
name|pause
operator|=
name|this
operator|.
name|conf
operator|.
name|getLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_PAUSE
argument_list|)
expr_stmt|;
name|this
operator|.
name|numRetries
operator|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_RETRIES_NUMBER
argument_list|)
expr_stmt|;
name|this
operator|.
name|operationTimeout
operator|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_OPERATION_TIMEOUT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_OPERATION_TIMEOUT
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcTimeout
operator|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_RPC_TIMEOUT
argument_list|)
expr_stmt|;
name|this
operator|.
name|syncWaitTimeout
operator|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.client.sync.wait.timeout.msec"
argument_list|,
literal|10
operator|*
literal|60000
argument_list|)
expr_stmt|;
comment|// 10min
name|this
operator|.
name|rpcCallerFactory
operator|=
name|connection
operator|.
name|getRpcRetryingCallerFactory
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcControllerFactory
operator|=
name|connection
operator|.
name|getRpcControllerFactory
argument_list|()
expr_stmt|;
name|this
operator|.
name|ng
operator|=
name|this
operator|.
name|connection
operator|.
name|getNonceGenerator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
comment|// Currently does nothing but throw the passed message and exception
name|this
operator|.
name|aborted
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|why
argument_list|,
name|e
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|this
operator|.
name|aborted
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|abortProcedure
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|,
specifier|final
name|boolean
name|mayInterruptIfRunning
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|get
argument_list|(
name|abortProcedureAsync
argument_list|(
name|procId
argument_list|,
name|mayInterruptIfRunning
argument_list|)
argument_list|,
name|this
operator|.
name|syncWaitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Boolean
argument_list|>
name|abortProcedureAsync
parameter_list|(
specifier|final
name|long
name|procId
parameter_list|,
specifier|final
name|boolean
name|mayInterruptIfRunning
parameter_list|)
throws|throws
name|IOException
block|{
name|Boolean
name|abortProcResponse
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|AbortProcedureResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|AbortProcedureResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|AbortProcedureRequest
name|abortProcRequest
init|=
name|AbortProcedureRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|master
operator|.
name|abortProcedure
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|abortProcRequest
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|getIsProcedureAborted
argument_list|()
decl_stmt|;
return|return
operator|new
name|AbortProcedureFuture
argument_list|(
name|this
argument_list|,
name|procId
argument_list|,
name|abortProcResponse
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|listTableDescriptors
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|listTableDescriptors
argument_list|(
operator|(
name|Pattern
operator|)
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|listTableDescriptors
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listTableDescriptors
argument_list|(
name|pattern
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|listTableDescriptors
parameter_list|(
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listTableDescriptors
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|listTableDescriptors
parameter_list|(
name|Pattern
name|pattern
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|List
argument_list|<
name|TableDescriptor
argument_list|>
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|GetTableDescriptorsRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildGetTableDescriptorsRequest
argument_list|(
name|pattern
argument_list|,
name|includeSysTables
argument_list|)
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|toTableDescriptorList
argument_list|(
name|master
operator|.
name|getTableDescriptors
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|listTableDescriptors
parameter_list|(
name|String
name|regex
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listTableDescriptors
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|,
name|includeSysTables
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableDescriptor
name|listTableDescriptor
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|TableNotFoundException
throws|,
name|IOException
block|{
return|return
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|getConnection
argument_list|()
argument_list|,
name|rpcCallerFactory
argument_list|,
name|rpcControllerFactory
argument_list|,
name|operationTimeout
argument_list|,
name|rpcTimeout
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifyTable
parameter_list|(
name|TableDescriptor
name|td
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|modifyTableAsync
argument_list|(
name|td
argument_list|)
argument_list|,
name|syncWaitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|modifyTableAsync
parameter_list|(
name|TableDescriptor
name|td
parameter_list|)
throws|throws
name|IOException
block|{
name|ModifyTableResponse
name|response
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|ModifyTableResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ModifyTableResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|setPriority
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|ModifyTableRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildModifyTableRequest
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|td
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|master
operator|.
name|modifyTable
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|ModifyTableFuture
argument_list|(
name|this
argument_list|,
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|response
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|listTableDescriptorsByNamespace
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|List
argument_list|<
name|TableDescriptor
argument_list|>
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|listTableDescriptorsByNamespace
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|ListTableDescriptorsByNamespaceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNamespaceName
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|getTableSchemaList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ProtobufUtil
operator|::
name|convertToTableDesc
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|listTableDescriptors
parameter_list|(
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|List
argument_list|<
name|TableDescriptor
argument_list|>
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|GetTableDescriptorsRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildGetTableDescriptorsRequest
argument_list|(
name|tableNames
argument_list|)
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|toTableDescriptorList
argument_list|(
name|master
operator|.
name|getTableDescriptors
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|AbortProcedureFuture
extends|extends
name|ProcedureFuture
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
name|boolean
name|isAbortInProgress
decl_stmt|;
specifier|public
name|AbortProcedureFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|Long
name|procId
parameter_list|,
specifier|final
name|Boolean
name|abortProcResponse
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|this
operator|.
name|isAbortInProgress
operator|=
name|abortProcResponse
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isAbortInProgress
condition|)
block|{
return|return
literal|false
return|;
block|}
name|super
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|/** @return Connection used by this object. */
annotation|@
name|Override
specifier|public
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|tableExists
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|RpcRetryingCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|rpcCall
parameter_list|(
name|int
name|callTimeout
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|MetaTableAccessor
operator|.
name|tableExists
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HTableDescriptor
index|[]
name|listTables
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|listTables
argument_list|(
operator|(
name|Pattern
operator|)
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HTableDescriptor
index|[]
name|listTables
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listTables
argument_list|(
name|pattern
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HTableDescriptor
index|[]
name|listTables
parameter_list|(
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listTables
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HTableDescriptor
index|[]
name|listTables
parameter_list|(
specifier|final
name|Pattern
name|pattern
parameter_list|,
specifier|final
name|boolean
name|includeSysTables
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|HTableDescriptor
index|[]
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|GetTableDescriptorsRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildGetTableDescriptorsRequest
argument_list|(
name|pattern
argument_list|,
name|includeSysTables
argument_list|)
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|getHTableDescriptorArray
argument_list|(
name|master
operator|.
name|getTableDescriptors
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HTableDescriptor
index|[]
name|listTables
parameter_list|(
name|String
name|regex
parameter_list|,
name|boolean
name|includeSysTables
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listTables
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|,
name|includeSysTables
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
index|[]
name|listTableNames
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|listTableNames
argument_list|(
operator|(
name|Pattern
operator|)
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
index|[]
name|listTableNames
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listTableNames
argument_list|(
name|pattern
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
index|[]
name|listTableNames
parameter_list|(
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listTableNames
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
index|[]
name|listTableNames
parameter_list|(
specifier|final
name|Pattern
name|pattern
parameter_list|,
specifier|final
name|boolean
name|includeSysTables
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|TableName
index|[]
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|TableName
index|[]
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|GetTableNamesRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildGetTableNamesRequest
argument_list|(
name|pattern
argument_list|,
name|includeSysTables
argument_list|)
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|getTableNameArray
argument_list|(
name|master
operator|.
name|getTableNames
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
operator|.
name|getTableNamesList
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
index|[]
name|listTableNames
parameter_list|(
specifier|final
name|String
name|regex
parameter_list|,
specifier|final
name|boolean
name|includeSysTables
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listTableNames
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|,
name|includeSysTables
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HTableDescriptor
name|getTableDescriptor
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getHTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|getConnection
argument_list|()
argument_list|,
name|rpcCallerFactory
argument_list|,
name|rpcControllerFactory
argument_list|,
name|operationTimeout
argument_list|,
name|rpcTimeout
argument_list|)
return|;
block|}
specifier|static
name|TableDescriptor
name|getTableDescriptor
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
name|Connection
name|connection
parameter_list|,
name|RpcRetryingCallerFactory
name|rpcCallerFactory
parameter_list|,
specifier|final
name|RpcControllerFactory
name|rpcControllerFactory
parameter_list|,
name|int
name|operationTimeout
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|TableDescriptor
name|td
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|TableDescriptor
argument_list|>
argument_list|(
name|connection
argument_list|,
name|rpcControllerFactory
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|TableDescriptor
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|GetTableDescriptorsRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildGetTableDescriptorsRequest
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|GetTableDescriptorsResponse
name|htds
init|=
name|master
operator|.
name|getTableDescriptors
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|htds
operator|.
name|getTableSchemaList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ProtobufUtil
operator|.
name|convertToTableDesc
argument_list|(
name|htds
operator|.
name|getTableSchemaList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|rpcCallerFactory
argument_list|,
name|operationTimeout
argument_list|,
name|rpcTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|!=
literal|null
condition|)
block|{
return|return
name|td
return|;
block|}
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * @deprecated since 2.0 version and will be removed in 3.0 version.    *             use {@link #getTableDescriptor(TableName,    *             Connection, RpcRetryingCallerFactory,RpcControllerFactory,int,int)}    */
annotation|@
name|Deprecated
specifier|static
name|HTableDescriptor
name|getHTableDescriptor
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
name|Connection
name|connection
parameter_list|,
name|RpcRetryingCallerFactory
name|rpcCallerFactory
parameter_list|,
specifier|final
name|RpcControllerFactory
name|rpcControllerFactory
parameter_list|,
name|int
name|operationTimeout
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|HTableDescriptor
name|htd
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|HTableDescriptor
argument_list|>
argument_list|(
name|connection
argument_list|,
name|rpcControllerFactory
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|HTableDescriptor
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|GetTableDescriptorsRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildGetTableDescriptorsRequest
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|GetTableDescriptorsResponse
name|htds
init|=
name|master
operator|.
name|getTableDescriptors
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|htds
operator|.
name|getTableSchemaList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ProtobufUtil
operator|.
name|convertToHTableDesc
argument_list|(
name|htds
operator|.
name|getTableSchemaList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|rpcCallerFactory
argument_list|,
name|operationTimeout
argument_list|,
name|rpcTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|htd
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ImmutableHTableDescriptor
argument_list|(
name|htd
argument_list|)
return|;
block|}
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
throw|;
block|}
specifier|private
name|long
name|getPauseTime
parameter_list|(
name|int
name|tries
parameter_list|)
block|{
name|int
name|triesCount
init|=
name|tries
decl_stmt|;
if|if
condition|(
name|triesCount
operator|>=
name|HConstants
operator|.
name|RETRY_BACKOFF
operator|.
name|length
condition|)
block|{
name|triesCount
operator|=
name|HConstants
operator|.
name|RETRY_BACKOFF
operator|.
name|length
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|this
operator|.
name|pause
operator|*
name|HConstants
operator|.
name|RETRY_BACKOFF
index|[
name|triesCount
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
name|createTable
argument_list|(
name|desc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
name|TableDescriptor
name|desc
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|int
name|numRegions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|numRegions
operator|<
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must create at least three regions"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|)
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Start key must be smaller than end key"
argument_list|)
throw|;
block|}
if|if
condition|(
name|numRegions
operator|==
literal|3
condition|)
block|{
name|createTable
argument_list|(
name|desc
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|startKey
block|,
name|endKey
block|}
argument_list|)
expr_stmt|;
return|return;
block|}
name|byte
index|[]
index|[]
name|splitKeys
init|=
name|Bytes
operator|.
name|split
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
operator|-
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitKeys
operator|==
literal|null
operator|||
name|splitKeys
operator|.
name|length
operator|!=
name|numRegions
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to split key range into enough regions"
argument_list|)
throw|;
block|}
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
specifier|final
name|TableDescriptor
name|desc
parameter_list|,
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|createTableAsync
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|)
argument_list|,
name|syncWaitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|createTableAsync
parameter_list|(
specifier|final
name|TableDescriptor
name|desc
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|desc
operator|.
name|getTableName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"TableName cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|splitKeys
operator|!=
literal|null
operator|&&
name|splitKeys
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|splitKeys
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
comment|// Verify there are no duplicate split keys
name|byte
index|[]
name|lastKey
init|=
literal|null
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|splitKey
range|:
name|splitKeys
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|splitKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Empty split key must not be passed in the split keys."
argument_list|)
throw|;
block|}
if|if
condition|(
name|lastKey
operator|!=
literal|null
operator|&&
name|Bytes
operator|.
name|equals
argument_list|(
name|splitKey
argument_list|,
name|lastKey
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All split keys must be unique, "
operator|+
literal|"found duplicate: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|splitKey
argument_list|)
operator|+
literal|", "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|lastKey
argument_list|)
argument_list|)
throw|;
block|}
name|lastKey
operator|=
name|splitKey
expr_stmt|;
block|}
block|}
name|CreateTableResponse
name|response
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|CreateTableResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|CreateTableResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|setPriority
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|CreateTableRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildCreateTableRequest
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|master
operator|.
name|createTable
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|CreateTableFuture
argument_list|(
name|this
argument_list|,
name|desc
argument_list|,
name|splitKeys
argument_list|,
name|response
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|CreateTableFuture
extends|extends
name|TableFuture
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|TableDescriptor
name|desc
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
index|[]
name|splitKeys
decl_stmt|;
specifier|public
name|CreateTableFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|TableDescriptor
name|desc
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|,
specifier|final
name|CreateTableResponse
name|response
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|hasProcId
argument_list|()
operator|)
condition|?
name|response
operator|.
name|getProcId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|splitKeys
operator|=
name|splitKeys
expr_stmt|;
name|this
operator|.
name|desc
operator|=
name|desc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|TableDescriptor
name|getTableDescriptor
parameter_list|()
block|{
return|return
name|desc
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"CREATE"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Void
name|waitOperationResult
parameter_list|(
specifier|final
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|waitForTableEnabled
argument_list|(
name|deadlineTs
argument_list|)
expr_stmt|;
name|waitForAllRegionsOnline
argument_list|(
name|deadlineTs
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|deleteTableAsync
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|syncWaitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|deleteTableAsync
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|DeleteTableResponse
name|response
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|DeleteTableResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|DeleteTableResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|setPriority
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|DeleteTableRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildDeleteTableRequest
argument_list|(
name|tableName
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|master
operator|.
name|deleteTable
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|DeleteTableFuture
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|response
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|DeleteTableFuture
extends|extends
name|TableFuture
argument_list|<
name|Void
argument_list|>
block|{
specifier|public
name|DeleteTableFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|DeleteTableResponse
name|response
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
operator|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|hasProcId
argument_list|()
operator|)
condition|?
name|response
operator|.
name|getProcId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"DELETE"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Void
name|waitOperationResult
parameter_list|(
specifier|final
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|waitTableNotFound
argument_list|(
name|deadlineTs
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Void
name|postOperationResult
parameter_list|(
specifier|final
name|Void
name|result
parameter_list|,
specifier|final
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
comment|// Delete cached information to prevent clients from using old locations
operator|(
operator|(
name|ClusterConnection
operator|)
name|getAdmin
argument_list|()
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|clearRegionCache
argument_list|(
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|postOperationResult
argument_list|(
name|result
argument_list|,
name|deadlineTs
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HTableDescriptor
index|[]
name|deleteTables
parameter_list|(
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|deleteTables
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Delete tables matching the passed in pattern and wait on completion.    *    * Warning: Use this method carefully, there is no prompting and the effect is    * immediate. Consider using {@link #listTables(java.util.regex.Pattern) } and    * {@link #deleteTable(TableName)}    *    * @param pattern The pattern to match table names against    * @return Table descriptors for tables that couldn't be deleted    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|HTableDescriptor
index|[]
name|deleteTables
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|failed
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|HTableDescriptor
name|table
range|:
name|listTables
argument_list|(
name|pattern
argument_list|)
control|)
block|{
try|try
block|{
name|deleteTable
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to delete table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|failed
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|failed
operator|.
name|toArray
argument_list|(
operator|new
name|HTableDescriptor
index|[
name|failed
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|truncateTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|boolean
name|preserveSplits
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|truncateTableAsync
argument_list|(
name|tableName
argument_list|,
name|preserveSplits
argument_list|)
argument_list|,
name|syncWaitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|truncateTableAsync
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|boolean
name|preserveSplits
parameter_list|)
throws|throws
name|IOException
block|{
name|TruncateTableResponse
name|response
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|TruncateTableResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|TruncateTableResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|setPriority
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started truncating "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|TruncateTableRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildTruncateTableRequest
argument_list|(
name|tableName
argument_list|,
name|preserveSplits
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|master
operator|.
name|truncateTable
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|TruncateTableFuture
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|preserveSplits
argument_list|,
name|response
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|TruncateTableFuture
extends|extends
name|TableFuture
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|boolean
name|preserveSplits
decl_stmt|;
specifier|public
name|TruncateTableFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|boolean
name|preserveSplits
parameter_list|,
specifier|final
name|TruncateTableResponse
name|response
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
operator|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|hasProcId
argument_list|()
operator|)
condition|?
name|response
operator|.
name|getProcId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|preserveSplits
operator|=
name|preserveSplits
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"TRUNCATE"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Void
name|waitOperationResult
parameter_list|(
specifier|final
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|waitForTableEnabled
argument_list|(
name|deadlineTs
argument_list|)
expr_stmt|;
comment|// once the table is enabled, we know the operation is done. so we can fetch the splitKeys
name|byte
index|[]
index|[]
name|splitKeys
init|=
name|preserveSplits
condition|?
name|getAdmin
argument_list|()
operator|.
name|getTableSplits
argument_list|(
name|getTableName
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|waitForAllRegionsOnline
argument_list|(
name|deadlineTs
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|byte
index|[]
index|[]
name|getTableSplits
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|splits
init|=
literal|null
decl_stmt|;
try|try
init|(
name|RegionLocator
name|locator
init|=
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|byte
index|[]
index|[]
name|startKeys
init|=
name|locator
operator|.
name|getStartKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|startKeys
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|splits
return|;
block|}
name|splits
operator|=
operator|new
name|byte
index|[
name|startKeys
operator|.
name|length
operator|-
literal|1
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|startKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|splits
index|[
name|i
operator|-
literal|1
index|]
operator|=
name|startKeys
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|splits
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|enableTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|enableTableAsync
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|syncWaitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|enableTableAsync
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|TableName
operator|.
name|isLegalFullyQualifiedTableName
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|EnableTableResponse
name|response
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|EnableTableResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|EnableTableResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|setPriority
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started enable of "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|EnableTableRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildEnableTableRequest
argument_list|(
name|tableName
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|master
operator|.
name|enableTable
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|EnableTableFuture
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|response
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|EnableTableFuture
extends|extends
name|TableFuture
argument_list|<
name|Void
argument_list|>
block|{
specifier|public
name|EnableTableFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|EnableTableResponse
name|response
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
operator|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|hasProcId
argument_list|()
operator|)
condition|?
name|response
operator|.
name|getProcId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"ENABLE"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Void
name|waitOperationResult
parameter_list|(
specifier|final
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|waitForTableEnabled
argument_list|(
name|deadlineTs
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HTableDescriptor
index|[]
name|enableTables
parameter_list|(
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|enableTables
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HTableDescriptor
index|[]
name|enableTables
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|failed
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|HTableDescriptor
name|table
range|:
name|listTables
argument_list|(
name|pattern
argument_list|)
control|)
block|{
if|if
condition|(
name|isTableDisabled
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|enableTable
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to enable table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|failed
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|failed
operator|.
name|toArray
argument_list|(
operator|new
name|HTableDescriptor
index|[
name|failed
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|disableTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|disableTableAsync
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|syncWaitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|disableTableAsync
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|TableName
operator|.
name|isLegalFullyQualifiedTableName
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|DisableTableResponse
name|response
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|DisableTableResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|DisableTableResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|setPriority
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started disable of "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|DisableTableRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildDisableTableRequest
argument_list|(
name|tableName
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|master
operator|.
name|disableTable
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|DisableTableFuture
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|response
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|DisableTableFuture
extends|extends
name|TableFuture
argument_list|<
name|Void
argument_list|>
block|{
specifier|public
name|DisableTableFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|DisableTableResponse
name|response
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
operator|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|hasProcId
argument_list|()
operator|)
condition|?
name|response
operator|.
name|getProcId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"DISABLE"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Void
name|waitOperationResult
parameter_list|(
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|waitForTableDisabled
argument_list|(
name|deadlineTs
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HTableDescriptor
index|[]
name|disableTables
parameter_list|(
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|disableTables
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HTableDescriptor
index|[]
name|disableTables
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|failed
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|HTableDescriptor
name|table
range|:
name|listTables
argument_list|(
name|pattern
argument_list|)
control|)
block|{
if|if
condition|(
name|isTableEnabled
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|disableTable
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to disable table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|failed
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|failed
operator|.
name|toArray
argument_list|(
operator|new
name|HTableDescriptor
index|[
name|failed
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTableEnabled
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkTableExists
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|executeCallable
argument_list|(
operator|new
name|RpcRetryingCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|rpcCall
parameter_list|(
name|int
name|callTimeout
parameter_list|)
throws|throws
name|Exception
block|{
name|TableState
name|tableState
init|=
name|MetaTableAccessor
operator|.
name|getTableState
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableState
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
argument_list|)
throw|;
block|}
return|return
name|tableState
operator|.
name|inStates
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTableDisabled
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkTableExists
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|connection
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTableAvailable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|isTableAvailable
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTableAvailable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|connection
operator|.
name|isTableAvailable
argument_list|(
name|tableName
argument_list|,
name|splitKeys
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|getAlterStatus
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|setPriority
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|GetSchemaAlterStatusRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildGetSchemaAlterStatusRequest
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|GetSchemaAlterStatusResponse
name|ret
init|=
name|master
operator|.
name|getSchemaAlterStatus
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|pair
init|=
operator|new
name|Pair
argument_list|<>
argument_list|(
name|ret
operator|.
name|getYetToUpdateRegions
argument_list|()
argument_list|,
name|ret
operator|.
name|getTotalRegions
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|pair
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|getAlterStatus
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getAlterStatus
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    * @deprecated Since 2.0. Will be removed in 3.0. Use    *     {@link #addColumnFamily(TableName, HColumnDescriptor)} instead.    */
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|addColumn
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|addColumnFamily
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addColumnFamily
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|addColumnFamilyAsync
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|)
argument_list|,
name|syncWaitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|addColumnFamilyAsync
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|AddColumnResponse
name|response
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|AddColumnResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|AddColumnResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|setPriority
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|AddColumnRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildAddColumnRequest
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|master
operator|.
name|addColumn
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|AddColumnFamilyFuture
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|response
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|AddColumnFamilyFuture
extends|extends
name|ModifyTableFuture
block|{
specifier|public
name|AddColumnFamilyFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|AddColumnResponse
name|response
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
operator|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|hasProcId
argument_list|()
operator|)
condition|?
name|response
operator|.
name|getProcId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"ADD_COLUMN_FAMILY"
return|;
block|}
block|}
comment|/**    * {@inheritDoc}    * @deprecated Since 2.0. Will be removed in 3.0. Use    *     {@link #deleteColumnFamily(TableName, byte[])} instead.    */
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|deleteColumn
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteColumnFamily
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteColumnFamily
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|deleteColumnFamilyAsync
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|)
argument_list|,
name|syncWaitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|deleteColumnFamilyAsync
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|DeleteColumnResponse
name|response
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|DeleteColumnResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|DeleteColumnResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|setPriority
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|DeleteColumnRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildDeleteColumnRequest
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|master
operator|.
name|deleteColumn
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|DeleteColumnFamilyFuture
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|response
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|DeleteColumnFamilyFuture
extends|extends
name|ModifyTableFuture
block|{
specifier|public
name|DeleteColumnFamilyFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|DeleteColumnResponse
name|response
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
operator|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|hasProcId
argument_list|()
operator|)
condition|?
name|response
operator|.
name|getProcId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"DELETE_COLUMN_FAMILY"
return|;
block|}
block|}
comment|/**    * {@inheritDoc}    * @deprecated As of 2.0. Will be removed in 3.0. Use    *     {@link #modifyColumnFamily(TableName, HColumnDescriptor)} instead.    */
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|modifyColumn
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|modifyColumnFamily
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifyColumnFamily
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|modifyColumnFamilyAsync
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|)
argument_list|,
name|syncWaitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|modifyColumnFamilyAsync
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|ModifyColumnResponse
name|response
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|ModifyColumnResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ModifyColumnResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|setPriority
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ModifyColumnRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildModifyColumnRequest
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|master
operator|.
name|modifyColumn
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|ModifyColumnFamilyFuture
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|response
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|ModifyColumnFamilyFuture
extends|extends
name|ModifyTableFuture
block|{
specifier|public
name|ModifyColumnFamilyFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|ModifyColumnResponse
name|response
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
operator|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|hasProcId
argument_list|()
operator|)
condition|?
name|response
operator|.
name|getProcId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"MODIFY_COLUMN_FAMILY"
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeRegion
parameter_list|(
specifier|final
name|String
name|regionname
parameter_list|,
specifier|final
name|String
name|serverName
parameter_list|)
throws|throws
name|IOException
block|{
name|closeRegion
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|regionname
argument_list|)
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionname
parameter_list|,
specifier|final
name|String
name|serverName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|serverName
operator|!=
literal|null
condition|)
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
init|=
name|MetaTableAccessor
operator|.
name|getRegion
argument_list|(
name|connection
argument_list|,
name|regionname
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
operator|||
name|pair
operator|.
name|getFirst
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionname
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|closeRegion
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
name|serverName
argument_list|)
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
init|=
name|MetaTableAccessor
operator|.
name|getRegion
argument_list|(
name|connection
argument_list|,
name|regionname
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionname
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|pair
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoServerForRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionname
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|closeRegion
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|closeRegionWithEncodedRegionName
parameter_list|(
specifier|final
name|String
name|encodedRegionName
parameter_list|,
specifier|final
name|String
name|serverName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|serverName
operator|||
operator|(
literal|""
operator|)
operator|.
name|equals
argument_list|(
name|serverName
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The servername cannot be null or empty."
argument_list|)
throw|;
block|}
name|ServerName
name|sn
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|this
operator|.
name|connection
operator|.
name|getAdmin
argument_list|(
name|sn
argument_list|)
decl_stmt|;
comment|// Close the region without updating zk state.
name|CloseRegionRequest
name|request
init|=
name|ProtobufUtil
operator|.
name|buildCloseRegionRequest
argument_list|(
name|sn
argument_list|,
name|encodedRegionName
argument_list|)
decl_stmt|;
comment|// TODO: There is no timeout on this controller. Set one!
name|HBaseRpcController
name|controller
init|=
name|this
operator|.
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
decl_stmt|;
try|try
block|{
name|CloseRegionResponse
name|response
init|=
name|admin
operator|.
name|closeRegion
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|boolean
name|closed
init|=
name|response
operator|.
name|getClosed
argument_list|()
decl_stmt|;
if|if
condition|(
literal|false
operator|==
name|closed
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Not able to close the region "
operator|+
name|encodedRegionName
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
return|return
name|closed
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|handleRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeRegion
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
block|{
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|this
operator|.
name|connection
operator|.
name|getAdmin
argument_list|(
name|sn
argument_list|)
decl_stmt|;
comment|// TODO: There is no timeout on this controller. Set one!
name|HBaseRpcController
name|controller
init|=
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
decl_stmt|;
comment|// Close the region without updating zk state.
name|ProtobufUtil
operator|.
name|closeRegion
argument_list|(
name|controller
argument_list|,
name|admin
argument_list|,
name|sn
argument_list|,
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getOnlineRegions
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|this
operator|.
name|connection
operator|.
name|getAdmin
argument_list|(
name|sn
argument_list|)
decl_stmt|;
comment|// TODO: There is no timeout on this controller. Set one!
name|HBaseRpcController
name|controller
init|=
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|controller
argument_list|,
name|admin
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkTableExists
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Table is disabled: "
operator|+
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|execProcedure
argument_list|(
literal|"flush-table-proc"
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flushRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regionServerPair
init|=
name|getRegion
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionServerPair
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown regionname: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|regionServerPair
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoServerForRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|HRegionInfo
name|hRegionInfo
init|=
name|regionServerPair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|regionServerPair
operator|.
name|getSecond
argument_list|()
decl_stmt|;
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|this
operator|.
name|connection
operator|.
name|getAdmin
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|callable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: There is no timeout on this controller. Set one!
name|HBaseRpcController
name|controller
init|=
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
decl_stmt|;
name|FlushRegionRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildFlushRegionRequest
argument_list|(
name|hRegionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|flushRegion
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|ProtobufUtil
operator|.
name|call
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|compact
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|compact
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|CompactType
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|compactRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|compactRegion
argument_list|(
name|regionName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|compact
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|compact
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|,
literal|false
argument_list|,
name|CompactType
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|compactRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|compactRegion
argument_list|(
name|regionName
argument_list|,
name|columnFamily
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|compactRegionServer
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|,
name|boolean
name|major
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|HRegionInfo
name|region
range|:
name|getOnlineRegions
argument_list|(
name|sn
argument_list|)
control|)
block|{
name|compact
argument_list|(
name|sn
argument_list|,
name|region
argument_list|,
name|major
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|majorCompact
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|compact
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|CompactType
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|majorCompactRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|compactRegion
argument_list|(
name|regionName
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|majorCompact
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|compact
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|,
literal|true
argument_list|,
name|CompactType
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|majorCompactRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|compactRegion
argument_list|(
name|regionName
argument_list|,
name|columnFamily
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Compact a table.    * Asynchronous operation.    *    * @param tableName table or region to compact    * @param columnFamily column family within a table or region    * @param major True if we are to do a major compaction.    * @param compactType {@link org.apache.hadoop.hbase.client.CompactType}    * @throws IOException if a remote or network exception occurs    */
specifier|private
name|void
name|compact
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|,
specifier|final
name|boolean
name|major
parameter_list|,
name|CompactType
name|compactType
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|compactType
condition|)
block|{
case|case
name|MOB
case|:
name|ServerName
name|master
init|=
name|getMasterAddress
argument_list|()
decl_stmt|;
name|compact
argument_list|(
name|master
argument_list|,
name|getMobRegionInfo
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|major
argument_list|,
name|columnFamily
argument_list|)
expr_stmt|;
break|break;
case|case
name|NORMAL
case|:
default|default:
name|ZooKeeperWatcher
name|zookeeper
init|=
literal|null
decl_stmt|;
try|try
block|{
name|checkTableExists
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|zookeeper
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
name|ZK_IDENTIFIER_PREFIX
operator|+
name|connection
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|ThrowableAbortable
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|pairs
decl_stmt|;
if|if
condition|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|pairs
operator|=
operator|new
name|MetaTableLocator
argument_list|()
operator|.
name|getMetaRegionsAndLocations
argument_list|(
name|zookeeper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pairs
operator|=
name|MetaTableAccessor
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
range|:
name|pairs
control|)
block|{
if|if
condition|(
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|isOffline
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|pair
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
try|try
block|{
name|compact
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|,
name|major
argument_list|,
name|columnFamily
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotServingRegionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to"
operator|+
operator|(
name|major
condition|?
literal|" major"
else|:
literal|""
operator|)
operator|+
literal|" compact "
operator|+
name|pair
operator|.
name|getFirst
argument_list|()
operator|+
literal|": "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|zookeeper
operator|!=
literal|null
condition|)
block|{
name|zookeeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
comment|/**    * Compact an individual region.    * Asynchronous operation.    *    * @param regionName region to compact    * @param columnFamily column family within a table or region    * @param major True if we are to do a major compaction.    * @throws IOException if a remote or network exception occurs    * @throws InterruptedException    */
specifier|private
name|void
name|compactRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|,
specifier|final
name|boolean
name|major
parameter_list|)
throws|throws
name|IOException
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regionServerPair
init|=
name|getRegion
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionServerPair
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid region: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|regionServerPair
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoServerForRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
block|}
name|compact
argument_list|(
name|regionServerPair
operator|.
name|getSecond
argument_list|()
argument_list|,
name|regionServerPair
operator|.
name|getFirst
argument_list|()
argument_list|,
name|major
argument_list|,
name|columnFamily
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|compact
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|boolean
name|major
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|this
operator|.
name|connection
operator|.
name|getAdmin
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|callable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: There is no timeout on this controller. Set one!
name|HBaseRpcController
name|controller
init|=
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
decl_stmt|;
name|CompactRegionRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildCompactRegionRequest
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|major
argument_list|,
name|family
argument_list|)
decl_stmt|;
name|admin
operator|.
name|compactRegion
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|ProtobufUtil
operator|.
name|call
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|move
parameter_list|(
specifier|final
name|byte
index|[]
name|encodedRegionName
parameter_list|,
specifier|final
name|byte
index|[]
name|destServerName
parameter_list|)
throws|throws
name|IOException
block|{
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|setPriority
argument_list|(
name|encodedRegionName
argument_list|)
expr_stmt|;
name|MoveRegionRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildMoveRegionRequest
argument_list|(
name|encodedRegionName
argument_list|,
name|destServerName
argument_list|)
decl_stmt|;
name|master
operator|.
name|moveRegion
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assign
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|MasterNotRunningException
throws|,
name|ZooKeeperConnectionException
throws|,
name|IOException
block|{
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|setPriority
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|AssignRegionRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildAssignRegionRequest
argument_list|(
name|getRegionName
argument_list|(
name|regionName
argument_list|)
argument_list|)
decl_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unassign
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|boolean
name|force
parameter_list|)
throws|throws
name|MasterNotRunningException
throws|,
name|ZooKeeperConnectionException
throws|,
name|IOException
block|{
specifier|final
name|byte
index|[]
name|toBeUnassigned
init|=
name|getRegionName
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|setPriority
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|UnassignRegionRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildUnassignRegionRequest
argument_list|(
name|toBeUnassigned
argument_list|,
name|force
argument_list|)
decl_stmt|;
name|master
operator|.
name|unassignRegion
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|offline
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|setPriority
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|master
operator|.
name|offlineRegion
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildOfflineRegionRequest
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|setBalancerRunning
parameter_list|(
specifier|final
name|boolean
name|on
parameter_list|,
specifier|final
name|boolean
name|synchronous
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|SetBalancerRunningRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildSetBalancerRunningRequest
argument_list|(
name|on
argument_list|,
name|synchronous
argument_list|)
decl_stmt|;
return|return
name|master
operator|.
name|setBalancerRunning
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
operator|.
name|getPrevBalanceValue
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|balancer
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|balance
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildBalanceRequest
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|getBalancerRan
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|balancer
parameter_list|(
specifier|final
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|balance
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildBalanceRequest
argument_list|(
name|force
argument_list|)
argument_list|)
operator|.
name|getBalancerRan
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isBalancerEnabled
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|isBalancerEnabled
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildIsBalancerEnabledRequest
argument_list|()
argument_list|)
operator|.
name|getEnabled
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|normalize
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|normalize
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildNormalizeRequest
argument_list|()
argument_list|)
operator|.
name|getNormalizerRan
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNormalizerEnabled
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|isNormalizerEnabled
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildIsNormalizerEnabledRequest
argument_list|()
argument_list|)
operator|.
name|getEnabled
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|setNormalizerRunning
parameter_list|(
specifier|final
name|boolean
name|on
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|SetNormalizerRunningRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildSetNormalizerRunningRequest
argument_list|(
name|on
argument_list|)
decl_stmt|;
return|return
name|master
operator|.
name|setNormalizerRunning
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
operator|.
name|getPrevNormalizerValue
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|enableCatalogJanitor
parameter_list|(
specifier|final
name|boolean
name|enable
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|enableCatalogJanitor
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildEnableCatalogJanitorRequest
argument_list|(
name|enable
argument_list|)
argument_list|)
operator|.
name|getPrevValue
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|runCatalogScan
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Integer
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|runCatalogScan
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildCatalogScanRequest
argument_list|()
argument_list|)
operator|.
name|getScanResult
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCatalogJanitorEnabled
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|isCatalogJanitorEnabled
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildIsCatalogJanitorEnabledRequest
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|setCleanerChoreRunning
parameter_list|(
specifier|final
name|boolean
name|on
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|setCleanerChoreRunning
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildSetCleanerChoreRunningRequest
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|getPrevValue
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|runCleanerChore
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|runCleanerChore
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildRunCleanerChoreRequest
argument_list|()
argument_list|)
operator|.
name|getCleanerChoreRan
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCleanerChoreEnabled
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|isCleanerChoreEnabled
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildIsCleanerChoreEnabledRequest
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Merge two regions. Synchronous operation.    * Note: It is not feasible to predict the length of merge.    *   Therefore, this is for internal testing only.    * @param nameOfRegionA encoded or full name of region a    * @param nameOfRegionB encoded or full name of region b    * @param forcible true if do a compulsory merge, otherwise we will only merge    *          two adjacent regions    * @throws IOException    */
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|mergeRegionsSync
parameter_list|(
specifier|final
name|byte
index|[]
name|nameOfRegionA
parameter_list|,
specifier|final
name|byte
index|[]
name|nameOfRegionB
parameter_list|,
specifier|final
name|boolean
name|forcible
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|mergeRegionsAsync
argument_list|(
name|nameOfRegionA
argument_list|,
name|nameOfRegionB
argument_list|,
name|forcible
argument_list|)
argument_list|,
name|syncWaitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Merge two regions. Asynchronous operation.    * @param nameOfRegionA encoded or full name of region a    * @param nameOfRegionB encoded or full name of region b    * @param forcible true if do a compulsory merge, otherwise we will only merge    *          two adjacent regions    * @throws IOException    * @deprecated Since 2.0. Will be removed in 3.0. Use    *     {@link #mergeRegionsAsync(byte[], byte[], boolean)} instead.    */
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|mergeRegions
parameter_list|(
specifier|final
name|byte
index|[]
name|nameOfRegionA
parameter_list|,
specifier|final
name|byte
index|[]
name|nameOfRegionB
parameter_list|,
specifier|final
name|boolean
name|forcible
parameter_list|)
throws|throws
name|IOException
block|{
name|mergeRegionsAsync
argument_list|(
name|nameOfRegionA
argument_list|,
name|nameOfRegionB
argument_list|,
name|forcible
argument_list|)
expr_stmt|;
block|}
comment|/**    * Merge two regions. Asynchronous operation.    * @param nameOfRegionA encoded or full name of region a    * @param nameOfRegionB encoded or full name of region b    * @param forcible true if do a compulsory merge, otherwise we will only merge    *          two adjacent regions    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|mergeRegionsAsync
parameter_list|(
specifier|final
name|byte
index|[]
name|nameOfRegionA
parameter_list|,
specifier|final
name|byte
index|[]
name|nameOfRegionB
parameter_list|,
specifier|final
name|boolean
name|forcible
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|nameofRegionsToMerge
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|nameofRegionsToMerge
index|[
literal|0
index|]
operator|=
name|nameOfRegionA
expr_stmt|;
name|nameofRegionsToMerge
index|[
literal|1
index|]
operator|=
name|nameOfRegionB
expr_stmt|;
return|return
name|mergeRegionsAsync
argument_list|(
name|nameofRegionsToMerge
argument_list|,
name|forcible
argument_list|)
return|;
block|}
comment|/**    * Merge two regions. Asynchronous operation.    * @param nameofRegionsToMerge encoded or full name of daughter regions    * @param forcible true if do a compulsory merge, otherwise we will only merge    *          adjacent regions    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|mergeRegionsAsync
parameter_list|(
specifier|final
name|byte
index|[]
index|[]
name|nameofRegionsToMerge
parameter_list|,
specifier|final
name|boolean
name|forcible
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|nameofRegionsToMerge
operator|.
name|length
operator|>=
literal|2
operator|)
assert|;
name|byte
index|[]
index|[]
name|encodedNameofRegionsToMerge
init|=
operator|new
name|byte
index|[
name|nameofRegionsToMerge
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nameofRegionsToMerge
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|encodedNameofRegionsToMerge
index|[
name|i
index|]
operator|=
name|HRegionInfo
operator|.
name|isEncodedRegionName
argument_list|(
name|nameofRegionsToMerge
index|[
name|i
index|]
argument_list|)
condition|?
name|nameofRegionsToMerge
index|[
name|i
index|]
else|:
name|HRegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|nameofRegionsToMerge
index|[
name|i
index|]
argument_list|)
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
name|TableName
name|tableName
init|=
literal|null
decl_stmt|;
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nameofRegionsToMerge
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|pair
operator|=
name|getRegion
argument_list|(
name|nameofRegionsToMerge
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|pair
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|getReplicaId
argument_list|()
operator|!=
name|HRegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't invoke merge on non-default regions directly"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
name|tableName
operator|=
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|getTable
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|tableName
operator|.
name|equals
argument_list|(
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot merge regions from two different tables "
operator|+
name|tableName
operator|+
literal|" and "
operator|+
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|UnknownRegionException
argument_list|(
literal|"Can't invoke merge on unknown region "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|encodedNameofRegionsToMerge
index|[
name|i
index|]
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|MergeTableRegionsResponse
name|response
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|MergeTableRegionsResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|MergeTableRegionsResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|MergeTableRegionsRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildMergeTableRegionsRequest
argument_list|(
name|encodedNameofRegionsToMerge
argument_list|,
name|forcible
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|master
operator|.
name|mergeTableRegions
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|MergeTableRegionsFuture
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|response
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|MergeTableRegionsFuture
extends|extends
name|TableFuture
argument_list|<
name|Void
argument_list|>
block|{
specifier|public
name|MergeTableRegionsFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|MergeTableRegionsResponse
name|response
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
operator|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|hasProcId
argument_list|()
operator|)
condition|?
name|response
operator|.
name|getProcId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MergeTableRegionsFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Long
name|procId
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
name|procId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"MERGE_REGIONS"
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|split
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|split
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|splitRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|splitRegion
argument_list|(
name|regionName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|split
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|splitPoint
parameter_list|)
throws|throws
name|IOException
block|{
name|ZooKeeperWatcher
name|zookeeper
init|=
literal|null
decl_stmt|;
try|try
block|{
name|checkTableExists
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|zookeeper
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
name|ZK_IDENTIFIER_PREFIX
operator|+
name|connection
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|ThrowableAbortable
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|pairs
decl_stmt|;
if|if
condition|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|pairs
operator|=
operator|new
name|MetaTableLocator
argument_list|()
operator|.
name|getMetaRegionsAndLocations
argument_list|(
name|zookeeper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pairs
operator|=
name|MetaTableAccessor
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
range|:
name|pairs
control|)
block|{
comment|// May not be a server for a particular row
if|if
condition|(
name|pair
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|HRegionInfo
name|r
init|=
name|pair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
comment|// check for parents
if|if
condition|(
name|r
operator|.
name|isSplitParent
argument_list|()
condition|)
continue|continue;
comment|// if a split point given, only split that particular region
if|if
condition|(
name|r
operator|.
name|getReplicaId
argument_list|()
operator|!=
name|HRegionInfo
operator|.
name|DEFAULT_REPLICA_ID
operator|||
operator|(
name|splitPoint
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|containsRow
argument_list|(
name|splitPoint
argument_list|)
operator|)
condition|)
continue|continue;
comment|// call out to region server to do split now
name|split
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|,
name|splitPoint
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|zookeeper
operator|!=
literal|null
condition|)
block|{
name|zookeeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|splitRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|splitPoint
parameter_list|)
throws|throws
name|IOException
block|{
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regionServerPair
init|=
name|getRegion
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionServerPair
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid region: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|regionServerPair
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
operator|&&
name|regionServerPair
operator|.
name|getFirst
argument_list|()
operator|.
name|getReplicaId
argument_list|()
operator|!=
name|HRegionInfo
operator|.
name|DEFAULT_REPLICA_ID
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't split replicas directly. "
operator|+
literal|"Replicas are auto-split when their primary is split."
argument_list|)
throw|;
block|}
if|if
condition|(
name|regionServerPair
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoServerForRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
block|}
name|split
argument_list|(
name|regionServerPair
operator|.
name|getSecond
argument_list|()
argument_list|,
name|regionServerPair
operator|.
name|getFirst
argument_list|()
argument_list|,
name|splitPoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|split
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
name|byte
index|[]
name|splitPoint
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hri
operator|.
name|getStartKey
argument_list|()
operator|!=
literal|null
operator|&&
name|splitPoint
operator|!=
literal|null
operator|&&
name|Bytes
operator|.
name|compareTo
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitPoint
argument_list|)
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"should not give a splitkey which equals to startkey!"
argument_list|)
throw|;
block|}
comment|// TODO: There is no timeout on this controller. Set one!
name|HBaseRpcController
name|controller
init|=
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
decl_stmt|;
name|controller
operator|.
name|setPriority
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: this does not do retries, it should. Set priority and timeout in controller
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|this
operator|.
name|connection
operator|.
name|getAdmin
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|ProtobufUtil
operator|.
name|split
argument_list|(
name|controller
argument_list|,
name|admin
argument_list|,
name|hri
argument_list|,
name|splitPoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifyTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|modifyTableAsync
argument_list|(
name|tableName
argument_list|,
name|htd
argument_list|)
argument_list|,
name|syncWaitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|modifyTableAsync
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|tableName
operator|.
name|equals
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"the specified table name '"
operator|+
name|tableName
operator|+
literal|"' doesn't match with the HTD one: "
operator|+
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
throw|;
block|}
name|ModifyTableResponse
name|response
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|ModifyTableResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ModifyTableResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|setPriority
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ModifyTableRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildModifyTableRequest
argument_list|(
name|tableName
argument_list|,
name|htd
argument_list|,
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|,
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|master
operator|.
name|modifyTable
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|ModifyTableFuture
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|response
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|ModifyTableFuture
extends|extends
name|TableFuture
argument_list|<
name|Void
argument_list|>
block|{
specifier|public
name|ModifyTableFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|ModifyTableResponse
name|response
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
operator|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|hasProcId
argument_list|()
operator|)
condition|?
name|response
operator|.
name|getProcId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ModifyTableFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Long
name|procId
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
name|procId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"MODIFY"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Void
name|postOperationResult
parameter_list|(
specifier|final
name|Void
name|result
parameter_list|,
specifier|final
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
comment|// The modify operation on the table is asynchronous on the server side irrespective
comment|// of whether Procedure V2 is supported or not. So, we wait in the client till
comment|// all regions get updated.
name|waitForSchemaUpdate
argument_list|(
name|deadlineTs
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
comment|/**    * @param regionName Name of a region.    * @return a pair of HRegionInfo and ServerName if<code>regionName</code> is    *  a verified region name (we call {@link    *  MetaTableAccessor#getRegionLocation(Connection, byte[])}    *  else null.    * Throw IllegalArgumentException if<code>regionName</code> is null.    * @throws IOException    */
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|getRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|regionName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Pass a table name or region name"
argument_list|)
throw|;
block|}
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
init|=
name|MetaTableAccessor
operator|.
name|getRegion
argument_list|(
name|connection
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
block|{
specifier|final
name|AtomicReference
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|String
name|encodedName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|MetaTableAccessor
operator|.
name|Visitor
name|visitor
init|=
operator|new
name|MetaTableAccessor
operator|.
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|info
init|=
name|MetaTableAccessor
operator|.
name|getHRegionInfo
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No serialized HRegionInfo in "
operator|+
name|data
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|RegionLocations
name|rl
init|=
name|MetaTableAccessor
operator|.
name|getRegionLocations
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|boolean
name|matched
init|=
literal|false
decl_stmt|;
name|ServerName
name|sn
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rl
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HRegionLocation
name|h
range|:
name|rl
operator|.
name|getRegionLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|h
operator|!=
literal|null
operator|&&
name|encodedName
operator|.
name|equals
argument_list|(
name|h
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
condition|)
block|{
name|sn
operator|=
name|h
operator|.
name|getServerName
argument_list|()
expr_stmt|;
name|info
operator|=
name|h
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
name|matched
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|matched
condition|)
return|return
literal|true
return|;
name|result
operator|.
name|set
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|info
argument_list|,
name|sn
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// found the region, stop
block|}
block|}
decl_stmt|;
name|MetaTableAccessor
operator|.
name|fullScanRegions
argument_list|(
name|connection
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|pair
operator|=
name|result
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|pair
return|;
block|}
comment|/**    * If the input is a region name, it is returned as is. If it's an    * encoded region name, the corresponding region is found from meta    * and its region name is returned. If we can't find any region in    * meta matching the input as either region name or encoded region    * name, the input is returned as is. We don't throw unknown    * region exception.    */
specifier|private
name|byte
index|[]
name|getRegionName
parameter_list|(
specifier|final
name|byte
index|[]
name|regionNameOrEncodedRegionName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|regionNameOrEncodedRegionName
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|regionNameOrEncodedRegionName
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
return|;
block|}
name|byte
index|[]
name|tmp
init|=
name|regionNameOrEncodedRegionName
decl_stmt|;
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regionServerPair
init|=
name|getRegion
argument_list|(
name|regionNameOrEncodedRegionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionServerPair
operator|!=
literal|null
operator|&&
name|regionServerPair
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tmp
operator|=
name|regionServerPair
operator|.
name|getFirst
argument_list|()
operator|.
name|getRegionName
argument_list|()
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
comment|/**    * Check if table exists or not    * @param tableName Name of a table.    * @return tableName instance    * @throws IOException if a remote or network exception occurs.    * @throws TableNotFoundException if table does not exist.    */
specifier|private
name|TableName
name|checkTableExists
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|RpcRetryingCallable
argument_list|<
name|TableName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TableName
name|rpcCall
parameter_list|(
name|int
name|callTimeout
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|MetaTableAccessor
operator|.
name|tableExists
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
argument_list|)
throw|;
block|}
return|return
name|tableName
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|setPriority
argument_list|(
name|HConstants
operator|.
name|HIGH_QOS
argument_list|)
expr_stmt|;
name|master
operator|.
name|shutdown
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|ShutdownRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|stopMaster
parameter_list|()
throws|throws
name|IOException
block|{
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|setPriority
argument_list|(
name|HConstants
operator|.
name|HIGH_QOS
argument_list|)
expr_stmt|;
name|master
operator|.
name|stopMaster
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|StopMasterRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|stopRegionServer
parameter_list|(
specifier|final
name|String
name|hostnamePort
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|hostname
init|=
name|Addressing
operator|.
name|parseHostname
argument_list|(
name|hostnamePort
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|Addressing
operator|.
name|parsePort
argument_list|(
name|hostnamePort
argument_list|)
decl_stmt|;
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|this
operator|.
name|connection
operator|.
name|getAdmin
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO: There is no timeout on this controller. Set one!
name|HBaseRpcController
name|controller
init|=
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
decl_stmt|;
name|controller
operator|.
name|setPriority
argument_list|(
name|HConstants
operator|.
name|HIGH_QOS
argument_list|)
expr_stmt|;
name|StopServerRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildStopServerRequest
argument_list|(
literal|"Called by admin client "
operator|+
name|this
operator|.
name|connection
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|stopServer
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|handleRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMasterInMaintenanceMode
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|IsInMaintenanceModeResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|this
operator|.
name|rpcControllerFactory
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|IsInMaintenanceModeResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|isMasterInMaintenanceMode
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|IsInMaintenanceModeRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|getInMaintenanceMode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterStatus
name|getClusterStatus
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|ClusterStatus
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|this
operator|.
name|rpcControllerFactory
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ClusterStatus
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|GetClusterStatusRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildGetClusterStatusRequest
argument_list|()
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|convert
argument_list|(
name|master
operator|.
name|getClusterStatus
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
operator|.
name|getClusterStatus
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|getRegionLoad
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRegionLoad
argument_list|(
name|sn
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|getRegionLoad
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|this
operator|.
name|connection
operator|.
name|getAdmin
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|HBaseRpcController
name|controller
init|=
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionLoad
argument_list|>
name|regionLoads
init|=
name|ProtobufUtil
operator|.
name|getRegionLoad
argument_list|(
name|controller
argument_list|,
name|admin
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|resultMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionLoad
name|regionLoad
range|:
name|regionLoads
control|)
block|{
name|resultMap
operator|.
name|put
argument_list|(
name|regionLoad
operator|.
name|getName
argument_list|()
argument_list|,
name|regionLoad
argument_list|)
expr_stmt|;
block|}
return|return
name|resultMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
comment|/**    * Do a get with a timeout against the passed in<code>future<code>.    */
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
specifier|final
name|Future
argument_list|<
name|T
argument_list|>
name|future
parameter_list|,
specifier|final
name|long
name|timeout
parameter_list|,
specifier|final
name|TimeUnit
name|units
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// TODO: how long should we wait? Spin forever?
return|return
name|future
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|units
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Interrupt while waiting on "
operator|+
name|future
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TimeoutIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createNamespace
parameter_list|(
specifier|final
name|NamespaceDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|createNamespaceAsync
argument_list|(
name|descriptor
argument_list|)
argument_list|,
name|this
operator|.
name|syncWaitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|createNamespaceAsync
parameter_list|(
specifier|final
name|NamespaceDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|CreateNamespaceResponse
name|response
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|CreateNamespaceResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|CreateNamespaceResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|createNamespace
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|CreateNamespaceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNamespaceDescriptor
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoNamespaceDescriptor
argument_list|(
name|descriptor
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|NamespaceFuture
argument_list|(
name|this
argument_list|,
name|descriptor
operator|.
name|getName
argument_list|()
argument_list|,
name|response
operator|.
name|getProcId
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"CREATE_NAMESPACE"
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifyNamespace
parameter_list|(
specifier|final
name|NamespaceDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|modifyNamespaceAsync
argument_list|(
name|descriptor
argument_list|)
argument_list|,
name|this
operator|.
name|syncWaitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|modifyNamespaceAsync
parameter_list|(
specifier|final
name|NamespaceDescriptor
name|descriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|ModifyNamespaceResponse
name|response
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|ModifyNamespaceResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ModifyNamespaceResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: set priority based on NS?
return|return
name|master
operator|.
name|modifyNamespace
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|ModifyNamespaceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNamespaceDescriptor
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoNamespaceDescriptor
argument_list|(
name|descriptor
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|NamespaceFuture
argument_list|(
name|this
argument_list|,
name|descriptor
operator|.
name|getName
argument_list|()
argument_list|,
name|response
operator|.
name|getProcId
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"MODIFY_NAMESPACE"
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteNamespace
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|get
argument_list|(
name|deleteNamespaceAsync
argument_list|(
name|name
argument_list|)
argument_list|,
name|this
operator|.
name|syncWaitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|deleteNamespaceAsync
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|DeleteNamespaceResponse
name|response
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|DeleteNamespaceResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|DeleteNamespaceResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: set priority based on NS?
return|return
name|master
operator|.
name|deleteNamespace
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|DeleteNamespaceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNamespaceName
argument_list|(
name|name
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|NamespaceFuture
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|response
operator|.
name|getProcId
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"DELETE_NAMESPACE"
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|NamespaceDescriptor
name|getNamespaceDescriptor
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|NamespaceNotFoundException
throws|,
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|NamespaceDescriptor
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|NamespaceDescriptor
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ProtobufUtil
operator|.
name|toNamespaceDescriptor
argument_list|(
name|master
operator|.
name|getNamespaceDescriptor
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|GetNamespaceDescriptorRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNamespaceName
argument_list|(
name|name
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|getNamespaceDescriptor
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NamespaceDescriptor
index|[]
name|listNamespaceDescriptors
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|NamespaceDescriptor
index|[]
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|NamespaceDescriptor
index|[]
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|HBaseProtos
operator|.
name|NamespaceDescriptor
argument_list|>
name|list
init|=
name|master
operator|.
name|listNamespaceDescriptors
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|ListNamespaceDescriptorsRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|getNamespaceDescriptorList
argument_list|()
decl_stmt|;
name|NamespaceDescriptor
index|[]
name|res
init|=
operator|new
name|NamespaceDescriptor
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|res
index|[
name|i
index|]
operator|=
name|ProtobufUtil
operator|.
name|toNamespaceDescriptor
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProcedureInfo
index|[]
name|listProcedures
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|ProcedureInfo
index|[]
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ProcedureInfo
index|[]
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ProcedureProtos
operator|.
name|Procedure
argument_list|>
name|procList
init|=
name|master
operator|.
name|listProcedures
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|ListProceduresRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|getProcedureList
argument_list|()
decl_stmt|;
name|ProcedureInfo
index|[]
name|procInfoList
init|=
operator|new
name|ProcedureInfo
index|[
name|procList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|procList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|procInfoList
index|[
name|i
index|]
operator|=
name|ProtobufUtil
operator|.
name|toProcedureInfo
argument_list|(
name|procList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|procInfoList
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LockInfo
index|[]
name|listLocks
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|LockInfo
index|[]
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|LockInfo
index|[]
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|ListLocksRequest
name|request
init|=
name|ListLocksRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|ListLocksResponse
name|response
init|=
name|master
operator|.
name|listLocks
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LockServiceProtos
operator|.
name|LockInfo
argument_list|>
name|locksProto
init|=
name|response
operator|.
name|getLockList
argument_list|()
decl_stmt|;
name|LockInfo
index|[]
name|locks
init|=
operator|new
name|LockInfo
index|[
name|locksProto
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LockServiceProtos
operator|.
name|LockInfo
name|lockProto
init|=
name|locksProto
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|locks
index|[
name|i
index|]
operator|=
name|ProtobufUtil
operator|.
name|toLockInfo
argument_list|(
name|lockProto
argument_list|)
expr_stmt|;
block|}
return|return
name|locks
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HTableDescriptor
index|[]
name|listTableDescriptorsByNamespace
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|HTableDescriptor
index|[]
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TableSchema
argument_list|>
name|list
init|=
name|master
operator|.
name|listTableDescriptorsByNamespace
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|ListTableDescriptorsByNamespaceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNamespaceName
argument_list|(
name|name
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|getTableSchemaList
argument_list|()
decl_stmt|;
name|HTableDescriptor
index|[]
name|res
init|=
operator|new
name|HTableDescriptor
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|res
index|[
name|i
index|]
operator|=
operator|new
name|ImmutableHTableDescriptor
argument_list|(
name|ProtobufUtil
operator|.
name|convertToHTableDesc
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
index|[]
name|listTableNamesByNamespace
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|TableName
index|[]
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|TableName
index|[]
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|HBaseProtos
operator|.
name|TableName
argument_list|>
name|tableNames
init|=
name|master
operator|.
name|listTableNamesByNamespace
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|ListTableNamesByNamespaceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNamespaceName
argument_list|(
name|name
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|getTableNameList
argument_list|()
decl_stmt|;
name|TableName
index|[]
name|result
init|=
operator|new
name|TableName
index|[
name|tableNames
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|tableNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Check to see if HBase is running. Throw an exception if not.    * @param conf system configuration    * @throws MasterNotRunningException if the master is not running    * @throws ZooKeeperConnectionException if unable to connect to zookeeper    * @deprecated since hbase-2.0.0 because throws a ServiceException. We don't want to have    * protobuf as part of our public API. Use {@link #available(Configuration)}    */
comment|// Used by tests and by the Merge tool. Merge tool uses it to figure if HBase is up or not.
comment|// MOB uses it too.
comment|// NOTE: hbase-2.0.0 removes ServiceException from the throw.
annotation|@
name|Deprecated
specifier|public
specifier|static
name|void
name|checkHBaseAvailable
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|MasterNotRunningException
throws|,
name|ZooKeeperConnectionException
throws|,
name|IOException
throws|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
block|{
name|available
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Is HBase available? Throw an exception if not.    * @param conf system configuration    * @throws MasterNotRunningException if the master is not running.    * @throws ZooKeeperConnectionException if unable to connect to zookeeper.    * // TODO do not expose ZKConnectionException.    */
specifier|public
specifier|static
name|void
name|available
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|MasterNotRunningException
throws|,
name|ZooKeeperConnectionException
throws|,
name|IOException
block|{
name|Configuration
name|copyOfConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// We set it to make it fail as soon as possible if HBase is not available
name|copyOfConf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|copyOfConf
operator|.
name|setInt
argument_list|(
literal|"zookeeper.recovery.retry"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Check ZK first.
comment|// If the connection exists, we may have a connection to ZK that does not work anymore
try|try
init|(
name|ClusterConnection
name|connection
init|=
operator|(
name|ClusterConnection
operator|)
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|copyOfConf
argument_list|)
init|)
block|{
comment|// Check ZK first.
comment|// If the connection exists, we may have a connection to ZK that does not work anymore
name|ZooKeeperKeepAliveConnection
name|zkw
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// This is NASTY. FIX!!!! Dependent on internal implementation! TODO
name|zkw
operator|=
operator|(
operator|(
name|ConnectionImplementation
operator|)
name|connection
operator|)
operator|.
name|getKeepAliveZooKeeperWatcher
argument_list|()
expr_stmt|;
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|exists
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ZooKeeperConnectionException
argument_list|(
literal|"Can't connect to ZooKeeper"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|(
literal|"Can't connect to ZooKeeper"
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ZooKeeperConnectionException
argument_list|(
literal|"Can't connect to ZooKeeper"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|zkw
operator|!=
literal|null
condition|)
block|{
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// can throw MasterNotRunningException
name|connection
operator|.
name|isMasterRunning
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getTableRegions
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|ZooKeeperWatcher
name|zookeeper
init|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
name|ZK_IDENTIFIER_PREFIX
operator|+
name|connection
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|ThrowableAbortable
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|regions
operator|=
operator|new
name|MetaTableLocator
argument_list|()
operator|.
name|getMetaRegions
argument_list|(
name|zookeeper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regions
operator|=
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|zookeeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|HTableDescriptor
index|[]
name|getTableDescriptorsByTableName
parameter_list|(
specifier|final
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|HTableDescriptor
index|[]
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|HTableDescriptor
index|[]
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|GetTableDescriptorsRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildGetTableDescriptorsRequest
argument_list|(
name|tableNames
argument_list|)
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|getHTableDescriptorArray
argument_list|(
name|master
operator|.
name|getTableDescriptors
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Get tableDescriptor    * @param tableName one table name    * @return HTD the HTableDescriptor or null if the table not exists    * @throws IOException if a remote or network exception occurs    */
specifier|private
name|HTableDescriptor
name|getTableDescriptorByTableName
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|HTableDescriptor
index|[]
name|htdl
init|=
name|getTableDescriptorsByTableName
argument_list|(
name|tableNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|htdl
operator|==
literal|null
operator|||
name|htdl
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|htdl
index|[
literal|0
index|]
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HTableDescriptor
index|[]
name|getTableDescriptors
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|names
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|getTableDescriptorsByTableName
argument_list|(
name|tableNames
argument_list|)
return|;
block|}
specifier|private
name|RollWALWriterResponse
name|rollWALWriterImpl
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
throws|,
name|FailedLogCloseException
block|{
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|this
operator|.
name|connection
operator|.
name|getAdmin
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|RollWALWriterRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildRollWALWriterRequest
argument_list|()
decl_stmt|;
comment|// TODO: There is no timeout on this controller. Set one!
name|HBaseRpcController
name|controller
init|=
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|admin
operator|.
name|rollWALWriter
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|handleRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Roll the log writer. I.e. when using a file system based write ahead log,    * start writing log messages to a new file.    *    * Note that when talking to a version 1.0+ HBase deployment, the rolling is asynchronous.    * This method will return as soon as the roll is requested and the return value will    * always be null. Additionally, the named region server may schedule store flushes at the    * request of the wal handling the roll request.    *    * When talking to a 0.98 or older HBase deployment, the rolling is synchronous and the    * return value may be either null or a list of encoded region names.    *    * @param serverName    *          The servername of the regionserver. A server name is made of host,    *          port and startcode. This is mandatory. Here is an example:    *<code> host187.example.com,60020,1289493121758</code>    * @return a set of {@link HRegionInfo#getEncodedName()} that would allow the wal to    *         clean up some underlying files. null if there's nothing to flush.    * @throws IOException if a remote or network exception occurs    * @throws FailedLogCloseException    * @deprecated use {@link #rollWALWriter(ServerName)}    */
annotation|@
name|Deprecated
specifier|public
specifier|synchronized
name|byte
index|[]
index|[]
name|rollHLogWriter
parameter_list|(
name|String
name|serverName
parameter_list|)
throws|throws
name|IOException
throws|,
name|FailedLogCloseException
block|{
name|ServerName
name|sn
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
specifier|final
name|RollWALWriterResponse
name|response
init|=
name|rollWALWriterImpl
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|int
name|regionCount
init|=
name|response
operator|.
name|getRegionToFlushCount
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|regionCount
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
index|[]
name|regionsToFlush
init|=
operator|new
name|byte
index|[
name|regionCount
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regionCount
condition|;
name|i
operator|++
control|)
block|{
name|regionsToFlush
index|[
name|i
index|]
operator|=
name|ProtobufUtil
operator|.
name|toBytes
argument_list|(
name|response
operator|.
name|getRegionToFlush
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|regionsToFlush
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|rollWALWriter
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|IOException
throws|,
name|FailedLogCloseException
block|{
name|rollWALWriterImpl
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getMasterCoprocessors
parameter_list|()
block|{
try|try
block|{
return|return
name|getClusterStatus
argument_list|()
operator|.
name|getMasterCoprocessors
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not getClusterStatus()"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CompactionState
name|getCompactionState
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getCompactionState
argument_list|(
name|tableName
argument_list|,
name|CompactType
operator|.
name|NORMAL
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompactionState
name|getCompactionStateForRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regionServerPair
init|=
name|getRegion
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionServerPair
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid region: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|regionServerPair
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoServerForRegionException
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
throw|;
block|}
name|ServerName
name|sn
init|=
name|regionServerPair
operator|.
name|getSecond
argument_list|()
decl_stmt|;
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|this
operator|.
name|connection
operator|.
name|getAdmin
argument_list|(
name|sn
argument_list|)
decl_stmt|;
comment|// TODO: There is no timeout on this controller. Set one!
name|HBaseRpcController
name|controller
init|=
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
decl_stmt|;
name|GetRegionInfoRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetRegionInfoRequest
argument_list|(
name|regionServerPair
operator|.
name|getFirst
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|GetRegionInfoResponse
name|response
decl_stmt|;
try|try
block|{
name|response
operator|=
name|admin
operator|.
name|getRegionInfo
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|handleRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|response
operator|.
name|getCompactionState
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|ProtobufUtil
operator|.
name|createCompactionState
argument_list|(
name|response
operator|.
name|getCompactionState
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|snapshot
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|SnapshotCreationException
throws|,
name|IllegalArgumentException
block|{
name|snapshot
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|SnapshotType
operator|.
name|FLUSH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|snapshot
parameter_list|(
specifier|final
name|byte
index|[]
name|snapshotName
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|SnapshotCreationException
throws|,
name|IllegalArgumentException
block|{
name|snapshot
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|snapshotName
argument_list|)
argument_list|,
name|tableName
argument_list|,
name|SnapshotType
operator|.
name|FLUSH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|snapshot
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
name|SnapshotType
name|type
parameter_list|)
throws|throws
name|IOException
throws|,
name|SnapshotCreationException
throws|,
name|IllegalArgumentException
block|{
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|snapshot
parameter_list|(
name|SnapshotDescription
name|snapshotDesc
parameter_list|)
throws|throws
name|IOException
throws|,
name|SnapshotCreationException
throws|,
name|IllegalArgumentException
block|{
comment|// actually take the snapshot
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|snapshot
init|=
name|ProtobufUtil
operator|.
name|createHBaseProtosSnapshotDesc
argument_list|(
name|snapshotDesc
argument_list|)
decl_stmt|;
name|SnapshotResponse
name|response
init|=
name|asyncSnapshot
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
specifier|final
name|IsSnapshotDoneRequest
name|request
init|=
name|IsSnapshotDoneRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSnapshot
argument_list|(
name|snapshot
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IsSnapshotDoneResponse
name|done
init|=
literal|null
decl_stmt|;
name|long
name|start
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|long
name|max
init|=
name|response
operator|.
name|getExpectedTimeout
argument_list|()
decl_stmt|;
name|long
name|maxPauseTime
init|=
name|max
operator|/
name|this
operator|.
name|numRetries
decl_stmt|;
name|int
name|tries
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting a max of "
operator|+
name|max
operator|+
literal|" ms for snapshot '"
operator|+
name|ClientSnapshotDescriptionUtils
operator|.
name|toString
argument_list|(
name|snapshot
argument_list|)
operator|+
literal|"'' to complete. (max "
operator|+
name|maxPauseTime
operator|+
literal|" ms per retry)"
argument_list|)
expr_stmt|;
while|while
condition|(
name|tries
operator|==
literal|0
operator|||
operator|(
operator|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|start
operator|)
operator|<
name|max
operator|&&
operator|!
name|done
operator|.
name|getDone
argument_list|()
operator|)
condition|)
block|{
try|try
block|{
comment|// sleep a backoff<= pauseTime amount
name|long
name|sleep
init|=
name|getPauseTime
argument_list|(
name|tries
operator|++
argument_list|)
decl_stmt|;
name|sleep
operator|=
name|sleep
operator|>
name|maxPauseTime
condition|?
name|maxPauseTime
else|:
name|sleep
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"(#"
operator|+
name|tries
operator|+
literal|") Sleeping: "
operator|+
name|sleep
operator|+
literal|"ms while waiting for snapshot completion."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|(
literal|"Interrupted"
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting current status of snapshot from master..."
argument_list|)
expr_stmt|;
name|done
operator|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|IsSnapshotDoneResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|IsSnapshotDoneResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|isSnapshotDone
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|done
operator|.
name|getDone
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
literal|"Snapshot '"
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
operator|+
literal|"' wasn't completed in expectedTime:"
operator|+
name|max
operator|+
literal|" ms"
argument_list|,
name|snapshotDesc
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|takeSnapshotAsync
parameter_list|(
name|SnapshotDescription
name|snapshotDesc
parameter_list|)
throws|throws
name|IOException
throws|,
name|SnapshotCreationException
block|{
name|asyncSnapshot
argument_list|(
name|ProtobufUtil
operator|.
name|createHBaseProtosSnapshotDesc
argument_list|(
name|snapshotDesc
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SnapshotResponse
name|asyncSnapshot
parameter_list|(
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientSnapshotDescriptionUtils
operator|.
name|assertSnapshotRequestIsValid
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
specifier|final
name|SnapshotRequest
name|request
init|=
name|SnapshotRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSnapshot
argument_list|(
name|snapshot
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// run the snapshot on the master
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|SnapshotResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|SnapshotResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|snapshot
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSnapshotFinished
parameter_list|(
specifier|final
name|SnapshotDescription
name|snapshotDesc
parameter_list|)
throws|throws
name|IOException
throws|,
name|HBaseSnapshotException
throws|,
name|UnknownSnapshotException
block|{
specifier|final
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|snapshot
init|=
name|ProtobufUtil
operator|.
name|createHBaseProtosSnapshotDesc
argument_list|(
name|snapshotDesc
argument_list|)
decl_stmt|;
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|IsSnapshotDoneResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|IsSnapshotDoneResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|isSnapshotDone
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|IsSnapshotDoneRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSnapshot
argument_list|(
name|snapshot
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|getDone
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|restoreSnapshot
parameter_list|(
specifier|final
name|byte
index|[]
name|snapshotName
parameter_list|)
throws|throws
name|IOException
throws|,
name|RestoreSnapshotException
block|{
name|restoreSnapshot
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|snapshotName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|restoreSnapshot
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
throws|,
name|RestoreSnapshotException
block|{
name|boolean
name|takeFailSafeSnapshot
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|SNAPSHOT_RESTORE_TAKE_FAILSAFE_SNAPSHOT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_SNAPSHOT_RESTORE_TAKE_FAILSAFE_SNAPSHOT
argument_list|)
decl_stmt|;
name|restoreSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|takeFailSafeSnapshot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|restoreSnapshot
parameter_list|(
specifier|final
name|byte
index|[]
name|snapshotName
parameter_list|,
specifier|final
name|boolean
name|takeFailSafeSnapshot
parameter_list|)
throws|throws
name|IOException
throws|,
name|RestoreSnapshotException
block|{
name|restoreSnapshot
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|snapshotName
argument_list|)
argument_list|,
name|takeFailSafeSnapshot
argument_list|)
expr_stmt|;
block|}
comment|/*    * Check whether the snapshot exists and contains disabled table    *    * @param snapshotName name of the snapshot to restore    * @throws IOException if a remote or network exception occurs    * @throws RestoreSnapshotException if no valid snapshot is found    */
specifier|private
name|TableName
name|getTableNameBeforeRestoreSnapshot
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
throws|,
name|RestoreSnapshotException
block|{
name|TableName
name|tableName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SnapshotDescription
name|snapshotInfo
range|:
name|listSnapshots
argument_list|()
control|)
block|{
if|if
condition|(
name|snapshotInfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|snapshotName
argument_list|)
condition|)
block|{
name|tableName
operator|=
name|snapshotInfo
operator|.
name|getTableName
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RestoreSnapshotException
argument_list|(
literal|"Unable to find the table name for snapshot="
operator|+
name|snapshotName
argument_list|)
throw|;
block|}
return|return
name|tableName
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|restoreSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|boolean
name|takeFailSafeSnapshot
parameter_list|)
throws|throws
name|IOException
throws|,
name|RestoreSnapshotException
block|{
name|restoreSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|takeFailSafeSnapshot
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|restoreSnapshot
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|,
specifier|final
name|boolean
name|takeFailSafeSnapshot
parameter_list|,
specifier|final
name|boolean
name|restoreAcl
parameter_list|)
throws|throws
name|IOException
throws|,
name|RestoreSnapshotException
block|{
name|TableName
name|tableName
init|=
name|getTableNameBeforeRestoreSnapshot
argument_list|(
name|snapshotName
argument_list|)
decl_stmt|;
comment|// The table does not exists, switch to clone.
if|if
condition|(
operator|!
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|cloneSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|restoreAcl
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Check if the table is disabled
if|if
condition|(
operator|!
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableNotDisabledException
argument_list|(
name|tableName
argument_list|)
throw|;
block|}
comment|// Take a snapshot of the current state
name|String
name|failSafeSnapshotSnapshotName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|takeFailSafeSnapshot
condition|)
block|{
name|failSafeSnapshotSnapshotName
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.snapshot.restore.failsafe.name"
argument_list|,
literal|"hbase-failsafe-{snapshot.name}-{restore.timestamp}"
argument_list|)
expr_stmt|;
name|failSafeSnapshotSnapshotName
operator|=
name|failSafeSnapshotSnapshotName
operator|.
name|replace
argument_list|(
literal|"{snapshot.name}"
argument_list|,
name|snapshotName
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{table.name}"
argument_list|,
name|tableName
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
name|TableName
operator|.
name|NAMESPACE_DELIM
argument_list|,
literal|'.'
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"{restore.timestamp}"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Taking restore-failsafe snapshot: "
operator|+
name|failSafeSnapshotSnapshotName
argument_list|)
expr_stmt|;
name|snapshot
argument_list|(
name|failSafeSnapshotSnapshotName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Restore snapshot
name|get
argument_list|(
name|internalRestoreSnapshotAsync
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|restoreAcl
argument_list|)
argument_list|,
name|syncWaitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Something went wrong during the restore...
comment|// if the pre-restore snapshot is available try to rollback
if|if
condition|(
name|takeFailSafeSnapshot
condition|)
block|{
try|try
block|{
name|get
argument_list|(
name|internalRestoreSnapshotAsync
argument_list|(
name|failSafeSnapshotSnapshotName
argument_list|,
name|tableName
argument_list|,
name|restoreAcl
argument_list|)
argument_list|,
name|syncWaitTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
literal|"Restore snapshot="
operator|+
name|snapshotName
operator|+
literal|" failed. Rollback to snapshot="
operator|+
name|failSafeSnapshotSnapshotName
operator|+
literal|" succeeded."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RestoreSnapshotException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Failed to restore and rollback to snapshot="
operator|+
name|failSafeSnapshotSnapshotName
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RestoreSnapshotException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RestoreSnapshotException
argument_list|(
literal|"Failed to restore snapshot="
operator|+
name|snapshotName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// If the restore is succeeded, delete the pre-restore snapshot
if|if
condition|(
name|takeFailSafeSnapshot
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting restore-failsafe snapshot: "
operator|+
name|failSafeSnapshotSnapshotName
argument_list|)
expr_stmt|;
name|deleteSnapshot
argument_list|(
name|failSafeSnapshotSnapshotName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to remove the failsafe snapshot: "
operator|+
name|failSafeSnapshotSnapshotName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|restoreSnapshotAsync
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
throws|,
name|RestoreSnapshotException
block|{
name|TableName
name|tableName
init|=
name|getTableNameBeforeRestoreSnapshot
argument_list|(
name|snapshotName
argument_list|)
decl_stmt|;
comment|// The table does not exists, switch to clone.
if|if
condition|(
operator|!
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
return|return
name|cloneSnapshotAsync
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|// Check if the table is disabled
if|if
condition|(
operator|!
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableNotDisabledException
argument_list|(
name|tableName
argument_list|)
throw|;
block|}
return|return
name|internalRestoreSnapshotAsync
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cloneSnapshot
parameter_list|(
specifier|final
name|byte
index|[]
name|snapshotName
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|TableExistsException
throws|,
name|RestoreSnapshotException
block|{
name|cloneSnapshot
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|snapshotName
argument_list|)
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cloneSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|boolean
name|restoreAcl
parameter_list|)
throws|throws
name|IOException
throws|,
name|TableExistsException
throws|,
name|RestoreSnapshotException
block|{
if|if
condition|(
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableExistsException
argument_list|(
name|tableName
argument_list|)
throw|;
block|}
name|get
argument_list|(
name|internalRestoreSnapshotAsync
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|restoreAcl
argument_list|)
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cloneSnapshot
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|TableExistsException
throws|,
name|RestoreSnapshotException
block|{
name|cloneSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|Void
argument_list|>
name|cloneSnapshotAsync
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|TableExistsException
block|{
if|if
condition|(
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableExistsException
argument_list|(
name|tableName
argument_list|)
throw|;
block|}
return|return
name|internalRestoreSnapshotAsync
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|execProcedureWithRet
parameter_list|(
name|String
name|signature
parameter_list|,
name|String
name|instance
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
throws|throws
name|IOException
block|{
name|ProcedureDescription
name|desc
init|=
name|ProtobufUtil
operator|.
name|buildProcedureDescription
argument_list|(
name|signature
argument_list|,
name|instance
argument_list|,
name|props
argument_list|)
decl_stmt|;
specifier|final
name|ExecProcedureRequest
name|request
init|=
name|ExecProcedureRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcedure
argument_list|(
name|desc
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// run the procedure on the master
name|ExecProcedureResponse
name|response
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|ExecProcedureResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ExecProcedureResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|execProcedureWithRet
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|hasReturnData
argument_list|()
condition|?
name|response
operator|.
name|getReturnData
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execProcedure
parameter_list|(
name|String
name|signature
parameter_list|,
name|String
name|instance
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
throws|throws
name|IOException
block|{
name|ProcedureDescription
name|desc
init|=
name|ProtobufUtil
operator|.
name|buildProcedureDescription
argument_list|(
name|signature
argument_list|,
name|instance
argument_list|,
name|props
argument_list|)
decl_stmt|;
specifier|final
name|ExecProcedureRequest
name|request
init|=
name|ExecProcedureRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcedure
argument_list|(
name|desc
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// run the procedure on the master
name|ExecProcedureResponse
name|response
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|ExecProcedureResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ExecProcedureResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|execProcedure
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|long
name|max
init|=
name|response
operator|.
name|getExpectedTimeout
argument_list|()
decl_stmt|;
name|long
name|maxPauseTime
init|=
name|max
operator|/
name|this
operator|.
name|numRetries
decl_stmt|;
name|int
name|tries
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting a max of "
operator|+
name|max
operator|+
literal|" ms for procedure '"
operator|+
name|signature
operator|+
literal|" : "
operator|+
name|instance
operator|+
literal|"'' to complete. (max "
operator|+
name|maxPauseTime
operator|+
literal|" ms per retry)"
argument_list|)
expr_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|tries
operator|==
literal|0
operator|||
operator|(
operator|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|start
operator|)
operator|<
name|max
operator|&&
operator|!
name|done
operator|)
condition|)
block|{
try|try
block|{
comment|// sleep a backoff<= pauseTime amount
name|long
name|sleep
init|=
name|getPauseTime
argument_list|(
name|tries
operator|++
argument_list|)
decl_stmt|;
name|sleep
operator|=
name|sleep
operator|>
name|maxPauseTime
condition|?
name|maxPauseTime
else|:
name|sleep
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"(#"
operator|+
name|tries
operator|+
literal|") Sleeping: "
operator|+
name|sleep
operator|+
literal|"ms while waiting for procedure completion."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|(
literal|"Interrupted"
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting current status of procedure from master..."
argument_list|)
expr_stmt|;
name|done
operator|=
name|isProcedureFinished
argument_list|(
name|signature
argument_list|,
name|instance
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|done
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Procedure '"
operator|+
name|signature
operator|+
literal|" : "
operator|+
name|instance
operator|+
literal|"' wasn't completed in expectedTime:"
operator|+
name|max
operator|+
literal|" ms"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isProcedureFinished
parameter_list|(
name|String
name|signature
parameter_list|,
name|String
name|instance
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
throws|throws
name|IOException
block|{
name|ProcedureDescription
name|desc
init|=
name|ProtobufUtil
operator|.
name|buildProcedureDescription
argument_list|(
name|signature
argument_list|,
name|instance
argument_list|,
name|props
argument_list|)
decl_stmt|;
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|IsProcedureDoneResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|IsProcedureDoneResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|isProcedureDone
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|IsProcedureDoneRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcedure
argument_list|(
name|desc
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|getDone
argument_list|()
return|;
block|}
comment|/**    * Execute Restore/Clone snapshot and wait for the server to complete (blocking).    * To check if the cloned table exists, use {@link #isTableAvailable} -- it is not safe to    * create an HTable instance to this table before it is available.    * @param snapshotName snapshot to restore    * @param tableName table name to restore the snapshot on    * @throws IOException if a remote or network exception occurs    * @throws RestoreSnapshotException if snapshot failed to be restored    * @throws IllegalArgumentException if the restore request is formatted incorrectly    */
specifier|private
name|Future
argument_list|<
name|Void
argument_list|>
name|internalRestoreSnapshotAsync
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|boolean
name|restoreAcl
parameter_list|)
throws|throws
name|IOException
throws|,
name|RestoreSnapshotException
block|{
specifier|final
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|snapshot
init|=
name|SnapshotProtos
operator|.
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|snapshotName
argument_list|)
operator|.
name|setTable
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// actually restore the snapshot
name|ClientSnapshotDescriptionUtils
operator|.
name|assertSnapshotRequestIsValid
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|RestoreSnapshotResponse
name|response
init|=
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|RestoreSnapshotResponse
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RestoreSnapshotResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|RestoreSnapshotRequest
name|request
init|=
name|RestoreSnapshotRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSnapshot
argument_list|(
name|snapshot
argument_list|)
operator|.
name|setNonceGroup
argument_list|(
name|ng
operator|.
name|getNonceGroup
argument_list|()
argument_list|)
operator|.
name|setNonce
argument_list|(
name|ng
operator|.
name|newNonce
argument_list|()
argument_list|)
operator|.
name|setRestoreACL
argument_list|(
name|restoreAcl
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|master
operator|.
name|restoreSnapshot
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|RestoreSnapshotFuture
argument_list|(
name|this
argument_list|,
name|snapshot
argument_list|,
name|tableName
argument_list|,
name|response
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|RestoreSnapshotFuture
extends|extends
name|TableFuture
argument_list|<
name|Void
argument_list|>
block|{
specifier|public
name|RestoreSnapshotFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|RestoreSnapshotResponse
name|response
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
operator|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|hasProcId
argument_list|()
operator|)
condition|?
name|response
operator|.
name|getProcId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
operator|!
name|response
operator|.
name|hasProcId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Client could not call old version of Server"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|RestoreSnapshotFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Long
name|procId
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
name|procId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOperationType
parameter_list|()
block|{
return|return
literal|"MODIFY"
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|listSnapshots
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|SnapshotProtos
operator|.
name|SnapshotDescription
argument_list|>
name|snapshotsList
init|=
name|master
operator|.
name|getCompletedSnapshots
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|GetCompletedSnapshotsRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|getSnapshotsList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|snapshotsList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|snapshot
range|:
name|snapshotsList
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|createSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|listSnapshots
parameter_list|(
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listSnapshots
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|listSnapshots
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|matched
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshots
init|=
name|listSnapshots
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshotDescription
name|snapshot
range|:
name|snapshots
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|matcher
argument_list|(
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|matched
operator|.
name|add
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|matched
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|listTableSnapshots
parameter_list|(
name|String
name|tableNameRegex
parameter_list|,
name|String
name|snapshotNameRegex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listTableSnapshots
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|tableNameRegex
argument_list|)
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
name|snapshotNameRegex
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|listTableSnapshots
parameter_list|(
name|Pattern
name|tableNamePattern
parameter_list|,
name|Pattern
name|snapshotNamePattern
parameter_list|)
throws|throws
name|IOException
block|{
name|TableName
index|[]
name|tableNames
init|=
name|listTableNames
argument_list|(
name|tableNamePattern
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|tableSnapshots
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshots
init|=
name|listSnapshots
argument_list|(
name|snapshotNamePattern
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TableName
argument_list|>
name|listOfTableNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|tableNames
argument_list|)
decl_stmt|;
for|for
control|(
name|SnapshotDescription
name|snapshot
range|:
name|snapshots
control|)
block|{
if|if
condition|(
name|listOfTableNames
operator|.
name|contains
argument_list|(
name|snapshot
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|tableSnapshots
operator|.
name|add
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableSnapshots
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteSnapshot
parameter_list|(
specifier|final
name|byte
index|[]
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteSnapshot
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|snapshotName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteSnapshot
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// make sure the snapshot is possibly valid
name|TableName
operator|.
name|isLegalFullyQualifiedTableName
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|snapshotName
argument_list|)
argument_list|)
expr_stmt|;
comment|// do the delete
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|master
operator|.
name|deleteSnapshot
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|DeleteSnapshotRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSnapshot
argument_list|(
name|SnapshotProtos
operator|.
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|snapshotName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteSnapshots
parameter_list|(
specifier|final
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteSnapshots
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteSnapshots
parameter_list|(
specifier|final
name|Pattern
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshots
init|=
name|listSnapshots
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|SnapshotDescription
name|snapshot
range|:
name|snapshots
control|)
block|{
try|try
block|{
name|internalDeleteSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to delete snapshot "
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
operator|+
literal|" for table "
operator|+
name|snapshot
operator|.
name|getTableNameAsString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|internalDeleteSnapshot
parameter_list|(
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|master
operator|.
name|deleteSnapshot
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|DeleteSnapshotRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSnapshot
argument_list|(
name|ProtobufUtil
operator|.
name|createHBaseProtosSnapshotDesc
argument_list|(
name|snapshot
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteTableSnapshots
parameter_list|(
name|String
name|tableNameRegex
parameter_list|,
name|String
name|snapshotNameRegex
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteTableSnapshots
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|tableNameRegex
argument_list|)
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
name|snapshotNameRegex
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteTableSnapshots
parameter_list|(
name|Pattern
name|tableNamePattern
parameter_list|,
name|Pattern
name|snapshotNamePattern
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshots
init|=
name|listTableSnapshots
argument_list|(
name|tableNamePattern
argument_list|,
name|snapshotNamePattern
argument_list|)
decl_stmt|;
for|for
control|(
name|SnapshotDescription
name|snapshot
range|:
name|snapshots
control|)
block|{
try|try
block|{
name|internalDeleteSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Successfully deleted snapshot: "
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete snapshot: "
operator|+
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setQuota
parameter_list|(
specifier|final
name|QuotaSettings
name|quota
parameter_list|)
throws|throws
name|IOException
block|{
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|master
operator|.
name|setQuota
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|QuotaSettings
operator|.
name|buildSetQuotaRequestProto
argument_list|(
name|quota
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|QuotaRetriever
name|getQuotaRetriever
parameter_list|(
specifier|final
name|QuotaFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|conf
argument_list|,
name|filter
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|C
extends|extends
name|RetryingCallable
argument_list|<
name|V
argument_list|>
operator|&
name|Closeable
parameter_list|,
name|V
parameter_list|>
name|V
name|executeCallable
parameter_list|(
name|C
name|callable
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
name|callable
argument_list|,
name|rpcCallerFactory
argument_list|,
name|operationTimeout
argument_list|,
name|rpcTimeout
argument_list|)
return|;
block|}
specifier|static
specifier|private
parameter_list|<
name|C
extends|extends
name|RetryingCallable
argument_list|<
name|V
argument_list|>
operator|&
name|Closeable
parameter_list|,
name|V
parameter_list|>
name|V
name|executeCallable
parameter_list|(
name|C
name|callable
parameter_list|,
name|RpcRetryingCallerFactory
name|rpcCallerFactory
parameter_list|,
name|int
name|operationTimeout
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
throws|throws
name|IOException
block|{
name|RpcRetryingCaller
argument_list|<
name|V
argument_list|>
name|caller
init|=
name|rpcCallerFactory
operator|.
name|newCaller
argument_list|(
name|rpcTimeout
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|caller
operator|.
name|callWithRetries
argument_list|(
name|callable
argument_list|,
name|operationTimeout
argument_list|)
return|;
block|}
finally|finally
block|{
name|callable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// Coprocessor Endpoint against the Master.
specifier|public
name|CoprocessorRpcChannel
name|coprocessorService
parameter_list|()
block|{
return|return
operator|new
name|SyncCoprocessorRpcChannel
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Message
name|callExecService
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|Descriptors
operator|.
name|MethodDescriptor
name|method
parameter_list|,
specifier|final
name|Message
name|request
parameter_list|,
specifier|final
name|Message
name|responsePrototype
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Call: "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|", "
operator|+
name|request
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Try-with-resources so close gets called when we are done.
try|try
init|(
name|MasterCallable
argument_list|<
name|CoprocessorServiceResponse
argument_list|>
name|callable
init|=
operator|new
name|MasterCallable
argument_list|<
name|CoprocessorServiceResponse
argument_list|>
argument_list|(
name|connection
argument_list|,
name|connection
operator|.
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|CoprocessorServiceResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|CoprocessorServiceRequest
name|csr
init|=
name|CoprocessorRpcUtils
operator|.
name|getCoprocessorServiceRequest
argument_list|(
name|method
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|master
operator|.
name|execMasterService
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|csr
argument_list|)
return|;
block|}
block|}
init|;
init|)
block|{
comment|// TODO: Are we retrying here? Does not seem so. We should use RetryingRpcCaller
name|callable
operator|.
name|prepare
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|operationTimeout
init|=
name|connection
operator|.
name|getConnectionConfiguration
argument_list|()
operator|.
name|getOperationTimeout
argument_list|()
decl_stmt|;
name|CoprocessorServiceResponse
name|result
init|=
name|callable
operator|.
name|call
argument_list|(
name|operationTimeout
argument_list|)
decl_stmt|;
return|return
name|CoprocessorRpcUtils
operator|.
name|getResponse
argument_list|(
name|result
argument_list|,
name|responsePrototype
argument_list|)
return|;
block|}
block|}
block|}
return|;
block|}
comment|/**    * Simple {@link Abortable}, throwing RuntimeException on abort.    */
specifier|private
specifier|static
class|class
name|ThrowableAbortable
implements|implements
name|Abortable
block|{
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|why
argument_list|,
name|e
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CoprocessorRpcChannel
name|coprocessorService
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
operator|new
name|SyncCoprocessorRpcChannel
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Message
name|callExecService
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|Descriptors
operator|.
name|MethodDescriptor
name|method
parameter_list|,
name|Message
name|request
parameter_list|,
name|Message
name|responsePrototype
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Call: "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|", "
operator|+
name|request
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CoprocessorServiceRequest
name|csr
init|=
name|CoprocessorRpcUtils
operator|.
name|getCoprocessorServiceRequest
argument_list|(
name|method
argument_list|,
name|request
argument_list|)
decl_stmt|;
comment|// TODO: Are we retrying here? Does not seem so. We should use RetryingRpcCaller
comment|// TODO: Make this same as RegionCoprocessorRpcChannel and MasterCoprocessorRpcChannel. They
comment|// are all different though should do same thing; e.g. RpcChannel setup.
name|ClientProtos
operator|.
name|ClientService
operator|.
name|BlockingInterface
name|stub
init|=
name|connection
operator|.
name|getClient
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
name|CoprocessorServiceResponse
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|stub
operator|.
name|execRegionServerService
argument_list|(
name|connection
operator|.
name|getRpcControllerFactory
argument_list|()
operator|.
name|newController
argument_list|()
argument_list|,
name|csr
argument_list|)
expr_stmt|;
return|return
name|CoprocessorRpcUtils
operator|.
name|getResponse
argument_list|(
name|result
argument_list|,
name|responsePrototype
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|handleRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateConfiguration
parameter_list|(
specifier|final
name|ServerName
name|server
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|this
operator|.
name|connection
operator|.
name|getAdmin
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|callable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|admin
operator|.
name|updateConfiguration
argument_list|(
literal|null
argument_list|,
name|UpdateConfigurationRequest
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|ProtobufUtil
operator|.
name|call
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|ServerName
name|server
range|:
name|this
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServers
argument_list|()
control|)
block|{
name|updateConfiguration
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|updateConfiguration
argument_list|(
name|this
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|this
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getBackupMasters
argument_list|()
control|)
block|{
name|updateConfiguration
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMasterInfoPort
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO: Fix!  Reaching into internal implementation!!!!
name|ConnectionImplementation
name|connection
init|=
operator|(
name|ConnectionImplementation
operator|)
name|this
operator|.
name|connection
decl_stmt|;
name|ZooKeeperKeepAliveConnection
name|zkw
init|=
name|connection
operator|.
name|getKeepAliveZooKeeperWatcher
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|MasterAddressTracker
operator|.
name|getMasterInfoPort
argument_list|(
name|zkw
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to get master info port from MasterAddressTracker"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ServerName
name|getMasterAddress
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO: Fix!  Reaching into internal implementation!!!!
name|ConnectionImplementation
name|connection
init|=
operator|(
name|ConnectionImplementation
operator|)
name|this
operator|.
name|connection
decl_stmt|;
name|ZooKeeperKeepAliveConnection
name|zkw
init|=
name|connection
operator|.
name|getKeepAliveZooKeeperWatcher
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|MasterAddressTracker
operator|.
name|getMasterAddress
argument_list|(
name|zkw
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to get master server name from MasterAddressTracker"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastMajorCompactionTimestamp
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Long
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Long
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|MajorCompactionTimestampRequest
name|req
init|=
name|MajorCompactionTimestampRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|master
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
operator|.
name|getCompactionTimestamp
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastMajorCompactionTimestampForRegion
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Long
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Long
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|MajorCompactionTimestampForRegionRequest
name|req
init|=
name|MajorCompactionTimestampForRegionRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRegion
argument_list|(
name|RequestConverter
operator|.
name|buildRegionSpecifier
argument_list|(
name|RegionSpecifierType
operator|.
name|REGION_NAME
argument_list|,
name|regionName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|master
operator|.
name|getLastMajorCompactionTimestampForRegion
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
operator|.
name|getCompactionTimestamp
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|compact
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|,
name|CompactType
name|compactType
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|compact
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|,
literal|false
argument_list|,
name|compactType
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|compact
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
name|CompactType
name|compactType
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|compact
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|compactType
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|majorCompact
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|,
name|CompactType
name|compactType
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|compact
argument_list|(
name|tableName
argument_list|,
name|columnFamily
argument_list|,
literal|true
argument_list|,
name|compactType
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|void
name|majorCompact
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
name|CompactType
name|compactType
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|compact
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|compactType
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|public
name|CompactionState
name|getCompactionState
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
name|CompactType
name|compactType
parameter_list|)
throws|throws
name|IOException
block|{
name|AdminProtos
operator|.
name|GetRegionInfoResponse
operator|.
name|CompactionState
name|state
init|=
name|AdminProtos
operator|.
name|GetRegionInfoResponse
operator|.
name|CompactionState
operator|.
name|NONE
decl_stmt|;
name|checkTableExists
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// TODO: There is no timeout on this controller. Set one!
specifier|final
name|HBaseRpcController
name|rpcController
init|=
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|compactType
condition|)
block|{
case|case
name|MOB
case|:
specifier|final
name|AdminProtos
operator|.
name|AdminService
operator|.
name|BlockingInterface
name|masterAdmin
init|=
name|this
operator|.
name|connection
operator|.
name|getAdmin
argument_list|(
name|getMasterAddress
argument_list|()
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|AdminProtos
operator|.
name|GetRegionInfoResponse
operator|.
name|CompactionState
argument_list|>
name|callable
init|=
operator|new
name|Callable
argument_list|<
name|AdminProtos
operator|.
name|GetRegionInfoResponse
operator|.
name|CompactionState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AdminProtos
operator|.
name|GetRegionInfoResponse
operator|.
name|CompactionState
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|HRegionInfo
name|info
init|=
name|getMobRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|GetRegionInfoRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetRegionInfoRequest
argument_list|(
name|info
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|GetRegionInfoResponse
name|response
init|=
name|masterAdmin
operator|.
name|getRegionInfo
argument_list|(
name|rpcController
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getCompactionState
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|state
operator|=
name|ProtobufUtil
operator|.
name|call
argument_list|(
name|callable
argument_list|)
expr_stmt|;
break|break;
case|case
name|NORMAL
case|:
default|default:
name|ZooKeeperWatcher
name|zookeeper
init|=
literal|null
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|pairs
decl_stmt|;
if|if
condition|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|zookeeper
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
name|ZK_IDENTIFIER_PREFIX
operator|+
name|connection
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|ThrowableAbortable
argument_list|()
argument_list|)
expr_stmt|;
name|pairs
operator|=
operator|new
name|MetaTableLocator
argument_list|()
operator|.
name|getMetaRegionsAndLocations
argument_list|(
name|zookeeper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pairs
operator|=
name|MetaTableAccessor
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
range|:
name|pairs
control|)
block|{
if|if
condition|(
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|isOffline
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|pair
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
specifier|final
name|ServerName
name|sn
init|=
name|pair
operator|.
name|getSecond
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|regionName
init|=
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|snAdmin
init|=
name|this
operator|.
name|connection
operator|.
name|getAdmin
argument_list|(
name|sn
argument_list|)
decl_stmt|;
try|try
block|{
name|Callable
argument_list|<
name|GetRegionInfoResponse
argument_list|>
name|regionInfoCallable
init|=
operator|new
name|Callable
argument_list|<
name|GetRegionInfoResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|GetRegionInfoResponse
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|GetRegionInfoRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetRegionInfoRequest
argument_list|(
name|regionName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|snAdmin
operator|.
name|getRegionInfo
argument_list|(
name|rpcController
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|GetRegionInfoResponse
name|response
init|=
name|ProtobufUtil
operator|.
name|call
argument_list|(
name|regionInfoCallable
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|response
operator|.
name|getCompactionState
argument_list|()
condition|)
block|{
case|case
name|MAJOR_AND_MINOR
case|:
return|return
name|CompactionState
operator|.
name|MAJOR_AND_MINOR
return|;
case|case
name|MAJOR
case|:
if|if
condition|(
name|state
operator|==
name|AdminProtos
operator|.
name|GetRegionInfoResponse
operator|.
name|CompactionState
operator|.
name|MINOR
condition|)
block|{
return|return
name|CompactionState
operator|.
name|MAJOR_AND_MINOR
return|;
block|}
name|state
operator|=
name|AdminProtos
operator|.
name|GetRegionInfoResponse
operator|.
name|CompactionState
operator|.
name|MAJOR
expr_stmt|;
break|break;
case|case
name|MINOR
case|:
if|if
condition|(
name|state
operator|==
name|AdminProtos
operator|.
name|GetRegionInfoResponse
operator|.
name|CompactionState
operator|.
name|MAJOR
condition|)
block|{
return|return
name|CompactionState
operator|.
name|MAJOR_AND_MINOR
return|;
block|}
name|state
operator|=
name|AdminProtos
operator|.
name|GetRegionInfoResponse
operator|.
name|CompactionState
operator|.
name|MINOR
expr_stmt|;
break|break;
case|case
name|NONE
case|:
default|default:
comment|// nothing, continue
block|}
block|}
catch|catch
parameter_list|(
name|NotServingRegionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to get compaction state of "
operator|+
name|pair
operator|.
name|getFirst
argument_list|()
operator|+
literal|": "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
name|NotServingRegionException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to get compaction state of "
operator|+
name|pair
operator|.
name|getFirst
argument_list|()
operator|+
literal|": "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|zookeeper
operator|!=
literal|null
condition|)
block|{
name|zookeeper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
return|return
name|ProtobufUtil
operator|.
name|createCompactionState
argument_list|(
name|state
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Future that waits on a procedure result.    * Returned by the async version of the Admin calls,    * and used internally by the sync calls to wait on the result of the procedure.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|protected
specifier|static
class|class
name|ProcedureFuture
parameter_list|<
name|V
parameter_list|>
implements|implements
name|Future
argument_list|<
name|V
argument_list|>
block|{
specifier|private
name|ExecutionException
name|exception
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|procResultFound
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|done
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|cancelled
init|=
literal|false
decl_stmt|;
specifier|private
name|V
name|result
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|HBaseAdmin
name|admin
decl_stmt|;
specifier|private
specifier|final
name|Long
name|procId
decl_stmt|;
specifier|public
name|ProcedureFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|Long
name|procId
parameter_list|)
block|{
name|this
operator|.
name|admin
operator|=
name|admin
expr_stmt|;
name|this
operator|.
name|procId
operator|=
name|procId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
name|AbortProcedureRequest
name|abortProcRequest
init|=
name|AbortProcedureRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|setMayInterruptIfRunning
argument_list|(
name|mayInterruptIfRunning
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|cancelled
operator|=
name|abortProcedureResult
argument_list|(
name|abortProcRequest
argument_list|)
operator|.
name|getIsProcedureAborted
argument_list|()
expr_stmt|;
if|if
condition|(
name|cancelled
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Cancell thrown exception for some reason. At this time, we are not sure whether
comment|// the cancell succeeds or fails. We assume that it is failed, but print out a warning
comment|// for debugging purpose.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cancelling the procedure with procId="
operator|+
name|procId
operator|+
literal|" throws exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|cancelled
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|cancelled
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|cancelled
return|;
block|}
specifier|protected
name|AbortProcedureResponse
name|abortProcedureResult
parameter_list|(
specifier|final
name|AbortProcedureRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|admin
operator|.
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|AbortProcedureResponse
argument_list|>
argument_list|(
name|admin
operator|.
name|getConnection
argument_list|()
argument_list|,
name|admin
operator|.
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|AbortProcedureResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|abortProcedure
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
comment|// TODO: should we ever spin forever?
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|long
name|deadlineTs
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|+
name|unit
operator|.
name|toMillis
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
try|try
block|{
try|try
block|{
comment|// if the master support procedures, try to wait the result
if|if
condition|(
name|procId
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|waitProcedureResult
argument_list|(
name|procId
argument_list|,
name|deadlineTs
argument_list|)
expr_stmt|;
block|}
comment|// if we don't have a proc result, try the compatibility wait
if|if
condition|(
operator|!
name|procResultFound
condition|)
block|{
name|result
operator|=
name|waitOperationResult
argument_list|(
name|deadlineTs
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|postOperationResult
argument_list|(
name|result
argument_list|,
name|deadlineTs
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|result
operator|=
name|postOperationFailure
argument_list|(
name|e
argument_list|,
name|deadlineTs
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
operator|new
name|ExecutionException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|done
return|;
block|}
specifier|protected
name|HBaseAdmin
name|getAdmin
parameter_list|()
block|{
return|return
name|admin
return|;
block|}
specifier|private
name|V
name|waitProcedureResult
parameter_list|(
name|long
name|procId
parameter_list|,
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GetProcedureResultRequest
name|request
init|=
name|GetProcedureResultRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|tries
init|=
literal|0
decl_stmt|;
name|IOException
name|serviceEx
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|<
name|deadlineTs
condition|)
block|{
name|GetProcedureResultResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Try to fetch the result
name|response
operator|=
name|getProcedureResult
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|serviceEx
operator|=
name|unwrapException
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// the master may be down
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to get the procedure result procId="
operator|+
name|procId
argument_list|,
name|serviceEx
argument_list|)
expr_stmt|;
comment|// Not much to do, if we have a DoNotRetryIOException
if|if
condition|(
name|serviceEx
operator|instanceof
name|DoNotRetryIOException
condition|)
block|{
comment|// TODO: looks like there is no way to unwrap this exception and get the proper
comment|// UnsupportedOperationException aside from looking at the message.
comment|// anyway, if we fail here we just failover to the compatibility side
comment|// and that is always a valid solution.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Proc-v2 is unsupported on this master: "
operator|+
name|serviceEx
operator|.
name|getMessage
argument_list|()
argument_list|,
name|serviceEx
argument_list|)
expr_stmt|;
name|procResultFound
operator|=
literal|false
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|// If the procedure is no longer running, we should have a result
if|if
condition|(
name|response
operator|!=
literal|null
operator|&&
name|response
operator|.
name|getState
argument_list|()
operator|!=
name|GetProcedureResultResponse
operator|.
name|State
operator|.
name|RUNNING
condition|)
block|{
name|procResultFound
operator|=
name|response
operator|.
name|getState
argument_list|()
operator|!=
name|GetProcedureResultResponse
operator|.
name|State
operator|.
name|NOT_FOUND
expr_stmt|;
return|return
name|convertResult
argument_list|(
name|response
argument_list|)
return|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|getAdmin
argument_list|()
operator|.
name|getPauseTime
argument_list|(
name|tries
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedException
argument_list|(
literal|"Interrupted while waiting for the result of proc "
operator|+
name|procId
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|serviceEx
operator|!=
literal|null
condition|)
block|{
throw|throw
name|serviceEx
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"The procedure "
operator|+
name|procId
operator|+
literal|" is still running"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|IOException
name|unwrapException
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
return|return
operator|(
operator|(
name|RemoteException
operator|)
name|e
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
return|;
block|}
return|return
name|e
return|;
block|}
specifier|protected
name|GetProcedureResultResponse
name|getProcedureResult
parameter_list|(
specifier|final
name|GetProcedureResultRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|admin
operator|.
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|GetProcedureResultResponse
argument_list|>
argument_list|(
name|admin
operator|.
name|getConnection
argument_list|()
argument_list|,
name|admin
operator|.
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|GetProcedureResultResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|getProcedureResult
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Convert the procedure result response to a specified type.      * @param response the procedure result object to parse      * @return the result data of the procedure.      */
specifier|protected
name|V
name|convertResult
parameter_list|(
specifier|final
name|GetProcedureResultResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|hasException
argument_list|()
condition|)
block|{
throw|throw
name|ForeignExceptionUtil
operator|.
name|toIOException
argument_list|(
name|response
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Fallback implementation in case the procedure is not supported by the server.      * It should try to wait until the operation is completed.      * @param deadlineTs the timestamp after which this method should throw a TimeoutException      * @return the result data of the operation      */
specifier|protected
name|V
name|waitOperationResult
parameter_list|(
specifier|final
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Called after the operation is completed and the result fetched. this allows to perform extra      * steps after the procedure is completed. it allows to apply transformations to the result that      * will be returned by get().      * @param result the result of the procedure      * @param deadlineTs the timestamp after which this method should throw a TimeoutException      * @return the result of the procedure, which may be the same as the passed one      */
specifier|protected
name|V
name|postOperationResult
parameter_list|(
specifier|final
name|V
name|result
parameter_list|,
specifier|final
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
return|return
name|result
return|;
block|}
comment|/**      * Called after the operation is terminated with a failure.      * this allows to perform extra steps after the procedure is terminated.      * it allows to apply transformations to the result that will be returned by get().      * The default implementation will rethrow the exception      * @param exception the exception got from fetching the result      * @param deadlineTs the timestamp after which this method should throw a TimeoutException      * @return the result of the procedure, which may be the same as the passed one      */
specifier|protected
name|V
name|postOperationFailure
parameter_list|(
specifier|final
name|IOException
name|exception
parameter_list|,
specifier|final
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
throw|throw
name|exception
throw|;
block|}
specifier|protected
interface|interface
name|WaitForStateCallable
block|{
name|boolean
name|checkState
parameter_list|(
name|int
name|tries
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|throwInterruptedException
parameter_list|()
throws|throws
name|InterruptedIOException
function_decl|;
name|void
name|throwTimeoutException
parameter_list|(
name|long
name|elapsed
parameter_list|)
throws|throws
name|TimeoutException
function_decl|;
block|}
specifier|protected
name|void
name|waitForState
parameter_list|(
specifier|final
name|long
name|deadlineTs
parameter_list|,
specifier|final
name|WaitForStateCallable
name|callable
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|int
name|tries
init|=
literal|0
decl_stmt|;
name|IOException
name|serverEx
init|=
literal|null
decl_stmt|;
name|long
name|startTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
while|while
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|<
name|deadlineTs
condition|)
block|{
name|serverEx
operator|=
literal|null
expr_stmt|;
try|try
block|{
if|if
condition|(
name|callable
operator|.
name|checkState
argument_list|(
name|tries
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|serverEx
operator|=
name|e
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|getAdmin
argument_list|()
operator|.
name|getPauseTime
argument_list|(
name|tries
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|callable
operator|.
name|throwInterruptedException
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|serverEx
operator|!=
literal|null
condition|)
block|{
throw|throw
name|unwrapException
argument_list|(
name|serverEx
argument_list|)
throw|;
block|}
else|else
block|{
name|callable
operator|.
name|throwTimeoutException
argument_list|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|protected
specifier|static
specifier|abstract
class|class
name|TableFuture
parameter_list|<
name|V
parameter_list|>
extends|extends
name|ProcedureFuture
argument_list|<
name|V
argument_list|>
block|{
specifier|private
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|public
name|TableFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Long
name|procId
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getDescription
argument_list|()
return|;
block|}
comment|/**      * @return the table name      */
specifier|protected
name|TableName
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * @return the table descriptor      */
specifier|protected
name|TableDescriptor
name|getTableDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getAdmin
argument_list|()
operator|.
name|getTableDescriptorByTableName
argument_list|(
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return the operation type like CREATE, DELETE, DISABLE etc.      */
specifier|public
specifier|abstract
name|String
name|getOperationType
parameter_list|()
function_decl|;
comment|/**      * @return a description of the operation      */
specifier|protected
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Operation: "
operator|+
name|getOperationType
argument_list|()
operator|+
literal|", "
operator|+
literal|"Table Name: "
operator|+
name|tableName
operator|.
name|getNameWithNamespaceInclAsString
argument_list|()
return|;
block|}
empty_stmt|;
specifier|protected
specifier|abstract
class|class
name|TableWaitForStateCallable
implements|implements
name|WaitForStateCallable
block|{
annotation|@
name|Override
specifier|public
name|void
name|throwInterruptedException
parameter_list|()
throws|throws
name|InterruptedIOException
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Interrupted while waiting for operation: "
operator|+
name|getOperationType
argument_list|()
operator|+
literal|" on table: "
operator|+
name|tableName
operator|.
name|getNameWithNamespaceInclAsString
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|throwTimeoutException
parameter_list|(
name|long
name|elapsedTime
parameter_list|)
throws|throws
name|TimeoutException
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"The operation: "
operator|+
name|getOperationType
argument_list|()
operator|+
literal|" on table: "
operator|+
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" has not completed after "
operator|+
name|elapsedTime
operator|+
literal|"ms"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|V
name|postOperationResult
parameter_list|(
specifier|final
name|V
name|result
parameter_list|,
specifier|final
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getDescription
argument_list|()
operator|+
literal|" completed"
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|postOperationResult
argument_list|(
name|result
argument_list|,
name|deadlineTs
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|V
name|postOperationFailure
parameter_list|(
specifier|final
name|IOException
name|exception
parameter_list|,
specifier|final
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getDescription
argument_list|()
operator|+
literal|" failed with "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|postOperationFailure
argument_list|(
name|exception
argument_list|,
name|deadlineTs
argument_list|)
return|;
block|}
specifier|protected
name|void
name|waitForTableEnabled
parameter_list|(
specifier|final
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|waitForState
argument_list|(
name|deadlineTs
argument_list|,
operator|new
name|TableWaitForStateCallable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|checkState
parameter_list|(
name|int
name|tries
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|getAdmin
argument_list|()
operator|.
name|isTableAvailable
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|tnfe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|.
name|getNameWithNamespaceInclAsString
argument_list|()
operator|+
literal|" was not enabled, sleeping. tries="
operator|+
name|tries
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|waitForTableDisabled
parameter_list|(
specifier|final
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|waitForState
argument_list|(
name|deadlineTs
argument_list|,
operator|new
name|TableWaitForStateCallable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|checkState
parameter_list|(
name|int
name|tries
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getAdmin
argument_list|()
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|waitTableNotFound
parameter_list|(
specifier|final
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|waitForState
argument_list|(
name|deadlineTs
argument_list|,
operator|new
name|TableWaitForStateCallable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|checkState
parameter_list|(
name|int
name|tries
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|!
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|waitForSchemaUpdate
parameter_list|(
specifier|final
name|long
name|deadlineTs
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|waitForState
argument_list|(
name|deadlineTs
argument_list|,
operator|new
name|TableWaitForStateCallable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|checkState
parameter_list|(
name|int
name|tries
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getAdmin
argument_list|()
operator|.
name|getAlterStatus
argument_list|(
name|tableName
argument_list|)
operator|.
name|getFirst
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|waitForAllRegionsOnline
parameter_list|(
specifier|final
name|long
name|deadlineTs
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
specifier|final
name|TableDescriptor
name|desc
init|=
name|getTableDescriptor
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|actualRegCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|MetaTableAccessor
operator|.
name|Visitor
name|visitor
init|=
operator|new
name|MetaTableAccessor
operator|.
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|rowResult
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionLocations
name|list
init|=
name|MetaTableAccessor
operator|.
name|getRegionLocations
argument_list|(
name|rowResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No serialized HRegionInfo in "
operator|+
name|rowResult
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|HRegionLocation
name|l
init|=
name|list
operator|.
name|getRegionLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|l
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|l
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isOffline
argument_list|()
operator|||
name|l
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isSplit
argument_list|()
condition|)
return|return
literal|true
return|;
name|HRegionLocation
index|[]
name|locations
init|=
name|list
operator|.
name|getRegionLocations
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionLocation
name|location
range|:
name|locations
control|)
block|{
if|if
condition|(
name|location
operator|==
literal|null
condition|)
continue|continue;
name|ServerName
name|serverName
init|=
name|location
operator|.
name|getServerName
argument_list|()
decl_stmt|;
comment|// Make sure that regions are assigned to server
if|if
condition|(
name|serverName
operator|!=
literal|null
operator|&&
name|serverName
operator|.
name|getHostAndPort
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|actualRegCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|int
name|tries
init|=
literal|0
decl_stmt|;
name|int
name|numRegs
init|=
operator|(
name|splitKeys
operator|==
literal|null
condition|?
literal|1
else|:
name|splitKeys
operator|.
name|length
operator|+
literal|1
operator|)
operator|*
name|desc
operator|.
name|getRegionReplication
argument_list|()
decl_stmt|;
while|while
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|<
name|deadlineTs
condition|)
block|{
name|actualRegCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|MetaTableAccessor
operator|.
name|scanMetaForTableRegions
argument_list|(
name|getAdmin
argument_list|()
operator|.
name|getConnection
argument_list|()
argument_list|,
name|visitor
argument_list|,
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|actualRegCount
operator|.
name|get
argument_list|()
operator|==
name|numRegs
condition|)
block|{
comment|// all the regions are online
return|return;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|getAdmin
argument_list|()
operator|.
name|getPauseTime
argument_list|(
name|tries
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Interrupted when opening"
operator|+
literal|" regions; "
operator|+
name|actualRegCount
operator|.
name|get
argument_list|()
operator|+
literal|" of "
operator|+
name|numRegs
operator|+
literal|" regions processed so far"
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Only "
operator|+
name|actualRegCount
operator|.
name|get
argument_list|()
operator|+
literal|" of "
operator|+
name|numRegs
operator|+
literal|" regions are online; retries exhausted."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|protected
specifier|static
specifier|abstract
class|class
name|NamespaceFuture
extends|extends
name|ProcedureFuture
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|namespaceName
decl_stmt|;
specifier|public
name|NamespaceFuture
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|String
name|namespaceName
parameter_list|,
specifier|final
name|Long
name|procId
parameter_list|)
block|{
name|super
argument_list|(
name|admin
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|this
operator|.
name|namespaceName
operator|=
name|namespaceName
expr_stmt|;
block|}
comment|/**      * @return the namespace name      */
specifier|protected
name|String
name|getNamespaceName
parameter_list|()
block|{
return|return
name|namespaceName
return|;
block|}
comment|/**      * @return the operation type like CREATE_NAMESPACE, DELETE_NAMESPACE, etc.      */
specifier|public
specifier|abstract
name|String
name|getOperationType
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Operation: "
operator|+
name|getOperationType
argument_list|()
operator|+
literal|", Namespace: "
operator|+
name|getNamespaceName
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SecurityCapability
argument_list|>
name|getSecurityCapabilities
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|List
argument_list|<
name|SecurityCapability
argument_list|>
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|SecurityCapability
argument_list|>
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|SecurityCapabilitiesRequest
name|req
init|=
name|SecurityCapabilitiesRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|toSecurityCapabilityList
argument_list|(
name|master
operator|.
name|getSecurityCapabilities
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
operator|.
name|getCapabilitiesList
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
operator|(
operator|(
name|RemoteException
operator|)
name|e
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
index|[]
name|setSplitOrMergeEnabled
parameter_list|(
specifier|final
name|boolean
name|enabled
parameter_list|,
specifier|final
name|boolean
name|synchronous
parameter_list|,
specifier|final
name|MasterSwitchType
modifier|...
name|switchTypes
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|boolean
index|[]
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
index|[]
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|MasterProtos
operator|.
name|SetSplitOrMergeEnabledResponse
name|response
init|=
name|master
operator|.
name|setSplitOrMergeEnabled
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildSetSplitOrMergeEnabledRequest
argument_list|(
name|enabled
argument_list|,
name|synchronous
argument_list|,
name|switchTypes
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
index|[]
name|result
init|=
operator|new
name|boolean
index|[
name|switchTypes
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Boolean
name|prevValue
range|:
name|response
operator|.
name|getPrevValueList
argument_list|()
control|)
block|{
name|result
index|[
name|i
operator|++
index|]
operator|=
name|prevValue
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSplitOrMergeEnabled
parameter_list|(
specifier|final
name|MasterSwitchType
name|switchType
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildIsSplitOrMergeEnabledRequest
argument_list|(
name|switchType
argument_list|)
argument_list|)
operator|.
name|getEnabled
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|HRegionInfo
name|getMobRegionInfo
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|".mob"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
name|RpcControllerFactory
name|getRpcControllerFactory
parameter_list|()
block|{
return|return
name|this
operator|.
name|rpcControllerFactory
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addReplicationPeer
parameter_list|(
name|String
name|peerId
parameter_list|,
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|IOException
block|{
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|master
operator|.
name|addReplicationPeer
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildAddReplicationPeerRequest
argument_list|(
name|peerId
argument_list|,
name|peerConfig
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeReplicationPeer
parameter_list|(
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|master
operator|.
name|removeReplicationPeer
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildRemoveReplicationPeerRequest
argument_list|(
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|enableReplicationPeer
parameter_list|(
specifier|final
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|master
operator|.
name|enableReplicationPeer
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildEnableReplicationPeerRequest
argument_list|(
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|disableReplicationPeer
parameter_list|(
specifier|final
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|master
operator|.
name|disableReplicationPeer
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildDisableReplicationPeerRequest
argument_list|(
name|peerId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ReplicationPeerConfig
name|getReplicationPeerConfig
parameter_list|(
specifier|final
name|String
name|peerId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|ReplicationPeerConfig
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ReplicationPeerConfig
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|GetReplicationPeerConfigResponse
name|response
init|=
name|master
operator|.
name|getReplicationPeerConfig
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildGetReplicationPeerConfigRequest
argument_list|(
name|peerId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|ReplicationSerDeHelper
operator|.
name|convert
argument_list|(
name|response
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateReplicationPeerConfig
parameter_list|(
specifier|final
name|String
name|peerId
parameter_list|,
specifier|final
name|ReplicationPeerConfig
name|peerConfig
parameter_list|)
throws|throws
name|IOException
block|{
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|master
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildUpdateReplicationPeerConfigRequest
argument_list|(
name|peerId
argument_list|,
name|peerConfig
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|appendReplicationPeerTableCFs
parameter_list|(
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
parameter_list|)
throws|throws
name|ReplicationException
throws|,
name|IOException
block|{
if|if
condition|(
name|tableCfs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"tableCfs is null"
argument_list|)
throw|;
block|}
name|ReplicationPeerConfig
name|peerConfig
init|=
name|getReplicationPeerConfig
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ReplicationSerDeHelper
operator|.
name|appendTableCFsToReplicationPeerConfig
argument_list|(
name|tableCfs
argument_list|,
name|peerConfig
argument_list|)
expr_stmt|;
name|updateReplicationPeerConfig
argument_list|(
name|id
argument_list|,
name|peerConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeReplicationPeerTableCFs
parameter_list|(
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|TableName
argument_list|,
name|?
extends|extends
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
parameter_list|)
throws|throws
name|ReplicationException
throws|,
name|IOException
block|{
if|if
condition|(
name|tableCfs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReplicationException
argument_list|(
literal|"tableCfs is null"
argument_list|)
throw|;
block|}
name|ReplicationPeerConfig
name|peerConfig
init|=
name|getReplicationPeerConfig
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ReplicationSerDeHelper
operator|.
name|removeTableCFsFromReplicationPeerConfig
argument_list|(
name|tableCfs
argument_list|,
name|peerConfig
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|updateReplicationPeerConfig
argument_list|(
name|id
argument_list|,
name|peerConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
name|listReplicationPeers
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|listReplicationPeers
argument_list|(
operator|(
name|Pattern
operator|)
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
name|listReplicationPeers
parameter_list|(
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listReplicationPeers
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
name|listReplicationPeers
parameter_list|(
name|Pattern
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ReplicationProtos
operator|.
name|ReplicationPeerDescription
argument_list|>
name|peersList
init|=
name|master
operator|.
name|listReplicationPeers
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildListReplicationPeersRequest
argument_list|(
name|pattern
argument_list|)
argument_list|)
operator|.
name|getPeerDescList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|peersList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ReplicationProtos
operator|.
name|ReplicationPeerDescription
name|peer
range|:
name|peersList
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|ReplicationSerDeHelper
operator|.
name|toReplicationPeerDescription
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drainRegionServers
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|HBaseProtos
operator|.
name|ServerName
argument_list|>
name|pbServers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|servers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|servers
control|)
block|{
comment|// Parse to ServerName to do simple validation.
name|ServerName
operator|.
name|parseServerName
argument_list|(
name|server
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pbServers
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|server
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|ServiceException
block|{
name|DrainRegionServersRequest
name|req
init|=
name|DrainRegionServersRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllServerName
argument_list|(
name|pbServers
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|master
operator|.
name|drainRegionServers
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|listDrainingRegionServers
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|rpcCall
parameter_list|()
throws|throws
name|ServiceException
block|{
name|ListDrainingRegionServersRequest
name|req
init|=
name|ListDrainingRegionServersRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|ServerName
name|server
range|:
name|master
operator|.
name|listDrainingRegionServers
argument_list|(
literal|null
argument_list|,
name|req
argument_list|)
operator|.
name|getServerNameList
argument_list|()
control|)
block|{
name|servers
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|server
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|servers
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeDrainFromRegionServers
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|HBaseProtos
operator|.
name|ServerName
argument_list|>
name|pbServers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|servers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|servers
control|)
block|{
name|pbServers
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|server
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|executeCallable
argument_list|(
operator|new
name|MasterCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
name|getConnection
argument_list|()
argument_list|,
name|getRpcControllerFactory
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Void
name|rpcCall
parameter_list|()
throws|throws
name|ServiceException
block|{
name|RemoveDrainFromRegionServersRequest
name|req
init|=
name|RemoveDrainFromRegionServersRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllServerName
argument_list|(
name|pbServers
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|master
operator|.
name|removeDrainFromRegionServers
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|req
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableCFs
argument_list|>
name|listReplicatedTableCFs
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|TableCFs
argument_list|>
name|replicatedTableCFs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|HTableDescriptor
index|[]
name|tables
init|=
name|listTables
argument_list|()
decl_stmt|;
for|for
control|(
name|HTableDescriptor
name|table
range|:
name|tables
control|)
block|{
name|HColumnDescriptor
index|[]
name|columns
init|=
name|table
operator|.
name|getColumnFamilies
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|cfs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|column
range|:
name|columns
control|)
block|{
if|if
condition|(
name|column
operator|.
name|getScope
argument_list|()
operator|!=
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
condition|)
block|{
name|cfs
operator|.
name|put
argument_list|(
name|column
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|column
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|cfs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|replicatedTableCFs
operator|.
name|add
argument_list|(
operator|new
name|TableCFs
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|cfs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|replicatedTableCFs
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|enableTableReplication
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Table name cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
literal|"Table '"
operator|+
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"' does not exists."
argument_list|)
throw|;
block|}
name|byte
index|[]
index|[]
name|splits
init|=
name|getTableSplits
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|checkAndSyncTableDescToPeers
argument_list|(
name|tableName
argument_list|,
name|splits
argument_list|)
expr_stmt|;
name|setTableRep
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|disableTableReplication
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Table name is null"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TableNotFoundException
argument_list|(
literal|"Table '"
operator|+
name|tableName
operator|.
name|getNamespaceAsString
argument_list|()
operator|+
literal|"' does not exists."
argument_list|)
throw|;
block|}
name|setTableRep
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copies the REPLICATION_SCOPE of table descriptor passed as an argument. Before copy, the method    * ensures that the name of table and column-families should match.    * @param peerHtd descriptor on peer cluster    * @param localHtd - The HTableDescriptor of table from source cluster.    * @return true If the name of table and column families match and REPLICATION_SCOPE copied    *         successfully. false If there is any mismatch in the names.    */
specifier|private
name|boolean
name|copyReplicationScope
parameter_list|(
specifier|final
name|HTableDescriptor
name|peerHtd
parameter_list|,
specifier|final
name|HTableDescriptor
name|localHtd
parameter_list|)
block|{
comment|// Copy the REPLICATION_SCOPE only when table names and the names of
comment|// Column-Families are same.
name|int
name|result
init|=
name|peerHtd
operator|.
name|getTableName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|localHtd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|HColumnDescriptor
argument_list|>
name|remoteHCDIter
init|=
name|peerHtd
operator|.
name|getFamilies
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|HColumnDescriptor
argument_list|>
name|localHCDIter
init|=
name|localHtd
operator|.
name|getFamilies
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|remoteHCDIter
operator|.
name|hasNext
argument_list|()
operator|&&
name|localHCDIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HColumnDescriptor
name|remoteHCD
init|=
name|remoteHCDIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|HColumnDescriptor
name|localHCD
init|=
name|localHCDIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|remoteHCDName
init|=
name|remoteHCD
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
name|String
name|localHCDName
init|=
name|localHCD
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteHCDName
operator|.
name|equals
argument_list|(
name|localHCDName
argument_list|)
condition|)
block|{
name|remoteHCD
operator|.
name|setScope
argument_list|(
name|localHCD
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|remoteHCDIter
operator|.
name|hasNext
argument_list|()
operator|||
name|localHCDIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|result
operator|==
literal|0
return|;
block|}
comment|/**    * Compare the contents of the descriptor with another one passed as a parameter for replication    * purpose. The REPLICATION_SCOPE field is ignored during comparison.    * @param peerHtd descriptor on peer cluster    * @param localHtd descriptor on source cluster which needs to be replicated.    * @return true if the contents of the two descriptors match (ignoring just REPLICATION_SCOPE).    * @see java.lang.Object#equals(java.lang.Object)    */
specifier|private
name|boolean
name|compareForReplication
parameter_list|(
name|HTableDescriptor
name|peerHtd
parameter_list|,
name|HTableDescriptor
name|localHtd
parameter_list|)
block|{
if|if
condition|(
name|peerHtd
operator|==
name|localHtd
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|peerHtd
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|result
init|=
literal|false
decl_stmt|;
comment|// Create a copy of peer HTD as we need to change its replication
comment|// scope to match with the local HTD.
name|HTableDescriptor
name|peerHtdCopy
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|peerHtd
argument_list|)
decl_stmt|;
name|result
operator|=
name|copyReplicationScope
argument_list|(
name|peerHtdCopy
argument_list|,
name|localHtd
argument_list|)
expr_stmt|;
comment|// If copy was successful, compare the two tables now.
if|if
condition|(
name|result
condition|)
block|{
name|result
operator|=
operator|(
name|peerHtdCopy
operator|.
name|compareTo
argument_list|(
name|localHtd
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Connect to peer and check the table descriptor on peer:    *<ol>    *<li>Create the same table on peer when not exist.</li>    *<li>Throw an exception if the table already has replication enabled on any of the column    * families.</li>    *<li>Throw an exception if the table exists on peer cluster but descriptors are not same.</li>    *</ol>    * @param tableName name of the table to sync to the peer    * @param splits table split keys    * @throws IOException    */
specifier|private
name|void
name|checkAndSyncTableDescToPeers
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|splits
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
name|peers
init|=
name|listReplicationPeers
argument_list|()
decl_stmt|;
if|if
condition|(
name|peers
operator|==
literal|null
operator|||
name|peers
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Found no peer cluster for replication."
argument_list|)
throw|;
block|}
for|for
control|(
name|ReplicationPeerDescription
name|peerDesc
range|:
name|peers
control|)
block|{
if|if
condition|(
name|needToReplicate
argument_list|(
name|tableName
argument_list|,
name|peerDesc
argument_list|)
condition|)
block|{
name|Configuration
name|peerConf
init|=
name|getPeerClusterConfiguration
argument_list|(
name|peerDesc
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|peerConf
argument_list|)
init|;             Admin repHBaseAdmin = conn.getAdmin()
block|)
block|{
name|HTableDescriptor
name|localHtd
init|=
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|peerHtd
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|repHBaseAdmin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|repHBaseAdmin
operator|.
name|createTable
argument_list|(
name|localHtd
argument_list|,
name|splits
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|peerHtd
operator|=
name|repHBaseAdmin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|peerHtd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to get table descriptor for table "
operator|+
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" from peer cluster "
operator|+
name|peerDesc
operator|.
name|getPeerId
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|compareForReplication
argument_list|(
name|peerHtd
argument_list|,
name|localHtd
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" exists in peer cluster "
operator|+
name|peerDesc
operator|.
name|getPeerId
argument_list|()
operator|+
literal|", but the table descriptors are not same when compared with source cluster."
operator|+
literal|" Thus can not enable the table's replication switch."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|/**    * Decide whether the table need replicate to the peer cluster according to the peer config    * @param table name of the table    * @param peer config for the peer    * @return true if the table need replicate to the peer cluster    */
end_comment

begin_function
specifier|private
name|boolean
name|needToReplicate
parameter_list|(
name|TableName
name|table
parameter_list|,
name|ReplicationPeerDescription
name|peer
parameter_list|)
block|{
name|ReplicationPeerConfig
name|peerConfig
init|=
name|peer
operator|.
name|getPeerConfig
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
name|peerConfig
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCFsMap
init|=
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
decl_stmt|;
comment|// If null means user has explicitly not configured any namespaces and table CFs
comment|// so all the tables data are applicable for replication
if|if
condition|(
name|namespaces
operator|==
literal|null
operator|&&
name|tableCFsMap
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|namespaces
operator|!=
literal|null
operator|&&
name|namespaces
operator|.
name|contains
argument_list|(
name|table
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|tableCFsMap
operator|!=
literal|null
operator|&&
name|tableCFsMap
operator|.
name|containsKey
argument_list|(
name|table
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table "
operator|+
name|table
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" doesn't need replicate to peer cluster, peerId="
operator|+
name|peer
operator|.
name|getPeerId
argument_list|()
operator|+
literal|", clusterKey="
operator|+
name|peerConfig
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function

begin_comment
comment|/**    * Set the table's replication switch if the table's replication switch is already not set.    * @param tableName name of the table    * @param enableRep is replication switch enable or disable    * @throws IOException if a remote or network exception occurs    */
end_comment

begin_function
specifier|private
name|void
name|setTableRep
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
name|boolean
name|enableRep
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|ReplicationState
name|currentReplicationState
init|=
name|getTableReplicationState
argument_list|(
name|htd
argument_list|)
decl_stmt|;
if|if
condition|(
name|enableRep
operator|&&
name|currentReplicationState
operator|!=
name|ReplicationState
operator|.
name|ENABLED
operator|||
operator|!
name|enableRep
operator|&&
name|currentReplicationState
operator|!=
name|ReplicationState
operator|.
name|DISABLED
condition|)
block|{
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|htd
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|hcd
operator|.
name|setScope
argument_list|(
name|enableRep
condition|?
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
else|:
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
argument_list|)
expr_stmt|;
block|}
name|modifyTable
argument_list|(
name|tableName
argument_list|,
name|htd
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * This enum indicates the current state of the replication for a given table.    */
end_comment

begin_enum
specifier|private
enum|enum
name|ReplicationState
block|{
name|ENABLED
block|,
comment|// all column families enabled
name|MIXED
block|,
comment|// some column families enabled, some disabled
name|DISABLED
comment|// all column families disabled
block|}
end_enum

begin_comment
comment|/**    * @param htd table descriptor details for the table to check    * @return ReplicationState the current state of the table.    */
end_comment

begin_function
specifier|private
name|ReplicationState
name|getTableReplicationState
parameter_list|(
name|HTableDescriptor
name|htd
parameter_list|)
block|{
name|boolean
name|hasEnabled
init|=
literal|false
decl_stmt|;
name|boolean
name|hasDisabled
init|=
literal|false
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|htd
operator|.
name|getFamilies
argument_list|()
control|)
block|{
if|if
condition|(
name|hcd
operator|.
name|getScope
argument_list|()
operator|!=
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
operator|&&
name|hcd
operator|.
name|getScope
argument_list|()
operator|!=
name|HConstants
operator|.
name|REPLICATION_SCOPE_SERIAL
condition|)
block|{
name|hasDisabled
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|hasEnabled
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasEnabled
operator|&&
name|hasDisabled
condition|)
return|return
name|ReplicationState
operator|.
name|MIXED
return|;
if|if
condition|(
name|hasEnabled
condition|)
return|return
name|ReplicationState
operator|.
name|ENABLED
return|;
return|return
name|ReplicationState
operator|.
name|DISABLED
return|;
block|}
end_function

begin_comment
comment|/**    * Returns the configuration needed to talk to the remote slave cluster.    * @param peer the description of replication peer    * @return the configuration for the peer cluster, null if it was unable to get the configuration    * @throws IOException    */
end_comment

begin_function
specifier|private
name|Configuration
name|getPeerClusterConfiguration
parameter_list|(
name|ReplicationPeerDescription
name|peer
parameter_list|)
throws|throws
name|IOException
block|{
name|ReplicationPeerConfig
name|peerConfig
init|=
name|peer
operator|.
name|getPeerConfig
argument_list|()
decl_stmt|;
name|Configuration
name|otherConf
decl_stmt|;
try|try
block|{
name|otherConf
operator|=
name|HBaseConfiguration
operator|.
name|createClusterConf
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|peerConfig
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't get peer configuration for peerId="
operator|+
name|peer
operator|.
name|getPeerId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|peerConfig
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CompoundConfiguration
name|compound
init|=
operator|new
name|CompoundConfiguration
argument_list|()
decl_stmt|;
name|compound
operator|.
name|add
argument_list|(
name|otherConf
argument_list|)
expr_stmt|;
name|compound
operator|.
name|addStringMap
argument_list|(
name|peerConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|compound
return|;
block|}
return|return
name|otherConf
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|clearCompactionQueues
parameter_list|(
specifier|final
name|ServerName
name|sn
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|queues
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|queues
operator|==
literal|null
operator|||
name|queues
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"queues cannot be null or empty"
argument_list|)
throw|;
block|}
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|this
operator|.
name|connection
operator|.
name|getAdmin
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|callable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: There is no timeout on this controller. Set one!
name|HBaseRpcController
name|controller
init|=
name|rpcControllerFactory
operator|.
name|newController
argument_list|()
decl_stmt|;
name|ClearCompactionQueuesRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildClearCompactionQueuesRequest
argument_list|(
name|queues
argument_list|)
decl_stmt|;
name|admin
operator|.
name|clearCompactionQueues
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|ProtobufUtil
operator|.
name|call
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

