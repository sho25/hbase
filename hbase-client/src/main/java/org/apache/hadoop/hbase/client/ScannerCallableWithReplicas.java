begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|BoundedCompletionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_comment
comment|/**  * This class has the logic for handling scanners for regions with and without replicas.  * 1. A scan is attempted on the default (primary) region  * 2. The scanner sends all the RPCs to the default region until it is done, or, there  * is a timeout on the default (a timeout of zero is disallowed).  * 3. If there is a timeout in (2) above, scanner(s) is opened on the non-default replica(s)  * 4. The results from the first successful scanner are taken, and it is stored which server  * returned the results.  * 5. The next RPCs are done on the above stored server until it is done or there is a timeout,  * in which case, the other replicas are queried (as in (3) above).  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|ScannerCallableWithReplicas
implements|implements
name|RetryingCallable
argument_list|<
name|Result
index|[]
argument_list|>
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|volatile
name|ScannerCallable
name|currentScannerCallable
decl_stmt|;
name|AtomicBoolean
name|replicaSwitched
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|ClusterConnection
name|cConnection
decl_stmt|;
specifier|protected
specifier|final
name|ExecutorService
name|pool
decl_stmt|;
specifier|protected
specifier|final
name|int
name|timeBeforeReplicas
decl_stmt|;
specifier|private
specifier|final
name|Scan
name|scan
decl_stmt|;
specifier|private
specifier|final
name|int
name|retries
decl_stmt|;
specifier|private
name|Result
name|lastResult
decl_stmt|;
specifier|private
specifier|final
name|RpcRetryingCaller
argument_list|<
name|Result
index|[]
argument_list|>
name|caller
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|int
name|scannerTimeout
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|ScannerCallable
argument_list|>
name|outstandingCallables
init|=
operator|new
name|HashSet
argument_list|<
name|ScannerCallable
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ScannerCallableWithReplicas
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ClusterConnection
name|cConnection
parameter_list|,
name|ScannerCallable
name|baseCallable
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|int
name|timeBeforeReplicas
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|int
name|retries
parameter_list|,
name|int
name|scannerTimeout
parameter_list|,
name|int
name|caching
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|RpcRetryingCaller
argument_list|<
name|Result
index|[]
argument_list|>
name|caller
parameter_list|)
block|{
name|this
operator|.
name|currentScannerCallable
operator|=
name|baseCallable
expr_stmt|;
name|this
operator|.
name|cConnection
operator|=
name|cConnection
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
if|if
condition|(
name|timeBeforeReplicas
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid value of operation timeout on the primary"
argument_list|)
throw|;
block|}
name|this
operator|.
name|timeBeforeReplicas
operator|=
name|timeBeforeReplicas
expr_stmt|;
name|this
operator|.
name|scan
operator|=
name|scan
expr_stmt|;
name|this
operator|.
name|retries
operator|=
name|retries
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|scannerTimeout
operator|=
name|scannerTimeout
expr_stmt|;
name|this
operator|.
name|caller
operator|=
name|caller
expr_stmt|;
block|}
specifier|public
name|void
name|setClose
parameter_list|()
block|{
name|currentScannerCallable
operator|.
name|setClose
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setCaching
parameter_list|(
name|int
name|caching
parameter_list|)
block|{
name|currentScannerCallable
operator|.
name|setCaching
argument_list|(
name|caching
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getCaching
parameter_list|()
block|{
return|return
name|currentScannerCallable
operator|.
name|getCaching
argument_list|()
return|;
block|}
specifier|public
name|HRegionInfo
name|getHRegionInfo
parameter_list|()
block|{
return|return
name|currentScannerCallable
operator|.
name|getHRegionInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
index|[]
name|call
parameter_list|(
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If the active replica callable was closed somewhere, invoke the RPC to
comment|// really close it. In the case of regular scanners, this applies. We make couple
comment|// of RPCs to a RegionServer, and when that region is exhausted, we set
comment|// the closed flag. Then an RPC is required to actually close the scanner.
if|if
condition|(
name|currentScannerCallable
operator|!=
literal|null
operator|&&
name|currentScannerCallable
operator|.
name|closed
condition|)
block|{
comment|// For closing we target that exact scanner (and not do replica fallback like in
comment|// the case of normal reads)
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing scanner "
operator|+
name|currentScannerCallable
operator|.
name|scannerId
argument_list|)
expr_stmt|;
block|}
name|Result
index|[]
name|r
init|=
name|currentScannerCallable
operator|.
name|call
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
name|currentScannerCallable
operator|=
literal|null
expr_stmt|;
return|return
name|r
return|;
block|}
comment|// We need to do the following:
comment|//1. When a scan goes out to a certain replica (default or not), we need to
comment|//   continue to hit that until there is a failure. So store the last successfully invoked
comment|//   replica
comment|//2. We should close the "losing" scanners (scanners other than the ones we hear back
comment|//   from first)
comment|//
name|RegionLocations
name|rl
init|=
name|RpcRetryingCallerWithReadReplicas
operator|.
name|getRegionLocations
argument_list|(
literal|true
argument_list|,
name|RegionReplicaUtil
operator|.
name|DEFAULT_REPLICA_ID
argument_list|,
name|cConnection
argument_list|,
name|tableName
argument_list|,
name|currentScannerCallable
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
comment|// allocate a boundedcompletion pool of some multiple of number of replicas.
comment|// We want to accomodate some RPCs for redundant replica scans (but are still in progress)
name|BoundedCompletionService
argument_list|<
name|Pair
argument_list|<
name|Result
index|[]
argument_list|,
name|ScannerCallable
argument_list|>
argument_list|>
name|cs
init|=
operator|new
name|BoundedCompletionService
argument_list|<
name|Pair
argument_list|<
name|Result
index|[]
argument_list|,
name|ScannerCallable
argument_list|>
argument_list|>
argument_list|(
name|pool
argument_list|,
name|rl
operator|.
name|size
argument_list|()
operator|*
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExecutionException
argument_list|>
name|exceptions
init|=
literal|null
decl_stmt|;
name|int
name|submitted
init|=
literal|0
decl_stmt|,
name|completed
init|=
literal|0
decl_stmt|;
name|AtomicBoolean
name|done
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|replicaSwitched
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// submit call for the primary replica.
name|submitted
operator|+=
name|addCallsForCurrentReplica
argument_list|(
name|cs
argument_list|,
name|rl
argument_list|)
expr_stmt|;
try|try
block|{
comment|// wait for the timeout to see whether the primary responds back
name|Future
argument_list|<
name|Pair
argument_list|<
name|Result
index|[]
argument_list|,
name|ScannerCallable
argument_list|>
argument_list|>
name|f
init|=
name|cs
operator|.
name|poll
argument_list|(
name|timeBeforeReplicas
argument_list|,
name|TimeUnit
operator|.
name|MICROSECONDS
argument_list|)
decl_stmt|;
comment|// Yes, microseconds
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|Pair
argument_list|<
name|Result
index|[]
argument_list|,
name|ScannerCallable
argument_list|>
name|r
init|=
name|f
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getSecond
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|updateCurrentlyServingReplica
argument_list|(
name|r
operator|.
name|getSecond
argument_list|()
argument_list|,
name|r
operator|.
name|getFirst
argument_list|()
argument_list|,
name|done
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
return|return
name|r
operator|==
literal|null
condition|?
literal|null
else|:
name|r
operator|.
name|getFirst
argument_list|()
return|;
comment|//great we got a response
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// the primary call failed with RetriesExhaustedException or DoNotRetryIOException
comment|// but the secondaries might still succeed. Continue on the replica RPCs.
name|exceptions
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExecutionException
argument_list|>
argument_list|(
name|rl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|completed
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
comment|// submit call for the all of the secondaries at once
comment|// TODO: this may be an overkill for large region replication
name|submitted
operator|+=
name|addCallsForOtherReplicas
argument_list|(
name|cs
argument_list|,
name|rl
argument_list|,
literal|0
argument_list|,
name|rl
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|completed
operator|<
name|submitted
condition|)
block|{
try|try
block|{
name|Future
argument_list|<
name|Pair
argument_list|<
name|Result
index|[]
argument_list|,
name|ScannerCallable
argument_list|>
argument_list|>
name|f
init|=
name|cs
operator|.
name|take
argument_list|()
decl_stmt|;
name|Pair
argument_list|<
name|Result
index|[]
argument_list|,
name|ScannerCallable
argument_list|>
name|r
init|=
name|f
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getSecond
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|updateCurrentlyServingReplica
argument_list|(
name|r
operator|.
name|getSecond
argument_list|()
argument_list|,
name|r
operator|.
name|getFirst
argument_list|()
argument_list|,
name|done
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
return|return
name|r
operator|==
literal|null
condition|?
literal|null
else|:
name|r
operator|.
name|getFirst
argument_list|()
return|;
comment|// great we got an answer
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// if not cancel or interrupt, wait until all RPC's are done
comment|// one of the tasks failed. Save the exception for later.
if|if
condition|(
name|exceptions
operator|==
literal|null
condition|)
name|exceptions
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExecutionException
argument_list|>
argument_list|(
name|rl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|completed
operator|++
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// We get there because we were interrupted or because one or more of the
comment|// calls succeeded or failed. In all case, we stop all our tasks.
name|cs
operator|.
name|cancelAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exceptions
operator|!=
literal|null
operator|&&
operator|!
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RpcRetryingCallerWithReadReplicas
operator|.
name|throwEnrichedException
argument_list|(
name|exceptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|retries
argument_list|,
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// just rethrow the first exception for now.
block|}
return|return
literal|null
return|;
comment|// unreachable
block|}
specifier|private
name|void
name|updateCurrentlyServingReplica
parameter_list|(
name|ScannerCallable
name|scanner
parameter_list|,
name|Result
index|[]
name|result
parameter_list|,
name|AtomicBoolean
name|done
parameter_list|,
name|ExecutorService
name|pool
parameter_list|)
block|{
if|if
condition|(
name|done
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
name|currentScannerCallable
operator|!=
name|scanner
condition|)
name|replicaSwitched
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|currentScannerCallable
operator|=
name|scanner
expr_stmt|;
comment|// store where to start the replica scanner from if we need to.
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|length
operator|!=
literal|0
condition|)
name|this
operator|.
name|lastResult
operator|=
name|result
index|[
name|result
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting current scanner as "
operator|+
name|currentScannerCallable
operator|.
name|scannerId
operator|+
literal|" associated with "
operator|+
name|currentScannerCallable
operator|.
name|getHRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// close all outstanding replica scanners but the one we heard back from
name|outstandingCallables
operator|.
name|remove
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
for|for
control|(
name|ScannerCallable
name|s
range|:
name|outstandingCallables
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing scanner "
operator|+
name|s
operator|.
name|scannerId
operator|+
literal|" because this was slow and another replica succeeded"
argument_list|)
expr_stmt|;
block|}
comment|// Submit the "close" to the pool since this might take time, and we don't
comment|// want to wait for the "close" to happen yet. The "wait" will happen when
comment|// the table is closed (when the awaitTermination of the underlying pool is called)
name|s
operator|.
name|setClose
argument_list|()
expr_stmt|;
name|RetryingRPC
name|r
init|=
operator|new
name|RetryingRPC
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|pool
operator|.
name|submit
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
comment|// now clear outstandingCallables since we scheduled a close for all the contained scanners
name|outstandingCallables
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * When a scanner switches in the middle of scanning (the 'next' call fails    * for example), the upper layer {@link ClientScanner} needs to know    * @return    */
specifier|public
name|boolean
name|switchedToADifferentReplica
parameter_list|()
block|{
return|return
name|replicaSwitched
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|int
name|addCallsForCurrentReplica
parameter_list|(
name|BoundedCompletionService
argument_list|<
name|Pair
argument_list|<
name|Result
index|[]
argument_list|,
name|ScannerCallable
argument_list|>
argument_list|>
name|cs
parameter_list|,
name|RegionLocations
name|rl
parameter_list|)
block|{
name|RetryingRPC
name|retryingOnReplica
init|=
operator|new
name|RetryingRPC
argument_list|(
name|currentScannerCallable
argument_list|)
decl_stmt|;
name|outstandingCallables
operator|.
name|add
argument_list|(
name|currentScannerCallable
argument_list|)
expr_stmt|;
name|cs
operator|.
name|submit
argument_list|(
name|retryingOnReplica
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
specifier|private
name|int
name|addCallsForOtherReplicas
parameter_list|(
name|BoundedCompletionService
argument_list|<
name|Pair
argument_list|<
name|Result
index|[]
argument_list|,
name|ScannerCallable
argument_list|>
argument_list|>
name|cs
parameter_list|,
name|RegionLocations
name|rl
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
if|if
condition|(
name|scan
operator|.
name|getConsistency
argument_list|()
operator|==
name|Consistency
operator|.
name|STRONG
condition|)
block|{
return|return
literal|0
return|;
comment|// not scheduling on other replicas for strong consistency
block|}
for|for
control|(
name|int
name|id
init|=
name|min
init|;
name|id
operator|<=
name|max
condition|;
name|id
operator|++
control|)
block|{
if|if
condition|(
name|currentScannerCallable
operator|.
name|getHRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
operator|==
name|id
condition|)
block|{
continue|continue;
comment|//this was already scheduled earlier
block|}
name|ScannerCallable
name|s
init|=
name|currentScannerCallable
operator|.
name|getScannerCallableForReplica
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|lastResult
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|getScan
argument_list|()
operator|.
name|setStartRow
argument_list|(
name|this
operator|.
name|lastResult
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|outstandingCallables
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|RetryingRPC
name|retryingOnReplica
init|=
operator|new
name|RetryingRPC
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|cs
operator|.
name|submit
argument_list|(
name|retryingOnReplica
argument_list|)
expr_stmt|;
block|}
return|return
name|max
operator|-
name|min
operator|+
literal|1
return|;
block|}
class|class
name|RetryingRPC
implements|implements
name|Callable
argument_list|<
name|Pair
argument_list|<
name|Result
index|[]
argument_list|,
name|ScannerCallable
argument_list|>
argument_list|>
block|{
specifier|final
name|ScannerCallable
name|callable
decl_stmt|;
name|RetryingRPC
parameter_list|(
name|ScannerCallable
name|callable
parameter_list|)
block|{
name|this
operator|.
name|callable
operator|=
name|callable
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Pair
argument_list|<
name|Result
index|[]
argument_list|,
name|ScannerCallable
argument_list|>
name|call
parameter_list|()
throws|throws
name|IOException
block|{
comment|// For the Consistency.STRONG (default case), we reuse the caller
comment|// to keep compatibility with what is done in the past
comment|// For the Consistency.TIMELINE case, we can't reuse the caller
comment|// since we could be making parallel RPCs (caller.callWithRetries is synchronized
comment|// and we can't invoke it multiple times at the same time)
name|RpcRetryingCaller
argument_list|<
name|Result
index|[]
argument_list|>
name|caller
init|=
name|ScannerCallableWithReplicas
operator|.
name|this
operator|.
name|caller
decl_stmt|;
if|if
condition|(
name|scan
operator|.
name|getConsistency
argument_list|()
operator|==
name|Consistency
operator|.
name|TIMELINE
condition|)
block|{
name|caller
operator|=
operator|new
name|RpcRetryingCallerFactory
argument_list|(
name|ScannerCallableWithReplicas
operator|.
name|this
operator|.
name|conf
argument_list|)
operator|.
operator|<
name|Result
index|[]
operator|>
name|newCaller
argument_list|()
expr_stmt|;
block|}
name|Result
index|[]
name|res
init|=
name|caller
operator|.
name|callWithRetries
argument_list|(
name|callable
argument_list|,
name|scannerTimeout
argument_list|)
decl_stmt|;
return|return
operator|new
name|Pair
argument_list|<
name|Result
index|[]
argument_list|,
name|ScannerCallable
argument_list|>
argument_list|(
name|res
argument_list|,
name|callable
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|prepare
parameter_list|(
name|boolean
name|reload
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|throwable
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|boolean
name|retrying
parameter_list|)
block|{
name|currentScannerCallable
operator|.
name|throwable
argument_list|(
name|t
argument_list|,
name|retrying
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getExceptionMessageAdditionalDetail
parameter_list|()
block|{
return|return
name|currentScannerCallable
operator|.
name|getExceptionMessageAdditionalDetail
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|sleep
parameter_list|(
name|long
name|pause
parameter_list|,
name|int
name|tries
parameter_list|)
block|{
return|return
name|currentScannerCallable
operator|.
name|sleep
argument_list|(
name|pause
argument_list|,
name|tries
argument_list|)
return|;
block|}
block|}
end_class

end_unit

