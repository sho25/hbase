begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteStringer
import|;
end_import

begin_comment
comment|/**  * Utilities for handling coprocessor service calls.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|CoprocessorRpcUtils
block|{
comment|/**    * We assume that all HBase protobuf services share a common package name    * (defined in the .proto files).    */
specifier|private
specifier|static
name|String
name|hbaseServicePackage
decl_stmt|;
static|static
block|{
name|Descriptors
operator|.
name|ServiceDescriptor
name|clientService
init|=
name|ClientProtos
operator|.
name|ClientService
operator|.
name|getDescriptor
argument_list|()
decl_stmt|;
name|hbaseServicePackage
operator|=
name|clientService
operator|.
name|getFullName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|clientService
operator|.
name|getFullName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|clientService
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CoprocessorRpcUtils
parameter_list|()
block|{
comment|// private for utility class
block|}
comment|/**    * Returns the name to use for coprocessor service calls.  For core HBase services    * (in the hbase.pb protobuf package), this returns the unqualified name in order to provide    * backward compatibility across the package name change.  For all other services,    * the fully-qualified service name is used.    */
specifier|public
specifier|static
name|String
name|getServiceName
parameter_list|(
name|Descriptors
operator|.
name|ServiceDescriptor
name|service
parameter_list|)
block|{
if|if
condition|(
name|service
operator|.
name|getFullName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|hbaseServicePackage
argument_list|)
condition|)
block|{
return|return
name|service
operator|.
name|getName
argument_list|()
return|;
block|}
return|return
name|service
operator|.
name|getFullName
argument_list|()
return|;
block|}
comment|/**    * Returns a service call instance for the given coprocessor request.    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|CoprocessorServiceCall
name|buildServiceCall
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|Descriptors
operator|.
name|MethodDescriptor
name|method
parameter_list|,
name|Message
name|request
parameter_list|)
block|{
return|return
name|ClientProtos
operator|.
name|CoprocessorServiceCall
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRow
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|row
argument_list|)
argument_list|)
operator|.
name|setServiceName
argument_list|(
name|CoprocessorRpcUtils
operator|.
name|getServiceName
argument_list|(
name|method
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMethodName
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setRequest
argument_list|(
name|request
operator|.
name|toByteString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

