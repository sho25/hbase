begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
operator|.
name|REGION_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|UnknownProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnsafeByteOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|MethodDescriptor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|ServiceDescriptor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Utilities for handling coprocessor rpc service calls.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|CoprocessorRpcUtils
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CoprocessorRpcUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * We assume that all HBase protobuf services share a common package name    * (defined in the .proto files).    */
specifier|private
specifier|static
specifier|final
name|String
name|hbaseServicePackage
decl_stmt|;
static|static
block|{
name|Descriptors
operator|.
name|ServiceDescriptor
name|clientService
init|=
name|ClientProtos
operator|.
name|ClientService
operator|.
name|getDescriptor
argument_list|()
decl_stmt|;
name|hbaseServicePackage
operator|=
name|clientService
operator|.
name|getFullName
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|clientService
operator|.
name|getFullName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|clientService
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CoprocessorRpcUtils
parameter_list|()
block|{
comment|// private for utility class
block|}
comment|/**    * Returns the name to use for coprocessor service calls.  For core HBase services    * (in the hbase.pb protobuf package), this returns the unqualified name in order to provide    * backward compatibility across the package name change.  For all other services,    * the fully-qualified service name is used.    */
specifier|public
specifier|static
name|String
name|getServiceName
parameter_list|(
name|Descriptors
operator|.
name|ServiceDescriptor
name|service
parameter_list|)
block|{
if|if
condition|(
name|service
operator|.
name|getFullName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|hbaseServicePackage
argument_list|)
condition|)
block|{
return|return
name|service
operator|.
name|getName
argument_list|()
return|;
block|}
return|return
name|service
operator|.
name|getFullName
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|CoprocessorServiceRequest
name|getCoprocessorServiceRequest
parameter_list|(
specifier|final
name|Descriptors
operator|.
name|MethodDescriptor
name|method
parameter_list|,
specifier|final
name|Message
name|request
parameter_list|)
block|{
return|return
name|getCoprocessorServiceRequest
argument_list|(
name|method
argument_list|,
name|request
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CoprocessorServiceRequest
name|getCoprocessorServiceRequest
parameter_list|(
specifier|final
name|Descriptors
operator|.
name|MethodDescriptor
name|method
parameter_list|,
specifier|final
name|Message
name|request
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
block|{
return|return
name|CoprocessorServiceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCall
argument_list|(
name|getCoprocessorServiceCall
argument_list|(
name|method
argument_list|,
name|request
argument_list|,
name|row
argument_list|)
argument_list|)
operator|.
name|setRegion
argument_list|(
name|RequestConverter
operator|.
name|buildRegionSpecifier
argument_list|(
name|REGION_NAME
argument_list|,
name|regionName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|CoprocessorServiceCall
name|getCoprocessorServiceCall
parameter_list|(
specifier|final
name|Descriptors
operator|.
name|MethodDescriptor
name|method
parameter_list|,
specifier|final
name|Message
name|request
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
name|CoprocessorServiceCall
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRow
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|row
argument_list|)
argument_list|)
operator|.
name|setServiceName
argument_list|(
name|CoprocessorRpcUtils
operator|.
name|getServiceName
argument_list|(
name|method
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMethodName
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
comment|// TODO!!!!! Come back here after!!!!! This is a double copy of the request if I read
comment|// it right copying from non-shaded to shaded version!!!!!! FIXXXXX!!!!!
operator|.
name|setRequest
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|request
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|MethodDescriptor
name|getMethodDescriptor
parameter_list|(
specifier|final
name|String
name|methodName
parameter_list|,
specifier|final
name|ServiceDescriptor
name|serviceDesc
parameter_list|)
throws|throws
name|UnknownProtocolException
block|{
name|Descriptors
operator|.
name|MethodDescriptor
name|methodDesc
init|=
name|serviceDesc
operator|.
name|findMethodByName
argument_list|(
name|methodName
argument_list|)
decl_stmt|;
if|if
condition|(
name|methodDesc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownProtocolException
argument_list|(
literal|"Unknown method "
operator|+
name|methodName
operator|+
literal|" called on service "
operator|+
name|serviceDesc
operator|.
name|getFullName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|methodDesc
return|;
block|}
specifier|public
specifier|static
name|Message
name|getRequest
parameter_list|(
name|Service
name|service
parameter_list|,
name|Descriptors
operator|.
name|MethodDescriptor
name|methodDesc
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|shadedRequest
parameter_list|)
throws|throws
name|IOException
block|{
name|Message
operator|.
name|Builder
name|builderForType
init|=
name|service
operator|.
name|getRequestPrototype
argument_list|(
name|methodDesc
argument_list|)
operator|.
name|newBuilderForType
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
operator|.
name|mergeFrom
argument_list|(
name|builderForType
argument_list|,
comment|// TODO: COPY FROM SHADED TO NON_SHADED. DO I HAVE TOO?
name|shadedRequest
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builderForType
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Message
name|getResponse
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
name|result
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
name|responsePrototype
parameter_list|)
throws|throws
name|IOException
block|{
name|Message
name|response
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getValue
argument_list|()
operator|.
name|hasValue
argument_list|()
condition|)
block|{
name|Message
operator|.
name|Builder
name|builder
init|=
name|responsePrototype
operator|.
name|newBuilderForType
argument_list|()
decl_stmt|;
name|builder
operator|.
name|mergeFrom
argument_list|(
name|result
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|newInput
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|response
operator|=
name|responsePrototype
operator|.
name|getDefaultInstanceForType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Master Result is value="
operator|+
name|response
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
name|getResponse
parameter_list|(
specifier|final
name|Message
name|result
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
operator|.
name|Builder
name|builder
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setRegion
argument_list|(
name|RequestConverter
operator|.
name|buildRegionSpecifier
argument_list|(
name|RegionSpecifierType
operator|.
name|REGION_NAME
argument_list|,
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: UGLY COPY IN HERE!!!!
name|builder
operator|.
name|setValue
argument_list|(
name|builder
operator|.
name|getValueBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|result
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Simple {@link RpcCallback} implementation providing a    * {@link java.util.concurrent.Future}-like {@link BlockingRpcCallback#get()} method, which    * will block util the instance's {@link BlockingRpcCallback#run(Object)} method has been called.    * {@code R} is the RPC response type that will be passed to the {@link #run(Object)} method.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
comment|// Copy of BlockingRpcCallback but deriving from RpcCallback non-shaded.
specifier|public
specifier|static
class|class
name|BlockingRpcCallback
parameter_list|<
name|R
parameter_list|>
implements|implements
name|RpcCallback
argument_list|<
name|R
argument_list|>
block|{
specifier|private
name|R
name|result
decl_stmt|;
specifier|private
name|boolean
name|resultSet
init|=
literal|false
decl_stmt|;
comment|/**      * Called on completion of the RPC call with the response object, or {@code null} in the case of      * an error.      * @param parameter the response object or {@code null} if an error occurred      */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|R
name|parameter
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|result
operator|=
name|parameter
expr_stmt|;
name|resultSet
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns the parameter passed to {@link #run(Object)} or {@code null} if a null value was      * passed.  When used asynchronously, this method will block until the {@link #run(Object)}      * method has been called.      * @return the response object or {@code null} if no response was passed      */
specifier|public
specifier|synchronized
name|R
name|get
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
operator|!
name|resultSet
condition|)
block|{
try|try
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|InterruptedIOException
name|exception
init|=
operator|new
name|InterruptedIOException
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|exception
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
comment|/**    * Stores an exception encountered during RPC invocation so it can be passed back    * through to the client.    * @param controller the controller instance provided by the client when calling the service    * @param ioe the exception encountered    */
specifier|public
specifier|static
name|void
name|setControllerException
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|controller
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|controller
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerRpcController
condition|)
block|{
operator|(
operator|(
name|ServerRpcController
operator|)
name|controller
operator|)
operator|.
name|setFailedOn
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|controller
operator|.
name|setFailed
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ioe
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Retreivies exception stored during RPC invocation.    * @param controller the controller instance provided by the client when calling the service    * @return exception if any, or null; Will return DoNotRetryIOException for string represented    * failure causes in controller.    */
annotation|@
name|Nullable
specifier|public
specifier|static
name|IOException
name|getControllerException
parameter_list|(
name|RpcController
name|controller
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|controller
operator|==
literal|null
operator|||
operator|!
name|controller
operator|.
name|failed
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|controller
operator|instanceof
name|ServerRpcController
condition|)
block|{
return|return
operator|(
operator|(
name|ServerRpcController
operator|)
name|controller
operator|)
operator|.
name|getFailedOn
argument_list|()
return|;
block|}
return|return
operator|new
name|DoNotRetryIOException
argument_list|(
name|controller
operator|.
name|errorText
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

