begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|filterCells
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * A scan result cache for batched scan, i.e,  * {@code scan.getBatch()> 0&& !scan.getAllowPartialResults()}.  *<p>  * If user setBatch(5) and rpc returns 3+5+5+5+3 cells, we should return 5+5+5+5+1 to user. setBatch  * doesn't mean setAllowPartialResult(true).  * @since 2.0.0  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|BatchScanResultCache
implements|implements
name|ScanResultCache
block|{
specifier|private
specifier|final
name|int
name|batch
decl_stmt|;
comment|// used to filter out the cells that already returned to user as we always start from the
comment|// beginning of a row when retry.
specifier|private
name|Cell
name|lastCell
decl_stmt|;
specifier|private
name|boolean
name|lastResultPartial
decl_stmt|;
specifier|private
specifier|final
name|Deque
argument_list|<
name|Result
argument_list|>
name|partialResults
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|numCellsOfPartialResults
decl_stmt|;
specifier|private
name|int
name|numberOfCompleteRows
decl_stmt|;
specifier|public
name|BatchScanResultCache
parameter_list|(
name|int
name|batch
parameter_list|)
block|{
name|this
operator|.
name|batch
operator|=
name|batch
expr_stmt|;
block|}
specifier|private
name|void
name|recordLastResult
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
name|lastCell
operator|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
name|lastResultPartial
operator|=
name|result
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Result
name|createCompletedResult
parameter_list|()
throws|throws
name|IOException
block|{
name|numberOfCompleteRows
operator|++
expr_stmt|;
name|Result
name|result
init|=
name|Result
operator|.
name|createCompleteResult
argument_list|(
name|partialResults
argument_list|)
decl_stmt|;
name|partialResults
operator|.
name|clear
argument_list|()
expr_stmt|;
name|numCellsOfPartialResults
operator|=
literal|0
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Add new result to the partial list and return a batched Result if caching size exceed batching
comment|// limit. As the RS will also respect the scan.getBatch, we can make sure that we will get only
comment|// one Result back at most(or null, which means we do not have enough cells).
specifier|private
name|Result
name|regroupResults
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
name|partialResults
operator|.
name|addLast
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|numCellsOfPartialResults
operator|+=
name|result
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|numCellsOfPartialResults
operator|<
name|batch
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Cell
index|[]
name|cells
init|=
operator|new
name|Cell
index|[
name|batch
index|]
decl_stmt|;
name|int
name|cellCount
init|=
literal|0
decl_stmt|;
name|boolean
name|stale
init|=
literal|false
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|Result
name|r
init|=
name|partialResults
operator|.
name|pollFirst
argument_list|()
decl_stmt|;
name|stale
operator|=
name|stale
operator|||
name|r
operator|.
name|isStale
argument_list|()
expr_stmt|;
name|int
name|newCellCount
init|=
name|cellCount
operator|+
name|r
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|newCellCount
operator|>
name|batch
condition|)
block|{
comment|// We have more cells than expected, so split the current result
name|int
name|len
init|=
name|batch
operator|-
name|cellCount
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|r
operator|.
name|rawCells
argument_list|()
argument_list|,
literal|0
argument_list|,
name|cells
argument_list|,
name|cellCount
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|remainingCells
init|=
operator|new
name|Cell
index|[
name|r
operator|.
name|size
argument_list|()
operator|-
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|r
operator|.
name|rawCells
argument_list|()
argument_list|,
name|len
argument_list|,
name|remainingCells
argument_list|,
literal|0
argument_list|,
name|r
operator|.
name|size
argument_list|()
operator|-
name|len
argument_list|)
expr_stmt|;
name|partialResults
operator|.
name|addFirst
argument_list|(
name|Result
operator|.
name|create
argument_list|(
name|remainingCells
argument_list|,
name|r
operator|.
name|getExists
argument_list|()
argument_list|,
name|r
operator|.
name|isStale
argument_list|()
argument_list|,
name|r
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|r
operator|.
name|rawCells
argument_list|()
argument_list|,
literal|0
argument_list|,
name|cells
argument_list|,
name|cellCount
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|newCellCount
operator|==
name|batch
condition|)
block|{
break|break;
block|}
name|cellCount
operator|=
name|newCellCount
expr_stmt|;
block|}
name|numCellsOfPartialResults
operator|-=
name|batch
expr_stmt|;
return|return
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|,
literal|null
argument_list|,
name|stale
argument_list|,
name|result
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
operator|||
operator|!
name|partialResults
operator|.
name|isEmpty
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
index|[]
name|addAndGet
parameter_list|(
name|Result
index|[]
name|results
parameter_list|,
name|boolean
name|isHeartbeatMessage
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|results
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|isHeartbeatMessage
condition|)
block|{
if|if
condition|(
operator|!
name|partialResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|Result
index|[]
block|{
name|createCompletedResult
argument_list|()
block|}
return|;
block|}
if|if
condition|(
name|lastResultPartial
condition|)
block|{
comment|// An empty non heartbeat result indicate that there must be a row change. So if the
comment|// lastResultPartial is true then we need to increase numberOfCompleteRows.
name|numberOfCompleteRows
operator|++
expr_stmt|;
block|}
block|}
return|return
name|EMPTY_RESULT_ARRAY
return|;
block|}
name|List
argument_list|<
name|Result
argument_list|>
name|regroupedResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|results
control|)
block|{
name|result
operator|=
name|filterCells
argument_list|(
name|result
argument_list|,
name|lastCell
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|partialResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|partialResults
operator|.
name|peek
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
condition|)
block|{
comment|// there is a row change
name|regroupedResults
operator|.
name|add
argument_list|(
name|createCompletedResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|lastResultPartial
operator|&&
operator|!
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|lastCell
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
condition|)
block|{
comment|// As for batched scan we may return partial results to user if we reach the batch limit, so
comment|// here we need to use lastCell to determine if there is row change and increase
comment|// numberOfCompleteRows.
name|numberOfCompleteRows
operator|++
expr_stmt|;
block|}
comment|// check if we have a row change
if|if
condition|(
operator|!
name|partialResults
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|partialResults
operator|.
name|peek
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
condition|)
block|{
name|regroupedResults
operator|.
name|add
argument_list|(
name|createCompletedResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Result
name|regroupedResult
init|=
name|regroupResults
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|regroupedResult
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|regroupedResult
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
condition|)
block|{
name|numberOfCompleteRows
operator|++
expr_stmt|;
block|}
name|regroupedResults
operator|.
name|add
argument_list|(
name|regroupedResult
argument_list|)
expr_stmt|;
comment|// only update last cell when we actually return it to user.
name|recordLastResult
argument_list|(
name|regroupedResult
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
operator|&&
operator|!
name|partialResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// We are done for this row
name|regroupedResults
operator|.
name|add
argument_list|(
name|createCompletedResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|regroupedResults
operator|.
name|toArray
argument_list|(
operator|new
name|Result
index|[
literal|0
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|partialResults
operator|.
name|clear
argument_list|()
expr_stmt|;
name|numCellsOfPartialResults
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|numberOfCompleteRows
parameter_list|()
block|{
return|return
name|numberOfCompleteRows
return|;
block|}
block|}
end_class

end_unit

