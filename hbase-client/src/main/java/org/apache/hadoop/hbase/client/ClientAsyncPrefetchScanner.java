begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|calcEstimatedSize
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_comment
comment|/**  * ClientAsyncPrefetchScanner implements async scanner behaviour.  * Specifically, the cache used by this scanner is a concurrent queue which allows both  * the producer (hbase client) and consumer (application) to access the queue in parallel.  * The number of rows returned in a prefetch is defined by the caching factor and the result size  * factor.  * This class allocates a buffer cache, whose size is a function of both factors.  * The prefetch is invoked when the cache is halfÂ­filled, instead of waiting for it to be empty.  * This is defined in the method {@link ClientAsyncPrefetchScanner#prefetchCondition()}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ClientAsyncPrefetchScanner
extends|extends
name|ClientSimpleScanner
block|{
specifier|private
specifier|static
specifier|final
name|int
name|ESTIMATED_SINGLE_RESULT_SIZE
init|=
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_QUEUE_CAPACITY
init|=
literal|1024
decl_stmt|;
specifier|private
name|int
name|cacheCapacity
decl_stmt|;
specifier|private
name|AtomicLong
name|cacheSizeInBytes
decl_stmt|;
comment|// exception queue (from prefetch to main scan execution)
specifier|private
name|Queue
argument_list|<
name|Exception
argument_list|>
name|exceptionsQueue
decl_stmt|;
comment|// prefetch runnable object to be executed asynchronously
specifier|private
name|PrefetchRunnable
name|prefetchRunnable
decl_stmt|;
comment|// Boolean flag to ensure only a single prefetch is running (per scan)
comment|// We use atomic boolean to allow multiple concurrent threads to
comment|// consume records from the same cache, but still have a single prefetcher thread.
comment|// For a single consumer thread this can be replace with a native boolean.
specifier|private
name|AtomicBoolean
name|prefetchRunning
decl_stmt|;
comment|// an attribute for synchronizing close between scanner and prefetch threads
specifier|private
name|AtomicLong
name|closingThreadId
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NO_THREAD
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|ClientAsyncPrefetchScanner
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|TableName
name|name
parameter_list|,
name|ClusterConnection
name|connection
parameter_list|,
name|RpcRetryingCallerFactory
name|rpcCallerFactory
parameter_list|,
name|RpcControllerFactory
name|rpcControllerFactory
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|int
name|replicaCallTimeoutMicroSecondScan
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|configuration
argument_list|,
name|scan
argument_list|,
name|name
argument_list|,
name|connection
argument_list|,
name|rpcCallerFactory
argument_list|,
name|rpcControllerFactory
argument_list|,
name|pool
argument_list|,
name|replicaCallTimeoutMicroSecondScan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initCache
parameter_list|()
block|{
comment|// concurrent cache
name|cacheCapacity
operator|=
name|calcCacheCapacity
argument_list|()
expr_stmt|;
name|cache
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Result
argument_list|>
argument_list|()
expr_stmt|;
name|cacheSizeInBytes
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|exceptionsQueue
operator|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|Exception
argument_list|>
argument_list|()
expr_stmt|;
name|prefetchRunnable
operator|=
operator|new
name|PrefetchRunnable
argument_list|()
expr_stmt|;
name|prefetchRunning
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|closingThreadId
operator|=
operator|new
name|AtomicLong
argument_list|(
name|NO_THREAD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|next
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|handleException
argument_list|()
expr_stmt|;
comment|// If the scanner is closed and there's nothing left in the cache, next is a no-op.
if|if
condition|(
name|getCacheCount
argument_list|()
operator|==
literal|0
operator|&&
name|this
operator|.
name|closed
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|prefetchCondition
argument_list|()
condition|)
block|{
comment|// run prefetch in the background only if no prefetch is already running
if|if
condition|(
operator|!
name|isPrefetchRunning
argument_list|()
condition|)
block|{
if|if
condition|(
name|prefetchRunning
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|getPool
argument_list|()
operator|.
name|execute
argument_list|(
name|prefetchRunnable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
while|while
condition|(
name|isPrefetchRunning
argument_list|()
condition|)
block|{
comment|// prefetch running or still pending
if|if
condition|(
name|getCacheCount
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|pollCache
argument_list|()
return|;
block|}
else|else
block|{
comment|// (busy) wait for a record - sleep
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getCacheCount
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|pollCache
argument_list|()
return|;
block|}
comment|// if we exhausted this scanner before calling close, write out the scan metrics
name|writeScanMetrics
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|handleException
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
operator|!
name|scanMetricsPublished
condition|)
name|writeScanMetrics
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|isPrefetchRunning
argument_list|()
condition|)
block|{
if|if
condition|(
name|closingThreadId
operator|.
name|compareAndSet
argument_list|(
name|NO_THREAD
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// else do nothing since the async prefetch still needs this resources
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCacheCount
parameter_list|()
block|{
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|int
name|size
init|=
name|cache
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|cacheCapacity
condition|)
block|{
name|cacheCapacity
operator|=
name|size
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addEstimatedSize
parameter_list|(
name|long
name|estimatedSize
parameter_list|)
block|{
name|cacheSizeInBytes
operator|.
name|addAndGet
argument_list|(
name|estimatedSize
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleException
parameter_list|()
throws|throws
name|IOException
block|{
comment|//The prefetch task running in the background puts any exception it
comment|//catches into this exception queue.
comment|// Rethrow the exception so the application can handle it.
while|while
condition|(
operator|!
name|exceptionsQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Exception
name|first
init|=
name|exceptionsQueue
operator|.
name|peek
argument_list|()
decl_stmt|;
name|first
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|first
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|first
throw|;
block|}
throw|throw
operator|(
name|RuntimeException
operator|)
name|first
throw|;
block|}
block|}
specifier|private
name|boolean
name|isPrefetchRunning
parameter_list|()
block|{
return|return
name|prefetchRunning
operator|.
name|get
argument_list|()
return|;
block|}
comment|// double buffer - double cache size
specifier|private
name|int
name|calcCacheCapacity
parameter_list|()
block|{
name|int
name|capacity
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|caching
operator|>
literal|0
operator|&&
name|caching
operator|<
operator|(
name|Integer
operator|.
name|MAX_VALUE
operator|/
literal|2
operator|)
condition|)
block|{
name|capacity
operator|=
name|caching
operator|*
literal|2
operator|+
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|capacity
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
if|if
condition|(
name|maxScannerResultSize
operator|!=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|capacity
operator|=
call|(
name|int
call|)
argument_list|(
name|maxScannerResultSize
operator|/
name|ESTIMATED_SINGLE_RESULT_SIZE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|capacity
operator|=
name|DEFAULT_QUEUE_CAPACITY
expr_stmt|;
block|}
block|}
return|return
name|Math
operator|.
name|max
argument_list|(
name|capacity
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|prefetchCondition
parameter_list|()
block|{
return|return
operator|(
name|getCacheCount
argument_list|()
operator|<
name|getCountThreshold
argument_list|()
operator|)
operator|&&
operator|(
name|maxScannerResultSize
operator|==
name|Long
operator|.
name|MAX_VALUE
operator|||
name|getCacheSizeInBytes
argument_list|()
operator|<
name|getSizeThreshold
argument_list|()
operator|)
return|;
block|}
specifier|private
name|int
name|getCountThreshold
parameter_list|()
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|cacheCapacity
operator|/
literal|2
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|private
name|long
name|getSizeThreshold
parameter_list|()
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|maxScannerResultSize
operator|/
literal|2
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|private
name|long
name|getCacheSizeInBytes
parameter_list|()
block|{
return|return
name|cacheSizeInBytes
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|Result
name|pollCache
parameter_list|()
block|{
name|Result
name|res
init|=
name|cache
operator|.
name|poll
argument_list|()
decl_stmt|;
name|long
name|estimatedSize
init|=
name|calcEstimatedSize
argument_list|(
name|res
argument_list|)
decl_stmt|;
name|addEstimatedSize
argument_list|(
operator|-
name|estimatedSize
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
specifier|private
class|class
name|PrefetchRunnable
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|loadCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exceptionsQueue
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|prefetchRunning
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|closed
condition|)
block|{
if|if
condition|(
name|closingThreadId
operator|.
name|compareAndSet
argument_list|(
name|NO_THREAD
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
comment|// close was waiting for the prefetch to end
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

