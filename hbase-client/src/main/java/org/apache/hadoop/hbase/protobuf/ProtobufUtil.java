begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Consistency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|PackagePrivateFieldAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|metrics
operator|.
name|ScanMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|TimeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetServerInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetServerInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|Column
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
operator|.
name|QualifierValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|DeleteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ComparatorProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|FilterProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|NameBytesPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MapReduceProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Addressing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteStringer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|DynamicClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ExceptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Methods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcChannel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_comment
comment|/**  * Protobufs utility.  * NOTE: This class OVERLAPS ProtobufUtil in the subpackage 'shaded'. The latter is used  * internally and has more methods. This Class is for Coprocessor Endpoints only though they  * should not be using this private class. It should not be depended upon. Most methods here  * are COPIED from the shaded ProtobufUtils with only difference being they refer to non-shaded  * protobufs.  * @see ProtobufUtil  */
end_comment

begin_comment
comment|// TODO: Generate this class from the shaded version.
end_comment

begin_class
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED"
argument_list|,
name|justification
operator|=
literal|"None. Address sometime."
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
comment|// TODO: some clients (Hive, etc) use this class.
specifier|public
specifier|final
class|class
name|ProtobufUtil
block|{
specifier|private
name|ProtobufUtil
parameter_list|()
block|{   }
comment|/**    * Primitive type to class mapping.    */
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|PRIMITIVES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Many results are simple: no cell, exists true or false. To save on object creations,    *  we reuse them across calls.    */
comment|// TODO: PICK THESE UP FROM THE SHADED PROTOBUF.
specifier|private
specifier|final
specifier|static
name|Cell
index|[]
name|EMPTY_CELL_ARRAY
init|=
operator|new
name|Cell
index|[]
block|{}
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT
init|=
name|Result
operator|.
name|create
argument_list|(
name|EMPTY_CELL_ARRAY
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_EXISTS_TRUE
init|=
name|Result
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_EXISTS_FALSE
init|=
name|Result
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_STALE
init|=
name|Result
operator|.
name|create
argument_list|(
name|EMPTY_CELL_ARRAY
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_EXISTS_TRUE_STALE
init|=
name|Result
operator|.
name|create
argument_list|(
operator|(
name|Cell
index|[]
operator|)
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_EXISTS_FALSE_STALE
init|=
name|Result
operator|.
name|create
argument_list|(
operator|(
name|Cell
index|[]
operator|)
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB_EXISTS_TRUE
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB_EXISTS_FALSE
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB_STALE
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB_EXISTS_TRUE_STALE
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB_EXISTS_FALSE_STALE
decl_stmt|;
static|static
block|{
name|ClientProtos
operator|.
name|Result
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Result
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setExists
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB_EXISTS_TRUE
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setStale
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB_EXISTS_TRUE_STALE
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setExists
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB_EXISTS_FALSE
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setStale
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB_EXISTS_FALSE_STALE
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setStale
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB_STALE
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|/**    * Dynamic class loader to load filter/comparators    */
specifier|private
specifier|final
specifier|static
name|ClassLoader
name|CLASS_LOADER
decl_stmt|;
static|static
block|{
name|ClassLoader
name|parent
init|=
name|ProtobufUtil
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|CLASS_LOADER
operator|=
operator|new
name|DynamicClassLoader
argument_list|(
name|conf
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Byte
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Character
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Character
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Short
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Short
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Long
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Long
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Float
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Float
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Double
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Double
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Void
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Void
operator|.
name|TYPE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prepend the passed bytes with four bytes of magic, {@link ProtobufMagic#PB_MAGIC},    * to flag what follows as a protobuf in hbase.  Prepend these bytes to all content written to    * znodes, etc.    * @param bytes Bytes to decorate    * @return The passed<code>bytes</code> with magic prepended (Creates a new    * byte array that is<code>bytes.length</code> plus {@link ProtobufMagic#PB_MAGIC}.length.    */
specifier|public
specifier|static
name|byte
index|[]
name|prependPBMagic
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|add
argument_list|(
name|ProtobufMagic
operator|.
name|PB_MAGIC
argument_list|,
name|bytes
argument_list|)
return|;
block|}
comment|/**    * @param bytes Bytes to check.    * @return True if passed<code>bytes</code> has {@link ProtobufMagic#PB_MAGIC} for a prefix.    */
specifier|public
specifier|static
name|boolean
name|isPBMagicPrefix
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|ProtobufMagic
operator|.
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
return|;
block|}
comment|/**    * @param bytes Bytes to check.    * @param offset offset to start at    * @param len length to use    * @return True if passed<code>bytes</code> has {@link ProtobufMagic#PB_MAGIC} for a prefix.    */
specifier|public
specifier|static
name|boolean
name|isPBMagicPrefix
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
name|ProtobufMagic
operator|.
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
return|;
block|}
comment|/**    * @param bytes bytes to check    * @throws DeserializationException if we are missing the pb magic prefix    */
specifier|public
specifier|static
name|void
name|expectPBMagicPrefix
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
operator|!
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
literal|"Missing pb magic "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|ProtobufMagic
operator|.
name|PB_MAGIC
argument_list|)
operator|+
literal|" prefix"
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return Length of {@link ProtobufMagic#lengthOfPBMagic()}    */
specifier|public
specifier|static
name|int
name|lengthOfPBMagic
parameter_list|()
block|{
return|return
name|ProtobufMagic
operator|.
name|lengthOfPBMagic
argument_list|()
return|;
block|}
comment|/**    * Return the IOException thrown by the remote server wrapped in    * ServiceException as cause.    *    * @param se ServiceException that wraps IO exception thrown by the server    * @return Exception wrapped in ServiceException or    *   a new IOException that wraps the unexpected ServiceException.    */
specifier|public
specifier|static
name|IOException
name|getRemoteException
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
return|return
name|makeIOExceptionOfException
argument_list|(
name|se
argument_list|)
return|;
block|}
comment|/**    * Like {@link #getRemoteException(ServiceException)} but more generic, able to handle more than    * just {@link ServiceException}. Prefer this method to    * {@link #getRemoteException(ServiceException)} because trying to    * contain direct protobuf references.    * @param e    */
specifier|public
specifier|static
name|IOException
name|handleRemoteException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|makeIOExceptionOfException
argument_list|(
name|e
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|IOException
name|makeIOExceptionOfException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|e
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|ServiceException
operator|||
name|e
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
condition|)
block|{
name|t
operator|=
name|e
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ExceptionUtil
operator|.
name|isInterrupt
argument_list|(
name|t
argument_list|)
condition|)
block|{
return|return
name|ExceptionUtil
operator|.
name|asInterrupt
argument_list|(
name|t
argument_list|)
return|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|RemoteException
condition|)
block|{
name|t
operator|=
operator|(
operator|(
name|RemoteException
operator|)
name|t
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
expr_stmt|;
block|}
return|return
name|t
operator|instanceof
name|IOException
condition|?
operator|(
name|IOException
operator|)
name|t
else|:
operator|new
name|HBaseIOException
argument_list|(
name|t
argument_list|)
return|;
block|}
comment|/**    * Convert a ServerName to a protocol buffer ServerName    *    * @param serverName the ServerName to convert    * @return the converted protocol buffer ServerName    * @see #toServerName(org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.ServerName)    */
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|ServerName
name|toServerName
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|Builder
name|builder
init|=
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setHostName
argument_list|(
name|serverName
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverName
operator|.
name|getPort
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|setPort
argument_list|(
name|serverName
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serverName
operator|.
name|getStartcode
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|setStartCode
argument_list|(
name|serverName
operator|.
name|getStartcode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer ServerName to a ServerName    *    * @param proto the protocol buffer ServerName to convert    * @return the converted ServerName    */
specifier|public
specifier|static
name|ServerName
name|toServerName
parameter_list|(
specifier|final
name|HBaseProtos
operator|.
name|ServerName
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|hostName
init|=
name|proto
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|long
name|startCode
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|port
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasPort
argument_list|()
condition|)
block|{
name|port
operator|=
name|proto
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStartCode
argument_list|()
condition|)
block|{
name|startCode
operator|=
name|proto
operator|.
name|getStartCode
argument_list|()
expr_stmt|;
block|}
return|return
name|ServerName
operator|.
name|valueOf
argument_list|(
name|hostName
argument_list|,
name|port
argument_list|,
name|startCode
argument_list|)
return|;
block|}
comment|/**    * Convert a protobuf Durability into a client Durability    */
specifier|public
specifier|static
name|Durability
name|toDurability
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|USE_DEFAULT
case|:
return|return
name|Durability
operator|.
name|USE_DEFAULT
return|;
case|case
name|SKIP_WAL
case|:
return|return
name|Durability
operator|.
name|SKIP_WAL
return|;
case|case
name|ASYNC_WAL
case|:
return|return
name|Durability
operator|.
name|ASYNC_WAL
return|;
case|case
name|SYNC_WAL
case|:
return|return
name|Durability
operator|.
name|SYNC_WAL
return|;
case|case
name|FSYNC_WAL
case|:
return|return
name|Durability
operator|.
name|FSYNC_WAL
return|;
default|default:
return|return
name|Durability
operator|.
name|USE_DEFAULT
return|;
block|}
block|}
comment|/**    * Convert a client Durability into a protbuf Durability    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
name|toDurability
parameter_list|(
specifier|final
name|Durability
name|d
parameter_list|)
block|{
switch|switch
condition|(
name|d
condition|)
block|{
case|case
name|USE_DEFAULT
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|USE_DEFAULT
return|;
case|case
name|SKIP_WAL
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|SKIP_WAL
return|;
case|case
name|ASYNC_WAL
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|ASYNC_WAL
return|;
case|case
name|SYNC_WAL
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|SYNC_WAL
return|;
case|case
name|FSYNC_WAL
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|FSYNC_WAL
return|;
default|default:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|USE_DEFAULT
return|;
block|}
block|}
comment|/**    * Convert a protocol buffer Get to a client Get    *    * @param proto the protocol buffer Get to convert    * @return the converted client Get    * @throws IOException    */
specifier|public
specifier|static
name|Get
name|toGet
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Get
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasCacheBlocks
argument_list|()
condition|)
block|{
name|get
operator|.
name|setCacheBlocks
argument_list|(
name|proto
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMaxVersions
argument_list|()
condition|)
block|{
name|get
operator|.
name|setMaxVersions
argument_list|(
name|proto
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStoreLimit
argument_list|()
condition|)
block|{
name|get
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
name|proto
operator|.
name|getStoreLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStoreOffset
argument_list|()
condition|)
block|{
name|get
operator|.
name|setRowOffsetPerColumnFamily
argument_list|(
name|proto
operator|.
name|getStoreOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getCfTimeRangeCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|HBaseProtos
operator|.
name|ColumnFamilyTimeRange
name|cftr
range|:
name|proto
operator|.
name|getCfTimeRangeList
argument_list|()
control|)
block|{
name|TimeRange
name|timeRange
init|=
name|protoToTimeRange
argument_list|(
name|cftr
operator|.
name|getTimeRange
argument_list|()
argument_list|)
decl_stmt|;
name|get
operator|.
name|setColumnFamilyTimeRange
argument_list|(
name|cftr
operator|.
name|getColumnFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|timeRange
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|proto
operator|.
name|hasTimeRange
argument_list|()
condition|)
block|{
name|TimeRange
name|timeRange
init|=
name|protoToTimeRange
argument_list|(
name|proto
operator|.
name|getTimeRange
argument_list|()
argument_list|)
decl_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|timeRange
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|FilterProtos
operator|.
name|Filter
name|filter
init|=
name|proto
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|get
operator|.
name|setFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|get
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getColumnCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Column
name|column
range|:
name|proto
operator|.
name|getColumnList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|.
name|getQualifierCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ByteString
name|qualifier
range|:
name|column
operator|.
name|getQualifierList
argument_list|()
control|)
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|proto
operator|.
name|hasExistenceOnly
argument_list|()
operator|&&
name|proto
operator|.
name|getExistenceOnly
argument_list|()
condition|)
block|{
name|get
operator|.
name|setCheckExistenceOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasConsistency
argument_list|()
condition|)
block|{
name|get
operator|.
name|setConsistency
argument_list|(
name|toConsistency
argument_list|(
name|proto
operator|.
name|getConsistency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasLoadColumnFamiliesOnDemand
argument_list|()
condition|)
block|{
name|get
operator|.
name|setLoadColumnFamiliesOnDemand
argument_list|(
name|proto
operator|.
name|getLoadColumnFamiliesOnDemand
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|get
return|;
block|}
specifier|public
specifier|static
name|Consistency
name|toConsistency
parameter_list|(
name|ClientProtos
operator|.
name|Consistency
name|consistency
parameter_list|)
block|{
switch|switch
condition|(
name|consistency
condition|)
block|{
case|case
name|STRONG
case|:
return|return
name|Consistency
operator|.
name|STRONG
return|;
case|case
name|TIMELINE
case|:
return|return
name|Consistency
operator|.
name|TIMELINE
return|;
default|default :
return|return
name|Consistency
operator|.
name|STRONG
return|;
block|}
block|}
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Consistency
name|toConsistency
parameter_list|(
name|Consistency
name|consistency
parameter_list|)
block|{
switch|switch
condition|(
name|consistency
condition|)
block|{
case|case
name|STRONG
case|:
return|return
name|ClientProtos
operator|.
name|Consistency
operator|.
name|STRONG
return|;
case|case
name|TIMELINE
case|:
return|return
name|ClientProtos
operator|.
name|Consistency
operator|.
name|TIMELINE
return|;
default|default :
return|return
name|ClientProtos
operator|.
name|Consistency
operator|.
name|STRONG
return|;
block|}
block|}
comment|/**    * Convert a protocol buffer Mutate to a Put.    *    * @param proto The protocol buffer MutationProto to convert    * @return A client Put.    * @throws IOException    */
specifier|public
specifier|static
name|Put
name|toPut
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toPut
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Put.    *    * @param proto The protocol buffer MutationProto to convert    * @param cellScanner If non-null, the Cell data that goes with this proto.    * @return A client Put.    * @throws IOException    */
specifier|public
specifier|static
name|Put
name|toPut
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: Server-side at least why do we convert back to the Client types?  Why not just pb it?
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutationType
operator|.
name|PUT
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|long
name|timestamp
init|=
name|proto
operator|.
name|hasTimestamp
argument_list|()
condition|?
name|proto
operator|.
name|getTimestamp
argument_list|()
else|:
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
name|Put
name|put
init|=
name|proto
operator|.
name|hasRow
argument_list|()
condition|?
operator|new
name|Put
argument_list|(
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|timestamp
argument_list|)
else|:
literal|null
decl_stmt|;
name|int
name|cellCount
init|=
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|?
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cellCount
operator|>
literal|0
condition|)
block|{
comment|// The proto has metadata only and the data is separate to be found in the cellScanner.
if|if
condition|(
name|cellScanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but no cellScanner: "
operator|+
name|toShortString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but at index "
operator|+
name|i
operator|+
literal|" no cell returned: "
operator|+
name|toShortString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|put
operator|==
literal|null
condition|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|put
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|put
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"row cannot be null"
argument_list|)
throw|;
block|}
comment|// The proto has the metadata and the data itself
for|for
control|(
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|qv
operator|.
name|hasValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required field: qualifier value"
argument_list|)
throw|;
block|}
name|ByteBuffer
name|qualifier
init|=
name|qv
operator|.
name|hasQualifier
argument_list|()
condition|?
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
else|:
literal|null
decl_stmt|;
name|ByteBuffer
name|value
init|=
name|qv
operator|.
name|hasValue
argument_list|()
condition|?
name|qv
operator|.
name|getValue
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
else|:
literal|null
decl_stmt|;
name|long
name|ts
init|=
name|timestamp
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTimestamp
argument_list|()
condition|)
block|{
name|ts
operator|=
name|qv
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|allTagsBytes
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTags
argument_list|()
condition|)
block|{
name|allTagsBytes
operator|=
name|qv
operator|.
name|getTags
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasDeleteType
argument_list|()
condition|)
block|{
name|byte
index|[]
name|qual
init|=
name|qv
operator|.
name|hasQualifier
argument_list|()
condition|?
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|family
argument_list|,
name|qual
argument_list|,
name|ts
argument_list|,
name|fromDeleteType
argument_list|(
name|qv
operator|.
name|getDeleteType
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|allTagsBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
name|TagUtil
operator|.
name|asList
argument_list|(
name|allTagsBytes
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
name|allTagsBytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|Tag
index|[]
name|tagsArray
init|=
operator|new
name|Tag
index|[
name|tags
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|put
operator|.
name|addImmutable
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|,
name|value
argument_list|,
name|tags
operator|.
name|toArray
argument_list|(
name|tagsArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|qv
operator|.
name|hasDeleteType
argument_list|()
condition|)
block|{
name|byte
index|[]
name|qual
init|=
name|qv
operator|.
name|hasQualifier
argument_list|()
condition|?
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|family
argument_list|,
name|qual
argument_list|,
name|ts
argument_list|,
name|fromDeleteType
argument_list|(
name|qv
operator|.
name|getDeleteType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|addImmutable
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|put
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|proto
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|put
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|put
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Delete    *    * @param proto the protocol buffer Mutate to convert    * @return the converted client Delete    * @throws IOException    */
specifier|public
specifier|static
name|Delete
name|toDelete
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toDelete
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Delete    *    * @param proto the protocol buffer Mutate to convert    * @param cellScanner if non-null, the data that goes with this delete.    * @return the converted client Delete    * @throws IOException    */
specifier|public
specifier|static
name|Delete
name|toDelete
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutationType
operator|.
name|DELETE
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|long
name|timestamp
init|=
name|proto
operator|.
name|hasTimestamp
argument_list|()
condition|?
name|proto
operator|.
name|getTimestamp
argument_list|()
else|:
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
name|Delete
name|delete
init|=
name|proto
operator|.
name|hasRow
argument_list|()
condition|?
operator|new
name|Delete
argument_list|(
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|timestamp
argument_list|)
else|:
literal|null
decl_stmt|;
name|int
name|cellCount
init|=
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|?
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cellCount
operator|>
literal|0
condition|)
block|{
comment|// The proto has metadata only and the data is separate to be found in the cellScanner.
if|if
condition|(
name|cellScanner
operator|==
literal|null
condition|)
block|{
comment|// TextFormat should be fine for a Delete since it carries no data, just coordinates.
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but no cellScanner: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
comment|// TextFormat should be fine for a Delete since it carries no data, just coordinates.
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but at index "
operator|+
name|i
operator|+
literal|" no cell returned: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|delete
operator|==
literal|null
condition|)
block|{
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|delete
operator|.
name|addDeleteMarker
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|delete
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"row cannot be null"
argument_list|)
throw|;
block|}
for|for
control|(
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
name|DeleteType
name|deleteType
init|=
name|qv
operator|.
name|getDeleteType
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasQualifier
argument_list|()
condition|)
block|{
name|qualifier
operator|=
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|long
name|ts
init|=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTimestamp
argument_list|()
condition|)
block|{
name|ts
operator|=
name|qv
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|==
name|DeleteType
operator|.
name|DELETE_ONE_VERSION
condition|)
block|{
name|delete
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteType
operator|==
name|DeleteType
operator|.
name|DELETE_MULTIPLE_VERSIONS
condition|)
block|{
name|delete
operator|.
name|addColumns
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteType
operator|==
name|DeleteType
operator|.
name|DELETE_FAMILY_VERSION
condition|)
block|{
name|delete
operator|.
name|addFamilyVersion
argument_list|(
name|family
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|addFamily
argument_list|(
name|family
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|delete
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|proto
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|delete
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|delete
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to an Append    * @param cellScanner    * @param proto the protocol buffer Mutate to convert    * @return the converted client Append    * @throws IOException    */
specifier|public
specifier|static
name|Append
name|toAppend
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutationType
operator|.
name|APPEND
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|hasRow
argument_list|()
condition|?
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
name|Append
name|append
init|=
literal|null
decl_stmt|;
name|int
name|cellCount
init|=
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|?
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cellCount
operator|>
literal|0
condition|)
block|{
comment|// The proto has metadata only and the data is separate to be found in the cellScanner.
if|if
condition|(
name|cellScanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but no cellScanner: "
operator|+
name|toShortString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but at index "
operator|+
name|i
operator|+
literal|" no cell returned: "
operator|+
name|toShortString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|append
operator|==
literal|null
condition|)
block|{
name|append
operator|=
operator|new
name|Append
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|append
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|append
operator|=
operator|new
name|Append
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qv
operator|.
name|hasValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required field: qualifier value"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|value
init|=
name|qv
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tags
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTags
argument_list|()
condition|)
block|{
name|tags
operator|=
name|qv
operator|.
name|getTags
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|append
operator|.
name|add
argument_list|(
name|CellUtil
operator|.
name|createCell
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|qv
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|value
argument_list|,
name|tags
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|append
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|proto
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|append
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|append
return|;
block|}
comment|/**    * Convert a MutateRequest to Mutation    *    * @param proto the protocol buffer Mutate to convert    * @return the converted Mutation    * @throws IOException    */
specifier|public
specifier|static
name|Mutation
name|toMutation
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|MutationType
operator|.
name|APPEND
condition|)
block|{
return|return
name|toAppend
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|MutationType
operator|.
name|DELETE
condition|)
block|{
return|return
name|toDelete
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|MutationType
operator|.
name|PUT
condition|)
block|{
return|return
name|toPut
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown mutation type "
operator|+
name|type
argument_list|)
throw|;
block|}
comment|/**    * Convert a protocol buffer Mutate to an Increment    *    * @param proto the protocol buffer Mutate to convert    * @return the converted client Increment    * @throws IOException    */
specifier|public
specifier|static
name|Increment
name|toIncrement
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutationType
operator|.
name|INCREMENT
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|hasRow
argument_list|()
condition|?
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
name|Increment
name|increment
init|=
literal|null
decl_stmt|;
name|int
name|cellCount
init|=
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|?
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cellCount
operator|>
literal|0
condition|)
block|{
comment|// The proto has metadata only and the data is separate to be found in the cellScanner.
if|if
condition|(
name|cellScanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but no cellScanner: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but at index "
operator|+
name|i
operator|+
literal|" no cell returned: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|increment
operator|==
literal|null
condition|)
block|{
name|increment
operator|=
operator|new
name|Increment
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|increment
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|increment
operator|=
operator|new
name|Increment
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qv
operator|.
name|hasValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required field: qualifier value"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|value
init|=
name|qv
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tags
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTags
argument_list|()
condition|)
block|{
name|tags
operator|=
name|qv
operator|.
name|getTags
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|increment
operator|.
name|add
argument_list|(
name|CellUtil
operator|.
name|createCell
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|qv
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|value
argument_list|,
name|tags
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|proto
operator|.
name|hasTimeRange
argument_list|()
condition|)
block|{
name|TimeRange
name|timeRange
init|=
name|protoToTimeRange
argument_list|(
name|proto
operator|.
name|getTimeRange
argument_list|()
argument_list|)
decl_stmt|;
name|increment
operator|.
name|setTimeRange
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|,
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|increment
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|proto
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|increment
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|increment
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Get.    * @param proto the protocol buffer Mutate to convert.    * @param cellScanner    * @return the converted client get.    * @throws IOException    */
specifier|public
specifier|static
name|Get
name|toGet
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutationType
operator|.
name|INCREMENT
operator|||
name|type
operator|==
name|MutationType
operator|.
name|APPEND
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|hasRow
argument_list|()
condition|?
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
name|Get
name|get
init|=
literal|null
decl_stmt|;
name|int
name|cellCount
init|=
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|?
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cellCount
operator|>
literal|0
condition|)
block|{
comment|// The proto has metadata only and the data is separate to be found in the cellScanner.
if|if
condition|(
name|cellScanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but no cellScanner: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but at index "
operator|+
name|i
operator|+
literal|" no cell returned: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|get
operator|==
literal|null
condition|)
block|{
name|get
operator|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|copy
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|get
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|copy
argument_list|(
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
argument_list|,
name|Bytes
operator|.
name|copy
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qv
operator|.
name|hasValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required field: qualifier value"
argument_list|)
throw|;
block|}
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|proto
operator|.
name|hasTimeRange
argument_list|()
condition|)
block|{
name|TimeRange
name|timeRange
init|=
name|protoToTimeRange
argument_list|(
name|proto
operator|.
name|getTimeRange
argument_list|()
argument_list|)
decl_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|timeRange
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|get
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|get
return|;
block|}
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Scan
operator|.
name|ReadType
name|toReadType
parameter_list|(
name|Scan
operator|.
name|ReadType
name|readType
parameter_list|)
block|{
switch|switch
condition|(
name|readType
condition|)
block|{
case|case
name|DEFAULT
case|:
return|return
name|ClientProtos
operator|.
name|Scan
operator|.
name|ReadType
operator|.
name|DEFAULT
return|;
case|case
name|STREAM
case|:
return|return
name|ClientProtos
operator|.
name|Scan
operator|.
name|ReadType
operator|.
name|STREAM
return|;
case|case
name|PREAD
case|:
return|return
name|ClientProtos
operator|.
name|Scan
operator|.
name|ReadType
operator|.
name|PREAD
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown ReadType: "
operator|+
name|readType
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Scan
operator|.
name|ReadType
name|toReadType
parameter_list|(
name|ClientProtos
operator|.
name|Scan
operator|.
name|ReadType
name|readType
parameter_list|)
block|{
switch|switch
condition|(
name|readType
condition|)
block|{
case|case
name|DEFAULT
case|:
return|return
name|Scan
operator|.
name|ReadType
operator|.
name|DEFAULT
return|;
case|case
name|STREAM
case|:
return|return
name|Scan
operator|.
name|ReadType
operator|.
name|STREAM
return|;
case|case
name|PREAD
case|:
return|return
name|Scan
operator|.
name|ReadType
operator|.
name|PREAD
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown ReadType: "
operator|+
name|readType
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a client Scan to a protocol buffer Scan    *    * @param scan the client Scan to convert    * @return the converted protocol buffer Scan    * @throws IOException    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Scan
name|toScan
parameter_list|(
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientProtos
operator|.
name|Scan
operator|.
name|Builder
name|scanBuilder
init|=
name|ClientProtos
operator|.
name|Scan
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|scanBuilder
operator|.
name|setCacheBlocks
argument_list|(
name|scan
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|scan
operator|.
name|getBatch
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setBatchSize
argument_list|(
name|scan
operator|.
name|getBatch
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getMaxResultSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setMaxResultSize
argument_list|(
name|scan
operator|.
name|getMaxResultSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|isSmall
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setSmall
argument_list|(
name|scan
operator|.
name|isSmall
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getAllowPartialResults
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setAllowPartialResults
argument_list|(
name|scan
operator|.
name|getAllowPartialResults
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|loadColumnFamiliesOnDemand
init|=
name|scan
operator|.
name|getLoadColumnFamiliesOnDemandValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|loadColumnFamiliesOnDemand
operator|!=
literal|null
condition|)
block|{
name|scanBuilder
operator|.
name|setLoadColumnFamiliesOnDemand
argument_list|(
name|loadColumnFamiliesOnDemand
argument_list|)
expr_stmt|;
block|}
name|scanBuilder
operator|.
name|setMaxVersions
argument_list|(
name|scan
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|TimeRange
argument_list|>
name|cftr
range|:
name|scan
operator|.
name|getColumnFamilyTimeRange
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HBaseProtos
operator|.
name|ColumnFamilyTimeRange
operator|.
name|Builder
name|b
init|=
name|HBaseProtos
operator|.
name|ColumnFamilyTimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|setColumnFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|cftr
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|setTimeRange
argument_list|(
name|timeRangeToProto
argument_list|(
name|cftr
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scanBuilder
operator|.
name|addCfTimeRange
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|TimeRange
name|timeRange
init|=
name|scan
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|timeRange
operator|.
name|isAllTime
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|Builder
name|timeRangeBuilder
init|=
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|timeRangeBuilder
operator|.
name|setFrom
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|timeRangeBuilder
operator|.
name|setTo
argument_list|(
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|scanBuilder
operator|.
name|setTimeRange
argument_list|(
name|timeRangeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attributes
init|=
name|scan
operator|.
name|getAttributesMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NameBytesPair
operator|.
name|Builder
name|attributeBuilder
init|=
name|NameBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|attributeBuilder
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|attributeBuilder
operator|.
name|setValue
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scanBuilder
operator|.
name|addAttribute
argument_list|(
name|attributeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|byte
index|[]
name|startRow
init|=
name|scan
operator|.
name|getStartRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|startRow
operator|!=
literal|null
operator|&&
name|startRow
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setStartRow
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|stopRow
init|=
name|scan
operator|.
name|getStopRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|stopRow
operator|!=
literal|null
operator|&&
name|stopRow
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setStopRow
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|scan
operator|.
name|getFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|hasFamilies
argument_list|()
condition|)
block|{
name|Column
operator|.
name|Builder
name|columnBuilder
init|=
name|Column
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|family
range|:
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|columnBuilder
operator|.
name|setFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
name|family
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|columnBuilder
operator|.
name|clearQualifier
argument_list|()
expr_stmt|;
if|if
condition|(
name|qualifiers
operator|!=
literal|null
operator|&&
name|qualifiers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|qualifiers
control|)
block|{
name|columnBuilder
operator|.
name|addQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|scanBuilder
operator|.
name|addColumn
argument_list|(
name|columnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|scan
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setStoreLimit
argument_list|(
name|scan
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setStoreOffset
argument_list|(
name|scan
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|isReversed
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setReversed
argument_list|(
name|scan
operator|.
name|isReversed
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getConsistency
argument_list|()
operator|==
name|Consistency
operator|.
name|TIMELINE
condition|)
block|{
name|scanBuilder
operator|.
name|setConsistency
argument_list|(
name|toConsistency
argument_list|(
name|scan
operator|.
name|getConsistency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getCaching
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setCaching
argument_list|(
name|scan
operator|.
name|getCaching
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|mvccReadPoint
init|=
name|PackagePrivateFieldAccessor
operator|.
name|getMvccReadPoint
argument_list|(
name|scan
argument_list|)
decl_stmt|;
if|if
condition|(
name|mvccReadPoint
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setMvccReadPoint
argument_list|(
name|mvccReadPoint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|scan
operator|.
name|includeStartRow
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setIncludeStartRow
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|includeStopRow
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setIncludeStopRow
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getReadType
argument_list|()
operator|!=
name|Scan
operator|.
name|ReadType
operator|.
name|DEFAULT
condition|)
block|{
name|scanBuilder
operator|.
name|setReadType
argument_list|(
name|toReadType
argument_list|(
name|scan
operator|.
name|getReadType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|scanBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer Scan to a client Scan    *    * @param proto the protocol buffer Scan to convert    * @return the converted client Scan    * @throws IOException    */
specifier|public
specifier|static
name|Scan
name|toScan
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Scan
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|startRow
init|=
name|HConstants
operator|.
name|EMPTY_START_ROW
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
name|HConstants
operator|.
name|EMPTY_END_ROW
decl_stmt|;
name|boolean
name|includeStartRow
init|=
literal|true
decl_stmt|;
name|boolean
name|includeStopRow
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasStartRow
argument_list|()
condition|)
block|{
name|startRow
operator|=
name|proto
operator|.
name|getStartRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStopRow
argument_list|()
condition|)
block|{
name|stopRow
operator|=
name|proto
operator|.
name|getStopRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasIncludeStartRow
argument_list|()
condition|)
block|{
name|includeStartRow
operator|=
name|proto
operator|.
name|getIncludeStartRow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasIncludeStopRow
argument_list|()
condition|)
block|{
name|includeStopRow
operator|=
name|proto
operator|.
name|getIncludeStopRow
argument_list|()
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|startRow
argument_list|,
name|includeStartRow
argument_list|)
operator|.
name|withStopRow
argument_list|(
name|stopRow
argument_list|,
name|includeStopRow
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasCacheBlocks
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setCacheBlocks
argument_list|(
name|proto
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMaxVersions
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|proto
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStoreLimit
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
name|proto
operator|.
name|getStoreLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStoreOffset
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setRowOffsetPerColumnFamily
argument_list|(
name|proto
operator|.
name|getStoreOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasLoadColumnFamiliesOnDemand
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setLoadColumnFamiliesOnDemand
argument_list|(
name|proto
operator|.
name|getLoadColumnFamiliesOnDemand
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getCfTimeRangeCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|HBaseProtos
operator|.
name|ColumnFamilyTimeRange
name|cftr
range|:
name|proto
operator|.
name|getCfTimeRangeList
argument_list|()
control|)
block|{
name|TimeRange
name|timeRange
init|=
name|protoToTimeRange
argument_list|(
name|cftr
operator|.
name|getTimeRange
argument_list|()
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setColumnFamilyTimeRange
argument_list|(
name|cftr
operator|.
name|getColumnFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|timeRange
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|proto
operator|.
name|hasTimeRange
argument_list|()
condition|)
block|{
name|TimeRange
name|timeRange
init|=
name|protoToTimeRange
argument_list|(
name|proto
operator|.
name|getTimeRange
argument_list|()
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|timeRange
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|FilterProtos
operator|.
name|Filter
name|filter
init|=
name|proto
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasBatchSize
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setBatch
argument_list|(
name|proto
operator|.
name|getBatchSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMaxResultSize
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setMaxResultSize
argument_list|(
name|proto
operator|.
name|getMaxResultSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasSmall
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setSmall
argument_list|(
name|proto
operator|.
name|getSmall
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasAllowPartialResults
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setAllowPartialResults
argument_list|(
name|proto
operator|.
name|getAllowPartialResults
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|scan
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getColumnCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Column
name|column
range|:
name|proto
operator|.
name|getColumnList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|.
name|getQualifierCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ByteString
name|qualifier
range|:
name|column
operator|.
name|getQualifierList
argument_list|()
control|)
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|proto
operator|.
name|hasReversed
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setReversed
argument_list|(
name|proto
operator|.
name|getReversed
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasConsistency
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setConsistency
argument_list|(
name|toConsistency
argument_list|(
name|proto
operator|.
name|getConsistency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasCaching
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setCaching
argument_list|(
name|proto
operator|.
name|getCaching
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMvccReadPoint
argument_list|()
condition|)
block|{
name|PackagePrivateFieldAccessor
operator|.
name|setMvccReadPoint
argument_list|(
name|scan
argument_list|,
name|proto
operator|.
name|getMvccReadPoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|isSmall
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setReadType
argument_list|(
name|Scan
operator|.
name|ReadType
operator|.
name|PREAD
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|proto
operator|.
name|hasReadType
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setReadType
argument_list|(
name|toReadType
argument_list|(
name|proto
operator|.
name|getReadType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|scan
return|;
block|}
comment|/**    * Create a protocol buffer Get based on a client Get.    *    * @param get the client Get    * @return a protocol buffer Get    * @throws IOException    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Get
name|toGet
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientProtos
operator|.
name|Get
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Get
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setRow
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|get
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCacheBlocks
argument_list|(
name|get
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMaxVersions
argument_list|(
name|get
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|get
operator|.
name|getFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|get
operator|.
name|getFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|TimeRange
argument_list|>
name|cftr
range|:
name|get
operator|.
name|getColumnFamilyTimeRange
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HBaseProtos
operator|.
name|ColumnFamilyTimeRange
operator|.
name|Builder
name|b
init|=
name|HBaseProtos
operator|.
name|ColumnFamilyTimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|setColumnFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|cftr
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|setTimeRange
argument_list|(
name|timeRangeToProto
argument_list|(
name|cftr
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addCfTimeRange
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|TimeRange
name|timeRange
init|=
name|get
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|timeRange
operator|.
name|isAllTime
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|Builder
name|timeRangeBuilder
init|=
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|timeRangeBuilder
operator|.
name|setFrom
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|timeRangeBuilder
operator|.
name|setTo
argument_list|(
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTimeRange
argument_list|(
name|timeRangeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attributes
init|=
name|get
operator|.
name|getAttributesMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NameBytesPair
operator|.
name|Builder
name|attributeBuilder
init|=
name|NameBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|attributeBuilder
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|attributeBuilder
operator|.
name|setValue
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|attributeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|get
operator|.
name|hasFamilies
argument_list|()
condition|)
block|{
name|Column
operator|.
name|Builder
name|columnBuilder
init|=
name|Column
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|families
init|=
name|get
operator|.
name|getFamilyMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|family
range|:
name|families
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
name|family
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|columnBuilder
operator|.
name|setFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|columnBuilder
operator|.
name|clearQualifier
argument_list|()
expr_stmt|;
if|if
condition|(
name|qualifiers
operator|!=
literal|null
operator|&&
name|qualifiers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|qualifiers
control|)
block|{
name|columnBuilder
operator|.
name|addQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|addColumn
argument_list|(
name|columnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|get
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|setStoreLimit
argument_list|(
name|get
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|get
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|setStoreOffset
argument_list|(
name|get
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|get
operator|.
name|isCheckExistenceOnly
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setExistenceOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|get
operator|.
name|getConsistency
argument_list|()
operator|!=
literal|null
operator|&&
name|get
operator|.
name|getConsistency
argument_list|()
operator|!=
name|Consistency
operator|.
name|STRONG
condition|)
block|{
name|builder
operator|.
name|setConsistency
argument_list|(
name|toConsistency
argument_list|(
name|get
operator|.
name|getConsistency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|loadColumnFamiliesOnDemand
init|=
name|get
operator|.
name|getLoadColumnFamiliesOnDemandValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|loadColumnFamiliesOnDemand
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setLoadColumnFamiliesOnDemand
argument_list|(
name|loadColumnFamiliesOnDemand
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|static
name|void
name|setTimeRange
parameter_list|(
specifier|final
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|,
specifier|final
name|TimeRange
name|timeRange
parameter_list|)
block|{
if|if
condition|(
operator|!
name|timeRange
operator|.
name|isAllTime
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|Builder
name|timeRangeBuilder
init|=
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|timeRangeBuilder
operator|.
name|setFrom
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|timeRangeBuilder
operator|.
name|setTo
argument_list|(
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTimeRange
argument_list|(
name|timeRangeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Convert a client Increment to a protobuf Mutate.    *    * @param increment    * @return the converted mutate    */
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|Increment
name|increment
parameter_list|,
specifier|final
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|,
name|long
name|nonce
parameter_list|)
block|{
name|builder
operator|.
name|setRow
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|increment
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMutateType
argument_list|(
name|MutationType
operator|.
name|INCREMENT
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|increment
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nonce
operator|!=
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
name|builder
operator|.
name|setNonce
argument_list|(
name|nonce
argument_list|)
expr_stmt|;
block|}
name|TimeRange
name|timeRange
init|=
name|increment
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
name|setTimeRange
argument_list|(
name|builder
argument_list|,
name|timeRange
argument_list|)
expr_stmt|;
name|ColumnValue
operator|.
name|Builder
name|columnBuilder
init|=
name|ColumnValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|QualifierValue
operator|.
name|Builder
name|valueBuilder
init|=
name|QualifierValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|family
range|:
name|increment
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|columnBuilder
operator|.
name|setFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|columnBuilder
operator|.
name|clearQualifierValue
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|values
init|=
name|family
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|values
control|)
block|{
name|valueBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|valueBuilder
operator|.
name|setQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|valueBuilder
operator|.
name|setValue
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getTagsLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|valueBuilder
operator|.
name|setTags
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|columnBuilder
operator|.
name|addQualifierValue
argument_list|(
name|valueBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|addColumnValue
argument_list|(
name|columnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attributes
init|=
name|increment
operator|.
name|getAttributesMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NameBytesPair
operator|.
name|Builder
name|attributeBuilder
init|=
name|NameBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|attributeBuilder
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|attributeBuilder
operator|.
name|setValue
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|attributeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toMutation
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer Mutate based on a client Mutation    *    * @param type    * @param mutation    * @return a protobuf'd Mutation    * @throws IOException    */
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
specifier|final
name|long
name|nonce
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toMutation
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|MutationProto
operator|.
name|newBuilder
argument_list|()
argument_list|,
name|nonce
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toMutation
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|,
name|long
name|nonce
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|=
name|getMutationBuilderAndSetCommonFields
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|nonce
operator|!=
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
name|builder
operator|.
name|setNonce
argument_list|(
name|nonce
argument_list|)
expr_stmt|;
block|}
name|ColumnValue
operator|.
name|Builder
name|columnBuilder
init|=
name|ColumnValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|QualifierValue
operator|.
name|Builder
name|valueBuilder
init|=
name|QualifierValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|family
range|:
name|mutation
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|columnBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|columnBuilder
operator|.
name|setFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|family
operator|.
name|getValue
argument_list|()
control|)
block|{
name|valueBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|valueBuilder
operator|.
name|setQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|valueBuilder
operator|.
name|setValue
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|valueBuilder
operator|.
name|setTimestamp
argument_list|(
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|MutationType
operator|.
name|DELETE
operator|||
operator|(
name|type
operator|==
name|MutationType
operator|.
name|PUT
operator|&&
name|CellUtil
operator|.
name|isDelete
argument_list|(
name|cell
argument_list|)
operator|)
condition|)
block|{
name|KeyValue
operator|.
name|Type
name|keyValueType
init|=
name|KeyValue
operator|.
name|Type
operator|.
name|codeToType
argument_list|(
name|cell
operator|.
name|getTypeByte
argument_list|()
argument_list|)
decl_stmt|;
name|valueBuilder
operator|.
name|setDeleteType
argument_list|(
name|toDeleteType
argument_list|(
name|keyValueType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|columnBuilder
operator|.
name|addQualifierValue
argument_list|(
name|valueBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addColumnValue
argument_list|(
name|columnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Create a protocol buffer MutationProto based on a client Mutation. Does NOT include data.    * Understanding is that the Cell will be transported other than via protobuf.    * @param type    * @param mutation    * @param builder    * @return a protobuf'd Mutation    * @throws IOException    */
specifier|public
specifier|static
name|MutationProto
name|toMutationNoData
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
specifier|final
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toMutationNoData
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer MutationProto based on a client Mutation.  Does NOT include data.    * Understanding is that the Cell will be transported other than via protobuf.    * @param type    * @param mutation    * @return a protobuf'd Mutation    * @throws IOException    */
specifier|public
specifier|static
name|MutationProto
name|toMutationNoData
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationProto
operator|.
name|Builder
name|builder
init|=
name|MutationProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
return|return
name|toMutationNoData
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MutationProto
name|toMutationNoData
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
specifier|final
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|,
name|long
name|nonce
parameter_list|)
throws|throws
name|IOException
block|{
name|getMutationBuilderAndSetCommonFields
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
name|mutation
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mutation
operator|instanceof
name|Increment
condition|)
block|{
name|setTimeRange
argument_list|(
name|builder
argument_list|,
operator|(
operator|(
name|Increment
operator|)
name|mutation
operator|)
operator|.
name|getTimeRange
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nonce
operator|!=
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
name|builder
operator|.
name|setNonce
argument_list|(
name|nonce
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Code shared by {@link #toMutation(MutationType, Mutation)} and    * {@link #toMutationNoData(MutationType, Mutation)}    * @param type    * @param mutation    * @return A partly-filled out protobuf'd Mutation.    */
specifier|private
specifier|static
name|MutationProto
operator|.
name|Builder
name|getMutationBuilderAndSetCommonFields
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setRow
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|mutation
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMutateType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|mutation
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTimestamp
argument_list|(
name|mutation
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attributes
init|=
name|mutation
operator|.
name|getAttributesMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NameBytesPair
operator|.
name|Builder
name|attributeBuilder
init|=
name|NameBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|attributeBuilder
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|attributeBuilder
operator|.
name|setValue
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|attributeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
comment|/**    * Convert a client Result to a protocol buffer Result    *    * @param result the client Result to convert    * @return the converted protocol buffer Result    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Result
name|toResult
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|getExists
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|toResult
argument_list|(
name|result
operator|.
name|getExists
argument_list|()
argument_list|,
name|result
operator|.
name|isStale
argument_list|()
argument_list|)
return|;
block|}
name|Cell
index|[]
name|cells
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
if|if
condition|(
name|cells
operator|==
literal|null
operator|||
name|cells
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|result
operator|.
name|isStale
argument_list|()
condition|?
name|EMPTY_RESULT_PB_STALE
else|:
name|EMPTY_RESULT_PB
return|;
block|}
name|ClientProtos
operator|.
name|Result
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Result
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|cells
control|)
block|{
name|builder
operator|.
name|addCell
argument_list|(
name|toCell
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setStale
argument_list|(
name|result
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setPartial
argument_list|(
name|result
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a client Result to a protocol buffer Result    *    * @param existence the client existence to send    * @return the converted protocol buffer Result    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Result
name|toResult
parameter_list|(
specifier|final
name|boolean
name|existence
parameter_list|,
name|boolean
name|stale
parameter_list|)
block|{
if|if
condition|(
name|stale
condition|)
block|{
return|return
name|existence
condition|?
name|EMPTY_RESULT_PB_EXISTS_TRUE_STALE
else|:
name|EMPTY_RESULT_PB_EXISTS_FALSE_STALE
return|;
block|}
else|else
block|{
return|return
name|existence
condition|?
name|EMPTY_RESULT_PB_EXISTS_TRUE
else|:
name|EMPTY_RESULT_PB_EXISTS_FALSE
return|;
block|}
block|}
comment|/**    * Convert a client Result to a protocol buffer Result.    * The pb Result does not include the Cell data.  That is for transport otherwise.    *    * @param result the client Result to convert    * @return the converted protocol buffer Result    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Result
name|toResultNoData
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|getExists
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|toResult
argument_list|(
name|result
operator|.
name|getExists
argument_list|()
argument_list|,
name|result
operator|.
name|isStale
argument_list|()
argument_list|)
return|;
name|int
name|size
init|=
name|result
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return
name|result
operator|.
name|isStale
argument_list|()
condition|?
name|EMPTY_RESULT_PB_STALE
else|:
name|EMPTY_RESULT_PB
return|;
name|ClientProtos
operator|.
name|Result
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Result
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStale
argument_list|(
name|result
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer Result to a client Result    *    * @param proto the protocol buffer Result to convert    * @return the converted client Result    */
specifier|public
specifier|static
name|Result
name|toResult
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Result
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|.
name|hasExists
argument_list|()
condition|)
block|{
if|if
condition|(
name|proto
operator|.
name|getStale
argument_list|()
condition|)
block|{
return|return
name|proto
operator|.
name|getExists
argument_list|()
condition|?
name|EMPTY_RESULT_EXISTS_TRUE_STALE
else|:
name|EMPTY_RESULT_EXISTS_FALSE_STALE
return|;
block|}
return|return
name|proto
operator|.
name|getExists
argument_list|()
condition|?
name|EMPTY_RESULT_EXISTS_TRUE
else|:
name|EMPTY_RESULT_EXISTS_FALSE
return|;
block|}
name|List
argument_list|<
name|CellProtos
operator|.
name|Cell
argument_list|>
name|values
init|=
name|proto
operator|.
name|getCellList
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|proto
operator|.
name|getStale
argument_list|()
condition|?
name|EMPTY_RESULT_STALE
else|:
name|EMPTY_RESULT
return|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CellProtos
operator|.
name|Cell
name|c
range|:
name|values
control|)
block|{
name|cells
operator|.
name|add
argument_list|(
name|toCell
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|,
literal|null
argument_list|,
name|proto
operator|.
name|getStale
argument_list|()
argument_list|,
name|proto
operator|.
name|getPartial
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Result to a client Result    *    * @param proto the protocol buffer Result to convert    * @param scanner Optional cell scanner.    * @return the converted client Result    * @throws IOException    */
specifier|public
specifier|static
name|Result
name|toResult
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Result
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CellProtos
operator|.
name|Cell
argument_list|>
name|values
init|=
name|proto
operator|.
name|getCellList
argument_list|()
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasExists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|values
operator|!=
literal|null
operator|&&
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
operator|&&
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad proto: exists with cells is no allowed "
operator|+
name|proto
argument_list|)
throw|;
block|}
if|if
condition|(
name|proto
operator|.
name|getStale
argument_list|()
condition|)
block|{
return|return
name|proto
operator|.
name|getExists
argument_list|()
condition|?
name|EMPTY_RESULT_EXISTS_TRUE_STALE
else|:
name|EMPTY_RESULT_EXISTS_FALSE_STALE
return|;
block|}
return|return
name|proto
operator|.
name|getExists
argument_list|()
condition|?
name|EMPTY_RESULT_EXISTS_TRUE
else|:
name|EMPTY_RESULT_EXISTS_FALSE
return|;
block|}
comment|// TODO: Unit test that has some Cells in scanner and some in the proto.
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|)
block|{
name|int
name|count
init|=
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
decl_stmt|;
name|cells
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|count
operator|+
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scanner
operator|.
name|advance
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed get "
operator|+
name|i
operator|+
literal|" of "
operator|+
name|count
argument_list|)
throw|;
name|cells
operator|.
name|add
argument_list|(
name|scanner
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|cells
operator|==
literal|null
condition|)
name|cells
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CellProtos
operator|.
name|Cell
name|c
range|:
name|values
control|)
block|{
name|cells
operator|.
name|add
argument_list|(
name|toCell
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|cells
operator|==
literal|null
operator|||
name|cells
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
operator|(
name|proto
operator|.
name|getStale
argument_list|()
condition|?
name|EMPTY_RESULT_STALE
else|:
name|EMPTY_RESULT
operator|)
else|:
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|,
literal|null
argument_list|,
name|proto
operator|.
name|getStale
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert a ByteArrayComparable to a protocol buffer Comparator    *    * @param comparator the ByteArrayComparable to convert    * @return the converted protocol buffer Comparator    */
specifier|public
specifier|static
name|ComparatorProtos
operator|.
name|Comparator
name|toComparator
parameter_list|(
name|ByteArrayComparable
name|comparator
parameter_list|)
block|{
name|ComparatorProtos
operator|.
name|Comparator
operator|.
name|Builder
name|builder
init|=
name|ComparatorProtos
operator|.
name|Comparator
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|comparator
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSerializedComparator
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|comparator
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer Comparator to a ByteArrayComparable    *    * @param proto the protocol buffer Comparator to convert    * @return the converted ByteArrayComparable    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|ByteArrayComparable
name|toComparator
parameter_list|(
name|ComparatorProtos
operator|.
name|Comparator
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|type
init|=
name|proto
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|funcName
init|=
literal|"parseFrom"
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|proto
operator|.
name|getSerializedComparator
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ByteArrayComparable
argument_list|>
name|c
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|ByteArrayComparable
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|type
argument_list|,
literal|true
argument_list|,
name|CLASS_LOADER
argument_list|)
decl_stmt|;
name|Method
name|parseFrom
init|=
name|c
operator|.
name|getMethod
argument_list|(
name|funcName
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|parseFrom
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to locate function: "
operator|+
name|funcName
operator|+
literal|" in type: "
operator|+
name|type
argument_list|)
throw|;
block|}
return|return
operator|(
name|ByteArrayComparable
operator|)
name|parseFrom
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a protocol buffer Filter to a client Filter    *    * @param proto the protocol buffer Filter to convert    * @return the converted Filter    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Filter
name|toFilter
parameter_list|(
name|FilterProtos
operator|.
name|Filter
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|type
init|=
name|proto
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|proto
operator|.
name|getSerializedFilter
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|funcName
init|=
literal|"parseFrom"
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Filter
argument_list|>
name|c
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Filter
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|type
argument_list|,
literal|true
argument_list|,
name|CLASS_LOADER
argument_list|)
decl_stmt|;
name|Method
name|parseFrom
init|=
name|c
operator|.
name|getMethod
argument_list|(
name|funcName
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|parseFrom
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to locate function: "
operator|+
name|funcName
operator|+
literal|" in type: "
operator|+
name|type
argument_list|)
throw|;
block|}
return|return
operator|(
name|Filter
operator|)
name|parseFrom
operator|.
name|invoke
argument_list|(
name|c
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Either we couldn't instantiate the method object, or "parseFrom" failed.
comment|// In either case, let's not retry.
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a client Filter to a protocol buffer Filter    *    * @param filter the Filter to convert    * @return the converted protocol buffer Filter    */
specifier|public
specifier|static
name|FilterProtos
operator|.
name|Filter
name|toFilter
parameter_list|(
name|Filter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|FilterProtos
operator|.
name|Filter
operator|.
name|Builder
name|builder
init|=
name|FilterProtos
operator|.
name|Filter
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|filter
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSerializedFilter
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|filter
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a delete KeyValue type to protocol buffer DeleteType.    *    * @param type    * @return protocol buffer DeleteType    * @throws IOException    */
specifier|public
specifier|static
name|DeleteType
name|toDeleteType
parameter_list|(
name|KeyValue
operator|.
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Delete
case|:
return|return
name|DeleteType
operator|.
name|DELETE_ONE_VERSION
return|;
case|case
name|DeleteColumn
case|:
return|return
name|DeleteType
operator|.
name|DELETE_MULTIPLE_VERSIONS
return|;
case|case
name|DeleteFamily
case|:
return|return
name|DeleteType
operator|.
name|DELETE_FAMILY
return|;
case|case
name|DeleteFamilyVersion
case|:
return|return
name|DeleteType
operator|.
name|DELETE_FAMILY_VERSION
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown delete type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a protocol buffer DeleteType to delete KeyValue type.    *    * @param type The DeleteType    * @return The type.    * @throws IOException    */
specifier|public
specifier|static
name|KeyValue
operator|.
name|Type
name|fromDeleteType
parameter_list|(
name|DeleteType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DELETE_ONE_VERSION
case|:
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
return|;
case|case
name|DELETE_MULTIPLE_VERSIONS
case|:
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
return|;
case|case
name|DELETE_FAMILY
case|:
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
return|;
case|case
name|DELETE_FAMILY_VERSION
case|:
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamilyVersion
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown delete type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a stringified protocol buffer exception Parameter to a Java Exception    *    * @param parameter the protocol buffer Parameter to convert    * @return the converted Exception    * @throws IOException if failed to deserialize the parameter    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Throwable
name|toException
parameter_list|(
specifier|final
name|NameBytesPair
name|parameter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parameter
operator|==
literal|null
operator|||
operator|!
name|parameter
operator|.
name|hasValue
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|desc
init|=
name|parameter
operator|.
name|getValue
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|parameter
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|c
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|type
argument_list|,
literal|true
argument_list|,
name|CLASS_LOADER
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|cn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cn
operator|=
name|c
operator|.
name|getDeclaredConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|cn
operator|.
name|newInstance
argument_list|(
name|desc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// Could be a raw RemoteException. See HBASE-8987.
name|cn
operator|=
name|c
operator|.
name|getDeclaredConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|cn
operator|.
name|newInstance
argument_list|(
name|type
argument_list|,
name|desc
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Start helpers for Client
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Service
parameter_list|>
name|T
name|newServiceStub
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|service
parameter_list|,
name|RpcChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|T
operator|)
name|Methods
operator|.
name|call
argument_list|(
name|service
argument_list|,
literal|null
argument_list|,
literal|"newStub"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|RpcChannel
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|channel
block|}
argument_list|)
return|;
block|}
comment|// End helpers for Client
comment|// Start helpers for Admin
comment|/**    * A helper to get the info of a region server using admin protocol.    * @return the server name    */
specifier|public
specifier|static
name|ServerInfo
name|getServerInfo
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
name|GetServerInfoRequest
name|request
init|=
name|buildGetServerInfoRequest
argument_list|()
decl_stmt|;
try|try
block|{
name|GetServerInfoResponse
name|response
init|=
name|admin
operator|.
name|getServerInfo
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getServerInfo
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * @see {@link #buildGetServerInfoRequest()}    */
specifier|private
specifier|static
name|GetServerInfoRequest
name|GET_SERVER_INFO_REQUEST
init|=
name|GetServerInfoRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
comment|/**    * Create a new GetServerInfoRequest    *    * @return a GetServerInfoRequest    */
specifier|public
specifier|static
name|GetServerInfoRequest
name|buildGetServerInfoRequest
parameter_list|()
block|{
return|return
name|GET_SERVER_INFO_REQUEST
return|;
block|}
specifier|public
specifier|static
name|ScanMetrics
name|toScanMetrics
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|Parser
argument_list|<
name|MapReduceProtos
operator|.
name|ScanMetrics
argument_list|>
name|parser
init|=
name|MapReduceProtos
operator|.
name|ScanMetrics
operator|.
name|PARSER
decl_stmt|;
name|MapReduceProtos
operator|.
name|ScanMetrics
name|pScanMetrics
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pScanMetrics
operator|=
name|parser
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
comment|//Ignored there are just no key values to add.
block|}
name|ScanMetrics
name|scanMetrics
init|=
operator|new
name|ScanMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|pScanMetrics
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HBaseProtos
operator|.
name|NameInt64Pair
name|pair
range|:
name|pScanMetrics
operator|.
name|getMetricsList
argument_list|()
control|)
block|{
if|if
condition|(
name|pair
operator|.
name|hasName
argument_list|()
operator|&&
name|pair
operator|.
name|hasValue
argument_list|()
condition|)
block|{
name|scanMetrics
operator|.
name|setCounter
argument_list|(
name|pair
operator|.
name|getName
argument_list|()
argument_list|,
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|scanMetrics
return|;
block|}
comment|/**    * Unwraps an exception from a protobuf service into the underlying (expected) IOException.    * This method will<strong>always</strong> throw an exception.    * @param se the {@code ServiceException} instance to convert into an {@code IOException}    */
specifier|public
specifier|static
name|void
name|toIOException
parameter_list|(
name|ServiceException
name|se
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|se
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null service exception passed!"
argument_list|)
throw|;
block|}
name|Throwable
name|cause
init|=
name|se
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
operator|&&
name|cause
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|cause
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|CellProtos
operator|.
name|Cell
name|toCell
parameter_list|(
specifier|final
name|Cell
name|kv
parameter_list|)
block|{
comment|// Doing this is going to kill us if we do it for all data passed.
comment|// St.Ack 20121205
name|CellProtos
operator|.
name|Cell
operator|.
name|Builder
name|kvbuilder
init|=
name|CellProtos
operator|.
name|Cell
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|kvbuilder
operator|.
name|setRow
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setFamily
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setCellType
argument_list|(
name|CellProtos
operator|.
name|CellType
operator|.
name|valueOf
argument_list|(
name|kv
operator|.
name|getTypeByte
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setTimestamp
argument_list|(
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setValue
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|kvbuilder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Cell
name|toCell
parameter_list|(
specifier|final
name|CellProtos
operator|.
name|Cell
name|cell
parameter_list|)
block|{
comment|// Doing this is going to kill us if we do it for all data passed.
comment|// St.Ack 20121205
return|return
name|CellUtil
operator|.
name|createCell
argument_list|(
name|cell
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|,
operator|(
name|byte
operator|)
name|cell
operator|.
name|getCellType
argument_list|()
operator|.
name|getNumber
argument_list|()
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Print out some subset of a MutationProto rather than all of it and its data    * @param proto Protobuf to print out    * @return Short String of mutation proto    */
specifier|static
name|String
name|toShortString
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|)
block|{
return|return
literal|"row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
operator|+
literal|", type="
operator|+
name|proto
operator|.
name|getMutateType
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|TableName
name|toTableName
parameter_list|(
name|HBaseProtos
operator|.
name|TableName
name|tableNamePB
parameter_list|)
block|{
return|return
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableNamePB
operator|.
name|getNamespace
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
argument_list|,
name|tableNamePB
operator|.
name|getQualifier
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|TableName
name|toProtoTableName
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|HBaseProtos
operator|.
name|TableName
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNamespace
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|tableName
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|tableName
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * This version of protobuf's mergeFrom avoids the hard-coded 64MB limit for decoding    * buffers when working with byte arrays    * @param builder current message builder    * @param b byte array    * @throws IOException    */
specifier|public
specifier|static
name|void
name|mergeFrom
parameter_list|(
name|Message
operator|.
name|Builder
name|builder
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|CodedInputStream
name|codedInput
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|codedInput
operator|.
name|setSizeLimit
argument_list|(
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|builder
operator|.
name|mergeFrom
argument_list|(
name|codedInput
argument_list|)
expr_stmt|;
name|codedInput
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * This version of protobuf's mergeFrom avoids the hard-coded 64MB limit for decoding    * buffers when working with byte arrays    * @param builder current message builder    * @param b byte array    * @param offset    * @param length    * @throws IOException    */
specifier|public
specifier|static
name|void
name|mergeFrom
parameter_list|(
name|Message
operator|.
name|Builder
name|builder
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|CodedInputStream
name|codedInput
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|codedInput
operator|.
name|setSizeLimit
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|builder
operator|.
name|mergeFrom
argument_list|(
name|codedInput
argument_list|)
expr_stmt|;
name|codedInput
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|Builder
name|timeRangeToProto
parameter_list|(
name|TimeRange
name|timeRange
parameter_list|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|Builder
name|timeRangeBuilder
init|=
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|timeRangeBuilder
operator|.
name|setFrom
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|timeRangeBuilder
operator|.
name|setTo
argument_list|(
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|timeRangeBuilder
return|;
block|}
specifier|private
specifier|static
name|TimeRange
name|protoToTimeRange
parameter_list|(
name|HBaseProtos
operator|.
name|TimeRange
name|timeRange
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|minStamp
init|=
literal|0
decl_stmt|;
name|long
name|maxStamp
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|timeRange
operator|.
name|hasFrom
argument_list|()
condition|)
block|{
name|minStamp
operator|=
name|timeRange
operator|.
name|getFrom
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timeRange
operator|.
name|hasTo
argument_list|()
condition|)
block|{
name|maxStamp
operator|=
name|timeRange
operator|.
name|getTo
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|TimeRange
argument_list|(
name|minStamp
argument_list|,
name|maxStamp
argument_list|)
return|;
block|}
comment|/**    * Creates {@link org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.SnapshotDescription.Type}    * from {@link SnapshotType}    * @param type the SnapshotDescription type    * @return the protobuf SnapshotDescription type    */
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|SnapshotDescription
operator|.
name|Type
name|createProtosSnapShotDescType
parameter_list|(
name|SnapshotType
name|type
parameter_list|)
block|{
return|return
name|HBaseProtos
operator|.
name|SnapshotDescription
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert a byte array to a protocol buffer RegionSpecifier    *    * @param type the region specifier type    * @param value the region specifier byte array value    * @return a protocol buffer RegionSpecifier    */
specifier|public
specifier|static
name|RegionSpecifier
name|buildRegionSpecifier
parameter_list|(
specifier|final
name|RegionSpecifierType
name|type
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|)
block|{
name|RegionSpecifier
operator|.
name|Builder
name|regionBuilder
init|=
name|RegionSpecifier
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|regionBuilder
operator|.
name|setValue
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|regionBuilder
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|regionBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Get a ServerName from the passed in data bytes.    * @param data Data with a serialize server name in it; can handle the old style    * servername where servername was host and port.  Works too with data that    * begins w/ the pb 'PBUF' magic and that is then followed by a protobuf that    * has a serialized {@link ServerName} in it.    * @return Returns null if<code>data</code> is null else converts passed data    * to a ServerName instance.    * @throws DeserializationException     */
specifier|public
specifier|static
name|ServerName
name|toServerName
parameter_list|(
specifier|final
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|ProtobufMagic
operator|.
name|isPBMagicPrefix
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|int
name|prefixLen
init|=
name|ProtobufMagic
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
try|try
block|{
name|ZooKeeperProtos
operator|.
name|Master
name|rss
init|=
name|ZooKeeperProtos
operator|.
name|Master
operator|.
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|prefixLen
argument_list|,
name|data
operator|.
name|length
operator|-
name|prefixLen
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|ServerName
name|sn
init|=
name|rss
operator|.
name|getMaster
argument_list|()
decl_stmt|;
return|return
name|ServerName
operator|.
name|valueOf
argument_list|(
name|sn
operator|.
name|getHostName
argument_list|()
argument_list|,
name|sn
operator|.
name|getPort
argument_list|()
argument_list|,
name|sn
operator|.
name|getStartCode
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
comment|/*InvalidProtocolBufferException*/
name|IOException
name|e
parameter_list|)
block|{
comment|// A failed parse of the znode is pretty catastrophic. Rather than loop
comment|// retrying hoping the bad bytes will changes, and rather than change
comment|// the signature on this method to add an IOE which will send ripples all
comment|// over the code base, throw a RuntimeException.  This should "never" happen.
comment|// Fail fast if it does.
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// The str returned could be old style -- pre hbase-1502 -- which was
comment|// hostname and port seperated by a colon rather than hostname, port and
comment|// startcode delimited by a ','.
name|String
name|str
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|str
operator|.
name|indexOf
argument_list|(
name|ServerName
operator|.
name|SERVERNAME_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Presume its ServerName serialized with versioned bytes.
return|return
name|ServerName
operator|.
name|parseVersionedServerName
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|// Presume it a hostname:port format.
name|String
name|hostname
init|=
name|Addressing
operator|.
name|parseHostname
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|Addressing
operator|.
name|parsePort
argument_list|(
name|str
argument_list|)
decl_stmt|;
return|return
name|ServerName
operator|.
name|valueOf
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|,
operator|-
literal|1L
argument_list|)
return|;
block|}
block|}
end_class

end_unit

