begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
operator|.
name|REGION_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Consistency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|metrics
operator|.
name|ScanMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|AccessControlService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetOnlineRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetOnlineRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetServerInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetServerInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetStoreFileRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetStoreFileResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|MergeRegionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|SplitRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|WarmupRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AuthenticationProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|BulkLoadHFileRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|BulkLoadHFileResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|DeleteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
operator|.
name|RegionLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ComparatorProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|FilterProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|NameBytesPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MapReduceProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableDescriptorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerStartupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|CompactionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|FlushDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|FlushDescriptor
operator|.
name|FlushAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|RegionEventDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|RegionEventDescriptor
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|ThrottleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationLoadSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationLoadSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|TablePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|UserPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|token
operator|.
name|AuthenticationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|Authorizations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|CellVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ByteStringer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ExceptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Methods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcChannel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_comment
comment|/**  * Protobufs utility.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
comment|// TODO: some clients (Hive, etc) use this class
specifier|public
specifier|final
class|class
name|ProtobufUtil
block|{
specifier|private
name|ProtobufUtil
parameter_list|()
block|{   }
comment|/**    * Primitive type to class mapping.    */
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|PRIMITIVES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Byte
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Character
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Character
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Short
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Short
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Long
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Long
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Float
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Float
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Double
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Double
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Void
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Void
operator|.
name|TYPE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prepend the passed bytes with four bytes of magic, {@link ProtobufMagic#PB_MAGIC},    * to flag what follows as a protobuf in hbase.  Prepend these bytes to all content written to    * znodes, etc.    * @param bytes Bytes to decorate    * @return The passed<code>bytes</code> with magic prepended (Creates a new    * byte array that is<code>bytes.length</code> plus {@link ProtobufMagic#PB_MAGIC}.length.    */
specifier|public
specifier|static
name|byte
index|[]
name|prependPBMagic
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|add
argument_list|(
name|ProtobufMagic
operator|.
name|PB_MAGIC
argument_list|,
name|bytes
argument_list|)
return|;
block|}
comment|/**    * @param bytes Bytes to check.    * @return True if passed<code>bytes</code> has {@link ProtobufMagic#PB_MAGIC} for a prefix.    */
specifier|public
specifier|static
name|boolean
name|isPBMagicPrefix
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|ProtobufMagic
operator|.
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
return|;
block|}
comment|/**    * @param bytes Bytes to check.    * @param offset offset to start at    * @param len length to use    * @return True if passed<code>bytes</code> has {@link ProtobufMagic#PB_MAGIC} for a prefix.    */
specifier|public
specifier|static
name|boolean
name|isPBMagicPrefix
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
name|ProtobufMagic
operator|.
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
return|;
block|}
comment|/**    * @param bytes bytes to check    * @throws DeserializationException if we are missing the pb magic prefix    */
specifier|public
specifier|static
name|void
name|expectPBMagicPrefix
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
operator|!
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
literal|"Missing pb magic "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|ProtobufMagic
operator|.
name|PB_MAGIC
argument_list|)
operator|+
literal|" prefix"
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return Length of {@link ProtobufMagic#lengthOfPBMagic()}    */
specifier|public
specifier|static
name|int
name|lengthOfPBMagic
parameter_list|()
block|{
return|return
name|ProtobufMagic
operator|.
name|lengthOfPBMagic
argument_list|()
return|;
block|}
comment|/**    * Return the IOException thrown by the remote server wrapped in    * ServiceException as cause.    *    * @param se ServiceException that wraps IO exception thrown by the server    * @return Exception wrapped in ServiceException or    *   a new IOException that wraps the unexpected ServiceException.    */
specifier|public
specifier|static
name|IOException
name|getRemoteException
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
name|Throwable
name|e
init|=
name|se
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
return|;
block|}
if|if
condition|(
name|ExceptionUtil
operator|.
name|isInterrupt
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
name|ExceptionUtil
operator|.
name|asInterrupt
argument_list|(
name|e
argument_list|)
return|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
operator|(
operator|(
name|RemoteException
operator|)
name|e
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
expr_stmt|;
block|}
return|return
name|e
operator|instanceof
name|IOException
condition|?
operator|(
name|IOException
operator|)
name|e
else|:
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
return|;
block|}
comment|/**    * Convert a ServerName to a protocol buffer ServerName    *    * @param serverName the ServerName to convert    * @return the converted protocol buffer ServerName    * @see #toServerName(org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.ServerName)    */
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|ServerName
name|toServerName
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toServerName
argument_list|(
name|serverName
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer ServerName to a ServerName    *    * @param proto the protocol buffer ServerName to convert    * @return the converted ServerName    */
specifier|public
specifier|static
name|ServerName
name|toServerName
parameter_list|(
specifier|final
name|HBaseProtos
operator|.
name|ServerName
name|proto
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toServerName
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Get HTableDescriptor[] from GetTableDescriptorsResponse protobuf    *    * @param proto the GetTableDescriptorsResponse    * @return HTableDescriptor[]    */
specifier|public
specifier|static
name|HTableDescriptor
index|[]
name|getHTableDescriptorArray
parameter_list|(
name|GetTableDescriptorsResponse
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|HTableDescriptor
index|[]
name|ret
init|=
operator|new
name|HTableDescriptor
index|[
name|proto
operator|.
name|getTableSchemaCount
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proto
operator|.
name|getTableSchemaCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|HTableDescriptor
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getTableSchema
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * get the split keys in form "byte [][]" from a CreateTableRequest proto    *    * @param proto the CreateTableRequest    * @return the split keys    */
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|getSplitKeysArray
parameter_list|(
specifier|final
name|CreateTableRequest
name|proto
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
name|proto
operator|.
name|getSplitKeysCount
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proto
operator|.
name|getSplitKeysCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|splitKeys
index|[
name|i
index|]
operator|=
name|proto
operator|.
name|getSplitKeys
argument_list|(
name|i
argument_list|)
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
return|return
name|splitKeys
return|;
block|}
comment|/**    * Convert a protobuf Durability into a client Durability    */
specifier|public
specifier|static
name|Durability
name|toDurability
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
name|proto
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toDurability
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Convert a client Durability into a protobuf Durability    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
name|toDurability
parameter_list|(
specifier|final
name|Durability
name|d
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toDurability
argument_list|(
name|d
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Get to a client Get    *    * @param proto the protocol buffer Get to convert    * @return the converted client Get    * @throws IOException    */
specifier|public
specifier|static
name|Get
name|toGet
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Get
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toGet
argument_list|(
name|proto
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Consistency
name|toConsistency
parameter_list|(
name|ClientProtos
operator|.
name|Consistency
name|consistency
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toConsistency
argument_list|(
name|consistency
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Consistency
name|toConsistency
parameter_list|(
name|Consistency
name|consistency
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toConsistency
argument_list|(
name|consistency
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Put.    *    * @param proto The protocol buffer MutationProto to convert    * @return A client Put.    * @throws IOException    */
specifier|public
specifier|static
name|Put
name|toPut
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toPut
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Put.    *    * @param proto The protocol buffer MutationProto to convert    * @param cellScanner If non-null, the Cell data that goes with this proto.    * @return A client Put.    * @throws IOException    */
specifier|public
specifier|static
name|Put
name|toPut
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toPut
argument_list|(
name|proto
argument_list|,
name|cellScanner
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Delete    *    * @param proto the protocol buffer Mutate to convert    * @return the converted client Delete    * @throws IOException    */
specifier|public
specifier|static
name|Delete
name|toDelete
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toDelete
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Delete    *    * @param proto the protocol buffer Mutate to convert    * @param cellScanner if non-null, the data that goes with this delete.    * @return the converted client Delete    * @throws IOException    */
specifier|public
specifier|static
name|Delete
name|toDelete
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toDelete
argument_list|(
name|proto
argument_list|,
name|cellScanner
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to an Append    * @param cellScanner    * @param proto the protocol buffer Mutate to convert    * @return the converted client Append    * @throws IOException    */
specifier|public
specifier|static
name|Append
name|toAppend
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toAppend
argument_list|(
name|proto
argument_list|,
name|cellScanner
argument_list|)
return|;
block|}
comment|/**    * Convert a MutateRequest to Mutation    *    * @param proto the protocol buffer Mutate to convert    * @return the converted Mutation    * @throws IOException    */
specifier|public
specifier|static
name|Mutation
name|toMutation
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toMutation
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to an Increment    *    * @param proto the protocol buffer Mutate to convert    * @return the converted client Increment    * @throws IOException    */
specifier|public
specifier|static
name|Increment
name|toIncrement
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toIncrement
argument_list|(
name|proto
argument_list|,
name|cellScanner
argument_list|)
return|;
block|}
comment|/**    * Convert a client Scan to a protocol buffer Scan    *    * @param scan the client Scan to convert    * @return the converted protocol buffer Scan    * @throws IOException    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Scan
name|toScan
parameter_list|(
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toScan
argument_list|(
name|scan
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Scan to a client Scan    *    * @param proto the protocol buffer Scan to convert    * @return the converted client Scan    * @throws IOException    */
specifier|public
specifier|static
name|Scan
name|toScan
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Scan
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toScan
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer Get based on a client Get.    *    * @param get the client Get    * @return a protocol buffer Get    * @throws IOException    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Get
name|toGet
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toGet
argument_list|(
name|get
argument_list|)
return|;
block|}
comment|/**    * Convert a client Increment to a protobuf Mutate.    *    * @param increment    * @return the converted mutate    */
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|Increment
name|increment
parameter_list|,
specifier|final
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|,
name|long
name|nonce
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toMutation
argument_list|(
name|increment
argument_list|,
name|builder
argument_list|,
name|nonce
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toMutation
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer Mutate based on a client Mutation    *    * @param type    * @param mutation    * @return a protobuf'd Mutation    * @throws IOException    */
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
specifier|final
name|long
name|nonce
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toMutation
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|MutationProto
operator|.
name|newBuilder
argument_list|()
argument_list|,
name|nonce
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toMutation
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|,
name|long
name|nonce
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toMutation
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|,
name|nonce
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer MutationProto based on a client Mutation. Does NOT include data.    * Understanding is that the Cell will be transported other than via protobuf.    * @param type    * @param mutation    * @param builder    * @return a protobuf'd Mutation    * @throws IOException    */
specifier|public
specifier|static
name|MutationProto
name|toMutationNoData
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
specifier|final
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toMutationNoData
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer MutationProto based on a client Mutation.  Does NOT include data.    * Understanding is that the Cell will be transported other than via protobuf.    * @param type    * @param mutation    * @return a protobuf'd Mutation    * @throws IOException    */
specifier|public
specifier|static
name|MutationProto
name|toMutationNoData
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationProto
operator|.
name|Builder
name|builder
init|=
name|MutationProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
return|return
name|toMutationNoData
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MutationProto
name|toMutationNoData
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
specifier|final
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|,
name|long
name|nonce
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toMutationNoData
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|,
name|nonce
argument_list|)
return|;
block|}
comment|/**    * Convert a client Result to a protocol buffer Result    *    * @param result the client Result to convert    * @return the converted protocol buffer Result    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Result
name|toResult
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toResult
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/**    * Convert a client Result to a protocol buffer Result    *    * @param existence the client existence to send    * @return the converted protocol buffer Result    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Result
name|toResult
parameter_list|(
specifier|final
name|boolean
name|existence
parameter_list|,
name|boolean
name|stale
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toResult
argument_list|(
name|existence
argument_list|,
name|stale
argument_list|)
return|;
block|}
comment|/**    * Convert a client Result to a protocol buffer Result.    * The pb Result does not include the Cell data.  That is for transport otherwise.    *    * @param result the client Result to convert    * @return the converted protocol buffer Result    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Result
name|toResultNoData
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toResultNoData
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Result to a client Result    *    * @param proto the protocol buffer Result to convert    * @return the converted client Result    */
specifier|public
specifier|static
name|Result
name|toResult
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Result
name|proto
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toResult
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Result to a client Result    *    * @param proto the protocol buffer Result to convert    * @param scanner Optional cell scanner.    * @return the converted client Result    * @throws IOException    */
specifier|public
specifier|static
name|Result
name|toResult
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Result
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toResult
argument_list|(
name|proto
argument_list|,
name|scanner
argument_list|)
return|;
block|}
comment|/**    * Convert a ByteArrayComparable to a protocol buffer Comparator    *    * @param comparator the ByteArrayComparable to convert    * @return the converted protocol buffer Comparator    */
specifier|public
specifier|static
name|ComparatorProtos
operator|.
name|Comparator
name|toComparator
parameter_list|(
name|ByteArrayComparable
name|comparator
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toComparator
argument_list|(
name|comparator
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Comparator to a ByteArrayComparable    *    * @param proto the protocol buffer Comparator to convert    * @return the converted ByteArrayComparable    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|ByteArrayComparable
name|toComparator
parameter_list|(
name|ComparatorProtos
operator|.
name|Comparator
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toComparator
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Filter to a client Filter    *    * @param proto the protocol buffer Filter to convert    * @return the converted Filter    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Filter
name|toFilter
parameter_list|(
name|FilterProtos
operator|.
name|Filter
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toFilter
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Convert a client Filter to a protocol buffer Filter    *    * @param filter the Filter to convert    * @return the converted protocol buffer Filter    */
specifier|public
specifier|static
name|FilterProtos
operator|.
name|Filter
name|toFilter
parameter_list|(
name|Filter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toFilter
argument_list|(
name|filter
argument_list|)
return|;
block|}
comment|/**    * Convert a delete KeyValue type to protocol buffer DeleteType.    *    * @param type    * @return protocol buffer DeleteType    * @throws IOException    */
specifier|public
specifier|static
name|DeleteType
name|toDeleteType
parameter_list|(
name|KeyValue
operator|.
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toDeleteType
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer DeleteType to delete KeyValue type.    *    * @param type The DeleteType    * @return The type.    * @throws IOException    */
specifier|public
specifier|static
name|KeyValue
operator|.
name|Type
name|fromDeleteType
parameter_list|(
name|DeleteType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|fromDeleteType
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**    * Convert a stringified protocol buffer exception Parameter to a Java Exception    *    * @param parameter the protocol buffer Parameter to convert    * @return the converted Exception    * @throws IOException if failed to deserialize the parameter    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Throwable
name|toException
parameter_list|(
specifier|final
name|NameBytesPair
name|parameter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toException
argument_list|(
name|parameter
argument_list|)
return|;
block|}
comment|// Start helpers for Client
comment|/**    * A helper to get a row of the closet one before using client protocol.    *    * @param client    * @param regionName    * @param row    * @param family    * @return the row or the closestRowBefore if it doesn't exist    * @throws IOException    * @deprecated since 0.99 - use reversed scanner instead.    */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|Result
name|getRowOrBefore
parameter_list|(
specifier|final
name|ClientService
operator|.
name|BlockingInterface
name|client
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|GetRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetRowOrBeforeRequest
argument_list|(
name|regionName
argument_list|,
name|row
argument_list|,
name|family
argument_list|)
decl_stmt|;
try|try
block|{
name|GetResponse
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|hasResult
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|toResult
argument_list|(
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to bulk load a list of HFiles using client protocol.    *    * @param client    * @param familyPaths    * @param regionName    * @param assignSeqNum    * @return true if all are loaded    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|bulkLoadHFile
parameter_list|(
specifier|final
name|ClientService
operator|.
name|BlockingInterface
name|client
parameter_list|,
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|familyPaths
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
name|boolean
name|assignSeqNum
parameter_list|)
throws|throws
name|IOException
block|{
name|BulkLoadHFileRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildBulkLoadHFileRequest
argument_list|(
name|familyPaths
argument_list|,
name|regionName
argument_list|,
name|assignSeqNum
argument_list|)
decl_stmt|;
try|try
block|{
name|BulkLoadHFileResponse
name|response
init|=
name|client
operator|.
name|bulkLoadHFile
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getLoaded
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|CoprocessorServiceResponse
name|execService
parameter_list|(
specifier|final
name|ClientService
operator|.
name|BlockingInterface
name|client
parameter_list|,
specifier|final
name|CoprocessorServiceCall
name|call
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|CoprocessorServiceRequest
name|request
init|=
name|CoprocessorServiceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCall
argument_list|(
name|call
argument_list|)
operator|.
name|setRegion
argument_list|(
name|RequestConverter
operator|.
name|buildRegionSpecifier
argument_list|(
name|REGION_NAME
argument_list|,
name|regionName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|CoprocessorServiceResponse
name|response
init|=
name|client
operator|.
name|execService
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|CoprocessorServiceResponse
name|execService
parameter_list|(
specifier|final
name|MasterService
operator|.
name|BlockingInterface
name|client
parameter_list|,
specifier|final
name|CoprocessorServiceCall
name|call
parameter_list|)
throws|throws
name|IOException
block|{
name|CoprocessorServiceRequest
name|request
init|=
name|CoprocessorServiceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCall
argument_list|(
name|call
argument_list|)
operator|.
name|setRegion
argument_list|(
name|RequestConverter
operator|.
name|buildRegionSpecifier
argument_list|(
name|REGION_NAME
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|CoprocessorServiceResponse
name|response
init|=
name|client
operator|.
name|execMasterService
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * Make a region server endpoint call    * @param client    * @param call    * @return CoprocessorServiceResponse    * @throws IOException    */
specifier|public
specifier|static
name|CoprocessorServiceResponse
name|execRegionServerService
parameter_list|(
specifier|final
name|ClientService
operator|.
name|BlockingInterface
name|client
parameter_list|,
specifier|final
name|CoprocessorServiceCall
name|call
parameter_list|)
throws|throws
name|IOException
block|{
name|CoprocessorServiceRequest
name|request
init|=
name|CoprocessorServiceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCall
argument_list|(
name|call
argument_list|)
operator|.
name|setRegion
argument_list|(
name|RequestConverter
operator|.
name|buildRegionSpecifier
argument_list|(
name|REGION_NAME
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|CoprocessorServiceResponse
name|response
init|=
name|client
operator|.
name|execRegionServerService
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Service
parameter_list|>
name|T
name|newServiceStub
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|service
parameter_list|,
name|RpcChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|T
operator|)
name|Methods
operator|.
name|call
argument_list|(
name|service
argument_list|,
literal|null
argument_list|,
literal|"newStub"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|RpcChannel
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|channel
block|}
argument_list|)
return|;
block|}
comment|// End helpers for Client
comment|// Start helpers for Admin
comment|/**    * A helper to retrieve region info given a region name    * using admin protocol.    *    * @param admin    * @param regionName    * @return the retrieved region info    * @throws IOException    */
specifier|public
specifier|static
name|HRegionInfo
name|getRegionInfo
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|GetRegionInfoRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetRegionInfoRequest
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|GetRegionInfoResponse
name|response
init|=
name|admin
operator|.
name|getRegionInfo
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|response
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to close a region given a region name    * using admin protocol.    *    * @param admin    * @param regionName    * @throws IOException    */
specifier|public
specifier|static
name|void
name|closeRegion
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|ServerName
name|server
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|CloseRegionRequest
name|closeRegionRequest
init|=
name|RequestConverter
operator|.
name|buildCloseRegionRequest
argument_list|(
name|server
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|closeRegion
argument_list|(
literal|null
argument_list|,
name|closeRegionRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to close a region given a region name    * using admin protocol.    *    * @param admin    * @param regionName    * @return true if the region is closed    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|closeRegion
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|ServerName
name|server
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|ServerName
name|destinationServer
parameter_list|)
throws|throws
name|IOException
block|{
name|CloseRegionRequest
name|closeRegionRequest
init|=
name|RequestConverter
operator|.
name|buildCloseRegionRequest
argument_list|(
name|server
argument_list|,
name|regionName
argument_list|,
name|destinationServer
argument_list|)
decl_stmt|;
try|try
block|{
name|CloseRegionResponse
name|response
init|=
name|admin
operator|.
name|closeRegion
argument_list|(
literal|null
argument_list|,
name|closeRegionRequest
argument_list|)
decl_stmt|;
return|return
name|ResponseConverter
operator|.
name|isClosed
argument_list|(
name|response
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to warmup a region given a region name    * using admin protocol    *    * @param admin    * @param regionInfo    *    */
specifier|public
specifier|static
name|void
name|warmupRegion
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|WarmupRegionRequest
name|warmupRegionRequest
init|=
name|RequestConverter
operator|.
name|buildWarmupRegionRequest
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|admin
operator|.
name|warmupRegion
argument_list|(
literal|null
argument_list|,
name|warmupRegionRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to open a region using admin protocol.    * @param admin    * @param region    * @throws IOException    */
specifier|public
specifier|static
name|void
name|openRegion
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
name|ServerName
name|server
parameter_list|,
specifier|final
name|HRegionInfo
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|OpenRegionRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildOpenRegionRequest
argument_list|(
name|server
argument_list|,
name|region
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|openRegion
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to get the all the online regions on a region    * server using admin protocol.    *    * @param admin    * @return a list of online region info    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getOnlineRegions
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
name|GetOnlineRegionRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetOnlineRegionRequest
argument_list|()
decl_stmt|;
name|GetOnlineRegionResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|admin
operator|.
name|getOnlineRegion
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
return|return
name|getRegionInfos
argument_list|(
name|response
argument_list|)
return|;
block|}
comment|/**    * Get the list of region info from a GetOnlineRegionResponse    *    * @param proto the GetOnlineRegionResponse    * @return the list of region info or null if<code>proto</code> is null    */
specifier|static
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getRegionInfos
parameter_list|(
specifier|final
name|GetOnlineRegionResponse
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|proto
operator|.
name|getRegionInfoList
argument_list|()
control|)
block|{
name|regionInfos
operator|.
name|add
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|regionInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|regionInfos
return|;
block|}
comment|/**    * A helper to get the info of a region server using admin protocol.    *    * @param admin    * @return the server name    * @throws IOException    */
specifier|public
specifier|static
name|ServerInfo
name|getServerInfo
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
name|GetServerInfoRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetServerInfoRequest
argument_list|()
decl_stmt|;
try|try
block|{
name|GetServerInfoResponse
name|response
init|=
name|admin
operator|.
name|getServerInfo
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getServerInfo
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to get the list of files of a column family    * on a given region using admin protocol.    *    * @param admin    * @param regionName    * @param family    * @return the list of store files    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getStoreFiles
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|GetStoreFileRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetStoreFileRequest
argument_list|(
name|regionName
argument_list|,
name|family
argument_list|)
decl_stmt|;
try|try
block|{
name|GetStoreFileResponse
name|response
init|=
name|admin
operator|.
name|getStoreFile
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getStoreFileList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to split a region using admin protocol.    *    * @param admin    * @param hri    * @param splitPoint    * @throws IOException    */
specifier|public
specifier|static
name|void
name|split
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
name|byte
index|[]
name|splitPoint
parameter_list|)
throws|throws
name|IOException
block|{
name|SplitRegionRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildSplitRegionRequest
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|splitPoint
argument_list|)
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|splitRegion
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to merge regions using admin protocol. Send request to    * regionserver.    * @param admin    * @param region_a    * @param region_b    * @param forcible true if do a compulsory merge, otherwise we will only merge    *          two adjacent regions    * @throws IOException    */
specifier|public
specifier|static
name|void
name|mergeRegions
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|HRegionInfo
name|region_a
parameter_list|,
specifier|final
name|HRegionInfo
name|region_b
parameter_list|,
specifier|final
name|boolean
name|forcible
parameter_list|)
throws|throws
name|IOException
block|{
name|MergeRegionsRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildMergeRegionsRequest
argument_list|(
name|region_a
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|region_b
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|forcible
argument_list|)
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|mergeRegions
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|// End helpers for Admin
comment|/*    * Get the total (read + write) requests from a RegionLoad pb    * @param rl - RegionLoad pb    * @return total (read + write) requests    */
specifier|public
specifier|static
name|long
name|getTotalRequestsCount
parameter_list|(
name|RegionLoad
name|rl
parameter_list|)
block|{
if|if
condition|(
name|rl
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|rl
operator|.
name|getReadRequestsCount
argument_list|()
operator|+
name|rl
operator|.
name|getWriteRequestsCount
argument_list|()
return|;
block|}
comment|/**    * @param m Message to get delimited pb serialization of (with pb magic prefix)    */
specifier|public
specifier|static
name|byte
index|[]
name|toDelimitedByteArray
parameter_list|(
specifier|final
name|Message
name|m
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Allocate arbitrary big size so we avoid resizing.
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|ProtobufMagic
operator|.
name|PB_MAGIC
argument_list|)
expr_stmt|;
name|m
operator|.
name|writeDelimitedTo
argument_list|(
name|baos
argument_list|)
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**    * Converts a Permission proto to a client Permission object.    *    * @param proto the protobuf Permission    * @return the converted Permission    */
specifier|public
specifier|static
name|Permission
name|toPermission
parameter_list|(
name|AccessControlProtos
operator|.
name|Permission
name|proto
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toPermission
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Converts a Permission proto to a client TablePermission object.    *    * @param proto the protobuf Permission    * @return the converted TablePermission    */
specifier|public
specifier|static
name|TablePermission
name|toTablePermission
parameter_list|(
name|AccessControlProtos
operator|.
name|Permission
name|proto
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toTablePermission
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Convert a client Permission to a Permission proto    *    * @param perm the client Permission    * @return the protobuf Permission    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|Permission
name|toPermission
parameter_list|(
name|Permission
name|perm
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toPermission
argument_list|(
name|perm
argument_list|)
return|;
block|}
comment|/**    * Converts a list of Permission.Action proto to a list of client Permission.Action objects.    *    * @param protoActions the list of protobuf Actions    * @return the converted list of Actions    */
specifier|public
specifier|static
name|List
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
name|toPermissionActions
parameter_list|(
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|protoActions
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toPermissionActions
argument_list|(
name|protoActions
argument_list|)
return|;
block|}
comment|/**    * Converts a Permission.Action proto to a client Permission.Action object.    *    * @param action the protobuf Action    * @return the converted Action    */
specifier|public
specifier|static
name|Permission
operator|.
name|Action
name|toPermissionAction
parameter_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toPermissionAction
argument_list|(
name|action
argument_list|)
return|;
block|}
comment|/**    * Convert a client Permission.Action to a Permission.Action proto    *    * @param action the client Action    * @return the protobuf Action    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
name|toPermissionAction
parameter_list|(
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toPermissionAction
argument_list|(
name|action
argument_list|)
return|;
block|}
comment|/**    * Convert a client user permission to a user permission proto    *    * @param perm the client UserPermission    * @return the protobuf UserPermission    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|UserPermission
name|toUserPermission
parameter_list|(
name|UserPermission
name|perm
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toUserPermission
argument_list|(
name|perm
argument_list|)
return|;
block|}
comment|/**    * Converts a user permission proto to a client user permission object.    *    * @param proto the protobuf UserPermission    * @return the converted UserPermission    */
specifier|public
specifier|static
name|UserPermission
name|toUserPermission
parameter_list|(
name|AccessControlProtos
operator|.
name|UserPermission
name|proto
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toUserPermission
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Convert a ListMultimap&lt;String, TablePermission&gt; where key is username    * to a protobuf UserPermission    *    * @param perm the list of user and table permissions    * @return the protobuf UserTablePermissions    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|toUserTablePermissions
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perm
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toUserTablePermissions
argument_list|(
name|perm
argument_list|)
return|;
block|}
comment|/**    * A utility used to grant a user global permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @param userShortName the short name of the user to grant permissions    * @param actions the permissions to be granted    * @throws ServiceException    */
specifier|public
specifier|static
name|void
name|grant
parameter_list|(
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|GrantRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGrantRequest
argument_list|(
name|userShortName
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|grant
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to grant a user table permissions. The permissions will    * be for a table table/column family/qualifier.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @param userShortName the short name of the user to grant permissions    * @param tableName optional table name    * @param f optional column family    * @param q optional qualifier    * @param actions the permissions to be granted    * @throws ServiceException    */
specifier|public
specifier|static
name|void
name|grant
parameter_list|(
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|f
parameter_list|,
name|byte
index|[]
name|q
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|GrantRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGrantRequest
argument_list|(
name|userShortName
argument_list|,
name|tableName
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|grant
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to grant a user namespace permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @param namespace the short name of the user to grant permissions    * @param actions the permissions to be granted    * @throws ServiceException    */
specifier|public
specifier|static
name|void
name|grant
parameter_list|(
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|GrantRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGrantRequest
argument_list|(
name|userShortName
argument_list|,
name|namespace
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|grant
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to revoke a user's global permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @param userShortName the short name of the user to revoke permissions    * @param actions the permissions to be revoked    * @throws ServiceException    */
specifier|public
specifier|static
name|void
name|revoke
parameter_list|(
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|RevokeRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildRevokeRequest
argument_list|(
name|userShortName
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|revoke
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to revoke a user's table permissions. The permissions will    * be for a table/column family/qualifier.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @param userShortName the short name of the user to revoke permissions    * @param tableName optional table name    * @param f optional column family    * @param q optional qualifier    * @param actions the permissions to be revoked    * @throws ServiceException    */
specifier|public
specifier|static
name|void
name|revoke
parameter_list|(
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|f
parameter_list|,
name|byte
index|[]
name|q
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|RevokeRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildRevokeRequest
argument_list|(
name|userShortName
argument_list|,
name|tableName
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|revoke
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to revoke a user's namespace permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @param userShortName the short name of the user to revoke permissions    * @param namespace optional table name    * @param actions the permissions to be revoked    * @throws ServiceException    */
specifier|public
specifier|static
name|void
name|revoke
parameter_list|(
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|RevokeRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildRevokeRequest
argument_list|(
name|userShortName
argument_list|,
name|namespace
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|revoke
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to get user's global permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @throws ServiceException    */
specifier|public
specifier|static
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserPermissions
parameter_list|(
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|)
throws|throws
name|ServiceException
block|{
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Global
argument_list|)
expr_stmt|;
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|GetUserPermissionsResponse
name|response
init|=
name|protocol
operator|.
name|getUserPermissions
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
operator|new
name|ArrayList
argument_list|<
name|UserPermission
argument_list|>
argument_list|(
name|response
operator|.
name|getUserPermissionCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|UserPermission
name|perm
range|:
name|response
operator|.
name|getUserPermissionList
argument_list|()
control|)
block|{
name|perms
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toUserPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|perms
return|;
block|}
comment|/**    * A utility used to get user table permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @param t optional table name    * @throws ServiceException    */
specifier|public
specifier|static
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserPermissions
parameter_list|(
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|TableName
name|t
parameter_list|)
throws|throws
name|ServiceException
block|{
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Table
argument_list|)
expr_stmt|;
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|GetUserPermissionsResponse
name|response
init|=
name|protocol
operator|.
name|getUserPermissions
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
operator|new
name|ArrayList
argument_list|<
name|UserPermission
argument_list|>
argument_list|(
name|response
operator|.
name|getUserPermissionCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|UserPermission
name|perm
range|:
name|response
operator|.
name|getUserPermissionList
argument_list|()
control|)
block|{
name|perms
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toUserPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|perms
return|;
block|}
comment|/**    * A utility used to get permissions for selected namespace.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @param namespace name of the namespace    * @throws ServiceException    */
specifier|public
specifier|static
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserPermissions
parameter_list|(
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|byte
index|[]
name|namespace
parameter_list|)
throws|throws
name|ServiceException
block|{
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setNamespaceName
argument_list|(
name|ByteStringer
operator|.
name|wrap
argument_list|(
name|namespace
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Namespace
argument_list|)
expr_stmt|;
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|GetUserPermissionsResponse
name|response
init|=
name|protocol
operator|.
name|getUserPermissions
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
operator|new
name|ArrayList
argument_list|<
name|UserPermission
argument_list|>
argument_list|(
name|response
operator|.
name|getUserPermissionCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|UserPermission
name|perm
range|:
name|response
operator|.
name|getUserPermissionList
argument_list|()
control|)
block|{
name|perms
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toUserPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|perms
return|;
block|}
comment|/**    * Convert a protobuf UserTablePermissions to a    * ListMultimap&lt;String, TablePermission&gt; where key is username.    *    * @param proto the protobuf UserPermission    * @return the converted UserPermission    */
specifier|public
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|toUserTablePermissions
parameter_list|(
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|proto
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toUserTablePermissions
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Converts a Token instance (with embedded identifier) to the protobuf representation.    *    * @param token the Token instance to copy    * @return the protobuf Token message    */
specifier|public
specifier|static
name|AuthenticationProtos
operator|.
name|Token
name|toToken
parameter_list|(
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|token
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toToken
argument_list|(
name|token
argument_list|)
return|;
block|}
comment|/**    * Converts a protobuf Token message back into a Token instance.    *    * @param proto the protobuf Token message    * @return the Token instance    */
specifier|public
specifier|static
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|toToken
parameter_list|(
name|AuthenticationProtos
operator|.
name|Token
name|proto
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toToken
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Find the HRegion encoded name based on a region specifier    *    * @param regionSpecifier the region specifier    * @return the corresponding region's encoded name    * @throws DoNotRetryIOException if the specifier type is unsupported    */
specifier|public
specifier|static
name|String
name|getRegionEncodedName
parameter_list|(
specifier|final
name|RegionSpecifier
name|regionSpecifier
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
name|byte
index|[]
name|value
init|=
name|regionSpecifier
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RegionSpecifierType
name|type
init|=
name|regionSpecifier
operator|.
name|getType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|REGION_NAME
case|:
return|return
name|HRegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|value
argument_list|)
return|;
case|case
name|ENCODED_REGION_NAME
case|:
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Unsupported region specifier type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|ScanMetrics
name|toScanMetrics
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toScanMetrics
argument_list|(
name|bytes
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MapReduceProtos
operator|.
name|ScanMetrics
name|toScanMetrics
parameter_list|(
name|ScanMetrics
name|scanMetrics
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toScanMetrics
argument_list|(
name|scanMetrics
argument_list|)
return|;
block|}
comment|/**    * Unwraps an exception from a protobuf service into the underlying (expected) IOException.    * This method will<strong>always</strong> throw an exception.    * @param se the {@code ServiceException} instance to convert into an {@code IOException}    */
specifier|public
specifier|static
name|void
name|toIOException
parameter_list|(
name|ServiceException
name|se
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|se
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null service exception passed!"
argument_list|)
throw|;
block|}
name|Throwable
name|cause
init|=
name|se
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
operator|&&
name|cause
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|cause
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|CellProtos
operator|.
name|Cell
name|toCell
parameter_list|(
specifier|final
name|Cell
name|kv
parameter_list|)
block|{
comment|// Doing this is going to kill us if we do it for all data passed.
comment|// St.Ack 20121205
return|return
name|ProtobufConverter
operator|.
name|toCell
argument_list|(
name|kv
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Cell
name|toCell
parameter_list|(
specifier|final
name|CellProtos
operator|.
name|Cell
name|cell
parameter_list|)
block|{
comment|// Doing this is going to kill us if we do it for all data passed.
comment|// St.Ack 20121205
return|return
name|ProtobufConverter
operator|.
name|toCell
argument_list|(
name|cell
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|NamespaceDescriptor
name|toProtoNamespaceDescriptor
parameter_list|(
name|NamespaceDescriptor
name|ns
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toProtoNamespaceDescriptor
argument_list|(
name|ns
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|NamespaceDescriptor
name|toNamespaceDescriptor
parameter_list|(
name|HBaseProtos
operator|.
name|NamespaceDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtobufConverter
operator|.
name|toNamespaceDescriptor
argument_list|(
name|desc
argument_list|)
return|;
block|}
comment|/**    * Get an instance of the argument type declared in a class's signature. The    * argument type is assumed to be a PB Message subclass, and the instance is    * created using parseFrom method on the passed ByteString.    * @param runtimeClass the runtime type of the class    * @param position the position of the argument in the class declaration    * @param b the ByteString which should be parsed to get the instance created    * @return the instance    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Message
parameter_list|>
name|T
name|getParsedGenericInstance
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|runtimeClass
parameter_list|,
name|int
name|position
parameter_list|,
name|ByteString
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|Type
name|type
init|=
name|runtimeClass
operator|.
name|getGenericSuperclass
argument_list|()
decl_stmt|;
name|Type
name|argType
init|=
operator|(
operator|(
name|ParameterizedType
operator|)
name|type
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
name|position
index|]
decl_stmt|;
name|Class
argument_list|<
name|T
argument_list|>
name|classType
init|=
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|argType
decl_stmt|;
name|T
name|inst
decl_stmt|;
try|try
block|{
name|Method
name|m
init|=
name|classType
operator|.
name|getMethod
argument_list|(
literal|"parseFrom"
argument_list|,
name|ByteString
operator|.
name|class
argument_list|)
decl_stmt|;
name|inst
operator|=
operator|(
name|T
operator|)
name|m
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|inst
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
specifier|static
name|CompactionDescriptor
name|toCompactionDescriptor
parameter_list|(
name|HRegionInfo
name|info
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|inputPaths
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|outputPaths
parameter_list|,
name|Path
name|storeDir
parameter_list|)
block|{
comment|// compaction descriptor contains relative paths.
comment|// input / output paths are relative to the store dir
comment|// store dir is relative to region dir
return|return
name|ProtobufConverter
operator|.
name|toCompactionDescriptor
argument_list|(
name|info
argument_list|,
name|family
argument_list|,
name|inputPaths
argument_list|,
name|outputPaths
argument_list|,
name|storeDir
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|FlushDescriptor
name|toFlushDescriptor
parameter_list|(
name|FlushAction
name|action
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|,
name|long
name|flushSeqId
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|committedFiles
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toFlushDescriptor
argument_list|(
name|action
argument_list|,
name|hri
argument_list|,
name|flushSeqId
argument_list|,
name|committedFiles
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RegionEventDescriptor
name|toRegionEventDescriptor
parameter_list|(
name|EventType
name|eventType
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|,
name|long
name|seqId
parameter_list|,
name|ServerName
name|server
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|storeFiles
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toRegionEventDescriptor
argument_list|(
name|eventType
argument_list|,
name|hri
argument_list|,
name|seqId
argument_list|,
name|server
argument_list|,
name|storeFiles
argument_list|)
return|;
block|}
comment|/**    * Return short version of Message toString'd, shorter than TextFormat#shortDebugString.    * Tries to NOT print out data both because it can be big but also so we do not have data in our    * logs. Use judiciously.    * @param m    * @return toString of passed<code>m</code>    */
specifier|public
specifier|static
name|String
name|getShortTextFormat
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
return|return
literal|"null"
return|;
if|if
condition|(
name|m
operator|instanceof
name|ScanRequest
condition|)
block|{
comment|// This should be small and safe to output.  No data.
return|return
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|m
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|RegionServerReportRequest
condition|)
block|{
comment|// Print a short message only, just the servername and the requests, not the full load.
name|RegionServerReportRequest
name|r
init|=
operator|(
name|RegionServerReportRequest
operator|)
name|m
decl_stmt|;
return|return
literal|"server "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|r
operator|.
name|getServer
argument_list|()
argument_list|)
operator|+
literal|" load { numberOfRequests: "
operator|+
name|r
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRequests
argument_list|()
operator|+
literal|" }"
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|RegionServerStartupRequest
condition|)
block|{
comment|// Should be small enough.
return|return
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|m
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|MutationProto
condition|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toShortString
argument_list|(
operator|(
name|MutationProto
operator|)
name|m
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|GetRequest
condition|)
block|{
name|GetRequest
name|r
init|=
operator|(
name|GetRequest
operator|)
name|m
decl_stmt|;
return|return
literal|"region= "
operator|+
name|getStringForByteString
argument_list|(
name|r
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|", row="
operator|+
name|getStringForByteString
argument_list|(
name|r
operator|.
name|getGet
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|ClientProtos
operator|.
name|MultiRequest
condition|)
block|{
name|ClientProtos
operator|.
name|MultiRequest
name|r
init|=
operator|(
name|ClientProtos
operator|.
name|MultiRequest
operator|)
name|m
decl_stmt|;
comment|// Get first set of Actions.
name|ClientProtos
operator|.
name|RegionAction
name|actions
init|=
name|r
operator|.
name|getRegionActionList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|row
init|=
name|actions
operator|.
name|getActionCount
argument_list|()
operator|<=
literal|0
condition|?
literal|""
else|:
name|getStringForByteString
argument_list|(
name|actions
operator|.
name|getAction
argument_list|(
literal|0
argument_list|)
operator|.
name|hasGet
argument_list|()
condition|?
name|actions
operator|.
name|getAction
argument_list|(
literal|0
argument_list|)
operator|.
name|getGet
argument_list|()
operator|.
name|getRow
argument_list|()
else|:
name|actions
operator|.
name|getAction
argument_list|(
literal|0
argument_list|)
operator|.
name|getMutation
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
return|return
literal|"region= "
operator|+
name|getStringForByteString
argument_list|(
name|actions
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|", for "
operator|+
name|r
operator|.
name|getRegionActionCount
argument_list|()
operator|+
literal|" actions and 1st row key="
operator|+
name|row
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|ClientProtos
operator|.
name|MutateRequest
condition|)
block|{
name|ClientProtos
operator|.
name|MutateRequest
name|r
init|=
operator|(
name|ClientProtos
operator|.
name|MutateRequest
operator|)
name|m
decl_stmt|;
return|return
literal|"region= "
operator|+
name|getStringForByteString
argument_list|(
name|r
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|", row="
operator|+
name|getStringForByteString
argument_list|(
name|r
operator|.
name|getMutation
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|"TODO: "
operator|+
name|m
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getStringForByteString
parameter_list|(
name|ByteString
name|bs
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|bs
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableName
name|toTableName
parameter_list|(
name|HBaseProtos
operator|.
name|TableName
name|tableNamePB
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toTableName
argument_list|(
name|tableNamePB
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|TableName
name|toProtoTableName
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toProtoTableName
argument_list|(
name|tableName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableName
index|[]
name|getTableNameArray
parameter_list|(
name|List
argument_list|<
name|HBaseProtos
operator|.
name|TableName
argument_list|>
name|tableNamesList
parameter_list|)
block|{
if|if
condition|(
name|tableNamesList
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TableName
index|[
literal|0
index|]
return|;
block|}
name|TableName
index|[]
name|tableNames
init|=
operator|new
name|TableName
index|[
name|tableNamesList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNamesList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|tableNames
index|[
name|i
index|]
operator|=
name|toTableName
argument_list|(
name|tableNamesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tableNames
return|;
block|}
comment|/**    * Convert a protocol buffer CellVisibility to a client CellVisibility    *    * @param proto    * @return the converted client CellVisibility    */
specifier|public
specifier|static
name|CellVisibility
name|toCellVisibility
parameter_list|(
name|ClientProtos
operator|.
name|CellVisibility
name|proto
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toCellVisibility
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer CellVisibility bytes to a client CellVisibility    *    * @param protoBytes    * @return the converted client CellVisibility    * @throws DeserializationException    */
specifier|public
specifier|static
name|CellVisibility
name|toCellVisibility
parameter_list|(
name|byte
index|[]
name|protoBytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
return|return
name|ProtobufConverter
operator|.
name|toCellVisibility
argument_list|(
name|protoBytes
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer CellVisibility based on a client CellVisibility.    *    * @param cellVisibility    * @return a protocol buffer CellVisibility    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|CellVisibility
name|toCellVisibility
parameter_list|(
name|CellVisibility
name|cellVisibility
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toCellVisibility
argument_list|(
name|cellVisibility
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Authorizations to a client Authorizations    *    * @param proto    * @return the converted client Authorizations    */
specifier|public
specifier|static
name|Authorizations
name|toAuthorizations
parameter_list|(
name|ClientProtos
operator|.
name|Authorizations
name|proto
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toAuthorizations
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Authorizations bytes to a client Authorizations    *    * @param protoBytes    * @return the converted client Authorizations    * @throws DeserializationException    */
specifier|public
specifier|static
name|Authorizations
name|toAuthorizations
parameter_list|(
name|byte
index|[]
name|protoBytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
return|return
name|ProtobufConverter
operator|.
name|toAuthorizations
argument_list|(
name|protoBytes
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer Authorizations based on a client Authorizations.    *    * @param authorizations    * @return a protocol buffer Authorizations    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Authorizations
name|toAuthorizations
parameter_list|(
name|Authorizations
name|authorizations
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toAuthorizations
argument_list|(
name|authorizations
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|toUsersAndPermissions
parameter_list|(
name|String
name|user
parameter_list|,
name|Permission
name|perms
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toUsersAndPermissions
argument_list|(
name|user
argument_list|,
name|perms
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|toUsersAndPermissions
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|perms
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toUsersAndPermissions
argument_list|(
name|perms
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|toUsersAndPermissions
parameter_list|(
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|proto
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toUsersAndPermissions
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer TimeUnit to a client TimeUnit    *    * @param proto    * @return the converted client TimeUnit    */
specifier|public
specifier|static
name|TimeUnit
name|toTimeUnit
parameter_list|(
specifier|final
name|HBaseProtos
operator|.
name|TimeUnit
name|proto
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toTimeUnit
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Convert a client TimeUnit to a protocol buffer TimeUnit    *    * @param timeUnit    * @return the converted protocol buffer TimeUnit    */
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|TimeUnit
name|toProtoTimeUnit
parameter_list|(
specifier|final
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toProtoTimeUnit
argument_list|(
name|timeUnit
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer ThrottleType to a client ThrottleType    *    * @param proto    * @return the converted client ThrottleType    */
specifier|public
specifier|static
name|ThrottleType
name|toThrottleType
parameter_list|(
specifier|final
name|QuotaProtos
operator|.
name|ThrottleType
name|proto
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toThrottleType
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Convert a client ThrottleType to a protocol buffer ThrottleType    *    * @param type    * @return the converted protocol buffer ThrottleType    */
specifier|public
specifier|static
name|QuotaProtos
operator|.
name|ThrottleType
name|toProtoThrottleType
parameter_list|(
specifier|final
name|ThrottleType
name|type
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toProtoThrottleType
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer QuotaScope to a client QuotaScope    *    * @param proto    * @return the converted client QuotaScope    */
specifier|public
specifier|static
name|QuotaScope
name|toQuotaScope
parameter_list|(
specifier|final
name|QuotaProtos
operator|.
name|QuotaScope
name|proto
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toQuotaScope
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Convert a client QuotaScope to a protocol buffer QuotaScope    *    * @param scope    * @return the converted protocol buffer QuotaScope    */
specifier|public
specifier|static
name|QuotaProtos
operator|.
name|QuotaScope
name|toProtoQuotaScope
parameter_list|(
specifier|final
name|QuotaScope
name|scope
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toProtoQuotaScope
argument_list|(
name|scope
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer QuotaType to a client QuotaType    *    * @param proto    * @return the converted client QuotaType    */
specifier|public
specifier|static
name|QuotaType
name|toQuotaScope
parameter_list|(
specifier|final
name|QuotaProtos
operator|.
name|QuotaType
name|proto
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toQuotaScope
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Convert a client QuotaType to a protocol buffer QuotaType    *    * @param type    * @return the converted protocol buffer QuotaType    */
specifier|public
specifier|static
name|QuotaProtos
operator|.
name|QuotaType
name|toProtoQuotaScope
parameter_list|(
specifier|final
name|QuotaType
name|type
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toProtoQuotaScope
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**    * Build a protocol buffer TimedQuota    *    * @param limit the allowed number of request/data per timeUnit    * @param timeUnit the limit time unit    * @param scope the quota scope    * @return the protocol buffer TimedQuota    */
specifier|public
specifier|static
name|QuotaProtos
operator|.
name|TimedQuota
name|toTimedQuota
parameter_list|(
specifier|final
name|long
name|limit
parameter_list|,
specifier|final
name|TimeUnit
name|timeUnit
parameter_list|,
specifier|final
name|QuotaScope
name|scope
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toTimedQuota
argument_list|(
name|limit
argument_list|,
name|timeUnit
argument_list|,
name|scope
argument_list|)
return|;
block|}
comment|/**    * Generates a marker for the WAL so that we propagate the notion of a bulk region load    * throughout the WAL.    *    * @param tableName         The tableName into which the bulk load is being imported into.    * @param encodedRegionName Encoded region name of the region which is being bulk loaded.    * @param storeFiles        A set of store files of a column family are bulk loaded.    * @param bulkloadSeqId     sequence ID (by a force flush) used to create bulk load hfile    *                          name    * @return The WAL log marker for bulk loads.    */
specifier|public
specifier|static
name|WALProtos
operator|.
name|BulkLoadDescriptor
name|toBulkLoadDescriptor
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|ByteString
name|encodedRegionName
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|storeFiles
parameter_list|,
name|long
name|bulkloadSeqId
parameter_list|)
block|{
return|return
name|ProtobufConverter
operator|.
name|toBulkLoadDescriptor
argument_list|(
name|tableName
argument_list|,
name|encodedRegionName
argument_list|,
name|storeFiles
argument_list|,
name|bulkloadSeqId
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ReplicationLoadSink
name|toReplicationLoadSink
parameter_list|(
name|ClusterStatusProtos
operator|.
name|ReplicationLoadSink
name|cls
parameter_list|)
block|{
return|return
operator|new
name|ReplicationLoadSink
argument_list|(
name|cls
operator|.
name|getAgeOfLastAppliedOp
argument_list|()
argument_list|,
name|cls
operator|.
name|getTimeStampsOfLastAppliedOp
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ReplicationLoadSource
name|toReplicationLoadSource
parameter_list|(
name|ClusterStatusProtos
operator|.
name|ReplicationLoadSource
name|cls
parameter_list|)
block|{
return|return
operator|new
name|ReplicationLoadSource
argument_list|(
name|cls
operator|.
name|getPeerID
argument_list|()
argument_list|,
name|cls
operator|.
name|getAgeOfLastShippedOp
argument_list|()
argument_list|,
name|cls
operator|.
name|getSizeOfLogQueue
argument_list|()
argument_list|,
name|cls
operator|.
name|getTimeStampOfLastShippedOp
argument_list|()
argument_list|,
name|cls
operator|.
name|getReplicationLag
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ReplicationLoadSource
argument_list|>
name|toReplicationLoadSourceList
parameter_list|(
name|List
argument_list|<
name|ClusterStatusProtos
operator|.
name|ReplicationLoadSource
argument_list|>
name|clsList
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ReplicationLoadSource
argument_list|>
name|rlsList
init|=
operator|new
name|ArrayList
argument_list|<
name|ReplicationLoadSource
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClusterStatusProtos
operator|.
name|ReplicationLoadSource
name|cls
range|:
name|clsList
control|)
block|{
name|rlsList
operator|.
name|add
argument_list|(
name|toReplicationLoadSource
argument_list|(
name|cls
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rlsList
return|;
block|}
comment|/**    * Get a protocol buffer VersionInfo    *    * @return the converted protocol buffer VersionInfo    */
specifier|public
specifier|static
name|RPCProtos
operator|.
name|VersionInfo
name|getVersionInfo
parameter_list|()
block|{
name|RPCProtos
operator|.
name|VersionInfo
operator|.
name|Builder
name|builder
init|=
name|RPCProtos
operator|.
name|VersionInfo
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setVersion
argument_list|(
name|VersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUrl
argument_list|(
name|VersionInfo
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRevision
argument_list|(
name|VersionInfo
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUser
argument_list|(
name|VersionInfo
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setDate
argument_list|(
name|VersionInfo
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSrcChecksum
argument_list|(
name|VersionInfo
operator|.
name|getSrcChecksum
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

