begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distr=ibuted on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
operator|.
name|REGION_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|HBaseZeroCopyByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|metrics
operator|.
name|ScanMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|TimeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|AccessControlService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetOnlineRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetOnlineRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetRegionInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetServerInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetServerInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetStoreFileRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|GetStoreFileResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|MergeRegionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|SplitRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AuthenticationProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|CellProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|BulkLoadHFileRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|BulkLoadHFileResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|Column
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|CoprocessorServiceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|ColumnValue
operator|.
name|QualifierValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|DeleteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClusterStatusProtos
operator|.
name|RegionLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ComparatorProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|FilterProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|NameBytesPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MapReduceProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|CreateTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableDescriptorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|MasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionServerStartupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|CompactionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|TablePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|UserPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|token
operator|.
name|AuthenticationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|Authorizations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|CellVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|DynamicClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ExceptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Methods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcChannel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_comment
comment|/**  * Protobufs utility.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ProtobufUtil
block|{
specifier|private
name|ProtobufUtil
parameter_list|()
block|{   }
comment|/**    * Primitive type to class mapping.    */
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|PRIMITIVES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Many results are simple: no cell, exists true or false. To save on object creations,    *  we reuse them across calls.    */
specifier|private
specifier|final
specifier|static
name|Cell
index|[]
name|EMPTY_CELL_ARRAY
init|=
operator|new
name|Cell
index|[]
block|{}
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT
init|=
name|Result
operator|.
name|create
argument_list|(
name|EMPTY_CELL_ARRAY
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_EXISTS_TRUE
init|=
name|Result
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Result
name|EMPTY_RESULT_EXISTS_FALSE
init|=
name|Result
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB_EXISTS_TRUE
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ClientProtos
operator|.
name|Result
name|EMPTY_RESULT_PB_EXISTS_FALSE
decl_stmt|;
static|static
block|{
name|ClientProtos
operator|.
name|Result
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Result
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setExists
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB_EXISTS_TRUE
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setExists
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB_EXISTS_FALSE
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|EMPTY_RESULT_PB
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|/**    * Dynamic class loader to load filter/comparators    */
specifier|private
specifier|final
specifier|static
name|ClassLoader
name|CLASS_LOADER
decl_stmt|;
static|static
block|{
name|ClassLoader
name|parent
init|=
name|ProtobufUtil
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|CLASS_LOADER
operator|=
operator|new
name|DynamicClassLoader
argument_list|(
name|conf
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Byte
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Character
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Character
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Short
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Short
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Long
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Long
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Float
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Float
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Double
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Double
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVES
operator|.
name|put
argument_list|(
name|Void
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|Void
operator|.
name|TYPE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Magic we put ahead of a serialized protobuf message.    * For example, all znode content is protobuf messages with the below magic    * for preamble.    */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|PB_MAGIC
init|=
operator|new
name|byte
index|[]
block|{
literal|'P'
block|,
literal|'B'
block|,
literal|'U'
block|,
literal|'F'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PB_MAGIC_STR
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|PB_MAGIC
argument_list|)
decl_stmt|;
comment|/**    * Prepend the passed bytes with four bytes of magic, {@link #PB_MAGIC}, to flag what    * follows as a protobuf in hbase.  Prepend these bytes to all content written to znodes, etc.    * @param bytes Bytes to decorate    * @return The passed<code>bytes</codes> with magic prepended (Creates a new    * byte array that is<code>bytes.length</code> plus {@link #PB_MAGIC}.length.    */
specifier|public
specifier|static
name|byte
index|[]
name|prependPBMagic
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|add
argument_list|(
name|PB_MAGIC
argument_list|,
name|bytes
argument_list|)
return|;
block|}
comment|/**    * @param bytes Bytes to check.    * @return True if passed<code>bytes</code> has {@link #PB_MAGIC} for a prefix.    */
specifier|public
specifier|static
name|boolean
name|isPBMagicPrefix
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * @param bytes Bytes to check.    * @return True if passed<code>bytes</code> has {@link #PB_MAGIC} for a prefix.    */
specifier|public
specifier|static
name|boolean
name|isPBMagicPrefix
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|len
operator|<
name|PB_MAGIC
operator|.
name|length
condition|)
return|return
literal|false
return|;
return|return
name|Bytes
operator|.
name|compareTo
argument_list|(
name|PB_MAGIC
argument_list|,
literal|0
argument_list|,
name|PB_MAGIC
operator|.
name|length
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|,
name|PB_MAGIC
operator|.
name|length
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/**    * @param bytes    * @throws DeserializationException if we are missing the pb magic prefix    */
specifier|public
specifier|static
name|void
name|expectPBMagicPrefix
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
operator|!
name|isPBMagicPrefix
argument_list|(
name|bytes
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
literal|"Missing pb magic "
operator|+
name|PB_MAGIC_STR
operator|+
literal|" prefix"
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return Length of {@link #PB_MAGIC}    */
specifier|public
specifier|static
name|int
name|lengthOfPBMagic
parameter_list|()
block|{
return|return
name|PB_MAGIC
operator|.
name|length
return|;
block|}
comment|/**    * Return the IOException thrown by the remote server wrapped in    * ServiceException as cause.    *    * @param se ServiceException that wraps IO exception thrown by the server    * @return Exception wrapped in ServiceException or    *   a new IOException that wraps the unexpected ServiceException.    */
specifier|public
specifier|static
name|IOException
name|getRemoteException
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
name|Throwable
name|e
init|=
name|se
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
return|;
block|}
if|if
condition|(
name|ExceptionUtil
operator|.
name|isInterrupt
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
name|ExceptionUtil
operator|.
name|asInterrupt
argument_list|(
name|e
argument_list|)
return|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|e
operator|=
operator|(
operator|(
name|RemoteException
operator|)
name|e
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
expr_stmt|;
block|}
return|return
name|e
operator|instanceof
name|IOException
condition|?
operator|(
name|IOException
operator|)
name|e
else|:
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
return|;
block|}
comment|/**    * Convert a ServerName to a protocol buffer ServerName    *    * @param serverName the ServerName to convert    * @return the converted protocol buffer ServerName    * @see #toServerName(org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.ServerName)    */
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|ServerName
name|toServerName
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|Builder
name|builder
init|=
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setHostName
argument_list|(
name|serverName
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverName
operator|.
name|getPort
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|setPort
argument_list|(
name|serverName
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serverName
operator|.
name|getStartcode
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|setStartCode
argument_list|(
name|serverName
operator|.
name|getStartcode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer ServerName to a ServerName    *    * @param proto the protocol buffer ServerName to convert    * @return the converted ServerName    */
specifier|public
specifier|static
name|ServerName
name|toServerName
parameter_list|(
specifier|final
name|HBaseProtos
operator|.
name|ServerName
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|hostName
init|=
name|proto
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|long
name|startCode
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|port
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasPort
argument_list|()
condition|)
block|{
name|port
operator|=
name|proto
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStartCode
argument_list|()
condition|)
block|{
name|startCode
operator|=
name|proto
operator|.
name|getStartCode
argument_list|()
expr_stmt|;
block|}
return|return
name|ServerName
operator|.
name|valueOf
argument_list|(
name|hostName
argument_list|,
name|port
argument_list|,
name|startCode
argument_list|)
return|;
block|}
comment|/**    * Get HTableDescriptor[] from GetTableDescriptorsResponse protobuf    *    * @param proto the GetTableDescriptorsResponse    * @return HTableDescriptor[]    */
specifier|public
specifier|static
name|HTableDescriptor
index|[]
name|getHTableDescriptorArray
parameter_list|(
name|GetTableDescriptorsResponse
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|HTableDescriptor
index|[]
name|ret
init|=
operator|new
name|HTableDescriptor
index|[
name|proto
operator|.
name|getTableSchemaCount
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proto
operator|.
name|getTableSchemaCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|HTableDescriptor
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getTableSchema
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * get the split keys in form "byte [][]" from a CreateTableRequest proto    *    * @param proto the CreateTableRequest    * @return the split keys    */
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|getSplitKeysArray
parameter_list|(
specifier|final
name|CreateTableRequest
name|proto
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
name|proto
operator|.
name|getSplitKeysCount
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proto
operator|.
name|getSplitKeysCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|splitKeys
index|[
name|i
index|]
operator|=
name|proto
operator|.
name|getSplitKeys
argument_list|(
name|i
argument_list|)
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
return|return
name|splitKeys
return|;
block|}
comment|/**    * Convert a protobuf Durability into a client Durability    */
specifier|public
specifier|static
name|Durability
name|toDurability
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
condition|)
block|{
case|case
name|USE_DEFAULT
case|:
return|return
name|Durability
operator|.
name|USE_DEFAULT
return|;
case|case
name|SKIP_WAL
case|:
return|return
name|Durability
operator|.
name|SKIP_WAL
return|;
case|case
name|ASYNC_WAL
case|:
return|return
name|Durability
operator|.
name|ASYNC_WAL
return|;
case|case
name|SYNC_WAL
case|:
return|return
name|Durability
operator|.
name|SYNC_WAL
return|;
case|case
name|FSYNC_WAL
case|:
return|return
name|Durability
operator|.
name|FSYNC_WAL
return|;
default|default:
return|return
name|Durability
operator|.
name|USE_DEFAULT
return|;
block|}
block|}
comment|/**    * Convert a client Durability into a protbuf Durability    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
name|toDurability
parameter_list|(
specifier|final
name|Durability
name|d
parameter_list|)
block|{
switch|switch
condition|(
name|d
condition|)
block|{
case|case
name|USE_DEFAULT
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|USE_DEFAULT
return|;
case|case
name|SKIP_WAL
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|SKIP_WAL
return|;
case|case
name|ASYNC_WAL
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|ASYNC_WAL
return|;
case|case
name|SYNC_WAL
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|SYNC_WAL
return|;
case|case
name|FSYNC_WAL
case|:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|FSYNC_WAL
return|;
default|default:
return|return
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|Durability
operator|.
name|USE_DEFAULT
return|;
block|}
block|}
comment|/**    * Convert a protocol buffer Get to a client Get    *    * @param proto the protocol buffer Get to convert    * @return the converted client Get    * @throws IOException    */
specifier|public
specifier|static
name|Get
name|toGet
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Get
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasCacheBlocks
argument_list|()
condition|)
block|{
name|get
operator|.
name|setCacheBlocks
argument_list|(
name|proto
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMaxVersions
argument_list|()
condition|)
block|{
name|get
operator|.
name|setMaxVersions
argument_list|(
name|proto
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStoreLimit
argument_list|()
condition|)
block|{
name|get
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
name|proto
operator|.
name|getStoreLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStoreOffset
argument_list|()
condition|)
block|{
name|get
operator|.
name|setRowOffsetPerColumnFamily
argument_list|(
name|proto
operator|.
name|getStoreOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasTimeRange
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
name|timeRange
init|=
name|proto
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
name|long
name|minStamp
init|=
literal|0
decl_stmt|;
name|long
name|maxStamp
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|timeRange
operator|.
name|hasFrom
argument_list|()
condition|)
block|{
name|minStamp
operator|=
name|timeRange
operator|.
name|getFrom
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timeRange
operator|.
name|hasTo
argument_list|()
condition|)
block|{
name|maxStamp
operator|=
name|timeRange
operator|.
name|getTo
argument_list|()
expr_stmt|;
block|}
name|get
operator|.
name|setTimeRange
argument_list|(
name|minStamp
argument_list|,
name|maxStamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|FilterProtos
operator|.
name|Filter
name|filter
init|=
name|proto
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|get
operator|.
name|setFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|get
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getColumnCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Column
name|column
range|:
name|proto
operator|.
name|getColumnList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|.
name|getQualifierCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ByteString
name|qualifier
range|:
name|column
operator|.
name|getQualifierList
argument_list|()
control|)
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|proto
operator|.
name|hasExistenceOnly
argument_list|()
operator|&&
name|proto
operator|.
name|getExistenceOnly
argument_list|()
condition|)
block|{
name|get
operator|.
name|setCheckExistenceOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasClosestRowBefore
argument_list|()
operator|&&
name|proto
operator|.
name|getClosestRowBefore
argument_list|()
condition|)
block|{
name|get
operator|.
name|setClosestRowBefore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|get
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Put.    *    * @param proto The protocol buffer MutationProto to convert    * @return A client Put.    * @throws IOException    */
specifier|public
specifier|static
name|Put
name|toPut
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toPut
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Put.    *    * @param proto The protocol buffer MutationProto to convert    * @param cellScanner If non-null, the Cell data that goes with this proto.    * @return A client Put.    * @throws IOException    */
specifier|public
specifier|static
name|Put
name|toPut
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: Server-side at least why do we convert back to the Client types?  Why not just pb it?
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutationType
operator|.
name|PUT
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|long
name|timestamp
init|=
name|proto
operator|.
name|hasTimestamp
argument_list|()
condition|?
name|proto
operator|.
name|getTimestamp
argument_list|()
else|:
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|int
name|cellCount
init|=
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|?
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cellCount
operator|>
literal|0
condition|)
block|{
comment|// The proto has metadata only and the data is separate to be found in the cellScanner.
if|if
condition|(
name|cellScanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but no cellScanner: "
operator|+
name|toShortString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but at index "
operator|+
name|i
operator|+
literal|" no cell returned: "
operator|+
name|toShortString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|put
operator|==
literal|null
condition|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|put
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|proto
operator|.
name|hasRow
argument_list|()
condition|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"row cannot be null"
argument_list|)
throw|;
block|}
comment|// The proto has the metadata and the data itself
for|for
control|(
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|qv
operator|.
name|hasValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required field: qualifier value"
argument_list|)
throw|;
block|}
name|ByteBuffer
name|qualifier
init|=
name|qv
operator|.
name|hasQualifier
argument_list|()
condition|?
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
else|:
literal|null
decl_stmt|;
name|ByteBuffer
name|value
init|=
name|qv
operator|.
name|hasValue
argument_list|()
condition|?
name|qv
operator|.
name|getValue
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
else|:
literal|null
decl_stmt|;
name|long
name|ts
init|=
name|timestamp
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTimestamp
argument_list|()
condition|)
block|{
name|ts
operator|=
name|qv
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|tags
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTags
argument_list|()
condition|)
block|{
name|tags
operator|=
name|qv
operator|.
name|getTags
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|Object
index|[]
name|array
init|=
name|Tag
operator|.
name|asList
argument_list|(
name|tags
argument_list|,
literal|0
argument_list|,
operator|(
name|short
operator|)
name|tags
operator|.
name|length
argument_list|)
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Tag
index|[]
name|tagArray
init|=
operator|new
name|Tag
index|[
name|array
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tagArray
index|[
name|i
index|]
operator|=
operator|(
name|Tag
operator|)
name|array
index|[
name|i
index|]
expr_stmt|;
block|}
name|put
operator|.
name|addImmutable
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|,
name|value
argument_list|,
name|tagArray
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|addImmutable
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|put
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|proto
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|put
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|put
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Delete    *    * @param proto the protocol buffer Mutate to convert    * @return the converted client Delete    * @throws IOException    */
specifier|public
specifier|static
name|Delete
name|toDelete
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toDelete
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to a Delete    *    * @param proto the protocol buffer Mutate to convert    * @param cellScanner if non-null, the data that goes with this delete.    * @return the converted client Delete    * @throws IOException    */
specifier|public
specifier|static
name|Delete
name|toDelete
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutationType
operator|.
name|DELETE
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|hasRow
argument_list|()
condition|?
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
name|long
name|timestamp
init|=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasTimestamp
argument_list|()
condition|)
block|{
name|timestamp
operator|=
name|proto
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
name|Delete
name|delete
init|=
literal|null
decl_stmt|;
name|int
name|cellCount
init|=
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|?
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cellCount
operator|>
literal|0
condition|)
block|{
comment|// The proto has metadata only and the data is separate to be found in the cellScanner.
if|if
condition|(
name|cellScanner
operator|==
literal|null
condition|)
block|{
comment|// TextFormat should be fine for a Delete since it carries no data, just coordinates.
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but no cellScanner: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
comment|// TextFormat should be fine for a Delete since it carries no data, just coordinates.
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but at index "
operator|+
name|i
operator|+
literal|" no cell returned: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|delete
operator|==
literal|null
condition|)
block|{
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|delete
operator|.
name|addDeleteMarker
argument_list|(
name|KeyValueUtil
operator|.
name|ensureKeyValue
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
name|DeleteType
name|deleteType
init|=
name|qv
operator|.
name|getDeleteType
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasQualifier
argument_list|()
condition|)
block|{
name|qualifier
operator|=
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|long
name|ts
init|=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTimestamp
argument_list|()
condition|)
block|{
name|ts
operator|=
name|qv
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|deleteType
operator|==
name|DeleteType
operator|.
name|DELETE_ONE_VERSION
condition|)
block|{
name|delete
operator|.
name|deleteColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteType
operator|==
name|DeleteType
operator|.
name|DELETE_MULTIPLE_VERSIONS
condition|)
block|{
name|delete
operator|.
name|deleteColumns
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteType
operator|==
name|DeleteType
operator|.
name|DELETE_FAMILY_VERSION
condition|)
block|{
name|delete
operator|.
name|deleteFamilyVersion
argument_list|(
name|family
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|deleteFamily
argument_list|(
name|family
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|delete
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|proto
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|delete
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|delete
return|;
block|}
comment|/**    * Convert a protocol buffer Mutate to an Append    * @param cellScanner    * @param proto the protocol buffer Mutate to convert    * @return the converted client Append    * @throws IOException     */
specifier|public
specifier|static
name|Append
name|toAppend
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutationType
operator|.
name|APPEND
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|hasRow
argument_list|()
condition|?
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
name|Append
name|append
init|=
literal|null
decl_stmt|;
name|int
name|cellCount
init|=
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|?
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cellCount
operator|>
literal|0
condition|)
block|{
comment|// The proto has metadata only and the data is separate to be found in the cellScanner.
if|if
condition|(
name|cellScanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but no cellScanner: "
operator|+
name|toShortString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but at index "
operator|+
name|i
operator|+
literal|" no cell returned: "
operator|+
name|toShortString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|append
operator|==
literal|null
condition|)
block|{
name|append
operator|=
operator|new
name|Append
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|append
operator|.
name|add
argument_list|(
name|KeyValueUtil
operator|.
name|ensureKeyValue
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|append
operator|=
operator|new
name|Append
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qv
operator|.
name|hasValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required field: qualifer value"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|value
init|=
name|qv
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tags
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTags
argument_list|()
condition|)
block|{
name|tags
operator|=
name|qv
operator|.
name|getTags
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|append
operator|.
name|add
argument_list|(
name|CellUtil
operator|.
name|createCell
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|qv
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|value
argument_list|,
name|tags
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|append
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|proto
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|append
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|append
return|;
block|}
comment|/**    * Convert a MutateRequest to Mutation    *    * @param proto the protocol buffer Mutate to convert    * @return the converted Mutation    * @throws IOException    */
specifier|public
specifier|static
name|Mutation
name|toMutation
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|MutationType
operator|.
name|APPEND
condition|)
block|{
return|return
name|toAppend
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|MutationType
operator|.
name|DELETE
condition|)
block|{
return|return
name|toDelete
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|MutationType
operator|.
name|PUT
condition|)
block|{
return|return
name|toPut
argument_list|(
name|proto
argument_list|,
literal|null
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown mutation type "
operator|+
name|type
argument_list|)
throw|;
block|}
comment|/**    * Convert a protocol buffer Mutate to an Increment    *    * @param proto the protocol buffer Mutate to convert    * @return the converted client Increment    * @throws IOException    */
specifier|public
specifier|static
name|Increment
name|toIncrement
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|cellScanner
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationType
name|type
init|=
name|proto
operator|.
name|getMutateType
argument_list|()
decl_stmt|;
assert|assert
name|type
operator|==
name|MutationType
operator|.
name|INCREMENT
operator|:
name|type
operator|.
name|name
argument_list|()
assert|;
name|byte
index|[]
name|row
init|=
name|proto
operator|.
name|hasRow
argument_list|()
condition|?
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
name|Increment
name|increment
init|=
literal|null
decl_stmt|;
name|int
name|cellCount
init|=
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|?
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|cellCount
operator|>
literal|0
condition|)
block|{
comment|// The proto has metadata only and the data is separate to be found in the cellScanner.
if|if
condition|(
name|cellScanner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but no cellScanner: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|cellScanner
operator|.
name|advance
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Cell count of "
operator|+
name|cellCount
operator|+
literal|" but at index "
operator|+
name|i
operator|+
literal|" no cell returned: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
argument_list|)
throw|;
block|}
name|Cell
name|cell
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|increment
operator|==
literal|null
condition|)
block|{
name|increment
operator|=
operator|new
name|Increment
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|increment
operator|.
name|add
argument_list|(
name|KeyValueUtil
operator|.
name|ensureKeyValue
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|increment
operator|=
operator|new
name|Increment
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnValue
name|column
range|:
name|proto
operator|.
name|getColumnValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|QualifierValue
name|qv
range|:
name|column
operator|.
name|getQualifierValueList
argument_list|()
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|qv
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qv
operator|.
name|hasValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Missing required field: qualifer value"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|value
init|=
name|qv
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tags
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qv
operator|.
name|hasTags
argument_list|()
condition|)
block|{
name|tags
operator|=
name|qv
operator|.
name|getTags
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|increment
operator|.
name|add
argument_list|(
name|CellUtil
operator|.
name|createCell
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|qv
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|value
argument_list|,
name|tags
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|proto
operator|.
name|hasTimeRange
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
name|timeRange
init|=
name|proto
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
name|long
name|minStamp
init|=
literal|0
decl_stmt|;
name|long
name|maxStamp
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|timeRange
operator|.
name|hasFrom
argument_list|()
condition|)
block|{
name|minStamp
operator|=
name|timeRange
operator|.
name|getFrom
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timeRange
operator|.
name|hasTo
argument_list|()
condition|)
block|{
name|maxStamp
operator|=
name|timeRange
operator|.
name|getTo
argument_list|()
expr_stmt|;
block|}
name|increment
operator|.
name|setTimeRange
argument_list|(
name|minStamp
argument_list|,
name|maxStamp
argument_list|)
expr_stmt|;
block|}
name|increment
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|proto
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|increment
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|increment
return|;
block|}
comment|/**    * Convert a client Scan to a protocol buffer Scan    *    * @param scan the client Scan to convert    * @return the converted protocol buffer Scan    * @throws IOException    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Scan
name|toScan
parameter_list|(
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientProtos
operator|.
name|Scan
operator|.
name|Builder
name|scanBuilder
init|=
name|ClientProtos
operator|.
name|Scan
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|scanBuilder
operator|.
name|setCacheBlocks
argument_list|(
name|scan
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|scan
operator|.
name|getBatch
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setBatchSize
argument_list|(
name|scan
operator|.
name|getBatch
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getMaxResultSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setMaxResultSize
argument_list|(
name|scan
operator|.
name|getMaxResultSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|isSmall
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setSmall
argument_list|(
name|scan
operator|.
name|isSmall
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|loadColumnFamiliesOnDemand
init|=
name|scan
operator|.
name|getLoadColumnFamiliesOnDemandValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|loadColumnFamiliesOnDemand
operator|!=
literal|null
condition|)
block|{
name|scanBuilder
operator|.
name|setLoadColumnFamiliesOnDemand
argument_list|(
name|loadColumnFamiliesOnDemand
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|scanBuilder
operator|.
name|setMaxVersions
argument_list|(
name|scan
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
name|TimeRange
name|timeRange
init|=
name|scan
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|timeRange
operator|.
name|isAllTime
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|Builder
name|timeRangeBuilder
init|=
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|timeRangeBuilder
operator|.
name|setFrom
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|timeRangeBuilder
operator|.
name|setTo
argument_list|(
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|scanBuilder
operator|.
name|setTimeRange
argument_list|(
name|timeRangeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attributes
init|=
name|scan
operator|.
name|getAttributesMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NameBytesPair
operator|.
name|Builder
name|attributeBuilder
init|=
name|NameBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|attributeBuilder
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|attributeBuilder
operator|.
name|setValue
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scanBuilder
operator|.
name|addAttribute
argument_list|(
name|attributeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|byte
index|[]
name|startRow
init|=
name|scan
operator|.
name|getStartRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|startRow
operator|!=
literal|null
operator|&&
name|startRow
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setStartRow
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|stopRow
init|=
name|scan
operator|.
name|getStopRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|stopRow
operator|!=
literal|null
operator|&&
name|stopRow
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setStopRow
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|scan
operator|.
name|getFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|hasFamilies
argument_list|()
condition|)
block|{
name|Column
operator|.
name|Builder
name|columnBuilder
init|=
name|Column
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|family
range|:
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|columnBuilder
operator|.
name|setFamily
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
name|family
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|columnBuilder
operator|.
name|clearQualifier
argument_list|()
expr_stmt|;
if|if
condition|(
name|qualifiers
operator|!=
literal|null
operator|&&
name|qualifiers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|qualifiers
control|)
block|{
name|columnBuilder
operator|.
name|addQualifier
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|scanBuilder
operator|.
name|addColumn
argument_list|(
name|columnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|scan
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setStoreLimit
argument_list|(
name|scan
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scanBuilder
operator|.
name|setStoreOffset
argument_list|(
name|scan
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scan
operator|.
name|isReversed
argument_list|()
condition|)
block|{
name|scanBuilder
operator|.
name|setReversed
argument_list|(
name|scan
operator|.
name|isReversed
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|scanBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer Scan to a client Scan    *    * @param proto the protocol buffer Scan to convert    * @return the converted client Scan    * @throws IOException    */
specifier|public
specifier|static
name|Scan
name|toScan
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Scan
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|startRow
init|=
name|HConstants
operator|.
name|EMPTY_START_ROW
decl_stmt|;
name|byte
index|[]
name|stopRow
init|=
name|HConstants
operator|.
name|EMPTY_END_ROW
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasStartRow
argument_list|()
condition|)
block|{
name|startRow
operator|=
name|proto
operator|.
name|getStartRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStopRow
argument_list|()
condition|)
block|{
name|stopRow
operator|=
name|proto
operator|.
name|getStopRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|startRow
argument_list|,
name|stopRow
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasCacheBlocks
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setCacheBlocks
argument_list|(
name|proto
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMaxVersions
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|proto
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStoreLimit
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setMaxResultsPerColumnFamily
argument_list|(
name|proto
operator|.
name|getStoreLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStoreOffset
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setRowOffsetPerColumnFamily
argument_list|(
name|proto
operator|.
name|getStoreOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasLoadColumnFamiliesOnDemand
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setLoadColumnFamiliesOnDemand
argument_list|(
name|proto
operator|.
name|getLoadColumnFamiliesOnDemand
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasTimeRange
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
name|timeRange
init|=
name|proto
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
name|long
name|minStamp
init|=
literal|0
decl_stmt|;
name|long
name|maxStamp
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|timeRange
operator|.
name|hasFrom
argument_list|()
condition|)
block|{
name|minStamp
operator|=
name|timeRange
operator|.
name|getFrom
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timeRange
operator|.
name|hasTo
argument_list|()
condition|)
block|{
name|maxStamp
operator|=
name|timeRange
operator|.
name|getTo
argument_list|()
expr_stmt|;
block|}
name|scan
operator|.
name|setTimeRange
argument_list|(
name|minStamp
argument_list|,
name|maxStamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasFilter
argument_list|()
condition|)
block|{
name|FilterProtos
operator|.
name|Filter
name|filter
init|=
name|proto
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasBatchSize
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setBatch
argument_list|(
name|proto
operator|.
name|getBatchSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMaxResultSize
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setMaxResultSize
argument_list|(
name|proto
operator|.
name|getMaxResultSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasSmall
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setSmall
argument_list|(
name|proto
operator|.
name|getSmall
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NameBytesPair
name|attribute
range|:
name|proto
operator|.
name|getAttributeList
argument_list|()
control|)
block|{
name|scan
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getColumnCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Column
name|column
range|:
name|proto
operator|.
name|getColumnList
argument_list|()
control|)
block|{
name|byte
index|[]
name|family
init|=
name|column
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|.
name|getQualifierCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ByteString
name|qualifier
range|:
name|column
operator|.
name|getQualifierList
argument_list|()
control|)
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|proto
operator|.
name|hasReversed
argument_list|()
condition|)
block|{
name|scan
operator|.
name|setReversed
argument_list|(
name|proto
operator|.
name|getReversed
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|scan
return|;
block|}
comment|/**    * Create a protocol buffer Get based on a client Get.    *    * @param get the client Get    * @return a protocol buffer Get    * @throws IOException    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Get
name|toGet
parameter_list|(
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientProtos
operator|.
name|Get
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Get
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setRow
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|get
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCacheBlocks
argument_list|(
name|get
operator|.
name|getCacheBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMaxVersions
argument_list|(
name|get
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|get
operator|.
name|getFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|get
operator|.
name|getFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TimeRange
name|timeRange
init|=
name|get
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|timeRange
operator|.
name|isAllTime
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|Builder
name|timeRangeBuilder
init|=
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|timeRangeBuilder
operator|.
name|setFrom
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|timeRangeBuilder
operator|.
name|setTo
argument_list|(
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTimeRange
argument_list|(
name|timeRangeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attributes
init|=
name|get
operator|.
name|getAttributesMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NameBytesPair
operator|.
name|Builder
name|attributeBuilder
init|=
name|NameBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|attributeBuilder
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|attributeBuilder
operator|.
name|setValue
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|attributeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|get
operator|.
name|hasFamilies
argument_list|()
condition|)
block|{
name|Column
operator|.
name|Builder
name|columnBuilder
init|=
name|Column
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|families
init|=
name|get
operator|.
name|getFamilyMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|family
range|:
name|families
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
name|family
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|columnBuilder
operator|.
name|setFamily
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|columnBuilder
operator|.
name|clearQualifier
argument_list|()
expr_stmt|;
if|if
condition|(
name|qualifiers
operator|!=
literal|null
operator|&&
name|qualifiers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|qualifiers
control|)
block|{
name|columnBuilder
operator|.
name|addQualifier
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|addColumn
argument_list|(
name|columnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|get
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|setStoreLimit
argument_list|(
name|get
operator|.
name|getMaxResultsPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|get
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|setStoreOffset
argument_list|(
name|get
operator|.
name|getRowOffsetPerColumnFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|get
operator|.
name|isCheckExistenceOnly
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setExistenceOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|get
operator|.
name|isClosestRowBefore
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setClosestRowBefore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a client Increment to a protobuf Mutate.    *    * @param increment    * @return the converted mutate    */
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|Increment
name|increment
parameter_list|,
specifier|final
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|,
name|long
name|nonce
parameter_list|)
block|{
name|builder
operator|.
name|setRow
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|increment
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMutateType
argument_list|(
name|MutationType
operator|.
name|INCREMENT
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|increment
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nonce
operator|!=
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
name|builder
operator|.
name|setNonce
argument_list|(
name|nonce
argument_list|)
expr_stmt|;
block|}
name|TimeRange
name|timeRange
init|=
name|increment
operator|.
name|getTimeRange
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|timeRange
operator|.
name|isAllTime
argument_list|()
condition|)
block|{
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|Builder
name|timeRangeBuilder
init|=
name|HBaseProtos
operator|.
name|TimeRange
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|timeRangeBuilder
operator|.
name|setFrom
argument_list|(
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|timeRangeBuilder
operator|.
name|setTo
argument_list|(
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTimeRange
argument_list|(
name|timeRangeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ColumnValue
operator|.
name|Builder
name|columnBuilder
init|=
name|ColumnValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|QualifierValue
operator|.
name|Builder
name|valueBuilder
init|=
name|QualifierValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|family
range|:
name|increment
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|columnBuilder
operator|.
name|setFamily
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|columnBuilder
operator|.
name|clearQualifierValue
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|values
init|=
name|family
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|values
control|)
block|{
name|KeyValue
name|kv
init|=
name|KeyValueUtil
operator|.
name|ensureKeyValue
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|valueBuilder
operator|.
name|setQualifier
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|valueBuilder
operator|.
name|setValue
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|kv
operator|.
name|getTagsLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|valueBuilder
operator|.
name|setTags
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getTagsLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|columnBuilder
operator|.
name|addQualifierValue
argument_list|(
name|valueBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|addColumnValue
argument_list|(
name|columnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attributes
init|=
name|increment
operator|.
name|getAttributesMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NameBytesPair
operator|.
name|Builder
name|attributeBuilder
init|=
name|NameBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|attributeBuilder
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|attributeBuilder
operator|.
name|setValue
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|attributeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toMutation
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer Mutate based on a client Mutation    *    * @param type    * @param mutation    * @return a protobuf'd Mutation    * @throws IOException    */
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
specifier|final
name|long
name|nonce
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toMutation
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|MutationProto
operator|.
name|newBuilder
argument_list|()
argument_list|,
name|nonce
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toMutation
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MutationProto
name|toMutation
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|,
name|long
name|nonce
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|=
name|getMutationBuilderAndSetCommonFields
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|nonce
operator|!=
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
name|builder
operator|.
name|setNonce
argument_list|(
name|nonce
argument_list|)
expr_stmt|;
block|}
name|ColumnValue
operator|.
name|Builder
name|columnBuilder
init|=
name|ColumnValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|QualifierValue
operator|.
name|Builder
name|valueBuilder
init|=
name|QualifierValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|family
range|:
name|mutation
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|columnBuilder
operator|.
name|clear
argument_list|()
expr_stmt|;
name|columnBuilder
operator|.
name|setFamily
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|family
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|family
operator|.
name|getValue
argument_list|()
control|)
block|{
name|KeyValue
name|kv
init|=
name|KeyValueUtil
operator|.
name|ensureKeyValue
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|valueBuilder
operator|.
name|setQualifier
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|valueBuilder
operator|.
name|setValue
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|valueBuilder
operator|.
name|setTimestamp
argument_list|(
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getTagsLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|valueBuilder
operator|.
name|setTags
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|CellUtil
operator|.
name|getTagArray
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
name|MutationType
operator|.
name|DELETE
condition|)
block|{
name|KeyValue
operator|.
name|Type
name|keyValueType
init|=
name|KeyValue
operator|.
name|Type
operator|.
name|codeToType
argument_list|(
name|kv
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|valueBuilder
operator|.
name|setDeleteType
argument_list|(
name|toDeleteType
argument_list|(
name|keyValueType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|columnBuilder
operator|.
name|addQualifierValue
argument_list|(
name|valueBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addColumnValue
argument_list|(
name|columnBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Create a protocol buffer MutationProto based on a client Mutation. Does NOT include data.    * Understanding is that the Cell will be transported other than via protobuf.    * @param type    * @param mutation    * @param builder    * @return a protobuf'd Mutation    * @throws IOException    */
specifier|public
specifier|static
name|MutationProto
name|toMutationNoData
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
specifier|final
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toMutationNoData
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer MutationProto based on a client Mutation.  Does NOT include data.    * Understanding is that the Cell will be transported other than via protobuf.    * @param type    * @param mutation    * @return a protobuf'd Mutation    * @throws IOException    */
specifier|public
specifier|static
name|MutationProto
name|toMutationNoData
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|)
throws|throws
name|IOException
block|{
name|MutationProto
operator|.
name|Builder
name|builder
init|=
name|MutationProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
return|return
name|toMutationNoData
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MutationProto
name|toMutationNoData
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
specifier|final
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|,
name|long
name|nonce
parameter_list|)
throws|throws
name|IOException
block|{
name|getMutationBuilderAndSetCommonFields
argument_list|(
name|type
argument_list|,
name|mutation
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
name|mutation
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nonce
operator|!=
name|HConstants
operator|.
name|NO_NONCE
condition|)
block|{
name|builder
operator|.
name|setNonce
argument_list|(
name|nonce
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Code shared by {@link #toMutation(MutationType, Mutation)} and    * {@link #toMutationNoData(MutationType, Mutation)}    * @param type    * @param mutation    * @return A partly-filled out protobuf'd Mutation.    */
specifier|private
specifier|static
name|MutationProto
operator|.
name|Builder
name|getMutationBuilderAndSetCommonFields
parameter_list|(
specifier|final
name|MutationType
name|type
parameter_list|,
specifier|final
name|Mutation
name|mutation
parameter_list|,
name|MutationProto
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|setRow
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|mutation
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMutateType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setDurability
argument_list|(
name|toDurability
argument_list|(
name|mutation
operator|.
name|getDurability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTimestamp
argument_list|(
name|mutation
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attributes
init|=
name|mutation
operator|.
name|getAttributesMap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NameBytesPair
operator|.
name|Builder
name|attributeBuilder
init|=
name|NameBytesPair
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|attribute
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|attributeBuilder
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|attributeBuilder
operator|.
name|setValue
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|attributeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
comment|/**    * Convert a client Result to a protocol buffer Result    *    * @param result the client Result to convert    * @return the converted protocol buffer Result    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Result
name|toResult
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|getExists
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|toResult
argument_list|(
name|result
operator|.
name|getExists
argument_list|()
argument_list|)
return|;
block|}
name|Cell
index|[]
name|cells
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
if|if
condition|(
name|cells
operator|==
literal|null
operator|||
name|cells
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|EMPTY_RESULT_PB
return|;
block|}
name|ClientProtos
operator|.
name|Result
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Result
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|cells
control|)
block|{
name|builder
operator|.
name|addCell
argument_list|(
name|toCell
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a client Result to a protocol buffer Result    *    * @param existence the client existence to send    * @return the converted protocol buffer Result    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Result
name|toResult
parameter_list|(
specifier|final
name|boolean
name|existence
parameter_list|)
block|{
return|return
name|existence
condition|?
name|EMPTY_RESULT_PB_EXISTS_TRUE
else|:
name|EMPTY_RESULT_PB_EXISTS_FALSE
return|;
block|}
comment|/**    * Convert a client Result to a protocol buffer Result.    * The pb Result does not include the Cell data.  That is for transport otherwise.    *    * @param result the client Result to convert    * @return the converted protocol buffer Result    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Result
name|toResultNoData
parameter_list|(
specifier|final
name|Result
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|getExists
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|toResult
argument_list|(
name|result
operator|.
name|getExists
argument_list|()
argument_list|)
return|;
name|int
name|size
init|=
name|result
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return
name|EMPTY_RESULT_PB
return|;
name|ClientProtos
operator|.
name|Result
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Result
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer Result to a client Result    *    * @param proto the protocol buffer Result to convert    * @return the converted client Result    */
specifier|public
specifier|static
name|Result
name|toResult
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Result
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|.
name|hasExists
argument_list|()
condition|)
block|{
return|return
name|proto
operator|.
name|getExists
argument_list|()
condition|?
name|EMPTY_RESULT_EXISTS_TRUE
else|:
name|EMPTY_RESULT_EXISTS_FALSE
return|;
block|}
name|List
argument_list|<
name|CellProtos
operator|.
name|Cell
argument_list|>
name|values
init|=
name|proto
operator|.
name|getCellList
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|EMPTY_RESULT
return|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CellProtos
operator|.
name|Cell
name|c
range|:
name|values
control|)
block|{
name|cells
operator|.
name|add
argument_list|(
name|toCell
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Result to a client Result    *    * @param proto the protocol buffer Result to convert    * @param scanner Optional cell scanner.    * @return the converted client Result    * @throws IOException    */
specifier|public
specifier|static
name|Result
name|toResult
parameter_list|(
specifier|final
name|ClientProtos
operator|.
name|Result
name|proto
parameter_list|,
specifier|final
name|CellScanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CellProtos
operator|.
name|Cell
argument_list|>
name|values
init|=
name|proto
operator|.
name|getCellList
argument_list|()
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasExists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|values
operator|!=
literal|null
operator|&&
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
operator|&&
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad proto: exists with cells is no allowed "
operator|+
name|proto
argument_list|)
throw|;
block|}
return|return
name|proto
operator|.
name|getExists
argument_list|()
condition|?
name|EMPTY_RESULT_EXISTS_TRUE
else|:
name|EMPTY_RESULT_EXISTS_FALSE
return|;
block|}
comment|// TODO: Unit test that has some Cells in scanner and some in the proto.
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasAssociatedCellCount
argument_list|()
condition|)
block|{
name|int
name|count
init|=
name|proto
operator|.
name|getAssociatedCellCount
argument_list|()
decl_stmt|;
name|cells
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|count
operator|+
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scanner
operator|.
name|advance
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed get "
operator|+
name|i
operator|+
literal|" of "
operator|+
name|count
argument_list|)
throw|;
name|cells
operator|.
name|add
argument_list|(
name|scanner
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|cells
operator|==
literal|null
condition|)
name|cells
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CellProtos
operator|.
name|Cell
name|c
range|:
name|values
control|)
block|{
name|cells
operator|.
name|add
argument_list|(
name|toCell
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|cells
operator|==
literal|null
operator|||
name|cells
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|EMPTY_RESULT
else|:
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Convert a ByteArrayComparable to a protocol buffer Comparator    *    * @param comparator the ByteArrayComparable to convert    * @return the converted protocol buffer Comparator    */
specifier|public
specifier|static
name|ComparatorProtos
operator|.
name|Comparator
name|toComparator
parameter_list|(
name|ByteArrayComparable
name|comparator
parameter_list|)
block|{
name|ComparatorProtos
operator|.
name|Comparator
operator|.
name|Builder
name|builder
init|=
name|ComparatorProtos
operator|.
name|Comparator
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|comparator
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSerializedComparator
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|comparator
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer Comparator to a ByteArrayComparable    *    * @param proto the protocol buffer Comparator to convert    * @return the converted ByteArrayComparable    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|ByteArrayComparable
name|toComparator
parameter_list|(
name|ComparatorProtos
operator|.
name|Comparator
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|type
init|=
name|proto
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|funcName
init|=
literal|"parseFrom"
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|proto
operator|.
name|getSerializedComparator
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ByteArrayComparable
argument_list|>
name|c
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|ByteArrayComparable
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|type
argument_list|,
literal|true
argument_list|,
name|CLASS_LOADER
argument_list|)
decl_stmt|;
name|Method
name|parseFrom
init|=
name|c
operator|.
name|getMethod
argument_list|(
name|funcName
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|parseFrom
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to locate function: "
operator|+
name|funcName
operator|+
literal|" in type: "
operator|+
name|type
argument_list|)
throw|;
block|}
return|return
operator|(
name|ByteArrayComparable
operator|)
name|parseFrom
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a protocol buffer Filter to a client Filter    *    * @param proto the protocol buffer Filter to convert    * @return the converted Filter    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Filter
name|toFilter
parameter_list|(
name|FilterProtos
operator|.
name|Filter
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|type
init|=
name|proto
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|proto
operator|.
name|getSerializedFilter
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|funcName
init|=
literal|"parseFrom"
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Filter
argument_list|>
name|c
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Filter
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|type
argument_list|,
literal|true
argument_list|,
name|CLASS_LOADER
argument_list|)
decl_stmt|;
name|Method
name|parseFrom
init|=
name|c
operator|.
name|getMethod
argument_list|(
name|funcName
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|parseFrom
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to locate function: "
operator|+
name|funcName
operator|+
literal|" in type: "
operator|+
name|type
argument_list|)
throw|;
block|}
return|return
operator|(
name|Filter
operator|)
name|parseFrom
operator|.
name|invoke
argument_list|(
name|c
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a client Filter to a protocol buffer Filter    *    * @param filter the Filter to convert    * @return the converted protocol buffer Filter    */
specifier|public
specifier|static
name|FilterProtos
operator|.
name|Filter
name|toFilter
parameter_list|(
name|Filter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|FilterProtos
operator|.
name|Filter
operator|.
name|Builder
name|builder
init|=
name|FilterProtos
operator|.
name|Filter
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|filter
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSerializedFilter
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|filter
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a delete KeyValue type to protocol buffer DeleteType.    *    * @param type    * @return protocol buffer DeleteType    * @throws IOException    */
specifier|public
specifier|static
name|DeleteType
name|toDeleteType
parameter_list|(
name|KeyValue
operator|.
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Delete
case|:
return|return
name|DeleteType
operator|.
name|DELETE_ONE_VERSION
return|;
case|case
name|DeleteColumn
case|:
return|return
name|DeleteType
operator|.
name|DELETE_MULTIPLE_VERSIONS
return|;
case|case
name|DeleteFamily
case|:
return|return
name|DeleteType
operator|.
name|DELETE_FAMILY
return|;
case|case
name|DeleteFamilyVersion
case|:
return|return
name|DeleteType
operator|.
name|DELETE_FAMILY_VERSION
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown delete type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert a stringified protocol buffer exception Parameter to a Java Exception    *    * @param parameter the protocol buffer Parameter to convert    * @return the converted Exception    * @throws IOException if failed to deserialize the parameter    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Throwable
name|toException
parameter_list|(
specifier|final
name|NameBytesPair
name|parameter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parameter
operator|==
literal|null
operator|||
operator|!
name|parameter
operator|.
name|hasValue
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|desc
init|=
name|parameter
operator|.
name|getValue
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|parameter
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|c
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|type
argument_list|,
literal|true
argument_list|,
name|CLASS_LOADER
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|cn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cn
operator|=
name|c
operator|.
name|getDeclaredConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|cn
operator|.
name|newInstance
argument_list|(
name|desc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// Could be a raw RemoteException. See HBASE-8987.
name|cn
operator|=
name|c
operator|.
name|getDeclaredConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|cn
operator|.
name|newInstance
argument_list|(
name|type
argument_list|,
name|desc
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Start helpers for Client
comment|/**    * A helper to invoke a Get using client protocol.    *    * @param client    * @param regionName    * @param get    * @return the result of the Get    * @throws IOException    */
specifier|public
specifier|static
name|Result
name|get
parameter_list|(
specifier|final
name|ClientService
operator|.
name|BlockingInterface
name|client
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|Get
name|get
parameter_list|)
throws|throws
name|IOException
block|{
name|GetRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetRequest
argument_list|(
name|regionName
argument_list|,
name|get
argument_list|)
decl_stmt|;
try|try
block|{
name|GetResponse
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|toResult
argument_list|(
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to get a row of the closet one before using client protocol.    *    * @param client    * @param regionName    * @param row    * @param family    * @return the row or the closestRowBefore if it doesn't exist    * @throws IOException    */
specifier|public
specifier|static
name|Result
name|getRowOrBefore
parameter_list|(
specifier|final
name|ClientService
operator|.
name|BlockingInterface
name|client
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|GetRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetRowOrBeforeRequest
argument_list|(
name|regionName
argument_list|,
name|row
argument_list|,
name|family
argument_list|)
decl_stmt|;
try|try
block|{
name|GetResponse
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|hasResult
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|toResult
argument_list|(
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to bulk load a list of HFiles using client protocol.    *    * @param client    * @param familyPaths    * @param regionName    * @param assignSeqNum    * @return true if all are loaded    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|bulkLoadHFile
parameter_list|(
specifier|final
name|ClientService
operator|.
name|BlockingInterface
name|client
parameter_list|,
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|familyPaths
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
name|boolean
name|assignSeqNum
parameter_list|)
throws|throws
name|IOException
block|{
name|BulkLoadHFileRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildBulkLoadHFileRequest
argument_list|(
name|familyPaths
argument_list|,
name|regionName
argument_list|,
name|assignSeqNum
argument_list|)
decl_stmt|;
try|try
block|{
name|BulkLoadHFileResponse
name|response
init|=
name|client
operator|.
name|bulkLoadHFile
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getLoaded
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|CoprocessorServiceResponse
name|execService
parameter_list|(
specifier|final
name|ClientService
operator|.
name|BlockingInterface
name|client
parameter_list|,
specifier|final
name|CoprocessorServiceCall
name|call
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|CoprocessorServiceRequest
name|request
init|=
name|CoprocessorServiceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCall
argument_list|(
name|call
argument_list|)
operator|.
name|setRegion
argument_list|(
name|RequestConverter
operator|.
name|buildRegionSpecifier
argument_list|(
name|REGION_NAME
argument_list|,
name|regionName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|CoprocessorServiceResponse
name|response
init|=
name|client
operator|.
name|execService
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|CoprocessorServiceResponse
name|execService
parameter_list|(
specifier|final
name|MasterService
operator|.
name|BlockingInterface
name|client
parameter_list|,
specifier|final
name|CoprocessorServiceCall
name|call
parameter_list|)
throws|throws
name|IOException
block|{
name|CoprocessorServiceRequest
name|request
init|=
name|CoprocessorServiceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCall
argument_list|(
name|call
argument_list|)
operator|.
name|setRegion
argument_list|(
name|RequestConverter
operator|.
name|buildRegionSpecifier
argument_list|(
name|REGION_NAME
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|CoprocessorServiceResponse
name|response
init|=
name|client
operator|.
name|execMasterService
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Service
parameter_list|>
name|T
name|newServiceStub
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|service
parameter_list|,
name|RpcChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|T
operator|)
name|Methods
operator|.
name|call
argument_list|(
name|service
argument_list|,
literal|null
argument_list|,
literal|"newStub"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|RpcChannel
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|channel
block|}
argument_list|)
return|;
block|}
comment|// End helpers for Client
comment|// Start helpers for Admin
comment|/**    * A helper to retrieve region info given a region name    * using admin protocol.    *    * @param admin    * @param regionName    * @return the retrieved region info    * @throws IOException    */
specifier|public
specifier|static
name|HRegionInfo
name|getRegionInfo
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|GetRegionInfoRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetRegionInfoRequest
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|GetRegionInfoResponse
name|response
init|=
name|admin
operator|.
name|getRegionInfo
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|response
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to close a region given a region name    * using admin protocol.    *    * @param admin    * @param regionName    * @param transitionInZK    * @throws IOException    */
specifier|public
specifier|static
name|void
name|closeRegion
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|boolean
name|transitionInZK
parameter_list|)
throws|throws
name|IOException
block|{
name|CloseRegionRequest
name|closeRegionRequest
init|=
name|RequestConverter
operator|.
name|buildCloseRegionRequest
argument_list|(
name|regionName
argument_list|,
name|transitionInZK
argument_list|)
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|closeRegion
argument_list|(
literal|null
argument_list|,
name|closeRegionRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to close a region given a region name    * using admin protocol.    *    * @param admin    * @param regionName    * @param versionOfClosingNode    * @return true if the region is closed    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|closeRegion
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|int
name|versionOfClosingNode
parameter_list|,
specifier|final
name|ServerName
name|destinationServer
parameter_list|,
specifier|final
name|boolean
name|transitionInZK
parameter_list|)
throws|throws
name|IOException
block|{
name|CloseRegionRequest
name|closeRegionRequest
init|=
name|RequestConverter
operator|.
name|buildCloseRegionRequest
argument_list|(
name|regionName
argument_list|,
name|versionOfClosingNode
argument_list|,
name|destinationServer
argument_list|,
name|transitionInZK
argument_list|)
decl_stmt|;
try|try
block|{
name|CloseRegionResponse
name|response
init|=
name|admin
operator|.
name|closeRegion
argument_list|(
literal|null
argument_list|,
name|closeRegionRequest
argument_list|)
decl_stmt|;
return|return
name|ResponseConverter
operator|.
name|isClosed
argument_list|(
name|response
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to open a region using admin protocol.    * @param admin    * @param region    * @throws IOException    */
specifier|public
specifier|static
name|void
name|openRegion
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|HRegionInfo
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|OpenRegionRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildOpenRegionRequest
argument_list|(
name|region
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|openRegion
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to get the all the online regions on a region    * server using admin protocol.    *    * @param admin    * @return a list of online region info    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getOnlineRegions
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
name|GetOnlineRegionRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetOnlineRegionRequest
argument_list|()
decl_stmt|;
name|GetOnlineRegionResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|admin
operator|.
name|getOnlineRegion
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
return|return
name|getRegionInfos
argument_list|(
name|response
argument_list|)
return|;
block|}
comment|/**    * Get the list of region info from a GetOnlineRegionResponse    *    * @param proto the GetOnlineRegionResponse    * @return the list of region info or null if<code>proto</code> is null    */
specifier|static
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|getRegionInfos
parameter_list|(
specifier|final
name|GetOnlineRegionResponse
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|proto
operator|.
name|getRegionInfoList
argument_list|()
control|)
block|{
name|regionInfos
operator|.
name|add
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|regionInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|regionInfos
return|;
block|}
comment|/**    * A helper to get the info of a region server using admin protocol.    *    * @param admin    * @return the server name    * @throws IOException    */
specifier|public
specifier|static
name|ServerInfo
name|getServerInfo
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
name|GetServerInfoRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetServerInfoRequest
argument_list|()
decl_stmt|;
try|try
block|{
name|GetServerInfoResponse
name|response
init|=
name|admin
operator|.
name|getServerInfo
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getServerInfo
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to get the list of files of a column family    * on a given region using admin protocol.    *    * @param admin    * @param regionName    * @param family    * @return the list of store files    * @throws IOException    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getStoreFiles
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|GetStoreFileRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetStoreFileRequest
argument_list|(
name|regionName
argument_list|,
name|family
argument_list|)
decl_stmt|;
try|try
block|{
name|GetStoreFileResponse
name|response
init|=
name|admin
operator|.
name|getStoreFile
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getStoreFileList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to split a region using admin protocol.    *    * @param admin    * @param hri    * @param splitPoint    * @throws IOException    */
specifier|public
specifier|static
name|void
name|split
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
name|byte
index|[]
name|splitPoint
parameter_list|)
throws|throws
name|IOException
block|{
name|SplitRegionRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildSplitRegionRequest
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|splitPoint
argument_list|)
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|splitRegion
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**    * A helper to merge regions using admin protocol. Send request to    * regionserver.    * @param admin    * @param region_a    * @param region_b    * @param forcible true if do a compulsory merge, otherwise we will only merge    *          two adjacent regions    * @throws IOException    */
specifier|public
specifier|static
name|void
name|mergeRegions
parameter_list|(
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|HRegionInfo
name|region_a
parameter_list|,
specifier|final
name|HRegionInfo
name|region_b
parameter_list|,
specifier|final
name|boolean
name|forcible
parameter_list|)
throws|throws
name|IOException
block|{
name|MergeRegionsRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildMergeRegionsRequest
argument_list|(
name|region_a
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|region_b
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|forcible
argument_list|)
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|mergeRegions
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
comment|// End helpers for Admin
comment|/*    * Get the total (read + write) requests from a RegionLoad pb    * @param rl - RegionLoad pb    * @return total (read + write) requests    */
specifier|public
specifier|static
name|long
name|getTotalRequestsCount
parameter_list|(
name|RegionLoad
name|rl
parameter_list|)
block|{
if|if
condition|(
name|rl
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|rl
operator|.
name|getReadRequestsCount
argument_list|()
operator|+
name|rl
operator|.
name|getWriteRequestsCount
argument_list|()
return|;
block|}
comment|/**    * @param m Message to get delimited pb serialization of (with pb magic prefix)    */
specifier|public
specifier|static
name|byte
index|[]
name|toDelimitedByteArray
parameter_list|(
specifier|final
name|Message
name|m
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Allocate arbitrary big size so we avoid resizing.
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|PB_MAGIC
argument_list|)
expr_stmt|;
name|m
operator|.
name|writeDelimitedTo
argument_list|(
name|baos
argument_list|)
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**    * Converts a Permission proto to a client Permission object.    *    * @param proto the protobuf Permission    * @return the converted Permission    */
specifier|public
specifier|static
name|Permission
name|toPermission
parameter_list|(
name|AccessControlProtos
operator|.
name|Permission
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|.
name|getType
argument_list|()
operator|!=
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Global
condition|)
block|{
return|return
name|toTablePermission
argument_list|(
name|proto
argument_list|)
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
name|actions
init|=
name|toPermissionActions
argument_list|(
name|proto
operator|.
name|getGlobalPermission
argument_list|()
operator|.
name|getActionList
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Permission
argument_list|(
name|actions
operator|.
name|toArray
argument_list|(
operator|new
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Converts a Permission proto to a client TablePermission object.    *    * @param proto the protobuf Permission    * @return the converted TablePermission    */
specifier|public
specifier|static
name|TablePermission
name|toTablePermission
parameter_list|(
name|AccessControlProtos
operator|.
name|Permission
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|.
name|getType
argument_list|()
operator|==
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Global
condition|)
block|{
name|AccessControlProtos
operator|.
name|GlobalPermission
name|perm
init|=
name|proto
operator|.
name|getGlobalPermission
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
name|actions
init|=
name|toPermissionActions
argument_list|(
name|perm
operator|.
name|getActionList
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|TablePermission
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|actions
operator|.
name|toArray
argument_list|(
operator|new
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|proto
operator|.
name|getType
argument_list|()
operator|==
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Namespace
condition|)
block|{
name|AccessControlProtos
operator|.
name|NamespacePermission
name|perm
init|=
name|proto
operator|.
name|getNamespacePermission
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
name|actions
init|=
name|toPermissionActions
argument_list|(
name|perm
operator|.
name|getActionList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proto
operator|.
name|hasNamespacePermission
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Namespace must not be empty in NamespacePermission"
argument_list|)
throw|;
block|}
name|String
name|namespace
init|=
name|perm
operator|.
name|getNamespaceName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
return|return
operator|new
name|TablePermission
argument_list|(
name|namespace
argument_list|,
name|actions
operator|.
name|toArray
argument_list|(
operator|new
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|proto
operator|.
name|getType
argument_list|()
operator|==
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Table
condition|)
block|{
name|AccessControlProtos
operator|.
name|TablePermission
name|perm
init|=
name|proto
operator|.
name|getTablePermission
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
name|actions
init|=
name|toPermissionActions
argument_list|(
name|perm
operator|.
name|getActionList
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|family
init|=
literal|null
decl_stmt|;
name|TableName
name|table
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|perm
operator|.
name|hasTableName
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"TableName cannot be empty"
argument_list|)
throw|;
block|}
name|table
operator|=
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|perm
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|perm
operator|.
name|hasFamily
argument_list|()
condition|)
name|family
operator|=
name|perm
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
if|if
condition|(
name|perm
operator|.
name|hasQualifier
argument_list|()
condition|)
name|qualifier
operator|=
name|perm
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
return|return
operator|new
name|TablePermission
argument_list|(
name|table
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|actions
operator|.
name|toArray
argument_list|(
operator|new
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unrecognize Perm Type: "
operator|+
name|proto
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Convert a client Permission to a Permission proto    *    * @param perm the client Permission    * @return the protobuf Permission    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|Permission
name|toPermission
parameter_list|(
name|Permission
name|perm
parameter_list|)
block|{
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Builder
name|ret
init|=
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|perm
operator|instanceof
name|TablePermission
condition|)
block|{
name|TablePermission
name|tablePerm
init|=
operator|(
name|TablePermission
operator|)
name|perm
decl_stmt|;
if|if
condition|(
name|tablePerm
operator|.
name|hasNamespace
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Namespace
argument_list|)
expr_stmt|;
name|AccessControlProtos
operator|.
name|NamespacePermission
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|NamespacePermission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNamespaceName
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|tablePerm
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Permission
operator|.
name|Action
name|actions
index|[]
init|=
name|perm
operator|.
name|getActions
argument_list|()
decl_stmt|;
if|if
condition|(
name|actions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|builder
operator|.
name|addAction
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|setNamespacePermission
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|build
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|tablePerm
operator|.
name|hasTable
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Table
argument_list|)
expr_stmt|;
name|AccessControlProtos
operator|.
name|TablePermission
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|TablePermission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|tablePerm
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tablePerm
operator|.
name|hasFamily
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setFamily
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|tablePerm
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tablePerm
operator|.
name|hasQualifier
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setQualifier
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|tablePerm
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Permission
operator|.
name|Action
name|actions
index|[]
init|=
name|perm
operator|.
name|getActions
argument_list|()
decl_stmt|;
if|if
condition|(
name|actions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|builder
operator|.
name|addAction
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|setTablePermission
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|build
argument_list|()
return|;
block|}
block|}
name|ret
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Global
argument_list|)
expr_stmt|;
name|AccessControlProtos
operator|.
name|GlobalPermission
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|GlobalPermission
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Permission
operator|.
name|Action
name|actions
index|[]
init|=
name|perm
operator|.
name|getActions
argument_list|()
decl_stmt|;
if|if
condition|(
name|actions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|builder
operator|.
name|addAction
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|setGlobalPermission
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Converts a list of Permission.Action proto to a list of client Permission.Action objects.    *    * @param protoActions the list of protobuf Actions    * @return the converted list of Actions    */
specifier|public
specifier|static
name|List
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
name|toPermissionActions
parameter_list|(
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|protoActions
parameter_list|)
block|{
name|List
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
name|actions
init|=
operator|new
name|ArrayList
argument_list|<
name|Permission
operator|.
name|Action
argument_list|>
argument_list|(
name|protoActions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
name|a
range|:
name|protoActions
control|)
block|{
name|actions
operator|.
name|add
argument_list|(
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|actions
return|;
block|}
comment|/**    * Converts a Permission.Action proto to a client Permission.Action object.    *    * @param action the protobuf Action    * @return the converted Action    */
specifier|public
specifier|static
name|Permission
operator|.
name|Action
name|toPermissionAction
parameter_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|READ
case|:
return|return
name|Permission
operator|.
name|Action
operator|.
name|READ
return|;
case|case
name|WRITE
case|:
return|return
name|Permission
operator|.
name|Action
operator|.
name|WRITE
return|;
case|case
name|EXEC
case|:
return|return
name|Permission
operator|.
name|Action
operator|.
name|EXEC
return|;
case|case
name|CREATE
case|:
return|return
name|Permission
operator|.
name|Action
operator|.
name|CREATE
return|;
case|case
name|ADMIN
case|:
return|return
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown action value "
operator|+
name|action
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Convert a client Permission.Action to a Permission.Action proto    *    * @param action the client Action    * @return the protobuf Action    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
name|toPermissionAction
parameter_list|(
name|Permission
operator|.
name|Action
name|action
parameter_list|)
block|{
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|READ
case|:
return|return
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
operator|.
name|READ
return|;
case|case
name|WRITE
case|:
return|return
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
operator|.
name|WRITE
return|;
case|case
name|EXEC
case|:
return|return
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
operator|.
name|EXEC
return|;
case|case
name|CREATE
case|:
return|return
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
operator|.
name|CREATE
return|;
case|case
name|ADMIN
case|:
return|return
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown action value "
operator|+
name|action
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Convert a client user permission to a user permission proto    *    * @param perm the client UserPermission    * @return the protobuf UserPermission    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|UserPermission
name|toUserPermission
parameter_list|(
name|UserPermission
name|perm
parameter_list|)
block|{
return|return
name|AccessControlProtos
operator|.
name|UserPermission
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUser
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|perm
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setPermission
argument_list|(
name|toPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Converts a user permission proto to a client user permission object.    *    * @param proto the protobuf UserPermission    * @return the converted UserPermission    */
specifier|public
specifier|static
name|UserPermission
name|toUserPermission
parameter_list|(
name|AccessControlProtos
operator|.
name|UserPermission
name|proto
parameter_list|)
block|{
return|return
operator|new
name|UserPermission
argument_list|(
name|proto
operator|.
name|getUser
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|toTablePermission
argument_list|(
name|proto
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convert a ListMultimap<String, TablePermission> where key is username    * to a protobuf UserPermission    *    * @param perm the list of user and table permissions    * @return the protobuf UserTablePermissions    */
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|toUserTablePermissions
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perm
parameter_list|)
block|{
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|TablePermission
argument_list|>
argument_list|>
name|entry
range|:
name|perm
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
operator|.
name|Builder
name|userPermBuilder
init|=
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|userPermBuilder
operator|.
name|setUser
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TablePermission
name|tablePerm
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|userPermBuilder
operator|.
name|addPermissions
argument_list|(
name|toPermission
argument_list|(
name|tablePerm
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addUserPermissions
argument_list|(
name|userPermBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * A utility used to grant a user global permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @param userShortName the short name of the user to grant permissions    * @param actions the permissions to be granted    * @throws ServiceException    */
specifier|public
specifier|static
name|void
name|grant
parameter_list|(
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|GrantRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGrantRequest
argument_list|(
name|userShortName
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|grant
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to grant a user table permissions. The permissions will    * be for a table table/column family/qualifier.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @param userShortName the short name of the user to grant permissions    * @param tableName optional table name    * @param f optional column family    * @param q optional qualifier    * @param actions the permissions to be granted    * @throws ServiceException    */
specifier|public
specifier|static
name|void
name|grant
parameter_list|(
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|f
parameter_list|,
name|byte
index|[]
name|q
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|GrantRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGrantRequest
argument_list|(
name|userShortName
argument_list|,
name|tableName
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|grant
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to grant a user namespace permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @param namespace the short name of the user to grant permissions    * @param actions the permissions to be granted    * @throws ServiceException    */
specifier|public
specifier|static
name|void
name|grant
parameter_list|(
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|GrantRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGrantRequest
argument_list|(
name|userShortName
argument_list|,
name|namespace
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|grant
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to revoke a user's global permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @param userShortName the short name of the user to revoke permissions    * @param actions the permissions to be revoked    * @throws ServiceException    */
specifier|public
specifier|static
name|void
name|revoke
parameter_list|(
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|RevokeRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildRevokeRequest
argument_list|(
name|userShortName
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|revoke
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to revoke a user's table permissions. The permissions will    * be for a table/column family/qualifier.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @param userShortName the short name of the user to revoke permissions    * @param tableName optional table name    * @param f optional column family    * @param q optional qualifier    * @param actions the permissions to be revoked    * @throws ServiceException    */
specifier|public
specifier|static
name|void
name|revoke
parameter_list|(
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|f
parameter_list|,
name|byte
index|[]
name|q
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|RevokeRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildRevokeRequest
argument_list|(
name|userShortName
argument_list|,
name|tableName
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|revoke
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to revoke a user's namespace permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @param userShortName the short name of the user to revoke permissions    * @param namespace optional table name    * @param actions the permissions to be revoked    * @throws ServiceException    */
specifier|public
specifier|static
name|void
name|revoke
parameter_list|(
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|String
name|userShortName
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|ServiceException
block|{
name|List
argument_list|<
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
argument_list|>
name|permActions
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|actions
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Permission
operator|.
name|Action
name|a
range|:
name|actions
control|)
block|{
name|permActions
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AccessControlProtos
operator|.
name|RevokeRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildRevokeRequest
argument_list|(
name|userShortName
argument_list|,
name|namespace
argument_list|,
name|permActions
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
index|[
name|actions
operator|.
name|length
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|protocol
operator|.
name|revoke
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/**    * A utility used to get user's global permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @throws ServiceException    */
specifier|public
specifier|static
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserPermissions
parameter_list|(
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|)
throws|throws
name|ServiceException
block|{
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Global
argument_list|)
expr_stmt|;
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|GetUserPermissionsResponse
name|response
init|=
name|protocol
operator|.
name|getUserPermissions
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
operator|new
name|ArrayList
argument_list|<
name|UserPermission
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|UserPermission
name|perm
range|:
name|response
operator|.
name|getUserPermissionList
argument_list|()
control|)
block|{
name|perms
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toUserPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|perms
return|;
block|}
comment|/**    * A utility used to get user table permissions.    *<p>    * It's also called by the shell, in case you want to find references.    *    * @param protocol the AccessControlService protocol proxy    * @param t optional table name    * @throws ServiceException    */
specifier|public
specifier|static
name|List
argument_list|<
name|UserPermission
argument_list|>
name|getUserPermissions
parameter_list|(
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
parameter_list|,
name|TableName
name|t
parameter_list|)
throws|throws
name|ServiceException
block|{
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Table
argument_list|)
expr_stmt|;
name|AccessControlProtos
operator|.
name|GetUserPermissionsRequest
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|GetUserPermissionsResponse
name|response
init|=
name|protocol
operator|.
name|getUserPermissions
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
operator|new
name|ArrayList
argument_list|<
name|UserPermission
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|UserPermission
name|perm
range|:
name|response
operator|.
name|getUserPermissionList
argument_list|()
control|)
block|{
name|perms
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toUserPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|perms
return|;
block|}
comment|/**    * Convert a protobuf UserTablePermissions to a    * ListMultimap<String, TablePermission> where key is username.    *    * @param proto the protobuf UserPermission    * @return the converted UserPermission    */
specifier|public
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|toUserTablePermissions
parameter_list|(
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|proto
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perms
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
name|userPerm
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proto
operator|.
name|getUserPermissionsCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|userPerm
operator|=
name|proto
operator|.
name|getUserPermissions
argument_list|(
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|userPerm
operator|.
name|getPermissionsCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|TablePermission
name|tablePerm
init|=
name|toTablePermission
argument_list|(
name|userPerm
operator|.
name|getPermissions
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|perms
operator|.
name|put
argument_list|(
name|userPerm
operator|.
name|getUser
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|,
name|tablePerm
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|perms
return|;
block|}
comment|/**    * Converts a Token instance (with embedded identifier) to the protobuf representation.    *    * @param token the Token instance to copy    * @return the protobuf Token message    */
specifier|public
specifier|static
name|AuthenticationProtos
operator|.
name|Token
name|toToken
parameter_list|(
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|token
parameter_list|)
block|{
name|AuthenticationProtos
operator|.
name|Token
operator|.
name|Builder
name|builder
init|=
name|AuthenticationProtos
operator|.
name|Token
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setIdentifier
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setPassword
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|token
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|getService
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setService
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Converts a protobuf Token message back into a Token instance.    *    * @param proto the protobuf Token message    * @return the Token instance    */
specifier|public
specifier|static
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|toToken
parameter_list|(
name|AuthenticationProtos
operator|.
name|Token
name|proto
parameter_list|)
block|{
return|return
operator|new
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
argument_list|(
name|proto
operator|.
name|hasIdentifier
argument_list|()
condition|?
name|proto
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|,
name|proto
operator|.
name|hasPassword
argument_list|()
condition|?
name|proto
operator|.
name|getPassword
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|,
name|AuthenticationTokenIdentifier
operator|.
name|AUTH_TOKEN_TYPE
argument_list|,
name|proto
operator|.
name|hasService
argument_list|()
condition|?
operator|new
name|Text
argument_list|(
name|proto
operator|.
name|getService
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
return|;
block|}
comment|/**    * Find the HRegion encoded name based on a region specifier    *    * @param regionSpecifier the region specifier    * @return the corresponding region's encoded name    * @throws DoNotRetryIOException if the specifier type is unsupported    */
specifier|public
specifier|static
name|String
name|getRegionEncodedName
parameter_list|(
specifier|final
name|RegionSpecifier
name|regionSpecifier
parameter_list|)
throws|throws
name|DoNotRetryIOException
block|{
name|byte
index|[]
name|value
init|=
name|regionSpecifier
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|RegionSpecifierType
name|type
init|=
name|regionSpecifier
operator|.
name|getType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|REGION_NAME
case|:
return|return
name|HRegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|value
argument_list|)
return|;
case|case
name|ENCODED_REGION_NAME
case|:
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Unsupported region specifier type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|ScanMetrics
name|toScanMetrics
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|Parser
argument_list|<
name|MapReduceProtos
operator|.
name|ScanMetrics
argument_list|>
name|parser
init|=
name|MapReduceProtos
operator|.
name|ScanMetrics
operator|.
name|PARSER
decl_stmt|;
name|MapReduceProtos
operator|.
name|ScanMetrics
name|pScanMetrics
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pScanMetrics
operator|=
name|parser
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
comment|//Ignored there are just no key values to add.
block|}
name|ScanMetrics
name|scanMetrics
init|=
operator|new
name|ScanMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|pScanMetrics
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HBaseProtos
operator|.
name|NameInt64Pair
name|pair
range|:
name|pScanMetrics
operator|.
name|getMetricsList
argument_list|()
control|)
block|{
if|if
condition|(
name|pair
operator|.
name|hasName
argument_list|()
operator|&&
name|pair
operator|.
name|hasValue
argument_list|()
condition|)
block|{
name|scanMetrics
operator|.
name|setCounter
argument_list|(
name|pair
operator|.
name|getName
argument_list|()
argument_list|,
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|scanMetrics
return|;
block|}
specifier|public
specifier|static
name|MapReduceProtos
operator|.
name|ScanMetrics
name|toScanMetrics
parameter_list|(
name|ScanMetrics
name|scanMetrics
parameter_list|)
block|{
name|MapReduceProtos
operator|.
name|ScanMetrics
operator|.
name|Builder
name|builder
init|=
name|MapReduceProtos
operator|.
name|ScanMetrics
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|metrics
init|=
name|scanMetrics
operator|.
name|getMetricsMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|metrics
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HBaseProtos
operator|.
name|NameInt64Pair
name|nameInt64Pair
init|=
name|HBaseProtos
operator|.
name|NameInt64Pair
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addMetrics
argument_list|(
name|nameInt64Pair
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Unwraps an exception from a protobuf service into the underlying (expected) IOException.    * This method will<strong>always</strong> throw an exception.    * @param se the {@code ServiceException} instance to convert into an {@code IOException}    */
specifier|public
specifier|static
name|void
name|toIOException
parameter_list|(
name|ServiceException
name|se
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|se
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null service exception passed!"
argument_list|)
throw|;
block|}
name|Throwable
name|cause
init|=
name|se
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
operator|&&
name|cause
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|cause
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|se
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|CellProtos
operator|.
name|Cell
name|toCell
parameter_list|(
specifier|final
name|Cell
name|kv
parameter_list|)
block|{
comment|// Doing this is going to kill us if we do it for all data passed.
comment|// St.Ack 20121205
name|CellProtos
operator|.
name|Cell
operator|.
name|Builder
name|kvbuilder
init|=
name|CellProtos
operator|.
name|Cell
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|kvbuilder
operator|.
name|setRow
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setFamily
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setQualifier
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setCellType
argument_list|(
name|CellProtos
operator|.
name|CellType
operator|.
name|valueOf
argument_list|(
name|kv
operator|.
name|getTypeByte
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setTimestamp
argument_list|(
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|kvbuilder
operator|.
name|setValue
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|kv
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|kvbuilder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Cell
name|toCell
parameter_list|(
specifier|final
name|CellProtos
operator|.
name|Cell
name|cell
parameter_list|)
block|{
comment|// Doing this is going to kill us if we do it for all data passed.
comment|// St.Ack 20121205
return|return
name|CellUtil
operator|.
name|createCell
argument_list|(
name|cell
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamily
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTimestamp
argument_list|()
argument_list|,
operator|(
name|byte
operator|)
name|cell
operator|.
name|getCellType
argument_list|()
operator|.
name|getNumber
argument_list|()
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|NamespaceDescriptor
name|toProtoNamespaceDescriptor
parameter_list|(
name|NamespaceDescriptor
name|ns
parameter_list|)
block|{
name|HBaseProtos
operator|.
name|NamespaceDescriptor
operator|.
name|Builder
name|b
init|=
name|HBaseProtos
operator|.
name|NamespaceDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|ns
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|ns
operator|.
name|getConfiguration
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|b
operator|.
name|addConfiguration
argument_list|(
name|HBaseProtos
operator|.
name|NameStringPair
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NamespaceDescriptor
name|toNamespaceDescriptor
parameter_list|(
name|HBaseProtos
operator|.
name|NamespaceDescriptor
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
name|NamespaceDescriptor
operator|.
name|Builder
name|b
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HBaseProtos
operator|.
name|NameStringPair
name|prop
range|:
name|desc
operator|.
name|getConfigurationList
argument_list|()
control|)
block|{
name|b
operator|.
name|addConfiguration
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|,
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Get an instance of the argument type declared in a class's signature. The    * argument type is assumed to be a PB Message subclass, and the instance is    * created using parseFrom method on the passed ByteString.    * @param runtimeClass the runtime type of the class    * @param position the position of the argument in the class declaration    * @param b the ByteString which should be parsed to get the instance created    * @return the instance    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Message
parameter_list|>
name|T
name|getParsedGenericInstance
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|runtimeClass
parameter_list|,
name|int
name|position
parameter_list|,
name|ByteString
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|Type
name|type
init|=
name|runtimeClass
operator|.
name|getGenericSuperclass
argument_list|()
decl_stmt|;
name|Type
name|argType
init|=
operator|(
operator|(
name|ParameterizedType
operator|)
name|type
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
name|position
index|]
decl_stmt|;
name|Class
argument_list|<
name|T
argument_list|>
name|classType
init|=
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|argType
decl_stmt|;
name|T
name|inst
decl_stmt|;
try|try
block|{
name|Method
name|m
init|=
name|classType
operator|.
name|getMethod
argument_list|(
literal|"parseFrom"
argument_list|,
name|ByteString
operator|.
name|class
argument_list|)
decl_stmt|;
name|inst
operator|=
operator|(
name|T
operator|)
name|m
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|inst
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|CompactionDescriptor
name|toCompactionDescriptor
parameter_list|(
name|HRegionInfo
name|info
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|inputPaths
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|outputPaths
parameter_list|,
name|Path
name|storeDir
parameter_list|)
block|{
comment|// compaction descriptor contains relative paths.
comment|// input / output paths are relative to the store dir
comment|// store dir is relative to region dir
name|CompactionDescriptor
operator|.
name|Builder
name|builder
init|=
name|CompactionDescriptor
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|info
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setEncodedRegionName
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|info
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setFamilyName
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|family
argument_list|)
argument_list|)
operator|.
name|setStoreHomeDir
argument_list|(
name|storeDir
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|//make relative
for|for
control|(
name|Path
name|inputPath
range|:
name|inputPaths
control|)
block|{
name|builder
operator|.
name|addCompactionInput
argument_list|(
name|inputPath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//relative path
block|}
for|for
control|(
name|Path
name|outputPath
range|:
name|outputPaths
control|)
block|{
name|builder
operator|.
name|addCompactionOutput
argument_list|(
name|outputPath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Return short version of Message toString'd, shorter than TextFormat#shortDebugString.    * Tries to NOT print out data both because it can be big but also so we do not have data in our    * logs. Use judiciously.    * @param m    * @return toString of passed<code>m</code>    */
specifier|public
specifier|static
name|String
name|getShortTextFormat
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
return|return
literal|"null"
return|;
if|if
condition|(
name|m
operator|instanceof
name|ScanRequest
condition|)
block|{
comment|// This should be small and safe to output.  No data.
return|return
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|m
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|RegionServerReportRequest
condition|)
block|{
comment|// Print a short message only, just the servername and the requests, not the full load.
name|RegionServerReportRequest
name|r
init|=
operator|(
name|RegionServerReportRequest
operator|)
name|m
decl_stmt|;
return|return
literal|"server "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|r
operator|.
name|getServer
argument_list|()
argument_list|)
operator|+
literal|" load { numberOfRequests: "
operator|+
name|r
operator|.
name|getLoad
argument_list|()
operator|.
name|getNumberOfRequests
argument_list|()
operator|+
literal|" }"
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|RegionServerStartupRequest
condition|)
block|{
comment|// Should be small enough.
return|return
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|m
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|MutationProto
condition|)
block|{
return|return
name|toShortString
argument_list|(
operator|(
name|MutationProto
operator|)
name|m
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|GetRequest
condition|)
block|{
name|GetRequest
name|r
init|=
operator|(
name|GetRequest
operator|)
name|m
decl_stmt|;
return|return
literal|"region= "
operator|+
name|getStringForByteString
argument_list|(
name|r
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|", row="
operator|+
name|getStringForByteString
argument_list|(
name|r
operator|.
name|getGet
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|ClientProtos
operator|.
name|MultiRequest
condition|)
block|{
name|ClientProtos
operator|.
name|MultiRequest
name|r
init|=
operator|(
name|ClientProtos
operator|.
name|MultiRequest
operator|)
name|m
decl_stmt|;
comment|// Get first set of Actions.
name|ClientProtos
operator|.
name|RegionAction
name|actions
init|=
name|r
operator|.
name|getRegionActionList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|row
init|=
name|actions
operator|.
name|getActionCount
argument_list|()
operator|<=
literal|0
condition|?
literal|""
else|:
name|getStringForByteString
argument_list|(
name|actions
operator|.
name|getAction
argument_list|(
literal|0
argument_list|)
operator|.
name|hasGet
argument_list|()
condition|?
name|actions
operator|.
name|getAction
argument_list|(
literal|0
argument_list|)
operator|.
name|getGet
argument_list|()
operator|.
name|getRow
argument_list|()
else|:
name|actions
operator|.
name|getAction
argument_list|(
literal|0
argument_list|)
operator|.
name|getMutation
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
return|return
literal|"region= "
operator|+
name|getStringForByteString
argument_list|(
name|actions
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|", for "
operator|+
name|r
operator|.
name|getRegionActionCount
argument_list|()
operator|+
literal|" actions and 1st row key="
operator|+
name|row
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|ClientProtos
operator|.
name|MutateRequest
condition|)
block|{
name|ClientProtos
operator|.
name|MutateRequest
name|r
init|=
operator|(
name|ClientProtos
operator|.
name|MutateRequest
operator|)
name|m
decl_stmt|;
return|return
literal|"region= "
operator|+
name|getStringForByteString
argument_list|(
name|r
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|", row="
operator|+
name|getStringForByteString
argument_list|(
name|r
operator|.
name|getMutation
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|"TODO: "
operator|+
name|m
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getStringForByteString
parameter_list|(
name|ByteString
name|bs
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|bs
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Print out some subset of a MutationProto rather than all of it and its data    * @param proto Protobuf to print out    * @return Short String of mutation proto    */
specifier|static
name|String
name|toShortString
parameter_list|(
specifier|final
name|MutationProto
name|proto
parameter_list|)
block|{
return|return
literal|"row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|proto
operator|.
name|getRow
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
operator|+
literal|", type="
operator|+
name|proto
operator|.
name|getMutateType
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|TableName
name|toTableName
parameter_list|(
name|HBaseProtos
operator|.
name|TableName
name|tableNamePB
parameter_list|)
block|{
return|return
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableNamePB
operator|.
name|getNamespace
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
argument_list|,
name|tableNamePB
operator|.
name|getQualifier
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HBaseProtos
operator|.
name|TableName
name|toProtoTableName
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|HBaseProtos
operator|.
name|TableName
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNamespace
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|tableName
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|HBaseZeroCopyByteString
operator|.
name|wrap
argument_list|(
name|tableName
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|TableName
index|[]
name|getTableNameArray
parameter_list|(
name|List
argument_list|<
name|HBaseProtos
operator|.
name|TableName
argument_list|>
name|tableNamesList
parameter_list|)
block|{
if|if
condition|(
name|tableNamesList
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TableName
index|[
literal|0
index|]
return|;
block|}
name|TableName
index|[]
name|tableNames
init|=
operator|new
name|TableName
index|[
name|tableNamesList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableNamesList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|tableNames
index|[
name|i
index|]
operator|=
name|toTableName
argument_list|(
name|tableNamesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tableNames
return|;
block|}
comment|/**    * Convert a protocol buffer CellVisibility to a client CellVisibility    *     * @param proto    * @return the converted client CellVisibility    */
specifier|public
specifier|static
name|CellVisibility
name|toCellVisibility
parameter_list|(
name|ClientProtos
operator|.
name|CellVisibility
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|CellVisibility
argument_list|(
name|proto
operator|.
name|getExpression
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer CellVisibility bytes to a client CellVisibility    *     * @param protoBytes    * @return the converted client CellVisibility    * @throws DeserializationException    */
specifier|public
specifier|static
name|CellVisibility
name|toCellVisibility
parameter_list|(
name|byte
index|[]
name|protoBytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|protoBytes
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ClientProtos
operator|.
name|CellVisibility
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|CellVisibility
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|CellVisibility
name|proto
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proto
operator|=
name|builder
operator|.
name|mergeFrom
argument_list|(
name|protoBytes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|toCellVisibility
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer CellVisibility based on a client CellVisibility.    *     * @param cellVisibility    * @return a protocol buffer CellVisibility    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|CellVisibility
name|toCellVisibility
parameter_list|(
name|CellVisibility
name|cellVisibility
parameter_list|)
block|{
name|ClientProtos
operator|.
name|CellVisibility
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|CellVisibility
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setExpression
argument_list|(
name|cellVisibility
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Convert a protocol buffer Authorizations to a client Authorizations    *     * @param proto    * @return the converted client Authorizations    */
specifier|public
specifier|static
name|Authorizations
name|toAuthorizations
parameter_list|(
name|ClientProtos
operator|.
name|Authorizations
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|Authorizations
argument_list|(
name|proto
operator|.
name|getLabelList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert a protocol buffer Authorizations bytes to a client Authorizations    *     * @param protoBytes    * @return the converted client Authorizations    * @throws DeserializationException    */
specifier|public
specifier|static
name|Authorizations
name|toAuthorizations
parameter_list|(
name|byte
index|[]
name|protoBytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
if|if
condition|(
name|protoBytes
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ClientProtos
operator|.
name|Authorizations
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Authorizations
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ClientProtos
operator|.
name|Authorizations
name|proto
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proto
operator|=
name|builder
operator|.
name|mergeFrom
argument_list|(
name|protoBytes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|toAuthorizations
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Create a protocol buffer Authorizations based on a client Authorizations.    *     * @param authorizations    * @return a protocol buffer Authorizations    */
specifier|public
specifier|static
name|ClientProtos
operator|.
name|Authorizations
name|toAuthorizations
parameter_list|(
name|Authorizations
name|authorizations
parameter_list|)
block|{
name|ClientProtos
operator|.
name|Authorizations
operator|.
name|Builder
name|builder
init|=
name|ClientProtos
operator|.
name|Authorizations
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|label
range|:
name|authorizations
operator|.
name|getLabels
argument_list|()
control|)
block|{
name|builder
operator|.
name|addLabel
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|toUsersAndPermissions
parameter_list|(
name|String
name|user
parameter_list|,
name|Permission
name|perms
parameter_list|)
block|{
return|return
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|newBuilder
argument_list|()
operator|.
name|addUserPermissions
argument_list|(
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUser
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|user
argument_list|)
argument_list|)
operator|.
name|addPermissions
argument_list|(
name|toPermission
argument_list|(
name|perms
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|toUsersAndPermissions
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|perms
parameter_list|)
block|{
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|Builder
name|builder
init|=
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Permission
argument_list|>
argument_list|>
name|entry
range|:
name|perms
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
operator|.
name|Builder
name|userPermBuilder
init|=
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|userPermBuilder
operator|.
name|setUser
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Permission
name|perm
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|userPermBuilder
operator|.
name|addPermissions
argument_list|(
name|toPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addUserPermissions
argument_list|(
name|userPermBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|toUsersAndPermissions
parameter_list|(
name|AccessControlProtos
operator|.
name|UsersAndPermissions
name|proto
parameter_list|)
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|result
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|UsersAndPermissions
operator|.
name|UserPermissions
name|userPerms
range|:
name|proto
operator|.
name|getUserPermissionsList
argument_list|()
control|)
block|{
name|String
name|user
init|=
name|userPerms
operator|.
name|getUser
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlProtos
operator|.
name|Permission
name|perm
range|:
name|userPerms
operator|.
name|getPermissionsList
argument_list|()
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|toPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

