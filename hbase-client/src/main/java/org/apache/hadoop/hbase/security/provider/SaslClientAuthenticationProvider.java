begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|SecurityInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|UserInformation
import|;
end_import

begin_comment
comment|/**  * Encapsulation of client-side logic to authenticate to HBase via some means over SASL.  * Implementations should not directly implement this interface, but instead extend  * {@link AbstractSaslClientAuthenticationProvider}.  *  * Implementations of this interface must make an implementation of {@code hashCode()}  * which returns the same value across multiple instances of the provider implementation.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|AUTHENTICATION
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
interface|interface
name|SaslClientAuthenticationProvider
extends|extends
name|SaslAuthenticationProvider
block|{
comment|/**    * Creates the SASL client instance for this auth'n method.    */
name|SaslClient
name|createClient
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|InetAddress
name|serverAddr
parameter_list|,
name|SecurityInfo
name|securityInfo
parameter_list|,
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
parameter_list|,
name|boolean
name|fallbackAllowed
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Constructs a {@link UserInformation} from the given {@link UserGroupInformation}    */
name|UserInformation
name|getUserInfo
parameter_list|(
name|User
name|user
parameter_list|)
function_decl|;
comment|/**    * Returns the "real" user, the user who has the credentials being authenticated by the    * remote service, in the form of an {@link UserGroupInformation} object.    *    * It is common in the Hadoop "world" to have distinct notions of a "real" user and a "proxy"    * user. A "real" user is the user which actually has the credentials (often, a Kerberos ticket),    * but some code may be running as some other user who has no credentials. This method gives    * the authentication provider a chance to acknowledge this is happening and ensure that any    * RPCs are executed with the real user's credentials, because executing them as the proxy user    * would result in failure because no credentials exist to authenticate the RPC.    *    * Not all implementations will need to implement this method. By default, the provided User's    * UGI is returned directly.    */
specifier|default
name|UserGroupInformation
name|getRealUser
parameter_list|(
name|User
name|ugi
parameter_list|)
block|{
return|return
name|ugi
operator|.
name|getUGI
argument_list|()
return|;
block|}
comment|/**    * Returns true if the implementation is capable of performing some action which may allow a    * failed authentication to become a successful authentication. Otherwise, returns false    */
specifier|default
name|boolean
name|canRetry
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Executes any necessary logic to re-login the client. Not all implementations will have    * any logic that needs to be executed.    */
specifier|default
name|void
name|relogin
parameter_list|()
throws|throws
name|IOException
block|{}
block|}
end_interface

end_unit

