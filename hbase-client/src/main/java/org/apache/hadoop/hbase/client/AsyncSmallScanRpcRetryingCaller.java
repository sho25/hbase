begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|isEmptyStartRow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|isEmptyStopRow
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ResponseConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ClientService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Retry caller for smaller scan.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|AsyncSmallScanRpcRetryingCaller
block|{
specifier|private
specifier|final
name|AsyncConnectionImpl
name|conn
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|private
specifier|final
name|Scan
name|scan
decl_stmt|;
specifier|private
specifier|final
name|int
name|limit
decl_stmt|;
specifier|private
specifier|final
name|long
name|scanTimeoutNs
decl_stmt|;
specifier|private
specifier|final
name|long
name|rpcTimeoutNs
decl_stmt|;
specifier|private
specifier|final
name|Function
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|createClosestNextRow
decl_stmt|;
specifier|private
specifier|final
name|Runnable
name|firstScan
decl_stmt|;
specifier|private
specifier|final
name|Function
argument_list|<
name|HRegionInfo
argument_list|,
name|Boolean
argument_list|>
name|nextScan
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Result
argument_list|>
name|resultList
decl_stmt|;
specifier|private
specifier|final
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|Result
argument_list|>
argument_list|>
name|future
decl_stmt|;
specifier|public
name|AsyncSmallScanRpcRetryingCaller
parameter_list|(
name|AsyncConnectionImpl
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|int
name|limit
parameter_list|,
name|long
name|scanTimeoutNs
parameter_list|,
name|long
name|rpcTimeoutNs
parameter_list|)
block|{
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|scan
operator|=
name|scan
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
name|this
operator|.
name|scanTimeoutNs
operator|=
name|scanTimeoutNs
expr_stmt|;
name|this
operator|.
name|rpcTimeoutNs
operator|=
name|rpcTimeoutNs
expr_stmt|;
if|if
condition|(
name|scan
operator|.
name|isReversed
argument_list|()
condition|)
block|{
name|this
operator|.
name|createClosestNextRow
operator|=
name|ConnectionUtils
operator|::
name|createClosestRowBefore
expr_stmt|;
name|this
operator|.
name|firstScan
operator|=
name|this
operator|::
name|reversedFirstScan
expr_stmt|;
name|this
operator|.
name|nextScan
operator|=
name|this
operator|::
name|reversedNextScan
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|createClosestNextRow
operator|=
name|ConnectionUtils
operator|::
name|createClosestRowAfter
expr_stmt|;
name|this
operator|.
name|firstScan
operator|=
name|this
operator|::
name|firstScan
expr_stmt|;
name|this
operator|.
name|nextScan
operator|=
name|this
operator|::
name|nextScan
expr_stmt|;
block|}
name|this
operator|.
name|resultList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|future
operator|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|SmallScanResponse
block|{
specifier|public
specifier|final
name|Result
index|[]
name|results
decl_stmt|;
specifier|public
specifier|final
name|HRegionInfo
name|currentRegion
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|hasMoreResultsInRegion
decl_stmt|;
specifier|public
name|SmallScanResponse
parameter_list|(
name|Result
index|[]
name|results
parameter_list|,
name|HRegionInfo
name|currentRegion
parameter_list|,
name|boolean
name|hasMoreResultsInRegion
parameter_list|)
block|{
name|this
operator|.
name|results
operator|=
name|results
expr_stmt|;
name|this
operator|.
name|currentRegion
operator|=
name|currentRegion
expr_stmt|;
name|this
operator|.
name|hasMoreResultsInRegion
operator|=
name|hasMoreResultsInRegion
expr_stmt|;
block|}
block|}
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"UPM_UNCALLED_PRIVATE_METHOD"
argument_list|,
name|justification
operator|=
literal|"Findbugs seems to be confused by lambda expression."
argument_list|)
specifier|private
name|CompletableFuture
argument_list|<
name|SmallScanResponse
argument_list|>
name|scan
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|ClientService
operator|.
name|Interface
name|stub
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|SmallScanResponse
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|ScanRequest
name|req
decl_stmt|;
try|try
block|{
name|req
operator|=
name|RequestConverter
operator|.
name|buildScanRequest
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|scan
argument_list|,
name|limit
operator|-
name|resultList
operator|.
name|size
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
name|stub
operator|.
name|scan
argument_list|(
name|controller
argument_list|,
name|req
argument_list|,
name|resp
lambda|->
block|{
if|if
condition|(
name|controller
operator|.
name|failed
argument_list|()
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|controller
operator|.
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Result
index|[]
name|results
init|=
name|ResponseConverter
operator|.
name|getResults
argument_list|(
name|controller
operator|.
name|cellScanner
argument_list|()
argument_list|,
name|resp
argument_list|)
decl_stmt|;
name|future
operator|.
name|complete
argument_list|(
operator|new
name|SmallScanResponse
argument_list|(
name|results
argument_list|,
name|loc
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|resp
operator|.
name|getMoreResultsInRegion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|private
name|void
name|onComplete
parameter_list|(
name|SmallScanResponse
name|resp
parameter_list|)
block|{
name|resultList
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|resp
operator|.
name|results
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|resultList
operator|.
name|size
argument_list|()
operator|==
name|limit
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|resultList
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|resp
operator|.
name|hasMoreResultsInRegion
condition|)
block|{
if|if
condition|(
name|resp
operator|.
name|results
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|scan
operator|.
name|setStartRow
argument_list|(
name|createClosestNextRow
operator|.
name|apply
argument_list|(
name|resp
operator|.
name|results
index|[
name|resp
operator|.
name|results
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|scan
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|nextScan
operator|.
name|apply
argument_list|(
name|resp
operator|.
name|currentRegion
argument_list|)
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|resultList
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|scan
parameter_list|(
name|boolean
name|locateToPreviousRegion
parameter_list|)
block|{
name|conn
operator|.
name|callerFactory
operator|.
expr|<
name|SmallScanResponse
operator|>
name|single
argument_list|()
operator|.
name|table
argument_list|(
name|tableName
argument_list|)
operator|.
name|row
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|)
operator|.
name|rpcTimeout
argument_list|(
name|rpcTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|operationTimeout
argument_list|(
name|scanTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|.
name|locateToPreviousRegion
argument_list|(
name|locateToPreviousRegion
argument_list|)
operator|.
name|action
argument_list|(
name|this
operator|::
name|scan
argument_list|)
operator|.
name|call
argument_list|()
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|resp
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|onComplete
argument_list|(
name|resp
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CompletableFuture
argument_list|<
name|List
argument_list|<
name|Result
argument_list|>
argument_list|>
name|call
parameter_list|()
block|{
name|firstScan
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|private
name|void
name|firstScan
parameter_list|()
block|{
name|scan
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|reversedFirstScan
parameter_list|()
block|{
name|scan
argument_list|(
name|isEmptyStartRow
argument_list|(
name|scan
operator|.
name|getStartRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|nextScan
parameter_list|(
name|HRegionInfo
name|region
parameter_list|)
block|{
if|if
condition|(
name|isEmptyStopRow
argument_list|(
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|isEmptyStopRow
argument_list|(
name|region
operator|.
name|getEndKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|region
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|scan
operator|.
name|setStartRow
argument_list|(
name|region
operator|.
name|getEndKey
argument_list|()
argument_list|)
expr_stmt|;
name|scan
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|reversedNextScan
parameter_list|(
name|HRegionInfo
name|region
parameter_list|)
block|{
if|if
condition|(
name|isEmptyStopRow
argument_list|(
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|isEmptyStartRow
argument_list|(
name|region
operator|.
name|getStartKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|region
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|scan
operator|.
name|getStopRow
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|scan
operator|.
name|setStartRow
argument_list|(
name|region
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
name|scan
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

