begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
operator|.
name|SimpleEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_comment
comment|/**  * HTableMultiplexer provides a thread-safe non blocking PUT API across all the tables.  * Each put will be sharded into different buffer queues based on its destination region server.  * So each region server buffer queue will only have the puts which share the same destination.  * And each queue will have a flush worker thread to flush the puts request to the region server.  * If any queue is full, the HTableMultiplexer starts to drop the Put requests for that   * particular queue.  *   * Also all the puts will be retried as a configuration number before dropping.  * And the HTableMultiplexer can report the number of buffered requests and the number of the  * failed (dropped) requests in total or on per region server basis.  *   * This class is thread safe.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|HTableMultiplexer
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HTableMultiplexer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|poolID
init|=
literal|0
decl_stmt|;
specifier|static
specifier|final
name|String
name|TABLE_MULTIPLEXER_FLUSH_FREQ_MS
init|=
literal|"hbase.tablemultiplexer.flush.frequency.ms"
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|TableName
argument_list|,
name|HTable
argument_list|>
name|tableNameToHTableMap
decl_stmt|;
comment|/** The map between each region server to its corresponding buffer queue */
specifier|private
name|Map
argument_list|<
name|HRegionLocation
argument_list|,
name|LinkedBlockingQueue
argument_list|<
name|PutStatus
argument_list|>
argument_list|>
name|serverToBufferQueueMap
decl_stmt|;
comment|/** The map between each region server to its flush worker */
specifier|private
name|Map
argument_list|<
name|HRegionLocation
argument_list|,
name|HTableFlushWorker
argument_list|>
name|serverToFlushWorkerMap
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|int
name|retryNum
decl_stmt|;
specifier|private
name|int
name|perRegionServerBufferQueueSize
decl_stmt|;
comment|/**    *     * @param conf The HBaseConfiguration    * @param perRegionServerBufferQueueSize determines the max number of the buffered Put ops     *         for each region server before dropping the request.    */
specifier|public
name|HTableMultiplexer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|perRegionServerBufferQueueSize
parameter_list|)
throws|throws
name|ZooKeeperConnectionException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|serverToBufferQueueMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|HRegionLocation
argument_list|,
name|LinkedBlockingQueue
argument_list|<
name|PutStatus
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|serverToFlushWorkerMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|HRegionLocation
argument_list|,
name|HTableFlushWorker
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableNameToHTableMap
operator|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|TableName
argument_list|,
name|HTable
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|retryNum
operator|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_RETRIES_NUMBER
argument_list|)
expr_stmt|;
name|this
operator|.
name|perRegionServerBufferQueueSize
operator|=
name|perRegionServerBufferQueueSize
expr_stmt|;
block|}
comment|/**    * The put request will be buffered by its corresponding buffer queue. Return false if the queue    * is already full.    * @param tableName    * @param put    * @return true if the request can be accepted by its corresponding buffer queue.    * @throws IOException    */
specifier|public
name|boolean
name|put
parameter_list|(
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|put
argument_list|(
name|tableName
argument_list|,
name|put
argument_list|,
name|this
operator|.
name|retryNum
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|put
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|put
argument_list|)
return|;
block|}
comment|/**    * The puts request will be buffered by their corresponding buffer queue.     * Return the list of puts which could not be queued.    * @param tableName    * @param puts    * @return the list of puts which could not be queued    * @throws IOException    */
specifier|public
name|List
argument_list|<
name|Put
argument_list|>
name|put
parameter_list|(
name|TableName
name|tableName
parameter_list|,
specifier|final
name|List
argument_list|<
name|Put
argument_list|>
name|puts
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|puts
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|Put
argument_list|>
name|failedPuts
init|=
literal|null
decl_stmt|;
name|boolean
name|result
decl_stmt|;
for|for
control|(
name|Put
name|put
range|:
name|puts
control|)
block|{
name|result
operator|=
name|put
argument_list|(
name|tableName
argument_list|,
name|put
argument_list|,
name|this
operator|.
name|retryNum
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|false
condition|)
block|{
comment|// Create the failed puts list if necessary
if|if
condition|(
name|failedPuts
operator|==
literal|null
condition|)
block|{
name|failedPuts
operator|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// Add the put to the failed puts list
name|failedPuts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|failedPuts
return|;
block|}
specifier|public
name|List
argument_list|<
name|Put
argument_list|>
name|put
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|List
argument_list|<
name|Put
argument_list|>
name|puts
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|puts
argument_list|)
return|;
block|}
comment|/**    * The put request will be buffered by its corresponding buffer queue. And the put request will be    * retried before dropping the request.    * Return false if the queue is already full.    * @param tableName    * @param put    * @param retry    * @return true if the request can be accepted by its corresponding buffer queue.    * @throws IOException    */
specifier|public
name|boolean
name|put
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
name|int
name|retry
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|retry
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LinkedBlockingQueue
argument_list|<
name|PutStatus
argument_list|>
name|queue
decl_stmt|;
name|HTable
name|htable
init|=
name|getHTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|htable
operator|.
name|validatePut
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|HRegionLocation
name|loc
init|=
name|htable
operator|.
name|getRegionLocation
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
block|{
comment|// Add the put pair into its corresponding queue.
name|queue
operator|=
name|addNewRegionServer
argument_list|(
name|loc
argument_list|,
name|htable
argument_list|)
expr_stmt|;
comment|// Generate a MultiPutStatus obj and offer it into the queue
name|PutStatus
name|s
init|=
operator|new
name|PutStatus
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|put
argument_list|,
name|retry
argument_list|)
decl_stmt|;
return|return
name|queue
operator|.
name|offer
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot process the put "
operator|+
name|put
operator|+
literal|" because of "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|put
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
name|int
name|retry
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|put
argument_list|,
name|retry
argument_list|)
return|;
block|}
comment|/**    * @return the current HTableMultiplexerStatus    */
specifier|public
name|HTableMultiplexerStatus
name|getHTableMultiplexerStatus
parameter_list|()
block|{
return|return
operator|new
name|HTableMultiplexerStatus
argument_list|(
name|serverToFlushWorkerMap
argument_list|)
return|;
block|}
specifier|private
name|HTable
name|getHTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|htable
init|=
name|this
operator|.
name|tableNameToHTableMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|htable
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|tableNameToHTableMap
init|)
block|{
name|htable
operator|=
name|this
operator|.
name|tableNameToHTableMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|htable
operator|==
literal|null
condition|)
block|{
name|htable
operator|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableNameToHTableMap
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|htable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|htable
return|;
block|}
specifier|private
specifier|synchronized
name|LinkedBlockingQueue
argument_list|<
name|PutStatus
argument_list|>
name|addNewRegionServer
parameter_list|(
name|HRegionLocation
name|addr
parameter_list|,
name|HTable
name|htable
parameter_list|)
block|{
name|LinkedBlockingQueue
argument_list|<
name|PutStatus
argument_list|>
name|queue
init|=
name|serverToBufferQueueMap
operator|.
name|get
argument_list|(
name|addr
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
comment|// Create a queue for the new region server
name|queue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|PutStatus
argument_list|>
argument_list|(
name|perRegionServerBufferQueueSize
argument_list|)
expr_stmt|;
name|serverToBufferQueueMap
operator|.
name|put
argument_list|(
name|addr
argument_list|,
name|queue
argument_list|)
expr_stmt|;
comment|// Create the flush worker
name|HTableFlushWorker
name|worker
init|=
operator|new
name|HTableFlushWorker
argument_list|(
name|conf
argument_list|,
name|addr
argument_list|,
name|this
argument_list|,
name|queue
argument_list|,
name|htable
argument_list|)
decl_stmt|;
name|this
operator|.
name|serverToFlushWorkerMap
operator|.
name|put
argument_list|(
name|addr
argument_list|,
name|worker
argument_list|)
expr_stmt|;
comment|// Launch a daemon thread to flush the puts
comment|// from the queue to its corresponding region server.
name|String
name|name
init|=
literal|"HTableFlushWorker-"
operator|+
name|addr
operator|.
name|getHostnamePort
argument_list|()
operator|+
literal|"-"
operator|+
operator|(
name|poolID
operator|++
operator|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|worker
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|queue
return|;
block|}
comment|/**    * HTableMultiplexerStatus keeps track of the current status of the HTableMultiplexer.    * report the number of buffered requests and the number of the failed (dropped) requests    * in total or on per region server basis.    */
specifier|static
class|class
name|HTableMultiplexerStatus
block|{
specifier|private
name|long
name|totalFailedPutCounter
decl_stmt|;
specifier|private
name|long
name|totalBufferedPutCounter
decl_stmt|;
specifier|private
name|long
name|maxLatency
decl_stmt|;
specifier|private
name|long
name|overallAverageLatency
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|serverToFailedCounterMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|serverToBufferedCounterMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|serverToAverageLatencyMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|serverToMaxLatencyMap
decl_stmt|;
specifier|public
name|HTableMultiplexerStatus
parameter_list|(
name|Map
argument_list|<
name|HRegionLocation
argument_list|,
name|HTableFlushWorker
argument_list|>
name|serverToFlushWorkerMap
parameter_list|)
block|{
name|this
operator|.
name|totalBufferedPutCounter
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|totalFailedPutCounter
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|maxLatency
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|overallAverageLatency
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|serverToBufferedCounterMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|serverToFailedCounterMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|serverToAverageLatencyMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|serverToMaxLatencyMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|initialize
argument_list|(
name|serverToFlushWorkerMap
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initialize
parameter_list|(
name|Map
argument_list|<
name|HRegionLocation
argument_list|,
name|HTableFlushWorker
argument_list|>
name|serverToFlushWorkerMap
parameter_list|)
block|{
if|if
condition|(
name|serverToFlushWorkerMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|long
name|averageCalcSum
init|=
literal|0
decl_stmt|;
name|int
name|averageCalcCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionLocation
argument_list|,
name|HTableFlushWorker
argument_list|>
name|entry
range|:
name|serverToFlushWorkerMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HRegionLocation
name|addr
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|HTableFlushWorker
name|worker
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|bufferedCounter
init|=
name|worker
operator|.
name|getTotalBufferedCount
argument_list|()
decl_stmt|;
name|long
name|failedCounter
init|=
name|worker
operator|.
name|getTotalFailedCount
argument_list|()
decl_stmt|;
name|long
name|serverMaxLatency
init|=
name|worker
operator|.
name|getMaxLatency
argument_list|()
decl_stmt|;
name|AtomicAverageCounter
name|averageCounter
init|=
name|worker
operator|.
name|getAverageLatencyCounter
argument_list|()
decl_stmt|;
comment|// Get sum and count pieces separately to compute overall average
name|SimpleEntry
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|averageComponents
init|=
name|averageCounter
operator|.
name|getComponents
argument_list|()
decl_stmt|;
name|long
name|serverAvgLatency
init|=
name|averageCounter
operator|.
name|getAndReset
argument_list|()
decl_stmt|;
name|this
operator|.
name|totalBufferedPutCounter
operator|+=
name|bufferedCounter
expr_stmt|;
name|this
operator|.
name|totalFailedPutCounter
operator|+=
name|failedCounter
expr_stmt|;
if|if
condition|(
name|serverMaxLatency
operator|>
name|this
operator|.
name|maxLatency
condition|)
block|{
name|this
operator|.
name|maxLatency
operator|=
name|serverMaxLatency
expr_stmt|;
block|}
name|averageCalcSum
operator|+=
name|averageComponents
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|averageCalcCount
operator|+=
name|averageComponents
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|serverToBufferedCounterMap
operator|.
name|put
argument_list|(
name|addr
operator|.
name|getHostnamePort
argument_list|()
argument_list|,
name|bufferedCounter
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverToFailedCounterMap
operator|.
name|put
argument_list|(
name|addr
operator|.
name|getHostnamePort
argument_list|()
argument_list|,
name|failedCounter
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverToAverageLatencyMap
operator|.
name|put
argument_list|(
name|addr
operator|.
name|getHostnamePort
argument_list|()
argument_list|,
name|serverAvgLatency
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverToMaxLatencyMap
operator|.
name|put
argument_list|(
name|addr
operator|.
name|getHostnamePort
argument_list|()
argument_list|,
name|serverMaxLatency
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|overallAverageLatency
operator|=
name|averageCalcCount
operator|!=
literal|0
condition|?
name|averageCalcSum
operator|/
name|averageCalcCount
else|:
literal|0
expr_stmt|;
block|}
specifier|public
name|long
name|getTotalBufferedCounter
parameter_list|()
block|{
return|return
name|this
operator|.
name|totalBufferedPutCounter
return|;
block|}
specifier|public
name|long
name|getTotalFailedCounter
parameter_list|()
block|{
return|return
name|this
operator|.
name|totalFailedPutCounter
return|;
block|}
specifier|public
name|long
name|getMaxLatency
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxLatency
return|;
block|}
specifier|public
name|long
name|getOverallAverageLatency
parameter_list|()
block|{
return|return
name|this
operator|.
name|overallAverageLatency
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getBufferedCounterForEachRegionServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|serverToBufferedCounterMap
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getFailedCounterForEachRegionServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|serverToFailedCounterMap
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getMaxLatencyForEachRegionServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|serverToMaxLatencyMap
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getAverageLatencyForEachRegionServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|serverToAverageLatencyMap
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PutStatus
block|{
specifier|private
specifier|final
name|HRegionInfo
name|regionInfo
decl_stmt|;
specifier|private
specifier|final
name|Put
name|put
decl_stmt|;
specifier|private
specifier|final
name|int
name|retryCount
decl_stmt|;
specifier|public
name|PutStatus
parameter_list|(
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
specifier|final
name|int
name|retryCount
parameter_list|)
block|{
name|this
operator|.
name|regionInfo
operator|=
name|regionInfo
expr_stmt|;
name|this
operator|.
name|put
operator|=
name|put
expr_stmt|;
name|this
operator|.
name|retryCount
operator|=
name|retryCount
expr_stmt|;
block|}
specifier|public
name|HRegionInfo
name|getRegionInfo
parameter_list|()
block|{
return|return
name|regionInfo
return|;
block|}
specifier|public
name|Put
name|getPut
parameter_list|()
block|{
return|return
name|put
return|;
block|}
specifier|public
name|int
name|getRetryCount
parameter_list|()
block|{
return|return
name|retryCount
return|;
block|}
block|}
comment|/**    * Helper to count the average over an interval until reset.    */
specifier|private
specifier|static
class|class
name|AtomicAverageCounter
block|{
specifier|private
name|long
name|sum
decl_stmt|;
specifier|private
name|int
name|count
decl_stmt|;
specifier|public
name|AtomicAverageCounter
parameter_list|()
block|{
name|this
operator|.
name|sum
operator|=
literal|0L
expr_stmt|;
name|this
operator|.
name|count
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|long
name|getAndReset
parameter_list|()
block|{
name|long
name|result
init|=
name|this
operator|.
name|get
argument_list|()
decl_stmt|;
name|this
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
specifier|synchronized
name|long
name|get
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|count
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|this
operator|.
name|sum
operator|/
name|this
operator|.
name|count
return|;
block|}
specifier|public
specifier|synchronized
name|SimpleEntry
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|getComponents
parameter_list|()
block|{
return|return
operator|new
name|SimpleEntry
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|sum
argument_list|,
name|count
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|sum
operator|=
literal|0l
expr_stmt|;
name|this
operator|.
name|count
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|sum
operator|+=
name|value
expr_stmt|;
name|this
operator|.
name|count
operator|++
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|HTableFlushWorker
implements|implements
name|Runnable
block|{
specifier|private
name|HRegionLocation
name|addr
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|LinkedBlockingQueue
argument_list|<
name|PutStatus
argument_list|>
name|queue
decl_stmt|;
specifier|private
name|HTableMultiplexer
name|htableMultiplexer
decl_stmt|;
specifier|private
name|AtomicLong
name|totalFailedPutCount
decl_stmt|;
specifier|private
name|AtomicInteger
name|currentProcessingPutCount
decl_stmt|;
specifier|private
name|AtomicAverageCounter
name|averageLatency
decl_stmt|;
specifier|private
name|AtomicLong
name|maxLatency
decl_stmt|;
specifier|private
name|HTable
name|htable
decl_stmt|;
comment|// For Multi
specifier|public
name|HTableFlushWorker
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HRegionLocation
name|addr
parameter_list|,
name|HTableMultiplexer
name|htableMultiplexer
parameter_list|,
name|LinkedBlockingQueue
argument_list|<
name|PutStatus
argument_list|>
name|queue
parameter_list|,
name|HTable
name|htable
parameter_list|)
block|{
name|this
operator|.
name|addr
operator|=
name|addr
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|htableMultiplexer
operator|=
name|htableMultiplexer
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|totalFailedPutCount
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentProcessingPutCount
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|averageLatency
operator|=
operator|new
name|AtomicAverageCounter
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxLatency
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|htable
operator|=
name|htable
expr_stmt|;
block|}
specifier|public
name|long
name|getTotalFailedCount
parameter_list|()
block|{
return|return
name|totalFailedPutCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|long
name|getTotalBufferedCount
parameter_list|()
block|{
return|return
name|queue
operator|.
name|size
argument_list|()
operator|+
name|currentProcessingPutCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|AtomicAverageCounter
name|getAverageLatencyCounter
parameter_list|()
block|{
return|return
name|this
operator|.
name|averageLatency
return|;
block|}
specifier|public
name|long
name|getMaxLatency
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxLatency
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|resubmitFailedPut
parameter_list|(
name|PutStatus
name|failedPutStatus
parameter_list|,
name|HRegionLocation
name|oldLoc
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|failedPut
init|=
name|failedPutStatus
operator|.
name|getPut
argument_list|()
decl_stmt|;
comment|// The currentPut is failed. So get the table name for the currentPut.
name|TableName
name|tableName
init|=
name|failedPutStatus
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
decl_stmt|;
comment|// Decrease the retry count
name|int
name|retryCount
init|=
name|failedPutStatus
operator|.
name|getRetryCount
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|retryCount
operator|<=
literal|0
condition|)
block|{
comment|// Update the failed counter and no retry any more.
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// Retry one more time
return|return
name|this
operator|.
name|htableMultiplexer
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|failedPut
argument_list|,
name|retryCount
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|List
argument_list|<
name|PutStatus
argument_list|>
name|processingList
init|=
operator|new
name|ArrayList
argument_list|<
name|PutStatus
argument_list|>
argument_list|()
decl_stmt|;
comment|/**         * The frequency in milliseconds for the current thread to process the corresponding          * buffer queue.          **/
name|long
name|frequency
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|TABLE_MULTIPLEXER_FLUSH_FREQ_MS
argument_list|,
literal|100
argument_list|)
decl_stmt|;
comment|// initial delay
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|frequency
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
comment|// Ignore
name|long
name|start
decl_stmt|,
name|elapsed
decl_stmt|;
name|int
name|failedCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|start
operator|=
name|elapsed
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// Clear the processingList, putToStatusMap and failedCount
name|processingList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|failedCount
operator|=
literal|0
expr_stmt|;
comment|// drain all the queued puts into the tmp list
name|queue
operator|.
name|drainTo
argument_list|(
name|processingList
argument_list|)
expr_stmt|;
name|currentProcessingPutCount
operator|.
name|set
argument_list|(
name|processingList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|processingList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|(
name|processingList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PutStatus
name|putStatus
range|:
name|processingList
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|putStatus
operator|.
name|getPut
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Process this multiput request
name|List
argument_list|<
name|Put
argument_list|>
name|failed
init|=
literal|null
decl_stmt|;
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
try|try
block|{
name|htable
operator|.
name|batch
argument_list|(
name|list
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught some exceptions "
operator|+
name|e
operator|+
literal|" when flushing puts to region server "
operator|+
name|addr
operator|.
name|getHostnamePort
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// mutate list so that it is empty for complete success, or
comment|// contains only failed records
comment|// results are returned in the same order as the requests in list
comment|// walk the list backwards, so we can remove from list without
comment|// impacting the indexes of earlier members
for|for
control|(
name|int
name|i
init|=
name|results
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|results
index|[
name|i
index|]
operator|instanceof
name|Result
condition|)
block|{
comment|// successful Puts are removed from the list here.
name|list
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|failed
operator|=
name|list
expr_stmt|;
block|}
if|if
condition|(
name|failed
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|failed
operator|.
name|size
argument_list|()
operator|==
name|processingList
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// All the puts for this region server are failed. Going to retry it later
for|for
control|(
name|PutStatus
name|putStatus
range|:
name|processingList
control|)
block|{
if|if
condition|(
operator|!
name|resubmitFailedPut
argument_list|(
name|putStatus
argument_list|,
name|this
operator|.
name|addr
argument_list|)
condition|)
block|{
name|failedCount
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Set
argument_list|<
name|Put
argument_list|>
name|failedPutSet
init|=
operator|new
name|HashSet
argument_list|<
name|Put
argument_list|>
argument_list|(
name|failed
argument_list|)
decl_stmt|;
for|for
control|(
name|PutStatus
name|putStatus
range|:
name|processingList
control|)
block|{
if|if
condition|(
name|failedPutSet
operator|.
name|contains
argument_list|(
name|putStatus
operator|.
name|getPut
argument_list|()
argument_list|)
operator|&&
operator|!
name|resubmitFailedPut
argument_list|(
name|putStatus
argument_list|,
name|this
operator|.
name|addr
argument_list|)
condition|)
block|{
name|failedCount
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Update the totalFailedCount
name|this
operator|.
name|totalFailedPutCount
operator|.
name|addAndGet
argument_list|(
name|failedCount
argument_list|)
expr_stmt|;
name|elapsed
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
comment|// Update latency counters
name|averageLatency
operator|.
name|add
argument_list|(
name|elapsed
argument_list|)
expr_stmt|;
if|if
condition|(
name|elapsed
operator|>
name|maxLatency
operator|.
name|get
argument_list|()
condition|)
block|{
name|maxLatency
operator|.
name|set
argument_list|(
name|elapsed
argument_list|)
expr_stmt|;
block|}
comment|// Log some basic info
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processed "
operator|+
name|currentProcessingPutCount
operator|+
literal|" put requests for "
operator|+
name|addr
operator|.
name|getHostnamePort
argument_list|()
operator|+
literal|" and "
operator|+
name|failedCount
operator|+
literal|" failed"
operator|+
literal|", latency for this send: "
operator|+
name|elapsed
argument_list|)
expr_stmt|;
block|}
comment|// Reset the current processing put count
name|currentProcessingPutCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Sleep for a while
if|if
condition|(
name|elapsed
operator|==
name|start
condition|)
block|{
name|elapsed
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
block|}
if|if
condition|(
name|elapsed
operator|<
name|frequency
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|frequency
operator|-
name|elapsed
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Log all the exceptions and move on
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught some exceptions "
operator|+
name|e
operator|+
literal|" when flushing puts to region server "
operator|+
name|addr
operator|.
name|getHostnamePort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

