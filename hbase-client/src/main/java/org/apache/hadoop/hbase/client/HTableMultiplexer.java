begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
operator|.
name|SimpleEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_comment
comment|/**  * HTableMultiplexer provides a thread-safe non blocking PUT API across all the tables.  * Each put will be sharded into different buffer queues based on its destination region server.  * So each region server buffer queue will only have the puts which share the same destination.  * And each queue will have a flush worker thread to flush the puts request to the region server.  * If any queue is full, the HTableMultiplexer starts to drop the Put requests for that  * particular queue.  *  * Also all the puts will be retried as a configuration number before dropping.  * And the HTableMultiplexer can report the number of buffered requests and the number of the  * failed (dropped) requests in total or on per region server basis.  *  * This class is thread safe.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|HTableMultiplexer
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HTableMultiplexer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_MULTIPLEXER_FLUSH_PERIOD_MS
init|=
literal|"hbase.tablemultiplexer.flush.period.ms"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_MULTIPLEXER_INIT_THREADS
init|=
literal|"hbase.tablemultiplexer.init.threads"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_MULTIPLEXER_MAX_RETRIES_IN_QUEUE
init|=
literal|"hbase.client.max.retries.in.queue"
decl_stmt|;
comment|/** The map between each region server to its flush worker */
specifier|private
specifier|final
name|Map
argument_list|<
name|HRegionLocation
argument_list|,
name|FlushWorker
argument_list|>
name|serverToFlushWorkerMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|workerConf
decl_stmt|;
specifier|private
specifier|final
name|ClusterConnection
name|conn
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|pool
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxAttempts
decl_stmt|;
specifier|private
specifier|final
name|int
name|perRegionServerBufferQueueSize
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxKeyValueSize
decl_stmt|;
specifier|private
specifier|final
name|ScheduledExecutorService
name|executor
decl_stmt|;
specifier|private
specifier|final
name|long
name|flushPeriod
decl_stmt|;
comment|/**    * @param conf The HBaseConfiguration    * @param perRegionServerBufferQueueSize determines the max number of the buffered Put ops for    *          each region server before dropping the request.    */
specifier|public
name|HTableMultiplexer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|perRegionServerBufferQueueSize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|,
name|perRegionServerBufferQueueSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param conn The HBase connection.    * @param conf The HBase configuration    * @param perRegionServerBufferQueueSize determines the max number of the buffered Put ops for    *          each region server before dropping the request.    */
specifier|public
name|HTableMultiplexer
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|perRegionServerBufferQueueSize
parameter_list|)
block|{
name|this
operator|.
name|conn
operator|=
operator|(
name|ClusterConnection
operator|)
name|conn
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|HTable
operator|.
name|getDefaultExecutor
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// how many times we could try in total, one more than retry number
name|this
operator|.
name|maxAttempts
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_RETRIES_NUMBER
argument_list|)
operator|+
literal|1
expr_stmt|;
name|this
operator|.
name|perRegionServerBufferQueueSize
operator|=
name|perRegionServerBufferQueueSize
expr_stmt|;
name|this
operator|.
name|maxKeyValueSize
operator|=
name|HTable
operator|.
name|getMaxKeyValueSize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|flushPeriod
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|TABLE_MULTIPLEXER_FLUSH_PERIOD_MS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|int
name|initThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|TABLE_MULTIPLEXER_INIT_THREADS
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|this
operator|.
name|executor
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
name|initThreads
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"HTableFlushWorker-%d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|workerConf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// We do not do the retry because we need to reassign puts to different queues if regions are
comment|// moved.
name|this
operator|.
name|workerConf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Closes the internal {@link Connection}. Does nothing if the {@link Connection} has already    * been closed.    * @throws IOException If there is an error closing the connection.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|getConnection
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|getConnection
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * The put request will be buffered by its corresponding buffer queue. Return false if the queue    * is already full.    * @param tableName    * @param put    * @return true if the request can be accepted by its corresponding buffer queue.    */
specifier|public
name|boolean
name|put
parameter_list|(
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|tableName
argument_list|,
name|put
argument_list|,
name|this
operator|.
name|maxAttempts
argument_list|)
return|;
block|}
comment|/**    * The puts request will be buffered by their corresponding buffer queue.    * Return the list of puts which could not be queued.    * @param tableName    * @param puts    * @return the list of puts which could not be queued    */
specifier|public
name|List
argument_list|<
name|Put
argument_list|>
name|put
parameter_list|(
name|TableName
name|tableName
parameter_list|,
specifier|final
name|List
argument_list|<
name|Put
argument_list|>
name|puts
parameter_list|)
block|{
if|if
condition|(
name|puts
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|Put
argument_list|>
name|failedPuts
init|=
literal|null
decl_stmt|;
name|boolean
name|result
decl_stmt|;
for|for
control|(
name|Put
name|put
range|:
name|puts
control|)
block|{
name|result
operator|=
name|put
argument_list|(
name|tableName
argument_list|,
name|put
argument_list|,
name|this
operator|.
name|maxAttempts
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|false
condition|)
block|{
comment|// Create the failed puts list if necessary
if|if
condition|(
name|failedPuts
operator|==
literal|null
condition|)
block|{
name|failedPuts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|// Add the put to the failed puts list
name|failedPuts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|failedPuts
return|;
block|}
comment|/**    * @deprecated Use {@link #put(TableName, List) } instead.    */
annotation|@
name|Deprecated
specifier|public
name|List
argument_list|<
name|Put
argument_list|>
name|put
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|List
argument_list|<
name|Put
argument_list|>
name|puts
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|puts
argument_list|)
return|;
block|}
comment|/**    * The put request will be buffered by its corresponding buffer queue. And the put request will be    * retried before dropping the request.    * Return false if the queue is already full.    * @return true if the request can be accepted by its corresponding buffer queue.    */
specifier|public
name|boolean
name|put
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
name|int
name|maxAttempts
parameter_list|)
block|{
if|if
condition|(
name|maxAttempts
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|HTable
operator|.
name|validatePut
argument_list|(
name|put
argument_list|,
name|maxKeyValueSize
argument_list|)
expr_stmt|;
comment|// Allow mocking to get at the connection, but don't expose the connection to users.
name|ClusterConnection
name|conn
init|=
operator|(
name|ClusterConnection
operator|)
name|getConnection
argument_list|()
decl_stmt|;
comment|// AsyncProcess in the FlushWorker should take care of refreshing the location cache
comment|// as necessary. We shouldn't have to do that here.
name|HRegionLocation
name|loc
init|=
name|conn
operator|.
name|getRegionLocation
argument_list|(
name|tableName
argument_list|,
name|put
operator|.
name|getRow
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
block|{
comment|// Add the put pair into its corresponding queue.
name|LinkedBlockingQueue
argument_list|<
name|PutStatus
argument_list|>
name|queue
init|=
name|getQueue
argument_list|(
name|loc
argument_list|)
decl_stmt|;
comment|// Generate a MultiPutStatus object and offer it into the queue
name|PutStatus
name|s
init|=
operator|new
name|PutStatus
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|put
argument_list|,
name|maxAttempts
argument_list|)
decl_stmt|;
return|return
name|queue
operator|.
name|offer
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot process the put "
operator|+
name|put
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * @deprecated Use {@link #put(TableName, Put) } instead.    */
annotation|@
name|Deprecated
specifier|public
name|boolean
name|put
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
name|int
name|retry
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|put
argument_list|,
name|retry
argument_list|)
return|;
block|}
comment|/**    * @deprecated Use {@link #put(TableName, Put)} instead.    */
annotation|@
name|Deprecated
specifier|public
name|boolean
name|put
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
name|Put
name|put
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|put
argument_list|)
return|;
block|}
comment|/**    * @return the current HTableMultiplexerStatus    */
specifier|public
name|HTableMultiplexerStatus
name|getHTableMultiplexerStatus
parameter_list|()
block|{
return|return
operator|new
name|HTableMultiplexerStatus
argument_list|(
name|serverToFlushWorkerMap
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
name|LinkedBlockingQueue
argument_list|<
name|PutStatus
argument_list|>
name|getQueue
parameter_list|(
name|HRegionLocation
name|addr
parameter_list|)
block|{
name|FlushWorker
name|worker
init|=
name|serverToFlushWorkerMap
operator|.
name|get
argument_list|(
name|addr
argument_list|)
decl_stmt|;
if|if
condition|(
name|worker
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|serverToFlushWorkerMap
init|)
block|{
name|worker
operator|=
name|serverToFlushWorkerMap
operator|.
name|get
argument_list|(
name|addr
argument_list|)
expr_stmt|;
if|if
condition|(
name|worker
operator|==
literal|null
condition|)
block|{
comment|// Create the flush worker
name|worker
operator|=
operator|new
name|FlushWorker
argument_list|(
name|workerConf
argument_list|,
name|this
operator|.
name|conn
argument_list|,
name|addr
argument_list|,
name|this
argument_list|,
name|perRegionServerBufferQueueSize
argument_list|,
name|pool
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverToFlushWorkerMap
operator|.
name|put
argument_list|(
name|addr
argument_list|,
name|worker
argument_list|)
expr_stmt|;
name|executor
operator|.
name|scheduleAtFixedRate
argument_list|(
name|worker
argument_list|,
name|flushPeriod
argument_list|,
name|flushPeriod
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|worker
operator|.
name|getQueue
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
name|ClusterConnection
name|getConnection
parameter_list|()
block|{
return|return
name|this
operator|.
name|conn
return|;
block|}
comment|/**    * HTableMultiplexerStatus keeps track of the current status of the HTableMultiplexer.    * report the number of buffered requests and the number of the failed (dropped) requests    * in total or on per region server basis.    */
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|static
class|class
name|HTableMultiplexerStatus
block|{
specifier|private
name|long
name|totalFailedPutCounter
decl_stmt|;
specifier|private
name|long
name|totalBufferedPutCounter
decl_stmt|;
specifier|private
name|long
name|maxLatency
decl_stmt|;
specifier|private
name|long
name|overallAverageLatency
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|serverToFailedCounterMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|serverToBufferedCounterMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|serverToAverageLatencyMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|serverToMaxLatencyMap
decl_stmt|;
specifier|public
name|HTableMultiplexerStatus
parameter_list|(
name|Map
argument_list|<
name|HRegionLocation
argument_list|,
name|FlushWorker
argument_list|>
name|serverToFlushWorkerMap
parameter_list|)
block|{
name|this
operator|.
name|totalBufferedPutCounter
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|totalFailedPutCounter
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|maxLatency
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|overallAverageLatency
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|serverToBufferedCounterMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|serverToFailedCounterMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|serverToAverageLatencyMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|serverToMaxLatencyMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|initialize
argument_list|(
name|serverToFlushWorkerMap
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initialize
parameter_list|(
name|Map
argument_list|<
name|HRegionLocation
argument_list|,
name|FlushWorker
argument_list|>
name|serverToFlushWorkerMap
parameter_list|)
block|{
if|if
condition|(
name|serverToFlushWorkerMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|long
name|averageCalcSum
init|=
literal|0
decl_stmt|;
name|int
name|averageCalcCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionLocation
argument_list|,
name|FlushWorker
argument_list|>
name|entry
range|:
name|serverToFlushWorkerMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HRegionLocation
name|addr
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|FlushWorker
name|worker
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|bufferedCounter
init|=
name|worker
operator|.
name|getTotalBufferedCount
argument_list|()
decl_stmt|;
name|long
name|failedCounter
init|=
name|worker
operator|.
name|getTotalFailedCount
argument_list|()
decl_stmt|;
name|long
name|serverMaxLatency
init|=
name|worker
operator|.
name|getMaxLatency
argument_list|()
decl_stmt|;
name|AtomicAverageCounter
name|averageCounter
init|=
name|worker
operator|.
name|getAverageLatencyCounter
argument_list|()
decl_stmt|;
comment|// Get sum and count pieces separately to compute overall average
name|SimpleEntry
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|averageComponents
init|=
name|averageCounter
operator|.
name|getComponents
argument_list|()
decl_stmt|;
name|long
name|serverAvgLatency
init|=
name|averageCounter
operator|.
name|getAndReset
argument_list|()
decl_stmt|;
name|this
operator|.
name|totalBufferedPutCounter
operator|+=
name|bufferedCounter
expr_stmt|;
name|this
operator|.
name|totalFailedPutCounter
operator|+=
name|failedCounter
expr_stmt|;
if|if
condition|(
name|serverMaxLatency
operator|>
name|this
operator|.
name|maxLatency
condition|)
block|{
name|this
operator|.
name|maxLatency
operator|=
name|serverMaxLatency
expr_stmt|;
block|}
name|averageCalcSum
operator|+=
name|averageComponents
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|averageCalcCount
operator|+=
name|averageComponents
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|serverToBufferedCounterMap
operator|.
name|put
argument_list|(
name|addr
operator|.
name|getHostnamePort
argument_list|()
argument_list|,
name|bufferedCounter
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverToFailedCounterMap
operator|.
name|put
argument_list|(
name|addr
operator|.
name|getHostnamePort
argument_list|()
argument_list|,
name|failedCounter
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverToAverageLatencyMap
operator|.
name|put
argument_list|(
name|addr
operator|.
name|getHostnamePort
argument_list|()
argument_list|,
name|serverAvgLatency
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverToMaxLatencyMap
operator|.
name|put
argument_list|(
name|addr
operator|.
name|getHostnamePort
argument_list|()
argument_list|,
name|serverMaxLatency
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|overallAverageLatency
operator|=
name|averageCalcCount
operator|!=
literal|0
condition|?
name|averageCalcSum
operator|/
name|averageCalcCount
else|:
literal|0
expr_stmt|;
block|}
specifier|public
name|long
name|getTotalBufferedCounter
parameter_list|()
block|{
return|return
name|this
operator|.
name|totalBufferedPutCounter
return|;
block|}
specifier|public
name|long
name|getTotalFailedCounter
parameter_list|()
block|{
return|return
name|this
operator|.
name|totalFailedPutCounter
return|;
block|}
specifier|public
name|long
name|getMaxLatency
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxLatency
return|;
block|}
specifier|public
name|long
name|getOverallAverageLatency
parameter_list|()
block|{
return|return
name|this
operator|.
name|overallAverageLatency
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getBufferedCounterForEachRegionServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|serverToBufferedCounterMap
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getFailedCounterForEachRegionServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|serverToFailedCounterMap
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getMaxLatencyForEachRegionServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|serverToMaxLatencyMap
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getAverageLatencyForEachRegionServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|serverToAverageLatencyMap
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|PutStatus
block|{
specifier|final
name|HRegionInfo
name|regionInfo
decl_stmt|;
specifier|final
name|Put
name|put
decl_stmt|;
specifier|final
name|int
name|maxAttempCount
decl_stmt|;
specifier|public
name|PutStatus
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|,
name|Put
name|put
parameter_list|,
name|int
name|maxAttempCount
parameter_list|)
block|{
name|this
operator|.
name|regionInfo
operator|=
name|regionInfo
expr_stmt|;
name|this
operator|.
name|put
operator|=
name|put
expr_stmt|;
name|this
operator|.
name|maxAttempCount
operator|=
name|maxAttempCount
expr_stmt|;
block|}
block|}
comment|/**    * Helper to count the average over an interval until reset.    */
specifier|private
specifier|static
class|class
name|AtomicAverageCounter
block|{
specifier|private
name|long
name|sum
decl_stmt|;
specifier|private
name|int
name|count
decl_stmt|;
specifier|public
name|AtomicAverageCounter
parameter_list|()
block|{
name|this
operator|.
name|sum
operator|=
literal|0L
expr_stmt|;
name|this
operator|.
name|count
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|long
name|getAndReset
parameter_list|()
block|{
name|long
name|result
init|=
name|this
operator|.
name|get
argument_list|()
decl_stmt|;
name|this
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
specifier|synchronized
name|long
name|get
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|count
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|this
operator|.
name|sum
operator|/
name|this
operator|.
name|count
return|;
block|}
specifier|public
specifier|synchronized
name|SimpleEntry
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|getComponents
parameter_list|()
block|{
return|return
operator|new
name|SimpleEntry
argument_list|<>
argument_list|(
name|sum
argument_list|,
name|count
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|sum
operator|=
literal|0L
expr_stmt|;
name|this
operator|.
name|count
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|sum
operator|+=
name|value
expr_stmt|;
name|this
operator|.
name|count
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|FlushWorker
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|HRegionLocation
name|addr
decl_stmt|;
specifier|private
specifier|final
name|LinkedBlockingQueue
argument_list|<
name|PutStatus
argument_list|>
name|queue
decl_stmt|;
specifier|private
specifier|final
name|HTableMultiplexer
name|multiplexer
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|totalFailedPutCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|currentProcessingCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicAverageCounter
name|averageLatency
init|=
operator|new
name|AtomicAverageCounter
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|maxLatency
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AsyncProcess
name|ap
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|PutStatus
argument_list|>
name|processingList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ScheduledExecutorService
name|executor
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxRetryInQueue
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|retryInQueue
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|writeRpcTimeout
decl_stmt|;
comment|// needed to pass in through AsyncProcess constructor
specifier|private
specifier|final
name|int
name|operationTimeout
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|pool
decl_stmt|;
specifier|public
name|FlushWorker
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ClusterConnection
name|conn
parameter_list|,
name|HRegionLocation
name|addr
parameter_list|,
name|HTableMultiplexer
name|htableMultiplexer
parameter_list|,
name|int
name|perRegionServerBufferQueueSize
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|ScheduledExecutorService
name|executor
parameter_list|)
block|{
name|this
operator|.
name|addr
operator|=
name|addr
expr_stmt|;
name|this
operator|.
name|multiplexer
operator|=
name|htableMultiplexer
expr_stmt|;
name|this
operator|.
name|queue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|(
name|perRegionServerBufferQueueSize
argument_list|)
expr_stmt|;
name|RpcRetryingCallerFactory
name|rpcCallerFactory
init|=
name|RpcRetryingCallerFactory
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RpcControllerFactory
name|rpcControllerFactory
init|=
name|RpcControllerFactory
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|writeRpcTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_WRITE_TIMEOUT_KEY
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_RPC_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|operationTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_OPERATION_TIMEOUT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_OPERATION_TIMEOUT
argument_list|)
expr_stmt|;
name|this
operator|.
name|ap
operator|=
operator|new
name|AsyncProcess
argument_list|(
name|conn
argument_list|,
name|conf
argument_list|,
name|rpcCallerFactory
argument_list|,
literal|false
argument_list|,
name|rpcControllerFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|maxRetryInQueue
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|TABLE_MULTIPLEXER_MAX_RETRIES_IN_QUEUE
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
block|}
specifier|protected
name|LinkedBlockingQueue
argument_list|<
name|PutStatus
argument_list|>
name|getQueue
parameter_list|()
block|{
return|return
name|this
operator|.
name|queue
return|;
block|}
specifier|public
name|long
name|getTotalFailedCount
parameter_list|()
block|{
return|return
name|totalFailedPutCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|long
name|getTotalBufferedCount
parameter_list|()
block|{
return|return
name|queue
operator|.
name|size
argument_list|()
operator|+
name|currentProcessingCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|AtomicAverageCounter
name|getAverageLatencyCounter
parameter_list|()
block|{
return|return
name|this
operator|.
name|averageLatency
return|;
block|}
specifier|public
name|long
name|getMaxLatency
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxLatency
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|boolean
name|resubmitFailedPut
parameter_list|(
name|PutStatus
name|ps
parameter_list|,
name|HRegionLocation
name|oldLoc
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Decrease the retry count
specifier|final
name|int
name|retryCount
init|=
name|ps
operator|.
name|maxAttempCount
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|retryCount
operator|<=
literal|0
condition|)
block|{
comment|// Update the failed counter and no retry any more.
return|return
literal|false
return|;
block|}
name|int
name|cnt
init|=
name|getRetryInQueue
argument_list|()
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|cnt
operator|>
name|getMaxRetryInQueue
argument_list|()
condition|)
block|{
comment|// Too many Puts in queue for resubmit, give up this
name|getRetryInQueue
argument_list|()
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|Put
name|failedPut
init|=
name|ps
operator|.
name|put
decl_stmt|;
comment|// The currentPut is failed. So get the table name for the currentPut.
specifier|final
name|TableName
name|tableName
init|=
name|ps
operator|.
name|regionInfo
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|long
name|delayMs
init|=
name|getNextDelay
argument_list|(
name|retryCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"resubmitting after "
operator|+
name|delayMs
operator|+
literal|"ms: "
operator|+
name|retryCount
argument_list|)
expr_stmt|;
block|}
comment|// HBASE-12198, HBASE-15221, HBASE-15232: AsyncProcess should be responsible for updating
comment|// the region location cache when the Put original failed with some exception. If we keep
comment|// re-trying the same Put to the same location, AsyncProcess isn't doing the right stuff
comment|// that we expect it to.
name|getExecutor
argument_list|()
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|succ
init|=
literal|false
decl_stmt|;
try|try
block|{
name|succ
operator|=
name|FlushWorker
operator|.
name|this
operator|.
name|getMultiplexer
argument_list|()
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|failedPut
argument_list|,
name|retryCount
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FlushWorker
operator|.
name|this
operator|.
name|getRetryInQueue
argument_list|()
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|succ
condition|)
block|{
name|FlushWorker
operator|.
name|this
operator|.
name|getTotalFailedPutCount
argument_list|()
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|,
name|delayMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|VisibleForTesting
name|long
name|getNextDelay
parameter_list|(
name|int
name|retryCount
parameter_list|)
block|{
return|return
name|ConnectionUtils
operator|.
name|getPauseTime
argument_list|(
name|multiplexer
operator|.
name|flushPeriod
argument_list|,
name|multiplexer
operator|.
name|maxAttempts
operator|-
name|retryCount
operator|-
literal|1
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
name|AtomicInteger
name|getRetryInQueue
parameter_list|()
block|{
return|return
name|this
operator|.
name|retryInQueue
return|;
block|}
annotation|@
name|VisibleForTesting
name|int
name|getMaxRetryInQueue
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxRetryInQueue
return|;
block|}
annotation|@
name|VisibleForTesting
name|AtomicLong
name|getTotalFailedPutCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|totalFailedPutCount
return|;
block|}
annotation|@
name|VisibleForTesting
name|HTableMultiplexer
name|getMultiplexer
parameter_list|()
block|{
return|return
name|this
operator|.
name|multiplexer
return|;
block|}
annotation|@
name|VisibleForTesting
name|ScheduledExecutorService
name|getExecutor
parameter_list|()
block|{
return|return
name|this
operator|.
name|executor
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|failedCount
init|=
literal|0
decl_stmt|;
try|try
block|{
name|long
name|start
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
comment|// drain all the queued puts into the tmp list
name|processingList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queue
operator|.
name|drainTo
argument_list|(
name|processingList
argument_list|)
expr_stmt|;
if|if
condition|(
name|processingList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Nothing to flush
return|return;
block|}
name|currentProcessingCount
operator|.
name|set
argument_list|(
name|processingList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// failedCount is decreased whenever a Put is success or resubmit.
name|failedCount
operator|=
name|processingList
operator|.
name|size
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Action
argument_list|>
name|retainedActions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|processingList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|MultiAction
name|actions
init|=
operator|new
name|MultiAction
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|processingList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PutStatus
name|putStatus
init|=
name|processingList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Action
name|action
init|=
operator|new
name|Action
argument_list|(
name|putStatus
operator|.
name|put
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|putStatus
operator|.
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|retainedActions
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
comment|// Process this multi-put request
name|List
argument_list|<
name|PutStatus
argument_list|>
name|failed
init|=
literal|null
decl_stmt|;
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|ServerName
name|server
init|=
name|addr
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|MultiAction
argument_list|>
name|actionsByServer
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|server
argument_list|,
name|actions
argument_list|)
decl_stmt|;
try|try
block|{
name|AsyncProcessTask
name|task
init|=
name|AsyncProcessTask
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResults
argument_list|(
name|results
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
argument_list|)
operator|.
name|setRpcTimeout
argument_list|(
name|writeRpcTimeout
argument_list|)
operator|.
name|setOperationTimeout
argument_list|(
name|operationTimeout
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AsyncRequestFuture
name|arf
init|=
name|ap
operator|.
name|submitMultiActions
argument_list|(
name|task
argument_list|,
name|retainedActions
argument_list|,
literal|0L
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|actionsByServer
argument_list|)
decl_stmt|;
name|arf
operator|.
name|waitUntilDone
argument_list|()
expr_stmt|;
if|if
condition|(
name|arf
operator|.
name|hasError
argument_list|()
condition|)
block|{
comment|// We just log and ignore the exception here since failed Puts will be resubmit again.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught some exceptions when flushing puts to region server "
operator|+
name|addr
operator|.
name|getHostnamePort
argument_list|()
argument_list|,
name|arf
operator|.
name|getErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|results
index|[
name|i
index|]
operator|instanceof
name|Result
condition|)
block|{
name|failedCount
operator|--
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|failed
operator|==
literal|null
condition|)
block|{
name|failed
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|failed
operator|.
name|add
argument_list|(
name|processingList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|failed
operator|!=
literal|null
condition|)
block|{
comment|// Resubmit failed puts
for|for
control|(
name|PutStatus
name|putStatus
range|:
name|failed
control|)
block|{
if|if
condition|(
name|resubmitFailedPut
argument_list|(
name|putStatus
argument_list|,
name|this
operator|.
name|addr
argument_list|)
condition|)
block|{
name|failedCount
operator|--
expr_stmt|;
block|}
block|}
block|}
name|long
name|elapsed
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|start
decl_stmt|;
comment|// Update latency counters
name|averageLatency
operator|.
name|add
argument_list|(
name|elapsed
argument_list|)
expr_stmt|;
if|if
condition|(
name|elapsed
operator|>
name|maxLatency
operator|.
name|get
argument_list|()
condition|)
block|{
name|maxLatency
operator|.
name|set
argument_list|(
name|elapsed
argument_list|)
expr_stmt|;
block|}
comment|// Log some basic info
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processed "
operator|+
name|currentProcessingCount
operator|+
literal|" put requests for "
operator|+
name|addr
operator|.
name|getHostnamePort
argument_list|()
operator|+
literal|" and "
operator|+
name|failedCount
operator|+
literal|" failed"
operator|+
literal|", latency for this send: "
operator|+
name|elapsed
argument_list|)
expr_stmt|;
block|}
comment|// Reset the current processing put count
name|currentProcessingCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// To make findbugs happy
comment|// Log all the exceptions and move on
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught some exceptions "
operator|+
name|e
operator|+
literal|" when flushing puts to region server "
operator|+
name|addr
operator|.
name|getHostnamePort
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
comment|// Log all the exceptions and move on
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught some exceptions "
operator|+
name|e
operator|+
literal|" when flushing puts to region server "
operator|+
name|addr
operator|.
name|getHostnamePort
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Update the totalFailedCount
name|this
operator|.
name|totalFailedPutCount
operator|.
name|addAndGet
argument_list|(
name|failedCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

