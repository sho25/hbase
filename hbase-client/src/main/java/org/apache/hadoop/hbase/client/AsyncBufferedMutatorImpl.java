begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|HashedWheelTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|Timeout
import|;
end_import

begin_comment
comment|/**  * The implementation of {@link AsyncBufferedMutator}. Simply wrap an {@link AsyncTable}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|AsyncBufferedMutatorImpl
implements|implements
name|AsyncBufferedMutator
block|{
specifier|private
specifier|final
name|HashedWheelTimer
name|periodicalFlushTimer
decl_stmt|;
specifier|private
specifier|final
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
decl_stmt|;
specifier|private
specifier|final
name|long
name|writeBufferSize
decl_stmt|;
specifier|private
specifier|final
name|long
name|periodicFlushTimeoutNs
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|bufferedSize
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
annotation|@
name|VisibleForTesting
name|Timeout
name|periodicFlushTask
decl_stmt|;
name|AsyncBufferedMutatorImpl
parameter_list|(
name|HashedWheelTimer
name|periodicalFlushTimer
parameter_list|,
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
parameter_list|,
name|long
name|writeBufferSize
parameter_list|,
name|long
name|periodicFlushTimeoutNs
parameter_list|)
block|{
name|this
operator|.
name|periodicalFlushTimer
operator|=
name|periodicalFlushTimer
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|writeBufferSize
operator|=
name|writeBufferSize
expr_stmt|;
name|this
operator|.
name|periodicFlushTimeoutNs
operator|=
name|periodicFlushTimeoutNs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getName
parameter_list|()
block|{
return|return
name|table
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|table
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
comment|// will be overridden in test
annotation|@
name|VisibleForTesting
specifier|protected
name|void
name|internalFlush
parameter_list|()
block|{
if|if
condition|(
name|periodicFlushTask
operator|!=
literal|null
condition|)
block|{
name|periodicFlushTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|periodicFlushTask
operator|=
literal|null
expr_stmt|;
block|}
name|List
argument_list|<
name|Mutation
argument_list|>
name|toSend
init|=
name|this
operator|.
name|mutations
decl_stmt|;
if|if
condition|(
name|toSend
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|toComplete
init|=
name|this
operator|.
name|futures
decl_stmt|;
assert|assert
name|toSend
operator|.
name|size
argument_list|()
operator|==
name|toComplete
operator|.
name|size
argument_list|()
assert|;
name|this
operator|.
name|mutations
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|futures
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|bufferedSize
operator|=
literal|0L
expr_stmt|;
name|Iterator
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|toCompleteIter
init|=
name|toComplete
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|CompletableFuture
argument_list|<
name|?
argument_list|>
name|future
range|:
name|table
operator|.
name|batch
argument_list|(
name|toSend
argument_list|)
control|)
block|{
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|toCompleteFuture
init|=
name|toCompleteIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|future
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|r
parameter_list|,
name|e
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|toCompleteFuture
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toCompleteFuture
operator|.
name|complete
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|mutate
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Mutation
argument_list|>
name|mutations
parameter_list|)
block|{
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
init|=
name|Stream
operator|.
expr|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
operator|>
name|generate
argument_list|(
name|CompletableFuture
operator|::
operator|new
argument_list|)
operator|.
name|limit
argument_list|(
name|mutations
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|heapSize
init|=
name|mutations
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|m
lambda|->
name|m
operator|.
name|heapSize
argument_list|()
argument_list|)
operator|.
name|sum
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
literal|"Already closed"
argument_list|)
decl_stmt|;
name|futures
operator|.
name|forEach
argument_list|(
name|f
lambda|->
name|f
operator|.
name|completeExceptionally
argument_list|(
name|ioe
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|futures
return|;
block|}
if|if
condition|(
name|this
operator|.
name|mutations
operator|.
name|isEmpty
argument_list|()
operator|&&
name|periodicFlushTimeoutNs
operator|>
literal|0
condition|)
block|{
name|periodicFlushTask
operator|=
name|periodicalFlushTimer
operator|.
name|newTimeout
argument_list|(
name|timeout
lambda|->
block|{
synchronized|synchronized
init|(
name|AsyncBufferedMutatorImpl
operator|.
name|this
init|)
block|{
comment|// confirm that we are still valid, if there is already an internalFlush call before us,
comment|// then we should not execute any more. And in internalFlush we will set periodicFlush
comment|// to null, and since we may schedule a new one, so here we check whether the references
comment|// are equal.
if|if
condition|(
name|timeout
operator|==
name|periodicFlushTask
condition|)
block|{
name|periodicFlushTask
operator|=
literal|null
expr_stmt|;
name|internalFlush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|periodicFlushTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|mutations
operator|.
name|addAll
argument_list|(
name|mutations
argument_list|)
expr_stmt|;
name|this
operator|.
name|futures
operator|.
name|addAll
argument_list|(
name|futures
argument_list|)
expr_stmt|;
name|bufferedSize
operator|+=
name|heapSize
expr_stmt|;
if|if
condition|(
name|bufferedSize
operator|>=
name|writeBufferSize
condition|)
block|{
name|internalFlush
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|futures
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|flush
parameter_list|()
block|{
name|internalFlush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
name|internalFlush
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getWriteBufferSize
parameter_list|()
block|{
return|return
name|writeBufferSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPeriodicalFlushTimeout
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|unit
operator|.
name|convert
argument_list|(
name|periodicFlushTimeoutNs
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
return|;
block|}
block|}
end_class

end_unit

