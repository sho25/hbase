begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetSpaceQuotaEnforcementsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetSpaceQuotaRegionSizesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|GetSpaceQuotaSnapshotsResponse
import|;
end_import

begin_comment
comment|/**  * Client class to wrap RPCs to HBase servers for space quota status information.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|QuotaStatusCalls
block|{
comment|/**    * {@link #getMasterRegionSizes(Connection, RpcControllerFactory, RpcRetryingCallerFactory, int)}    */
specifier|public
specifier|static
name|GetSpaceQuotaRegionSizesResponse
name|getMasterRegionSizes
parameter_list|(
name|ClusterConnection
name|clusterConn
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|RpcControllerFactory
name|rpcController
init|=
name|clusterConn
operator|.
name|getRpcControllerFactory
argument_list|()
decl_stmt|;
name|RpcRetryingCallerFactory
name|rpcCaller
init|=
name|clusterConn
operator|.
name|getRpcRetryingCallerFactory
argument_list|()
decl_stmt|;
return|return
name|getMasterRegionSizes
argument_list|(
name|clusterConn
argument_list|,
name|rpcController
argument_list|,
name|rpcCaller
argument_list|,
name|timeout
argument_list|)
return|;
block|}
comment|/**    * Executes an RPC to the HBase master to fetch its view on the Region sizes.    */
specifier|public
specifier|static
name|GetSpaceQuotaRegionSizesResponse
name|getMasterRegionSizes
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|RpcControllerFactory
name|factory
parameter_list|,
name|RpcRetryingCallerFactory
name|rpcCaller
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterCallable
argument_list|<
name|GetSpaceQuotaRegionSizesResponse
argument_list|>
name|callable
init|=
operator|new
name|MasterCallable
argument_list|<
name|GetSpaceQuotaRegionSizesResponse
argument_list|>
argument_list|(
name|conn
argument_list|,
name|factory
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|GetSpaceQuotaRegionSizesResponse
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|getSpaceQuotaRegionSizes
argument_list|(
name|getRpcController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildGetSpaceQuotaRegionSizesRequest
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|RpcRetryingCaller
argument_list|<
name|GetSpaceQuotaRegionSizesResponse
argument_list|>
name|caller
init|=
name|rpcCaller
operator|.
name|newCaller
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|caller
operator|.
name|callWithoutRetries
argument_list|(
name|callable
argument_list|,
name|timeout
argument_list|)
return|;
block|}
finally|finally
block|{
name|callable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * {@link #getRegionServerQuotaSnapshot(ClusterConnection, RpcControllerFactory, int, ServerName)}    */
specifier|public
specifier|static
name|GetSpaceQuotaSnapshotsResponse
name|getRegionServerQuotaSnapshot
parameter_list|(
name|ClusterConnection
name|clusterConn
parameter_list|,
name|int
name|timeout
parameter_list|,
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
name|RpcControllerFactory
name|rpcController
init|=
name|clusterConn
operator|.
name|getRpcControllerFactory
argument_list|()
decl_stmt|;
return|return
name|getRegionServerQuotaSnapshot
argument_list|(
name|clusterConn
argument_list|,
name|rpcController
argument_list|,
name|timeout
argument_list|,
name|sn
argument_list|)
return|;
block|}
comment|/**    * Executes an RPC to the RegionServer identified by the {@code ServerName} to fetch its view    * on space quotas.    */
specifier|public
specifier|static
name|GetSpaceQuotaSnapshotsResponse
name|getRegionServerQuotaSnapshot
parameter_list|(
name|ClusterConnection
name|conn
parameter_list|,
name|RpcControllerFactory
name|factory
parameter_list|,
name|int
name|timeout
parameter_list|,
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|GetSpaceQuotaSnapshotsResponse
argument_list|>
name|callable
init|=
operator|new
name|Callable
argument_list|<
name|GetSpaceQuotaSnapshotsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|GetSpaceQuotaSnapshotsResponse
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|admin
operator|.
name|getSpaceQuotaSnapshots
argument_list|(
name|factory
operator|.
name|newController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildGetSpaceQuotaSnapshotsRequest
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|call
argument_list|(
name|callable
argument_list|)
return|;
block|}
comment|/**    * {@link #getRegionServerSpaceQuotaEnforcements(ClusterConnection, RpcControllerFactory, int, ServerName)}    */
specifier|public
specifier|static
name|GetSpaceQuotaEnforcementsResponse
name|getRegionServerSpaceQuotaEnforcements
parameter_list|(
name|ClusterConnection
name|clusterConn
parameter_list|,
name|int
name|timeout
parameter_list|,
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
name|RpcControllerFactory
name|rpcController
init|=
name|clusterConn
operator|.
name|getRpcControllerFactory
argument_list|()
decl_stmt|;
return|return
name|getRegionServerSpaceQuotaEnforcements
argument_list|(
name|clusterConn
argument_list|,
name|rpcController
argument_list|,
name|timeout
argument_list|,
name|sn
argument_list|)
return|;
block|}
comment|/**    * Executes an RPC to the RegionServer identified by the {@code ServerName} to fetch its view on    * enforced space quotas.    */
specifier|public
specifier|static
name|GetSpaceQuotaEnforcementsResponse
name|getRegionServerSpaceQuotaEnforcements
parameter_list|(
name|ClusterConnection
name|conn
parameter_list|,
name|RpcControllerFactory
name|factory
parameter_list|,
name|int
name|timeout
parameter_list|,
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|AdminService
operator|.
name|BlockingInterface
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|GetSpaceQuotaEnforcementsResponse
argument_list|>
name|callable
init|=
operator|new
name|Callable
argument_list|<
name|GetSpaceQuotaEnforcementsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|GetSpaceQuotaEnforcementsResponse
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|admin
operator|.
name|getSpaceQuotaEnforcements
argument_list|(
name|factory
operator|.
name|newController
argument_list|()
argument_list|,
name|RequestConverter
operator|.
name|buildGetSpaceQuotaEnforcementsRequest
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|ProtobufUtil
operator|.
name|call
argument_list|(
name|callable
argument_list|)
return|;
block|}
block|}
end_class

end_unit

