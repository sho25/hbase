begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|backoff
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|final
class|class
name|ClientBackoffPolicyFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClientBackoffPolicyFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ClientBackoffPolicyFactory
parameter_list|()
block|{   }
specifier|public
specifier|static
name|ClientBackoffPolicy
name|create
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// create the backoff policy
name|String
name|className
init|=
name|conf
operator|.
name|get
argument_list|(
name|ClientBackoffPolicy
operator|.
name|BACKOFF_POLICY_CLASS
argument_list|,
name|NoBackoffPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ReflectionUtils
operator|.
name|instantiateWithCustomCtor
argument_list|(
name|className
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Configuration
operator|.
name|class
block|}
operator|,
operator|new
name|Object
index|[]
block|{
name|conf
block|}
block|)
function|;
block|}
end_class

begin_comment
comment|/**    * Default backoff policy that doesn't create any backoff for the client, regardless of load    */
end_comment

begin_class
specifier|public
specifier|static
class|class
name|NoBackoffPolicy
implements|implements
name|ClientBackoffPolicy
block|{
specifier|public
name|NoBackoffPolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// necessary to meet contract
block|}
annotation|@
name|Override
specifier|public
name|long
name|getBackoffTime
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
name|byte
index|[]
name|region
parameter_list|,
name|ServerStatistics
name|stats
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
end_class

unit|}
end_unit

