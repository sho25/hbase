begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|DEFAULT_META_REPLICA_NUM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|DEFAULT_ZOOKEEPER_ZNODE_PARENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|META_REPLICAS_NUM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|SPLIT_LOGDIR_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_comment
comment|/**  * Class that hold all the paths of znode for HBase.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|ZNodePaths
block|{
comment|// TODO: Replace this with ZooKeeper constant when ZOOKEEPER-277 is resolved.
specifier|public
specifier|static
specifier|final
name|char
name|ZNODE_PATH_SEPARATOR
init|=
literal|'/'
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|META_ZNODE_PREFIX
init|=
literal|"meta-region-server"
decl_stmt|;
comment|// base znode for this cluster
specifier|public
specifier|final
name|String
name|baseZNode
decl_stmt|;
comment|// the prefix of meta znode, does not include baseZNode.
specifier|public
specifier|final
name|String
name|metaZNodePrefix
decl_stmt|;
comment|// znodes containing the locations of the servers hosting the meta replicas
specifier|public
specifier|final
name|ImmutableMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|metaReplicaZNodes
decl_stmt|;
comment|// znode containing ephemeral nodes of the regionservers
specifier|public
specifier|final
name|String
name|rsZNode
decl_stmt|;
comment|// znode containing ephemeral nodes of the draining regionservers
specifier|public
specifier|final
name|String
name|drainingZNode
decl_stmt|;
comment|// znode of currently active master
specifier|public
specifier|final
name|String
name|masterAddressZNode
decl_stmt|;
comment|// znode of this master in backup master directory, if not the active master
specifier|public
specifier|final
name|String
name|backupMasterAddressesZNode
decl_stmt|;
comment|// znode containing the current cluster state
specifier|public
specifier|final
name|String
name|clusterStateZNode
decl_stmt|;
comment|// znode used for table disabling/enabling
annotation|@
name|Deprecated
specifier|public
specifier|final
name|String
name|tableZNode
decl_stmt|;
comment|// znode containing the unique cluster ID
specifier|public
specifier|final
name|String
name|clusterIdZNode
decl_stmt|;
comment|// znode used for log splitting work assignment
specifier|public
specifier|final
name|String
name|splitLogZNode
decl_stmt|;
comment|// znode containing the state of the load balancer
specifier|public
specifier|final
name|String
name|balancerZNode
decl_stmt|;
comment|// znode containing the state of region normalizer
specifier|public
specifier|final
name|String
name|regionNormalizerZNode
decl_stmt|;
comment|// znode containing the state of all switches, currently there are split and merge child node.
specifier|public
specifier|final
name|String
name|switchZNode
decl_stmt|;
comment|// znode containing the lock for the tables
specifier|public
specifier|final
name|String
name|tableLockZNode
decl_stmt|;
comment|// znode containing namespace descriptors
specifier|public
specifier|final
name|String
name|namespaceZNode
decl_stmt|;
comment|// znode of indicating master maintenance mode
specifier|public
specifier|final
name|String
name|masterMaintZNode
decl_stmt|;
comment|// znode containing all replication state.
specifier|public
specifier|final
name|String
name|replicationZNode
decl_stmt|;
comment|// znode containing a list of all remote slave (i.e. peer) clusters.
specifier|public
specifier|final
name|String
name|peersZNode
decl_stmt|;
comment|// znode containing all replication queues
specifier|public
specifier|final
name|String
name|queuesZNode
decl_stmt|;
comment|// znode containing queues of hfile references to be replicated
specifier|public
specifier|final
name|String
name|hfileRefsZNode
decl_stmt|;
specifier|public
name|ZNodePaths
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|baseZNode
operator|=
name|conf
operator|.
name|get
argument_list|(
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
name|DEFAULT_ZOOKEEPER_ZNODE_PARENT
argument_list|)
expr_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|metaZNodePrefix
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.metaserver"
argument_list|,
name|META_ZNODE_PREFIX
argument_list|)
expr_stmt|;
name|String
name|defaultMetaReplicaZNode
init|=
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|metaZNodePrefix
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|DEFAULT_REPLICA_ID
argument_list|,
name|defaultMetaReplicaZNode
argument_list|)
expr_stmt|;
name|int
name|numMetaReplicas
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|META_REPLICAS_NUM
argument_list|,
name|DEFAULT_META_REPLICA_NUM
argument_list|)
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|1
argument_list|,
name|numMetaReplicas
argument_list|)
operator|.
name|forEachOrdered
argument_list|(
name|i
lambda|->
name|builder
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|defaultMetaReplicaZNode
operator|+
literal|"-"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|metaReplicaZNodes
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|rsZNode
operator|=
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.rs"
argument_list|,
literal|"rs"
argument_list|)
argument_list|)
expr_stmt|;
name|drainingZNode
operator|=
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.draining.rs"
argument_list|,
literal|"draining"
argument_list|)
argument_list|)
expr_stmt|;
name|masterAddressZNode
operator|=
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.master"
argument_list|,
literal|"master"
argument_list|)
argument_list|)
expr_stmt|;
name|backupMasterAddressesZNode
operator|=
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.backup.masters"
argument_list|,
literal|"backup-masters"
argument_list|)
argument_list|)
expr_stmt|;
name|clusterStateZNode
operator|=
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.state"
argument_list|,
literal|"running"
argument_list|)
argument_list|)
expr_stmt|;
name|tableZNode
operator|=
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.tableEnableDisable"
argument_list|,
literal|"table"
argument_list|)
argument_list|)
expr_stmt|;
name|clusterIdZNode
operator|=
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.clusterId"
argument_list|,
literal|"hbaseid"
argument_list|)
argument_list|)
expr_stmt|;
name|splitLogZNode
operator|=
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.splitlog"
argument_list|,
name|SPLIT_LOGDIR_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|balancerZNode
operator|=
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.balancer"
argument_list|,
literal|"balancer"
argument_list|)
argument_list|)
expr_stmt|;
name|regionNormalizerZNode
operator|=
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.regionNormalizer"
argument_list|,
literal|"normalizer"
argument_list|)
argument_list|)
expr_stmt|;
name|switchZNode
operator|=
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.switch"
argument_list|,
literal|"switch"
argument_list|)
argument_list|)
expr_stmt|;
name|tableLockZNode
operator|=
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.tableLock"
argument_list|,
literal|"table-lock"
argument_list|)
argument_list|)
expr_stmt|;
name|namespaceZNode
operator|=
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.namespace"
argument_list|,
literal|"namespace"
argument_list|)
argument_list|)
expr_stmt|;
name|masterMaintZNode
operator|=
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.masterMaintenance"
argument_list|,
literal|"master-maintenance"
argument_list|)
argument_list|)
expr_stmt|;
name|replicationZNode
operator|=
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication"
argument_list|,
literal|"replication"
argument_list|)
argument_list|)
expr_stmt|;
name|peersZNode
operator|=
name|joinZNode
argument_list|(
name|replicationZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication.peers"
argument_list|,
literal|"peers"
argument_list|)
argument_list|)
expr_stmt|;
name|queuesZNode
operator|=
name|joinZNode
argument_list|(
name|replicationZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication.rs"
argument_list|,
literal|"rs"
argument_list|)
argument_list|)
expr_stmt|;
name|hfileRefsZNode
operator|=
name|joinZNode
argument_list|(
name|replicationZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.replication.hfile.refs"
argument_list|,
literal|"hfile-refs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ZNodePaths [baseZNode="
operator|+
name|baseZNode
operator|+
literal|", metaReplicaZNodes="
operator|+
name|metaReplicaZNodes
operator|+
literal|", rsZNode="
operator|+
name|rsZNode
operator|+
literal|", drainingZNode="
operator|+
name|drainingZNode
operator|+
literal|", masterAddressZNode="
operator|+
name|masterAddressZNode
operator|+
literal|", backupMasterAddressesZNode="
operator|+
name|backupMasterAddressesZNode
operator|+
literal|", clusterStateZNode="
operator|+
name|clusterStateZNode
operator|+
literal|", tableZNode="
operator|+
name|tableZNode
operator|+
literal|", clusterIdZNode="
operator|+
name|clusterIdZNode
operator|+
literal|", splitLogZNode="
operator|+
name|splitLogZNode
operator|+
literal|", balancerZNode="
operator|+
name|balancerZNode
operator|+
literal|", regionNormalizerZNode="
operator|+
name|regionNormalizerZNode
operator|+
literal|", switchZNode="
operator|+
name|switchZNode
operator|+
literal|", tableLockZNode="
operator|+
name|tableLockZNode
operator|+
literal|", namespaceZNode="
operator|+
name|namespaceZNode
operator|+
literal|", masterMaintZNode="
operator|+
name|masterMaintZNode
operator|+
literal|", replicationZNode="
operator|+
name|replicationZNode
operator|+
literal|", peersZNode="
operator|+
name|peersZNode
operator|+
literal|", queuesZNode="
operator|+
name|queuesZNode
operator|+
literal|", hfileRefsZNode="
operator|+
name|hfileRefsZNode
operator|+
literal|"]"
return|;
block|}
comment|/**    * Is the znode of any meta replica    * @param node    * @return true or false    */
specifier|public
name|boolean
name|isAnyMetaReplicaZNode
parameter_list|(
name|String
name|node
parameter_list|)
block|{
if|if
condition|(
name|metaReplicaZNodes
operator|.
name|containsValue
argument_list|(
name|node
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Get the znode string corresponding to a replicaId    * @param replicaId    * @return znode    */
specifier|public
name|String
name|getZNodeForReplica
parameter_list|(
name|int
name|replicaId
parameter_list|)
block|{
comment|// return a newly created path but don't update the cache of paths
comment|// This is mostly needed for tests that attempt to create meta replicas
comment|// from outside the master
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|metaReplicaZNodes
operator|.
name|get
argument_list|(
name|replicaId
argument_list|)
argument_list|)
operator|.
name|orElseGet
argument_list|(
parameter_list|()
lambda|->
name|metaReplicaZNodes
operator|.
name|get
argument_list|(
name|DEFAULT_REPLICA_ID
argument_list|)
operator|+
literal|"-"
operator|+
name|replicaId
argument_list|)
return|;
block|}
comment|/**    * Parse the meta replicaId from the passed znode    * @param znode    * @return replicaId    */
specifier|public
name|int
name|getMetaReplicaIdFromZnode
parameter_list|(
name|String
name|znode
parameter_list|)
block|{
if|if
condition|(
name|znode
operator|.
name|equals
argument_list|(
name|metaZNodePrefix
argument_list|)
condition|)
block|{
return|return
name|RegionInfo
operator|.
name|DEFAULT_REPLICA_ID
return|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|znode
operator|.
name|substring
argument_list|(
name|metaZNodePrefix
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Is it the default meta replica's znode    * @param znode    * @return true or false    */
specifier|public
name|boolean
name|isDefaultMetaReplicaZnode
parameter_list|(
name|String
name|znode
parameter_list|)
block|{
return|return
name|metaReplicaZNodes
operator|.
name|get
argument_list|(
name|DEFAULT_REPLICA_ID
argument_list|)
operator|.
name|equals
argument_list|(
name|znode
argument_list|)
return|;
block|}
comment|/**    * Join the prefix znode name with the suffix znode name to generate a proper    * full znode name.    *    * Assumes prefix does not end with slash and suffix does not begin with it.    *    * @param prefix beginning of znode name    * @param suffix ending of znode name    * @return result of properly joining prefix with suffix    */
specifier|public
specifier|static
name|String
name|joinZNode
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
return|return
name|prefix
operator|+
name|ZNodePaths
operator|.
name|ZNODE_PATH_SEPARATOR
operator|+
name|suffix
return|;
block|}
block|}
end_class

end_unit

