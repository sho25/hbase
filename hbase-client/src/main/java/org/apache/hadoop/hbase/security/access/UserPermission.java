begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * UserPermission consists of a user name and a permission.  * Permission can be one of [Global, Namespace, Table] permission.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|UserPermission
block|{
specifier|private
name|String
name|user
decl_stmt|;
specifier|private
name|Permission
name|permission
decl_stmt|;
comment|/**    * Construct a global user permission.    * @param user user name    * @param assigned assigned actions    */
specifier|public
name|UserPermission
parameter_list|(
name|String
name|user
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|assigned
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|permission
operator|=
operator|new
name|GlobalPermission
argument_list|(
name|assigned
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a global user permission.    * @param user user name    * @param actionCode action codes    */
specifier|public
name|UserPermission
parameter_list|(
name|String
name|user
parameter_list|,
name|byte
index|[]
name|actionCode
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|permission
operator|=
operator|new
name|GlobalPermission
argument_list|(
name|actionCode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a namespace user permission.    * @param user user name    * @param namespace namespace    * @param assigned assigned actions    */
specifier|public
name|UserPermission
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|assigned
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|permission
operator|=
operator|new
name|NamespacePermission
argument_list|(
name|namespace
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a table user permission.    * @param user user name    * @param tableName table name    * @param assigned assigned actions    */
specifier|public
name|UserPermission
parameter_list|(
name|String
name|user
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|assigned
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|permission
operator|=
operator|new
name|TablePermission
argument_list|(
name|tableName
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a table:family user permission.    * @param user user name    * @param tableName table name    * @param family family name of table    * @param assigned assigned actions    */
specifier|public
name|UserPermission
parameter_list|(
name|String
name|user
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|assigned
parameter_list|)
block|{
name|this
argument_list|(
name|user
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
literal|null
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a table:family:qualifier user permission.    * @param user user name    * @param tableName table name    * @param family family name of table    * @param qualifier qualifier name of table    * @param assigned assigned actions    */
specifier|public
name|UserPermission
parameter_list|(
name|String
name|user
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|assigned
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|permission
operator|=
operator|new
name|TablePermission
argument_list|(
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a table:family:qualifier user permission.    * @param user user name    * @param tableName table name    * @param family family name of table    * @param qualifier qualifier name of table    * @param actionCodes assigned actions    */
specifier|public
name|UserPermission
parameter_list|(
name|String
name|user
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|actionCodes
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|permission
operator|=
operator|new
name|TablePermission
argument_list|(
name|tableName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|actionCodes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a user permission given permission.    * @param user user name    * @param permission one of [Global, Namespace, Table] permission    */
specifier|public
name|UserPermission
parameter_list|(
name|String
name|user
parameter_list|,
name|Permission
name|permission
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|permission
operator|=
name|permission
expr_stmt|;
block|}
comment|/**    * Get this permission access scope.    * @return access scope    */
specifier|public
name|Permission
operator|.
name|Scope
name|getAccessScope
parameter_list|()
block|{
return|return
name|permission
operator|.
name|getAccessScope
argument_list|()
return|;
block|}
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
specifier|public
name|Permission
name|getPermission
parameter_list|()
block|{
return|return
name|permission
return|;
block|}
specifier|public
name|boolean
name|equalsExceptActions
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|UserPermission
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|UserPermission
name|other
init|=
operator|(
name|UserPermission
operator|)
name|obj
decl_stmt|;
return|return
name|user
operator|.
name|equals
argument_list|(
name|other
operator|.
name|user
argument_list|)
operator|&&
name|permission
operator|.
name|equalsExceptActions
argument_list|(
name|other
operator|.
name|permission
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|UserPermission
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|UserPermission
name|other
init|=
operator|(
name|UserPermission
operator|)
name|obj
decl_stmt|;
return|return
name|user
operator|.
name|equals
argument_list|(
name|other
operator|.
name|user
argument_list|)
operator|&&
name|permission
operator|.
name|equals
argument_list|(
name|other
operator|.
name|permission
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|37
decl_stmt|;
name|int
name|result
init|=
name|permission
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|Objects
operator|.
name|hashCode
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"UserPermission: "
argument_list|)
operator|.
name|append
argument_list|(
literal|"user="
argument_list|)
operator|.
name|append
argument_list|(
name|user
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|str
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

