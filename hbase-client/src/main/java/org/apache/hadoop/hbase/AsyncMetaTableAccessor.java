begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
operator|.
name|META_TABLE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RawAsyncTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_comment
comment|/**  * The asynchronous meta table accessor. Used to read/write region and assignment information store  * in<code>hbase:meta</code>.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|AsyncMetaTableAccessor
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AsyncMetaTableAccessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|CompletableFuture
argument_list|<
name|RawAsyncTable
argument_list|>
name|getMetaTable
parameter_list|(
name|AsyncConnection
name|conn
parameter_list|)
block|{
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|conn
operator|.
name|getRawTable
argument_list|(
name|META_TABLE_NAME
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|tableExists
parameter_list|(
name|AsyncConnection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|META_TABLE_NAME
argument_list|)
condition|)
block|{
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
literal|true
argument_list|)
return|;
block|}
return|return
name|getTableState
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|)
operator|.
name|thenApply
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|CompletableFuture
argument_list|<
name|Optional
argument_list|<
name|TableState
argument_list|>
argument_list|>
name|getTableState
parameter_list|(
name|AsyncConnection
name|conn
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Optional
argument_list|<
name|TableState
argument_list|>
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|getMetaTable
argument_list|(
name|conn
argument_list|)
operator|.
name|thenAccept
argument_list|(
parameter_list|(
name|metaTable
parameter_list|)
lambda|->
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|addColumn
argument_list|(
name|getTableFamily
argument_list|()
argument_list|,
name|getStateColumn
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|time
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
try|try
block|{
name|get
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return;
block|}
name|metaTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|result
parameter_list|,
name|error
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|future
operator|.
name|complete
argument_list|(
name|getTableState
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|private
specifier|static
name|Optional
argument_list|<
name|TableState
argument_list|>
name|getTableState
parameter_list|(
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|Cell
name|cell
init|=
name|r
operator|.
name|getColumnLatestCell
argument_list|(
name|getTableFamily
argument_list|()
argument_list|,
name|getStateColumn
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
try|try
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|TableState
operator|.
name|parseFrom
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
operator|+
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DeserializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to parse table state from result: "
operator|+
name|r
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns the column family used for table columns.    * @return HConstants.TABLE_FAMILY.    */
specifier|private
specifier|static
name|byte
index|[]
name|getTableFamily
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|TABLE_FAMILY
return|;
block|}
comment|/**    * Returns the column qualifier for serialized table state    * @return HConstants.TABLE_STATE_QUALIFIER    */
specifier|private
specifier|static
name|byte
index|[]
name|getStateColumn
parameter_list|()
block|{
return|return
name|HConstants
operator|.
name|TABLE_STATE_QUALIFIER
return|;
block|}
block|}
end_class

end_unit

