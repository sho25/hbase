begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|token
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AuthenticationProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_comment
comment|/**  * Represents the identity information stored in an HBase authentication token.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|AuthenticationTokenIdentifier
extends|extends
name|TokenIdentifier
block|{
specifier|public
specifier|static
specifier|final
name|Text
name|AUTH_TOKEN_TYPE
init|=
operator|new
name|Text
argument_list|(
literal|"HBASE_AUTH_TOKEN"
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|username
decl_stmt|;
specifier|protected
name|int
name|keyId
decl_stmt|;
specifier|protected
name|long
name|issueDate
decl_stmt|;
specifier|protected
name|long
name|expirationDate
decl_stmt|;
specifier|protected
name|long
name|sequenceNumber
decl_stmt|;
specifier|public
name|AuthenticationTokenIdentifier
parameter_list|()
block|{   }
specifier|public
name|AuthenticationTokenIdentifier
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
specifier|public
name|AuthenticationTokenIdentifier
parameter_list|(
name|String
name|username
parameter_list|,
name|int
name|keyId
parameter_list|,
name|long
name|issueDate
parameter_list|,
name|long
name|expirationDate
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
name|this
operator|.
name|keyId
operator|=
name|keyId
expr_stmt|;
name|this
operator|.
name|issueDate
operator|=
name|issueDate
expr_stmt|;
name|this
operator|.
name|expirationDate
operator|=
name|expirationDate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Text
name|getKind
parameter_list|()
block|{
return|return
name|AUTH_TOKEN_TYPE
return|;
block|}
annotation|@
name|Override
specifier|public
name|UserGroupInformation
name|getUser
parameter_list|()
block|{
if|if
condition|(
name|username
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|username
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|username
argument_list|)
return|;
block|}
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
name|void
name|setUsername
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|int
name|getKeyId
parameter_list|()
block|{
return|return
name|keyId
return|;
block|}
name|void
name|setKeyId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|keyId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|long
name|getIssueDate
parameter_list|()
block|{
return|return
name|issueDate
return|;
block|}
name|void
name|setIssueDate
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|issueDate
operator|=
name|timestamp
expr_stmt|;
block|}
specifier|public
name|long
name|getExpirationDate
parameter_list|()
block|{
return|return
name|expirationDate
return|;
block|}
name|void
name|setExpirationDate
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|expirationDate
operator|=
name|timestamp
expr_stmt|;
block|}
specifier|public
name|long
name|getSequenceNumber
parameter_list|()
block|{
return|return
name|sequenceNumber
return|;
block|}
name|void
name|setSequenceNumber
parameter_list|(
name|long
name|seq
parameter_list|)
block|{
name|this
operator|.
name|sequenceNumber
operator|=
name|seq
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|toBytes
parameter_list|()
block|{
name|AuthenticationProtos
operator|.
name|TokenIdentifier
operator|.
name|Builder
name|builder
init|=
name|AuthenticationProtos
operator|.
name|TokenIdentifier
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setKind
argument_list|(
name|AuthenticationProtos
operator|.
name|TokenIdentifier
operator|.
name|Kind
operator|.
name|HBASE_AUTH_TOKEN
argument_list|)
expr_stmt|;
if|if
condition|(
name|username
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setUsername
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
name|username
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setIssueDate
argument_list|(
name|issueDate
argument_list|)
operator|.
name|setExpirationDate
argument_list|(
name|expirationDate
argument_list|)
operator|.
name|setKeyId
argument_list|(
name|keyId
argument_list|)
operator|.
name|setSequenceNumber
argument_list|(
name|sequenceNumber
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|pbBytes
init|=
name|toBytes
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|pbBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|pbBytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|inBytes
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|inBytes
argument_list|)
expr_stmt|;
name|AuthenticationProtos
operator|.
name|TokenIdentifier
name|identifier
init|=
name|AuthenticationProtos
operator|.
name|TokenIdentifier
operator|.
name|newBuilder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|inBytes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// sanity check on type
if|if
condition|(
operator|!
name|identifier
operator|.
name|hasKind
argument_list|()
operator|||
name|identifier
operator|.
name|getKind
argument_list|()
operator|!=
name|AuthenticationProtos
operator|.
name|TokenIdentifier
operator|.
name|Kind
operator|.
name|HBASE_AUTH_TOKEN
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid TokenIdentifier kind from input "
operator|+
name|identifier
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
comment|// copy the field values
if|if
condition|(
name|identifier
operator|.
name|hasUsername
argument_list|()
condition|)
block|{
name|username
operator|=
name|identifier
operator|.
name|getUsername
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|identifier
operator|.
name|hasKeyId
argument_list|()
condition|)
block|{
name|keyId
operator|=
name|identifier
operator|.
name|getKeyId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|identifier
operator|.
name|hasIssueDate
argument_list|()
condition|)
block|{
name|issueDate
operator|=
name|identifier
operator|.
name|getIssueDate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|identifier
operator|.
name|hasExpirationDate
argument_list|()
condition|)
block|{
name|expirationDate
operator|=
name|identifier
operator|.
name|getExpirationDate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|identifier
operator|.
name|hasSequenceNumber
argument_list|()
condition|)
block|{
name|sequenceNumber
operator|=
name|identifier
operator|.
name|getSequenceNumber
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|other
operator|instanceof
name|AuthenticationTokenIdentifier
condition|)
block|{
name|AuthenticationTokenIdentifier
name|ident
init|=
operator|(
name|AuthenticationTokenIdentifier
operator|)
name|other
decl_stmt|;
return|return
name|sequenceNumber
operator|==
name|ident
operator|.
name|getSequenceNumber
argument_list|()
operator|&&
name|keyId
operator|==
name|ident
operator|.
name|getKeyId
argument_list|()
operator|&&
name|issueDate
operator|==
name|ident
operator|.
name|getIssueDate
argument_list|()
operator|&&
name|expirationDate
operator|==
name|ident
operator|.
name|getExpirationDate
argument_list|()
operator|&&
operator|(
name|username
operator|==
literal|null
condition|?
name|ident
operator|.
name|getUsername
argument_list|()
operator|==
literal|null
else|:
name|username
operator|.
name|equals
argument_list|(
name|ident
operator|.
name|getUsername
argument_list|()
argument_list|)
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|sequenceNumber
return|;
block|}
block|}
end_class

end_unit

