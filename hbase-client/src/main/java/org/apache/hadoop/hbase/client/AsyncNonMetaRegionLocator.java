begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|CATALOG_FAMILY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|NINES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|ZEROES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
operator|.
name|createRegionName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
operator|.
name|META_TABLE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncRegionLocator
operator|.
name|updateCachedLoation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|createClosestRowAfter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionUtils
operator|.
name|isEmptyStopRow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
operator|.
name|BYTES_COMPARATOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CollectionUtils
operator|.
name|computeIfAbsent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentNavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * The asynchronous locator for regions other than meta.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
class|class
name|AsyncNonMetaRegionLocator
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AsyncNonMetaRegionLocator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|MAX_CONCURRENT_LOCATE_REQUEST_PER_TABLE
init|=
literal|"hbase.client.meta.max.concurrent.locate.per.table"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_CONCURRENT_LOCATE_REQUEST_PER_TABLE
init|=
literal|8
decl_stmt|;
specifier|private
specifier|final
name|AsyncConnectionImpl
name|conn
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxConcurrentLocateRequestPerTable
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|TableName
argument_list|,
name|TableCache
argument_list|>
name|cache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|LocateRequest
block|{
specifier|public
specifier|final
name|byte
index|[]
name|row
decl_stmt|;
specifier|public
specifier|final
name|RegionLocateType
name|locateType
decl_stmt|;
specifier|public
name|LocateRequest
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|RegionLocateType
name|locateType
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|locateType
operator|=
name|locateType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Bytes
operator|.
name|hashCode
argument_list|(
name|row
argument_list|)
operator|^
name|locateType
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|LocateRequest
operator|.
name|class
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LocateRequest
name|that
init|=
operator|(
name|LocateRequest
operator|)
name|obj
decl_stmt|;
return|return
name|locateType
operator|.
name|equals
argument_list|(
name|that
operator|.
name|locateType
argument_list|)
operator|&&
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|that
operator|.
name|row
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|TableCache
block|{
specifier|public
specifier|final
name|ConcurrentNavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|cache
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<>
argument_list|(
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|Set
argument_list|<
name|LocateRequest
argument_list|>
name|pendingRequests
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
specifier|final
name|Map
argument_list|<
name|LocateRequest
argument_list|,
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|>
name|allRequests
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|boolean
name|hasQuota
parameter_list|(
name|int
name|max
parameter_list|)
block|{
return|return
name|pendingRequests
operator|.
name|size
argument_list|()
operator|<
name|max
return|;
block|}
specifier|public
name|boolean
name|isPending
parameter_list|(
name|LocateRequest
name|req
parameter_list|)
block|{
return|return
name|pendingRequests
operator|.
name|contains
argument_list|(
name|req
argument_list|)
return|;
block|}
specifier|public
name|void
name|send
parameter_list|(
name|LocateRequest
name|req
parameter_list|)
block|{
name|pendingRequests
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
name|AsyncNonMetaRegionLocator
parameter_list|(
name|AsyncConnectionImpl
name|conn
parameter_list|)
block|{
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|maxConcurrentLocateRequestPerTable
operator|=
name|conn
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|MAX_CONCURRENT_LOCATE_REQUEST_PER_TABLE
argument_list|,
name|DEFAULT_MAX_CONCURRENT_LOCATE_REQUEST_PER_TABLE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TableCache
name|getTableCache
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|computeIfAbsent
argument_list|(
name|cache
argument_list|,
name|tableName
argument_list|,
name|TableCache
operator|::
operator|new
argument_list|)
return|;
block|}
specifier|private
name|void
name|removeFromCache
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|)
block|{
name|TableCache
name|tableCache
init|=
name|cache
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableCache
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|tableCache
operator|.
name|cache
operator|.
name|computeIfPresent
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|oldLoc
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|oldLoc
operator|.
name|getSeqNum
argument_list|()
operator|>
name|loc
operator|.
name|getSeqNum
argument_list|()
operator|||
operator|!
name|oldLoc
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|oldLoc
return|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|// return whether we add this loc to cache
specifier|private
name|boolean
name|addToCache
parameter_list|(
name|TableCache
name|tableCache
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Try adding "
operator|+
name|loc
operator|+
literal|" to cache"
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|startKey
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
decl_stmt|;
name|HRegionLocation
name|oldLoc
init|=
name|tableCache
operator|.
name|cache
operator|.
name|putIfAbsent
argument_list|(
name|startKey
argument_list|,
name|loc
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldLoc
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|oldLoc
operator|.
name|getSeqNum
argument_list|()
operator|>
name|loc
operator|.
name|getSeqNum
argument_list|()
operator|||
name|oldLoc
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Will not add "
operator|+
name|loc
operator|+
literal|" to cache because the old value "
operator|+
name|oldLoc
operator|+
literal|" is newer than us or has the same server name"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
name|loc
operator|==
name|tableCache
operator|.
name|cache
operator|.
name|compute
argument_list|(
name|startKey
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|oldValue
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|oldValue
operator|==
literal|null
operator|||
name|oldValue
operator|.
name|getSeqNum
argument_list|()
operator|<=
name|loc
operator|.
name|getSeqNum
argument_list|()
condition|)
block|{
return|return
name|loc
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Will not add "
operator|+
name|loc
operator|+
literal|" to cache because the old value "
operator|+
name|oldValue
operator|+
literal|" is newer than us or has the same server name."
operator|+
literal|" Maybe it is updated before we replace it"
argument_list|)
expr_stmt|;
block|}
return|return
name|oldValue
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"UPM_UNCALLED_PRIVATE_METHOD"
argument_list|,
name|justification
operator|=
literal|"Called by lambda expression"
argument_list|)
specifier|private
name|void
name|addToCache
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|)
block|{
name|addToCache
argument_list|(
name|getTableCache
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|,
name|loc
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Try adding "
operator|+
name|loc
operator|+
literal|" to cache"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|tryComplete
parameter_list|(
name|LocateRequest
name|req
parameter_list|,
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|future
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|)
block|{
if|if
condition|(
name|future
operator|.
name|isDone
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|completed
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|locateType
operator|.
name|equals
argument_list|(
name|RegionLocateType
operator|.
name|BEFORE
argument_list|)
condition|)
block|{
comment|// for locating the row before current row, the common case is to find the previous region in
comment|// reverse scan, so we check the endKey first. In general, the condition should be startKey<
comment|// req.row and endKey>= req.row. Here we split it to endKey == req.row || (endKey> req.row
comment|//&& startKey< req.row). The two conditions are equal since startKey< endKey.
name|int
name|c
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|req
operator|.
name|row
argument_list|)
decl_stmt|;
name|completed
operator|=
name|c
operator|==
literal|0
operator|||
operator|(
name|c
operator|>
literal|0
operator|&&
name|Bytes
operator|.
name|compareTo
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|req
operator|.
name|row
argument_list|)
operator|<
literal|0
operator|)
expr_stmt|;
block|}
else|else
block|{
name|completed
operator|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|containsRow
argument_list|(
name|req
operator|.
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|completed
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
name|loc
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|void
name|complete
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|LocateRequest
name|req
parameter_list|,
name|HRegionLocation
name|loc
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to locate region in '"
operator|+
name|tableName
operator|+
literal|"', row='"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|req
operator|.
name|row
argument_list|)
operator|+
literal|"', locateType="
operator|+
name|req
operator|.
name|locateType
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
name|LocateRequest
name|toSend
init|=
literal|null
decl_stmt|;
name|TableCache
name|tableCache
init|=
name|getTableCache
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|addToCache
argument_list|(
name|tableCache
argument_list|,
name|loc
argument_list|)
condition|)
block|{
comment|// someone is ahead of us.
synchronized|synchronized
init|(
name|tableCache
init|)
block|{
name|tableCache
operator|.
name|pendingRequests
operator|.
name|remove
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
synchronized|synchronized
init|(
name|tableCache
init|)
block|{
name|tableCache
operator|.
name|pendingRequests
operator|.
name|remove
argument_list|(
name|req
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|instanceof
name|DoNotRetryIOException
condition|)
block|{
name|CompletableFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
name|tableCache
operator|.
name|allRequests
operator|.
name|remove
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|LocateRequest
argument_list|,
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|>
argument_list|>
name|iter
init|=
name|tableCache
operator|.
name|allRequests
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|LocateRequest
argument_list|,
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tryComplete
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|loc
argument_list|)
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|tableCache
operator|.
name|allRequests
operator|.
name|isEmpty
argument_list|()
operator|&&
name|tableCache
operator|.
name|hasQuota
argument_list|(
name|maxConcurrentLocateRequestPerTable
argument_list|)
condition|)
block|{
name|LocateRequest
index|[]
name|candidates
init|=
name|tableCache
operator|.
name|allRequests
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
operator|!
name|tableCache
operator|.
name|isPending
argument_list|(
name|r
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|LocateRequest
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidates
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// TODO: use a better algorithm to send a request which is more likely to fetch a new
comment|// location.
name|toSend
operator|=
name|candidates
index|[
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
name|candidates
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|toSend
operator|!=
literal|null
condition|)
block|{
name|locateInMeta
argument_list|(
name|tableName
argument_list|,
name|toSend
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|onScanComplete
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|LocateRequest
name|req
parameter_list|,
name|List
argument_list|<
name|Result
argument_list|>
name|results
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|complete
argument_list|(
name|tableName
argument_list|,
name|req
argument_list|,
literal|null
argument_list|,
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|complete
argument_list|(
name|tableName
argument_list|,
name|req
argument_list|,
literal|null
argument_list|,
operator|new
name|TableNotFoundException
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|RegionLocations
name|locs
init|=
name|MetaTableAccessor
operator|.
name|getRegionLocations
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The fetched location of '"
operator|+
name|tableName
operator|+
literal|"', row='"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|req
operator|.
name|row
argument_list|)
operator|+
literal|"', locateType="
operator|+
name|req
operator|.
name|locateType
operator|+
literal|" is "
operator|+
name|locs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|locs
operator|==
literal|null
operator|||
name|locs
operator|.
name|getDefaultRegionLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|complete
argument_list|(
name|tableName
argument_list|,
name|req
argument_list|,
literal|null
argument_list|,
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"No location found for '%s', row='%s', locateType=%s"
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|req
operator|.
name|row
argument_list|)
argument_list|,
name|req
operator|.
name|locateType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|HRegionLocation
name|loc
init|=
name|locs
operator|.
name|getDefaultRegionLocation
argument_list|()
decl_stmt|;
name|HRegionInfo
name|info
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|complete
argument_list|(
name|tableName
argument_list|,
name|req
argument_list|,
literal|null
argument_list|,
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"HRegionInfo is null for '%s', row='%s', locateType=%s"
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|req
operator|.
name|row
argument_list|)
argument_list|,
name|req
operator|.
name|locateType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|info
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|complete
argument_list|(
name|tableName
argument_list|,
name|req
argument_list|,
literal|null
argument_list|,
operator|new
name|TableNotFoundException
argument_list|(
literal|"Table '"
operator|+
name|tableName
operator|+
literal|"' was not found, got: '"
operator|+
name|info
operator|.
name|getTable
argument_list|()
operator|+
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|info
operator|.
name|isSplit
argument_list|()
condition|)
block|{
name|complete
argument_list|(
name|tableName
argument_list|,
name|req
argument_list|,
literal|null
argument_list|,
operator|new
name|RegionOfflineException
argument_list|(
literal|"the only available region for the required row is a split parent,"
operator|+
literal|" the daughters should be online soon: '"
operator|+
name|info
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|info
operator|.
name|isOffline
argument_list|()
condition|)
block|{
name|complete
argument_list|(
name|tableName
argument_list|,
name|req
argument_list|,
literal|null
argument_list|,
operator|new
name|RegionOfflineException
argument_list|(
literal|"the region is offline, could"
operator|+
literal|" be caused by a disable table call: '"
operator|+
name|info
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|loc
operator|.
name|getServerName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|complete
argument_list|(
name|tableName
argument_list|,
name|req
argument_list|,
literal|null
argument_list|,
operator|new
name|NoServerForRegionException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"No server address listed for region '%s', row='%s', locateType=%s"
argument_list|,
name|info
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|req
operator|.
name|row
argument_list|)
argument_list|,
name|req
operator|.
name|locateType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|complete
argument_list|(
name|tableName
argument_list|,
name|req
argument_list|,
name|loc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HRegionLocation
name|locateRowInCache
parameter_list|(
name|TableCache
name|tableCache
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|entry
init|=
name|tableCache
operator|.
name|cache
operator|.
name|floorEntry
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HRegionLocation
name|loc
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|isEmptyStopRow
argument_list|(
name|endKey
argument_list|)
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|row
argument_list|,
name|endKey
argument_list|)
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Found "
operator|+
name|loc
operator|+
literal|" in cache for '"
operator|+
name|tableName
operator|+
literal|"', row='"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
operator|+
literal|"', locateType="
operator|+
name|RegionLocateType
operator|.
name|CURRENT
argument_list|)
expr_stmt|;
block|}
return|return
name|loc
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|HRegionLocation
name|locateRowBeforeInCache
parameter_list|(
name|TableCache
name|tableCache
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|HRegionLocation
argument_list|>
name|entry
init|=
name|isEmptyStopRow
argument_list|(
name|row
argument_list|)
condition|?
name|tableCache
operator|.
name|cache
operator|.
name|lastEntry
argument_list|()
else|:
name|tableCache
operator|.
name|cache
operator|.
name|lowerEntry
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HRegionLocation
name|loc
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isEmptyStopRow
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
argument_list|)
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|row
argument_list|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Found "
operator|+
name|loc
operator|+
literal|" in cache for '"
operator|+
name|tableName
operator|+
literal|"', row='"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
operator|+
literal|"', locateType="
operator|+
name|RegionLocateType
operator|.
name|BEFORE
argument_list|)
expr_stmt|;
block|}
return|return
name|loc
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|void
name|locateInMeta
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|LocateRequest
name|req
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Try locate '"
operator|+
name|tableName
operator|+
literal|"', row='"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|req
operator|.
name|row
argument_list|)
operator|+
literal|"', locateType="
operator|+
name|req
operator|.
name|locateType
operator|+
literal|" in meta"
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|metaKey
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|locateType
operator|.
name|equals
argument_list|(
name|RegionLocateType
operator|.
name|BEFORE
argument_list|)
condition|)
block|{
if|if
condition|(
name|isEmptyStopRow
argument_list|(
name|req
operator|.
name|row
argument_list|)
condition|)
block|{
name|byte
index|[]
name|binaryTableName
init|=
name|tableName
operator|.
name|getName
argument_list|()
decl_stmt|;
name|metaKey
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|binaryTableName
argument_list|,
name|binaryTableName
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metaKey
operator|=
name|createRegionName
argument_list|(
name|tableName
argument_list|,
name|req
operator|.
name|row
argument_list|,
name|ZEROES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|metaKey
operator|=
name|createRegionName
argument_list|(
name|tableName
argument_list|,
name|req
operator|.
name|row
argument_list|,
name|NINES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|conn
operator|.
name|getRawTable
argument_list|(
name|META_TABLE_NAME
argument_list|)
operator|.
name|smallScan
argument_list|(
operator|new
name|Scan
argument_list|(
name|metaKey
argument_list|)
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
operator|.
name|setSmall
argument_list|(
literal|true
argument_list|)
operator|.
name|addFamily
argument_list|(
name|CATALOG_FAMILY
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|results
parameter_list|,
name|error
parameter_list|)
lambda|->
name|onScanComplete
argument_list|(
name|tableName
argument_list|,
name|req
argument_list|,
name|results
argument_list|,
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HRegionLocation
name|locateInCache
parameter_list|(
name|TableCache
name|tableCache
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|RegionLocateType
name|locateType
parameter_list|)
block|{
return|return
name|locateType
operator|.
name|equals
argument_list|(
name|RegionLocateType
operator|.
name|BEFORE
argument_list|)
condition|?
name|locateRowBeforeInCache
argument_list|(
name|tableCache
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
else|:
name|locateRowInCache
argument_list|(
name|tableCache
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|)
return|;
block|}
comment|// locateToPrevious is true means we will use the start key of a region to locate the region
comment|// placed before it. Used for reverse scan. See the comment of
comment|// AsyncRegionLocator.getPreviousRegionLocation.
specifier|private
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|getRegionLocationInternal
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|RegionLocateType
name|locateType
parameter_list|)
block|{
comment|// AFTER should be convert to CURRENT before calling this method
assert|assert
operator|!
name|locateType
operator|.
name|equals
argument_list|(
name|RegionLocateType
operator|.
name|AFTER
argument_list|)
assert|;
name|TableCache
name|tableCache
init|=
name|getTableCache
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegionLocation
name|loc
init|=
name|locateInCache
argument_list|(
name|tableCache
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|locateType
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
block|{
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|loc
argument_list|)
return|;
block|}
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|future
decl_stmt|;
name|LocateRequest
name|req
decl_stmt|;
name|boolean
name|sendRequest
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|tableCache
init|)
block|{
comment|// check again
name|loc
operator|=
name|locateInCache
argument_list|(
name|tableCache
argument_list|,
name|tableName
argument_list|,
name|row
argument_list|,
name|locateType
argument_list|)
expr_stmt|;
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
block|{
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|loc
argument_list|)
return|;
block|}
name|req
operator|=
operator|new
name|LocateRequest
argument_list|(
name|row
argument_list|,
name|locateType
argument_list|)
expr_stmt|;
name|future
operator|=
name|tableCache
operator|.
name|allRequests
operator|.
name|get
argument_list|(
name|req
argument_list|)
expr_stmt|;
if|if
condition|(
name|future
operator|==
literal|null
condition|)
block|{
name|future
operator|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
expr_stmt|;
name|tableCache
operator|.
name|allRequests
operator|.
name|put
argument_list|(
name|req
argument_list|,
name|future
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableCache
operator|.
name|hasQuota
argument_list|(
name|maxConcurrentLocateRequestPerTable
argument_list|)
operator|&&
operator|!
name|tableCache
operator|.
name|isPending
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|tableCache
operator|.
name|send
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|sendRequest
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sendRequest
condition|)
block|{
name|locateInMeta
argument_list|(
name|tableName
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
return|return
name|future
return|;
block|}
name|CompletableFuture
argument_list|<
name|HRegionLocation
argument_list|>
name|getRegionLocation
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|RegionLocateType
name|locateType
parameter_list|)
block|{
if|if
condition|(
name|locateType
operator|.
name|equals
argument_list|(
name|RegionLocateType
operator|.
name|BEFORE
argument_list|)
condition|)
block|{
return|return
name|getRegionLocationInternal
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|locateType
argument_list|)
return|;
block|}
else|else
block|{
comment|// as we know the exact row after us, so we can just create the new row, and use the same
comment|// algorithm to locate it.
if|if
condition|(
name|locateType
operator|.
name|equals
argument_list|(
name|RegionLocateType
operator|.
name|AFTER
argument_list|)
condition|)
block|{
name|row
operator|=
name|createClosestRowAfter
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
return|return
name|getRegionLocationInternal
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|RegionLocateType
operator|.
name|CURRENT
argument_list|)
return|;
block|}
block|}
name|void
name|updateCachedLocation
parameter_list|(
name|HRegionLocation
name|loc
parameter_list|,
name|Throwable
name|exception
parameter_list|)
block|{
name|updateCachedLoation
argument_list|(
name|loc
argument_list|,
name|exception
argument_list|,
name|l
lambda|->
block|{
name|TableCache
name|tableCache
init|=
name|cache
operator|.
name|get
argument_list|(
name|l
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableCache
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|tableCache
operator|.
name|cache
operator|.
name|get
argument_list|(
name|l
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|)
return|;
block|}
argument_list|,
name|this
operator|::
name|addToCache
argument_list|,
name|this
operator|::
name|removeFromCache
argument_list|)
expr_stmt|;
block|}
name|void
name|clearCache
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|TableCache
name|tableCache
init|=
name|cache
operator|.
name|remove
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableCache
operator|==
literal|null
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|tableCache
init|)
block|{
if|if
condition|(
operator|!
name|tableCache
operator|.
name|allRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|IOException
name|error
init|=
operator|new
name|IOException
argument_list|(
literal|"Cache cleared"
argument_list|)
decl_stmt|;
name|tableCache
operator|.
name|allRequests
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
name|f
lambda|->
name|f
operator|.
name|completeExceptionally
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

