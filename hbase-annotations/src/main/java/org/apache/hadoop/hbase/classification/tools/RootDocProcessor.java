begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|javadoc
operator|.
name|AnnotationDesc
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|javadoc
operator|.
name|AnnotationTypeDoc
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|javadoc
operator|.
name|ClassDoc
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|javadoc
operator|.
name|ConstructorDoc
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|javadoc
operator|.
name|Doc
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|javadoc
operator|.
name|FieldDoc
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|javadoc
operator|.
name|MethodDoc
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|javadoc
operator|.
name|PackageDoc
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|javadoc
operator|.
name|ProgramElementDoc
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|javadoc
operator|.
name|RootDoc
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Process the {@link RootDoc} by substituting with (nested) proxy objects that  * exclude elements with Private or LimitedPrivate annotations.  *<p>  * Based on code from http://www.sixlegs.com/blog/java/exclude-javadoc-tag.html.  */
end_comment

begin_class
specifier|final
class|class
name|RootDocProcessor
block|{
specifier|static
name|String
name|stability
init|=
name|StabilityOptions
operator|.
name|UNSTABLE_OPTION
decl_stmt|;
specifier|static
name|boolean
name|treatUnannotatedClassesAsPrivate
init|=
literal|false
decl_stmt|;
specifier|private
name|RootDocProcessor
parameter_list|()
block|{}
specifier|public
specifier|static
name|RootDoc
name|process
parameter_list|(
name|RootDoc
name|root
parameter_list|)
block|{
return|return
operator|(
name|RootDoc
operator|)
name|process
argument_list|(
name|root
argument_list|,
name|RootDoc
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Object
name|process
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|obj
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|cls
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"com.sun."
argument_list|)
condition|)
block|{
return|return
name|getProxy
argument_list|(
name|obj
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Object
index|[]
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|componentType
init|=
name|type
operator|.
name|isArray
argument_list|()
condition|?
name|type
operator|.
name|getComponentType
argument_list|()
else|:
name|cls
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
name|Object
index|[]
name|array
init|=
operator|(
name|Object
index|[]
operator|)
name|obj
decl_stmt|;
name|Object
index|[]
name|newArray
init|=
operator|(
name|Object
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|componentType
argument_list|,
name|array
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|newArray
index|[
name|i
index|]
operator|=
name|process
argument_list|(
name|array
index|[
name|i
index|]
argument_list|,
name|componentType
argument_list|)
expr_stmt|;
block|}
return|return
name|newArray
return|;
block|}
return|return
name|obj
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|proxies
init|=
operator|new
name|WeakHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Object
name|getProxy
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|Object
name|proxy
init|=
name|proxies
operator|.
name|get
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|==
literal|null
condition|)
block|{
name|proxy
operator|=
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getInterfaces
argument_list|()
argument_list|,
operator|new
name|ExcludeHandler
argument_list|(
name|obj
argument_list|)
argument_list|)
expr_stmt|;
name|proxies
operator|.
name|put
argument_list|(
name|obj
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
return|return
name|proxy
return|;
block|}
specifier|private
specifier|static
class|class
name|ExcludeHandler
implements|implements
name|InvocationHandler
block|{
specifier|private
name|Object
name|target
decl_stmt|;
specifier|public
name|ExcludeHandler
parameter_list|(
name|Object
name|target
parameter_list|)
block|{
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|methodName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|target
operator|instanceof
name|Doc
condition|)
block|{
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"isIncluded"
argument_list|)
condition|)
block|{
name|Doc
name|doc
init|=
operator|(
name|Doc
operator|)
name|target
decl_stmt|;
return|return
operator|!
name|exclude
argument_list|(
name|doc
argument_list|)
operator|&&
name|doc
operator|.
name|isIncluded
argument_list|()
return|;
block|}
if|if
condition|(
name|target
operator|instanceof
name|RootDoc
condition|)
block|{
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"classes"
argument_list|)
condition|)
block|{
return|return
name|filter
argument_list|(
operator|(
operator|(
name|RootDoc
operator|)
name|target
operator|)
operator|.
name|classes
argument_list|()
argument_list|,
name|ClassDoc
operator|.
name|class
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"specifiedClasses"
argument_list|)
condition|)
block|{
return|return
name|filter
argument_list|(
operator|(
operator|(
name|RootDoc
operator|)
name|target
operator|)
operator|.
name|specifiedClasses
argument_list|()
argument_list|,
name|ClassDoc
operator|.
name|class
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"specifiedPackages"
argument_list|)
condition|)
block|{
return|return
name|filter
argument_list|(
operator|(
operator|(
name|RootDoc
operator|)
name|target
operator|)
operator|.
name|specifiedPackages
argument_list|()
argument_list|,
name|PackageDoc
operator|.
name|class
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|target
operator|instanceof
name|ClassDoc
condition|)
block|{
if|if
condition|(
name|isFiltered
argument_list|(
name|args
argument_list|)
condition|)
block|{
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"methods"
argument_list|)
condition|)
block|{
return|return
name|filter
argument_list|(
operator|(
operator|(
name|ClassDoc
operator|)
name|target
operator|)
operator|.
name|methods
argument_list|(
literal|true
argument_list|)
argument_list|,
name|MethodDoc
operator|.
name|class
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"fields"
argument_list|)
condition|)
block|{
return|return
name|filter
argument_list|(
operator|(
operator|(
name|ClassDoc
operator|)
name|target
operator|)
operator|.
name|fields
argument_list|(
literal|true
argument_list|)
argument_list|,
name|FieldDoc
operator|.
name|class
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"innerClasses"
argument_list|)
condition|)
block|{
return|return
name|filter
argument_list|(
operator|(
operator|(
name|ClassDoc
operator|)
name|target
operator|)
operator|.
name|innerClasses
argument_list|(
literal|true
argument_list|)
argument_list|,
name|ClassDoc
operator|.
name|class
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"constructors"
argument_list|)
condition|)
block|{
return|return
name|filter
argument_list|(
operator|(
operator|(
name|ClassDoc
operator|)
name|target
operator|)
operator|.
name|constructors
argument_list|(
literal|true
argument_list|)
argument_list|,
name|ConstructorDoc
operator|.
name|class
argument_list|)
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|target
operator|instanceof
name|PackageDoc
condition|)
block|{
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"allClasses"
argument_list|)
condition|)
block|{
if|if
condition|(
name|isFiltered
argument_list|(
name|args
argument_list|)
condition|)
block|{
return|return
name|filter
argument_list|(
operator|(
operator|(
name|PackageDoc
operator|)
name|target
operator|)
operator|.
name|allClasses
argument_list|(
literal|true
argument_list|)
argument_list|,
name|ClassDoc
operator|.
name|class
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|filter
argument_list|(
operator|(
operator|(
name|PackageDoc
operator|)
name|target
operator|)
operator|.
name|allClasses
argument_list|()
argument_list|,
name|ClassDoc
operator|.
name|class
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"annotationTypes"
argument_list|)
condition|)
block|{
return|return
name|filter
argument_list|(
operator|(
operator|(
name|PackageDoc
operator|)
name|target
operator|)
operator|.
name|annotationTypes
argument_list|()
argument_list|,
name|AnnotationTypeDoc
operator|.
name|class
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"enums"
argument_list|)
condition|)
block|{
return|return
name|filter
argument_list|(
operator|(
operator|(
name|PackageDoc
operator|)
name|target
operator|)
operator|.
name|enums
argument_list|()
argument_list|,
name|ClassDoc
operator|.
name|class
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"errors"
argument_list|)
condition|)
block|{
return|return
name|filter
argument_list|(
operator|(
operator|(
name|PackageDoc
operator|)
name|target
operator|)
operator|.
name|errors
argument_list|()
argument_list|,
name|ClassDoc
operator|.
name|class
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"exceptions"
argument_list|)
condition|)
block|{
return|return
name|filter
argument_list|(
operator|(
operator|(
name|PackageDoc
operator|)
name|target
operator|)
operator|.
name|exceptions
argument_list|()
argument_list|,
name|ClassDoc
operator|.
name|class
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"interfaces"
argument_list|)
condition|)
block|{
return|return
name|filter
argument_list|(
operator|(
operator|(
name|PackageDoc
operator|)
name|target
operator|)
operator|.
name|interfaces
argument_list|()
argument_list|,
name|ClassDoc
operator|.
name|class
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"ordinaryClasses"
argument_list|)
condition|)
block|{
return|return
name|filter
argument_list|(
operator|(
operator|(
name|PackageDoc
operator|)
name|target
operator|)
operator|.
name|ordinaryClasses
argument_list|()
argument_list|,
name|ClassDoc
operator|.
name|class
argument_list|)
return|;
block|}
block|}
block|}
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"compareTo"
argument_list|)
operator|||
name|methodName
operator|.
name|equals
argument_list|(
literal|"equals"
argument_list|)
operator|||
name|methodName
operator|.
name|equals
argument_list|(
literal|"overrides"
argument_list|)
operator|||
name|methodName
operator|.
name|equals
argument_list|(
literal|"subclassOf"
argument_list|)
condition|)
block|{
name|args
index|[
literal|0
index|]
operator|=
name|unwrap
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
return|return
name|process
argument_list|(
name|method
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
name|args
argument_list|)
argument_list|,
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getTargetException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|exclude
parameter_list|(
name|Doc
name|doc
parameter_list|)
block|{
name|AnnotationDesc
index|[]
name|annotations
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|doc
operator|instanceof
name|ProgramElementDoc
condition|)
block|{
name|annotations
operator|=
operator|(
operator|(
name|ProgramElementDoc
operator|)
name|doc
operator|)
operator|.
name|annotations
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|doc
operator|instanceof
name|PackageDoc
condition|)
block|{
name|annotations
operator|=
operator|(
operator|(
name|PackageDoc
operator|)
name|doc
operator|)
operator|.
name|annotations
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|annotations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AnnotationDesc
name|annotation
range|:
name|annotations
control|)
block|{
name|String
name|qualifiedTypeName
init|=
name|annotation
operator|.
name|annotationType
argument_list|()
operator|.
name|qualifiedTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|qualifiedTypeName
operator|.
name|equals
argument_list|(
name|InterfaceAudience
operator|.
name|Private
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
operator|||
name|qualifiedTypeName
operator|.
name|equals
argument_list|(
name|InterfaceAudience
operator|.
name|LimitedPrivate
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|stability
operator|.
name|equals
argument_list|(
name|StabilityOptions
operator|.
name|EVOLVING_OPTION
argument_list|)
condition|)
block|{
if|if
condition|(
name|qualifiedTypeName
operator|.
name|equals
argument_list|(
name|InterfaceStability
operator|.
name|Unstable
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|stability
operator|.
name|equals
argument_list|(
name|StabilityOptions
operator|.
name|STABLE_OPTION
argument_list|)
condition|)
block|{
if|if
condition|(
name|qualifiedTypeName
operator|.
name|equals
argument_list|(
name|InterfaceStability
operator|.
name|Unstable
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
operator|||
name|qualifiedTypeName
operator|.
name|equals
argument_list|(
name|InterfaceStability
operator|.
name|Evolving
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
for|for
control|(
name|AnnotationDesc
name|annotation
range|:
name|annotations
control|)
block|{
name|String
name|qualifiedTypeName
init|=
name|annotation
operator|.
name|annotationType
argument_list|()
operator|.
name|qualifiedTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|qualifiedTypeName
operator|.
name|equals
argument_list|(
name|InterfaceAudience
operator|.
name|Public
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|treatUnannotatedClassesAsPrivate
condition|)
block|{
return|return
name|doc
operator|.
name|isClass
argument_list|()
operator|||
name|doc
operator|.
name|isInterface
argument_list|()
operator|||
name|doc
operator|.
name|isAnnotationType
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|Object
index|[]
name|filter
parameter_list|(
name|Doc
index|[]
name|array
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|componentType
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
operator|||
name|array
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|array
return|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|array
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Doc
name|entry
range|:
name|array
control|)
block|{
if|if
condition|(
operator|!
name|exclude
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|process
argument_list|(
name|entry
argument_list|,
name|componentType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|componentType
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Object
name|unwrap
parameter_list|(
name|Object
name|proxy
parameter_list|)
block|{
if|if
condition|(
name|proxy
operator|instanceof
name|Proxy
condition|)
block|{
return|return
operator|(
operator|(
name|ExcludeHandler
operator|)
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|proxy
argument_list|)
operator|)
operator|.
name|target
return|;
block|}
return|return
name|proxy
return|;
block|}
specifier|private
name|boolean
name|isFiltered
parameter_list|(
name|Object
index|[]
name|args
parameter_list|)
block|{
return|return
name|args
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

