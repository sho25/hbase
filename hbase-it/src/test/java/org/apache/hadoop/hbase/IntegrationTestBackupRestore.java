begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupInfo
operator|.
name|BackupState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupRestoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|RestoreRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|BackupAdminImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|BackupManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|BackupSystemTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|chaos
operator|.
name|actions
operator|.
name|RestartRandomRsExceptMetaAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|chaos
operator|.
name|monkies
operator|.
name|PolicyBasedChaosMonkey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|chaos
operator|.
name|policies
operator|.
name|PeriodicRandomActionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|chaos
operator|.
name|policies
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IntegrationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Uninterruptibles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_comment
comment|/**  * An integration test to detect regressions in HBASE-7912. Create  * a table with many regions, load data, perform series backup/load operations,  * then restore and verify data  * @see<a href="https://issues.apache.org/jira/browse/HBASE-7912">HBASE-7912</a>  * @see<a href="https://issues.apache.org/jira/browse/HBASE-14123">HBASE-14123</a>  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|IntegrationTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|IntegrationTestBackupRestore
extends|extends
name|IntegrationTestBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
name|IntegrationTestBackupRestore
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IntegrationTestBackupRestore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|NUMBER_OF_TABLES_KEY
init|=
literal|"num_tables"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|COLUMN_NAME
init|=
literal|"f"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|REGION_COUNT_KEY
init|=
literal|"regions_per_rs"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|REGIONSERVER_COUNT_KEY
init|=
literal|"region_servers"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|ROWS_PER_ITERATION_KEY
init|=
literal|"rows_in_iteration"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|NUM_ITERATIONS_KEY
init|=
literal|"num_iterations"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_REGION_COUNT
init|=
literal|10
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_REGIONSERVER_COUNT
init|=
literal|5
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_NUMBER_OF_TABLES
init|=
literal|1
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_ITERATIONS
init|=
literal|10
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_ROWS_IN_ITERATION
init|=
literal|500000
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|SLEEP_TIME_KEY
init|=
literal|"sleeptime"
decl_stmt|;
comment|// short default interval because tests don't run very long.
specifier|protected
specifier|static
specifier|final
name|long
name|SLEEP_TIME_DEFAULT
init|=
literal|50000L
decl_stmt|;
specifier|protected
specifier|static
name|int
name|rowsInIteration
decl_stmt|;
specifier|protected
specifier|static
name|int
name|regionsCountPerServer
decl_stmt|;
specifier|protected
specifier|static
name|int
name|regionServerCount
decl_stmt|;
specifier|protected
specifier|static
name|int
name|numIterations
decl_stmt|;
specifier|protected
specifier|static
name|int
name|numTables
decl_stmt|;
specifier|protected
specifier|static
name|TableName
index|[]
name|tableNames
decl_stmt|;
specifier|protected
name|long
name|sleepTime
decl_stmt|;
specifier|protected
specifier|static
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|BACKUP_ROOT_DIR
init|=
literal|"backupIT"
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|=
operator|new
name|IntegrationTestingUtility
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|regionsCountPerServer
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|REGION_COUNT_KEY
argument_list|,
name|DEFAULT_REGION_COUNT
argument_list|)
expr_stmt|;
name|regionServerCount
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|REGIONSERVER_COUNT_KEY
argument_list|,
name|DEFAULT_REGIONSERVER_COUNT
argument_list|)
expr_stmt|;
name|rowsInIteration
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|ROWS_PER_ITERATION_KEY
argument_list|,
name|DEFAULT_ROWS_IN_ITERATION
argument_list|)
expr_stmt|;
name|numIterations
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|NUM_ITERATIONS_KEY
argument_list|,
name|DEFAULT_NUM_ITERATIONS
argument_list|)
expr_stmt|;
name|numTables
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|NUMBER_OF_TABLES_KEY
argument_list|,
name|DEFAULT_NUMBER_OF_TABLES
argument_list|)
expr_stmt|;
name|sleepTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|SLEEP_TIME_KEY
argument_list|,
name|SLEEP_TIME_DEFAULT
argument_list|)
expr_stmt|;
name|enableBackup
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing cluster with {} region servers."
argument_list|,
name|regionServerCount
argument_list|)
expr_stmt|;
name|util
operator|.
name|initializeCluster
argument_list|(
name|regionServerCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster initialized and ready"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning up after test."
argument_list|)
expr_stmt|;
if|if
condition|(
name|util
operator|.
name|isDistributedCluster
argument_list|()
condition|)
block|{
name|deleteTablesIfAny
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning up after test. Deleted tables"
argument_list|)
expr_stmt|;
name|cleanUpBackupDir
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Restoring cluster."
argument_list|)
expr_stmt|;
name|util
operator|.
name|restoreCluster
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster restored."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUpMonkey
parameter_list|()
throws|throws
name|Exception
block|{
name|Policy
name|p
init|=
operator|new
name|PeriodicRandomActionPolicy
argument_list|(
name|sleepTime
argument_list|,
operator|new
name|RestartRandomRsExceptMetaAction
argument_list|(
name|sleepTime
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|monkey
operator|=
operator|new
name|PolicyBasedChaosMonkey
argument_list|(
name|util
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|startMonkey
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|deleteTablesIfAny
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|TableName
name|table
range|:
name|tableNames
control|)
block|{
name|util
operator|.
name|deleteTableIfAny
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createTables
parameter_list|()
throws|throws
name|Exception
block|{
name|tableNames
operator|=
operator|new
name|TableName
index|[
name|numTables
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTables
condition|;
name|i
operator|++
control|)
block|{
name|tableNames
index|[
name|i
index|]
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|CLASS_NAME
operator|+
literal|".table."
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TableName
name|table
range|:
name|tableNames
control|)
block|{
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|enableBackup
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Enable backup
name|conf
operator|.
name|setBoolean
argument_list|(
name|BackupRestoreConstants
operator|.
name|BACKUP_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|BackupManager
operator|.
name|decorateMasterConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|BackupManager
operator|.
name|decorateRegionServerConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|cleanUpBackupDir
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|BACKUP_ROOT_DIR
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackupRestore
parameter_list|()
throws|throws
name|Exception
block|{
name|BACKUP_ROOT_DIR
operator|=
name|util
operator|.
name|getDataTestDirOnTestFS
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|BACKUP_ROOT_DIR
expr_stmt|;
name|createTables
argument_list|()
expr_stmt|;
name|runTestMulti
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|runTestMulti
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"IT backup& restore started"
argument_list|)
expr_stmt|;
name|Thread
index|[]
name|workers
init|=
operator|new
name|Thread
index|[
name|numTables
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTables
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|TableName
name|table
init|=
name|tableNames
index|[
name|i
index|]
decl_stmt|;
name|Runnable
name|r
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|runTestSingle
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|workers
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|workers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Wait all workers to finish
for|for
control|(
name|Thread
name|t
range|:
name|workers
control|)
block|{
name|Uninterruptibles
operator|.
name|joinUninterruptibly
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"IT backup& restore finished"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|startTime
decl_stmt|,
name|endTime
decl_stmt|;
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|TableDescriptor
name|desc
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ColumnFamilyDescriptorBuilder
name|cbuilder
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|COLUMN_NAME
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
index|[]
name|columns
init|=
operator|new
name|ColumnFamilyDescriptor
index|[]
block|{
name|cbuilder
operator|.
name|build
argument_list|()
block|}
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating table {} with {} splits."
argument_list|,
name|tableName
argument_list|,
name|regionsCountPerServer
operator|*
name|regionServerCount
argument_list|)
expr_stmt|;
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|HBaseTestingUtility
operator|.
name|createPreSplitLoadTestTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|desc
argument_list|,
name|columns
argument_list|,
name|regionsCountPerServer
argument_list|)
expr_stmt|;
name|util
operator|.
name|waitTableAvailable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|endTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Pre-split table created successfully in {}ms."
argument_list|,
operator|(
name|endTime
operator|-
name|startTime
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|loadData
parameter_list|(
name|TableName
name|table
parameter_list|,
name|int
name|numRows
parameter_list|)
throws|throws
name|IOException
block|{
name|Connection
name|conn
init|=
name|util
operator|.
name|getConnection
argument_list|()
decl_stmt|;
comment|// #0- insert some data to a table
name|Table
name|t1
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|util
operator|.
name|loadRandomRows
argument_list|(
name|t1
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'f'
block|}
argument_list|,
literal|100
argument_list|,
name|numRows
argument_list|)
expr_stmt|;
comment|// flush table
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|backup
parameter_list|(
name|BackupRequest
name|request
parameter_list|,
name|BackupAdmin
name|client
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|backupId
init|=
name|client
operator|.
name|backupTables
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|backupId
return|;
block|}
specifier|private
name|void
name|restore
parameter_list|(
name|RestoreRequest
name|request
parameter_list|,
name|BackupAdmin
name|client
parameter_list|)
throws|throws
name|IOException
block|{
name|client
operator|.
name|restore
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|merge
parameter_list|(
name|String
index|[]
name|backupIds
parameter_list|,
name|BackupAdmin
name|client
parameter_list|)
throws|throws
name|IOException
block|{
name|client
operator|.
name|mergeBackups
argument_list|(
name|backupIds
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runTestSingle
parameter_list|(
name|TableName
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|backupIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|tableSizes
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|util
operator|.
name|getConnection
argument_list|()
init|;
name|Admin
name|admin
operator|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|;
name|BackupAdmin
name|client
operator|=
operator|new
name|BackupAdminImpl
argument_list|(
name|conn
argument_list|)
init|;
init|)
block|{
comment|// #0- insert some data to table 'table'
name|loadData
argument_list|(
name|table
argument_list|,
name|rowsInIteration
argument_list|)
expr_stmt|;
name|tableSizes
operator|.
name|add
argument_list|(
name|rowsInIteration
argument_list|)
expr_stmt|;
comment|// #1 - create full backup for table first
name|LOG
operator|.
name|info
argument_list|(
literal|"create full backup image for {}"
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|BackupRequest
operator|.
name|Builder
name|builder
init|=
operator|new
name|BackupRequest
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|BackupRequest
name|request
init|=
name|builder
operator|.
name|withBackupType
argument_list|(
name|BackupType
operator|.
name|FULL
argument_list|)
operator|.
name|withTableList
argument_list|(
name|tables
argument_list|)
operator|.
name|withTargetRootDir
argument_list|(
name|BACKUP_ROOT_DIR
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|backupIdFull
init|=
name|backup
argument_list|(
name|request
argument_list|,
name|client
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checkSucceeded
argument_list|(
name|backupIdFull
argument_list|)
argument_list|)
expr_stmt|;
name|backupIds
operator|.
name|add
argument_list|(
name|backupIdFull
argument_list|)
expr_stmt|;
comment|// Now continue with incremental backups
name|int
name|count
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|count
operator|++
operator|<
name|numIterations
condition|)
block|{
comment|// Load data
name|loadData
argument_list|(
name|table
argument_list|,
name|rowsInIteration
argument_list|)
expr_stmt|;
name|tableSizes
operator|.
name|add
argument_list|(
name|rowsInIteration
operator|*
name|count
argument_list|)
expr_stmt|;
comment|// Do incremental backup
name|builder
operator|=
operator|new
name|BackupRequest
operator|.
name|Builder
argument_list|()
expr_stmt|;
name|request
operator|=
name|builder
operator|.
name|withBackupType
argument_list|(
name|BackupType
operator|.
name|INCREMENTAL
argument_list|)
operator|.
name|withTableList
argument_list|(
name|tables
argument_list|)
operator|.
name|withTargetRootDir
argument_list|(
name|BACKUP_ROOT_DIR
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|String
name|backupId
init|=
name|backup
argument_list|(
name|request
argument_list|,
name|client
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checkSucceeded
argument_list|(
name|backupId
argument_list|)
argument_list|)
expr_stmt|;
name|backupIds
operator|.
name|add
argument_list|(
name|backupId
argument_list|)
expr_stmt|;
comment|// Restore incremental backup for table, with overwrite for previous backup
name|String
name|previousBackupId
init|=
name|backupIds
operator|.
name|get
argument_list|(
name|backupIds
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
decl_stmt|;
name|restoreVerifyTable
argument_list|(
name|conn
argument_list|,
name|client
argument_list|,
name|table
argument_list|,
name|previousBackupId
argument_list|,
name|rowsInIteration
operator|*
operator|(
name|count
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|// Restore incremental backup for table, with overwrite for last backup
name|restoreVerifyTable
argument_list|(
name|conn
argument_list|,
name|client
argument_list|,
name|table
argument_list|,
name|backupId
argument_list|,
name|rowsInIteration
operator|*
name|count
argument_list|)
expr_stmt|;
block|}
comment|// Now merge all incremental and restore
name|String
index|[]
name|incBackupIds
init|=
name|allIncremental
argument_list|(
name|backupIds
argument_list|)
decl_stmt|;
name|merge
argument_list|(
name|incBackupIds
argument_list|,
name|client
argument_list|)
expr_stmt|;
comment|// Restore last one
name|String
name|backupId
init|=
name|incBackupIds
index|[
name|incBackupIds
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
comment|// restore incremental backup for table, with overwrite
name|TableName
index|[]
name|tablesRestoreIncMultiple
init|=
operator|new
name|TableName
index|[]
block|{
name|table
block|}
decl_stmt|;
name|restore
argument_list|(
name|createRestoreRequest
argument_list|(
name|BACKUP_ROOT_DIR
argument_list|,
name|backupId
argument_list|,
literal|false
argument_list|,
name|tablesRestoreIncMultiple
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|Table
name|hTable
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|util
operator|.
name|countRows
argument_list|(
name|hTable
argument_list|)
argument_list|,
name|rowsInIteration
operator|*
name|numIterations
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} loop {} finished."
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|count
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|restoreVerifyTable
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|BackupAdmin
name|client
parameter_list|,
name|TableName
name|table
parameter_list|,
name|String
name|backupId
parameter_list|,
name|long
name|expectedRows
parameter_list|)
throws|throws
name|IOException
block|{
name|TableName
index|[]
name|tablesRestoreIncMultiple
init|=
operator|new
name|TableName
index|[]
block|{
name|table
block|}
decl_stmt|;
name|restore
argument_list|(
name|createRestoreRequest
argument_list|(
name|BACKUP_ROOT_DIR
argument_list|,
name|backupId
argument_list|,
literal|false
argument_list|,
name|tablesRestoreIncMultiple
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|Table
name|hTable
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRows
argument_list|,
name|util
operator|.
name|countRows
argument_list|(
name|hTable
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
index|[]
name|allIncremental
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|backupIds
parameter_list|)
block|{
name|int
name|size
init|=
name|backupIds
operator|.
name|size
argument_list|()
decl_stmt|;
name|backupIds
operator|=
name|backupIds
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|String
index|[]
name|arr
init|=
operator|new
name|String
index|[
name|size
operator|-
literal|1
index|]
decl_stmt|;
name|backupIds
operator|.
name|toArray
argument_list|(
name|arr
argument_list|)
expr_stmt|;
return|return
name|arr
return|;
block|}
comment|/**    *    * @param backupId pass backup ID to check status of    * @return status of backup    */
specifier|protected
name|boolean
name|checkSucceeded
parameter_list|(
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
name|BackupInfo
name|status
init|=
name|getBackupInfo
argument_list|(
name|backupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|status
operator|.
name|getState
argument_list|()
operator|==
name|BackupState
operator|.
name|COMPLETE
return|;
block|}
specifier|private
name|BackupInfo
name|getBackupInfo
parameter_list|(
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|util
operator|.
name|getConnection
argument_list|()
argument_list|)
init|)
block|{
return|return
name|table
operator|.
name|readBackupInfo
argument_list|(
name|backupId
argument_list|)
return|;
block|}
block|}
comment|/**    * Get restore request.    *    * @param backupRootDir directory where backup is located    * @param backupId backup ID    * @param check check the backup    * @param fromTables table names to restore from    * @param toTables new table names to restore to    * @param isOverwrite overwrite the table(s)    * @return an instance of RestoreRequest    */
specifier|public
name|RestoreRequest
name|createRestoreRequest
parameter_list|(
name|String
name|backupRootDir
parameter_list|,
name|String
name|backupId
parameter_list|,
name|boolean
name|check
parameter_list|,
name|TableName
index|[]
name|fromTables
parameter_list|,
name|TableName
index|[]
name|toTables
parameter_list|,
name|boolean
name|isOverwrite
parameter_list|)
block|{
name|RestoreRequest
operator|.
name|Builder
name|builder
init|=
operator|new
name|RestoreRequest
operator|.
name|Builder
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|withBackupRootDir
argument_list|(
name|backupRootDir
argument_list|)
operator|.
name|withBackupId
argument_list|(
name|backupId
argument_list|)
operator|.
name|withCheck
argument_list|(
name|check
argument_list|)
operator|.
name|withFromTables
argument_list|(
name|fromTables
argument_list|)
operator|.
name|withToTables
argument_list|(
name|toTables
argument_list|)
operator|.
name|withOvewrite
argument_list|(
name|isOverwrite
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUpCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|=
name|getTestingUtil
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|enableBackup
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initializing/checking cluster has {} servers"
argument_list|,
name|regionServerCount
argument_list|)
expr_stmt|;
name|util
operator|.
name|initializeCluster
argument_list|(
name|regionServerCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done initializing/checking cluster"
argument_list|)
expr_stmt|;
block|}
comment|/**    *    * @return status of CLI execution    */
annotation|@
name|Override
specifier|public
name|int
name|runTestFromCommandLine
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check if backup is enabled
if|if
condition|(
operator|!
name|BackupManager
operator|.
name|isBackupEnabled
argument_list|(
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|BackupRestoreConstants
operator|.
name|ENABLE_BACKUP
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|BackupRestoreConstants
operator|.
name|VERIFY_BACKUP
argument_list|)
expr_stmt|;
name|testBackupRestore
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getTablename
parameter_list|()
block|{
comment|// That is only valid when Monkey is CALM (no monkey)
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getColumnFamilies
parameter_list|()
block|{
comment|// That is only valid when Monkey is CALM (no monkey)
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addOptions
parameter_list|()
block|{
name|addOptWithArg
argument_list|(
name|REGIONSERVER_COUNT_KEY
argument_list|,
literal|"Total number of region servers. Default: '"
operator|+
name|DEFAULT_REGIONSERVER_COUNT
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|REGION_COUNT_KEY
argument_list|,
literal|"Total number of regions. Default: "
operator|+
name|DEFAULT_REGION_COUNT
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|ROWS_PER_ITERATION_KEY
argument_list|,
literal|"Total number of data rows to be loaded during one iteration."
operator|+
literal|" Default: "
operator|+
name|DEFAULT_ROWS_IN_ITERATION
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|NUM_ITERATIONS_KEY
argument_list|,
literal|"Total number iterations."
operator|+
literal|" Default: "
operator|+
name|DEFAULT_NUM_ITERATIONS
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|NUMBER_OF_TABLES_KEY
argument_list|,
literal|"Total number of tables in the test."
operator|+
literal|" Default: "
operator|+
name|DEFAULT_NUMBER_OF_TABLES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
block|{
name|super
operator|.
name|processOptions
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|regionsCountPerServer
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|REGION_COUNT_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|DEFAULT_REGION_COUNT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|regionServerCount
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|REGIONSERVER_COUNT_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|DEFAULT_REGIONSERVER_COUNT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rowsInIteration
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|ROWS_PER_ITERATION_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|DEFAULT_ROWS_IN_ITERATION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|numIterations
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|NUM_ITERATIONS_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|DEFAULT_NUM_ITERATIONS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|numTables
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|NUMBER_OF_TABLES_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|DEFAULT_NUMBER_OF_TABLES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|MoreObjects
operator|.
name|toStringHelper
argument_list|(
literal|"Parsed Options"
argument_list|)
operator|.
name|add
argument_list|(
name|REGION_COUNT_KEY
argument_list|,
name|regionsCountPerServer
argument_list|)
operator|.
name|add
argument_list|(
name|REGIONSERVER_COUNT_KEY
argument_list|,
name|regionServerCount
argument_list|)
operator|.
name|add
argument_list|(
name|ROWS_PER_ITERATION_KEY
argument_list|,
name|rowsInIteration
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    *    * @param args argument list    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|IntegrationTestingUtility
operator|.
name|setUseDistributedCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|IntegrationTestBackupRestore
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

