begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|chaos
operator|.
name|factories
operator|.
name|MonkeyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|BufferedMutator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|BufferedMutatorParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|Import
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableMapReduceUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessControlClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|Authorizations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|CellVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IntegrationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|AbstractHBaseTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|CounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|TextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * IT test used to verify the deletes with visibility labels.  * The test creates three tables tablename_0, tablename_1 and tablename_2 and each table  * is associated with a unique pair of labels.  * Another common table with the name 'commontable' is created and it has the data combined  * from all these 3 tables such that there are 3 versions of every row but the visibility label  * in every row corresponds to the table from which the row originated.  * Then deletes are issued to the common table by selecting the visibility label  * associated with each of the smaller tables.  * After the delete is issued with one set of visibility labels we try to scan the common table  * with each of the visibility pairs defined for the 3 tables.  * So after the first delete is issued, a scan with the first set of visibility labels would  * return zero result whereas the scan issued with the other two sets of visibility labels  * should return all the rows corresponding to that set of visibility labels.  The above  * process of delete and scan is repeated until after the last set of visibility labels are  * used for the deletes the common table should not return any row.  *  * To use this  * ./hbase org.apache.hadoop.hbase.test.IntegrationTestBigLinkedListWithVisibility Loop 1 1 20000 /tmp 1 10000  * or  * ./hbase org.apache.hadoop.hbase.IntegrationTestsDriver -r .*IntegrationTestBigLinkedListWithVisibility.*  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|IntegrationTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|IntegrationTestBigLinkedListWithVisibility
extends|extends
name|IntegrationTestBigLinkedList
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CONFIDENTIAL
init|=
literal|"confidential"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOPSECRET
init|=
literal|"topsecret"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SECRET
init|=
literal|"secret"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PUBLIC
init|=
literal|"public"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PRIVATE
init|=
literal|"private"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EVERYONE
init|=
literal|"everyone"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RESTRICTED
init|=
literal|"restricted"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GROUP
init|=
literal|"group"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PREVILIGED
init|=
literal|"previliged"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPEN
init|=
literal|"open"
decl_stmt|;
specifier|public
specifier|static
name|String
name|labels
init|=
name|CONFIDENTIAL
operator|+
literal|","
operator|+
name|TOPSECRET
operator|+
literal|","
operator|+
name|SECRET
operator|+
literal|","
operator|+
name|RESTRICTED
operator|+
literal|","
operator|+
name|PRIVATE
operator|+
literal|","
operator|+
name|PREVILIGED
operator|+
literal|","
operator|+
name|GROUP
operator|+
literal|","
operator|+
name|OPEN
operator|+
literal|","
operator|+
name|PUBLIC
operator|+
literal|","
operator|+
name|EVERYONE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COMMA
init|=
literal|","
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UNDER_SCORE
init|=
literal|"_"
decl_stmt|;
specifier|public
specifier|static
name|int
name|DEFAULT_TABLES_COUNT
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
name|String
name|tableName
init|=
literal|"tableName"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_TABLE_NAME
init|=
literal|"commontable"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LABELS_KEY
init|=
literal|"LABELS"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_KEY
init|=
literal|"INDEX"
decl_stmt|;
specifier|private
specifier|static
name|User
name|USER
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OR
init|=
literal|"|"
decl_stmt|;
specifier|private
specifier|static
name|String
name|USER_OPT
init|=
literal|"user"
decl_stmt|;
specifier|private
specifier|static
name|String
name|userName
init|=
literal|"user1"
decl_stmt|;
specifier|static
class|class
name|VisibilityGenerator
extends|extends
name|Generator
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VisibilityGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|createSchema
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating tables"
argument_list|)
expr_stmt|;
comment|// Create three tables
name|boolean
name|acl
init|=
name|AccessControlClient
operator|.
name|isAccessControllerRunning
argument_list|(
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|acl
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No ACL available."
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|getConf
argument_list|()
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_TABLES_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|TableName
name|tableName
init|=
name|IntegrationTestBigLinkedListWithVisibility
operator|.
name|getTableName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|createTable
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|COMMON_TABLE_NAME
argument_list|)
decl_stmt|;
name|createTable
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createTable
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|boolean
name|setVersion
parameter_list|,
name|boolean
name|acl
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|family
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|setVersion
condition|)
block|{
name|family
operator|.
name|setMaxVersions
argument_list|(
name|DEFAULT_TABLES_COUNT
argument_list|)
expr_stmt|;
block|}
name|htd
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
if|if
condition|(
name|acl
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Granting permissions for user "
operator|+
name|USER
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|Permission
operator|.
name|Action
index|[]
name|actions
init|=
block|{
name|Permission
operator|.
name|Action
operator|.
name|READ
block|}
decl_stmt|;
try|try
block|{
name|AccessControlClient
operator|.
name|grant
argument_list|(
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|tableName
argument_list|,
name|USER
operator|.
name|getShortName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Error in granting permission for the user "
operator|+
name|USER
operator|.
name|getShortName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setMapperForGenerator
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
name|job
operator|.
name|setMapperClass
argument_list|(
name|VisibilityGeneratorMapper
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|VisibilityGeneratorMapper
extends|extends
name|GeneratorMapper
block|{
name|BufferedMutator
index|[]
name|tables
init|=
operator|new
name|BufferedMutator
index|[
name|DEFAULT_TABLES_COUNT
index|]
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setup
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
operator|.
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|instantiateHTable
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_TABLES_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|BufferedMutatorParams
name|params
init|=
operator|new
name|BufferedMutatorParams
argument_list|(
name|getTableName
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|params
operator|.
name|writeBufferSize
argument_list|(
literal|4
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|BufferedMutator
name|table
init|=
name|connection
operator|.
name|getBufferedMutator
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|this
operator|.
name|tables
index|[
name|i
index|]
operator|=
name|table
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|cleanup
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
operator|.
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_TABLES_COUNT
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|tables
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|tables
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|persist
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
operator|.
name|Context
name|output
parameter_list|,
name|long
name|count
parameter_list|,
name|byte
index|[]
index|[]
name|prev
parameter_list|,
name|byte
index|[]
index|[]
name|current
parameter_list|,
name|byte
index|[]
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|visibilityExps
init|=
literal|""
decl_stmt|;
name|String
index|[]
name|split
init|=
name|labels
operator|.
name|split
argument_list|(
name|COMMA
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|current
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|DEFAULT_TABLES_COUNT
condition|;
name|j
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|current
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAMILY_NAME
argument_list|,
name|COLUMN_PREV
argument_list|,
name|prev
operator|==
literal|null
condition|?
name|NO_KEY
else|:
name|prev
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|>=
literal|0
condition|)
block|{
name|put
operator|.
name|add
argument_list|(
name|FAMILY_NAME
argument_list|,
name|COLUMN_COUNT
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|count
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|put
operator|.
name|add
argument_list|(
name|FAMILY_NAME
argument_list|,
name|COLUMN_CLIENT
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|visibilityExps
operator|=
name|split
index|[
name|j
operator|*
literal|2
index|]
operator|+
name|OR
operator|+
name|split
index|[
operator|(
name|j
operator|*
literal|2
operator|)
operator|+
literal|1
index|]
expr_stmt|;
name|put
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|CellVisibility
argument_list|(
name|visibilityExps
argument_list|)
argument_list|)
expr_stmt|;
name|tables
index|[
name|j
index|]
operator|.
name|mutate
argument_list|(
name|put
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
block|}
if|if
condition|(
name|i
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
comment|// Tickle progress every so often else maprunner will think us hung
name|output
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|static
class|class
name|Copier
extends|extends
name|Configured
implements|implements
name|Tool
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Copier
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TableName
name|tableName
decl_stmt|;
specifier|private
name|int
name|labelIndex
decl_stmt|;
specifier|private
name|boolean
name|delete
decl_stmt|;
specifier|public
name|Copier
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|int
name|index
parameter_list|,
name|boolean
name|delete
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|labelIndex
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|delete
operator|=
name|delete
expr_stmt|;
block|}
specifier|public
name|int
name|runCopier
parameter_list|(
name|String
name|outputDir
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
literal|null
decl_stmt|;
name|Scan
name|scan
init|=
literal|null
decl_stmt|;
name|job
operator|=
operator|new
name|Job
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"Data copier"
argument_list|)
expr_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"INDEX"
argument_list|,
name|labelIndex
argument_list|)
expr_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"LABELS"
argument_list|,
name|labels
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setCacheBlocks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|split
init|=
name|labels
operator|.
name|split
argument_list|(
name|COMMA
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setAuthorizations
argument_list|(
operator|new
name|Authorizations
argument_list|(
name|split
index|[
name|this
operator|.
name|labelIndex
operator|*
literal|2
index|]
argument_list|,
name|split
index|[
operator|(
name|this
operator|.
name|labelIndex
operator|*
literal|2
operator|)
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|delete
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running deletes"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running copiers"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delete
condition|)
block|{
name|TableMapReduceUtil
operator|.
name|initTableMapperJob
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|scan
argument_list|,
name|VisibilityDeleteImport
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TableMapReduceUtil
operator|.
name|initTableMapperJob
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|scan
argument_list|,
name|VisibilityImport
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"mapreduce.map.speculative"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"mapreduce.reduce.speculative"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|initTableReducerJob
argument_list|(
name|COMMON_TABLE_NAME
argument_list|,
literal|null
argument_list|,
name|job
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|addDependencyJars
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|addDependencyJars
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|AbstractHBaseTool
operator|.
name|class
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|initCredentials
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
return|return
name|success
condition|?
literal|0
else|:
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|arg0
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
block|}
specifier|static
class|class
name|VisibilityImport
extends|extends
name|Import
operator|.
name|Importer
block|{
specifier|private
name|int
name|index
decl_stmt|;
specifier|private
name|String
name|labels
decl_stmt|;
specifier|private
name|String
index|[]
name|split
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
operator|.
name|Context
name|context
parameter_list|)
block|{
name|index
operator|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|INDEX_KEY
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|labels
operator|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|LABELS_KEY
argument_list|)
expr_stmt|;
name|split
operator|=
name|labels
operator|.
name|split
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|super
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addPutToKv
parameter_list|(
name|Put
name|put
parameter_list|,
name|Cell
name|kv
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|visibilityExps
init|=
name|split
index|[
name|index
operator|*
literal|2
index|]
operator|+
name|OR
operator|+
name|split
index|[
operator|(
name|index
operator|*
literal|2
operator|)
operator|+
literal|1
index|]
decl_stmt|;
name|put
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|CellVisibility
argument_list|(
name|visibilityExps
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|addPutToKv
argument_list|(
name|put
argument_list|,
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|VisibilityDeleteImport
extends|extends
name|Import
operator|.
name|Importer
block|{
specifier|private
name|int
name|index
decl_stmt|;
specifier|private
name|String
name|labels
decl_stmt|;
specifier|private
name|String
index|[]
name|split
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
operator|.
name|Context
name|context
parameter_list|)
block|{
name|index
operator|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|INDEX_KEY
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|labels
operator|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|LABELS_KEY
argument_list|)
expr_stmt|;
name|split
operator|=
name|labels
operator|.
name|split
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|super
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|// Creating delete here
annotation|@
name|Override
specifier|protected
name|void
name|processKV
parameter_list|(
name|ImmutableBytesWritable
name|key
parameter_list|,
name|Result
name|result
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
operator|.
name|Context
name|context
parameter_list|,
name|Put
name|put
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|visibilityExps
init|=
name|split
index|[
name|index
operator|*
literal|2
index|]
operator|+
name|OR
operator|+
name|split
index|[
operator|(
name|index
operator|*
literal|2
operator|)
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|result
operator|.
name|rawCells
argument_list|()
control|)
block|{
comment|// skip if we filter it out
if|if
condition|(
name|kv
operator|==
literal|null
condition|)
continue|continue;
comment|// Create deletes here
if|if
condition|(
name|delete
operator|==
literal|null
condition|)
block|{
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|key
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|delete
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|CellVisibility
argument_list|(
name|visibilityExps
argument_list|)
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delete
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addOptions
parameter_list|()
block|{
name|super
operator|.
name|addOptions
argument_list|()
expr_stmt|;
name|addOptWithArg
argument_list|(
literal|"u"
argument_list|,
name|USER_OPT
argument_list|,
literal|"User name"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
block|{
name|super
operator|.
name|processOptions
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|USER_OPT
argument_list|)
condition|)
block|{
name|userName
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|USER_OPT
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUpCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|=
name|getTestingUtil
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HFile
operator|.
name|FORMAT_VERSION_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.coprocessor.master.classes"
argument_list|,
name|VisibilityController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.coprocessor.region.classes"
argument_list|,
name|VisibilityController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.superuser"
argument_list|,
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.permissions"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|USER
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
name|userName
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUpCluster
argument_list|()
expr_stmt|;
name|addLabels
argument_list|()
expr_stmt|;
block|}
specifier|static
name|TableName
name|getTableName
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|+
name|UNDER_SCORE
operator|+
name|i
argument_list|)
return|;
block|}
specifier|private
name|void
name|addLabels
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|VisibilityClient
operator|.
name|addLabels
argument_list|(
name|util
operator|.
name|getConnection
argument_list|()
argument_list|,
name|labels
operator|.
name|split
argument_list|(
name|COMMA
argument_list|)
argument_list|)
expr_stmt|;
name|VisibilityClient
operator|.
name|setAuths
argument_list|(
name|util
operator|.
name|getConnection
argument_list|()
argument_list|,
name|labels
operator|.
name|split
argument_list|(
name|COMMA
argument_list|)
argument_list|,
name|USER
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
specifier|static
class|class
name|VisibilityVerify
extends|extends
name|Verify
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VisibilityVerify
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TableName
name|tableName
decl_stmt|;
specifier|private
name|int
name|labelIndex
decl_stmt|;
specifier|public
name|VisibilityVerify
parameter_list|(
name|String
name|tableName
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|labelIndex
operator|=
name|index
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
specifier|final
name|Path
name|outputDir
parameter_list|,
specifier|final
name|int
name|numReducers
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running Verify with outputDir="
operator|+
name|outputDir
operator|+
literal|", numReducers="
operator|+
name|numReducers
argument_list|)
expr_stmt|;
name|PrivilegedExceptionAction
argument_list|<
name|Integer
argument_list|>
name|scanAction
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|doVerify
argument_list|(
name|outputDir
argument_list|,
name|numReducers
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|USER
operator|.
name|runAs
argument_list|(
name|scanAction
argument_list|)
return|;
block|}
specifier|private
name|int
name|doVerify
parameter_list|(
name|Path
name|outputDir
parameter_list|,
name|int
name|numReducers
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|job
operator|=
operator|new
name|Job
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"Link Verifier"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
name|numReducers
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|setJobScannerConf
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|COLUMN_PREV
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCacheBlocks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
index|[]
name|split
init|=
name|labels
operator|.
name|split
argument_list|(
name|COMMA
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setAuthorizations
argument_list|(
operator|new
name|Authorizations
argument_list|(
name|split
index|[
name|this
operator|.
name|labelIndex
operator|*
literal|2
index|]
argument_list|,
name|split
index|[
operator|(
name|this
operator|.
name|labelIndex
operator|*
literal|2
operator|)
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|initTableMapperJob
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|,
name|scan
argument_list|,
name|VerifyMapper
operator|.
name|class
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|addDependencyJars
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|AbstractHBaseTool
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"mapreduce.map.speculative"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|VerifyReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|TextOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
return|return
name|success
condition|?
literal|0
else|:
literal|1
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|handleFailure
parameter_list|(
name|Counters
name|counters
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|HConnection
name|conn
init|=
operator|(
name|HConnection
operator|)
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|COMMON_TABLE_NAME
argument_list|)
decl_stmt|;
name|CounterGroup
name|g
init|=
name|counters
operator|.
name|getGroup
argument_list|(
literal|"undef"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Counter
argument_list|>
name|it
init|=
name|g
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|keyString
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keyString
argument_list|)
decl_stmt|;
name|HRegionLocation
name|loc
init|=
name|conn
operator|.
name|relocateRegion
argument_list|(
name|tableName
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"undefined row "
operator|+
name|keyString
operator|+
literal|", "
operator|+
name|loc
argument_list|)
expr_stmt|;
block|}
name|g
operator|=
name|counters
operator|.
name|getGroup
argument_list|(
literal|"unref"
argument_list|)
expr_stmt|;
name|it
operator|=
name|g
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|keyString
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keyString
argument_list|)
decl_stmt|;
name|HRegionLocation
name|loc
init|=
name|conn
operator|.
name|relocateRegion
argument_list|(
name|tableName
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"unreferred row "
operator|+
name|keyString
operator|+
literal|", "
operator|+
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|VisibilityLoop
extends|extends
name|Loop
block|{
specifier|private
specifier|static
specifier|final
name|int
name|SLEEP_IN_MS
init|=
literal|5000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VisibilityLoop
operator|.
name|class
argument_list|)
decl_stmt|;
name|IntegrationTestBigLinkedListWithVisibility
name|it
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|runGenerator
parameter_list|(
name|int
name|numMappers
parameter_list|,
name|long
name|numNodes
parameter_list|,
name|String
name|outputDir
parameter_list|,
name|Integer
name|width
parameter_list|,
name|Integer
name|wrapMuplitplier
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|outputPath
init|=
operator|new
name|Path
argument_list|(
name|outputDir
argument_list|)
decl_stmt|;
name|UUID
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
comment|// create a random UUID.
name|Path
name|generatorOutput
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|uuid
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Generator
name|generator
init|=
operator|new
name|VisibilityGenerator
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|retCode
init|=
name|generator
operator|.
name|run
argument_list|(
name|numMappers
argument_list|,
name|numNodes
argument_list|,
name|generatorOutput
argument_list|,
name|width
argument_list|,
name|wrapMuplitplier
argument_list|)
decl_stmt|;
if|if
condition|(
name|retCode
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Generator failed with return code: "
operator|+
name|retCode
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|runDelete
parameter_list|(
name|int
name|numMappers
parameter_list|,
name|long
name|numNodes
parameter_list|,
name|String
name|outputDir
parameter_list|,
name|Integer
name|width
parameter_list|,
name|Integer
name|wrapMuplitplier
parameter_list|,
name|int
name|tableIndex
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running copier on table "
operator|+
name|IntegrationTestBigLinkedListWithVisibility
operator|.
name|getTableName
argument_list|(
name|tableIndex
argument_list|)
argument_list|)
expr_stmt|;
name|Copier
name|copier
init|=
operator|new
name|Copier
argument_list|(
name|IntegrationTestBigLinkedListWithVisibility
operator|.
name|getTableName
argument_list|(
name|tableIndex
argument_list|)
argument_list|,
name|tableIndex
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|copier
operator|.
name|setConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|copier
operator|.
name|runCopier
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_IN_MS
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|runVerify
parameter_list|(
name|String
name|outputDir
parameter_list|,
name|int
name|numReducers
parameter_list|,
name|long
name|expectedNumNodes
parameter_list|,
name|boolean
name|allTables
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|outputPath
init|=
operator|new
name|Path
argument_list|(
name|outputDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|allTables
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_TABLES_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying table "
operator|+
name|i
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
name|SLEEP_IN_MS
argument_list|)
expr_stmt|;
name|UUID
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
comment|// create a random UUID.
name|Path
name|iterationOutput
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|uuid
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Verify
name|verify
init|=
operator|new
name|VisibilityVerify
argument_list|(
name|getTableName
argument_list|(
name|i
argument_list|)
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|numReducers
argument_list|,
name|expectedNumNodes
argument_list|,
name|iterationOutput
argument_list|,
name|verify
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_TABLES_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|runVerifyCommonTable
argument_list|(
name|outputDir
argument_list|,
name|numReducers
argument_list|,
name|expectedNumNodes
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|runVerify
parameter_list|(
name|String
name|outputDir
parameter_list|,
name|int
name|numReducers
parameter_list|,
name|long
name|expectedNodes
parameter_list|,
name|int
name|tableIndex
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|temp
init|=
name|expectedNodes
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_TABLES_COUNT
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<=
name|tableIndex
condition|)
block|{
name|expectedNodes
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|expectedNodes
operator|=
name|temp
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying data in the table with index "
operator|+
name|i
operator|+
literal|" and expected nodes is "
operator|+
name|expectedNodes
argument_list|)
expr_stmt|;
name|runVerifyCommonTable
argument_list|(
name|outputDir
argument_list|,
name|numReducers
argument_list|,
name|expectedNodes
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|sleep
parameter_list|(
name|long
name|ms
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|ms
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|runVerifyCommonTable
parameter_list|(
name|String
name|outputDir
parameter_list|,
name|int
name|numReducers
parameter_list|,
name|long
name|expectedNumNodes
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying common table with index "
operator|+
name|index
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
name|SLEEP_IN_MS
argument_list|)
expr_stmt|;
name|Path
name|outputPath
init|=
operator|new
name|Path
argument_list|(
name|outputDir
argument_list|)
decl_stmt|;
name|UUID
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
comment|// create a random UUID.
name|Path
name|iterationOutput
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|,
name|uuid
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Verify
name|verify
init|=
operator|new
name|VisibilityVerify
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|COMMON_TABLE_NAME
argument_list|)
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|numReducers
argument_list|,
name|expectedNumNodes
argument_list|,
name|iterationOutput
argument_list|,
name|verify
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|runCopier
parameter_list|(
name|String
name|outputDir
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_TABLES_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running copier "
operator|+
name|IntegrationTestBigLinkedListWithVisibility
operator|.
name|getTableName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
name|SLEEP_IN_MS
argument_list|)
expr_stmt|;
name|Copier
name|copier
init|=
operator|new
name|Copier
argument_list|(
name|IntegrationTestBigLinkedListWithVisibility
operator|.
name|getTableName
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|copier
operator|.
name|setConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|copier
operator|.
name|runCopier
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verify
parameter_list|(
name|int
name|numReducers
parameter_list|,
name|long
name|expectedNumNodes
parameter_list|,
name|Path
name|iterationOutput
parameter_list|,
name|Verify
name|verify
parameter_list|)
throws|throws
name|Exception
block|{
name|verify
operator|.
name|setConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|retCode
init|=
name|verify
operator|.
name|run
argument_list|(
name|iterationOutput
argument_list|,
name|numReducers
argument_list|)
decl_stmt|;
if|if
condition|(
name|retCode
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Verify.run failed with return code: "
operator|+
name|retCode
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|verify
operator|.
name|verify
argument_list|(
name|expectedNumNodes
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Verify.verify failed"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Verify finished with succees. Total nodes="
operator|+
name|expectedNumNodes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|5
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: Loop<num iterations> "
operator|+
literal|"<num mappers><num nodes per mapper><output dir> "
operator|+
literal|"<num reducers> [<width><wrap multiplier>]"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Running Loop with args:"
operator|+
name|Arrays
operator|.
name|deepToString
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numIterations
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|numMappers
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|long
name|numNodes
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|String
name|outputDir
init|=
name|args
index|[
literal|3
index|]
decl_stmt|;
name|int
name|numReducers
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|4
index|]
argument_list|)
decl_stmt|;
name|Integer
name|width
init|=
operator|(
name|args
operator|.
name|length
operator|<
literal|6
operator|)
condition|?
literal|null
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|5
index|]
argument_list|)
decl_stmt|;
name|Integer
name|wrapMuplitplier
init|=
operator|(
name|args
operator|.
name|length
operator|<
literal|7
operator|)
condition|?
literal|null
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|6
index|]
argument_list|)
decl_stmt|;
name|long
name|expectedNumNodes
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|numIterations
operator|<
literal|0
condition|)
block|{
name|numIterations
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
comment|// run indefinitely (kind of)
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting iteration = "
operator|+
name|i
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Generating data"
argument_list|)
expr_stmt|;
name|runGenerator
argument_list|(
name|numMappers
argument_list|,
name|numNodes
argument_list|,
name|outputDir
argument_list|,
name|width
argument_list|,
name|wrapMuplitplier
argument_list|)
expr_stmt|;
name|expectedNumNodes
operator|+=
name|numMappers
operator|*
name|numNodes
expr_stmt|;
comment|// Copying wont work because expressions are not returned back to the
comment|// client
name|LOG
operator|.
name|info
argument_list|(
literal|"Running copier"
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
name|SLEEP_IN_MS
argument_list|)
expr_stmt|;
name|runCopier
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying copied data"
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
name|SLEEP_IN_MS
argument_list|)
expr_stmt|;
name|runVerify
argument_list|(
name|outputDir
argument_list|,
name|numReducers
argument_list|,
name|expectedNumNodes
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
name|SLEEP_IN_MS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|DEFAULT_TABLES_COUNT
condition|;
name|j
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting data on table with index: "
operator|+
name|j
argument_list|)
expr_stmt|;
name|runDelete
argument_list|(
name|numMappers
argument_list|,
name|numNodes
argument_list|,
name|outputDir
argument_list|,
name|width
argument_list|,
name|wrapMuplitplier
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
name|SLEEP_IN_MS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying common table after deleting"
argument_list|)
expr_stmt|;
name|runVerify
argument_list|(
name|outputDir
argument_list|,
name|numReducers
argument_list|,
name|expectedNumNodes
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
name|SLEEP_IN_MS
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Test
specifier|public
name|void
name|testContinuousIngest
parameter_list|()
throws|throws
name|IOException
throws|,
name|Exception
block|{
comment|// Loop<num iterations><num mappers><num nodes per mapper><output dir>
comment|//<num reducers>
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|getTestingUtil
argument_list|(
name|getConf
argument_list|()
argument_list|)
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|VisibilityLoop
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"1"
block|,
literal|"20000"
block|,
name|util
operator|.
name|getDataTestDirOnTestFS
argument_list|(
literal|"IntegrationTestBigLinkedListWithVisibility"
argument_list|)
operator|.
name|toString
argument_list|()
block|,
literal|"1"
block|,
literal|"10000"
block|}
argument_list|)
decl_stmt|;
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|IntegrationTestingUtility
operator|.
name|setUseDistributedCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|IntegrationTestBigLinkedListWithVisibility
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|MonkeyFactory
name|getDefaultMonkeyFactory
parameter_list|()
block|{
return|return
name|MonkeyFactory
operator|.
name|getFactory
argument_list|(
name|MonkeyFactory
operator|.
name|CALM
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|runTestFromCommandLine
parameter_list|()
throws|throws
name|Exception
block|{
name|Tool
name|tool
init|=
literal|null
decl_stmt|;
name|Loop
name|loop
init|=
operator|new
name|VisibilityLoop
argument_list|()
decl_stmt|;
name|loop
operator|.
name|it
operator|=
name|this
expr_stmt|;
name|tool
operator|=
name|loop
expr_stmt|;
return|return
name|ToolRunner
operator|.
name|run
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|tool
argument_list|,
name|otherArgs
argument_list|)
return|;
block|}
block|}
end_class

end_unit

