begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
operator|.
name|TimeToLiveHFileCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|FaultyMobStoreCompactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobFileCleanerChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobStoreEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IntegrationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_comment
comment|/**  * An integration test to detect regressions in HBASE-22749. Test creates  * MOB-enabled table, and runs in parallel, the following tasks: loads data,  * runs MOB compactions, runs MOB cleaning chore. The failure injections into MOB  * compaction cycle is implemented via specific sub-class of DefaultMobStoreCompactor -  * FaultyMobStoreCompactor. The probability of failure is controlled by command-line  * argument 'failprob'.  * @see<a href="https://issues.apache.org/jira/browse/HBASE-22749">HBASE-22749</a>  *<p>  *   Sample usage:  *<pre>  * hbase org.apache.hadoop.hbase.IntegrationTestMobCompaction -Dservers=10 -Drows=1000000  * -Dfailprob=0.2  *</pre>  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Category
argument_list|(
name|IntegrationTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|IntegrationTestMobCompaction
extends|extends
name|IntegrationTestBase
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IntegrationTestMobCompaction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|REGIONSERVER_COUNT_KEY
init|=
literal|"servers"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|ROWS_COUNT_KEY
init|=
literal|"rows"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|FAILURE_PROB_KEY
init|=
literal|"failprob"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_REGIONSERVER_COUNT
init|=
literal|3
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_ROWS_COUNT
init|=
literal|5000000
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|double
name|DEFAULT_FAILURE_PROB
init|=
literal|0.1
decl_stmt|;
specifier|protected
specifier|static
name|int
name|regionServerCount
init|=
name|DEFAULT_REGIONSERVER_COUNT
decl_stmt|;
specifier|protected
specifier|static
name|long
name|rowsToLoad
init|=
name|DEFAULT_ROWS_COUNT
decl_stmt|;
specifier|protected
specifier|static
name|double
name|failureProb
init|=
name|DEFAULT_FAILURE_PROB
decl_stmt|;
specifier|protected
specifier|static
name|String
name|famStr
init|=
literal|"f1"
decl_stmt|;
specifier|protected
specifier|static
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|famStr
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|long
name|mobLen
init|=
literal|10
decl_stmt|;
specifier|protected
specifier|static
name|byte
index|[]
name|mobVal
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"01234567890123456789012345678901234567890123456789012345678901234567890123456789"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|HTableDescriptor
name|hdt
decl_stmt|;
specifier|private
specifier|static
name|HColumnDescriptor
name|hcd
decl_stmt|;
specifier|private
specifier|static
name|Admin
name|admin
decl_stmt|;
specifier|private
specifier|static
name|Table
name|table
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|MobFileCleanerChore
name|chore
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|boolean
name|run
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|=
name|getTestingUtil
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|=
name|util
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
comment|// Initialize with test-specific configuration values
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|regionServerCount
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|REGIONSERVER_COUNT_KEY
argument_list|,
name|DEFAULT_REGIONSERVER_COUNT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing cluster with {} region servers."
argument_list|,
name|regionServerCount
argument_list|)
expr_stmt|;
name|util
operator|.
name|initializeCluster
argument_list|(
name|regionServerCount
argument_list|)
expr_stmt|;
name|admin
operator|=
name|util
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|createTestTable
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster initialized and ready"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createTestTable
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create test table
name|hdt
operator|=
name|util
operator|.
name|createTableDescriptor
argument_list|(
literal|"testMobCompactTable"
argument_list|)
expr_stmt|;
name|hcd
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobThreshold
argument_list|(
name|mobLen
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hdt
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|table
operator|=
name|util
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning up after test."
argument_list|)
expr_stmt|;
if|if
condition|(
name|util
operator|.
name|isDistributedCluster
argument_list|()
condition|)
block|{
name|deleteTablesIfAny
argument_list|()
expr_stmt|;
comment|// TODO
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Restoring cluster."
argument_list|)
expr_stmt|;
name|util
operator|.
name|restoreCluster
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster restored."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUpMonkey
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Sorry, no Monkey
name|String
name|msg
init|=
literal|"Chaos monkey is not supported"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
specifier|private
name|void
name|deleteTablesIfAny
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|util
operator|.
name|deleteTableIfAny
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUpCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|=
name|getTestingUtil
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initializing/checking cluster has {} servers"
argument_list|,
name|regionServerCount
argument_list|)
expr_stmt|;
name|util
operator|.
name|initializeCluster
argument_list|(
name|regionServerCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done initializing/checking cluster"
argument_list|)
expr_stmt|;
block|}
comment|/**    *    * @return status of CLI execution    */
annotation|@
name|Override
specifier|public
name|int
name|runTestFromCommandLine
parameter_list|()
throws|throws
name|Exception
block|{
name|testMobCompaction
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getTablename
parameter_list|()
block|{
comment|// That is only valid when Monkey is CALM (no monkey)
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getColumnFamilies
parameter_list|()
block|{
comment|// That is only valid when Monkey is CALM (no monkey)
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addOptions
parameter_list|()
block|{
name|addOptWithArg
argument_list|(
name|REGIONSERVER_COUNT_KEY
argument_list|,
literal|"Total number of region servers. Default: '"
operator|+
name|DEFAULT_REGIONSERVER_COUNT
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|ROWS_COUNT_KEY
argument_list|,
literal|"Total number of data rows to load. Default: '"
operator|+
name|DEFAULT_ROWS_COUNT
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|FAILURE_PROB_KEY
argument_list|,
literal|"Probability of a failure of a region MOB compaction request. Default: '"
operator|+
name|DEFAULT_FAILURE_PROB
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
block|{
name|super
operator|.
name|processOptions
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|regionServerCount
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|REGIONSERVER_COUNT_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|DEFAULT_REGIONSERVER_COUNT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rowsToLoad
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|ROWS_COUNT_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|DEFAULT_ROWS_COUNT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|failureProb
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|FAILURE_PROB_KEY
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|DEFAULT_FAILURE_PROB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|MoreObjects
operator|.
name|toStringHelper
argument_list|(
literal|"Parsed Options"
argument_list|)
operator|.
name|add
argument_list|(
name|REGIONSERVER_COUNT_KEY
argument_list|,
name|regionServerCount
argument_list|)
operator|.
name|add
argument_list|(
name|ROWS_COUNT_KEY
argument_list|,
name|rowsToLoad
argument_list|)
operator|.
name|add
argument_list|(
name|FAILURE_PROB_KEY
argument_list|,
name|failureProb
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|initConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
literal|"hfile.format.version"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|TimeToLiveHFileCleaner
operator|.
name|TTL_CONF_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hregion.max.filesize"
argument_list|,
literal|200000000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hregion.memstore.flush.size"
argument_list|,
literal|800000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.blockingStoreFiles"
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compaction.throughput.lower.bound"
argument_list|,
literal|52428800
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compaction.throughput.higher.bound"
argument_list|,
literal|2
operator|*
literal|52428800
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
literal|"hbase.mob.compaction.fault.probability"
argument_list|,
name|failureProb
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MobStoreEngine
operator|.
name|MOB_COMPACTOR_CLASS_KEY
argument_list|,
name|FaultyMobStoreCompactor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.table.sanity.checks"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|MobConstants
operator|.
name|MIN_AGE_TO_ARCHIVE_KEY
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
block|}
class|class
name|MajorCompaction
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|run
condition|)
block|{
try|try
block|{
name|admin
operator|.
name|majorCompact
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|,
name|fam
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|120000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"MOB Stress Test FAILED"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
class|class
name|CleanMobAndArchive
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|run
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MOB cleanup chore started ..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|chore
operator|==
literal|null
condition|)
block|{
name|chore
operator|=
operator|new
name|MobFileCleanerChore
argument_list|()
expr_stmt|;
block|}
name|chore
operator|.
name|cleanupObsoleteMobFiles
argument_list|(
name|conf
argument_list|,
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MOB cleanup chore finished"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|130000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
class|class
name|WriteData
implements|implements
name|Runnable
block|{
specifier|private
name|long
name|rows
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|WriteData
parameter_list|(
name|long
name|rows
parameter_list|)
block|{
name|this
operator|.
name|rows
operator|=
name|rows
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// BufferedMutator bm = admin.getConnection().getBufferedMutator(table.getName());
comment|// Put Operation
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qualifier
argument_list|,
name|mobVal
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// bm.mutate(p);
if|if
condition|(
name|i
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"LOADED="
operator|+
name|i
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ee
parameter_list|)
block|{              }
block|}
if|if
condition|(
name|i
operator|%
literal|100000
operator|==
literal|0
condition|)
block|{
name|printStats
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|// bm.flush();
name|admin
operator|.
name|flush
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|run
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"MOB Stress Test FAILED"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMobCompaction
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
try|try
block|{
name|Thread
name|writeData
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|WriteData
argument_list|(
name|rowsToLoad
argument_list|)
argument_list|)
decl_stmt|;
name|writeData
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|majorcompact
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|MajorCompaction
argument_list|()
argument_list|)
decl_stmt|;
name|majorcompact
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|cleaner
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|CleanMobAndArchive
argument_list|()
argument_list|)
decl_stmt|;
name|cleaner
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|run
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|getNumberOfMobFiles
argument_list|(
name|conf
argument_list|,
name|table
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|String
argument_list|(
name|fam
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for write thread to finish ..."
argument_list|)
expr_stmt|;
name|writeData
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Cleanup again
name|chore
operator|.
name|cleanupObsoleteMobFiles
argument_list|(
name|conf
argument_list|,
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|util
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Archive cleaner started ..."
argument_list|)
expr_stmt|;
comment|// Call archive cleaner again
name|util
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getHFileCleaner
argument_list|()
operator|.
name|choreForTesting
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Archive cleaner finished"
argument_list|)
expr_stmt|;
block|}
name|scanTable
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"MOB Stress Test finished OK"
argument_list|)
expr_stmt|;
name|printStats
argument_list|(
name|rowsToLoad
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|getNumberOfMobFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|String
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|st
range|:
name|stat
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"MOB Directory content: {}"
argument_list|,
name|st
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"MOB Directory content total files: {}"
argument_list|,
name|stat
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|stat
operator|.
name|length
return|;
block|}
specifier|public
name|void
name|printStats
parameter_list|(
name|long
name|loaded
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MOB Stress Test: loaded="
operator|+
name|loaded
operator|+
literal|" compactions="
operator|+
name|FaultyMobStoreCompactor
operator|.
name|totalCompactions
operator|.
name|get
argument_list|()
operator|+
literal|" major="
operator|+
name|FaultyMobStoreCompactor
operator|.
name|totalMajorCompactions
operator|.
name|get
argument_list|()
operator|+
literal|" mob="
operator|+
name|FaultyMobStoreCompactor
operator|.
name|mobCounter
operator|.
name|get
argument_list|()
operator|+
literal|" injected failures="
operator|+
name|FaultyMobStoreCompactor
operator|.
name|totalFailures
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanTable
parameter_list|()
block|{
try|try
block|{
name|Result
name|result
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|fam
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|fam
argument_list|,
name|qualifier
argument_list|)
argument_list|,
name|mobVal
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|counter
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"GET="
operator|+
name|counter
argument_list|)
expr_stmt|;
block|}
name|counter
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|rowsToLoad
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"MOB Stress Test FAILED"
argument_list|)
expr_stmt|;
if|if
condition|(
name|util
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|initConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|IntegrationTestingUtility
operator|.
name|setUseDistributedCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|IntegrationTestMobCompaction
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

