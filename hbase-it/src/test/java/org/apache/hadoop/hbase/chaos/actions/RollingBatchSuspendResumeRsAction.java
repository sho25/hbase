begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|chaos
operator|.
name|actions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|chaos
operator|.
name|monkies
operator|.
name|PolicyBasedChaosMonkey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Suspend then resume a ratio of the regionservers in a rolling fashion. At each step, either  * suspend a server, or resume one, sleeping (sleepTime) in between steps. The parameter  * maxSuspendedServers limits the maximum number of servers that can be down at the same time  * during rolling restarts.  */
end_comment

begin_class
specifier|public
class|class
name|RollingBatchSuspendResumeRsAction
extends|extends
name|Action
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RollingBatchSuspendResumeRsAction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|float
name|ratio
decl_stmt|;
specifier|private
name|long
name|sleepTime
decl_stmt|;
specifier|private
name|int
name|maxSuspendedServers
decl_stmt|;
comment|// number of maximum suspended servers at any given time.
specifier|public
name|RollingBatchSuspendResumeRsAction
parameter_list|(
name|long
name|sleepTime
parameter_list|,
name|float
name|ratio
parameter_list|)
block|{
name|this
argument_list|(
name|sleepTime
argument_list|,
name|ratio
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RollingBatchSuspendResumeRsAction
parameter_list|(
name|long
name|sleepTime
parameter_list|,
name|float
name|ratio
parameter_list|,
name|int
name|maxSuspendedServers
parameter_list|)
block|{
name|this
operator|.
name|ratio
operator|=
name|ratio
expr_stmt|;
name|this
operator|.
name|sleepTime
operator|=
name|sleepTime
expr_stmt|;
name|this
operator|.
name|maxSuspendedServers
operator|=
name|maxSuspendedServers
expr_stmt|;
block|}
enum|enum
name|SuspendOrResume
block|{
name|SUSPEND
block|,
name|RESUME
block|}
annotation|@
name|Override
specifier|public
name|void
name|perform
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Performing action: Rolling batch restarting %d%% of region servers"
argument_list|,
call|(
name|int
call|)
argument_list|(
name|ratio
operator|*
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|selectedServers
init|=
name|selectServers
argument_list|()
decl_stmt|;
name|Queue
argument_list|<
name|ServerName
argument_list|>
name|serversToBeSuspended
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|selectedServers
argument_list|)
decl_stmt|;
name|Queue
argument_list|<
name|ServerName
argument_list|>
name|suspendedServers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// loop while there are servers to be suspended or suspended servers to be resumed
while|while
condition|(
operator|(
operator|!
name|serversToBeSuspended
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|suspendedServers
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|!
name|context
operator|.
name|isStopping
argument_list|()
condition|)
block|{
name|SuspendOrResume
name|action
decl_stmt|;
if|if
condition|(
name|serversToBeSuspended
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no more servers to suspend
name|action
operator|=
name|SuspendOrResume
operator|.
name|RESUME
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suspendedServers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|action
operator|=
name|SuspendOrResume
operator|.
name|SUSPEND
expr_stmt|;
comment|// no more servers to resume
block|}
elseif|else
if|if
condition|(
name|suspendedServers
operator|.
name|size
argument_list|()
operator|>=
name|maxSuspendedServers
condition|)
block|{
comment|// we have too many suspended servers. Don't suspend any more
name|action
operator|=
name|SuspendOrResume
operator|.
name|RESUME
expr_stmt|;
block|}
else|else
block|{
comment|// do a coin toss
name|action
operator|=
name|RandomUtils
operator|.
name|nextBoolean
argument_list|()
condition|?
name|SuspendOrResume
operator|.
name|SUSPEND
else|:
name|SuspendOrResume
operator|.
name|RESUME
expr_stmt|;
block|}
name|ServerName
name|server
decl_stmt|;
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|SUSPEND
case|:
name|server
operator|=
name|serversToBeSuspended
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|suspendRs
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Shell
operator|.
name|ExitCodeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem suspending but presume successful; code={}"
argument_list|,
name|e
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|suspendedServers
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
break|break;
case|case
name|RESUME
case|:
name|server
operator|=
name|suspendedServers
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
name|resumeRs
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Shell
operator|.
name|ExitCodeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Problem resuming, will retry; code={}"
argument_list|,
name|e
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping for:{}"
argument_list|,
name|sleepTime
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|List
argument_list|<
name|ServerName
argument_list|>
name|selectServers
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|PolicyBasedChaosMonkey
operator|.
name|selectRandomItems
argument_list|(
name|getCurrentServers
argument_list|()
argument_list|,
name|ratio
argument_list|)
return|;
block|}
block|}
end_class

end_unit

