begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|chaos
operator|.
name|actions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RegionMover
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Gracefully restarts every regionserver in a rolling fashion. At each step, it unloads,  * restarts the loads every rs server sleeping randomly (0-sleepTime) in between servers.  */
end_comment

begin_class
specifier|public
class|class
name|GracefulRollingRestartRsAction
extends|extends
name|RestartActionBaseAction
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GracefulRollingRestartRsAction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|GracefulRollingRestartRsAction
parameter_list|(
name|long
name|sleepTime
parameter_list|)
block|{
name|super
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|perform
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Performing action: Rolling restarting non-master region servers"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|selectedServers
init|=
name|selectServers
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Disabling balancer to make unloading possible"
argument_list|)
expr_stmt|;
name|setBalancer
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|selectedServers
control|)
block|{
name|String
name|rsName
init|=
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
init|(
name|RegionMover
name|rm
init|=
operator|new
name|RegionMover
operator|.
name|RegionMoverBuilder
argument_list|(
name|rsName
argument_list|,
name|getConf
argument_list|()
argument_list|)
operator|.
name|ack
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unloading {}"
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|rm
operator|.
name|unload
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarting {}"
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|gracefulRestartRs
argument_list|(
name|server
argument_list|,
name|sleepTime
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading {}"
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|rm
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Shell
operator|.
name|ExitCodeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Problem restarting but presume successful; code={}"
argument_list|,
name|e
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|sleep
argument_list|(
name|RandomUtils
operator|.
name|nextInt
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|sleepTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Enabling balancer"
argument_list|)
expr_stmt|;
name|setBalancer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|List
argument_list|<
name|ServerName
argument_list|>
name|selectServers
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|getCurrentServers
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

