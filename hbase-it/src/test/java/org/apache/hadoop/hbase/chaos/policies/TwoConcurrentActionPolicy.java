begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|chaos
operator|.
name|policies
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|chaos
operator|.
name|actions
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|chaos
operator|.
name|monkies
operator|.
name|PolicyBasedChaosMonkey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_comment
comment|/**  * Chaos Monkey policy that will run two different actions at the same time.  * A random action from each array of actions will be chosen and then run in parallel.  */
end_comment

begin_class
specifier|public
class|class
name|TwoConcurrentActionPolicy
extends|extends
name|PeriodicPolicy
block|{
specifier|private
specifier|final
name|Action
index|[]
name|actionsOne
decl_stmt|;
specifier|private
specifier|final
name|Action
index|[]
name|actionsTwo
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|executor
decl_stmt|;
specifier|public
name|TwoConcurrentActionPolicy
parameter_list|(
name|long
name|sleepTime
parameter_list|,
name|Action
index|[]
name|actionsOne
parameter_list|,
name|Action
index|[]
name|actionsTwo
parameter_list|)
block|{
name|super
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|this
operator|.
name|actionsOne
operator|=
name|actionsOne
expr_stmt|;
name|this
operator|.
name|actionsTwo
operator|=
name|actionsTwo
expr_stmt|;
name|executor
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|,
name|Threads
operator|.
name|newDaemonThreadFactory
argument_list|(
literal|"TwoConcurrentAction"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|runOneIteration
parameter_list|()
block|{
name|Action
name|actionOne
init|=
name|PolicyBasedChaosMonkey
operator|.
name|selectRandomItem
argument_list|(
name|actionsOne
argument_list|)
decl_stmt|;
name|Action
name|actionTwo
init|=
name|PolicyBasedChaosMonkey
operator|.
name|selectRandomItem
argument_list|(
name|actionsTwo
argument_list|)
decl_stmt|;
name|Future
name|fOne
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|ActionRunner
argument_list|(
name|actionOne
argument_list|)
argument_list|)
decl_stmt|;
name|Future
name|fTwo
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|ActionRunner
argument_list|(
name|actionTwo
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|fOne
operator|.
name|get
argument_list|()
expr_stmt|;
name|fTwo
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception occurred during performing action: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception occurred during performing action: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|PolicyContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|init
argument_list|(
name|context
argument_list|)
expr_stmt|;
for|for
control|(
name|Action
name|a
range|:
name|actionsOne
control|)
block|{
name|a
operator|.
name|init
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Action
name|a
range|:
name|actionsTwo
control|)
block|{
name|a
operator|.
name|init
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ActionRunner
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|Action
name|action
decl_stmt|;
specifier|public
name|ActionRunner
parameter_list|(
name|Action
name|action
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|action
operator|.
name|perform
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception occurred during performing action: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

