begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTestDataIngestWithChaosMonkey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * A utility to injects faults in a running cluster.  *<p>  * ChaosMonkey defines Action's and Policy's. Actions are sequences of events, like  *  - Select a random server to kill  *  - Sleep for 5 sec  *  - Start the server on the same host  * Actions can also be complex events, like rolling restart of all of the servers.  *<p>  * Policies on the other hand are responsible for executing the actions based on a strategy.  * The default policy is to execute a random action every minute based on predefined action  * weights. ChaosMonkey executes predefined named policies until it is stopped. More than one  * policy can be active at any time.  *<p>  * Chaos monkey can be run from the command line, or can be invoked from integration tests.  * See {@link IntegrationTestDataIngestWithChaosMonkey} or other integration tests that use  * chaos monkey for code examples.  *<p>  * ChaosMonkey class is indeed inspired by the Netflix's same-named tool:  * http://techblog.netflix.com/2012/07/chaos-monkey-released-into-wild.html  */
end_comment

begin_class
specifier|public
class|class
name|ChaosMonkey
extends|extends
name|AbstractHBaseTool
implements|implements
name|Stoppable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ChaosMonkey
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|ONE_SEC
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|FIVE_SEC
init|=
literal|5
operator|*
name|ONE_SEC
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|ONE_MIN
init|=
literal|60
operator|*
name|ONE_SEC
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|TIMEOUT
init|=
name|ONE_MIN
decl_stmt|;
specifier|final
name|IntegrationTestingUtility
name|util
decl_stmt|;
comment|/**    * Construct a new ChaosMonkey    * @param util the HBaseIntegrationTestingUtility already configured    * @param policies names of pre-defined policies to use    */
specifier|public
name|ChaosMonkey
parameter_list|(
name|IntegrationTestingUtility
name|util
parameter_list|,
name|String
modifier|...
name|policies
parameter_list|)
block|{
name|this
operator|.
name|util
operator|=
name|util
expr_stmt|;
name|setPoliciesByName
argument_list|(
name|policies
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a new ChaosMonkey    * @param util the HBaseIntegrationTestingUtility already configured    * @param policies custom policies to use    */
specifier|public
name|ChaosMonkey
parameter_list|(
name|IntegrationTestingUtility
name|util
parameter_list|,
name|Policy
modifier|...
name|policies
parameter_list|)
block|{
name|this
operator|.
name|util
operator|=
name|util
expr_stmt|;
name|this
operator|.
name|policies
operator|=
name|policies
expr_stmt|;
block|}
specifier|private
name|void
name|setPoliciesByName
parameter_list|(
name|String
modifier|...
name|policies
parameter_list|)
block|{
name|this
operator|.
name|policies
operator|=
operator|new
name|Policy
index|[
name|policies
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|policies
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|policies
index|[
name|i
index|]
operator|=
name|NAMED_POLICIES
operator|.
name|get
argument_list|(
name|policies
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Context for Action's    */
specifier|private
specifier|static
class|class
name|ActionContext
block|{
specifier|private
name|IntegrationTestingUtility
name|util
decl_stmt|;
name|ActionContext
parameter_list|(
name|IntegrationTestingUtility
name|util
parameter_list|)
block|{
name|this
operator|.
name|util
operator|=
name|util
expr_stmt|;
block|}
name|IntegrationTestingUtility
name|getHaseIntegrationTestingUtility
parameter_list|()
block|{
return|return
name|util
return|;
block|}
name|HBaseCluster
name|getHBaseCluster
parameter_list|()
block|{
return|return
name|util
operator|.
name|getHBaseClusterInterface
argument_list|()
return|;
block|}
block|}
comment|/**    * A (possibly mischievous) action that the ChaosMonkey can perform.    */
specifier|public
specifier|static
class|class
name|Action
block|{
comment|// TODO: interesting question - should actions be implemented inside
comment|//       ChaosMonkey, or outside? If they are inside (initial), the class becomes
comment|//       huge and all-encompassing; if they are outside ChaosMonkey becomes just
comment|//       a random task scheduler. For now, keep inside.
specifier|protected
name|ActionContext
name|context
decl_stmt|;
specifier|protected
name|HBaseCluster
name|cluster
decl_stmt|;
specifier|protected
name|ClusterStatus
name|initialStatus
decl_stmt|;
specifier|protected
name|ServerName
index|[]
name|initialServers
decl_stmt|;
specifier|protected
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|void
name|init
parameter_list|(
name|ActionContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|cluster
operator|=
name|context
operator|.
name|getHBaseCluster
argument_list|()
expr_stmt|;
name|initialStatus
operator|=
name|cluster
operator|.
name|getInitialClusterStatus
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|regionServers
init|=
name|initialStatus
operator|.
name|getServers
argument_list|()
decl_stmt|;
name|initialServers
operator|=
name|regionServers
operator|.
name|toArray
argument_list|(
operator|new
name|ServerName
index|[
name|regionServers
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|perform
parameter_list|()
throws|throws
name|Exception
block|{ }
empty_stmt|;
comment|// TODO: perhaps these methods should be elsewhere?
comment|/** Returns current region servers */
specifier|protected
name|ServerName
index|[]
name|getCurrentServers
parameter_list|()
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|regionServers
init|=
name|cluster
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionServers
operator|==
literal|null
operator|||
name|regionServers
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
return|return
operator|new
name|ServerName
index|[]
block|{}
return|;
return|return
name|regionServers
operator|.
name|toArray
argument_list|(
operator|new
name|ServerName
index|[
name|regionServers
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|void
name|killMaster
parameter_list|(
name|ServerName
name|server
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing master:"
operator|+
name|server
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|killMaster
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitForMasterToStop
argument_list|(
name|server
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Killed master server:"
operator|+
name|server
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|startMaster
parameter_list|(
name|ServerName
name|server
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting master:"
operator|+
name|server
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startMaster
argument_list|(
name|server
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitForActiveAndReadyMaster
argument_list|(
name|TIMEOUT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started master: "
operator|+
name|server
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|killRs
parameter_list|(
name|ServerName
name|server
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing region server:"
operator|+
name|server
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|killRegionServer
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitForRegionServerToStop
argument_list|(
name|server
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Killed region server:"
operator|+
name|server
operator|+
literal|". Reported num of rs:"
operator|+
name|cluster
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServersSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|startRs
parameter_list|(
name|ServerName
name|server
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting region server:"
operator|+
name|server
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startRegionServer
argument_list|(
name|server
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitForRegionServerToStart
argument_list|(
name|server
operator|.
name|getHostname
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started region server:"
operator|+
name|server
operator|+
literal|". Reported num of rs:"
operator|+
name|cluster
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServersSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unbalanceRegions
parameter_list|(
name|ClusterStatus
name|clusterStatus
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|fromServers
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|toServers
parameter_list|,
name|double
name|fractionOfRegions
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|victimRegions
init|=
operator|new
name|LinkedList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|fromServers
control|)
block|{
name|ServerLoad
name|serverLoad
init|=
name|clusterStatus
operator|.
name|getLoad
argument_list|(
name|server
argument_list|)
decl_stmt|;
comment|// Ugh.
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|regions
init|=
operator|new
name|LinkedList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|serverLoad
operator|.
name|getRegionsLoad
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|victimRegionCount
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|fractionOfRegions
operator|*
name|regions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing "
operator|+
name|victimRegionCount
operator|+
literal|" regions from "
operator|+
name|server
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|victimRegionCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|victimIx
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|regionId
init|=
name|HRegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|regions
operator|.
name|remove
argument_list|(
name|victimIx
argument_list|)
argument_list|)
decl_stmt|;
name|victimRegions
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|regionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving "
operator|+
name|victimRegions
operator|.
name|size
argument_list|()
operator|+
literal|" regions from "
operator|+
name|fromServers
operator|.
name|size
argument_list|()
operator|+
literal|" servers to "
operator|+
name|toServers
operator|.
name|size
argument_list|()
operator|+
literal|" different servers"
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|admin
init|=
name|this
operator|.
name|context
operator|.
name|getHaseIntegrationTestingUtility
argument_list|()
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|victimRegion
range|:
name|victimRegions
control|)
block|{
name|int
name|targetIx
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|toServers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|move
argument_list|(
name|victimRegion
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|toServers
operator|.
name|get
argument_list|(
name|targetIx
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|forceBalancer
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseAdmin
name|admin
init|=
name|this
operator|.
name|context
operator|.
name|getHaseIntegrationTestingUtility
argument_list|()
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|boolean
name|result
init|=
name|admin
operator|.
name|balancer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Balancer didn't succeed"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|RestartActionBase
extends|extends
name|Action
block|{
name|long
name|sleepTime
decl_stmt|;
comment|// how long should we sleep
specifier|public
name|RestartActionBase
parameter_list|(
name|long
name|sleepTime
parameter_list|)
block|{
name|this
operator|.
name|sleepTime
operator|=
name|sleepTime
expr_stmt|;
block|}
name|void
name|sleep
parameter_list|(
name|long
name|sleepTime
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping for:"
operator|+
name|sleepTime
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
name|void
name|restartMaster
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|long
name|sleepTime
parameter_list|)
throws|throws
name|IOException
block|{
name|killMaster
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|startMaster
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|void
name|restartRs
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|long
name|sleepTime
parameter_list|)
throws|throws
name|IOException
block|{
name|killRs
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|startRs
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|RestartActiveMaster
extends|extends
name|RestartActionBase
block|{
specifier|public
name|RestartActiveMaster
parameter_list|(
name|long
name|sleepTime
parameter_list|)
block|{
name|super
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|perform
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Performing action: Restart active master"
argument_list|)
expr_stmt|;
name|ServerName
name|master
init|=
name|cluster
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|restartMaster
argument_list|(
name|master
argument_list|,
name|sleepTime
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|RestartRandomRs
extends|extends
name|RestartActionBase
block|{
specifier|public
name|RestartRandomRs
parameter_list|(
name|long
name|sleepTime
parameter_list|)
block|{
name|super
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|perform
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Performing action: Restart random region server"
argument_list|)
expr_stmt|;
name|ServerName
name|server
init|=
name|selectRandomItem
argument_list|(
name|getCurrentServers
argument_list|()
argument_list|)
decl_stmt|;
name|restartRs
argument_list|(
name|server
argument_list|,
name|sleepTime
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|RestartRsHoldingMeta
extends|extends
name|RestartRandomRs
block|{
specifier|public
name|RestartRsHoldingMeta
parameter_list|(
name|long
name|sleepTime
parameter_list|)
block|{
name|super
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|perform
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Performing action: Restart region server holding META"
argument_list|)
expr_stmt|;
name|ServerName
name|server
init|=
name|cluster
operator|.
name|getServerHoldingMeta
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No server is holding .META. right now."
argument_list|)
expr_stmt|;
return|return;
block|}
name|restartRs
argument_list|(
name|server
argument_list|,
name|sleepTime
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Restarts a ratio of the running regionservers at the same time    */
specifier|public
specifier|static
class|class
name|BatchRestartRs
extends|extends
name|RestartActionBase
block|{
name|float
name|ratio
decl_stmt|;
comment|//ratio of regionservers to restart
specifier|public
name|BatchRestartRs
parameter_list|(
name|long
name|sleepTime
parameter_list|,
name|float
name|ratio
parameter_list|)
block|{
name|super
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|this
operator|.
name|ratio
operator|=
name|ratio
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|perform
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Performing action: Batch restarting %d%% of region servers"
argument_list|,
call|(
name|int
call|)
argument_list|(
name|ratio
operator|*
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|selectedServers
init|=
name|selectRandomItems
argument_list|(
name|getCurrentServers
argument_list|()
argument_list|,
name|ratio
argument_list|)
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|selectedServers
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing region server:"
operator|+
name|server
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|killRegionServer
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ServerName
name|server
range|:
name|selectedServers
control|)
block|{
name|cluster
operator|.
name|waitForRegionServerToStop
argument_list|(
name|server
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Killed "
operator|+
name|selectedServers
operator|.
name|size
argument_list|()
operator|+
literal|" region servers. Reported num of rs:"
operator|+
name|cluster
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServersSize
argument_list|()
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|selectedServers
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting region server:"
operator|+
name|server
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startRegionServer
argument_list|(
name|server
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ServerName
name|server
range|:
name|selectedServers
control|)
block|{
name|cluster
operator|.
name|waitForRegionServerToStart
argument_list|(
name|server
operator|.
name|getHostname
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Started "
operator|+
name|selectedServers
operator|.
name|size
argument_list|()
operator|+
literal|" region servers. Reported num of rs:"
operator|+
name|cluster
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServersSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Restarts a ratio of the regionservers in a rolling fashion. At each step, either kills a    * server, or starts one, sleeping randomly (0-sleepTime) in between steps.    */
specifier|public
specifier|static
class|class
name|RollingBatchRestartRs
extends|extends
name|BatchRestartRs
block|{
specifier|public
name|RollingBatchRestartRs
parameter_list|(
name|long
name|sleepTime
parameter_list|,
name|float
name|ratio
parameter_list|)
block|{
name|super
argument_list|(
name|sleepTime
argument_list|,
name|ratio
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|perform
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Performing action: Rolling batch restarting %d%% of region servers"
argument_list|,
call|(
name|int
call|)
argument_list|(
name|ratio
operator|*
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|selectedServers
init|=
name|selectRandomItems
argument_list|(
name|getCurrentServers
argument_list|()
argument_list|,
name|ratio
argument_list|)
decl_stmt|;
name|Queue
argument_list|<
name|ServerName
argument_list|>
name|serversToBeKilled
init|=
operator|new
name|LinkedList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
name|selectedServers
argument_list|)
decl_stmt|;
name|Queue
argument_list|<
name|ServerName
argument_list|>
name|deadServers
init|=
operator|new
name|LinkedList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
comment|//
while|while
condition|(
operator|!
name|serversToBeKilled
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|deadServers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|action
init|=
literal|true
decl_stmt|;
comment|//action true = kill server, false = start server
if|if
condition|(
name|serversToBeKilled
operator|.
name|isEmpty
argument_list|()
operator|||
name|deadServers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|action
operator|=
name|deadServers
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|action
operator|=
name|random
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|action
condition|)
block|{
name|ServerName
name|server
init|=
name|serversToBeKilled
operator|.
name|remove
argument_list|()
decl_stmt|;
name|killRs
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|deadServers
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ServerName
name|server
init|=
name|deadServers
operator|.
name|remove
argument_list|()
decl_stmt|;
name|startRs
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|sleep
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|sleepTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|UnbalanceRegionsAction
extends|extends
name|Action
block|{
specifier|private
name|double
name|fractionOfRegions
decl_stmt|;
specifier|private
name|double
name|fractionOfServers
decl_stmt|;
comment|/**      * Unbalances the regions on the cluster by choosing "target" servers, and moving      * some regions from each of the non-target servers to random target servers.      * @param fractionOfRegions Fraction of regions to move from each server.      * @param fractionOfServers Fraction of servers to be chosen as targets.      */
specifier|public
name|UnbalanceRegionsAction
parameter_list|(
name|double
name|fractionOfRegions
parameter_list|,
name|double
name|fractionOfServers
parameter_list|)
block|{
name|this
operator|.
name|fractionOfRegions
operator|=
name|fractionOfRegions
expr_stmt|;
name|this
operator|.
name|fractionOfServers
operator|=
name|fractionOfServers
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|perform
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unbalancing regions"
argument_list|)
expr_stmt|;
name|ClusterStatus
name|status
init|=
name|this
operator|.
name|cluster
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|victimServers
init|=
operator|new
name|LinkedList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
name|status
operator|.
name|getServers
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|targetServerCount
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|fractionOfServers
operator|*
name|victimServers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|targetServers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
name|targetServerCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targetServerCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|victimIx
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|victimServers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|targetServers
operator|.
name|add
argument_list|(
name|victimServers
operator|.
name|remove
argument_list|(
name|victimIx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|unbalanceRegions
argument_list|(
name|status
argument_list|,
name|victimServers
argument_list|,
name|targetServers
argument_list|,
name|fractionOfRegions
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ForceBalancerAction
extends|extends
name|Action
block|{
annotation|@
name|Override
specifier|protected
name|void
name|perform
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Balancing regions"
argument_list|)
expr_stmt|;
name|forceBalancer
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * A context for a Policy    */
specifier|private
specifier|static
class|class
name|PolicyContext
extends|extends
name|ActionContext
block|{
name|PolicyContext
parameter_list|(
name|IntegrationTestingUtility
name|util
parameter_list|)
block|{
name|super
argument_list|(
name|util
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A policy to introduce chaos to the cluster    */
specifier|public
specifier|static
specifier|abstract
class|class
name|Policy
extends|extends
name|StoppableImplementation
implements|implements
name|Runnable
block|{
name|PolicyContext
name|context
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|(
name|PolicyContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
block|}
comment|/** A policy that runs multiple other policies one after the other */
specifier|public
specifier|static
class|class
name|CompositeSequentialPolicy
extends|extends
name|Policy
block|{
specifier|private
name|List
argument_list|<
name|Policy
argument_list|>
name|policies
decl_stmt|;
specifier|public
name|CompositeSequentialPolicy
parameter_list|(
name|Policy
modifier|...
name|policies
parameter_list|)
block|{
name|this
operator|.
name|policies
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|policies
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
name|super
operator|.
name|stop
argument_list|(
name|why
argument_list|)
expr_stmt|;
for|for
control|(
name|Policy
name|p
range|:
name|policies
control|)
block|{
name|p
operator|.
name|stop
argument_list|(
name|why
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|Policy
name|p
range|:
name|policies
control|)
block|{
name|p
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|PolicyContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|init
argument_list|(
name|context
argument_list|)
expr_stmt|;
for|for
control|(
name|Policy
name|p
range|:
name|policies
control|)
block|{
name|p
operator|.
name|init
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** A policy which does stuff every time interval. */
specifier|public
specifier|static
specifier|abstract
class|class
name|PeriodicPolicy
extends|extends
name|Policy
block|{
specifier|private
name|long
name|periodMs
decl_stmt|;
specifier|public
name|PeriodicPolicy
parameter_list|(
name|long
name|periodMs
parameter_list|)
block|{
name|this
operator|.
name|periodMs
operator|=
name|periodMs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Add some jitter.
name|int
name|jitter
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|periodMs
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping for "
operator|+
name|jitter
operator|+
literal|" to add jitter"
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
name|jitter
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|isStopped
argument_list|()
condition|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|runOneIteration
argument_list|()
expr_stmt|;
if|if
condition|(
name|isStopped
argument_list|()
condition|)
return|return;
name|long
name|sleepTime
init|=
name|periodMs
operator|-
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
decl_stmt|;
if|if
condition|(
name|sleepTime
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping for: "
operator|+
name|sleepTime
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|abstract
name|void
name|runOneIteration
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|PolicyContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|init
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using ChaosMonkey Policy: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|+
literal|", period: "
operator|+
name|periodMs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** A policy which performs a sequence of actions deterministically. */
specifier|public
specifier|static
class|class
name|DoActionsOncePolicy
extends|extends
name|PeriodicPolicy
block|{
specifier|private
name|List
argument_list|<
name|Action
argument_list|>
name|actions
decl_stmt|;
specifier|public
name|DoActionsOncePolicy
parameter_list|(
name|long
name|periodMs
parameter_list|,
name|List
argument_list|<
name|Action
argument_list|>
name|actions
parameter_list|)
block|{
name|super
argument_list|(
name|periodMs
argument_list|)
expr_stmt|;
name|this
operator|.
name|actions
operator|=
operator|new
name|ArrayList
argument_list|<
name|ChaosMonkey
operator|.
name|Action
argument_list|>
argument_list|(
name|actions
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DoActionsOncePolicy
parameter_list|(
name|long
name|periodMs
parameter_list|,
name|Action
modifier|...
name|actions
parameter_list|)
block|{
name|this
argument_list|(
name|periodMs
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|actions
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|runOneIteration
parameter_list|()
block|{
if|if
condition|(
name|actions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|stop
argument_list|(
literal|"done"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Action
name|action
init|=
name|actions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|action
operator|.
name|perform
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception occured during performing action: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|PolicyContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|init
argument_list|(
name|context
argument_list|)
expr_stmt|;
for|for
control|(
name|Action
name|action
range|:
name|actions
control|)
block|{
name|action
operator|.
name|init
argument_list|(
name|this
operator|.
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * A policy, which picks a random action according to the given weights,    * and performs it every configurable period.    */
specifier|public
specifier|static
class|class
name|PeriodicRandomActionPolicy
extends|extends
name|PeriodicPolicy
block|{
specifier|private
name|List
argument_list|<
name|Pair
argument_list|<
name|Action
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|actions
decl_stmt|;
specifier|public
name|PeriodicRandomActionPolicy
parameter_list|(
name|long
name|periodMs
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Action
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|actions
parameter_list|)
block|{
name|super
argument_list|(
name|periodMs
argument_list|)
expr_stmt|;
name|this
operator|.
name|actions
operator|=
name|actions
expr_stmt|;
block|}
specifier|public
name|PeriodicRandomActionPolicy
parameter_list|(
name|long
name|periodMs
parameter_list|,
name|Pair
argument_list|<
name|Action
argument_list|,
name|Integer
argument_list|>
modifier|...
name|actions
parameter_list|)
block|{
comment|// We don't expect it to be modified.
name|this
argument_list|(
name|periodMs
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|actions
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PeriodicRandomActionPolicy
parameter_list|(
name|long
name|periodMs
parameter_list|,
name|Action
modifier|...
name|actions
parameter_list|)
block|{
name|super
argument_list|(
name|periodMs
argument_list|)
expr_stmt|;
name|this
operator|.
name|actions
operator|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|Action
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|(
name|actions
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Action
name|action
range|:
name|actions
control|)
block|{
name|this
operator|.
name|actions
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Action
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|action
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|runOneIteration
parameter_list|()
block|{
name|Action
name|action
init|=
name|selectWeightedRandomItem
argument_list|(
name|actions
argument_list|)
decl_stmt|;
try|try
block|{
name|action
operator|.
name|perform
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception occured during performing action: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|PolicyContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|init
argument_list|(
name|context
argument_list|)
expr_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|Action
argument_list|,
name|Integer
argument_list|>
name|action
range|:
name|actions
control|)
block|{
name|action
operator|.
name|getFirst
argument_list|()
operator|.
name|init
argument_list|(
name|this
operator|.
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Selects a random item from the given items */
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|selectRandomItem
parameter_list|(
name|T
index|[]
name|items
parameter_list|)
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
return|return
name|items
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|items
operator|.
name|length
argument_list|)
index|]
return|;
block|}
comment|/** Selects a random item from the given items with weights*/
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|selectWeightedRandomItem
parameter_list|(
name|List
argument_list|<
name|Pair
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|items
parameter_list|)
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|totalWeight
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
name|pair
range|:
name|items
control|)
block|{
name|totalWeight
operator|+=
name|pair
operator|.
name|getSecond
argument_list|()
expr_stmt|;
block|}
name|int
name|cutoff
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|totalWeight
argument_list|)
decl_stmt|;
name|int
name|cummulative
init|=
literal|0
decl_stmt|;
name|T
name|item
init|=
literal|null
decl_stmt|;
comment|//warn: O(n)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|curWeight
init|=
name|items
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getSecond
argument_list|()
decl_stmt|;
if|if
condition|(
name|cutoff
operator|<
name|cummulative
operator|+
name|curWeight
condition|)
block|{
name|item
operator|=
name|items
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFirst
argument_list|()
expr_stmt|;
break|break;
block|}
name|cummulative
operator|+=
name|curWeight
expr_stmt|;
block|}
return|return
name|item
return|;
block|}
comment|/** Selects and returns ceil(ratio * items.length) random items from the given array */
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|selectRandomItems
parameter_list|(
name|T
index|[]
name|items
parameter_list|,
name|float
name|ratio
parameter_list|)
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|remaining
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|items
operator|.
name|length
operator|*
name|ratio
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|selectedItems
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
argument_list|<
name|items
operator|.
name|length
operator|&&
name|remaining
argument_list|>
literal|0
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
operator|.
name|nextFloat
argument_list|()
operator|<
operator|(
operator|(
name|float
operator|)
name|remaining
operator|/
operator|(
name|items
operator|.
name|length
operator|-
name|i
operator|)
operator|)
condition|)
block|{
name|selectedItems
operator|.
name|add
argument_list|(
name|items
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|remaining
operator|--
expr_stmt|;
block|}
block|}
return|return
name|selectedItems
return|;
block|}
comment|/**    * All actions that deal with RS's with the following weights (relative probabilities):    *  - Restart active master (sleep 5 sec)                    : 2    *  - Restart random regionserver (sleep 5 sec)              : 2    *  - Restart random regionserver (sleep 60 sec)             : 2    *  - Restart META regionserver (sleep 5 sec)                : 1    *  - Batch restart of 50% of regionservers (sleep 5 sec)    : 2    *  - Rolling restart of 100% of regionservers (sleep 5 sec) : 2    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|Action
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|ALL_ACTIONS
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|Pair
argument_list|<
name|Action
argument_list|,
name|Integer
argument_list|>
argument_list|(
operator|new
name|RestartActiveMaster
argument_list|(
name|FIVE_SEC
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|Pair
argument_list|<
name|Action
argument_list|,
name|Integer
argument_list|>
argument_list|(
operator|new
name|RestartRandomRs
argument_list|(
name|FIVE_SEC
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|Pair
argument_list|<
name|Action
argument_list|,
name|Integer
argument_list|>
argument_list|(
operator|new
name|RestartRandomRs
argument_list|(
name|ONE_MIN
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|Pair
argument_list|<
name|Action
argument_list|,
name|Integer
argument_list|>
argument_list|(
operator|new
name|RestartRsHoldingMeta
argument_list|(
name|FIVE_SEC
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|Pair
argument_list|<
name|Action
argument_list|,
name|Integer
argument_list|>
argument_list|(
operator|new
name|BatchRestartRs
argument_list|(
name|FIVE_SEC
argument_list|,
literal|0.5f
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|Pair
argument_list|<
name|Action
argument_list|,
name|Integer
argument_list|>
argument_list|(
operator|new
name|RollingBatchRestartRs
argument_list|(
name|FIVE_SEC
argument_list|,
literal|1.0f
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EVERY_MINUTE_RANDOM_ACTION_POLICY
init|=
literal|"EVERY_MINUTE_RANDOM_ACTION_POLICY"
decl_stmt|;
specifier|private
name|Policy
index|[]
name|policies
decl_stmt|;
specifier|private
name|Thread
index|[]
name|monkeyThreads
decl_stmt|;
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|monkeyThreads
operator|=
operator|new
name|Thread
index|[
name|policies
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|policies
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|policies
index|[
name|i
index|]
operator|.
name|init
argument_list|(
operator|new
name|PolicyContext
argument_list|(
name|this
operator|.
name|util
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
name|monkeyThread
init|=
operator|new
name|Thread
argument_list|(
name|policies
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|monkeyThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|monkeyThreads
index|[
name|i
index|]
operator|=
name|monkeyThread
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
for|for
control|(
name|Policy
name|policy
range|:
name|policies
control|)
block|{
name|policy
operator|.
name|stop
argument_list|(
name|why
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|policies
index|[
literal|0
index|]
operator|.
name|isStopped
argument_list|()
return|;
block|}
comment|/**    * Wait for ChaosMonkey to stop.    * @throws InterruptedException    */
specifier|public
name|void
name|waitForStop
parameter_list|()
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|Thread
name|monkeyThread
range|:
name|monkeyThreads
control|)
block|{
name|monkeyThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Policy
argument_list|>
name|NAMED_POLICIES
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
static|static
block|{
name|NAMED_POLICIES
operator|.
name|put
argument_list|(
name|EVERY_MINUTE_RANDOM_ACTION_POLICY
argument_list|,
operator|new
name|PeriodicRandomActionPolicy
argument_list|(
name|ONE_MIN
argument_list|,
name|ALL_ACTIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addOptions
parameter_list|()
block|{
name|addOptWithArg
argument_list|(
literal|"policy"
argument_list|,
literal|"a named policy defined in ChaosMonkey.java. Possible values: "
operator|+
name|NAMED_POLICIES
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|//we can add more options, and make policies more configurable
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
block|{
name|String
index|[]
name|policies
init|=
name|cmd
operator|.
name|getOptionValues
argument_list|(
literal|"policy"
argument_list|)
decl_stmt|;
if|if
condition|(
name|policies
operator|!=
literal|null
condition|)
block|{
name|setPoliciesByName
argument_list|(
name|policies
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|int
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
name|start
argument_list|()
expr_stmt|;
name|waitForStop
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|IntegrationTestingUtility
operator|.
name|setUseDistributedCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|IntegrationTestingUtility
name|util
init|=
operator|new
name|IntegrationTestingUtility
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|util
operator|.
name|initializeCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ChaosMonkey
name|monkey
init|=
operator|new
name|ChaosMonkey
argument_list|(
name|util
argument_list|,
name|EVERY_MINUTE_RANDOM_ACTION_POLICY
argument_list|)
decl_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
name|monkey
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

