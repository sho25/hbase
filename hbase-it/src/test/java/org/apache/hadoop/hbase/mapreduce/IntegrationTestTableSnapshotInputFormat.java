begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * An integration test to test {@link TableSnapshotInputFormat} which enables  * reading directly from snapshot files without going through hbase servers.  *  * This test creates a table and loads the table with the rows ranging from  * 'aaa' to 'zzz', and for each row, sets the columns f1:(null) and f2:(null) to be  * the the same as the row value.  *<pre>  * aaa, f1: => aaa  * aaa, f2: => aaa  * aab, f1: => aab  * ....  * zzz, f2: => zzz  *</pre>  *  * Then the test creates a snapshot from this table, and overrides the values in the original  * table with values 'after_snapshot_value'. The test, then runs a mapreduce job over the snapshot  * with a scan start row 'bbb' and stop row 'yyy'. The data is saved in a single reduce output file, and  * inspected later to verify that the MR job has seen all the values from the snapshot.  *  *<p> These parameters can be used to configure the job:  *<br>"IntegrationTestTableSnapshotInputFormat.table" =&gt; the name of the table  *<br>"IntegrationTestTableSnapshotInputFormat.snapshot" =&gt; the name of the snapshot  *<br>"IntegrationTestTableSnapshotInputFormat.numRegions" =&gt; number of regions in the table to be created  *<br>"IntegrationTestTableSnapshotInputFormat.tableDir" =&gt; temporary directory to restore the snapshot files  *  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|IntegrationTests
operator|.
name|class
argument_list|)
comment|// Not runnable as a unit test. See TestTableSnapshotInputFormat
specifier|public
class|class
name|IntegrationTestTableSnapshotInputFormat
extends|extends
name|IntegrationTestBase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IntegrationTestTableSnapshotInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME_KEY
init|=
literal|"IntegrationTestTableSnapshotInputFormat.table"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_TABLE_NAME
init|=
literal|"IntegrationTestTableSnapshotInputFormat"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SNAPSHOT_NAME_KEY
init|=
literal|"IntegrationTestTableSnapshotInputFormat.snapshot"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NUM_REGIONS_KEY
init|=
literal|"IntegrationTestTableSnapshotInputFormat.numRegions"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_REGIONS
init|=
literal|32
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_DIR_KEY
init|=
literal|"IntegrationTestTableSnapshotInputFormat.tableDir"
decl_stmt|;
specifier|private
name|IntegrationTestingUtility
name|util
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|util
operator|=
name|getTestingUtil
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|util
operator|=
name|getTestingUtil
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|util
operator|.
name|initializeCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|setConf
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|restoreCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUpCluster
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Override
specifier|public
name|int
name|runTestFromCommandLine
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|TABLE_NAME_KEY
argument_list|,
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|snapshotName
init|=
name|conf
operator|.
name|get
argument_list|(
name|SNAPSHOT_NAME_KEY
argument_list|,
name|tableName
operator|.
name|getQualifierAsString
argument_list|()
operator|+
literal|"_snapshot_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numRegions
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|NUM_REGIONS_KEY
argument_list|,
name|DEFAULT_NUM_REGIONS
argument_list|)
decl_stmt|;
name|String
name|tableDirStr
init|=
name|conf
operator|.
name|get
argument_list|(
name|TABLE_DIR_KEY
argument_list|)
decl_stmt|;
name|Path
name|tableDir
decl_stmt|;
if|if
condition|(
name|tableDirStr
operator|==
literal|null
condition|)
block|{
name|tableDir
operator|=
name|util
operator|.
name|getDataTestDirOnTestFS
argument_list|(
name|tableName
operator|.
name|getQualifierAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tableDir
operator|=
operator|new
name|Path
argument_list|(
name|tableDirStr
argument_list|)
expr_stmt|;
block|}
comment|/* We create the table using HBaseAdmin#createTable(), which will create the table      * with desired number of regions. We pass bbb as startKey and yyy as endKey, so if      * desiredNumRegions is> 2, we create regions empty - bbb and yyy - empty, and we      * create numRegions - 2 regions between bbb - yyy. The test uses a Scan with startRow      * bbb and endRow yyy, so, we expect the first and last region to be filtered out in      * the input format, and we expect numRegions - 2 splits between bbb and yyy.      */
name|int
name|expectedNumSplits
init|=
name|numRegions
operator|>
literal|2
condition|?
name|numRegions
operator|-
literal|2
else|:
name|numRegions
decl_stmt|;
name|TestTableSnapshotInputFormat
operator|.
name|doTestWithMapReduce
argument_list|(
name|util
argument_list|,
name|tableName
argument_list|,
name|snapshotName
argument_list|,
name|tableDir
argument_list|,
name|numRegions
argument_list|,
name|expectedNumSplits
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
comment|// CM is not intended to be run with this test
specifier|public
name|String
name|getTablename
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getColumnFamilies
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|IntegrationTestingUtility
operator|.
name|setUseDistributedCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|IntegrationTestTableSnapshotInputFormat
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

