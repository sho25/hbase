begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|chaos
operator|.
name|actions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|chaos
operator|.
name|monkies
operator|.
name|PolicyBasedChaosMonkey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Action that adds high cpu load to a random regionserver for a given duration  */
end_comment

begin_class
specifier|public
class|class
name|AddCPULoadAction
extends|extends
name|SudoCommandAction
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AddCPULoadAction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CPU_LOAD_COMMAND
init|=
literal|"seq 1 %s | xargs -I{} -n 1 -P %s timeout %s dd if=/dev/urandom of=/dev/null bs=1M "
operator|+
literal|"iflag=fullblock"
decl_stmt|;
specifier|private
specifier|final
name|long
name|duration
decl_stmt|;
specifier|private
name|long
name|processes
decl_stmt|;
comment|/**    * Add high load to cpu    *    * @param duration  Duration that this thread should generate the load for in milliseconds    * @param processes The number of parallel processes, should be equal to cpu threads for max load    */
specifier|public
name|AddCPULoadAction
parameter_list|(
name|long
name|duration
parameter_list|,
name|long
name|processes
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
name|super
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|this
operator|.
name|duration
operator|=
name|duration
expr_stmt|;
name|this
operator|.
name|processes
operator|=
name|processes
expr_stmt|;
block|}
specifier|protected
name|void
name|localPerform
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting to execute AddCPULoadAction"
argument_list|)
expr_stmt|;
name|ServerName
name|server
init|=
name|PolicyBasedChaosMonkey
operator|.
name|selectRandomItem
argument_list|(
name|getCurrentServers
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|hostname
init|=
name|server
operator|.
name|getHostname
argument_list|()
decl_stmt|;
try|try
block|{
name|clusterManager
operator|.
name|execSudo
argument_list|(
name|hostname
argument_list|,
name|timeout
argument_list|,
name|getCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|//This will always happen. We use timeout to kill a continously running process
comment|//after the duration expires
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished to execute AddCPULoadAction"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getCommand
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|CPU_LOAD_COMMAND
argument_list|,
name|processes
argument_list|,
name|processes
argument_list|,
name|duration
operator|/
literal|1000f
argument_list|)
return|;
block|}
block|}
end_class

end_unit

