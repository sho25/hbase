begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|test
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ScannerCallable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableMapReduceUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableRecordReaderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|Authorizations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|CellVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IntegrationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|AbstractHBaseTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * A large test which loads a lot of data with cell visibility, and verifies the data. Test adds 2  * users with different sets of visibility labels authenticated for them. Every row (so cells in  * that) added with visibility expressions. In load step, 200 map tasks are launched, which in turn  * write loadmapper.num_to_write (default 100K) rows to an hbase table. Rows are written in blocks,  * for a total of 100 blocks.  *  * Verify step scans the table as both users with Authorizations. This step asserts that user can  * see only those rows (and so cells) with visibility for which they have label auth.  *  * This class can be run as a unit test, as an integration test, or from the command line.  *  * Originally taken from Apache Bigtop.  * Issue user names as comma seperated list.  *./hbase IntegrationTestWithCellVisibilityLoadAndVerify -u usera,userb  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|IntegrationTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|IntegrationTestWithCellVisibilityLoadAndVerify
extends|extends
name|IntegrationTestLoadAndVerify
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_STR
init|=
literal|"Two user names are to be specified seperated by a ',' like 'usera,userb'"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
name|NOT
init|=
literal|'!'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
name|OR
init|=
literal|'|'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
name|AND
init|=
literal|'&'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_NAME
init|=
literal|"IntegrationTestCellVisibilityLoadAndVerify"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONFIDENTIAL
init|=
literal|"confidential"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOPSECRET
init|=
literal|"topsecret"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SECRET
init|=
literal|"secret"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PUBLIC
init|=
literal|"public"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PRIVATE
init|=
literal|"private"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|LABELS
init|=
block|{
name|CONFIDENTIAL
block|,
name|TOPSECRET
block|,
name|SECRET
block|,
name|PRIVATE
block|,
name|PUBLIC
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|VISIBILITY_EXPS
init|=
block|{
name|CONFIDENTIAL
operator|+
name|AND
operator|+
name|TOPSECRET
operator|+
name|AND
operator|+
name|PRIVATE
block|,
name|CONFIDENTIAL
operator|+
name|OR
operator|+
name|TOPSECRET
block|,
name|PUBLIC
block|,
literal|'('
operator|+
name|SECRET
operator|+
name|OR
operator|+
name|PRIVATE
operator|+
literal|')'
operator|+
name|AND
operator|+
name|NOT
operator|+
name|CONFIDENTIAL
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|VISIBILITY_EXPS_COUNT
init|=
name|VISIBILITY_EXPS
operator|.
name|length
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NUM_TO_WRITE_KEY
init|=
literal|"loadmapper.num_to_write"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|NUM_TO_WRITE_DEFAULT
init|=
literal|100
operator|*
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SCANNER_CACHING
init|=
literal|500
decl_stmt|;
specifier|private
specifier|static
name|String
name|USER_OPT
init|=
literal|"users"
decl_stmt|;
specifier|private
specifier|static
name|String
name|userNames
init|=
literal|"user1,user2"
decl_stmt|;
specifier|private
name|long
name|numRowsLoadedWithExp1
decl_stmt|,
name|numRowsLoadedWithExp2
decl_stmt|,
name|numRowsLoadWithExp3
decl_stmt|,
name|numRowsLoadWithExp4
decl_stmt|;
specifier|private
name|long
name|numRowsReadWithExp1
decl_stmt|,
name|numRowsReadWithExp2
decl_stmt|,
name|numRowsReadWithExp3
decl_stmt|,
name|numRowsReadWithExp4
decl_stmt|;
specifier|private
specifier|static
name|User
name|USER1
decl_stmt|,
name|USER2
decl_stmt|;
specifier|private
enum|enum
name|Counters
block|{
name|ROWS_VIS_EXP_1
block|,
name|ROWS_VIS_EXP_2
block|,
name|ROWS_VIS_EXP_3
block|,
name|ROWS_VIS_EXP_4
block|;   }
annotation|@
name|Override
specifier|public
name|void
name|setUpCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|=
name|getTestingUtil
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HFile
operator|.
name|FORMAT_VERSION_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.coprocessor.master.classes"
argument_list|,
name|VisibilityController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.coprocessor.region.classes"
argument_list|,
name|VisibilityController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.superuser"
argument_list|,
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.permissions"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUpCluster
argument_list|()
expr_stmt|;
name|String
index|[]
name|users
init|=
name|userNames
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|users
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ERROR_STR
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|ERROR_STR
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|userNames
operator|+
literal|" "
operator|+
name|users
index|[
literal|0
index|]
operator|+
literal|" "
operator|+
name|users
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|USER1
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
name|users
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|USER2
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
name|users
index|[
literal|1
index|]
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|addLabelsAndAuths
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addOptions
parameter_list|()
block|{
name|super
operator|.
name|addOptions
argument_list|()
expr_stmt|;
name|addOptWithArg
argument_list|(
literal|"u"
argument_list|,
name|USER_OPT
argument_list|,
literal|"User names to be passed"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addLabelsAndAuths
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|VisibilityClient
operator|.
name|addLabels
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|LABELS
argument_list|)
expr_stmt|;
name|VisibilityClient
operator|.
name|setAuths
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|CONFIDENTIAL
block|,
name|TOPSECRET
block|,
name|SECRET
block|,
name|PRIVATE
block|}
argument_list|,
name|USER1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|VisibilityClient
operator|.
name|setAuths
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|PUBLIC
block|}
argument_list|,
name|USER2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LoadWithCellVisibilityMapper
extends|extends
name|LoadMapper
block|{
specifier|private
name|Counter
name|rowsExp1
decl_stmt|,
name|rowsExp2
decl_stmt|,
name|rowsExp3
decl_stmt|,
name|rowsexp4
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|setup
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|rowsExp1
operator|=
name|context
operator|.
name|getCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_1
argument_list|)
expr_stmt|;
name|rowsExp2
operator|=
name|context
operator|.
name|getCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_2
argument_list|)
expr_stmt|;
name|rowsExp3
operator|=
name|context
operator|.
name|getCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_3
argument_list|)
expr_stmt|;
name|rowsexp4
operator|=
name|context
operator|.
name|getCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|map
parameter_list|(
name|NullWritable
name|key
parameter_list|,
name|NullWritable
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|suffix
init|=
literal|"/"
operator|+
name|shortTaskId
decl_stmt|;
name|int
name|BLOCK_SIZE
init|=
call|(
name|int
call|)
argument_list|(
name|recordsToWrite
operator|/
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|recordsToWrite
condition|;
control|)
block|{
for|for
control|(
name|long
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|BLOCK_SIZE
operator|&&
name|i
operator|<
name|recordsToWrite
condition|;
name|idx
operator|++
operator|,
name|i
operator|++
control|)
block|{
name|int
name|expIdx
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|BLOCK_SIZE
argument_list|)
operator|%
name|VISIBILITY_EXPS_COUNT
decl_stmt|;
name|String
name|exp
init|=
name|VISIBILITY_EXPS
index|[
name|expIdx
index|]
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|suffix
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|exp
argument_list|)
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|p
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|CellVisibility
argument_list|(
name|exp
argument_list|)
argument_list|)
expr_stmt|;
name|getCounter
argument_list|(
name|expIdx
argument_list|)
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mutator
operator|.
name|mutate
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|context
operator|.
name|setStatus
argument_list|(
literal|"Written "
operator|+
name|i
operator|+
literal|"/"
operator|+
name|recordsToWrite
operator|+
literal|" records"
argument_list|)
expr_stmt|;
name|context
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
block|}
comment|// End of block, flush all of them before we start writing anything
comment|// pointing to these!
name|mutator
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Counter
name|getCounter
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
switch|switch
condition|(
name|idx
condition|)
block|{
case|case
literal|0
case|:
return|return
name|rowsExp1
return|;
case|case
literal|1
case|:
return|return
name|rowsExp2
return|;
case|case
literal|2
case|:
return|return
name|rowsExp3
return|;
case|case
literal|3
case|:
return|return
name|rowsexp4
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|VerifyMapper
extends|extends
name|TableMapper
argument_list|<
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|>
block|{
specifier|private
name|Counter
name|rowsExp1
decl_stmt|,
name|rowsExp2
decl_stmt|,
name|rowsExp3
decl_stmt|,
name|rowsExp4
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|rowsExp1
operator|=
name|context
operator|.
name|getCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_1
argument_list|)
expr_stmt|;
name|rowsExp2
operator|=
name|context
operator|.
name|getCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_2
argument_list|)
expr_stmt|;
name|rowsExp3
operator|=
name|context
operator|.
name|getCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_3
argument_list|)
expr_stmt|;
name|rowsExp4
operator|=
name|context
operator|.
name|getCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|map
parameter_list|(
name|ImmutableBytesWritable
name|key
parameter_list|,
name|Result
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|row
init|=
name|value
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|Counter
name|c
init|=
name|getCounter
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|c
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Counter
name|getCounter
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
name|Counter
name|c
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|indexOf
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VISIBILITY_EXPS
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|c
operator|=
name|rowsExp1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|indexOf
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VISIBILITY_EXPS
index|[
literal|1
index|]
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|c
operator|=
name|rowsExp2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|indexOf
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VISIBILITY_EXPS
index|[
literal|2
index|]
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|c
operator|=
name|rowsExp3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|indexOf
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|VISIBILITY_EXPS
index|[
literal|3
index|]
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|c
operator|=
name|rowsExp4
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Job
name|doLoad
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|super
operator|.
name|doLoad
argument_list|(
name|conf
argument_list|,
name|htd
argument_list|)
decl_stmt|;
name|this
operator|.
name|numRowsLoadedWithExp1
operator|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_1
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|numRowsLoadedWithExp2
operator|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_2
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|numRowsLoadWithExp3
operator|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_3
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|numRowsLoadWithExp4
operator|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_4
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Rows loaded with cell visibility "
operator|+
name|VISIBILITY_EXPS
index|[
literal|0
index|]
operator|+
literal|" : "
operator|+
name|this
operator|.
name|numRowsLoadedWithExp1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Rows loaded with cell visibility "
operator|+
name|VISIBILITY_EXPS
index|[
literal|1
index|]
operator|+
literal|" : "
operator|+
name|this
operator|.
name|numRowsLoadedWithExp2
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Rows loaded with cell visibility "
operator|+
name|VISIBILITY_EXPS
index|[
literal|2
index|]
operator|+
literal|" : "
operator|+
name|this
operator|.
name|numRowsLoadWithExp3
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Rows loaded with cell visibility "
operator|+
name|VISIBILITY_EXPS
index|[
literal|3
index|]
operator|+
literal|" : "
operator|+
name|this
operator|.
name|numRowsLoadWithExp4
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setMapperClass
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
name|job
operator|.
name|setMapperClass
argument_list|(
name|LoadWithCellVisibilityMapper
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doVerify
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Verifying for auths %s, %s, %s, %s"
argument_list|,
name|CONFIDENTIAL
argument_list|,
name|TOPSECRET
argument_list|,
name|SECRET
argument_list|,
name|PRIVATE
argument_list|)
argument_list|)
expr_stmt|;
name|PrivilegedExceptionAction
argument_list|<
name|Job
argument_list|>
name|scanAction
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Job
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Job
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|doVerify
argument_list|(
name|conf
argument_list|,
name|htd
argument_list|,
name|CONFIDENTIAL
argument_list|,
name|TOPSECRET
argument_list|,
name|SECRET
argument_list|,
name|PRIVATE
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Job
name|job
init|=
name|USER1
operator|.
name|runAs
argument_list|(
name|scanAction
argument_list|)
decl_stmt|;
name|this
operator|.
name|numRowsReadWithExp1
operator|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_1
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|numRowsReadWithExp2
operator|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_2
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|numRowsReadWithExp3
operator|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_3
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|numRowsReadWithExp4
operator|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_4
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|numRowsLoadedWithExp1
argument_list|,
name|this
operator|.
name|numRowsReadWithExp1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|numRowsLoadedWithExp2
argument_list|,
name|this
operator|.
name|numRowsReadWithExp2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|numRowsReadWithExp3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|numRowsReadWithExp4
argument_list|)
expr_stmt|;
comment|// PUBLIC label auth is not provided for user1 user.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Verifying for auths %s, %s"
argument_list|,
name|PRIVATE
argument_list|,
name|PUBLIC
argument_list|)
argument_list|)
expr_stmt|;
name|scanAction
operator|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Job
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Job
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|doVerify
argument_list|(
name|conf
argument_list|,
name|htd
argument_list|,
name|PRIVATE
argument_list|,
name|PUBLIC
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|job
operator|=
name|USER1
operator|.
name|runAs
argument_list|(
name|scanAction
argument_list|)
expr_stmt|;
name|this
operator|.
name|numRowsReadWithExp1
operator|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_1
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|numRowsReadWithExp2
operator|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_2
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|numRowsReadWithExp3
operator|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_3
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|numRowsReadWithExp4
operator|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_4
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|numRowsReadWithExp1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|numRowsReadWithExp2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|numRowsReadWithExp3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|numRowsLoadWithExp4
argument_list|,
name|this
operator|.
name|numRowsReadWithExp4
argument_list|)
expr_stmt|;
comment|// Normal user only having PUBLIC label auth and can view only those cells.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Verifying for auths %s, %s"
argument_list|,
name|PRIVATE
argument_list|,
name|PUBLIC
argument_list|)
argument_list|)
expr_stmt|;
name|scanAction
operator|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Job
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Job
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|doVerify
argument_list|(
name|conf
argument_list|,
name|htd
argument_list|,
name|PRIVATE
argument_list|,
name|PUBLIC
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|job
operator|=
name|USER2
operator|.
name|runAs
argument_list|(
name|scanAction
argument_list|)
expr_stmt|;
name|this
operator|.
name|numRowsReadWithExp1
operator|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_1
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|numRowsReadWithExp2
operator|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_2
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|numRowsReadWithExp3
operator|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_3
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|numRowsReadWithExp4
operator|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|Counters
operator|.
name|ROWS_VIS_EXP_4
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|numRowsReadWithExp1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|numRowsReadWithExp2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|numRowsLoadWithExp3
argument_list|,
name|this
operator|.
name|numRowsReadWithExp3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|numRowsReadWithExp4
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Job
name|doVerify
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|,
name|String
modifier|...
name|auths
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|Path
name|outputDir
init|=
name|getTestDir
argument_list|(
name|TEST_NAME
argument_list|,
literal|"verify-output"
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
name|TEST_NAME
operator|+
literal|" Verification for "
operator|+
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|setJobScannerConf
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setAuthorizations
argument_list|(
operator|new
name|Authorizations
argument_list|(
name|auths
argument_list|)
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|initTableMapperJob
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|scan
argument_list|,
name|VerifyMapper
operator|.
name|class
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|addDependencyJars
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|AbstractHBaseTool
operator|.
name|class
argument_list|)
expr_stmt|;
name|int
name|scannerCaching
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"verify.scannercaching"
argument_list|,
name|SCANNER_CACHING
argument_list|)
decl_stmt|;
name|TableMapReduceUtil
operator|.
name|setScannerCaching
argument_list|(
name|job
argument_list|,
name|scannerCaching
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
specifier|private
specifier|static
name|void
name|setJobScannerConf
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|ScannerCallable
operator|.
name|LOG_SCANNER_ACTIVITY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|lpr
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|NUM_TO_WRITE_KEY
argument_list|,
name|NUM_TO_WRITE_DEFAULT
argument_list|)
operator|/
literal|100
decl_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|TableRecordReaderImpl
operator|.
name|LOG_PER_ROW_COUNT
argument_list|,
operator|(
name|int
operator|)
name|lpr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" -u usera,userb [-Doptions]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  Loads a table with cell visibilities and verifies with Authorizations"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Options"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -Dloadmapper.table=<name>        Table to write/verify (default autogen)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -Dloadmapper.num_to_write=<n>    "
operator|+
literal|"Number of rows per mapper (default 100,000 per mapper)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -Dloadmapper.numPresplits=<n>    "
operator|+
literal|"Number of presplit regions to start with (default 40)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -Dloadmapper.map.tasks=<n>       Number of map tasks for load (default 200)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -Dverify.scannercaching=<n>      "
operator|+
literal|"Number hbase scanner caching rows to read (default 50)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|runTestFromCommandLine
parameter_list|()
throws|throws
name|Exception
block|{
name|IntegrationTestingUtility
operator|.
name|setUseDistributedCluster
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numPresplits
init|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"loadmapper.numPresplits"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|// create HTableDescriptor for specified table
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|getTablename
argument_list|()
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|Admin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|,
name|numPresplits
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|doLoad
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
name|doVerify
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
name|getTestingUtil
argument_list|(
name|getConf
argument_list|()
argument_list|)
operator|.
name|deleteTable
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
block|{
name|List
name|args
init|=
name|cmd
operator|.
name|getArgList
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No args expected."
argument_list|)
throw|;
block|}
comment|// We always want loadAndVerify action
name|args
operator|.
name|add
argument_list|(
literal|"loadAndVerify"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|USER_OPT
argument_list|)
condition|)
block|{
name|userNames
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|USER_OPT
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|processOptions
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|IntegrationTestingUtility
operator|.
name|setUseDistributedCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|IntegrationTestWithCellVisibilityLoadAndVerify
argument_list|()
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

