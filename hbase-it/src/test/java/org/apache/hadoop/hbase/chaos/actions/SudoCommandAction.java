begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|chaos
operator|.
name|actions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DistributedHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClusterManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Base class for performing Actions based on linux commands requiring sudo privileges  */
end_comment

begin_class
specifier|abstract
specifier|public
class|class
name|SudoCommandAction
extends|extends
name|Action
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SudoCommandAction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|long
name|timeout
decl_stmt|;
specifier|protected
name|HBaseClusterManager
name|clusterManager
decl_stmt|;
specifier|public
name|SudoCommandAction
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|ActionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|init
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|HBaseCluster
name|cluster
init|=
name|context
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
if|if
condition|(
name|cluster
operator|!=
literal|null
operator|&&
name|cluster
operator|instanceof
name|DistributedHBaseCluster
condition|)
block|{
name|Object
name|manager
init|=
operator|(
operator|(
name|DistributedHBaseCluster
operator|)
name|cluster
operator|)
operator|.
name|getClusterManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
operator|!=
literal|null
operator|&&
name|manager
operator|instanceof
name|HBaseClusterManager
condition|)
block|{
name|clusterManager
operator|=
operator|(
name|HBaseClusterManager
operator|)
name|manager
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|perform
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|clusterManager
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Couldn't perform command action, it requires a distributed cluster."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Don't try the modify if we're stopping
if|if
condition|(
name|context
operator|.
name|isStopping
argument_list|()
condition|)
block|{
return|return;
block|}
name|localPerform
argument_list|()
expr_stmt|;
block|}
specifier|abstract
specifier|protected
name|void
name|localPerform
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

