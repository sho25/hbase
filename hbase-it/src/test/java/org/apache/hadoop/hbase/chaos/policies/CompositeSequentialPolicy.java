begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|chaos
operator|.
name|policies
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** A policy that runs multiple other policies one after the other */
end_comment

begin_class
specifier|public
class|class
name|CompositeSequentialPolicy
extends|extends
name|Policy
block|{
specifier|private
name|List
argument_list|<
name|Policy
argument_list|>
name|policies
decl_stmt|;
specifier|public
name|CompositeSequentialPolicy
parameter_list|(
name|Policy
modifier|...
name|policies
parameter_list|)
block|{
name|this
operator|.
name|policies
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|policies
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
name|super
operator|.
name|stop
argument_list|(
name|why
argument_list|)
expr_stmt|;
for|for
control|(
name|Policy
name|p
range|:
name|policies
control|)
block|{
name|p
operator|.
name|stop
argument_list|(
name|why
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|Policy
name|p
range|:
name|policies
control|)
block|{
name|p
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|PolicyContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|init
argument_list|(
name|context
argument_list|)
expr_stmt|;
for|for
control|(
name|Policy
name|p
range|:
name|policies
control|)
block|{
name|p
operator|.
name|init
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

