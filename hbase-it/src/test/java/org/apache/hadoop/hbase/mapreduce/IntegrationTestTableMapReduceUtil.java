begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test that we add tmpjars correctly including the named dependencies. Runs  * as an integration test so that classpath is realistic.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|IntegrationTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|IntegrationTestTableMapReduceUtil
implements|implements
name|Configurable
implements|,
name|Tool
block|{
specifier|private
specifier|static
name|IntegrationTestingUtility
name|util
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|provisionCluster
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
literal|null
operator|==
name|util
condition|)
block|{
name|util
operator|=
operator|new
name|IntegrationTestingUtility
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|skipMiniCluster
parameter_list|()
block|{
comment|// test probably also works with a local cluster, but
comment|// IntegrationTestingUtility doesn't support this concept.
name|assumeTrue
argument_list|(
literal|"test requires a distributed cluster."
argument_list|,
name|util
operator|.
name|isDistributedCluster
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Look for jars we expect to be on the classpath by name.    */
annotation|@
name|Test
specifier|public
name|void
name|testAddDependencyJars
parameter_list|()
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
operator|new
name|Job
argument_list|()
decl_stmt|;
name|TableMapReduceUtil
operator|.
name|addDependencyJars
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|String
name|tmpjars
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"tmpjars"
argument_list|)
decl_stmt|;
comment|// verify presence of modules
name|assertTrue
argument_list|(
name|tmpjars
operator|.
name|contains
argument_list|(
literal|"hbase-common"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmpjars
operator|.
name|contains
argument_list|(
literal|"hbase-protocol"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmpjars
operator|.
name|contains
argument_list|(
literal|"hbase-client"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmpjars
operator|.
name|contains
argument_list|(
literal|"hbase-hadoop-compat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmpjars
operator|.
name|contains
argument_list|(
literal|"hbase-server"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify presence of 3rd party dependencies.
name|assertTrue
argument_list|(
name|tmpjars
operator|.
name|contains
argument_list|(
literal|"zookeeper"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmpjars
operator|.
name|contains
argument_list|(
literal|"netty"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmpjars
operator|.
name|contains
argument_list|(
literal|"protobuf"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmpjars
operator|.
name|contains
argument_list|(
literal|"guava"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmpjars
operator|.
name|contains
argument_list|(
literal|"htrace"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|provisionCluster
argument_list|()
expr_stmt|;
name|skipMiniCluster
argument_list|()
expr_stmt|;
name|testAddDependencyJars
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|util
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"setConf not supported after the test has been initialized."
argument_list|)
throw|;
block|}
name|util
operator|=
operator|new
name|IntegrationTestingUtility
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|util
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|IntegrationTestingUtility
operator|.
name|setUseDistributedCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|IntegrationTestTableMapReduceUtil
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

