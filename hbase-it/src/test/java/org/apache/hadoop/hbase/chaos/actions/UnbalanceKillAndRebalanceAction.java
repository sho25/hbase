begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|chaos
operator|.
name|actions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|math
operator|.
name|RandomUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/** This action is too specific to put in ChaosMonkey; put it here */
end_comment

begin_class
specifier|public
class|class
name|UnbalanceKillAndRebalanceAction
extends|extends
name|Action
block|{
comment|/** Fractions of servers to get regions and live and die respectively; from all other    * servers, HOARD_FRC_OF_REGIONS will be removed to the above randomly */
specifier|private
specifier|static
specifier|final
name|double
name|FRC_SERVERS_THAT_HOARD_AND_LIVE
init|=
literal|0.1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|FRC_SERVERS_THAT_HOARD_AND_DIE
init|=
literal|0.1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|HOARD_FRC_OF_REGIONS
init|=
literal|0.8
decl_stmt|;
comment|/** Waits between calling unbalance and killing servers, kills and rebalance, and rebalance    * and restarting the servers; to make sure these events have time to impact the cluster. */
specifier|private
name|long
name|waitForUnbalanceMilliSec
decl_stmt|;
specifier|private
name|long
name|waitForKillsMilliSec
decl_stmt|;
specifier|private
name|long
name|waitAfterBalanceMilliSec
decl_stmt|;
specifier|public
name|UnbalanceKillAndRebalanceAction
parameter_list|(
name|long
name|waitUnbalance
parameter_list|,
name|long
name|waitKill
parameter_list|,
name|long
name|waitAfterBalance
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|waitForUnbalanceMilliSec
operator|=
name|waitUnbalance
expr_stmt|;
name|waitForKillsMilliSec
operator|=
name|waitKill
expr_stmt|;
name|waitAfterBalanceMilliSec
operator|=
name|waitAfterBalance
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|perform
parameter_list|()
throws|throws
name|Exception
block|{
name|ClusterStatus
name|status
init|=
name|this
operator|.
name|cluster
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|victimServers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|status
operator|.
name|getServers
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|killedServers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|liveCount
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|FRC_SERVERS_THAT_HOARD_AND_LIVE
operator|*
name|victimServers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|deadCount
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|FRC_SERVERS_THAT_HOARD_AND_DIE
operator|*
name|victimServers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|liveCount
operator|+
name|deadCount
operator|)
operator|<
name|victimServers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|targetServers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|liveCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|liveCount
operator|+
name|deadCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|victimIx
init|=
name|RandomUtils
operator|.
name|nextInt
argument_list|(
name|victimServers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|targetServers
operator|.
name|add
argument_list|(
name|victimServers
operator|.
name|remove
argument_list|(
name|victimIx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|unbalanceRegions
argument_list|(
name|status
argument_list|,
name|victimServers
argument_list|,
name|targetServers
argument_list|,
name|HOARD_FRC_OF_REGIONS
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|waitForUnbalanceMilliSec
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|liveCount
condition|;
operator|++
name|i
control|)
block|{
comment|// Don't keep killing servers if we're
comment|// trying to stop the monkey.
if|if
condition|(
name|context
operator|.
name|isStopping
argument_list|()
condition|)
block|{
break|break;
block|}
name|killRs
argument_list|(
name|targetServers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|killedServers
operator|.
name|add
argument_list|(
name|targetServers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|waitForKillsMilliSec
argument_list|)
expr_stmt|;
name|forceBalancer
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|waitAfterBalanceMilliSec
argument_list|)
expr_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|killedServers
control|)
block|{
name|startRs
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

