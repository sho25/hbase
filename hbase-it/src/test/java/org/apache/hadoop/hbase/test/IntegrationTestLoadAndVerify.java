begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|test
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IntegrationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|BufferedMutator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|BufferedMutatorParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ScannerCallable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|NMapInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableMapReduceUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableRecordReaderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|AbstractHBaseTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * A large test which loads a lot of data that has internal references, and  * verifies the data.  *  * In load step, 200 map tasks are launched, which in turn write loadmapper.num_to_write  * (default 100K) rows to an hbase table. Rows are written in blocks, for a total of  * 100 blocks. Each row in a block, contains loadmapper.backrefs (default 50) references  * to random rows in the prev block.  *  * Verify step is scans the table, and verifies that for every referenced row, the row is  * actually there (no data loss). Failed rows are output from reduce to be saved in the  * job output dir in hdfs and inspected later.  *  * This class can be run as a unit test, as an integration test, or from the command line  *  * Originally taken from Apache Bigtop.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|IntegrationTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|IntegrationTestLoadAndVerify
extends|extends
name|IntegrationTestBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_NAME
init|=
literal|"IntegrationTestLoadAndVerify"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NUM_TO_WRITE_KEY
init|=
literal|"loadmapper.num_to_write"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|NUM_TO_WRITE_DEFAULT
init|=
literal|100
operator|*
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME_KEY
init|=
literal|"loadmapper.table"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME_DEFAULT
init|=
literal|"table"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NUM_BACKREFS_KEY
init|=
literal|"loadmapper.backrefs"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_BACKREFS_DEFAULT
init|=
literal|50
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NUM_MAP_TASKS_KEY
init|=
literal|"loadmapper.map.tasks"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NUM_REDUCE_TASKS_KEY
init|=
literal|"verify.reduce.tasks"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_MAP_TASKS_DEFAULT
init|=
literal|200
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_REDUCE_TASKS_DEFAULT
init|=
literal|35
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SCANNER_CACHING
init|=
literal|500
decl_stmt|;
specifier|private
name|String
name|toRun
init|=
literal|null
decl_stmt|;
specifier|private
enum|enum
name|Counters
block|{
name|ROWS_WRITTEN
block|,
name|REFERENCES_WRITTEN
block|,
name|REFERENCES_CHECKED
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUpCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|=
name|getTestingUtil
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|util
operator|.
name|initializeCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|this
operator|.
name|setConf
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|util
operator|.
name|isDistributedCluster
argument_list|()
condition|)
block|{
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|NUM_TO_WRITE_KEY
argument_list|,
name|NUM_TO_WRITE_DEFAULT
operator|/
literal|100
argument_list|)
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|setInt
argument_list|(
name|NUM_MAP_TASKS_KEY
argument_list|,
name|NUM_MAP_TASKS_DEFAULT
operator|/
literal|100
argument_list|)
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|setInt
argument_list|(
name|NUM_REDUCE_TASKS_KEY
argument_list|,
name|NUM_REDUCE_TASKS_DEFAULT
operator|/
literal|10
argument_list|)
expr_stmt|;
name|util
operator|.
name|startMiniMapReduceCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|cleanUpCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|cleanUpCluster
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|util
operator|.
name|isDistributedCluster
argument_list|()
condition|)
block|{
name|util
operator|.
name|shutdownMiniMapReduceCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Converts a "long" value between endian systems.    * Borrowed from Apache Commons IO    * @param value value to convert    * @return the converted value    */
specifier|public
specifier|static
name|long
name|swapLong
parameter_list|(
name|long
name|value
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|value
operator|>>
literal|0
operator|)
operator|&
literal|0xff
operator|)
operator|<<
literal|56
operator|)
operator|+
operator|(
operator|(
operator|(
name|value
operator|>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
operator|<<
literal|48
operator|)
operator|+
operator|(
operator|(
operator|(
name|value
operator|>>
literal|16
operator|)
operator|&
literal|0xff
operator|)
operator|<<
literal|40
operator|)
operator|+
operator|(
operator|(
operator|(
name|value
operator|>>
literal|24
operator|)
operator|&
literal|0xff
operator|)
operator|<<
literal|32
operator|)
operator|+
operator|(
operator|(
operator|(
name|value
operator|>>
literal|32
operator|)
operator|&
literal|0xff
operator|)
operator|<<
literal|24
operator|)
operator|+
operator|(
operator|(
operator|(
name|value
operator|>>
literal|40
operator|)
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
operator|(
name|value
operator|>>
literal|48
operator|)
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
operator|(
operator|(
name|value
operator|>>
literal|56
operator|)
operator|&
literal|0xff
operator|)
operator|<<
literal|0
operator|)
return|;
block|}
specifier|public
specifier|static
class|class
name|LoadMapper
extends|extends
name|Mapper
argument_list|<
name|NullWritable
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
specifier|protected
name|long
name|recordsToWrite
decl_stmt|;
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|BufferedMutator
name|mutator
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|int
name|numBackReferencesPerRow
decl_stmt|;
specifier|protected
name|String
name|shortTaskId
decl_stmt|;
specifier|protected
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|protected
name|Counter
name|rowsWritten
decl_stmt|,
name|refsWritten
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|=
name|context
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|recordsToWrite
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|NUM_TO_WRITE_KEY
argument_list|,
name|NUM_TO_WRITE_DEFAULT
argument_list|)
expr_stmt|;
name|String
name|tableName
init|=
name|conf
operator|.
name|get
argument_list|(
name|TABLE_NAME_KEY
argument_list|,
name|TABLE_NAME_DEFAULT
argument_list|)
decl_stmt|;
name|numBackReferencesPerRow
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|NUM_BACKREFS_KEY
argument_list|,
name|NUM_BACKREFS_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mutator
operator|=
name|connection
operator|.
name|getBufferedMutator
argument_list|(
operator|new
name|BufferedMutatorParams
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|writeBufferSize
argument_list|(
literal|4
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|taskId
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"mapreduce.task.attempt.id"
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".+_m_(\\d+_\\d+)"
argument_list|)
operator|.
name|matcher
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Strange task ID: "
operator|+
name|taskId
argument_list|)
throw|;
block|}
name|shortTaskId
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|rowsWritten
operator|=
name|context
operator|.
name|getCounter
argument_list|(
name|Counters
operator|.
name|ROWS_WRITTEN
argument_list|)
expr_stmt|;
name|refsWritten
operator|=
name|context
operator|.
name|getCounter
argument_list|(
name|Counters
operator|.
name|REFERENCES_WRITTEN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cleanup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|mutator
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|map
parameter_list|(
name|NullWritable
name|key
parameter_list|,
name|NullWritable
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|suffix
init|=
literal|"/"
operator|+
name|shortTaskId
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[
literal|8
index|]
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|suffix
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|BLOCK_SIZE
init|=
call|(
name|int
call|)
argument_list|(
name|recordsToWrite
operator|/
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|recordsToWrite
condition|;
control|)
block|{
name|long
name|blockStart
init|=
name|i
decl_stmt|;
for|for
control|(
name|long
name|idxInBlock
init|=
literal|0
init|;
name|idxInBlock
operator|<
name|BLOCK_SIZE
operator|&&
name|i
operator|<
name|recordsToWrite
condition|;
name|idxInBlock
operator|++
operator|,
name|i
operator|++
control|)
block|{
name|long
name|byteSwapped
init|=
name|swapLong
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Bytes
operator|.
name|putLong
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|byteSwapped
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockStart
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numBackReferencesPerRow
condition|;
name|j
operator|++
control|)
block|{
name|long
name|referredRow
init|=
name|blockStart
operator|-
name|BLOCK_SIZE
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|Bytes
operator|.
name|putLong
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|swapLong
argument_list|(
name|referredRow
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY
argument_list|,
name|row
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
block|}
name|refsWritten
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|rowsWritten
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mutator
operator|.
name|mutate
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|context
operator|.
name|setStatus
argument_list|(
literal|"Written "
operator|+
name|i
operator|+
literal|"/"
operator|+
name|recordsToWrite
operator|+
literal|" records"
argument_list|)
expr_stmt|;
name|context
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
block|}
comment|// End of block, flush all of them before we start writing anything
comment|// pointing to these!
name|mutator
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|VerifyMapper
extends|extends
name|TableMapper
argument_list|<
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|>
block|{
specifier|static
specifier|final
name|BytesWritable
name|EMPTY
init|=
operator|new
name|BytesWritable
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|map
parameter_list|(
name|ImmutableBytesWritable
name|key
parameter_list|,
name|Result
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|BytesWritable
name|bwKey
init|=
operator|new
name|BytesWritable
argument_list|(
name|key
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|BytesWritable
name|bwVal
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|value
operator|.
name|listCells
argument_list|()
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|TEST_QUALIFIER
argument_list|,
literal|0
argument_list|,
name|TEST_QUALIFIER
operator|.
name|length
argument_list|,
name|kv
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
name|context
operator|.
name|write
argument_list|(
name|bwKey
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bwVal
operator|.
name|set
argument_list|(
name|kv
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
name|bwVal
argument_list|,
name|bwKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|VerifyReducer
extends|extends
name|Reducer
argument_list|<
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VerifyReducer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Counter
name|refsChecked
decl_stmt|;
specifier|private
name|Counter
name|rowsWritten
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|refsChecked
operator|=
name|context
operator|.
name|getCounter
argument_list|(
name|Counters
operator|.
name|REFERENCES_CHECKED
argument_list|)
expr_stmt|;
name|rowsWritten
operator|=
name|context
operator|.
name|getCounter
argument_list|(
name|Counters
operator|.
name|ROWS_WRITTEN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|reduce
parameter_list|(
name|BytesWritable
name|referredRow
parameter_list|,
name|Iterable
argument_list|<
name|BytesWritable
argument_list|>
name|referrers
parameter_list|,
name|VerifyReducer
operator|.
name|Context
name|ctx
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|boolean
name|gotOriginalRow
init|=
literal|false
decl_stmt|;
name|int
name|refCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BytesWritable
name|ref
range|:
name|referrers
control|)
block|{
if|if
condition|(
name|ref
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
assert|assert
operator|!
name|gotOriginalRow
assert|;
name|gotOriginalRow
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|refCount
operator|++
expr_stmt|;
block|}
block|}
name|refsChecked
operator|.
name|increment
argument_list|(
name|refCount
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|gotOriginalRow
condition|)
block|{
name|String
name|parsedRow
init|=
name|makeRowReadable
argument_list|(
name|referredRow
operator|.
name|getBytes
argument_list|()
argument_list|,
name|referredRow
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|binRow
init|=
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|referredRow
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|referredRow
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Reference error row "
operator|+
name|parsedRow
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|write
argument_list|(
operator|new
name|Text
argument_list|(
name|binRow
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|parsedRow
argument_list|)
argument_list|)
expr_stmt|;
name|rowsWritten
operator|.
name|increment
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|makeRowReadable
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|long
name|rowIdx
init|=
name|swapLong
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|bytes
argument_list|,
literal|8
argument_list|,
name|length
operator|-
literal|8
argument_list|)
decl_stmt|;
return|return
literal|"Row #"
operator|+
name|rowIdx
operator|+
literal|" suffix "
operator|+
name|suffix
return|;
block|}
block|}
specifier|protected
name|Job
name|doLoad
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|outputDir
init|=
name|getTestDir
argument_list|(
name|TEST_NAME
argument_list|,
literal|"load-output"
argument_list|)
decl_stmt|;
name|NMapInputFormat
operator|.
name|setNumMapTasks
argument_list|(
name|conf
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|NUM_MAP_TASKS_KEY
argument_list|,
name|NUM_MAP_TASKS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TABLE_NAME_KEY
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
name|TEST_NAME
operator|+
literal|" Load for "
operator|+
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|setMapperClass
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|NMapInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setJobScannerConf
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|addDependencyJars
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|addDependencyJars
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|AbstractHBaseTool
operator|.
name|class
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|initCredentials
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
specifier|protected
name|void
name|setMapperClass
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
name|job
operator|.
name|setMapperClass
argument_list|(
name|LoadMapper
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doVerify
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|outputDir
init|=
name|getTestDir
argument_list|(
name|TEST_NAME
argument_list|,
literal|"verify-output"
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
name|TEST_NAME
operator|+
literal|" Verification for "
operator|+
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|setJobScannerConf
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|TableMapReduceUtil
operator|.
name|initTableMapperJob
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|scan
argument_list|,
name|VerifyMapper
operator|.
name|class
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|addDependencyJars
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|AbstractHBaseTool
operator|.
name|class
argument_list|)
expr_stmt|;
name|int
name|scannerCaching
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"verify.scannercaching"
argument_list|,
name|SCANNER_CACHING
argument_list|)
decl_stmt|;
name|TableMapReduceUtil
operator|.
name|setScannerCaching
argument_list|(
name|job
argument_list|,
name|scannerCaching
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|VerifyReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|NUM_REDUCE_TASKS_KEY
argument_list|,
name|NUM_REDUCE_TASKS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|numOutputRecords
init|=
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|findCounter
argument_list|(
name|Counters
operator|.
name|ROWS_WRITTEN
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|numOutputRecords
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setJobScannerConf
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
comment|// Make sure scanners log something useful to make debugging possible.
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|ScannerCallable
operator|.
name|LOG_SCANNER_ACTIVITY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|lpr
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|NUM_TO_WRITE_KEY
argument_list|,
name|NUM_TO_WRITE_DEFAULT
argument_list|)
operator|/
literal|100
decl_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|TableRecordReaderImpl
operator|.
name|LOG_PER_ROW_COUNT
argument_list|,
operator|(
name|int
operator|)
name|lpr
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Path
name|getTestDir
parameter_list|(
name|String
name|testName
parameter_list|,
name|String
name|subdir
parameter_list|)
throws|throws
name|IOException
block|{
comment|//HBaseTestingUtility.getDataTestDirOnTestFs() has not been backported.
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|base
init|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|,
literal|"test-data"
argument_list|)
decl_stmt|;
name|String
name|randomStr
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
name|randomStr
argument_list|)
decl_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
return|return
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
name|testName
argument_list|)
argument_list|,
name|subdir
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadAndVerify
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|TEST_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|Admin
name|admin
init|=
name|getTestingUtil
argument_list|(
name|getConf
argument_list|()
argument_list|)
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|doLoad
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
name|doVerify
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
comment|// Only disable and drop if we succeeded to verify - otherwise it's useful
comment|// to leave it around for post-mortem
name|getTestingUtil
argument_list|(
name|getConf
argument_list|()
argument_list|)
operator|.
name|deleteTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" [-Doptions]<load|verify|loadAndVerify>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  Loads a table with row dependencies and verifies the dependency chains"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Options"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -Dloadmapper.table=<name>        Table to write/verify (default autogen)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -Dloadmapper.backrefs=<n>        Number of backreferences per row (default 50)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -Dloadmapper.num_to_write=<n>    Number of rows per mapper (default 100,000 per mapper)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -Dloadmapper.deleteAfter=<bool>  Delete after a successful verify (default true)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -Dloadmapper.numPresplits=<n>    Number of presplit regions to start with (default 40)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -Dloadmapper.map.tasks=<n>       Number of map tasks for load (default 200)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -Dverify.reduce.tasks=<n>        Number of reduce tasks for verify (default 35)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  -Dverify.scannercaching=<n>      Number hbase scanner caching rows to read (default 50)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
block|{
name|super
operator|.
name|processOptions
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
name|cmd
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
argument_list|<
literal|1
operator|||
name|args
operator|.
name|length
argument_list|>
literal|1
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Incorrect Number of args."
argument_list|)
throw|;
block|}
name|toRun
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|runTestFromCommandLine
parameter_list|()
throws|throws
name|Exception
block|{
name|IntegrationTestingUtility
operator|.
name|setUseDistributedCluster
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|doLoad
init|=
literal|false
decl_stmt|;
name|boolean
name|doVerify
init|=
literal|false
decl_stmt|;
name|boolean
name|doDelete
init|=
name|getConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"loadmapper.deleteAfter"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|numPresplits
init|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"loadmapper.numPresplits"
argument_list|,
literal|40
argument_list|)
decl_stmt|;
if|if
condition|(
name|toRun
operator|.
name|equals
argument_list|(
literal|"load"
argument_list|)
condition|)
block|{
name|doLoad
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|toRun
operator|.
name|equals
argument_list|(
literal|"verify"
argument_list|)
condition|)
block|{
name|doVerify
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|toRun
operator|.
name|equals
argument_list|(
literal|"loadAndVerify"
argument_list|)
condition|)
block|{
name|doLoad
operator|=
literal|true
expr_stmt|;
name|doVerify
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid argument "
operator|+
name|toRun
argument_list|)
expr_stmt|;
name|usage
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
comment|// create HTableDescriptor for specified table
name|TableName
name|table
init|=
name|getTablename
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|getConf
argument_list|()
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
if|if
condition|(
name|doLoad
condition|)
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|-
literal|1L
argument_list|)
argument_list|,
name|numPresplits
argument_list|)
expr_stmt|;
name|doLoad
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doVerify
condition|)
block|{
name|doVerify
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
if|if
condition|(
name|doDelete
condition|)
block|{
name|getTestingUtil
argument_list|(
name|getConf
argument_list|()
argument_list|)
operator|.
name|deleteTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getTablename
parameter_list|()
block|{
return|return
name|TableName
operator|.
name|valueOf
argument_list|(
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|TABLE_NAME_KEY
argument_list|,
name|TEST_NAME
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getColumnFamilies
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|IntegrationTestingUtility
operator|.
name|setUseDistributedCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|IntegrationTestLoadAndVerify
argument_list|()
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

