begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|test
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IntegrationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|AbstractHBaseTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|RecoverableZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZNodePaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|Code
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NoNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Perms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_comment
comment|/**  * An integration test which checks that the znodes in zookeeper and data in the FileSystem  * are protected for secure HBase deployments.  * This test is intended to be run on clusters with kerberos authorization for HBase and ZooKeeper.  *  * If hbase.security.authentication is not set to kerberos, the test does not run unless -f is  * specified which bypasses the check. It is recommended to always run with -f on secure clusters  * so that the test checks the actual end result, not the configuration.  *  * The test should be run as hbase user with kinit / TGT cached since it accesses HDFS.  *<p>  * Example usage:  *   hbase org.apache.hadoop.hbase.test.IntegrationTestZnodeACLs -h  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|IntegrationTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|IntegrationTestZKAndFSPermissions
extends|extends
name|AbstractHBaseTool
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IntegrationTestZKAndFSPermissions
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|superUser
decl_stmt|;
specifier|private
name|String
name|masterPrincipal
decl_stmt|;
specifier|private
name|boolean
name|isForce
decl_stmt|;
specifier|private
name|String
name|fsPerms
decl_stmt|;
specifier|private
name|boolean
name|skipFSCheck
decl_stmt|;
specifier|private
name|boolean
name|skipZKCheck
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FORCE_CHECK_ARG
init|=
literal|"f"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PRINCIPAL_ARG
init|=
literal|"p"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SUPERUSER_ARG
init|=
literal|"s"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FS_PERMS
init|=
literal|"fs_perms"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SKIP_CHECK_FS
init|=
literal|"skip_fs_check"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SKIP_CHECK_ZK
init|=
literal|"skip_zk_check"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addOptions
parameter_list|()
block|{
name|addOptNoArg
argument_list|(
name|FORCE_CHECK_ARG
argument_list|,
literal|"Whether to skip configuration lookup and assume a secure setup"
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|PRINCIPAL_ARG
argument_list|,
literal|"The principal for zk authorization"
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|SUPERUSER_ARG
argument_list|,
literal|"The principal for super user"
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|FS_PERMS
argument_list|,
literal|"FS permissions, ex. 700, 750, etc. Defaults to 700"
argument_list|)
expr_stmt|;
name|addOptNoArg
argument_list|(
name|SKIP_CHECK_FS
argument_list|,
literal|"Whether to skip checking FS permissions"
argument_list|)
expr_stmt|;
name|addOptNoArg
argument_list|(
name|SKIP_CHECK_ZK
argument_list|,
literal|"Whether to skip checking ZK permissions"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
block|{
name|isForce
operator|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|FORCE_CHECK_ARG
argument_list|)
expr_stmt|;
name|masterPrincipal
operator|=
name|getShortUserName
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.master.kerberos.principal"
argument_list|)
argument_list|)
expr_stmt|;
name|superUser
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|SUPERUSER_ARG
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.superuser"
argument_list|)
argument_list|)
expr_stmt|;
name|masterPrincipal
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|PRINCIPAL_ARG
argument_list|,
name|masterPrincipal
argument_list|)
expr_stmt|;
name|fsPerms
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|FS_PERMS
argument_list|,
literal|"700"
argument_list|)
expr_stmt|;
name|skipFSCheck
operator|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|SKIP_CHECK_FS
argument_list|)
expr_stmt|;
name|skipZKCheck
operator|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|SKIP_CHECK_ZK
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getShortUserName
parameter_list|(
name|String
name|principal
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|principal
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|principal
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'/'
operator|||
name|principal
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'@'
condition|)
block|{
return|return
name|principal
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
return|;
block|}
block|}
return|return
name|principal
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isForce
condition|)
block|{
if|if
condition|(
operator|!
literal|"kerberos"
operator|.
name|equalsIgnoreCase
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.security.authentication"
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"hbase.security.authentication is not kerberos, and -f is not supplied. Skip "
operator|+
literal|"running the test"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
if|if
condition|(
operator|!
name|skipZKCheck
condition|)
block|{
name|testZNodeACLs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|skipFSCheck
condition|)
block|{
name|testFSPerms
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|void
name|testZNodeACLs
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|ZKWatcher
name|watcher
init|=
operator|new
name|ZKWatcher
argument_list|(
name|conf
argument_list|,
literal|"IntegrationTestZnodeACLs"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RecoverableZooKeeper
name|zk
init|=
name|ZKUtil
operator|.
name|connect
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|watcher
argument_list|)
decl_stmt|;
name|String
name|baseZNode
init|=
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|baseZNode
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"***********************************************************************************"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking ZK permissions, root znode: "
operator|+
name|baseZNode
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"***********************************************************************************"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|checkZnodePermsRecursive
argument_list|(
name|watcher
argument_list|,
name|zk
argument_list|,
name|baseZNode
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking ZK permissions: SUCCESS"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkZnodePermsRecursive
parameter_list|(
name|ZKWatcher
name|watcher
parameter_list|,
name|RecoverableZooKeeper
name|zk
parameter_list|,
name|String
name|znode
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|boolean
name|expectedWorldReadable
init|=
name|watcher
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|isClientReadable
argument_list|(
name|znode
argument_list|)
decl_stmt|;
name|assertZnodePerms
argument_list|(
name|zk
argument_list|,
name|znode
argument_list|,
name|expectedWorldReadable
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|zk
operator|.
name|getChildren
argument_list|(
name|znode
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|checkZnodePermsRecursive
argument_list|(
name|watcher
argument_list|,
name|zk
argument_list|,
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|znode
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
comment|// if we are not authenticated for listChildren, it is fine.
if|if
condition|(
name|ke
operator|.
name|code
argument_list|()
operator|!=
name|Code
operator|.
name|NOAUTH
operator|&&
name|ke
operator|.
name|code
argument_list|()
operator|!=
name|Code
operator|.
name|NONODE
condition|)
block|{
throw|throw
name|ke
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|assertZnodePerms
parameter_list|(
name|RecoverableZooKeeper
name|zk
parameter_list|,
name|String
name|znode
parameter_list|,
name|boolean
name|expectedWorldReadable
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ACL
argument_list|>
name|acls
decl_stmt|;
try|try
block|{
name|acls
operator|=
name|zk
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|getACL
argument_list|(
name|znode
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception for missing znode"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
comment|// the znode is deleted. Probably it was a temporary znode (like RIT).
return|return;
block|}
name|String
index|[]
name|superUsers
init|=
name|superUser
operator|==
literal|null
condition|?
literal|null
else|:
name|superUser
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking ACLs for znode znode:"
operator|+
name|znode
operator|+
literal|" acls:"
operator|+
name|acls
argument_list|)
expr_stmt|;
for|for
control|(
name|ACL
name|acl
range|:
name|acls
control|)
block|{
name|int
name|perms
init|=
name|acl
operator|.
name|getPerms
argument_list|()
decl_stmt|;
name|Id
name|id
init|=
name|acl
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// We should only set at most 3 possible ACL for 3 Ids. One for everyone, one for superuser
comment|// and one for the hbase user
if|if
condition|(
name|Ids
operator|.
name|ANYONE_ID_UNSAFE
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
comment|// everyone should be set only if we are expecting this znode to be world readable
name|assertTrue
argument_list|(
name|expectedWorldReadable
argument_list|)
expr_stmt|;
comment|// assert that anyone can only read
name|assertEquals
argument_list|(
name|perms
argument_list|,
name|Perms
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|superUsers
operator|!=
literal|null
operator|&&
name|ZKWatcher
operator|.
name|isSuperUserId
argument_list|(
name|superUsers
argument_list|,
name|id
argument_list|)
condition|)
block|{
comment|// assert that super user has all the permissions
name|assertEquals
argument_list|(
name|perms
argument_list|,
name|Perms
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|new
name|Id
argument_list|(
literal|"sasl"
argument_list|,
name|masterPrincipal
argument_list|)
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
comment|// hbase.master.kerberos.principal?
name|assertEquals
argument_list|(
name|perms
argument_list|,
name|Perms
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"An ACL is found which is not expected for the znode:"
operator|+
name|znode
operator|+
literal|" , ACL:"
operator|+
name|acl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testFSPerms
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"***********************************************************************************"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking FS permissions for root dir:"
operator|+
name|rootDir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"***********************************************************************************"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|short
name|expectedPerms
init|=
name|Short
operator|.
name|valueOf
argument_list|(
name|fsPerms
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|FsPermission
operator|.
name|createImmutable
argument_list|(
name|expectedPerms
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|rootDir
argument_list|)
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking FS permissions: SUCCESS"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|IntegrationTestingUtility
operator|.
name|setUseDistributedCluster
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|IntegrationTestZKAndFSPermissions
name|tool
init|=
operator|new
name|IntegrationTestZKAndFSPermissions
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|configuration
argument_list|,
name|tool
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

