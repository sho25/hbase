begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RegionSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Partitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test Bulk Load and MR on a distributed cluster.  * It starts an MR job that creates linked chains  *  * The format of rows is like this:  * Row Key -> Long  *  * L:<< Chain Id>> -> Row Key of the next link in the chain  * S:<< Chain Id>> -> The step in the chain that his link is.  * D:<< Chain Id>> -> Random Data.  *  * All chains start on row 0.  * All rk's are> 0.  *  * After creating the linked lists they are walked over using a TableMapper based Mapreduce Job.  *  * There are a few options exposed:  *  * hbase.IntegrationTestBulkLoad.chainLength  * The number of rows that will be part of each and every chain.  *  * hbase.IntegrationTestBulkLoad.numMaps  * The number of mappers that will be run.  Each mapper creates on linked list chain.  *  * hbase.IntegrationTestBulkLoad.numImportRounds  * How many jobs will be run to create linked lists.  *  * hbase.IntegrationTestBulkLoad.tableName  * The name of the table.  *  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|IntegrationTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|IntegrationTestBulkLoad
extends|extends
name|IntegrationTestBase
block|{
specifier|private
specifier|static
name|byte
index|[]
name|CHAIN_FAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"L"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|SORT_FAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"S"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|DATA_FAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"D"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|CHAIN_LENGTH_KEY
init|=
literal|"hbase.IntegrationTestBulkLoad.chainLength"
decl_stmt|;
specifier|private
specifier|static
name|int
name|CHAIN_LENGTH
init|=
literal|500000
decl_stmt|;
specifier|private
specifier|static
name|String
name|NUM_MAPS_KEY
init|=
literal|"hbase.IntegrationTestBulkLoad.numMaps"
decl_stmt|;
specifier|private
specifier|static
name|int
name|NUM_MAPS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
name|String
name|NUM_IMPORT_ROUNDS_KEY
init|=
literal|"hbase.IntegrationTestBulkLoad.numImportRounds"
decl_stmt|;
specifier|private
specifier|static
name|int
name|NUM_IMPORT_ROUNDS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
name|String
name|TABLE_NAME_KEY
init|=
literal|"hbase.IntegrationTestBulkLoad.tableName"
decl_stmt|;
specifier|private
specifier|static
name|String
name|TABLE_NAME
init|=
literal|"IntegrationTestBulkLoad"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testBulkLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|setupTable
argument_list|()
expr_stmt|;
name|int
name|numImportRounds
init|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|NUM_IMPORT_ROUNDS_KEY
argument_list|,
name|NUM_IMPORT_ROUNDS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numImportRounds
condition|;
name|i
operator|++
control|)
block|{
name|runLinkedListMRJob
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|runCheck
argument_list|()
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
index|[]
name|getSplits
parameter_list|(
name|int
name|numRegions
parameter_list|)
block|{
name|RegionSplitter
operator|.
name|UniformSplit
name|split
init|=
operator|new
name|RegionSplitter
operator|.
name|UniformSplit
argument_list|()
decl_stmt|;
name|split
operator|.
name|setFirstRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|split
operator|.
name|setLastRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|split
operator|.
name|split
argument_list|(
name|numRegions
argument_list|)
return|;
block|}
specifier|private
name|void
name|setupTable
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|util
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|getTablename
argument_list|()
argument_list|)
condition|)
block|{
name|util
operator|.
name|deleteTable
argument_list|(
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|util
operator|.
name|createTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getTablename
argument_list|()
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|CHAIN_FAM
block|,
name|SORT_FAM
block|,
name|DATA_FAM
block|}
argument_list|,
name|getSplits
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runLinkedListMRJob
parameter_list|(
name|int
name|iteration
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|jobName
init|=
name|IntegrationTestBulkLoad
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" - "
operator|+
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|util
operator|.
name|getDataTestDirOnTestFS
argument_list|(
name|getTablename
argument_list|()
operator|+
literal|"-"
operator|+
name|iteration
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|getTablename
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapreduce.map.speculative"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapreduce.reduce.speculative"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
name|jobName
argument_list|)
expr_stmt|;
comment|// set the input format so that we can create map tasks with no data input.
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|RandomInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Set the mapper classes.
name|job
operator|.
name|setMapperClass
argument_list|(
name|LinkedListCreationMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|KeyValue
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Use the identity reducer
comment|// So nothing to do here.
comment|// Set this jar.
name|job
operator|.
name|setJarByClass
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set where to place the hfiles.
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|p
argument_list|)
expr_stmt|;
comment|// Configure the partitioner and other things needed for HFileOutputFormat.
name|HFileOutputFormat
operator|.
name|configureIncrementalLoad
argument_list|(
name|job
argument_list|,
name|table
argument_list|)
expr_stmt|;
comment|// Run the job making sure it works.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a new loader.
name|LoadIncrementalHFiles
name|loader
init|=
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Load the HFiles in.
name|loader
operator|.
name|doBulkLoad
argument_list|(
name|p
argument_list|,
name|table
argument_list|)
expr_stmt|;
comment|// Delete the files.
name|util
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Class to generate splits.  Each split gets a dummy split file.  The associated    * RecordReader generates a single random number.    *    * This class is adapted from Hadoop tests.    */
specifier|static
class|class
name|RandomInputFormat
extends|extends
name|InputFormat
argument_list|<
name|Text
argument_list|,
name|LongWritable
argument_list|>
block|{
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|InputSplit
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numSplits
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|NUM_MAPS_KEY
argument_list|,
name|NUM_MAPS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSplits
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|FileSplit
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|,
literal|"dummy-split-"
operator|+
name|i
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * RecordReader that doesn't read anything.  Instead it generates a single random number.      * This is useful for debugging or starting map tasks with no data inpput.      *      * This class is adapted from Hadoop tests.      */
specifier|static
class|class
name|RandomRecordReader
extends|extends
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|LongWritable
argument_list|>
block|{
name|Path
name|name
decl_stmt|;
name|Text
name|key
init|=
literal|null
decl_stmt|;
name|LongWritable
name|value
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
specifier|public
name|RandomRecordReader
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|name
operator|=
name|p
expr_stmt|;
block|}
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{        }
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|key
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|key
operator|.
name|set
argument_list|(
name|name
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
name|value
operator|.
name|set
argument_list|(
operator|new
name|Random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|Text
name|getCurrentKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|LongWritable
name|getCurrentValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{       }
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
literal|0.0f
return|;
block|}
block|}
specifier|public
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|LongWritable
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
operator|new
name|RandomRecordReader
argument_list|(
operator|(
operator|(
name|FileSplit
operator|)
name|split
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Mapper that creates a linked list of KeyValues.    *    * Each map task generates one linked list.    * All lists start on row key 0L.    * All lists should be CHAIN_LENGTH long.    */
specifier|public
specifier|static
class|class
name|LinkedListCreationMapper
extends|extends
name|Mapper
argument_list|<
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|,
name|KeyValue
argument_list|>
block|{
specifier|private
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|protected
name|void
name|map
parameter_list|(
name|Text
name|key
parameter_list|,
name|LongWritable
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|chainId
init|=
name|value
operator|.
name|get
argument_list|()
decl_stmt|;
name|byte
index|[]
name|chainIdArray
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|chainId
argument_list|)
decl_stmt|;
name|long
name|currentRow
init|=
literal|0
decl_stmt|;
name|long
name|nextRow
init|=
name|Math
operator|.
name|abs
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|chainLength
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|CHAIN_LENGTH_KEY
argument_list|,
name|CHAIN_LENGTH
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chainLength
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|rk
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|currentRow
argument_list|)
decl_stmt|;
comment|// Next link in the chain.
name|KeyValue
name|linkKv
init|=
operator|new
name|KeyValue
argument_list|(
name|rk
argument_list|,
name|CHAIN_FAM
argument_list|,
name|chainIdArray
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|nextRow
argument_list|)
argument_list|)
decl_stmt|;
comment|// What link in the chain this is.
name|KeyValue
name|sortKv
init|=
operator|new
name|KeyValue
argument_list|(
name|rk
argument_list|,
name|SORT_FAM
argument_list|,
name|chainIdArray
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
comment|// Added data so that large stores are created.
name|KeyValue
name|dataKv
init|=
operator|new
name|KeyValue
argument_list|(
name|rk
argument_list|,
name|DATA_FAM
argument_list|,
name|chainIdArray
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|50
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Emit the key values.
name|context
operator|.
name|write
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|rk
argument_list|)
argument_list|,
name|linkKv
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|rk
argument_list|)
argument_list|,
name|sortKv
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|rk
argument_list|)
argument_list|,
name|dataKv
argument_list|)
expr_stmt|;
comment|// Move to the next row.
name|currentRow
operator|=
name|nextRow
expr_stmt|;
name|nextRow
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Writable class used as the key to group links in the linked list.    *    * Used as the key emited from a pass over the table.    */
specifier|public
specifier|static
class|class
name|LinkKey
implements|implements
name|WritableComparable
argument_list|<
name|LinkKey
argument_list|>
block|{
specifier|private
name|Long
name|chainId
decl_stmt|;
specifier|public
name|Long
name|getOrder
parameter_list|()
block|{
return|return
name|order
return|;
block|}
specifier|public
name|Long
name|getChainId
parameter_list|()
block|{
return|return
name|chainId
return|;
block|}
specifier|private
name|Long
name|order
decl_stmt|;
specifier|public
name|LinkKey
parameter_list|()
block|{}
specifier|public
name|LinkKey
parameter_list|(
name|long
name|chainId
parameter_list|,
name|long
name|order
parameter_list|)
block|{
name|this
operator|.
name|chainId
operator|=
name|chainId
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|LinkKey
name|linkKey
parameter_list|)
block|{
name|int
name|res
init|=
name|getChainId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|linkKey
operator|.
name|getChainId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|0
condition|)
block|{
name|res
operator|=
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|linkKey
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|dataOutput
argument_list|,
name|chainId
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|dataOutput
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
name|chainId
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
name|order
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Writable used as the value emitted from a pass over the hbase table.    */
specifier|public
specifier|static
class|class
name|LinkChain
implements|implements
name|WritableComparable
argument_list|<
name|LinkChain
argument_list|>
block|{
specifier|public
name|Long
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
specifier|public
name|Long
name|getRk
parameter_list|()
block|{
return|return
name|rk
return|;
block|}
specifier|public
name|LinkChain
parameter_list|()
block|{}
specifier|public
name|LinkChain
parameter_list|(
name|Long
name|rk
parameter_list|,
name|Long
name|next
parameter_list|)
block|{
name|this
operator|.
name|rk
operator|=
name|rk
expr_stmt|;
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
specifier|private
name|Long
name|rk
decl_stmt|;
specifier|private
name|Long
name|next
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|LinkChain
name|linkChain
parameter_list|)
block|{
name|int
name|res
init|=
name|getRk
argument_list|()
operator|.
name|compareTo
argument_list|(
name|linkChain
operator|.
name|getRk
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|0
condition|)
block|{
name|res
operator|=
name|getNext
argument_list|()
operator|.
name|compareTo
argument_list|(
name|linkChain
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|dataOutput
argument_list|,
name|rk
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|dataOutput
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
name|rk
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
name|next
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Class to figure out what partition to send a link in the chain to.  This is based upon    * the linkKey's ChainId.    */
specifier|public
specifier|static
class|class
name|NaturalKeyPartitioner
extends|extends
name|Partitioner
argument_list|<
name|LinkKey
argument_list|,
name|LinkChain
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|getPartition
parameter_list|(
name|LinkKey
name|linkKey
parameter_list|,
name|LinkChain
name|linkChain
parameter_list|,
name|int
name|numPartitions
parameter_list|)
block|{
name|int
name|hash
init|=
name|linkKey
operator|.
name|getChainId
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
return|return
name|hash
operator|%
name|numPartitions
return|;
block|}
block|}
comment|/**    * Comparator used to figure out if a linkKey should be grouped together.  This is based upon the    * linkKey's ChainId.    */
specifier|public
specifier|static
class|class
name|NaturalKeyGroupingComparator
extends|extends
name|WritableComparator
block|{
specifier|protected
name|NaturalKeyGroupingComparator
parameter_list|()
block|{
name|super
argument_list|(
name|LinkKey
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|WritableComparable
name|w1
parameter_list|,
name|WritableComparable
name|w2
parameter_list|)
block|{
name|LinkKey
name|k1
init|=
operator|(
name|LinkKey
operator|)
name|w1
decl_stmt|;
name|LinkKey
name|k2
init|=
operator|(
name|LinkKey
operator|)
name|w2
decl_stmt|;
return|return
name|k1
operator|.
name|getChainId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|k2
operator|.
name|getChainId
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Comparator used to order linkKeys so that they are passed to a reducer in order.  This is based    * upon linkKey ChainId and Order.    */
specifier|public
specifier|static
class|class
name|CompositeKeyComparator
extends|extends
name|WritableComparator
block|{
specifier|protected
name|CompositeKeyComparator
parameter_list|()
block|{
name|super
argument_list|(
name|LinkKey
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|WritableComparable
name|w1
parameter_list|,
name|WritableComparable
name|w2
parameter_list|)
block|{
name|LinkKey
name|k1
init|=
operator|(
name|LinkKey
operator|)
name|w1
decl_stmt|;
name|LinkKey
name|k2
init|=
operator|(
name|LinkKey
operator|)
name|w2
decl_stmt|;
return|return
name|k1
operator|.
name|compareTo
argument_list|(
name|k2
argument_list|)
return|;
block|}
block|}
comment|/**    * Mapper to pass over the table.    *    * For every row there could be multiple chains that landed on this row. So emit a linkKey    * and value for each.    */
specifier|public
specifier|static
class|class
name|LinkedListCheckingMapper
extends|extends
name|TableMapper
argument_list|<
name|LinkKey
argument_list|,
name|LinkChain
argument_list|>
block|{
specifier|protected
name|void
name|map
parameter_list|(
name|ImmutableBytesWritable
name|key
parameter_list|,
name|Result
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|longRk
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|value
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|value
operator|.
name|getFamilyMap
argument_list|(
name|CHAIN_FAM
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|chainId
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|next
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Cell
name|c
init|=
name|value
operator|.
name|getColumn
argument_list|(
name|SORT_FAM
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|order
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|getValueArray
argument_list|(
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|write
argument_list|(
operator|new
name|LinkKey
argument_list|(
name|chainId
argument_list|,
name|order
argument_list|)
argument_list|,
operator|new
name|LinkChain
argument_list|(
name|longRk
argument_list|,
name|next
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Class that does the actual checking of the links.    *    * All links in the chain should be grouped and sorted when sent to this class.  Then the chain    * will be traversed making sure that no link is missing and that the chain is the correct length.    *    * This will throw an exception if anything is not correct.  That causes the job to fail if any    * data is corrupt.    */
specifier|public
specifier|static
class|class
name|LinkedListCheckingReducer
extends|extends
name|Reducer
argument_list|<
name|LinkKey
argument_list|,
name|LinkChain
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
specifier|protected
name|void
name|reduce
parameter_list|(
name|LinkKey
name|key
parameter_list|,
name|Iterable
argument_list|<
name|LinkChain
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|java
operator|.
name|lang
operator|.
name|InterruptedException
block|{
name|long
name|next
init|=
operator|-
literal|1L
decl_stmt|;
name|long
name|count
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|LinkChain
name|lc
range|:
name|values
control|)
block|{
if|if
condition|(
name|next
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|lc
operator|.
name|getRk
argument_list|()
operator|!=
literal|0L
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Chains should all start at 0 rk"
argument_list|)
throw|;
name|next
operator|=
name|lc
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|next
operator|!=
name|lc
operator|.
name|getRk
argument_list|()
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Missing a link in the chain. Expecthing "
operator|+
name|next
operator|+
literal|" got "
operator|+
name|lc
operator|.
name|getRk
argument_list|()
argument_list|)
throw|;
name|next
operator|=
name|lc
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
name|int
name|expectedChainLen
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|CHAIN_LENGTH_KEY
argument_list|,
name|CHAIN_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
name|expectedChainLen
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Chain wasn't the correct length.  Expected "
operator|+
name|expectedChainLen
operator|+
literal|" got "
operator|+
name|count
argument_list|)
throw|;
block|}
block|}
comment|/**    * After adding data to the table start a mr job to    * @throws IOException    * @throws ClassNotFoundException    * @throws InterruptedException    */
specifier|private
name|void
name|runCheck
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|String
name|jobName
init|=
name|getTablename
argument_list|()
operator|+
literal|"_check"
operator|+
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
name|util
operator|.
name|getDataTestDirOnTestFS
argument_list|(
name|jobName
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setPartitionerClass
argument_list|(
name|NaturalKeyPartitioner
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setGroupingComparatorClass
argument_list|(
name|NaturalKeyGroupingComparator
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setSortComparatorClass
argument_list|(
name|CompositeKeyComparator
operator|.
name|class
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|CHAIN_FAM
argument_list|)
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|SORT_FAM
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|s
operator|.
name|setCacheBlocks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|s
operator|.
name|setBatch
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|initTableMapperJob
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getTablename
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Scan
argument_list|()
argument_list|,
name|LinkedListCheckingMapper
operator|.
name|class
argument_list|,
name|LinkKey
operator|.
name|class
argument_list|,
name|LinkChain
operator|.
name|class
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|LinkedListCheckingReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the files.
name|util
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|=
name|getTestingUtil
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|util
operator|.
name|initializeCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Scale this up on a real cluster
if|if
condition|(
name|util
operator|.
name|isDistributedCluster
argument_list|()
condition|)
block|{
name|util
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setIfUnset
argument_list|(
name|NUM_MAPS_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|util
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServersSize
argument_list|()
operator|*
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|util
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setIfUnset
argument_list|(
name|NUM_IMPORT_ROUNDS_KEY
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|util
operator|.
name|startMiniMapReduceCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|After
annotation|@
name|Override
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|restoreCluster
argument_list|()
expr_stmt|;
name|util
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|runTestFromCommandLine
parameter_list|()
throws|throws
name|Exception
block|{
name|runCheck
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTablename
parameter_list|()
block|{
return|return
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|TABLE_NAME_KEY
argument_list|,
name|TABLE_NAME
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getColumnFamilies
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|IntegrationTestingUtility
operator|.
name|setUseDistributedCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|IntegrationTestBulkLoad
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

