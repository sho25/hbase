begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Consistency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IntegrationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
operator|.
name|LoadIncrementalHFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RegionSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Partitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Test Bulk Load and MR on a distributed cluster.  * It starts an MR job that creates linked chains  *  * The format of rows is like this:  * Row Key -> Long  *  * L:<< Chain Id>> -> Row Key of the next link in the chain  * S:<< Chain Id>> -> The step in the chain that his link is.  * D:<< Chain Id>> -> Random Data.  *  * All chains start on row 0.  * All rk's are> 0.  *  * After creating the linked lists they are walked over using a TableMapper based Mapreduce Job.  *  * There are a few options exposed:  *  * hbase.IntegrationTestBulkLoad.chainLength  * The number of rows that will be part of each and every chain.  *  * hbase.IntegrationTestBulkLoad.numMaps  * The number of mappers that will be run.  Each mapper creates on linked list chain.  *  * hbase.IntegrationTestBulkLoad.numImportRounds  * How many jobs will be run to create linked lists.  *  * hbase.IntegrationTestBulkLoad.tableName  * The name of the table.  *  * hbase.IntegrationTestBulkLoad.replicaCount  * How many region replicas to configure for the table under test.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|IntegrationTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|IntegrationTestBulkLoad
extends|extends
name|IntegrationTestBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IntegrationTestBulkLoad
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CHAIN_FAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"L"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|SORT_FAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"S"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DATA_FAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"D"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|CHAIN_LENGTH_KEY
init|=
literal|"hbase.IntegrationTestBulkLoad.chainLength"
decl_stmt|;
specifier|private
specifier|static
name|int
name|CHAIN_LENGTH
init|=
literal|500000
decl_stmt|;
specifier|private
specifier|static
name|String
name|NUM_MAPS_KEY
init|=
literal|"hbase.IntegrationTestBulkLoad.numMaps"
decl_stmt|;
specifier|private
specifier|static
name|int
name|NUM_MAPS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
name|String
name|NUM_IMPORT_ROUNDS_KEY
init|=
literal|"hbase.IntegrationTestBulkLoad.numImportRounds"
decl_stmt|;
specifier|private
specifier|static
name|int
name|NUM_IMPORT_ROUNDS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
name|String
name|ROUND_NUM_KEY
init|=
literal|"hbase.IntegrationTestBulkLoad.roundNum"
decl_stmt|;
specifier|private
specifier|static
name|String
name|TABLE_NAME_KEY
init|=
literal|"hbase.IntegrationTestBulkLoad.tableName"
decl_stmt|;
specifier|private
specifier|static
name|String
name|TABLE_NAME
init|=
literal|"IntegrationTestBulkLoad"
decl_stmt|;
specifier|private
specifier|static
name|String
name|NUM_REPLICA_COUNT_KEY
init|=
literal|"hbase.IntegrationTestBulkLoad.replicaCount"
decl_stmt|;
specifier|private
specifier|static
name|int
name|NUM_REPLICA_COUNT_DEFAULT
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPT_LOAD
init|=
literal|"load"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPT_CHECK
init|=
literal|"check"
decl_stmt|;
specifier|private
name|boolean
name|load
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|check
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
class|class
name|SlowMeCoproScanOperations
implements|implements
name|RegionCoprocessor
implements|,
name|RegionObserver
block|{
specifier|static
specifier|final
name|AtomicLong
name|sleepTime
init|=
operator|new
name|AtomicLong
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|AtomicLong
name|countOfNext
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicLong
name|countOfOpen
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|SlowMeCoproScanOperations
parameter_list|()
block|{}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preScannerOpen
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|countOfOpen
operator|.
name|incrementAndGet
argument_list|()
operator|==
literal|2
condition|)
block|{
comment|//slowdown openScanner randomly
name|slowdownCode
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preScannerNext
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|InternalScanner
name|s
parameter_list|,
specifier|final
name|List
argument_list|<
name|Result
argument_list|>
name|results
parameter_list|,
specifier|final
name|int
name|limit
parameter_list|,
specifier|final
name|boolean
name|hasMore
parameter_list|)
throws|throws
name|IOException
block|{
comment|//this will slow down a certain next operation if the conditions are met. The slowness
comment|//will allow the call to go to a replica
name|countOfNext
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|countOfNext
operator|.
name|get
argument_list|()
operator|==
literal|0
operator|||
name|countOfNext
operator|.
name|get
argument_list|()
operator|==
literal|4
condition|)
block|{
name|slowdownCode
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|slowdownCode
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getReplicaId
argument_list|()
operator|==
literal|0
condition|)
block|{
try|try
block|{
if|if
condition|(
name|sleepTime
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping for "
operator|+
name|sleepTime
operator|.
name|get
argument_list|()
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e1
operator|.
name|toString
argument_list|()
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Modify table {@code getTableName()} to carry {@link SlowMeCoproScanOperations}.    */
specifier|private
name|void
name|installSlowingCoproc
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|replicaCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|NUM_REPLICA_COUNT_KEY
argument_list|,
name|NUM_REPLICA_COUNT_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicaCount
operator|==
name|NUM_REPLICA_COUNT_DEFAULT
condition|)
return|return;
name|TableName
name|t
init|=
name|getTablename
argument_list|()
decl_stmt|;
name|Admin
name|admin
init|=
name|util
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|TableDescriptor
name|desc
init|=
name|admin
operator|.
name|getDescriptor
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|desc
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setCoprocessor
argument_list|(
name|SlowMeCoproScanOperations
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseTestingUtility
operator|.
name|modifyTableSync
argument_list|(
name|admin
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBulkLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|runLoad
argument_list|()
expr_stmt|;
name|installSlowingCoproc
argument_list|()
expr_stmt|;
name|runCheckWithRetry
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|runLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|setupTable
argument_list|()
expr_stmt|;
name|int
name|numImportRounds
init|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|NUM_IMPORT_ROUNDS_KEY
argument_list|,
name|NUM_IMPORT_ROUNDS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running load with numIterations:"
operator|+
name|numImportRounds
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numImportRounds
condition|;
name|i
operator|++
control|)
block|{
name|runLinkedListMRJob
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|byte
index|[]
index|[]
name|getSplits
parameter_list|(
name|int
name|numRegions
parameter_list|)
block|{
name|RegionSplitter
operator|.
name|UniformSplit
name|split
init|=
operator|new
name|RegionSplitter
operator|.
name|UniformSplit
argument_list|()
decl_stmt|;
name|split
operator|.
name|setFirstRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|split
operator|.
name|setLastRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|split
operator|.
name|split
argument_list|(
name|numRegions
argument_list|)
return|;
block|}
specifier|private
name|void
name|setupTable
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|util
operator|.
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|getTablename
argument_list|()
argument_list|)
condition|)
block|{
name|util
operator|.
name|deleteTable
argument_list|(
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|util
operator|.
name|createTable
argument_list|(
name|getTablename
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|CHAIN_FAM
block|,
name|SORT_FAM
block|,
name|DATA_FAM
block|}
argument_list|,
name|getSplits
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|replicaCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|NUM_REPLICA_COUNT_KEY
argument_list|,
name|NUM_REPLICA_COUNT_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicaCount
operator|==
name|NUM_REPLICA_COUNT_DEFAULT
condition|)
return|return;
name|TableName
name|t
init|=
name|getTablename
argument_list|()
decl_stmt|;
name|HBaseTestingUtility
operator|.
name|setReplicas
argument_list|(
name|util
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|t
argument_list|,
name|replicaCount
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runLinkedListMRJob
parameter_list|(
name|int
name|iteration
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|jobName
init|=
name|IntegrationTestBulkLoad
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" - "
operator|+
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|ImportTsv
operator|.
name|BULK_OUTPUT_CONF_KEY
argument_list|)
operator|==
literal|null
condition|)
block|{
name|p
operator|=
name|util
operator|.
name|getDataTestDirOnTestFS
argument_list|(
name|getTablename
argument_list|()
operator|+
literal|"-"
operator|+
name|iteration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|ImportTsv
operator|.
name|BULK_OUTPUT_CONF_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapreduce.map.speculative"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapreduce.reduce.speculative"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ROUND_NUM_KEY
argument_list|,
name|iteration
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
name|jobName
argument_list|)
expr_stmt|;
comment|// set the input format so that we can create map tasks with no data input.
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|ITBulkLoadInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Set the mapper classes.
name|job
operator|.
name|setMapperClass
argument_list|(
name|LinkedListCreationMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|ImmutableBytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|KeyValue
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Use the identity reducer
comment|// So nothing to do here.
comment|// Set this jar.
name|job
operator|.
name|setJarByClass
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set where to place the hfiles.
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|p
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|;
name|Table
name|table
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|getTablename
argument_list|()
argument_list|)
init|;
name|RegionLocator
name|regionLocator
operator|=
name|conn
operator|.
name|getRegionLocator
argument_list|(
name|getTablename
argument_list|()
argument_list|)
init|)
block|{
comment|// Configure the partitioner and other things needed for HFileOutputFormat.
name|HFileOutputFormat2
operator|.
name|configureIncrementalLoad
argument_list|(
name|job
argument_list|,
name|table
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|regionLocator
argument_list|)
expr_stmt|;
comment|// Run the job making sure it works.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a new loader.
name|LoadIncrementalHFiles
name|loader
init|=
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Load the HFiles in.
name|loader
operator|.
name|doBulkLoad
argument_list|(
name|p
argument_list|,
name|admin
argument_list|,
name|table
argument_list|,
name|regionLocator
argument_list|)
expr_stmt|;
block|}
comment|// Delete the files.
name|util
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|EmptySplit
extends|extends
name|InputSplit
implements|implements
name|Writable
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{ }
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
literal|0L
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|FixedRecordReader
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|K
index|[]
name|keys
decl_stmt|;
specifier|private
name|V
index|[]
name|values
decl_stmt|;
specifier|public
name|FixedRecordReader
parameter_list|(
name|K
index|[]
name|keys
parameter_list|,
name|V
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|keys
operator|=
name|keys
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{ }
annotation|@
name|Override
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
operator|++
name|index
operator|<
name|keys
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|getCurrentKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|keys
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|getCurrentValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|values
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
operator|(
name|float
operator|)
name|index
operator|/
name|keys
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
block|}
specifier|public
specifier|static
class|class
name|ITBulkLoadInputFormat
extends|extends
name|InputFormat
argument_list|<
name|LongWritable
argument_list|,
name|LongWritable
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|numSplits
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|NUM_MAPS_KEY
argument_list|,
name|NUM_MAPS
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numSplits
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSplits
condition|;
operator|++
name|i
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|EmptySplit
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|LongWritable
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|taskId
init|=
name|context
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|int
name|numMapTasks
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|NUM_MAPS_KEY
argument_list|,
name|NUM_MAPS
argument_list|)
decl_stmt|;
name|int
name|numIterations
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|NUM_IMPORT_ROUNDS_KEY
argument_list|,
name|NUM_IMPORT_ROUNDS
argument_list|)
decl_stmt|;
name|int
name|iteration
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|ROUND_NUM_KEY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|taskId
operator|=
name|taskId
operator|+
name|iteration
operator|*
name|numMapTasks
expr_stmt|;
name|numMapTasks
operator|=
name|numMapTasks
operator|*
name|numIterations
expr_stmt|;
name|long
name|chainId
init|=
name|Math
operator|.
name|abs
argument_list|(
operator|new
name|Random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|chainId
operator|=
name|chainId
operator|-
operator|(
name|chainId
operator|%
name|numMapTasks
operator|)
operator|+
name|taskId
expr_stmt|;
comment|// ensure that chainId is unique per task and across iterations
name|LongWritable
index|[]
name|keys
init|=
operator|new
name|LongWritable
index|[]
block|{
operator|new
name|LongWritable
argument_list|(
name|chainId
argument_list|)
block|}
decl_stmt|;
return|return
operator|new
name|FixedRecordReader
argument_list|<>
argument_list|(
name|keys
argument_list|,
name|keys
argument_list|)
return|;
block|}
block|}
comment|/**    * Mapper that creates a linked list of KeyValues.    *    * Each map task generates one linked list.    * All lists start on row key 0L.    * All lists should be CHAIN_LENGTH long.    */
specifier|public
specifier|static
class|class
name|LinkedListCreationMapper
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|LongWritable
argument_list|,
name|ImmutableBytesWritable
argument_list|,
name|KeyValue
argument_list|>
block|{
specifier|private
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|LongWritable
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|chainId
init|=
name|value
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting mapper with chainId:"
operator|+
name|chainId
argument_list|)
expr_stmt|;
name|byte
index|[]
name|chainIdArray
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|chainId
argument_list|)
decl_stmt|;
name|long
name|currentRow
init|=
literal|0
decl_stmt|;
name|long
name|chainLength
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|CHAIN_LENGTH_KEY
argument_list|,
name|CHAIN_LENGTH
argument_list|)
decl_stmt|;
name|long
name|nextRow
init|=
name|getNextRow
argument_list|(
literal|0
argument_list|,
name|chainLength
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chainLength
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|rk
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|currentRow
argument_list|)
decl_stmt|;
comment|// Next link in the chain.
name|KeyValue
name|linkKv
init|=
operator|new
name|KeyValue
argument_list|(
name|rk
argument_list|,
name|CHAIN_FAM
argument_list|,
name|chainIdArray
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|nextRow
argument_list|)
argument_list|)
decl_stmt|;
comment|// What link in the chain this is.
name|KeyValue
name|sortKv
init|=
operator|new
name|KeyValue
argument_list|(
name|rk
argument_list|,
name|SORT_FAM
argument_list|,
name|chainIdArray
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
comment|// Added data so that large stores are created.
name|KeyValue
name|dataKv
init|=
operator|new
name|KeyValue
argument_list|(
name|rk
argument_list|,
name|DATA_FAM
argument_list|,
name|chainIdArray
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|50
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Emit the key values.
name|context
operator|.
name|write
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|rk
argument_list|)
argument_list|,
name|linkKv
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|rk
argument_list|)
argument_list|,
name|sortKv
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
operator|new
name|ImmutableBytesWritable
argument_list|(
name|rk
argument_list|)
argument_list|,
name|dataKv
argument_list|)
expr_stmt|;
comment|// Move to the next row.
name|currentRow
operator|=
name|nextRow
expr_stmt|;
name|nextRow
operator|=
name|getNextRow
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|chainLength
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Returns a unique row id within this chain for this index */
specifier|private
name|long
name|getNextRow
parameter_list|(
name|long
name|index
parameter_list|,
name|long
name|chainLength
parameter_list|)
block|{
name|long
name|nextRow
init|=
name|Math
operator|.
name|abs
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
comment|// use significant bits from the random number, but pad with index to ensure it is unique
comment|// this also ensures that we do not reuse row = 0
comment|// row collisions from multiple mappers are fine, since we guarantee unique chainIds
name|nextRow
operator|=
name|nextRow
operator|-
operator|(
name|nextRow
operator|%
name|chainLength
operator|)
operator|+
name|index
expr_stmt|;
return|return
name|nextRow
return|;
block|}
block|}
comment|/**    * Writable class used as the key to group links in the linked list.    *    * Used as the key emited from a pass over the table.    */
specifier|public
specifier|static
class|class
name|LinkKey
implements|implements
name|WritableComparable
argument_list|<
name|LinkKey
argument_list|>
block|{
specifier|private
name|Long
name|chainId
decl_stmt|;
specifier|public
name|Long
name|getOrder
parameter_list|()
block|{
return|return
name|order
return|;
block|}
specifier|public
name|Long
name|getChainId
parameter_list|()
block|{
return|return
name|chainId
return|;
block|}
specifier|private
name|Long
name|order
decl_stmt|;
specifier|public
name|LinkKey
parameter_list|()
block|{}
specifier|public
name|LinkKey
parameter_list|(
name|long
name|chainId
parameter_list|,
name|long
name|order
parameter_list|)
block|{
name|this
operator|.
name|chainId
operator|=
name|chainId
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|LinkKey
name|linkKey
parameter_list|)
block|{
name|int
name|res
init|=
name|getChainId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|linkKey
operator|.
name|getChainId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|0
condition|)
block|{
name|res
operator|=
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|linkKey
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|dataOutput
argument_list|,
name|chainId
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|dataOutput
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
name|chainId
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
name|order
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Writable used as the value emitted from a pass over the hbase table.    */
specifier|public
specifier|static
class|class
name|LinkChain
implements|implements
name|WritableComparable
argument_list|<
name|LinkChain
argument_list|>
block|{
specifier|public
name|Long
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
specifier|public
name|Long
name|getRk
parameter_list|()
block|{
return|return
name|rk
return|;
block|}
specifier|public
name|LinkChain
parameter_list|()
block|{}
specifier|public
name|LinkChain
parameter_list|(
name|Long
name|rk
parameter_list|,
name|Long
name|next
parameter_list|)
block|{
name|this
operator|.
name|rk
operator|=
name|rk
expr_stmt|;
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
specifier|private
name|Long
name|rk
decl_stmt|;
specifier|private
name|Long
name|next
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|LinkChain
name|linkChain
parameter_list|)
block|{
name|int
name|res
init|=
name|getRk
argument_list|()
operator|.
name|compareTo
argument_list|(
name|linkChain
operator|.
name|getRk
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|0
condition|)
block|{
name|res
operator|=
name|getNext
argument_list|()
operator|.
name|compareTo
argument_list|(
name|linkChain
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|dataOutput
argument_list|,
name|rk
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|dataOutput
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
name|rk
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
name|next
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Class to figure out what partition to send a link in the chain to.  This is based upon    * the linkKey's ChainId.    */
specifier|public
specifier|static
class|class
name|NaturalKeyPartitioner
extends|extends
name|Partitioner
argument_list|<
name|LinkKey
argument_list|,
name|LinkChain
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|getPartition
parameter_list|(
name|LinkKey
name|linkKey
parameter_list|,
name|LinkChain
name|linkChain
parameter_list|,
name|int
name|numPartitions
parameter_list|)
block|{
name|int
name|hash
init|=
name|linkKey
operator|.
name|getChainId
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
return|return
name|Math
operator|.
name|abs
argument_list|(
name|hash
operator|%
name|numPartitions
argument_list|)
return|;
block|}
block|}
comment|/**    * Comparator used to figure out if a linkKey should be grouped together.  This is based upon the    * linkKey's ChainId.    */
specifier|public
specifier|static
class|class
name|NaturalKeyGroupingComparator
extends|extends
name|WritableComparator
block|{
specifier|protected
name|NaturalKeyGroupingComparator
parameter_list|()
block|{
name|super
argument_list|(
name|LinkKey
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|WritableComparable
name|w1
parameter_list|,
name|WritableComparable
name|w2
parameter_list|)
block|{
name|LinkKey
name|k1
init|=
operator|(
name|LinkKey
operator|)
name|w1
decl_stmt|;
name|LinkKey
name|k2
init|=
operator|(
name|LinkKey
operator|)
name|w2
decl_stmt|;
return|return
name|k1
operator|.
name|getChainId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|k2
operator|.
name|getChainId
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Comparator used to order linkKeys so that they are passed to a reducer in order.  This is based    * upon linkKey ChainId and Order.    */
specifier|public
specifier|static
class|class
name|CompositeKeyComparator
extends|extends
name|WritableComparator
block|{
specifier|protected
name|CompositeKeyComparator
parameter_list|()
block|{
name|super
argument_list|(
name|LinkKey
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|WritableComparable
name|w1
parameter_list|,
name|WritableComparable
name|w2
parameter_list|)
block|{
name|LinkKey
name|k1
init|=
operator|(
name|LinkKey
operator|)
name|w1
decl_stmt|;
name|LinkKey
name|k2
init|=
operator|(
name|LinkKey
operator|)
name|w2
decl_stmt|;
return|return
name|k1
operator|.
name|compareTo
argument_list|(
name|k2
argument_list|)
return|;
block|}
block|}
comment|/**    * Mapper to pass over the table.    *    * For every row there could be multiple chains that landed on this row. So emit a linkKey    * and value for each.    */
specifier|public
specifier|static
class|class
name|LinkedListCheckingMapper
extends|extends
name|TableMapper
argument_list|<
name|LinkKey
argument_list|,
name|LinkChain
argument_list|>
block|{
annotation|@
name|Override
specifier|protected
name|void
name|map
parameter_list|(
name|ImmutableBytesWritable
name|key
parameter_list|,
name|Result
name|value
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|longRk
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|value
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|value
operator|.
name|getFamilyMap
argument_list|(
name|CHAIN_FAM
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|chainId
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|next
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Cell
name|c
init|=
name|value
operator|.
name|getColumnCells
argument_list|(
name|SORT_FAM
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|order
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|write
argument_list|(
operator|new
name|LinkKey
argument_list|(
name|chainId
argument_list|,
name|order
argument_list|)
argument_list|,
operator|new
name|LinkChain
argument_list|(
name|longRk
argument_list|,
name|next
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Class that does the actual checking of the links.    *    * All links in the chain should be grouped and sorted when sent to this class.  Then the chain    * will be traversed making sure that no link is missing and that the chain is the correct length.    *    * This will throw an exception if anything is not correct.  That causes the job to fail if any    * data is corrupt.    */
specifier|public
specifier|static
class|class
name|LinkedListCheckingReducer
extends|extends
name|Reducer
argument_list|<
name|LinkKey
argument_list|,
name|LinkChain
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
annotation|@
name|Override
specifier|protected
name|void
name|reduce
parameter_list|(
name|LinkKey
name|key
parameter_list|,
name|Iterable
argument_list|<
name|LinkChain
argument_list|>
name|values
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|java
operator|.
name|lang
operator|.
name|InterruptedException
block|{
name|long
name|next
init|=
operator|-
literal|1L
decl_stmt|;
name|long
name|prev
init|=
operator|-
literal|1L
decl_stmt|;
name|long
name|count
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|LinkChain
name|lc
range|:
name|values
control|)
block|{
if|if
condition|(
name|next
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|lc
operator|.
name|getRk
argument_list|()
operator|!=
literal|0L
condition|)
block|{
name|String
name|msg
init|=
literal|"Chains should all start at rk 0, but read rk "
operator|+
name|lc
operator|.
name|getRk
argument_list|()
operator|+
literal|". Chain:"
operator|+
name|key
operator|.
name|chainId
operator|+
literal|", order:"
operator|+
name|key
operator|.
name|order
decl_stmt|;
name|logError
argument_list|(
name|msg
argument_list|,
name|context
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|next
operator|=
name|lc
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|next
operator|!=
name|lc
operator|.
name|getRk
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Missing a link in the chain. Prev rk "
operator|+
name|prev
operator|+
literal|" was, expecting "
operator|+
name|next
operator|+
literal|" but got "
operator|+
name|lc
operator|.
name|getRk
argument_list|()
operator|+
literal|". Chain:"
operator|+
name|key
operator|.
name|chainId
operator|+
literal|", order:"
operator|+
name|key
operator|.
name|order
decl_stmt|;
name|logError
argument_list|(
name|msg
argument_list|,
name|context
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|prev
operator|=
name|lc
operator|.
name|getRk
argument_list|()
expr_stmt|;
name|next
operator|=
name|lc
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
name|int
name|expectedChainLen
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|CHAIN_LENGTH_KEY
argument_list|,
name|CHAIN_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|!=
name|expectedChainLen
condition|)
block|{
name|String
name|msg
init|=
literal|"Chain wasn't the correct length.  Expected "
operator|+
name|expectedChainLen
operator|+
literal|" got "
operator|+
name|count
operator|+
literal|". Chain:"
operator|+
name|key
operator|.
name|chainId
operator|+
literal|", order:"
operator|+
name|key
operator|.
name|order
decl_stmt|;
name|logError
argument_list|(
name|msg
argument_list|,
name|context
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|logError
parameter_list|(
name|String
name|msg
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|TableName
name|table
init|=
name|getTableName
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failure in chain verification: "
operator|+
name|msg
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"cluster status:\n"
operator|+
name|admin
operator|.
name|getClusterStatus
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"table regions:\n"
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|join
argument_list|(
name|admin
operator|.
name|getTableRegions
argument_list|(
name|table
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|runCheckWithRetry
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|runCheck
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Received "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Running the check MR Job again to see whether an ephemeral problem or not"
argument_list|)
expr_stmt|;
name|runCheck
argument_list|()
expr_stmt|;
throw|throw
name|t
throw|;
comment|// we should still fail the test even if second retry succeeds
block|}
comment|// everything green
block|}
comment|/**    * After adding data to the table start a mr job to    * @throws IOException    * @throws ClassNotFoundException    * @throws InterruptedException    */
specifier|private
name|void
name|runCheck
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running check"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|String
name|jobName
init|=
name|getTablename
argument_list|()
operator|+
literal|"_check"
operator|+
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
name|util
operator|.
name|getDataTestDirOnTestFS
argument_list|(
name|jobName
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
name|jobName
argument_list|)
expr_stmt|;
name|job
operator|.
name|setPartitionerClass
argument_list|(
name|NaturalKeyPartitioner
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setGroupingComparatorClass
argument_list|(
name|NaturalKeyGroupingComparator
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setSortComparatorClass
argument_list|(
name|CompositeKeyComparator
operator|.
name|class
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|CHAIN_FAM
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|SORT_FAM
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCacheBlocks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setBatch
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|int
name|replicaCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|NUM_REPLICA_COUNT_KEY
argument_list|,
name|NUM_REPLICA_COUNT_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicaCount
operator|!=
name|NUM_REPLICA_COUNT_DEFAULT
condition|)
block|{
name|scan
operator|.
name|setConsistency
argument_list|(
name|Consistency
operator|.
name|TIMELINE
argument_list|)
expr_stmt|;
block|}
name|TableMapReduceUtil
operator|.
name|initTableMapperJob
argument_list|(
name|getTablename
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|scan
argument_list|,
name|LinkedListCheckingMapper
operator|.
name|class
argument_list|,
name|LinkKey
operator|.
name|class
argument_list|,
name|LinkChain
operator|.
name|class
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|LinkedListCheckingReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the files.
name|util
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUpCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|=
name|getTestingUtil
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|util
operator|.
name|initializeCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|int
name|replicaCount
init|=
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|NUM_REPLICA_COUNT_KEY
argument_list|,
name|NUM_REPLICA_COUNT_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
name|replicaCount
operator|!=
name|NUM_REPLICA_COUNT_DEFAULT
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Region Replicas enabled: "
operator|+
name|replicaCount
argument_list|)
expr_stmt|;
block|}
comment|// Scale this up on a real cluster
if|if
condition|(
name|util
operator|.
name|isDistributedCluster
argument_list|()
condition|)
block|{
name|util
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setIfUnset
argument_list|(
name|NUM_MAPS_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|util
operator|.
name|getAdmin
argument_list|()
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|size
argument_list|()
operator|*
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|util
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setIfUnset
argument_list|(
name|NUM_IMPORT_ROUNDS_KEY
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|util
operator|.
name|startMiniMapReduceCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addOptions
parameter_list|()
block|{
name|super
operator|.
name|addOptions
argument_list|()
expr_stmt|;
name|super
operator|.
name|addOptNoArg
argument_list|(
name|OPT_CHECK
argument_list|,
literal|"Run check only"
argument_list|)
expr_stmt|;
name|super
operator|.
name|addOptNoArg
argument_list|(
name|OPT_LOAD
argument_list|,
literal|"Run load only"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
block|{
name|super
operator|.
name|processOptions
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|check
operator|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_CHECK
argument_list|)
expr_stmt|;
name|load
operator|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_LOAD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|runTestFromCommandLine
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|load
condition|)
block|{
name|runLoad
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|check
condition|)
block|{
name|installSlowingCoproc
argument_list|()
expr_stmt|;
name|runCheckWithRetry
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|testBulkLoad
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getTablename
parameter_list|()
block|{
return|return
name|getTableName
argument_list|(
name|getConf
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableName
name|getTableName
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|TableName
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|TABLE_NAME_KEY
argument_list|,
name|TABLE_NAME
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getColumnFamilies
parameter_list|()
block|{
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|CHAIN_FAM
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|DATA_FAM
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|SORT_FAM
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|IntegrationTestingUtility
operator|.
name|setUseDistributedCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|IntegrationTestBulkLoad
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

