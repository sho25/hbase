begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ChaosMonkey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|LoadTestTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * A system test which does large data ingestion and verify using {@link LoadTestTool},  * while killing the region servers and the master(s) randomly. You can configure how long  * should the load test run by using "hbase.IntegrationTestDataIngestWithChaosMonkey.runtime"  * configuration parameter.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|IntegrationTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|IntegrationTestDataIngestWithChaosMonkey
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"TestDataIngestWithChaosMonkey"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SLAVES_BASE
init|=
literal|4
decl_stmt|;
comment|//number of slaves for the smallest cluster
comment|/** A soft limit on how long we should run */
specifier|private
specifier|static
specifier|final
name|String
name|RUN_TIME_KEY
init|=
literal|"hbase.IntegrationTestDataIngestWithChaosMonkey.runtime"
decl_stmt|;
comment|//run for 5 min by default
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_RUN_TIME
init|=
literal|5
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IntegrationTestDataIngestWithChaosMonkey
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|IntegrationTestingUtility
name|util
decl_stmt|;
specifier|private
name|HBaseCluster
name|cluster
decl_stmt|;
specifier|private
name|ChaosMonkey
name|monkey
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|=
operator|new
name|IntegrationTestingUtility
argument_list|()
expr_stmt|;
name|util
operator|.
name|initializeCluster
argument_list|(
name|NUM_SLAVES_BASE
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|util
operator|.
name|getHBaseClusterInterface
argument_list|()
expr_stmt|;
name|deleteTableIfNecessary
argument_list|()
expr_stmt|;
name|monkey
operator|=
operator|new
name|ChaosMonkey
argument_list|(
name|util
argument_list|,
name|ChaosMonkey
operator|.
name|EVERY_MINUTE_RANDOM_ACTION_POLICY
argument_list|)
expr_stmt|;
name|monkey
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|monkey
operator|.
name|stop
argument_list|(
literal|"test has finished, that's why"
argument_list|)
expr_stmt|;
name|monkey
operator|.
name|waitForStop
argument_list|()
expr_stmt|;
name|util
operator|.
name|restoreCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|deleteTableIfNecessary
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|util
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|TABLE_NAME
argument_list|)
condition|)
block|{
name|util
operator|.
name|deleteTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDataIngest
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testDataIngest"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster size:"
operator|+
name|util
operator|.
name|getHBaseClusterInterface
argument_list|()
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServersSize
argument_list|()
argument_list|)
expr_stmt|;
name|LoadTestTool
name|loadTool
init|=
operator|new
name|LoadTestTool
argument_list|()
decl_stmt|;
name|loadTool
operator|.
name|setConf
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|runtime
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|RUN_TIME_KEY
argument_list|,
name|DEFAULT_RUN_TIME
argument_list|)
decl_stmt|;
name|long
name|startKey
init|=
literal|0
decl_stmt|;
name|long
name|numKeys
init|=
name|estimateDataSize
argument_list|()
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|<
literal|0.9
operator|*
name|runtime
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Intended run time: "
operator|+
operator|(
name|runtime
operator|/
literal|60000
operator|)
operator|+
literal|" min, left:"
operator|+
operator|(
operator|(
name|runtime
operator|-
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|)
operator|/
literal|60000
operator|)
operator|+
literal|" min"
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|loadTool
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-tn"
block|,
name|TABLE_NAME
block|,
literal|"-write"
block|,
literal|"10:100:20"
block|,
literal|"-start_key"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|startKey
argument_list|)
block|,
literal|"-num_keys"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|numKeys
argument_list|)
block|}
argument_list|)
decl_stmt|;
comment|//assert that load was successful
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|loadTool
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-tn"
block|,
name|TABLE_NAME
block|,
literal|"-read"
block|,
literal|"100:20"
block|,
literal|"-start_key"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|startKey
argument_list|)
block|,
literal|"-num_keys"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|numKeys
argument_list|)
block|}
argument_list|)
expr_stmt|;
comment|//assert that verify was successful
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|startKey
operator|+=
name|numKeys
expr_stmt|;
block|}
block|}
comment|/** Estimates a data size based on the cluster size */
specifier|protected
name|long
name|estimateDataSize
parameter_list|()
throws|throws
name|IOException
block|{
comment|//base is a 4 slave node cluster.
name|ClusterStatus
name|status
init|=
name|cluster
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|int
name|numRegionServers
init|=
name|status
operator|.
name|getServersSize
argument_list|()
decl_stmt|;
name|int
name|multiplication
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|numRegionServers
operator|/
name|NUM_SLAVES_BASE
argument_list|)
decl_stmt|;
return|return
literal|10000
operator|*
name|multiplication
return|;
block|}
block|}
end_class

end_unit

