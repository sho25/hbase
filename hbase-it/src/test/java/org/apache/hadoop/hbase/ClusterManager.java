begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * ClusterManager is an api to manage servers in a distributed environment. It provides services  * for starting / stopping / killing Hadoop/HBase daemons. Concrete implementations provide actual  * functionality for carrying out deployment-specific tasks.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Private
interface|interface
name|ClusterManager
extends|extends
name|Configurable
block|{
comment|/**    * Type of the service daemon    */
specifier|public
specifier|static
enum|enum
name|ServiceType
block|{
name|HADOOP_NAMENODE
argument_list|(
literal|"namenode"
argument_list|)
block|,
name|HADOOP_DATANODE
argument_list|(
literal|"datanode"
argument_list|)
block|,
name|HADOOP_JOBTRACKER
argument_list|(
literal|"jobtracker"
argument_list|)
block|,
name|HADOOP_TASKTRACKER
argument_list|(
literal|"tasktracker"
argument_list|)
block|,
name|ZOOKEEPER_SERVER
argument_list|(
literal|"QuorumPeerMain"
argument_list|)
block|,
name|HBASE_MASTER
argument_list|(
literal|"master"
argument_list|)
block|,
name|HBASE_REGIONSERVER
argument_list|(
literal|"regionserver"
argument_list|)
block|;
specifier|private
name|String
name|name
decl_stmt|;
name|ServiceType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
block|}
comment|/**    * Start the service on the given host    */
name|void
name|start
parameter_list|(
name|ServiceType
name|service
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Stop the service on the given host    */
name|void
name|stop
parameter_list|(
name|ServiceType
name|service
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Restart the service on the given host    */
name|void
name|restart
parameter_list|(
name|ServiceType
name|service
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Kills the service running on the given host    */
name|void
name|kill
parameter_list|(
name|ServiceType
name|service
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Suspends the service running on the given host    */
name|void
name|suspend
parameter_list|(
name|ServiceType
name|service
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Resumes the services running on the given host    */
name|void
name|resume
parameter_list|(
name|ServiceType
name|service
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Returns whether the service is running on the remote host. This only checks whether the    * service still has a pid.    */
name|boolean
name|isRunning
parameter_list|(
name|ServiceType
name|service
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/* TODO: further API ideas:    *    * //return services running on host:    * ServiceType[] getRunningServicesOnHost(String hostname);    *    * //return which services can be run on host (for example, to query whether hmaster can run on this host)    * ServiceType[] getRunnableServicesOnHost(String hostname);    *    * //return which hosts can run this service    * String[] getRunnableHostsForService(ServiceType service);    */
block|}
end_interface

end_unit

