begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|trace
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|IntegrationTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IntegrationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|AbstractHBaseTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htrace
operator|.
name|Sampler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htrace
operator|.
name|Trace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htrace
operator|.
name|TraceScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|IntegrationTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|IntegrationTestSendTraceRequests
extends|extends
name|AbstractHBaseTool
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_ARG
init|=
literal|"t"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CF_ARG
init|=
literal|"f"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_NAME_DEFAULT
init|=
literal|"SendTracesTable"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COLUMN_FAMILY_DEFAULT
init|=
literal|"D"
decl_stmt|;
specifier|private
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLE_NAME_DEFAULT
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|familyName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_FAMILY_DEFAULT
argument_list|)
decl_stmt|;
specifier|private
name|IntegrationTestingUtility
name|util
decl_stmt|;
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|Admin
name|admin
decl_stmt|;
specifier|private
name|SpanReceiverHost
name|receiverHost
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|IntegrationTestingUtility
operator|.
name|setUseDistributedCluster
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|IntegrationTestSendTraceRequests
name|tool
init|=
operator|new
name|IntegrationTestSendTraceRequests
argument_list|()
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
name|configuration
argument_list|,
name|tool
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addOptions
parameter_list|()
block|{
name|addOptWithArg
argument_list|(
name|TABLE_ARG
argument_list|,
literal|"The table name to target.  Will be created if not there already."
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|CF_ARG
argument_list|,
literal|"The family to target"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
block|{
name|String
name|tableNameString
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|TABLE_ARG
argument_list|,
name|TABLE_NAME_DEFAULT
argument_list|)
decl_stmt|;
name|String
name|familyString
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|CF_ARG
argument_list|,
name|COLUMN_FAMILY_DEFAULT
argument_list|)
decl_stmt|;
name|this
operator|.
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableNameString
argument_list|)
expr_stmt|;
name|this
operator|.
name|familyName
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|familyString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
name|internalDoWork
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|internalDoWork
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|=
name|createUtil
argument_list|()
expr_stmt|;
name|admin
operator|=
name|util
operator|.
name|getHBaseAdmin
argument_list|()
expr_stmt|;
name|setupReceiver
argument_list|()
expr_stmt|;
name|deleteTable
argument_list|()
expr_stmt|;
name|createTable
argument_list|()
expr_stmt|;
name|LinkedBlockingQueue
argument_list|<
name|Long
argument_list|>
name|rks
init|=
name|insertData
argument_list|()
decl_stmt|;
name|ExecutorService
name|service
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|doScans
argument_list|(
name|service
argument_list|,
name|rks
argument_list|)
expr_stmt|;
name|doGets
argument_list|(
name|service
argument_list|,
name|rks
argument_list|)
expr_stmt|;
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|service
operator|.
name|awaitTermination
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|90000
argument_list|)
expr_stmt|;
name|receiverHost
operator|.
name|closeReceivers
argument_list|()
expr_stmt|;
name|util
operator|.
name|restoreCluster
argument_list|()
expr_stmt|;
name|util
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|doScans
parameter_list|(
name|ExecutorService
name|service
parameter_list|,
specifier|final
name|LinkedBlockingQueue
argument_list|<
name|Long
argument_list|>
name|rks
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Runnable
name|runnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|private
name|TraceScope
name|innerScope
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|LinkedBlockingQueue
argument_list|<
name|Long
argument_list|>
name|rowKeyQueue
init|=
name|rks
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ResultScanner
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|innerScope
operator|=
name|Trace
operator|.
name|startSpan
argument_list|(
literal|"Scan"
argument_list|,
name|Sampler
operator|.
name|ALWAYS
argument_list|)
expr_stmt|;
name|Table
name|ht
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowKeyQueue
operator|.
name|take
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setBatch
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|rs
operator|=
name|ht
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|// Something to keep the jvm from removing the loop.
name|long
name|accum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|1000
condition|;
name|x
operator|++
control|)
block|{
name|Result
name|r
init|=
name|rs
operator|.
name|next
argument_list|()
decl_stmt|;
name|accum
operator||=
name|Bytes
operator|.
name|toLong
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|innerScope
operator|.
name|getSpan
argument_list|()
operator|.
name|addTimelineAnnotation
argument_list|(
literal|"Accum result = "
operator|+
name|accum
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
name|ht
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|innerScope
operator|.
name|getSpan
argument_list|()
operator|.
name|addKVAnnotation
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"exception"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
finally|finally
block|{
if|if
condition|(
name|innerScope
operator|!=
literal|null
condition|)
name|innerScope
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|service
operator|.
name|submit
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doGets
parameter_list|(
name|ExecutorService
name|service
parameter_list|,
specifier|final
name|LinkedBlockingQueue
argument_list|<
name|Long
argument_list|>
name|rowKeys
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Runnable
name|runnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|private
name|TraceScope
name|innerScope
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|LinkedBlockingQueue
argument_list|<
name|Long
argument_list|>
name|rowKeyQueue
init|=
name|rowKeys
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Table
name|ht
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ht
operator|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|long
name|accum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|5
condition|;
name|x
operator|++
control|)
block|{
try|try
block|{
name|innerScope
operator|=
name|Trace
operator|.
name|startSpan
argument_list|(
literal|"gets"
argument_list|,
name|Sampler
operator|.
name|ALWAYS
argument_list|)
expr_stmt|;
name|long
name|rk
init|=
name|rowKeyQueue
operator|.
name|take
argument_list|()
decl_stmt|;
name|Result
name|r1
init|=
name|ht
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rk
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|r1
operator|!=
literal|null
condition|)
block|{
name|accum
operator||=
name|Bytes
operator|.
name|toLong
argument_list|(
name|r1
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Result
name|r2
init|=
name|ht
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rk
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|r2
operator|!=
literal|null
condition|)
block|{
name|accum
operator||=
name|Bytes
operator|.
name|toLong
argument_list|(
name|r2
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|innerScope
operator|.
name|getSpan
argument_list|()
operator|.
name|addTimelineAnnotation
argument_list|(
literal|"Accum = "
operator|+
name|accum
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// IGNORED
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// IGNORED
block|}
finally|finally
block|{
if|if
condition|(
name|innerScope
operator|!=
literal|null
condition|)
name|innerScope
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|service
operator|.
name|submit
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createTable
parameter_list|()
throws|throws
name|IOException
block|{
name|TraceScope
name|createScope
init|=
literal|null
decl_stmt|;
try|try
block|{
name|createScope
operator|=
name|Trace
operator|.
name|startSpan
argument_list|(
literal|"createTable"
argument_list|,
name|Sampler
operator|.
name|ALWAYS
argument_list|)
expr_stmt|;
name|util
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|familyName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|createScope
operator|!=
literal|null
condition|)
name|createScope
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteTable
parameter_list|()
throws|throws
name|IOException
block|{
name|TraceScope
name|deleteScope
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|deleteScope
operator|=
name|Trace
operator|.
name|startSpan
argument_list|(
literal|"deleteTable"
argument_list|,
name|Sampler
operator|.
name|ALWAYS
argument_list|)
expr_stmt|;
name|util
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|deleteScope
operator|!=
literal|null
condition|)
name|deleteScope
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|LinkedBlockingQueue
argument_list|<
name|Long
argument_list|>
name|insertData
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LinkedBlockingQueue
argument_list|<
name|Long
argument_list|>
name|rowKeys
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Long
argument_list|>
argument_list|(
literal|25000
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|this
operator|.
name|tableName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
literal|300
index|]
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|5000
condition|;
name|x
operator|++
control|)
block|{
name|TraceScope
name|traceScope
init|=
name|Trace
operator|.
name|startSpan
argument_list|(
literal|"insertData"
argument_list|,
name|Sampler
operator|.
name|ALWAYS
argument_list|)
decl_stmt|;
try|try
block|{
name|ht
operator|.
name|setAutoFlush
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|long
name|rk
init|=
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|rowKeys
operator|.
name|add
argument_list|(
name|rk
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rk
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
literal|10
condition|;
name|y
operator|++
control|)
block|{
name|random
operator|.
name|nextBytes
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|familyName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|x
operator|%
literal|1000
operator|)
operator|==
literal|0
condition|)
block|{
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|traceScope
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
return|return
name|rowKeys
return|;
block|}
specifier|private
name|IntegrationTestingUtility
name|createUtil
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|util
operator|==
literal|null
condition|)
block|{
name|IntegrationTestingUtility
name|u
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|u
operator|=
operator|new
name|IntegrationTestingUtility
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|u
operator|=
operator|new
name|IntegrationTestingUtility
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|util
operator|=
name|u
expr_stmt|;
name|util
operator|.
name|initializeCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|util
return|;
block|}
specifier|private
name|void
name|setupReceiver
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.zipkin.is-in-client-mode"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|receiverHost
operator|=
name|SpanReceiverHost
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

