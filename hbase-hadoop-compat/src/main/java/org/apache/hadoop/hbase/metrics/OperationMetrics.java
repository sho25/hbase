begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Container class for commonly collected metrics for most operations. Instantiate this class to  * collect submitted count, failed count and time histogram for an operation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|OperationMetrics
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SUBMITTED_COUNT
init|=
literal|"SubmittedCount"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TIME
init|=
literal|"Time"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FAILED_COUNT
init|=
literal|"FailedCount"
decl_stmt|;
specifier|final
specifier|private
name|Counter
name|submittedCounter
decl_stmt|;
specifier|final
specifier|private
name|Histogram
name|timeHisto
decl_stmt|;
specifier|final
specifier|private
name|Counter
name|failedCounter
decl_stmt|;
specifier|public
name|OperationMetrics
parameter_list|(
specifier|final
name|MetricRegistry
name|registry
parameter_list|,
specifier|final
name|String
name|metricNamePrefix
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|registry
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|metricNamePrefix
argument_list|)
expr_stmt|;
comment|/**      * TODO: As of now, Metrics description cannot be added/ registered with      * {@link MetricRegistry}. As metric names are unambiguous but concise, descriptions of      * metrics need to be made available someplace for users.      */
name|submittedCounter
operator|=
name|registry
operator|.
name|counter
argument_list|(
name|metricNamePrefix
operator|+
name|SUBMITTED_COUNT
argument_list|)
expr_stmt|;
name|timeHisto
operator|=
name|registry
operator|.
name|histogram
argument_list|(
name|metricNamePrefix
operator|+
name|TIME
argument_list|)
expr_stmt|;
name|failedCounter
operator|=
name|registry
operator|.
name|counter
argument_list|(
name|metricNamePrefix
operator|+
name|FAILED_COUNT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Counter
name|getSubmittedCounter
parameter_list|()
block|{
return|return
name|submittedCounter
return|;
block|}
specifier|public
name|Histogram
name|getTimeHisto
parameter_list|()
block|{
return|return
name|timeHisto
return|;
block|}
specifier|public
name|Counter
name|getFailedCounter
parameter_list|()
block|{
return|return
name|failedCounter
return|;
block|}
block|}
end_class

end_unit

