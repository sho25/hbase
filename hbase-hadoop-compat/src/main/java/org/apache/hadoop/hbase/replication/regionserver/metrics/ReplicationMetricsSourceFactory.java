begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_comment
comment|/**  * Class to load ReplicationMetricsSource from the class path. Will only return a singleton  * instance.  */
end_comment

begin_class
specifier|public
class|class
name|ReplicationMetricsSourceFactory
block|{
specifier|private
specifier|static
name|ReplicationMetricsSource
name|rms
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXCEPTION_STRING
init|=
literal|"Could not create a Replication metrics source.  "
operator|+
literal|"Is the hadoop compatibility jar on the classpath?"
decl_stmt|;
comment|/**    * Get the singleton instance of ReplicationMetricsSource    *    * @return the singleton    */
specifier|public
specifier|static
specifier|synchronized
name|ReplicationMetricsSource
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|rms
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|rms
operator|=
name|ServiceLoader
operator|.
name|load
argument_list|(
name|ReplicationMetricsSource
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|EXCEPTION_STRING
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|EXCEPTION_STRING
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// If there was nothing returned and no exception then throw an exception.
if|if
condition|(
name|rms
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|EXCEPTION_STRING
argument_list|)
throw|;
block|}
block|}
return|return
name|rms
return|;
block|}
block|}
end_class

end_unit

