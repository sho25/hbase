begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MetricsTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MetricsTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestCompatibilitySingletonFactory
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestCompatibilitySingletonFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ITERATIONS
init|=
literal|100000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
class|class
name|TestCompatibilitySingletonFactoryCallable
implements|implements
name|Callable
argument_list|<
name|String
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|RandomStringGenerator
name|instance
init|=
name|CompatibilitySingletonFactory
operator|.
name|getInstance
argument_list|(
name|RandomStringGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|instance
operator|.
name|getRandString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetInstance
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TestCompatibilitySingletonFactoryCallable
argument_list|>
name|callables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ITERATIONS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resultStrings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ITERATIONS
argument_list|)
decl_stmt|;
comment|// Create the callables.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITERATIONS
condition|;
name|i
operator|++
control|)
block|{
name|callables
operator|.
name|add
argument_list|(
operator|new
name|TestCompatibilitySingletonFactoryCallable
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now run the callables.
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|String
argument_list|>
argument_list|>
name|futures
init|=
name|executorService
operator|.
name|invokeAll
argument_list|(
name|callables
argument_list|)
decl_stmt|;
comment|// Wait for them all to finish.
for|for
control|(
name|Future
argument_list|<
name|String
argument_list|>
name|f
range|:
name|futures
control|)
block|{
name|resultStrings
operator|.
name|add
argument_list|(
name|f
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Get the first string.
name|String
name|firstString
init|=
name|resultStrings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Assert that all the strings are equal to the fist.
for|for
control|(
name|String
name|s
range|:
name|resultStrings
control|)
block|{
name|assertEquals
argument_list|(
name|firstString
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|// an assert to make sure that RandomStringGeneratorImpl is generating random strings.
name|assertNotEquals
argument_list|(
operator|new
name|RandomStringGeneratorImpl
argument_list|()
operator|.
name|getRandString
argument_list|()
argument_list|,
name|firstString
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

