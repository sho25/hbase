begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Tests the ability to specify favored nodes for a region.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionFavoredNodes
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|HTable
name|table
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COLUMN_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|FAVORED_NODES_NUM
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|REGION_SERVERS
init|=
literal|6
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|FLUSHES
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
name|Method
name|createWithFavoredNode
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|createWithFavoredNode
operator|=
name|DistributedFileSystem
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"create"
argument_list|,
name|Path
operator|.
name|class
argument_list|,
name|FsPermission
operator|.
name|class
argument_list|,
name|boolean
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|short
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|Progressable
operator|.
name|class
argument_list|,
name|InetSocketAddress
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nm
parameter_list|)
block|{
return|return;
block|}
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|REGION_SERVERS
argument_list|)
expr_stmt|;
name|table
operator|=
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|COLUMN_FAMILY
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|createWithFavoredNode
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFavoredNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|createWithFavoredNode
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Get the addresses of the datanodes in the cluster.
name|InetSocketAddress
index|[]
name|nodes
init|=
operator|new
name|InetSocketAddress
index|[
name|REGION_SERVERS
index|]
decl_stmt|;
name|List
argument_list|<
name|DataNode
argument_list|>
name|datanodes
init|=
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
name|Method
name|selfAddress
decl_stmt|;
try|try
block|{
name|selfAddress
operator|=
name|DataNode
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getSelfAddr"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ne
parameter_list|)
block|{
name|selfAddress
operator|=
name|DataNode
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getXferAddress"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REGION_SERVERS
condition|;
name|i
operator|++
control|)
block|{
name|nodes
index|[
name|i
index|]
operator|=
operator|(
name|InetSocketAddress
operator|)
name|selfAddress
operator|.
name|invoke
argument_list|(
name|datanodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|nodeNames
init|=
operator|new
name|String
index|[
name|REGION_SERVERS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REGION_SERVERS
condition|;
name|i
operator|++
control|)
block|{
name|nodeNames
index|[
name|i
index|]
operator|=
name|nodes
index|[
name|i
index|]
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
operator|+
literal|":"
operator|+
name|nodes
index|[
name|i
index|]
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
comment|// For each region, choose some datanodes as the favored nodes then assign
comment|// them as favored nodes through the HRegion.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REGION_SERVERS
condition|;
name|i
operator|++
control|)
block|{
name|HRegionServer
name|server
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|server
operator|.
name|getOnlineRegions
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|regions
control|)
block|{
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|ServerName
argument_list|>
name|favoredNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|ServerName
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|encodedRegionName
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|FAVORED_NODES_NUM
condition|;
name|j
operator|++
control|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|Builder
name|b
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|ServerName
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|setHostName
argument_list|(
name|nodes
index|[
operator|(
name|i
operator|+
name|j
operator|)
operator|%
name|REGION_SERVERS
index|]
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setPort
argument_list|(
name|nodes
index|[
operator|(
name|i
operator|+
name|j
operator|)
operator|%
name|REGION_SERVERS
index|]
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setStartCode
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|favoredNodes
operator|.
name|add
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|updateRegionFavoredNodesMapping
argument_list|(
name|encodedRegionName
argument_list|,
name|favoredNodes
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Write some data to each region and flush. Repeat some number of times to
comment|// get multiple files for each region.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|FLUSHES
condition|;
name|i
operator|++
control|)
block|{
name|TEST_UTIL
operator|.
name|loadTable
argument_list|(
name|table
argument_list|,
name|COLUMN_FAMILY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|// For each region, check the block locations of each file and ensure that
comment|// they are consistent with the favored nodes for that region.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REGION_SERVERS
condition|;
name|i
operator|++
control|)
block|{
name|HRegionServer
name|server
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|server
operator|.
name|getOnlineRegions
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|regions
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|region
operator|.
name|getStoreFileList
argument_list|(
operator|new
name|byte
index|[]
index|[]
block|{
name|COLUMN_FAMILY
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|FileStatus
name|status
init|=
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|URI
argument_list|(
name|file
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|lbks
init|=
operator|(
operator|(
name|DistributedFileSystem
operator|)
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|)
operator|.
name|getFileBlockLocations
argument_list|(
name|status
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|BlockLocation
name|lbk
range|:
name|lbks
control|)
block|{
name|locations
label|:
for|for
control|(
name|String
name|info
range|:
name|lbk
operator|.
name|getNames
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|FAVORED_NODES_NUM
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|info
operator|.
name|equals
argument_list|(
name|nodeNames
index|[
operator|(
name|i
operator|+
name|j
operator|)
operator|%
name|REGION_SERVERS
index|]
argument_list|)
condition|)
block|{
continue|continue
name|locations
continue|;
block|}
block|}
comment|// This block was at a location that was not a favored location.
name|fail
argument_list|(
literal|"Block location "
operator|+
name|info
operator|+
literal|" not a favored node"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

