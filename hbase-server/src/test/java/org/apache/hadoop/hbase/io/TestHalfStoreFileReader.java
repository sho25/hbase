begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHalfStoreFileReader
block|{
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|cleanupTestDir
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test the scanner and reseek of a half hfile scanner. The scanner API    * demands that seekTo and reseekTo() only return< 0 if the key lies    * before the start of the file (with no position on the scanner). Returning    * 0 if perfect match (rare), and return> 1 if we got an imperfect match.    *    * The latter case being the most common, we should generally be returning 1,    * and if we do, there may or may not be a 'next' in the scanner/file.    *    * A bug in the half file scanner was returning -1 at the end of the bottom    * half, and that was causing the infrastructure above to go null causing NPEs    * and other problems.  This test reproduces that failure, and also tests    * both the bottom and top of the file while we are at it.    *    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testHalfScanAndReseek
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|root_dir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|root_dir
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HFile
operator|.
name|Writer
name|w
init|=
name|HFile
operator|.
name|getWriterFactory
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|)
operator|.
name|withPath
argument_list|(
name|fs
argument_list|,
name|p
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// write some things.
name|List
argument_list|<
name|KeyValue
argument_list|>
name|items
init|=
name|genSomeKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|items
control|)
block|{
name|w
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|HFile
operator|.
name|Reader
name|r
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|cacheConf
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|r
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|byte
index|[]
name|midkey
init|=
name|r
operator|.
name|midkey
argument_list|()
decl_stmt|;
name|KeyValue
name|midKV
init|=
name|KeyValue
operator|.
name|createKeyValueFromKey
argument_list|(
name|midkey
argument_list|)
decl_stmt|;
name|midkey
operator|=
name|midKV
operator|.
name|getRow
argument_list|()
expr_stmt|;
comment|//System.out.println("midkey: " + midKV + " or: " + Bytes.toStringBinary(midkey));
name|Reference
name|bottom
init|=
operator|new
name|Reference
argument_list|(
name|midkey
argument_list|,
name|Reference
operator|.
name|Range
operator|.
name|bottom
argument_list|)
decl_stmt|;
name|doTestOfScanAndReseek
argument_list|(
name|p
argument_list|,
name|fs
argument_list|,
name|bottom
argument_list|,
name|cacheConf
argument_list|)
expr_stmt|;
name|Reference
name|top
init|=
operator|new
name|Reference
argument_list|(
name|midkey
argument_list|,
name|Reference
operator|.
name|Range
operator|.
name|top
argument_list|)
decl_stmt|;
name|doTestOfScanAndReseek
argument_list|(
name|p
argument_list|,
name|fs
argument_list|,
name|top
argument_list|,
name|cacheConf
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|doTestOfScanAndReseek
parameter_list|(
name|Path
name|p
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Reference
name|bottom
parameter_list|,
name|CacheConfig
name|cacheConf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HalfStoreFileReader
name|halfreader
init|=
operator|new
name|HalfStoreFileReader
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|cacheConf
argument_list|,
name|bottom
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|halfreader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
specifier|final
name|HFileScanner
name|scanner
init|=
name|halfreader
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|()
expr_stmt|;
name|Cell
name|curr
decl_stmt|;
do|do
block|{
name|curr
operator|=
name|scanner
operator|.
name|getKeyValue
argument_list|()
expr_stmt|;
name|KeyValue
name|reseekKv
init|=
name|getLastOnCol
argument_list|(
name|curr
argument_list|)
decl_stmt|;
name|int
name|ret
init|=
name|scanner
operator|.
name|reseekTo
argument_list|(
name|reseekKv
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"reseek to returned: "
operator|+
name|ret
argument_list|,
name|ret
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|//System.out.println(curr + ": " + ret);
block|}
do|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
condition|)
do|;
name|int
name|ret
init|=
name|scanner
operator|.
name|reseekTo
argument_list|(
name|getLastOnCol
argument_list|(
name|curr
argument_list|)
argument_list|)
decl_stmt|;
comment|//System.out.println("Last reseek: " + ret);
name|assertTrue
argument_list|(
name|ret
operator|>
literal|0
argument_list|)
expr_stmt|;
name|halfreader
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Tests the scanner on an HFile that is backed by HalfStoreFiles
annotation|@
name|Test
specifier|public
name|void
name|testHalfScanner
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|root_dir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|root_dir
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HFile
operator|.
name|Writer
name|w
init|=
name|HFile
operator|.
name|getWriterFactory
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|)
operator|.
name|withPath
argument_list|(
name|fs
argument_list|,
name|p
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// write some things.
name|List
argument_list|<
name|KeyValue
argument_list|>
name|items
init|=
name|genSomeKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|items
control|)
block|{
name|w
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|HFile
operator|.
name|Reader
name|r
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|cacheConf
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|r
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|byte
index|[]
name|midkey
init|=
name|r
operator|.
name|midkey
argument_list|()
decl_stmt|;
name|KeyValue
name|midKV
init|=
name|KeyValue
operator|.
name|createKeyValueFromKey
argument_list|(
name|midkey
argument_list|)
decl_stmt|;
name|midkey
operator|=
name|midKV
operator|.
name|getRow
argument_list|()
expr_stmt|;
name|Reference
name|bottom
init|=
operator|new
name|Reference
argument_list|(
name|midkey
argument_list|,
name|Reference
operator|.
name|Range
operator|.
name|bottom
argument_list|)
decl_stmt|;
name|Reference
name|top
init|=
operator|new
name|Reference
argument_list|(
name|midkey
argument_list|,
name|Reference
operator|.
name|Range
operator|.
name|top
argument_list|)
decl_stmt|;
comment|// Ugly code to get the item before the midkey
name|KeyValue
name|beforeMidKey
init|=
literal|null
decl_stmt|;
for|for
control|(
name|KeyValue
name|item
range|:
name|items
control|)
block|{
if|if
condition|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|item
argument_list|,
name|midKV
argument_list|)
operator|>=
literal|0
condition|)
block|{
break|break;
block|}
name|beforeMidKey
operator|=
name|item
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"midkey: "
operator|+
name|midKV
operator|+
literal|" or: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|midkey
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"beforeMidKey: "
operator|+
name|beforeMidKey
argument_list|)
expr_stmt|;
comment|// Seek on the splitKey, should be in top, not in bottom
name|Cell
name|foundKeyValue
init|=
name|doTestOfSeekBefore
argument_list|(
name|p
argument_list|,
name|fs
argument_list|,
name|bottom
argument_list|,
name|midKV
argument_list|,
name|cacheConf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|beforeMidKey
argument_list|,
name|foundKeyValue
argument_list|)
expr_stmt|;
comment|// Seek tot the last thing should be the penultimate on the top, the one before the midkey on the bottom.
name|foundKeyValue
operator|=
name|doTestOfSeekBefore
argument_list|(
name|p
argument_list|,
name|fs
argument_list|,
name|top
argument_list|,
name|items
operator|.
name|get
argument_list|(
name|items
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|cacheConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|items
operator|.
name|get
argument_list|(
name|items
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|,
name|foundKeyValue
argument_list|)
expr_stmt|;
name|foundKeyValue
operator|=
name|doTestOfSeekBefore
argument_list|(
name|p
argument_list|,
name|fs
argument_list|,
name|bottom
argument_list|,
name|items
operator|.
name|get
argument_list|(
name|items
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|cacheConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|beforeMidKey
argument_list|,
name|foundKeyValue
argument_list|)
expr_stmt|;
comment|// Try and seek before something that is in the bottom.
name|foundKeyValue
operator|=
name|doTestOfSeekBefore
argument_list|(
name|p
argument_list|,
name|fs
argument_list|,
name|top
argument_list|,
name|items
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cacheConf
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|foundKeyValue
argument_list|)
expr_stmt|;
comment|// Try and seek before the first thing.
name|foundKeyValue
operator|=
name|doTestOfSeekBefore
argument_list|(
name|p
argument_list|,
name|fs
argument_list|,
name|bottom
argument_list|,
name|items
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cacheConf
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|foundKeyValue
argument_list|)
expr_stmt|;
comment|// Try and seek before the second thing in the top and bottom.
name|foundKeyValue
operator|=
name|doTestOfSeekBefore
argument_list|(
name|p
argument_list|,
name|fs
argument_list|,
name|top
argument_list|,
name|items
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|cacheConf
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|foundKeyValue
argument_list|)
expr_stmt|;
name|foundKeyValue
operator|=
name|doTestOfSeekBefore
argument_list|(
name|p
argument_list|,
name|fs
argument_list|,
name|bottom
argument_list|,
name|items
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|cacheConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|items
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|foundKeyValue
argument_list|)
expr_stmt|;
comment|// Try to seek before the splitKey in the top file
name|foundKeyValue
operator|=
name|doTestOfSeekBefore
argument_list|(
name|p
argument_list|,
name|fs
argument_list|,
name|top
argument_list|,
name|midKV
argument_list|,
name|cacheConf
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|foundKeyValue
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Cell
name|doTestOfSeekBefore
parameter_list|(
name|Path
name|p
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Reference
name|bottom
parameter_list|,
name|KeyValue
name|seekBefore
parameter_list|,
name|CacheConfig
name|cacheConfig
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HalfStoreFileReader
name|halfreader
init|=
operator|new
name|HalfStoreFileReader
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|cacheConfig
argument_list|,
name|bottom
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|halfreader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
specifier|final
name|HFileScanner
name|scanner
init|=
name|halfreader
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|seekBefore
argument_list|(
name|seekBefore
argument_list|)
expr_stmt|;
return|return
name|scanner
operator|.
name|getKeyValue
argument_list|()
return|;
block|}
specifier|private
name|KeyValue
name|getLastOnCol
parameter_list|(
name|Cell
name|curr
parameter_list|)
block|{
return|return
name|KeyValueUtil
operator|.
name|createLastOnRow
argument_list|(
name|curr
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|curr
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|curr
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|curr
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|curr
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|curr
operator|.
name|getFamilyLength
argument_list|()
argument_list|,
name|curr
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|curr
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|curr
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
return|;
block|}
specifier|static
specifier|final
name|int
name|SIZE
init|=
literal|1000
decl_stmt|;
specifier|static
name|byte
index|[]
name|_b
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|s
argument_list|)
return|;
block|}
name|List
argument_list|<
name|KeyValue
argument_list|>
name|genSomeKeys
parameter_list|()
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE
condition|;
name|i
operator|++
control|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|_b
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"row_%04d"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|,
name|_b
argument_list|(
literal|"family"
argument_list|)
argument_list|,
name|_b
argument_list|(
literal|"qualifier"
argument_list|)
argument_list|,
literal|1000
argument_list|,
comment|// timestamp
name|_b
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

