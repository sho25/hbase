begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|CompactionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|RegionServerThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class tests the scenario where a store refresh happens due to a file not found during scan,  * after a compaction but before the compacted files are archived. At this state we test for a split  * and compaction  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestCompactionFileNotFound
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestCompactionFileNotFound
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCompactionFileNotFound
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|util
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TEST_TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_A
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_B
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_C
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|qualifierCol1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|bytes1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|bytes2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|bytes3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|Table
name|table
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hfile.compaction.discharger.interval"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|util
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|util
operator|.
name|deleteTable
argument_list|(
name|TEST_TABLE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitAfterRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|util
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|table
operator|=
name|util
operator|.
name|createTable
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Create Multiple store files
name|Put
name|puta
init|=
operator|new
name|Put
argument_list|(
name|ROW_A
argument_list|)
decl_stmt|;
name|puta
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|bytes1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puta
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|TEST_TABLE
argument_list|)
expr_stmt|;
name|Put
name|putb
init|=
operator|new
name|Put
argument_list|(
name|ROW_B
argument_list|)
decl_stmt|;
name|putb
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|bytes2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|putb
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|TEST_TABLE
argument_list|)
expr_stmt|;
name|Put
name|putc
init|=
operator|new
name|Put
argument_list|(
name|ROW_C
argument_list|)
decl_stmt|;
name|putc
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|bytes3
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|putc
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|TEST_TABLE
argument_list|)
expr_stmt|;
name|admin
operator|.
name|compact
argument_list|(
name|TEST_TABLE
argument_list|)
expr_stmt|;
while|while
condition|(
name|admin
operator|.
name|getCompactionState
argument_list|(
name|TEST_TABLE
argument_list|)
operator|!=
name|CompactionState
operator|.
name|NONE
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|putb
argument_list|)
expr_stmt|;
name|HRegion
name|hr1
init|=
operator|(
name|HRegion
operator|)
name|util
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|TEST_TABLE
argument_list|)
operator|.
name|getRegionByEncodedName
argument_list|(
name|admin
operator|.
name|getRegions
argument_list|(
name|TEST_TABLE
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Refresh store files post compaction, this should not open already compacted files
name|hr1
operator|.
name|refreshStoreFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|numRegionsBeforeSplit
init|=
name|admin
operator|.
name|getRegions
argument_list|(
name|TEST_TABLE
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Check if we can successfully split after compaction
name|admin
operator|.
name|splitRegionAsync
argument_list|(
name|admin
operator|.
name|getRegions
argument_list|(
name|TEST_TABLE
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|ROW_C
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|util
operator|.
name|waitFor
argument_list|(
literal|20000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numRegionsAfterSplit
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|RegionServerThread
argument_list|>
name|rst
init|=
name|util
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionServerThread
name|t
range|:
name|rst
control|)
block|{
name|numRegionsAfterSplit
operator|+=
name|t
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getRegions
argument_list|(
name|TEST_TABLE
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|// Make sure that the split went through and all the regions are assigned
return|return
operator|(
name|numRegionsAfterSplit
operator|==
name|numRegionsBeforeSplit
operator|+
literal|1
operator|&&
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|TEST_TABLE
argument_list|)
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Split at this point should not result in the RS being aborted
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|util
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|admin
operator|!=
literal|null
condition|)
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompactionAfterRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|util
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|table
operator|=
name|util
operator|.
name|createTable
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Create Multiple store files
name|Put
name|puta
init|=
operator|new
name|Put
argument_list|(
name|ROW_A
argument_list|)
decl_stmt|;
name|puta
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|bytes1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puta
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|TEST_TABLE
argument_list|)
expr_stmt|;
name|Put
name|putb
init|=
operator|new
name|Put
argument_list|(
name|ROW_B
argument_list|)
decl_stmt|;
name|putb
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|bytes2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|putb
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|TEST_TABLE
argument_list|)
expr_stmt|;
name|Put
name|putc
init|=
operator|new
name|Put
argument_list|(
name|ROW_C
argument_list|)
decl_stmt|;
name|putc
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifierCol1
argument_list|,
name|bytes3
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|putc
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|TEST_TABLE
argument_list|)
expr_stmt|;
name|admin
operator|.
name|compact
argument_list|(
name|TEST_TABLE
argument_list|)
expr_stmt|;
while|while
condition|(
name|admin
operator|.
name|getCompactionState
argument_list|(
name|TEST_TABLE
argument_list|)
operator|!=
name|CompactionState
operator|.
name|NONE
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|putb
argument_list|)
expr_stmt|;
name|HRegion
name|hr1
init|=
operator|(
name|HRegion
operator|)
name|util
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|TEST_TABLE
argument_list|)
operator|.
name|getRegionByEncodedName
argument_list|(
name|admin
operator|.
name|getRegions
argument_list|(
name|TEST_TABLE
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Refresh store files post compaction, this should not open already compacted files
name|hr1
operator|.
name|refreshStoreFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Archive the store files and try another compaction to see if all is good
for|for
control|(
name|HStore
name|store
range|:
name|hr1
operator|.
name|getStores
argument_list|()
control|)
block|{
name|store
operator|.
name|closeAndArchiveCompactedFiles
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|hr1
operator|.
name|compact
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got an exception during compaction"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|FileNotFoundException
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Got a FNFE during compaction"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|admin
operator|!=
literal|null
condition|)
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

