begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompareOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestFiltersWithBinaryComponentComparator
block|{
comment|/**    * See https://issues.apache.org/jira/browse/HBASE-22969 - for need of BinaryComponentComparator    * The descrption on jira should also help you in understanding tests implemented in this class    */
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestFiltersWithBinaryComponentComparator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFiltersWithBinaryComponentComparator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf"
argument_list|)
decl_stmt|;
specifier|private
name|TableName
name|tableName
decl_stmt|;
specifier|private
name|int
name|aOffset
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|bOffset
init|=
literal|4
decl_stmt|;
specifier|private
name|int
name|cOffset
init|=
literal|8
decl_stmt|;
specifier|private
name|int
name|dOffset
init|=
literal|12
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowFilterWithBinaryComponentComparator
parameter_list|()
throws|throws
name|IOException
block|{
comment|//SELECT * from table where a=1 and b> 10 and b< 20 and c> 90 and c< 100 and d=1
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|family
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|generateRows
argument_list|(
name|ht
argument_list|,
name|family
argument_list|,
name|qf
argument_list|)
expr_stmt|;
name|FilterList
name|filterList
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|)
decl_stmt|;
name|setRowFilters
argument_list|(
name|filterList
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
name|createScan
argument_list|(
name|filterList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|result
init|=
name|getResults
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|result
control|)
block|{
name|byte
index|[]
name|key
init|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|Bytes
operator|.
name|readAsInt
argument_list|(
name|key
argument_list|,
name|aOffset
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|Bytes
operator|.
name|readAsInt
argument_list|(
name|key
argument_list|,
name|bOffset
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|Bytes
operator|.
name|readAsInt
argument_list|(
name|key
argument_list|,
name|cOffset
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|int
name|d
init|=
name|Bytes
operator|.
name|readAsInt
argument_list|(
name|key
argument_list|,
name|dOffset
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|==
literal|1
operator|&&
name|b
operator|>
literal|10
operator|&&
name|b
argument_list|<
literal|20
operator|&&
name|c
argument_list|>
literal|90
operator|&&
name|c
operator|<
literal|100
operator|&&
name|d
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValueFilterWithBinaryComponentComparator
parameter_list|()
throws|throws
name|IOException
block|{
comment|//SELECT * from table where value has 'y' at position 1
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|family
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|generateRows
argument_list|(
name|ht
argument_list|,
name|family
argument_list|,
name|qf
argument_list|)
expr_stmt|;
name|FilterList
name|filterList
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|)
decl_stmt|;
name|setValueFilters
argument_list|(
name|filterList
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filterList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|result
init|=
name|getResults
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|result
control|)
block|{
name|byte
index|[]
name|value
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
literal|'y'
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowAndValueFilterWithBinaryComponentComparator
parameter_list|()
throws|throws
name|IOException
block|{
comment|//SELECT * from table where a=1 and b> 10 and b< 20 and c> 90 and c< 100 and d=1
comment|//and value has 'y' at position 1"
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|family
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|generateRows
argument_list|(
name|ht
argument_list|,
name|family
argument_list|,
name|qf
argument_list|)
expr_stmt|;
name|FilterList
name|filterList
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|)
decl_stmt|;
name|setRowFilters
argument_list|(
name|filterList
argument_list|)
expr_stmt|;
name|setValueFilters
argument_list|(
name|filterList
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filterList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|result
init|=
name|getResults
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|result
control|)
block|{
name|byte
index|[]
name|key
init|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|int
name|a
init|=
name|Bytes
operator|.
name|readAsInt
argument_list|(
name|key
argument_list|,
name|aOffset
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|Bytes
operator|.
name|readAsInt
argument_list|(
name|key
argument_list|,
name|bOffset
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|Bytes
operator|.
name|readAsInt
argument_list|(
name|key
argument_list|,
name|cOffset
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|int
name|d
init|=
name|Bytes
operator|.
name|readAsInt
argument_list|(
name|key
argument_list|,
name|dOffset
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|==
literal|1
operator|&&
name|b
operator|>
literal|10
operator|&&
name|b
argument_list|<
literal|20
operator|&&
name|c
argument_list|>
literal|90
operator|&&
name|c
operator|<
literal|100
operator|&&
name|d
operator|==
literal|1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|value
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
literal|'y'
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Since we are trying to emulate    * SQL: SELECT * from table where a = 1 and b> 10 and b< 20 and    * c> 90 and c< 100 and d = 1    * We are generating rows with:    * a = 1, b>=9 and b< 22, c>= 89 and c< 102, and d = 1    * At the end the table will look something like this:    * ------------    *  a| b|  c|d|    * ------------    *  1| 9| 89|1|family:qf|xyz|    *  -----------    *  1| 9| 90|1|family:qf|abc|    *  -----------    *  1| 9| 91|1|family:qf|xyz|    *  -------------------------    *  .    *  -------------------------    *  .    *  -------------------------    *  1|21|101|1|family:qf|xyz|    */
specifier|private
name|void
name|generateRows
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qf
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|a
init|=
literal|1
init|;
name|a
operator|<
literal|2
condition|;
operator|++
name|a
control|)
block|{
for|for
control|(
name|int
name|b
init|=
literal|9
init|;
name|b
operator|<
literal|22
condition|;
operator|++
name|b
control|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|89
init|;
name|c
operator|<
literal|102
condition|;
operator|++
name|c
control|)
block|{
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<
literal|2
condition|;
operator|++
name|d
control|)
block|{
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|Bytes
operator|.
name|putInt
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|putInt
argument_list|(
name|key
argument_list|,
literal|4
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|putInt
argument_list|(
name|key
argument_list|,
literal|8
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|putInt
argument_list|(
name|key
argument_list|,
literal|12
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|Put
name|row
init|=
operator|new
name|Put
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|row
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"added row:"
operator|+
name|Hex
operator|.
name|encodeHex
argument_list|(
name|key
argument_list|)
operator|+
literal|"with value 'abc'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"added row:"
operator|+
name|Hex
operator|.
name|encodeHex
argument_list|(
name|key
argument_list|)
operator|+
literal|"with value 'xyz'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setRowFilters
parameter_list|(
name|FilterList
name|filterList
parameter_list|)
block|{
comment|//offset for b as it is second component of "a+b+c+d"
comment|//'a' is at offset 0
name|int
name|bOffset
init|=
literal|4
decl_stmt|;
name|byte
index|[]
name|b10
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|//tests b> 10
name|Filter
name|b10Filter
init|=
operator|new
name|RowFilter
argument_list|(
name|CompareOperator
operator|.
name|GREATER
argument_list|,
operator|new
name|BinaryComponentComparator
argument_list|(
name|b10
argument_list|,
name|bOffset
argument_list|)
argument_list|)
decl_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|b10Filter
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b20
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|20
argument_list|)
decl_stmt|;
comment|//tests b< 20
name|Filter
name|b20Filter
init|=
operator|new
name|RowFilter
argument_list|(
name|CompareOperator
operator|.
name|LESS
argument_list|,
operator|new
name|BinaryComponentComparator
argument_list|(
name|b20
argument_list|,
name|bOffset
argument_list|)
argument_list|)
decl_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|b20Filter
argument_list|)
expr_stmt|;
comment|//offset for c as it is third component of "a+b+c+d"
name|int
name|cOffset
init|=
literal|8
decl_stmt|;
name|byte
index|[]
name|c90
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|90
argument_list|)
decl_stmt|;
comment|//tests c> 90
name|Filter
name|c90Filter
init|=
operator|new
name|RowFilter
argument_list|(
name|CompareOperator
operator|.
name|GREATER
argument_list|,
operator|new
name|BinaryComponentComparator
argument_list|(
name|c90
argument_list|,
name|cOffset
argument_list|)
argument_list|)
decl_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|c90Filter
argument_list|)
expr_stmt|;
name|byte
index|[]
name|c100
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|100
argument_list|)
decl_stmt|;
comment|//tests c< 100
name|Filter
name|c100Filter
init|=
operator|new
name|RowFilter
argument_list|(
name|CompareOperator
operator|.
name|LESS
argument_list|,
operator|new
name|BinaryComponentComparator
argument_list|(
name|c100
argument_list|,
name|cOffset
argument_list|)
argument_list|)
decl_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|c100Filter
argument_list|)
expr_stmt|;
comment|//offset for d as it is fourth component of "a+b+c+d"
name|int
name|dOffset
init|=
literal|12
decl_stmt|;
name|byte
index|[]
name|d1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|//tests d == 1
name|Filter
name|dFilter
init|=
operator|new
name|RowFilter
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComponentComparator
argument_list|(
name|d1
argument_list|,
name|dOffset
argument_list|)
argument_list|)
decl_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|dFilter
argument_list|)
expr_stmt|;
block|}
comment|/**    * We have rows with either "abc" or "xyz".    * We want values which have 'y' at second position    * of the string.    * As a result only values with "xyz" shall be returned   */
specifier|private
name|void
name|setValueFilters
parameter_list|(
name|FilterList
name|filterList
parameter_list|)
block|{
name|int
name|offset
init|=
literal|1
decl_stmt|;
name|byte
index|[]
name|y
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"y"
argument_list|)
decl_stmt|;
name|Filter
name|yFilter
init|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComponentComparator
argument_list|(
name|y
argument_list|,
name|offset
argument_list|)
argument_list|)
decl_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|yFilter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Scan
name|createScan
parameter_list|(
name|FilterList
name|list
parameter_list|)
block|{
comment|//build start and end key for scan
name|byte
index|[]
name|startKey
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
comment|//key size with four ints
name|Bytes
operator|.
name|putInt
argument_list|(
name|startKey
argument_list|,
name|aOffset
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//a=1, takes care of a = 1
name|Bytes
operator|.
name|putInt
argument_list|(
name|startKey
argument_list|,
name|bOffset
argument_list|,
literal|11
argument_list|)
expr_stmt|;
comment|//b=11, takes care of b> 10
name|Bytes
operator|.
name|putInt
argument_list|(
name|startKey
argument_list|,
name|cOffset
argument_list|,
literal|91
argument_list|)
expr_stmt|;
comment|//c=91,
name|Bytes
operator|.
name|putInt
argument_list|(
name|startKey
argument_list|,
name|dOffset
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//d=1,
name|byte
index|[]
name|endKey
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|Bytes
operator|.
name|putInt
argument_list|(
name|endKey
argument_list|,
name|aOffset
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//a=1, takes care of a = 1
name|Bytes
operator|.
name|putInt
argument_list|(
name|endKey
argument_list|,
name|bOffset
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|//b=20, takes care of b< 20
name|Bytes
operator|.
name|putInt
argument_list|(
name|endKey
argument_list|,
name|cOffset
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|//c=100,
name|Bytes
operator|.
name|putInt
argument_list|(
name|endKey
argument_list|,
name|dOffset
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//d=1,
comment|//setup scan
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|startKey
argument_list|)
operator|.
name|withStopRow
argument_list|(
name|endKey
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|scan
return|;
block|}
specifier|private
name|List
argument_list|<
name|Cell
argument_list|>
name|getResults
parameter_list|(
name|Table
name|ht
parameter_list|,
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Result
name|r
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Cell
name|kv
range|:
name|r
operator|.
name|listCells
argument_list|()
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

