begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
operator|.
name|ZKUtilOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Op
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test ZooKeeper multi-update functionality  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestZKMulti
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestZKMulti
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ZooKeeperWatcher
name|zkw
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Abortable
name|abortable
init|=
operator|new
name|Abortable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|why
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|zkw
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
literal|"TestZKMulti"
argument_list|,
name|abortable
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSimpleMulti
parameter_list|()
throws|throws
name|Exception
block|{
comment|// null multi
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zkw
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// empty multi
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zkw
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// single create
name|String
name|path
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"testSimpleMulti"
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
name|singleCreate
init|=
operator|new
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
argument_list|()
decl_stmt|;
name|singleCreate
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|path
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zkw
argument_list|,
name|singleCreate
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|path
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// single setdata
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
name|singleSetData
init|=
operator|new
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foobar"
argument_list|)
decl_stmt|;
name|singleSetData
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|setData
argument_list|(
name|path
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zkw
argument_list|,
name|singleSetData
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|path
argument_list|)
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|// single delete
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
name|singleDelete
init|=
operator|new
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
argument_list|()
decl_stmt|;
name|singleDelete
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|deleteNodeFailSilent
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zkw
argument_list|,
name|singleDelete
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|path
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testComplexMulti
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path1
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"testComplexMulti1"
argument_list|)
decl_stmt|;
name|String
name|path2
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"testComplexMulti2"
argument_list|)
decl_stmt|;
name|String
name|path3
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"testComplexMulti3"
argument_list|)
decl_stmt|;
name|String
name|path4
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"testComplexMulti4"
argument_list|)
decl_stmt|;
name|String
name|path5
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"testComplexMulti5"
argument_list|)
decl_stmt|;
name|String
name|path6
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"testComplexMulti6"
argument_list|)
decl_stmt|;
comment|// create 4 nodes that we'll setData on or delete later
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
name|create4Nodes
init|=
operator|new
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
argument_list|()
decl_stmt|;
name|create4Nodes
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|path1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|create4Nodes
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|path2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|create4Nodes
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|path3
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|create4Nodes
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|path4
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zkw
argument_list|,
name|create4Nodes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|path1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|path2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|path3
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|path4
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// do multiple of each operation (setData, delete, create)
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
name|ops
init|=
operator|new
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
argument_list|()
decl_stmt|;
comment|// setData
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|setData
argument_list|(
name|path1
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|setData
argument_list|(
name|path2
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|deleteNodeFailSilent
argument_list|(
name|path3
argument_list|)
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|deleteNodeFailSilent
argument_list|(
name|path4
argument_list|)
argument_list|)
expr_stmt|;
comment|// create
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|path5
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|path6
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zkw
argument_list|,
name|ops
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|path1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|path2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|path3
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|path4
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|path5
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|path6
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSingleFailure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// try to delete a node that doesn't exist
name|boolean
name|caughtNoNode
init|=
literal|false
decl_stmt|;
name|String
name|path
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"testSingleFailureZ"
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
name|ops
init|=
operator|new
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
argument_list|()
decl_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|deleteNodeFailSilent
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zkw
argument_list|,
name|ops
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
name|caughtNoNode
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|caughtNoNode
argument_list|)
expr_stmt|;
comment|// try to setData on a node that doesn't exist
name|caughtNoNode
operator|=
literal|false
expr_stmt|;
name|ops
operator|=
operator|new
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
argument_list|()
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|setData
argument_list|(
name|path
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zkw
argument_list|,
name|ops
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
name|caughtNoNode
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|caughtNoNode
argument_list|)
expr_stmt|;
comment|// try to create on a node that already exists
name|boolean
name|caughtNodeExists
init|=
literal|false
decl_stmt|;
name|ops
operator|=
operator|new
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
argument_list|()
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|path
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zkw
argument_list|,
name|ops
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zkw
argument_list|,
name|ops
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|nee
parameter_list|)
block|{
name|caughtNodeExists
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|caughtNodeExists
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSingleFailureInMulti
parameter_list|()
throws|throws
name|Exception
block|{
comment|// try a multi where all but one operation succeeds
name|String
name|pathA
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"testSingleFailureInMultiA"
argument_list|)
decl_stmt|;
name|String
name|pathB
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"testSingleFailureInMultiB"
argument_list|)
decl_stmt|;
name|String
name|pathC
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"testSingleFailureInMultiC"
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
name|ops
init|=
operator|new
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
argument_list|()
decl_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|pathA
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pathA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|pathB
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pathB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|deleteNodeFailSilent
argument_list|(
name|pathC
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|caughtNoNode
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zkw
argument_list|,
name|ops
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
name|caughtNoNode
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|caughtNoNode
argument_list|)
expr_stmt|;
comment|// assert that none of the operations succeeded
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|pathA
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|pathB
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|pathC
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testMultiFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pathX
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"testMultiFailureX"
argument_list|)
decl_stmt|;
name|String
name|pathY
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"testMultiFailureY"
argument_list|)
decl_stmt|;
name|String
name|pathZ
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"testMultiFailureZ"
argument_list|)
decl_stmt|;
comment|// create X that we will use to fail create later
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
name|ops
init|=
operator|new
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
argument_list|()
decl_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|pathX
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pathX
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zkw
argument_list|,
name|ops
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// fail one of each create ,setData, delete
name|String
name|pathV
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"testMultiFailureV"
argument_list|)
decl_stmt|;
name|String
name|pathW
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"testMultiFailureW"
argument_list|)
decl_stmt|;
name|ops
operator|=
operator|new
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
argument_list|()
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|pathX
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pathX
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// fail  -- already exists
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|setData
argument_list|(
name|pathY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pathY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// fail -- doesn't exist
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|deleteNodeFailSilent
argument_list|(
name|pathZ
argument_list|)
argument_list|)
expr_stmt|;
comment|// fail -- doesn't exist
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|pathX
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pathV
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// pass
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|pathX
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pathW
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// pass
name|boolean
name|caughtNodeExists
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zkw
argument_list|,
name|ops
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NodeExistsException
name|nee
parameter_list|)
block|{
comment|// check first operation that fails throws exception
name|caughtNodeExists
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|caughtNodeExists
argument_list|)
expr_stmt|;
comment|// check that no modifications were made
name|assertFalse
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|pathX
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|pathY
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|pathZ
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|pathW
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|pathV
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// test that with multiple failures, throws an exception corresponding to first failure in list
name|ops
operator|=
operator|new
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
argument_list|()
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|setData
argument_list|(
name|pathY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pathY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// fail -- doesn't exist
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|pathX
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|pathX
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// fail -- exists
name|boolean
name|caughtNoNode
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zkw
argument_list|,
name|ops
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
comment|// check first operation that fails throws exception
name|caughtNoNode
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|caughtNoNode
argument_list|)
expr_stmt|;
comment|// check that no modifications were made
name|assertFalse
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|pathX
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|pathY
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|pathZ
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|pathW
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|pathV
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRunSequentialOnMultiFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path1
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"runSequential1"
argument_list|)
decl_stmt|;
name|String
name|path2
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"runSequential2"
argument_list|)
decl_stmt|;
name|String
name|path3
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"runSequential3"
argument_list|)
decl_stmt|;
name|String
name|path4
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|,
literal|"runSequential4"
argument_list|)
decl_stmt|;
comment|// create some nodes that we will use later
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
name|ops
init|=
operator|new
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
argument_list|()
decl_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|path1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|path2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zkw
argument_list|,
name|ops
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// test that, even with operations that fail, the ones that would pass will pass
comment|// with runSequentialOnMultiFailure
name|ops
operator|=
operator|new
name|LinkedList
argument_list|<
name|ZKUtilOp
argument_list|>
argument_list|()
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|setData
argument_list|(
name|path1
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// pass
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|deleteNodeFailSilent
argument_list|(
name|path2
argument_list|)
argument_list|)
expr_stmt|;
comment|// pass
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|deleteNodeFailSilent
argument_list|(
name|path3
argument_list|)
argument_list|)
expr_stmt|;
comment|// fail -- node doesn't exist
name|ops
operator|.
name|add
argument_list|(
name|ZKUtilOp
operator|.
name|createAndFailSilent
argument_list|(
name|path4
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path4
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path4
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// pass
name|ZKUtil
operator|.
name|multiOrSequential
argument_list|(
name|zkw
argument_list|,
name|ops
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|path1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|path1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|path2
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|path3
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|path4
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verifies that for the given root node, it should delete all the child nodes    * recursively using multi-update api.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testdeleteChildrenRecursivelyMulti
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|parentZNode
init|=
literal|"/testRootMulti"
decl_stmt|;
name|createZNodeTree
argument_list|(
name|parentZNode
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteChildrenRecursivelyMultiOrSequential
argument_list|(
name|zkw
argument_list|,
literal|true
argument_list|,
name|parentZNode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Wrongly deleted parent znode!"
argument_list|,
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|parentZNode
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getChildren
argument_list|(
name|parentZNode
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to delete child znodes!"
argument_list|,
literal|0
operator|==
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verifies that for the given root node, it should delete all the nodes recursively using    * multi-update api.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDeleteNodeRecursivelyMulti
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|parentZNode
init|=
literal|"/testdeleteNodeRecursivelyMulti"
decl_stmt|;
name|createZNodeTree
argument_list|(
name|parentZNode
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|zkw
argument_list|,
name|parentZNode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Parent znode should be deleted."
argument_list|,
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|parentZNode
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDeleteNodeRecursivelyMultiOrSequential
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|parentZNode1
init|=
literal|"/testdeleteNode1"
decl_stmt|;
name|String
name|parentZNode2
init|=
literal|"/testdeleteNode2"
decl_stmt|;
name|String
name|parentZNode3
init|=
literal|"/testdeleteNode3"
decl_stmt|;
name|createZNodeTree
argument_list|(
name|parentZNode1
argument_list|)
expr_stmt|;
name|createZNodeTree
argument_list|(
name|parentZNode2
argument_list|)
expr_stmt|;
name|createZNodeTree
argument_list|(
name|parentZNode3
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteNodeRecursivelyMultiOrSequential
argument_list|(
name|zkw
argument_list|,
literal|false
argument_list|,
name|parentZNode1
argument_list|,
name|parentZNode2
argument_list|,
name|parentZNode3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Parent znode 1 should be deleted."
argument_list|,
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|parentZNode1
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Parent znode 2 should be deleted."
argument_list|,
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|parentZNode2
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Parent znode 3 should be deleted."
argument_list|,
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|parentZNode3
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDeleteChildrenRecursivelyMultiOrSequential
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|parentZNode1
init|=
literal|"/testdeleteChildren1"
decl_stmt|;
name|String
name|parentZNode2
init|=
literal|"/testdeleteChildren2"
decl_stmt|;
name|String
name|parentZNode3
init|=
literal|"/testdeleteChildren3"
decl_stmt|;
name|createZNodeTree
argument_list|(
name|parentZNode1
argument_list|)
expr_stmt|;
name|createZNodeTree
argument_list|(
name|parentZNode2
argument_list|)
expr_stmt|;
name|createZNodeTree
argument_list|(
name|parentZNode3
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteChildrenRecursivelyMultiOrSequential
argument_list|(
name|zkw
argument_list|,
literal|true
argument_list|,
name|parentZNode1
argument_list|,
name|parentZNode2
argument_list|,
name|parentZNode3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Wrongly deleted parent znode 1!"
argument_list|,
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|parentZNode1
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getChildren
argument_list|(
name|parentZNode1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to delete child znodes of parent znode 1!"
argument_list|,
literal|0
operator|==
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Wrongly deleted parent znode 2!"
argument_list|,
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|parentZNode2
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|children
operator|=
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getChildren
argument_list|(
name|parentZNode2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to delete child znodes of parent znode 1!"
argument_list|,
literal|0
operator|==
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Wrongly deleted parent znode 3!"
argument_list|,
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|parentZNode3
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|children
operator|=
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getChildren
argument_list|(
name|parentZNode3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to delete child znodes of parent znode 1!"
argument_list|,
literal|0
operator|==
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createZNodeTree
parameter_list|(
name|String
name|rootZNode
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|Op
argument_list|>
name|opList
init|=
operator|new
name|ArrayList
argument_list|<
name|Op
argument_list|>
argument_list|()
decl_stmt|;
name|opList
operator|.
name|add
argument_list|(
name|Op
operator|.
name|create
argument_list|(
name|rootZNode
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|level
init|=
literal|0
decl_stmt|;
name|String
name|parentZNode
init|=
name|rootZNode
decl_stmt|;
while|while
condition|(
name|level
operator|<
literal|10
condition|)
block|{
comment|// define parent node
name|parentZNode
operator|=
name|parentZNode
operator|+
literal|"/"
operator|+
name|level
expr_stmt|;
name|opList
operator|.
name|add
argument_list|(
name|Op
operator|.
name|create
argument_list|(
name|parentZNode
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|elements
init|=
literal|0
decl_stmt|;
comment|// add elements to the parent node
while|while
condition|(
name|elements
operator|<
name|level
condition|)
block|{
name|opList
operator|.
name|add
argument_list|(
name|Op
operator|.
name|create
argument_list|(
name|parentZNode
operator|+
literal|"/"
operator|+
name|elements
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
name|elements
operator|++
expr_stmt|;
block|}
name|level
operator|++
expr_stmt|;
block|}
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|multi
argument_list|(
name|opList
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

