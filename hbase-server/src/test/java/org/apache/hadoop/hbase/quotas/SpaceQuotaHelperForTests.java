begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|TestHRegionServerBulkLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|SpaceQuotaHelperForTests
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|SIZE_PER_VALUE
init|=
literal|256
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|F1
init|=
literal|"f1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|ONE_KILOBYTE
init|=
literal|1024L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|ONE_MEGABYTE
init|=
name|ONE_KILOBYTE
operator|*
name|ONE_KILOBYTE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|ONE_GIGABYTE
init|=
name|ONE_MEGABYTE
operator|*
name|ONE_KILOBYTE
decl_stmt|;
specifier|private
specifier|final
name|HBaseTestingUtility
name|testUtil
decl_stmt|;
specifier|private
specifier|final
name|TestName
name|testName
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|counter
decl_stmt|;
specifier|public
name|SpaceQuotaHelperForTests
parameter_list|(
name|HBaseTestingUtility
name|testUtil
parameter_list|,
name|TestName
name|testName
parameter_list|,
name|AtomicLong
name|counter
parameter_list|)
block|{
name|this
operator|.
name|testUtil
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|testUtil
argument_list|)
expr_stmt|;
name|this
operator|.
name|testName
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|testName
argument_list|)
expr_stmt|;
name|this
operator|.
name|counter
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|counter
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Static helpers
comment|//
specifier|static
name|void
name|updateConfigForQuotas
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Increase the frequency of some of the chores for responsiveness of the test
name|conf
operator|.
name|setInt
argument_list|(
name|FileSystemUtilizationChore
operator|.
name|FS_UTILIZATION_CHORE_DELAY_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileSystemUtilizationChore
operator|.
name|FS_UTILIZATION_CHORE_PERIOD_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|QuotaObserverChore
operator|.
name|QUOTA_OBSERVER_CHORE_DELAY_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|QuotaObserverChore
operator|.
name|QUOTA_OBSERVER_CHORE_PERIOD_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|SpaceQuotaRefresherChore
operator|.
name|POLICY_REFRESHER_CHORE_DELAY_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|SpaceQuotaRefresherChore
operator|.
name|POLICY_REFRESHER_CHORE_PERIOD_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|SnapshotQuotaObserverChore
operator|.
name|SNAPSHOT_QUOTA_CHORE_DELAY_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|SnapshotQuotaObserverChore
operator|.
name|SNAPSHOT_QUOTA_CHORE_PERIOD_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|RegionSizeReportingChore
operator|.
name|REGION_SIZE_REPORTING_CHORE_PERIOD_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|RegionSizeReportingChore
operator|.
name|REGION_SIZE_REPORTING_CHORE_DELAY_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// The period at which we check for compacted files that should be deleted from HDFS
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hfile.compaction.discharger.interval"
argument_list|,
literal|5
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_CONF_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Helpers
comment|//
comment|/**    * Returns the number of quotas defined in the HBase quota table.    */
name|long
name|listNumDefinedQuotas
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
name|QuotaRetriever
name|scanner
init|=
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Iterables
operator|.
name|size
argument_list|(
name|scanner
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Removes all quotas defined in the HBase quota table.    */
name|void
name|removeAllQuotas
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Wait for the quota table to be created
if|if
condition|(
operator|!
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
condition|)
block|{
name|waitForQuotaTable
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Or, clean up any quotas from previous test runs.
name|QuotaRetriever
name|scanner
init|=
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|QuotaSettings
name|quotaSettings
range|:
name|scanner
control|)
block|{
specifier|final
name|String
name|namespace
init|=
name|quotaSettings
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|quotaSettings
operator|.
name|getTableName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|quotaSettings
operator|.
name|getUserName
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting quota for namespace: "
operator|+
name|namespace
argument_list|)
expr_stmt|;
name|QuotaUtil
operator|.
name|deleteNamespaceQuota
argument_list|(
name|conn
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tableName
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting quota for table: "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|QuotaUtil
operator|.
name|deleteTableQuota
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting quota for user: "
operator|+
name|userName
argument_list|)
expr_stmt|;
name|QuotaUtil
operator|.
name|deleteUserQuota
argument_list|(
name|conn
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|QuotaSettings
name|getTableSpaceQuota
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|TableName
name|tn
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|QuotaRetriever
name|scanner
init|=
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|conn
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setTableFilter
argument_list|(
name|tn
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|QuotaSettings
name|setting
range|:
name|scanner
control|)
block|{
if|if
condition|(
name|setting
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|tn
argument_list|)
operator|&&
name|setting
operator|.
name|getQuotaType
argument_list|()
operator|==
name|QuotaType
operator|.
name|SPACE
condition|)
block|{
return|return
name|setting
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Waits 30seconds for the HBase quota table to exist.    */
specifier|public
name|void
name|waitForQuotaTable
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
name|waitForQuotaTable
argument_list|(
name|conn
argument_list|,
literal|30_000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Waits {@code timeout} milliseconds for the HBase quota table to exist.    */
specifier|public
name|void
name|waitForQuotaTable
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|testUtil
operator|.
name|waitFor
argument_list|(
name|timeout
argument_list|,
literal|1000
argument_list|,
operator|new
name|Predicate
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|void
name|writeData
parameter_list|(
name|TableName
name|tn
parameter_list|,
name|long
name|sizeInBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|writeData
argument_list|(
name|testUtil
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tn
argument_list|,
name|sizeInBytes
argument_list|)
expr_stmt|;
block|}
name|void
name|writeData
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|TableName
name|tn
parameter_list|,
name|long
name|sizeInBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|writeData
argument_list|(
name|tn
argument_list|,
name|sizeInBytes
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|writeData
parameter_list|(
name|TableName
name|tn
parameter_list|,
name|long
name|sizeInBytes
parameter_list|,
name|String
name|qual
parameter_list|)
throws|throws
name|IOException
block|{
name|writeData
argument_list|(
name|tn
argument_list|,
name|sizeInBytes
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qual
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|writeData
parameter_list|(
name|TableName
name|tn
parameter_list|,
name|long
name|sizeInBytes
parameter_list|,
name|byte
index|[]
name|qual
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Connection
name|conn
init|=
name|testUtil
operator|.
name|getConnection
argument_list|()
decl_stmt|;
specifier|final
name|Table
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|tn
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|updates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|bytesToWrite
init|=
name|sizeInBytes
decl_stmt|;
name|long
name|rowKeyId
init|=
literal|0L
decl_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
while|while
condition|(
name|bytesToWrite
operator|>
literal|0L
condition|)
block|{
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|rowKeyId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Use the reverse counter as the rowKey to get even spread across all regions
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sb
operator|.
name|reverse
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
name|SIZE_PER_VALUE
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|F1
argument_list|)
argument_list|,
name|qual
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|updates
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// Batch ~13KB worth of updates
if|if
condition|(
name|updates
operator|.
name|size
argument_list|()
operator|>
literal|50
condition|)
block|{
name|table
operator|.
name|put
argument_list|(
name|updates
argument_list|)
expr_stmt|;
name|updates
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Just count the value size, ignore the size of rowkey + column
name|bytesToWrite
operator|-=
name|SIZE_PER_VALUE
expr_stmt|;
name|rowKeyId
operator|++
expr_stmt|;
block|}
comment|// Write the final batch
if|if
condition|(
operator|!
name|updates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|.
name|put
argument_list|(
name|updates
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data was written to HBase"
argument_list|)
expr_stmt|;
comment|// Push the data to disk.
name|testUtil
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data flushed to disk"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|NamespaceDescriptor
name|createNamespace
parameter_list|()
throws|throws
name|Exception
block|{
name|NamespaceDescriptor
name|nd
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
literal|"ns"
operator|+
name|counter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|testUtil
operator|.
name|getAdmin
argument_list|()
operator|.
name|createNamespace
argument_list|(
name|nd
argument_list|)
expr_stmt|;
return|return
name|nd
return|;
block|}
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|QuotaSettings
argument_list|>
name|createTablesWithSpaceQuotas
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|testUtil
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|QuotaSettings
argument_list|>
name|tablesWithQuotas
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn1
init|=
name|createTable
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn2
init|=
name|createTable
argument_list|()
decl_stmt|;
name|NamespaceDescriptor
name|nd
init|=
name|createNamespace
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn3
init|=
name|createTableInNamespace
argument_list|(
name|nd
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tn4
init|=
name|createTableInNamespace
argument_list|(
name|nd
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tn5
init|=
name|createTableInNamespace
argument_list|(
name|nd
argument_list|)
decl_stmt|;
specifier|final
name|long
name|sizeLimit1
init|=
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|5L
decl_stmt|;
comment|// 5TB
specifier|final
name|SpaceViolationPolicy
name|violationPolicy1
init|=
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
decl_stmt|;
name|QuotaSettings
name|qs1
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn1
argument_list|,
name|sizeLimit1
argument_list|,
name|violationPolicy1
argument_list|)
decl_stmt|;
name|tablesWithQuotas
operator|.
name|put
argument_list|(
name|tn1
argument_list|,
name|qs1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|qs1
argument_list|)
expr_stmt|;
specifier|final
name|long
name|sizeLimit2
init|=
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|200L
decl_stmt|;
comment|// 200GB
specifier|final
name|SpaceViolationPolicy
name|violationPolicy2
init|=
name|SpaceViolationPolicy
operator|.
name|NO_WRITES_COMPACTIONS
decl_stmt|;
name|QuotaSettings
name|qs2
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn2
argument_list|,
name|sizeLimit2
argument_list|,
name|violationPolicy2
argument_list|)
decl_stmt|;
name|tablesWithQuotas
operator|.
name|put
argument_list|(
name|tn2
argument_list|,
name|qs2
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|qs2
argument_list|)
expr_stmt|;
specifier|final
name|long
name|sizeLimit3
init|=
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|100L
decl_stmt|;
comment|// 100TB
specifier|final
name|SpaceViolationPolicy
name|violationPolicy3
init|=
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
decl_stmt|;
name|QuotaSettings
name|qs3
init|=
name|QuotaSettingsFactory
operator|.
name|limitNamespaceSpace
argument_list|(
name|nd
operator|.
name|getName
argument_list|()
argument_list|,
name|sizeLimit3
argument_list|,
name|violationPolicy3
argument_list|)
decl_stmt|;
name|tablesWithQuotas
operator|.
name|put
argument_list|(
name|tn3
argument_list|,
name|qs3
argument_list|)
expr_stmt|;
name|tablesWithQuotas
operator|.
name|put
argument_list|(
name|tn4
argument_list|,
name|qs3
argument_list|)
expr_stmt|;
name|tablesWithQuotas
operator|.
name|put
argument_list|(
name|tn5
argument_list|,
name|qs3
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|qs3
argument_list|)
expr_stmt|;
specifier|final
name|long
name|sizeLimit4
init|=
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|5L
decl_stmt|;
comment|// 5GB
specifier|final
name|SpaceViolationPolicy
name|violationPolicy4
init|=
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
decl_stmt|;
name|QuotaSettings
name|qs4
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn5
argument_list|,
name|sizeLimit4
argument_list|,
name|violationPolicy4
argument_list|)
decl_stmt|;
comment|// Override the ns quota for tn5, import edge-case to catch table quota taking
comment|// precedence over ns quota.
name|tablesWithQuotas
operator|.
name|put
argument_list|(
name|tn5
argument_list|,
name|qs4
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|qs4
argument_list|)
expr_stmt|;
return|return
name|tablesWithQuotas
return|;
block|}
name|TableName
name|getNextTableName
parameter_list|()
block|{
return|return
name|getNextTableName
argument_list|(
name|NamespaceDescriptor
operator|.
name|DEFAULT_NAMESPACE_NAME_STR
argument_list|)
return|;
block|}
name|TableName
name|getNextTableName
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|TableName
operator|.
name|valueOf
argument_list|(
name|namespace
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
name|counter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
return|;
block|}
name|TableName
name|createTable
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|createTableWithRegions
argument_list|(
literal|1
argument_list|)
return|;
block|}
name|TableName
name|createTableWithRegions
parameter_list|(
name|int
name|numRegions
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createTableWithRegions
argument_list|(
name|NamespaceDescriptor
operator|.
name|DEFAULT_NAMESPACE_NAME_STR
argument_list|,
name|numRegions
argument_list|)
return|;
block|}
name|TableName
name|createTableWithRegions
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|int
name|numRegions
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createTableWithRegions
argument_list|(
name|admin
argument_list|,
name|NamespaceDescriptor
operator|.
name|DEFAULT_NAMESPACE_NAME_STR
argument_list|,
name|numRegions
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|TableName
name|createTableWithRegions
parameter_list|(
name|String
name|namespace
parameter_list|,
name|int
name|numRegions
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createTableWithRegions
argument_list|(
name|testUtil
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|namespace
argument_list|,
name|numRegions
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|TableName
name|createTableWithRegions
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|String
name|namespace
parameter_list|,
name|int
name|numRegions
parameter_list|,
name|int
name|numberOfReplicas
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tn
init|=
name|getNextTableName
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
comment|// Delete the old table
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tn
argument_list|)
condition|)
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tn
argument_list|)
expr_stmt|;
block|}
comment|// Create the table
name|TableDescriptor
name|tableDesc
decl_stmt|;
if|if
condition|(
name|numberOfReplicas
operator|>
literal|0
condition|)
block|{
name|tableDesc
operator|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tn
argument_list|)
operator|.
name|setRegionReplication
argument_list|(
name|numberOfReplicas
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|F1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tableDesc
operator|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tn
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|F1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|numRegions
operator|==
literal|1
condition|)
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"9"
argument_list|)
argument_list|,
name|numRegions
argument_list|)
expr_stmt|;
block|}
return|return
name|tn
return|;
block|}
name|TableName
name|createTableInNamespace
parameter_list|(
name|NamespaceDescriptor
name|nd
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|testUtil
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|nd
operator|.
name|getName
argument_list|()
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
name|counter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
comment|// Delete the old table
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tn
argument_list|)
condition|)
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tn
argument_list|)
expr_stmt|;
block|}
comment|// Create the table
name|TableDescriptor
name|tableDesc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tn
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|F1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
return|return
name|tn
return|;
block|}
name|void
name|partitionTablesByQuotaTarget
parameter_list|(
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|QuotaSettings
argument_list|>
name|quotas
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesWithTableQuota
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesWithNamespaceQuota
parameter_list|)
block|{
comment|// Partition the tables with quotas by table and ns quota
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|QuotaSettings
argument_list|>
name|entry
range|:
name|quotas
operator|.
name|entries
argument_list|()
control|)
block|{
name|SpaceLimitSettings
name|settings
init|=
operator|(
name|SpaceLimitSettings
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|TableName
name|tn
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|getTableName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tablesWithTableQuota
operator|.
name|add
argument_list|(
name|tn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|getNamespace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tablesWithNamespaceQuota
operator|.
name|add
argument_list|(
name|tn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|getTableName
argument_list|()
operator|==
literal|null
operator|&&
name|settings
operator|.
name|getNamespace
argument_list|()
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Unexpected table name with null tableName and namespace: "
operator|+
name|tn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Bulk-loads a number of files with a number of rows to the given table.    */
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|generateFileToLoad
parameter_list|(
name|TableName
name|tn
parameter_list|,
name|int
name|numFiles
parameter_list|,
name|int
name|numRowsPerFile
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|testUtil
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Path
name|baseDir
init|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_files"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|hfiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|hfile
init|=
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
decl_stmt|;
name|TestHRegionServerBulkLoad
operator|.
name|createHFile
argument_list|(
name|fs
argument_list|,
name|hfile
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"my"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"file"
argument_list|)
argument_list|,
name|numRowsPerFile
argument_list|)
expr_stmt|;
name|hfiles
operator|.
name|add
argument_list|(
name|hfile
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|family2Files
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|family2Files
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|SpaceQuotaHelperForTests
operator|.
name|F1
argument_list|)
argument_list|,
name|hfiles
argument_list|)
expr_stmt|;
return|return
name|family2Files
return|;
block|}
comment|/**    * Abstraction to simplify the case where a test needs to verify a certain state    * on a {@code SpaceQuotaSnapshot}. This class fails-fast when there is no such    * snapshot obtained from the Master. As such, it is not useful to verify the    * lack of a snapshot.    */
specifier|static
specifier|abstract
class|class
name|SpaceQuotaSnapshotPredicate
implements|implements
name|Predicate
argument_list|<
name|Exception
argument_list|>
block|{
specifier|private
specifier|final
name|Connection
name|conn
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|tn
decl_stmt|;
specifier|private
specifier|final
name|String
name|ns
decl_stmt|;
name|SpaceQuotaSnapshotPredicate
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|TableName
name|tn
parameter_list|)
block|{
name|this
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|conn
argument_list|)
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|tn
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|SpaceQuotaSnapshotPredicate
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
name|this
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|conn
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|ns
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SpaceQuotaSnapshotPredicate
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|TableName
name|tn
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
if|if
condition|(
operator|(
literal|null
operator|!=
name|tn
operator|&&
literal|null
operator|!=
name|ns
operator|)
operator|||
operator|(
literal|null
operator|==
name|tn
operator|&&
literal|null
operator|==
name|ns
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"One of TableName and Namespace must be non-null, and the other null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|tn
operator|=
name|tn
expr_stmt|;
name|this
operator|.
name|ns
operator|=
name|ns
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|SpaceQuotaSnapshot
name|snapshot
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ns
condition|)
block|{
name|snapshot
operator|=
operator|(
name|SpaceQuotaSnapshot
operator|)
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|getCurrentSpaceQuotaSnapshot
argument_list|(
name|tn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|snapshot
operator|=
operator|(
name|SpaceQuotaSnapshot
operator|)
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|getCurrentSpaceQuotaSnapshot
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Saw quota snapshot for "
operator|+
operator|(
literal|null
operator|==
name|tn
condition|?
name|ns
else|:
name|tn
operator|)
operator|+
literal|": "
operator|+
name|snapshot
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|snapshot
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|evaluate
argument_list|(
name|snapshot
argument_list|)
return|;
block|}
comment|/**      * Must determine if the given {@code SpaceQuotaSnapshot} meets some criteria.      *      * @param snapshot a non-null snapshot obtained from the HBase Master      * @return true if the criteria is met, false otherwise      */
specifier|abstract
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
comment|/**    * Predicate that waits for all store files in a table to have no compacted files.    */
specifier|static
class|class
name|NoFilesToDischarge
implements|implements
name|Predicate
argument_list|<
name|Exception
argument_list|>
block|{
specifier|private
specifier|final
name|MiniHBaseCluster
name|cluster
decl_stmt|;
specifier|private
specifier|final
name|TableName
name|tn
decl_stmt|;
name|NoFilesToDischarge
parameter_list|(
name|MiniHBaseCluster
name|cluster
parameter_list|,
name|TableName
name|tn
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
name|this
operator|.
name|tn
operator|=
name|tn
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|HRegion
name|region
range|:
name|cluster
operator|.
name|getRegions
argument_list|(
name|tn
argument_list|)
control|)
block|{
for|for
control|(
name|HStore
name|store
range|:
name|region
operator|.
name|getStores
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|HStoreFile
argument_list|>
name|files
init|=
name|store
operator|.
name|getStoreEngine
argument_list|()
operator|.
name|getStoreFileManager
argument_list|()
operator|.
name|getCompactedfiles
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|files
operator|&&
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" still has compacted files"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

