begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CallQueueTooBigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerMetricsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|YouAreDeadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CallTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerNotRunningYetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|ProcedureSyncWait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|RSProcedureDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|wal
operator|.
name|WALProcedureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerAbortedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerStoppedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|CloseRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ExecuteProceduresRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ExecuteProceduresResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionRequest
operator|.
name|RegionOpenInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|OpenRegionResponse
operator|.
name|RegionOpeningState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionStateTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionStateTransition
operator|.
name|TransitionCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportRegionStateTransitionRequest
import|;
end_import

begin_comment
comment|/**  * Base class for AM test.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|TestAssignmentManagerBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAssignmentManagerBase
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|PROC_NTHREADS
init|=
literal|64
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|NREGIONS
init|=
literal|1
operator|*
literal|1000
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|NSERVERS
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|NREGIONS
operator|/
literal|100
argument_list|)
decl_stmt|;
specifier|protected
name|HBaseTestingUtility
name|util
decl_stmt|;
specifier|protected
name|MockRSProcedureDispatcher
name|rsDispatcher
decl_stmt|;
specifier|protected
name|MockMasterServices
name|master
decl_stmt|;
specifier|protected
name|AssignmentManager
name|am
decl_stmt|;
specifier|protected
name|NavigableMap
argument_list|<
name|ServerName
argument_list|,
name|SortedSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|regionsToRegionServers
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|ServerName
argument_list|,
name|SortedSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Simple executor to run some simple tasks.
specifier|protected
name|ScheduledExecutorService
name|executor
decl_stmt|;
specifier|protected
name|ProcedureMetrics
name|assignProcMetrics
decl_stmt|;
specifier|protected
name|ProcedureMetrics
name|unassignProcMetrics
decl_stmt|;
specifier|protected
name|ProcedureMetrics
name|moveProcMetrics
decl_stmt|;
specifier|protected
name|ProcedureMetrics
name|reopenProcMetrics
decl_stmt|;
specifier|protected
name|ProcedureMetrics
name|openProcMetrics
decl_stmt|;
specifier|protected
name|ProcedureMetrics
name|closeProcMetrics
decl_stmt|;
specifier|protected
name|long
name|assignSubmittedCount
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|assignFailedCount
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|unassignSubmittedCount
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|unassignFailedCount
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|moveSubmittedCount
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|moveFailedCount
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|reopenSubmittedCount
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|reopenFailedCount
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|openSubmittedCount
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|openFailedCount
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|closeSubmittedCount
init|=
literal|0
decl_stmt|;
specifier|protected
name|long
name|closeFailedCount
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|newRsAdded
decl_stmt|;
specifier|protected
name|int
name|getAssignMaxAttempts
parameter_list|()
block|{
comment|// Have many so we succeed eventually.
return|return
literal|1000
return|;
block|}
specifier|protected
name|void
name|setupConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|conf
argument_list|,
name|util
operator|.
name|getDataTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|WALProcedureStore
operator|.
name|USE_HSYNC_CONF_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|WALProcedureStore
operator|.
name|SYNC_WAIT_MSEC_CONF_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MasterProcedureConstants
operator|.
name|MASTER_PROCEDURE_THREADS
argument_list|,
name|PROC_NTHREADS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|RSProcedureDispatcher
operator|.
name|RS_RPC_STARTUP_WAIT_TIME_CONF_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|AssignmentManager
operator|.
name|ASSIGN_MAX_ATTEMPTS
argument_list|,
name|getAssignMaxAttempts
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setUncaughtExceptionHandler
argument_list|(
parameter_list|(
name|t
parameter_list|,
name|e
parameter_list|)
lambda|->
name|LOG
operator|.
name|warn
argument_list|(
literal|"Uncaught: "
argument_list|,
name|e
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|setupConfiguration
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|=
operator|new
name|MockMasterServices
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|this
operator|.
name|regionsToRegionServers
argument_list|)
expr_stmt|;
name|rsDispatcher
operator|=
operator|new
name|MockRSProcedureDispatcher
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|master
operator|.
name|start
argument_list|(
name|NSERVERS
argument_list|,
name|rsDispatcher
argument_list|)
expr_stmt|;
name|newRsAdded
operator|=
literal|0
expr_stmt|;
name|am
operator|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
expr_stmt|;
name|assignProcMetrics
operator|=
name|am
operator|.
name|getAssignmentManagerMetrics
argument_list|()
operator|.
name|getAssignProcMetrics
argument_list|()
expr_stmt|;
name|unassignProcMetrics
operator|=
name|am
operator|.
name|getAssignmentManagerMetrics
argument_list|()
operator|.
name|getUnassignProcMetrics
argument_list|()
expr_stmt|;
name|moveProcMetrics
operator|=
name|am
operator|.
name|getAssignmentManagerMetrics
argument_list|()
operator|.
name|getMoveProcMetrics
argument_list|()
expr_stmt|;
name|reopenProcMetrics
operator|=
name|am
operator|.
name|getAssignmentManagerMetrics
argument_list|()
operator|.
name|getReopenProcMetrics
argument_list|()
expr_stmt|;
name|openProcMetrics
operator|=
name|am
operator|.
name|getAssignmentManagerMetrics
argument_list|()
operator|.
name|getOpenProcMetrics
argument_list|()
expr_stmt|;
name|closeProcMetrics
operator|=
name|am
operator|.
name|getAssignmentManagerMetrics
argument_list|()
operator|.
name|getCloseProcMetrics
argument_list|()
expr_stmt|;
name|setUpMeta
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|setUpMeta
parameter_list|()
throws|throws
name|Exception
block|{
name|rsDispatcher
operator|.
name|setMockRsExecutor
argument_list|(
operator|new
name|GoodRsExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|assign
argument_list|(
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
expr_stmt|;
name|am
operator|.
name|wakeMetaLoadedEvent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|master
operator|.
name|stop
argument_list|(
literal|"tearDown"
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
specifier|protected
class|class
name|NoopRsExecutor
implements|implements
name|MockRSExecutor
block|{
annotation|@
name|Override
specifier|public
name|ExecuteProceduresResponse
name|sendRequest
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|ExecuteProceduresRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|request
operator|.
name|getOpenRegionCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|OpenRegionRequest
name|req
range|:
name|request
operator|.
name|getOpenRegionList
argument_list|()
control|)
block|{
for|for
control|(
name|RegionOpenInfo
name|openReq
range|:
name|req
operator|.
name|getOpenInfoList
argument_list|()
control|)
block|{
name|execOpenRegion
argument_list|(
name|server
argument_list|,
name|openReq
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getCloseRegionCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|CloseRegionRequest
name|req
range|:
name|request
operator|.
name|getCloseRegionList
argument_list|()
control|)
block|{
name|execCloseRegion
argument_list|(
name|server
argument_list|,
name|req
operator|.
name|getRegion
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ExecuteProceduresResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
specifier|protected
name|RegionOpeningState
name|execOpenRegion
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|RegionOpenInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
specifier|protected
name|CloseRegionResponse
name|execCloseRegion
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|Future
argument_list|<
name|byte
index|[]
argument_list|>
name|submitProcedure
parameter_list|(
specifier|final
name|Procedure
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|proc
parameter_list|)
block|{
return|return
name|ProcedureSyncWait
operator|.
name|submitProcedure
argument_list|(
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
argument_list|,
name|proc
argument_list|)
return|;
block|}
specifier|protected
name|byte
index|[]
name|waitOnFuture
parameter_list|(
specifier|final
name|Future
argument_list|<
name|byte
index|[]
argument_list|>
name|future
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|future
operator|.
name|get
argument_list|(
literal|3
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ExecutionException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Exception
name|ee
init|=
operator|(
name|Exception
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|ee
operator|instanceof
name|InterruptedIOException
condition|)
block|{
for|for
control|(
name|Procedure
argument_list|<
name|?
argument_list|>
name|p
range|:
name|this
operator|.
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getProcedures
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|p
operator|.
name|toStringDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|(
name|Exception
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
comment|// ============================================================================================
comment|// Helpers
comment|// ============================================================================================
specifier|protected
name|void
name|bulkSubmit
parameter_list|(
name|TransitRegionStateProcedure
index|[]
name|procs
parameter_list|)
throws|throws
name|Exception
block|{
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|PROC_NTHREADS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|threadId
init|=
name|i
decl_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table-"
operator|+
name|threadId
argument_list|)
decl_stmt|;
name|int
name|n
init|=
operator|(
name|procs
operator|.
name|length
operator|/
name|threads
operator|.
name|length
operator|)
decl_stmt|;
name|int
name|start
init|=
name|threadId
operator|*
name|n
decl_stmt|;
name|int
name|stop
init|=
name|start
operator|+
name|n
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|start
init|;
name|j
operator|<
name|stop
condition|;
operator|++
name|j
control|)
block|{
name|procs
index|[
name|j
index|]
operator|=
name|createAndSubmitAssign
argument_list|(
name|tableName
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|procs
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
operator|&&
name|procs
index|[
name|i
index|]
operator|==
literal|null
condition|;
operator|--
name|i
control|)
block|{
name|procs
index|[
name|i
index|]
operator|=
name|createAndSubmitAssign
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table-sync"
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|TransitRegionStateProcedure
name|createAndSubmitAssign
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|int
name|regionId
parameter_list|)
block|{
name|RegionInfo
name|hri
init|=
name|createRegionInfo
argument_list|(
name|tableName
argument_list|,
name|regionId
argument_list|)
decl_stmt|;
name|TransitRegionStateProcedure
name|proc
init|=
name|createAssignProcedure
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|submitProcedure
argument_list|(
name|proc
argument_list|)
expr_stmt|;
return|return
name|proc
return|;
block|}
specifier|protected
name|RegionInfo
name|createRegionInfo
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|long
name|regionId
parameter_list|)
block|{
return|return
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|regionId
argument_list|)
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|regionId
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|protected
name|TransitRegionStateProcedure
name|createAssignProcedure
parameter_list|(
name|RegionInfo
name|hri
parameter_list|)
block|{
return|return
name|am
operator|.
name|createAssignProcedures
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|hri
argument_list|)
argument_list|)
index|[
literal|0
index|]
return|;
block|}
specifier|protected
name|TransitRegionStateProcedure
name|createUnassignProcedure
parameter_list|(
name|RegionInfo
name|hri
parameter_list|)
block|{
name|RegionStateNode
name|regionNode
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionStateNode
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|TransitRegionStateProcedure
name|proc
decl_stmt|;
name|regionNode
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|regionNode
operator|.
name|isInTransition
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|=
name|TransitRegionStateProcedure
operator|.
name|unassign
argument_list|(
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|regionNode
operator|.
name|setProcedure
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|regionNode
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|proc
return|;
block|}
specifier|protected
name|void
name|sendTransitionReport
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|RegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|TransitionCode
name|state
parameter_list|,
name|long
name|seqId
parameter_list|)
throws|throws
name|IOException
block|{
name|ReportRegionStateTransitionRequest
operator|.
name|Builder
name|req
init|=
name|ReportRegionStateTransitionRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setServer
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|addTransition
argument_list|(
name|RegionStateTransition
operator|.
name|newBuilder
argument_list|()
operator|.
name|addRegionInfo
argument_list|(
name|regionInfo
argument_list|)
operator|.
name|setTransitionCode
argument_list|(
name|state
argument_list|)
operator|.
name|setOpenSeqNum
argument_list|(
name|seqId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|reportRegionStateTransition
argument_list|(
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doCrash
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
name|this
operator|.
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|moveFromOnlineToDeadServers
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|this
operator|.
name|am
operator|.
name|submitServerCrash
argument_list|(
name|serverName
argument_list|,
literal|false
comment|/* No WALs here */
argument_list|)
expr_stmt|;
comment|// add a new server to avoid killing all the region servers which may hang the UTs
name|ServerName
name|newSn
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"localhost"
argument_list|,
literal|10000
operator|+
name|newRsAdded
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|newRsAdded
operator|++
expr_stmt|;
try|try
block|{
name|this
operator|.
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|regionServerReport
argument_list|(
name|newSn
argument_list|,
name|ServerMetricsBuilder
operator|.
name|of
argument_list|(
name|newSn
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YouAreDeadException
name|e
parameter_list|)
block|{
comment|// should not happen
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|doRestart
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|master
operator|.
name|restartRegionServer
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not restart RS with new startcode"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|GoodRsExecutor
extends|extends
name|NoopRsExecutor
block|{
annotation|@
name|Override
specifier|protected
name|RegionOpeningState
name|execOpenRegion
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|RegionOpenInfo
name|openReq
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionInfo
name|hri
init|=
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|openReq
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|previousOpenSeqNum
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getOrCreateRegionStateNode
argument_list|(
name|hri
argument_list|)
operator|.
name|getOpenSeqNum
argument_list|()
decl_stmt|;
name|sendTransitionReport
argument_list|(
name|server
argument_list|,
name|openReq
operator|.
name|getRegion
argument_list|()
argument_list|,
name|TransitionCode
operator|.
name|OPENED
argument_list|,
name|previousOpenSeqNum
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|// Concurrency?
comment|// Now update the state of our cluster in regionsToRegionServers.
name|SortedSet
argument_list|<
name|byte
index|[]
argument_list|>
name|regions
init|=
name|regionsToRegionServers
operator|.
name|get
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
name|regions
operator|=
operator|new
name|ConcurrentSkipListSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|regionsToRegionServers
operator|.
name|put
argument_list|(
name|server
argument_list|,
name|regions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|regions
operator|.
name|contains
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
throw|;
block|}
name|regions
operator|.
name|add
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|RegionOpeningState
operator|.
name|OPENED
return|;
block|}
annotation|@
name|Override
specifier|protected
name|CloseRegionResponse
name|execCloseRegion
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionInfo
name|hri
init|=
name|am
operator|.
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|sendTransitionReport
argument_list|(
name|server
argument_list|,
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|hri
argument_list|)
argument_list|,
name|TransitionCode
operator|.
name|CLOSED
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|CloseRegionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClosed
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|ServerNotYetRunningRsExecutor
implements|implements
name|MockRSExecutor
block|{
annotation|@
name|Override
specifier|public
name|ExecuteProceduresResponse
name|sendRequest
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|ExecuteProceduresRequest
name|req
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|ServerNotRunningYetException
argument_list|(
literal|"wait on server startup"
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|FaultyRsExecutor
implements|implements
name|MockRSExecutor
block|{
specifier|private
specifier|final
name|IOException
name|exception
decl_stmt|;
specifier|public
name|FaultyRsExecutor
parameter_list|(
specifier|final
name|IOException
name|exception
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|exception
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteProceduresResponse
name|sendRequest
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|ExecuteProceduresRequest
name|req
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
name|exception
throw|;
block|}
block|}
specifier|protected
class|class
name|SocketTimeoutRsExecutor
extends|extends
name|GoodRsExecutor
block|{
specifier|private
specifier|final
name|int
name|timeoutTimes
decl_stmt|;
specifier|private
name|ServerName
name|lastServer
decl_stmt|;
specifier|private
name|int
name|retries
decl_stmt|;
specifier|public
name|SocketTimeoutRsExecutor
parameter_list|(
name|int
name|timeoutTimes
parameter_list|)
block|{
name|this
operator|.
name|timeoutTimes
operator|=
name|timeoutTimes
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteProceduresResponse
name|sendRequest
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|ExecuteProceduresRequest
name|req
parameter_list|)
throws|throws
name|IOException
block|{
comment|// SocketTimeoutException should be a temporary problem
comment|// unless the server will be declared dead.
name|retries
operator|++
expr_stmt|;
if|if
condition|(
name|retries
operator|==
literal|1
condition|)
block|{
name|lastServer
operator|=
name|server
expr_stmt|;
block|}
if|if
condition|(
name|retries
operator|<=
name|timeoutTimes
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Socket timeout for server="
operator|+
name|server
operator|+
literal|" retries="
operator|+
name|retries
argument_list|)
expr_stmt|;
comment|// should not change the server if the server is not dead yet.
name|assertEquals
argument_list|(
name|lastServer
argument_list|,
name|server
argument_list|)
expr_stmt|;
if|if
condition|(
name|retries
operator|==
name|timeoutTimes
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Mark server="
operator|+
name|server
operator|+
literal|" as dead. retries="
operator|+
name|retries
argument_list|)
expr_stmt|;
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|moveFromOnlineToDeadServers
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|executor
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending in CRASH of "
operator|+
name|server
argument_list|)
expr_stmt|;
name|doCrash
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|SocketTimeoutException
argument_list|(
literal|"simulate socket timeout"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// should select another server
name|assertNotEquals
argument_list|(
name|lastServer
argument_list|,
name|server
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|sendRequest
argument_list|(
name|server
argument_list|,
name|req
argument_list|)
return|;
block|}
block|}
block|}
specifier|protected
class|class
name|CallQueueTooBigOnceRsExecutor
extends|extends
name|GoodRsExecutor
block|{
specifier|private
name|boolean
name|invoked
init|=
literal|false
decl_stmt|;
specifier|private
name|ServerName
name|lastServer
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ExecuteProceduresResponse
name|sendRequest
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|ExecuteProceduresRequest
name|req
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|invoked
condition|)
block|{
name|lastServer
operator|=
name|server
expr_stmt|;
name|invoked
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|CallQueueTooBigException
argument_list|(
literal|"simulate queue full"
argument_list|)
throw|;
block|}
comment|// better select another server since the server is over loaded, but anyway, it is fine to
comment|// still select the same server since it is not dead yet...
if|if
condition|(
name|lastServer
operator|.
name|equals
argument_list|(
name|server
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"We still select the same server, which is not good."
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|sendRequest
argument_list|(
name|server
argument_list|,
name|req
argument_list|)
return|;
block|}
block|}
specifier|protected
class|class
name|TimeoutThenCallQueueTooBigRsExecutor
extends|extends
name|GoodRsExecutor
block|{
specifier|private
specifier|final
name|int
name|queueFullTimes
decl_stmt|;
specifier|private
name|int
name|retries
decl_stmt|;
specifier|private
name|ServerName
name|lastServer
decl_stmt|;
specifier|public
name|TimeoutThenCallQueueTooBigRsExecutor
parameter_list|(
name|int
name|queueFullTimes
parameter_list|)
block|{
name|this
operator|.
name|queueFullTimes
operator|=
name|queueFullTimes
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteProceduresResponse
name|sendRequest
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|ExecuteProceduresRequest
name|req
parameter_list|)
throws|throws
name|IOException
block|{
name|retries
operator|++
expr_stmt|;
if|if
condition|(
name|retries
operator|==
literal|1
condition|)
block|{
name|lastServer
operator|=
name|server
expr_stmt|;
throw|throw
operator|new
name|CallTimeoutException
argument_list|(
literal|"simulate call timeout"
argument_list|)
throw|;
block|}
comment|// should always retry on the same server
name|assertEquals
argument_list|(
name|lastServer
argument_list|,
name|server
argument_list|)
expr_stmt|;
if|if
condition|(
name|retries
operator|<
name|queueFullTimes
condition|)
block|{
throw|throw
operator|new
name|CallQueueTooBigException
argument_list|(
literal|"simulate queue full"
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|sendRequest
argument_list|(
name|server
argument_list|,
name|req
argument_list|)
return|;
block|}
block|}
comment|/**    * Takes open request and then returns nothing so acts like a RS that went zombie. No response (so    * proc is stuck/suspended on the Master and won't wake up.). We then send in a crash for this    * server after a few seconds; crash is supposed to take care of the suspended procedures.    */
specifier|protected
class|class
name|HangThenRSCrashExecutor
extends|extends
name|GoodRsExecutor
block|{
specifier|private
name|int
name|invocations
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|RegionOpeningState
name|execOpenRegion
parameter_list|(
specifier|final
name|ServerName
name|server
parameter_list|,
name|RegionOpenInfo
name|openReq
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|invocations
operator|++
operator|>
literal|0
condition|)
block|{
comment|// Return w/o problem the second time through here.
return|return
name|super
operator|.
name|execOpenRegion
argument_list|(
name|server
argument_list|,
name|openReq
argument_list|)
return|;
block|}
comment|// The procedure on master will just hang forever because nothing comes back
comment|// from the RS in this case.
name|LOG
operator|.
name|info
argument_list|(
literal|"Return null response from serverName="
operator|+
name|server
operator|+
literal|"; means STUCK...TODO timeout"
argument_list|)
expr_stmt|;
name|executor
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending in CRASH of "
operator|+
name|server
argument_list|)
expr_stmt|;
name|doCrash
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Takes open request and then returns nothing so acts like a RS that went zombie. No response (so    * proc is stuck/suspended on the Master and won't wake up.). Different with    * HangThenRSCrashExecutor, HangThenRSCrashExecutor will create ServerCrashProcedure to handle the    * server crash. However, this HangThenRSRestartExecutor will restart RS directly, situation for    * RS crashed when SCP is not enabled.    */
specifier|protected
class|class
name|HangThenRSRestartExecutor
extends|extends
name|GoodRsExecutor
block|{
specifier|private
name|int
name|invocations
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|RegionOpeningState
name|execOpenRegion
parameter_list|(
specifier|final
name|ServerName
name|server
parameter_list|,
name|RegionOpenInfo
name|openReq
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|invocations
operator|++
operator|>
literal|0
condition|)
block|{
comment|// Return w/o problem the second time through here.
return|return
name|super
operator|.
name|execOpenRegion
argument_list|(
name|server
argument_list|,
name|openReq
argument_list|)
return|;
block|}
comment|// The procedure on master will just hang forever because nothing comes back
comment|// from the RS in this case.
name|LOG
operator|.
name|info
argument_list|(
literal|"Return null response from serverName="
operator|+
name|server
operator|+
literal|"; means STUCK...TODO timeout"
argument_list|)
expr_stmt|;
name|executor
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarting RS of "
operator|+
name|server
argument_list|)
expr_stmt|;
name|doRestart
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|protected
class|class
name|HangOnCloseThenRSCrashExecutor
extends|extends
name|GoodRsExecutor
block|{
specifier|public
specifier|static
specifier|final
name|int
name|TYPES_OF_FAILURE
init|=
literal|6
decl_stmt|;
specifier|private
name|int
name|invocations
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|CloseRegionResponse
name|execCloseRegion
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|this
operator|.
name|invocations
operator|++
condition|)
block|{
case|case
literal|0
case|:
throw|throw
operator|new
name|NotServingRegionException
argument_list|(
literal|"Fake"
argument_list|)
throw|;
case|case
literal|1
case|:
name|executor
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending in CRASH of "
operator|+
name|server
argument_list|)
expr_stmt|;
name|doCrash
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RegionServerAbortedException
argument_list|(
literal|"Fake!"
argument_list|)
throw|;
case|case
literal|2
case|:
name|executor
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending in CRASH of "
operator|+
name|server
argument_list|)
expr_stmt|;
name|doCrash
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RegionServerStoppedException
argument_list|(
literal|"Fake!"
argument_list|)
throw|;
case|case
literal|3
case|:
throw|throw
operator|new
name|ServerNotRunningYetException
argument_list|(
literal|"Fake!"
argument_list|)
throw|;
case|case
literal|4
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"Returned null from serverName={}; means STUCK...TODO timeout"
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|executor
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending in CRASH of "
operator|+
name|server
argument_list|)
expr_stmt|;
name|doCrash
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
default|default:
return|return
name|super
operator|.
name|execCloseRegion
argument_list|(
name|server
argument_list|,
name|regionName
argument_list|)
return|;
block|}
block|}
block|}
specifier|protected
class|class
name|RandRsExecutor
extends|extends
name|NoopRsExecutor
block|{
specifier|private
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ExecuteProceduresResponse
name|sendRequest
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|ExecuteProceduresRequest
name|req
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
throw|throw
operator|new
name|ServerNotRunningYetException
argument_list|(
literal|"wait on server startup"
argument_list|)
throw|;
case|case
literal|1
case|:
throw|throw
operator|new
name|SocketTimeoutException
argument_list|(
literal|"simulate socket timeout"
argument_list|)
throw|;
case|case
literal|2
case|:
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"java.io.IOException"
argument_list|,
literal|"unexpected exception"
argument_list|)
throw|;
default|default:
comment|// fall out
block|}
return|return
name|super
operator|.
name|sendRequest
argument_list|(
name|server
argument_list|,
name|req
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RegionOpeningState
name|execOpenRegion
parameter_list|(
specifier|final
name|ServerName
name|server
parameter_list|,
name|RegionOpenInfo
name|openReq
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionInfo
name|hri
init|=
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|openReq
operator|.
name|getRegion
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|previousOpenSeqNum
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getOrCreateRegionStateNode
argument_list|(
name|hri
argument_list|)
operator|.
name|getOpenSeqNum
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"Return OPENED response"
argument_list|)
expr_stmt|;
name|sendTransitionReport
argument_list|(
name|server
argument_list|,
name|openReq
operator|.
name|getRegion
argument_list|()
argument_list|,
name|TransitionCode
operator|.
name|OPENED
argument_list|,
name|previousOpenSeqNum
operator|+
literal|2
argument_list|)
expr_stmt|;
return|return
name|OpenRegionResponse
operator|.
name|RegionOpeningState
operator|.
name|OPENED
return|;
case|case
literal|1
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"Return transition report that FAILED_OPEN/FAILED_OPENING response"
argument_list|)
expr_stmt|;
name|sendTransitionReport
argument_list|(
name|server
argument_list|,
name|openReq
operator|.
name|getRegion
argument_list|()
argument_list|,
name|TransitionCode
operator|.
name|FAILED_OPEN
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|OpenRegionResponse
operator|.
name|RegionOpeningState
operator|.
name|FAILED_OPENING
return|;
default|default:
comment|// fall out
block|}
comment|// The procedure on master will just hang forever because nothing comes back
comment|// from the RS in this case.
name|LOG
operator|.
name|info
argument_list|(
literal|"Return null as response; means proc stuck so we send in a crash report after"
operator|+
literal|" a few seconds..."
argument_list|)
expr_stmt|;
name|executor
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Delayed CRASHING of "
operator|+
name|server
argument_list|)
expr_stmt|;
name|doCrash
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|CloseRegionResponse
name|execCloseRegion
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|CloseRegionResponse
operator|.
name|Builder
name|resp
init|=
name|CloseRegionResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|boolean
name|closed
init|=
name|rand
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|closed
condition|)
block|{
name|RegionInfo
name|hri
init|=
name|am
operator|.
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|sendTransitionReport
argument_list|(
name|server
argument_list|,
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|hri
argument_list|)
argument_list|,
name|TransitionCode
operator|.
name|CLOSED
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|resp
operator|.
name|setClosed
argument_list|(
name|closed
argument_list|)
expr_stmt|;
return|return
name|resp
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|protected
interface|interface
name|MockRSExecutor
block|{
name|ExecuteProceduresResponse
name|sendRequest
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|ExecuteProceduresRequest
name|req
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|protected
class|class
name|MockRSProcedureDispatcher
extends|extends
name|RSProcedureDispatcher
block|{
specifier|private
name|MockRSExecutor
name|mockRsExec
decl_stmt|;
specifier|public
name|MockRSProcedureDispatcher
parameter_list|(
specifier|final
name|MasterServices
name|master
parameter_list|)
block|{
name|super
argument_list|(
name|master
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMockRsExecutor
parameter_list|(
specifier|final
name|MockRSExecutor
name|mockRsExec
parameter_list|)
block|{
name|this
operator|.
name|mockRsExec
operator|=
name|mockRsExec
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|remoteDispatch
parameter_list|(
name|ServerName
name|serverName
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Set
argument_list|<
name|RemoteProcedure
argument_list|>
name|remoteProcedures
parameter_list|)
block|{
name|submitTask
argument_list|(
operator|new
name|MockRemoteCall
argument_list|(
name|serverName
argument_list|,
name|remoteProcedures
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|MockRemoteCall
extends|extends
name|ExecuteProceduresRemoteCall
block|{
specifier|public
name|MockRemoteCall
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|final
name|Set
argument_list|<
name|RemoteProcedure
argument_list|>
name|operations
parameter_list|)
block|{
name|super
argument_list|(
name|serverName
argument_list|,
name|operations
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ExecuteProceduresResponse
name|sendRequest
parameter_list|(
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|ExecuteProceduresRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mockRsExec
operator|.
name|sendRequest
argument_list|(
name|serverName
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
block|}
specifier|protected
specifier|final
name|void
name|collectAssignmentManagerMetrics
parameter_list|()
block|{
name|assignSubmittedCount
operator|=
name|assignProcMetrics
operator|.
name|getSubmittedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|assignFailedCount
operator|=
name|assignProcMetrics
operator|.
name|getFailedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|unassignSubmittedCount
operator|=
name|unassignProcMetrics
operator|.
name|getSubmittedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|unassignFailedCount
operator|=
name|unassignProcMetrics
operator|.
name|getFailedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|moveSubmittedCount
operator|=
name|moveProcMetrics
operator|.
name|getSubmittedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|moveFailedCount
operator|=
name|moveProcMetrics
operator|.
name|getFailedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|reopenSubmittedCount
operator|=
name|reopenProcMetrics
operator|.
name|getSubmittedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|reopenFailedCount
operator|=
name|reopenProcMetrics
operator|.
name|getFailedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|openSubmittedCount
operator|=
name|openProcMetrics
operator|.
name|getSubmittedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|openFailedCount
operator|=
name|openProcMetrics
operator|.
name|getFailedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|closeSubmittedCount
operator|=
name|closeProcMetrics
operator|.
name|getSubmittedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|closeFailedCount
operator|=
name|closeProcMetrics
operator|.
name|getFailedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

