begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
operator|.
name|ExplainingPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
specifier|abstract
class|class
name|AssignmentTestingUtil
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AssignmentTestingUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AssignmentTestingUtil
parameter_list|()
block|{}
specifier|public
specifier|static
name|void
name|waitForRegionToBeInTransition
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|Exception
block|{
while|while
condition|(
operator|!
name|getMaster
argument_list|(
name|util
argument_list|)
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|waitForRsToBeDead
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|Exception
block|{
name|util
operator|.
name|waitFor
argument_list|(
literal|60000
argument_list|,
operator|new
name|ExplainingPredicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
block|{
return|return
name|getMaster
argument_list|(
name|util
argument_list|)
operator|.
name|getServerManager
argument_list|()
operator|.
name|isServerDead
argument_list|(
name|serverName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|explainFailure
parameter_list|()
block|{
return|return
literal|"Server "
operator|+
name|serverName
operator|+
literal|" is not dead"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|stopRs
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"STOP REGION SERVER "
operator|+
name|serverName
argument_list|)
expr_stmt|;
name|util
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|stopRegionServer
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|waitForRsToBeDead
argument_list|(
name|util
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|killRs
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"KILL REGION SERVER "
operator|+
name|serverName
argument_list|)
expr_stmt|;
name|util
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|killRegionServer
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|waitForRsToBeDead
argument_list|(
name|util
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|crashRs
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|,
specifier|final
name|boolean
name|kill
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|kill
condition|)
block|{
name|killRs
argument_list|(
name|util
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stopRs
argument_list|(
name|util
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|ServerName
name|crashRsWithRegion
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|boolean
name|kill
parameter_list|)
throws|throws
name|Exception
block|{
name|ServerName
name|serverName
init|=
name|getServerHoldingRegion
argument_list|(
name|util
argument_list|,
name|hri
argument_list|)
decl_stmt|;
name|crashRs
argument_list|(
name|util
argument_list|,
name|serverName
argument_list|,
name|kill
argument_list|)
expr_stmt|;
return|return
name|serverName
return|;
block|}
specifier|public
specifier|static
name|ServerName
name|getServerHoldingRegion
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|Exception
block|{
name|ServerName
name|serverName
init|=
name|util
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getServerHoldingRegion
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|,
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|ServerName
name|amServerName
init|=
name|getMaster
argument_list|(
name|util
argument_list|)
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
comment|// Make sure AM and MiniCluster agrees on the Server holding the region
comment|// and that the server is online.
name|assertEquals
argument_list|(
name|amServerName
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|getMaster
argument_list|(
name|util
argument_list|)
operator|.
name|getServerManager
argument_list|()
operator|.
name|isServerOnline
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|serverName
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isServerHoldingMeta
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|getMetaRegions
argument_list|(
name|util
argument_list|)
control|)
block|{
if|if
condition|(
name|serverName
operator|.
name|equals
argument_list|(
name|getServerHoldingRegion
argument_list|(
name|util
argument_list|,
name|hri
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|getMetaRegions
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|)
block|{
return|return
name|getMaster
argument_list|(
name|util
argument_list|)
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getMetaRegionSet
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|HMaster
name|getMaster
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|)
block|{
return|return
name|util
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
return|;
block|}
block|}
end_class

end_unit

