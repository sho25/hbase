begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Mocking utility for common hbase:meta functionality  */
end_comment

begin_class
specifier|public
class|class
name|MetaMockingUtil
block|{
comment|/**    * Returns a Result object constructed from the given region information simulating    * a catalog table result.    * @param region the HRegionInfo object or null    * @return A mocked up Result that fakes a Get on a row in the<code>hbase:meta</code> table.    * @throws IOException    */
specifier|public
specifier|static
name|Result
name|getMetaTableRowResult
parameter_list|(
specifier|final
name|HRegionInfo
name|region
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getMetaTableRowResult
argument_list|(
name|region
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Returns a Result object constructed from the given region information simulating    * a catalog table result.    * @param region the HRegionInfo object or null    * @param sn to use making startcode and server hostname:port in meta or null    * @return A mocked up Result that fakes a Get on a row in the<code>hbase:meta</code> table.    * @throws IOException    */
specifier|public
specifier|static
name|Result
name|getMetaTableRowResult
parameter_list|(
specifier|final
name|HRegionInfo
name|region
parameter_list|,
specifier|final
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getMetaTableRowResult
argument_list|(
name|region
argument_list|,
name|sn
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Returns a Result object constructed from the given region information simulating    * a catalog table result.    * @param region the HRegionInfo object or null    * @param sn to use making startcode and server hostname:port in meta or null    * @param splita daughter region or null    * @param splitb  daughter region or null    * @return A mocked up Result that fakes a Get on a row in the<code>hbase:meta</code> table.    * @throws IOException    */
specifier|public
specifier|static
name|Result
name|getMetaTableRowResult
parameter_list|(
name|HRegionInfo
name|region
parameter_list|,
specifier|final
name|ServerName
name|sn
parameter_list|,
name|HRegionInfo
name|splita
parameter_list|,
name|HRegionInfo
name|splitb
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|,
name|region
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sn
operator|!=
literal|null
condition|)
block|{
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|getStartcode
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|splita
operator|!=
literal|null
condition|)
block|{
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SPLITA_QUALIFIER
argument_list|,
name|splita
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|splitb
operator|!=
literal|null
condition|)
block|{
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SPLITB_QUALIFIER
argument_list|,
name|splitb
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//important: sort the kvs so that binary search work
name|Collections
operator|.
name|sort
argument_list|(
name|kvs
argument_list|,
name|CellComparatorImpl
operator|.
name|META_COMPARATOR
argument_list|)
expr_stmt|;
return|return
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
return|;
block|}
block|}
end_class

end_unit

