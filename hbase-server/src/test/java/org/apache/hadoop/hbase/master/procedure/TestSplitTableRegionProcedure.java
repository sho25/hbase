begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|CompactionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|SplitTableRegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSplitTableRegionProcedure
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSplitTableRegionProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|ColumnFamilyName1
init|=
literal|"cf1"
decl_stmt|;
specifier|private
specifier|static
name|String
name|ColumnFamilyName2
init|=
literal|"cf2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|startRowNum
init|=
literal|11
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|rowCount
init|=
literal|60
decl_stmt|;
specifier|private
specifier|static
name|void
name|setupConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|MasterProcedureConstants
operator|.
name|MASTER_PROCEDURE_THREADS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|MAJOR_COMPACTION_PERIOD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|setupConf
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanupTest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failure shutting down cluster"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|ProcedureTestingUtility
operator|.
name|setKillAndToggleBeforeStoreUpdate
argument_list|(
name|getMasterProcedureExecutor
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Turn off balancer so it doesn't cut in and mess up our placements.
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Turn off the meta scanner so it don't remove parent on us.
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|ProcedureTestingUtility
operator|.
name|setKillAndToggleBeforeStoreUpdate
argument_list|(
name|getMasterProcedureExecutor
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|HTableDescriptor
name|htd
range|:
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|listTables
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Tear down, remove table="
operator|+
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|deleteTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSplitTableRegion
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testSplitTableRegion"
argument_list|)
decl_stmt|;
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|HRegionInfo
index|[]
name|regions
init|=
name|MasterProcedureTestingUtility
operator|.
name|createTable
argument_list|(
name|procExec
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|ColumnFamilyName1
argument_list|,
name|ColumnFamilyName2
argument_list|)
decl_stmt|;
name|insertData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|int
name|splitRowNum
init|=
name|startRowNum
operator|+
name|rowCount
operator|/
literal|2
decl_stmt|;
name|byte
index|[]
name|splitKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|splitRowNum
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|regions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|regions
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// Split region of the table
name|long
name|procId
init|=
name|procExec
operator|.
name|submitProcedure
argument_list|(
operator|new
name|SplitTableRegionProcedure
argument_list|(
name|procExec
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|regions
index|[
literal|0
index|]
argument_list|,
name|splitKey
argument_list|)
argument_list|)
decl_stmt|;
comment|// Wait the completion
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tableName
argument_list|,
name|splitRowNum
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSplitTableRegionNoStoreFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testSplitTableRegionNoStoreFile"
argument_list|)
decl_stmt|;
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|HRegionInfo
index|[]
name|regions
init|=
name|MasterProcedureTestingUtility
operator|.
name|createTable
argument_list|(
name|procExec
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|ColumnFamilyName1
argument_list|,
name|ColumnFamilyName2
argument_list|)
decl_stmt|;
name|int
name|splitRowNum
init|=
name|startRowNum
operator|+
name|rowCount
operator|/
literal|2
decl_stmt|;
name|byte
index|[]
name|splitKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|splitRowNum
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|regions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|regions
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// Split region of the table
name|long
name|procId
init|=
name|procExec
operator|.
name|submitProcedure
argument_list|(
operator|new
name|SplitTableRegionProcedure
argument_list|(
name|procExec
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|regions
index|[
literal|0
index|]
argument_list|,
name|splitKey
argument_list|)
argument_list|)
decl_stmt|;
comment|// Wait the completion
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|UTIL
operator|.
name|countRows
argument_list|(
name|tableName
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSplitTableRegionUnevenDaughter
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testSplitTableRegionUnevenDaughter"
argument_list|)
decl_stmt|;
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|HRegionInfo
index|[]
name|regions
init|=
name|MasterProcedureTestingUtility
operator|.
name|createTable
argument_list|(
name|procExec
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|ColumnFamilyName1
argument_list|,
name|ColumnFamilyName2
argument_list|)
decl_stmt|;
name|insertData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Split to two daughters with one of them only has 1 row
name|int
name|splitRowNum
init|=
name|startRowNum
operator|+
name|rowCount
operator|/
literal|4
decl_stmt|;
name|byte
index|[]
name|splitKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|splitRowNum
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|regions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|regions
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// Split region of the table
name|long
name|procId
init|=
name|procExec
operator|.
name|submitProcedure
argument_list|(
operator|new
name|SplitTableRegionProcedure
argument_list|(
name|procExec
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|regions
index|[
literal|0
index|]
argument_list|,
name|splitKey
argument_list|)
argument_list|)
decl_stmt|;
comment|// Wait the completion
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tableName
argument_list|,
name|splitRowNum
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSplitTableRegionEmptyDaughter
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testSplitTableRegionEmptyDaughter"
argument_list|)
decl_stmt|;
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|HRegionInfo
index|[]
name|regions
init|=
name|MasterProcedureTestingUtility
operator|.
name|createTable
argument_list|(
name|procExec
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|ColumnFamilyName1
argument_list|,
name|ColumnFamilyName2
argument_list|)
decl_stmt|;
name|insertData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Split to two daughters with one of them only has 1 row
name|int
name|splitRowNum
init|=
name|startRowNum
operator|+
name|rowCount
decl_stmt|;
name|byte
index|[]
name|splitKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|splitRowNum
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|regions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|regions
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// Split region of the table
name|long
name|procId
init|=
name|procExec
operator|.
name|submitProcedure
argument_list|(
operator|new
name|SplitTableRegionProcedure
argument_list|(
name|procExec
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|regions
index|[
literal|0
index|]
argument_list|,
name|splitKey
argument_list|)
argument_list|)
decl_stmt|;
comment|// Wait the completion
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
comment|// Make sure one daughter has 0 rows.
name|List
argument_list|<
name|HRegion
argument_list|>
name|daughters
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|daughters
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|UTIL
operator|.
name|countRows
argument_list|(
name|tableName
argument_list|)
operator|==
name|rowCount
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|UTIL
operator|.
name|countRows
argument_list|(
name|daughters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|==
literal|0
operator|||
name|UTIL
operator|.
name|countRows
argument_list|(
name|daughters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSplitTableRegionDeletedRowsDaughter
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testSplitTableRegionDeletedRowsDaughter"
argument_list|)
decl_stmt|;
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|HRegionInfo
index|[]
name|regions
init|=
name|MasterProcedureTestingUtility
operator|.
name|createTable
argument_list|(
name|procExec
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|ColumnFamilyName1
argument_list|,
name|ColumnFamilyName2
argument_list|)
decl_stmt|;
name|insertData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Split to two daughters with one of them only has 1 row
name|int
name|splitRowNum
init|=
name|rowCount
decl_stmt|;
name|deleteData
argument_list|(
name|tableName
argument_list|,
name|splitRowNum
argument_list|)
expr_stmt|;
name|byte
index|[]
name|splitKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|splitRowNum
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|regions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|regions
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// Split region of the table
name|long
name|procId
init|=
name|procExec
operator|.
name|submitProcedure
argument_list|(
operator|new
name|SplitTableRegionProcedure
argument_list|(
name|procExec
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|regions
index|[
literal|0
index|]
argument_list|,
name|splitKey
argument_list|)
argument_list|)
decl_stmt|;
comment|// Wait the completion
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// waiting for the major compaction to complete
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|6000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|)
operator|==
name|CompactionState
operator|.
name|NONE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Make sure one daughter has 0 rows.
name|List
argument_list|<
name|HRegion
argument_list|>
name|daughters
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|daughters
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|int
name|currentRowCount
init|=
name|splitRowNum
operator|-
name|startRowNum
decl_stmt|;
name|assertTrue
argument_list|(
name|UTIL
operator|.
name|countRows
argument_list|(
name|tableName
argument_list|)
operator|==
name|currentRowCount
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|UTIL
operator|.
name|countRows
argument_list|(
name|daughters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|==
literal|0
operator|||
name|UTIL
operator|.
name|countRows
argument_list|(
name|daughters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testInvalidSplitKey
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testInvalidSplitKey"
argument_list|)
decl_stmt|;
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|HRegionInfo
index|[]
name|regions
init|=
name|MasterProcedureTestingUtility
operator|.
name|createTable
argument_list|(
name|procExec
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|ColumnFamilyName1
argument_list|,
name|ColumnFamilyName2
argument_list|)
decl_stmt|;
name|insertData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|regions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|regions
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// Split region of the table with null split key
try|try
block|{
name|long
name|procId1
init|=
name|procExec
operator|.
name|submitProcedure
argument_list|(
operator|new
name|SplitTableRegionProcedure
argument_list|(
name|procExec
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|regions
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|procId1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"unexpected procedure start with invalid split-key"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Expected Split procedure construction failure: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRollbackAndDoubleExecution
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testRollbackAndDoubleExecution"
argument_list|)
decl_stmt|;
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|HRegionInfo
index|[]
name|regions
init|=
name|MasterProcedureTestingUtility
operator|.
name|createTable
argument_list|(
name|procExec
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|ColumnFamilyName1
argument_list|,
name|ColumnFamilyName2
argument_list|)
decl_stmt|;
name|insertData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|int
name|splitRowNum
init|=
name|startRowNum
operator|+
name|rowCount
operator|/
literal|2
decl_stmt|;
name|byte
index|[]
name|splitKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|splitRowNum
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|regions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|regions
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitNoProcedureRunning
argument_list|(
name|procExec
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|setKillAndToggleBeforeStoreUpdate
argument_list|(
name|procExec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Split region of the table
name|long
name|procId
init|=
name|procExec
operator|.
name|submitProcedure
argument_list|(
operator|new
name|SplitTableRegionProcedure
argument_list|(
name|procExec
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|regions
index|[
literal|0
index|]
argument_list|,
name|splitKey
argument_list|)
argument_list|)
decl_stmt|;
comment|// Failing before SPLIT_TABLE_REGION_UPDATE_META we should trigger the
comment|// rollback
comment|// NOTE: the 5 (number before SPLIT_TABLE_REGION_UPDATE_META step) is
comment|// hardcoded, so you have to look at this test at least once when you add a new step.
name|int
name|numberOfSteps
init|=
literal|5
decl_stmt|;
name|MasterProcedureTestingUtility
operator|.
name|testRollbackAndDoubleExecution
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|,
name|numberOfSteps
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRecoveryAndDoubleExecution
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testRecoveryAndDoubleExecution"
argument_list|)
decl_stmt|;
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|HRegionInfo
index|[]
name|regions
init|=
name|MasterProcedureTestingUtility
operator|.
name|createTable
argument_list|(
name|procExec
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|ColumnFamilyName1
argument_list|,
name|ColumnFamilyName2
argument_list|)
decl_stmt|;
name|insertData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|int
name|splitRowNum
init|=
name|startRowNum
operator|+
name|rowCount
operator|/
literal|2
decl_stmt|;
name|byte
index|[]
name|splitKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|splitRowNum
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|regions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|regions
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitNoProcedureRunning
argument_list|(
name|procExec
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|setKillAndToggleBeforeStoreUpdate
argument_list|(
name|procExec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Split region of the table
name|long
name|procId
init|=
name|procExec
operator|.
name|submitProcedure
argument_list|(
operator|new
name|SplitTableRegionProcedure
argument_list|(
name|procExec
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|regions
index|[
literal|0
index|]
argument_list|,
name|splitKey
argument_list|)
argument_list|)
decl_stmt|;
comment|// Restart the executor and execute the step twice
name|int
name|numberOfSteps
init|=
name|SplitTableRegionState
operator|.
name|values
argument_list|()
operator|.
name|length
decl_stmt|;
name|MasterProcedureTestingUtility
operator|.
name|testRecoveryAndDoubleExecution
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|,
name|numberOfSteps
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tableName
argument_list|,
name|splitRowNum
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|insertData
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Table
name|t
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Put
name|p
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|p
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
operator|(
name|startRowNum
operator|+
name|i
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ColumnFamilyName1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ColumnFamilyName2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
operator|(
name|startRowNum
operator|+
name|rowCount
operator|-
name|i
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ColumnFamilyName1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ColumnFamilyName2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|5
operator|==
literal|0
condition|)
block|{
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|deleteData
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|int
name|startDeleteRowNum
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Table
name|t
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numRows
init|=
name|rowCount
operator|+
name|startRowNum
operator|-
name|startDeleteRowNum
decl_stmt|;
name|Delete
name|d
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startDeleteRowNum
init|;
name|i
operator|<=
name|numRows
operator|+
name|startDeleteRowNum
condition|;
name|i
operator|++
control|)
block|{
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|5
operator|==
literal|0
condition|)
block|{
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|verify
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|int
name|splitRowNum
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|HRegion
argument_list|>
name|daughters
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|daughters
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Row Count = "
operator|+
name|UTIL
operator|.
name|countRows
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|UTIL
operator|.
name|countRows
argument_list|(
name|tableName
argument_list|)
operator|==
name|rowCount
argument_list|)
expr_stmt|;
name|int
name|startRow
decl_stmt|;
name|int
name|numRows
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|daughters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|daughters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
operator|==
literal|0
condition|)
block|{
name|startRow
operator|=
name|startRowNum
expr_stmt|;
comment|// first region
name|numRows
operator|=
name|splitRowNum
operator|-
name|startRowNum
expr_stmt|;
block|}
else|else
block|{
name|startRow
operator|=
name|splitRowNum
expr_stmt|;
name|numRows
operator|=
name|rowCount
operator|+
name|startRowNum
operator|-
name|splitRowNum
expr_stmt|;
block|}
name|verifyData
argument_list|(
name|daughters
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|startRow
argument_list|,
name|numRows
argument_list|,
name|ColumnFamilyName1
operator|.
name|getBytes
argument_list|()
argument_list|,
name|ColumnFamilyName2
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyData
parameter_list|(
specifier|final
name|HRegion
name|newReg
parameter_list|,
specifier|final
name|int
name|startRow
parameter_list|,
specifier|final
name|int
name|numRows
parameter_list|,
specifier|final
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|startRow
init|;
name|i
operator|<
name|startRow
operator|+
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|i
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|newReg
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|Cell
index|[]
name|raw
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|families
operator|.
name|length
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|families
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|raw
index|[
name|j
index|]
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|raw
index|[
name|j
index|]
argument_list|,
name|families
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|getMasterProcedureExecutor
parameter_list|()
block|{
return|return
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterProcedureExecutor
argument_list|()
return|;
block|}
block|}
end_class

end_unit

