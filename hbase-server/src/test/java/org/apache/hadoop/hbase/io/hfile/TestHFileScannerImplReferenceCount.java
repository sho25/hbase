begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileBlockIndex
operator|.
name|MAX_CHUNK_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileBlockIndex
operator|.
name|MIN_INDEX_NUM_ENTRIES_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileReaderImpl
operator|.
name|HFileScannerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHFileScannerImplReferenceCount
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestHFileScannerImplReferenceCount
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHFileScannerImplReferenceCount
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|SUFFIX
init|=
name|randLongBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|randLongBytes
parameter_list|()
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|byte
index|[]
name|keys
init|=
operator|new
name|byte
index|[
literal|300
index|]
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|keys
argument_list|)
expr_stmt|;
return|return
name|keys
return|;
block|}
specifier|private
name|Cell
name|firstCell
init|=
literal|null
decl_stmt|;
specifier|private
name|Cell
name|secondCell
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Set the max chunk size and min entries key to be very small for index block, so that we can
comment|// create an index block tree with level>= 2.
name|conf
operator|.
name|setInt
argument_list|(
name|MAX_CHUNK_SIZE_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MIN_INDEX_NUM_ENTRIES_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeHFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|hfilePath
parameter_list|,
name|Algorithm
name|compression
parameter_list|,
name|DataBlockEncoding
name|encoding
parameter_list|,
name|int
name|cellCount
parameter_list|)
throws|throws
name|IOException
block|{
name|HFileContext
name|context
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
literal|1
argument_list|)
operator|.
name|withDataBlockEncoding
argument_list|(
name|DataBlockEncoding
operator|.
name|NONE
argument_list|)
operator|.
name|withCompression
argument_list|(
name|compression
argument_list|)
operator|.
name|withDataBlockEncoding
argument_list|(
name|encoding
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
init|(
name|HFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|HFile
operator|.
name|WriterFactory
argument_list|(
name|conf
argument_list|,
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|withPath
argument_list|(
name|fs
argument_list|,
name|hfilePath
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|context
argument_list|)
operator|.
name|withComparator
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
argument_list|)
operator|.
name|create
argument_list|()
init|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|9713312
argument_list|)
decl_stmt|;
comment|// Just a fixed seed.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cellCount
condition|;
operator|++
name|i
control|)
block|{
name|byte
index|[]
name|keyBytes
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|SUFFIX
argument_list|)
decl_stmt|;
comment|// A random-length random value.
name|byte
index|[]
name|valueBytes
init|=
name|RandomKeyValueUtil
operator|.
name|randomValue
argument_list|(
name|rand
argument_list|)
decl_stmt|;
name|KeyValue
name|keyValue
init|=
operator|new
name|KeyValue
argument_list|(
name|keyBytes
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|valueBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstCell
operator|==
literal|null
condition|)
block|{
name|firstCell
operator|=
name|keyValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|secondCell
operator|==
literal|null
condition|)
block|{
name|secondCell
operator|=
name|keyValue
expr_stmt|;
block|}
name|writer
operator|.
name|append
argument_list|(
name|keyValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testReleaseBlock
parameter_list|(
name|Algorithm
name|compression
parameter_list|,
name|DataBlockEncoding
name|encoding
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"testReleasingBlock"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|dir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|hfileName
init|=
literal|"testReleaseBlock_hfile_0_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Path
name|hfilePath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|hfileName
argument_list|)
decl_stmt|;
name|int
name|cellCount
init|=
literal|1000
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Start to write {} cells into hfile: {}"
argument_list|,
name|cellCount
argument_list|,
name|hfilePath
argument_list|)
expr_stmt|;
name|writeHFile
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|hfilePath
argument_list|,
name|compression
argument_list|,
name|encoding
argument_list|,
name|cellCount
argument_list|)
expr_stmt|;
name|BlockCache
name|defaultBC
init|=
name|BlockCacheFactory
operator|.
name|createBlockCache
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|defaultBC
argument_list|)
expr_stmt|;
name|HFile
operator|.
name|Reader
name|reader
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|hfilePath
argument_list|,
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|,
name|defaultBC
argument_list|)
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reader
operator|instanceof
name|HFileReaderImpl
argument_list|)
expr_stmt|;
comment|// We've build a HFile tree with index = 16.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|reader
operator|.
name|getTrailer
argument_list|()
operator|.
name|getNumDataIndexLevels
argument_list|()
argument_list|)
expr_stmt|;
name|HFileScanner
name|scanner
init|=
name|reader
operator|.
name|getScanner
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BlockWithScanInfo
name|scanInfo
init|=
name|reader
operator|.
name|getDataBlockIndexReader
argument_list|()
operator|.
name|loadDataBlockWithScanInfo
argument_list|(
name|firstCell
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|DataBlockEncoding
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|BlockWithScanInfo
name|scanInfo2
init|=
name|reader
operator|.
name|getDataBlockIndexReader
argument_list|()
operator|.
name|loadDataBlockWithScanInfo
argument_list|(
name|secondCell
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|DataBlockEncoding
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|HFileBlock
name|block
init|=
name|scanInfo
operator|.
name|getHFileBlock
argument_list|()
decl_stmt|;
name|HFileBlock
name|block2
init|=
name|scanInfo2
operator|.
name|getHFileBlock
argument_list|()
decl_stmt|;
comment|// One refCnt for blockCache and the other refCnt for RPC path.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|block
operator|.
name|refCnt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|block2
operator|.
name|refCnt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|block
operator|==
name|block2
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|(
name|firstCell
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|block
operator|.
name|refCnt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Seek to the block again, the curBlock won't change and won't read from BlockCache. so
comment|// refCnt should be unchanged.
name|scanner
operator|.
name|seekTo
argument_list|(
name|firstCell
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|block
operator|.
name|refCnt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|(
name|secondCell
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|block
operator|.
name|refCnt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|block2
operator|.
name|refCnt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// After shipped, the block will be release, but block2 is still referenced by the curBlock.
name|scanner
operator|.
name|shipped
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|block
operator|.
name|refCnt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|block2
operator|.
name|refCnt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Try to ship again, though with nothing to client.
name|scanner
operator|.
name|shipped
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|block
operator|.
name|refCnt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|block2
operator|.
name|refCnt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// The curBlock(block2) will also be released.
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|block2
operator|.
name|refCnt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Finish the block& block2 RPC path
name|block
operator|.
name|release
argument_list|()
expr_stmt|;
name|block2
operator|.
name|release
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|block
operator|.
name|refCnt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|block2
operator|.
name|refCnt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Evict the LRUBlockCache
name|Assert
operator|.
name|assertTrue
argument_list|(
name|defaultBC
operator|.
name|evictBlocksByHfileName
argument_list|(
name|hfileName
argument_list|)
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|block
operator|.
name|refCnt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|block2
operator|.
name|refCnt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|scanner
operator|.
name|seekTo
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|count
expr_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|cellCount
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * See HBASE-22480    */
annotation|@
name|Test
specifier|public
name|void
name|testSeekBefore
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"testSeekBefore"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|dir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|hfileName
init|=
literal|"testSeekBefore_hfile_0_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Path
name|hfilePath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|hfileName
argument_list|)
decl_stmt|;
name|int
name|cellCount
init|=
literal|1000
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Start to write {} cells into hfile: {}"
argument_list|,
name|cellCount
argument_list|,
name|hfilePath
argument_list|)
expr_stmt|;
name|writeHFile
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|hfilePath
argument_list|,
name|Algorithm
operator|.
name|NONE
argument_list|,
name|DataBlockEncoding
operator|.
name|NONE
argument_list|,
name|cellCount
argument_list|)
expr_stmt|;
name|BlockCache
name|defaultBC
init|=
name|BlockCacheFactory
operator|.
name|createBlockCache
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|defaultBC
argument_list|)
expr_stmt|;
name|HFile
operator|.
name|Reader
name|reader
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|hfilePath
argument_list|,
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|,
name|defaultBC
argument_list|)
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reader
operator|instanceof
name|HFileReaderImpl
argument_list|)
expr_stmt|;
comment|// We've build a HFile tree with index = 16.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|reader
operator|.
name|getTrailer
argument_list|()
operator|.
name|getNumDataIndexLevels
argument_list|()
argument_list|)
expr_stmt|;
name|HFileScanner
name|scanner
init|=
name|reader
operator|.
name|getScanner
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HFileBlock
name|block1
init|=
name|reader
operator|.
name|getDataBlockIndexReader
argument_list|()
operator|.
name|loadDataBlockWithScanInfo
argument_list|(
name|firstCell
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|DataBlockEncoding
operator|.
name|NONE
argument_list|)
operator|.
name|getHFileBlock
argument_list|()
decl_stmt|;
name|HFileBlock
name|block2
init|=
name|reader
operator|.
name|getDataBlockIndexReader
argument_list|()
operator|.
name|loadDataBlockWithScanInfo
argument_list|(
name|secondCell
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|DataBlockEncoding
operator|.
name|NONE
argument_list|)
operator|.
name|getHFileBlock
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|block1
operator|.
name|refCnt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|block2
operator|.
name|refCnt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Let the curBlock refer to block2.
name|scanner
operator|.
name|seekTo
argument_list|(
name|secondCell
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|HFileScannerImpl
operator|)
name|scanner
operator|)
operator|.
name|curBlock
operator|==
name|block2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|block2
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release the block1, only one reference: blockCache.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|block1
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|block1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release the block2, so the remain references are: 1. scanner; 2. blockCache.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|block2
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|block2
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do the seekBefore: the newBlock will be the previous block of curBlock.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|scanner
operator|.
name|seekBefore
argument_list|(
name|secondCell
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|HFileScannerImpl
operator|)
name|scanner
operator|)
operator|.
name|curBlock
operator|==
name|block1
argument_list|)
expr_stmt|;
comment|// Two reference for block1: 1. scanner; 2. blockCache.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|block1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reference count of block2 must be unchanged because we haven't shipped.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|block2
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do the shipped
name|scanner
operator|.
name|shipped
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|block1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|block2
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do the close
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|block1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|block2
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|defaultBC
operator|.
name|evictBlocksByHfileName
argument_list|(
name|hfileName
argument_list|)
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|block1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|block2
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reload the block1 again.
name|block1
operator|=
name|reader
operator|.
name|getDataBlockIndexReader
argument_list|()
operator|.
name|loadDataBlockWithScanInfo
argument_list|(
name|firstCell
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|DataBlockEncoding
operator|.
name|NONE
argument_list|)
operator|.
name|getHFileBlock
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|block1
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|block1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Re-seek to the begin.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|scanner
operator|.
name|seekTo
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|HFileScannerImpl
operator|)
name|scanner
operator|)
operator|.
name|curBlock
operator|==
name|block1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|block1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Return false because firstCell<= c[0]
name|Assert
operator|.
name|assertFalse
argument_list|(
name|scanner
operator|.
name|seekBefore
argument_list|(
name|firstCell
argument_list|)
argument_list|)
expr_stmt|;
comment|// The block1 shouldn't be released because we still don't do the shipped or close.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|block1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|block1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|defaultBC
operator|.
name|evictBlocksByHfileName
argument_list|(
name|hfileName
argument_list|)
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|block1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|testReleaseBlock
argument_list|(
name|Algorithm
operator|.
name|NONE
argument_list|,
name|DataBlockEncoding
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompression
parameter_list|()
throws|throws
name|Exception
block|{
name|testReleaseBlock
argument_list|(
name|Algorithm
operator|.
name|GZ
argument_list|,
name|DataBlockEncoding
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDataBlockEncoding
parameter_list|()
throws|throws
name|Exception
block|{
name|testReleaseBlock
argument_list|(
name|Algorithm
operator|.
name|NONE
argument_list|,
name|DataBlockEncoding
operator|.
name|ROW_INDEX_V1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDataBlockEncodingAndCompression
parameter_list|()
throws|throws
name|Exception
block|{
name|testReleaseBlock
argument_list|(
name|Algorithm
operator|.
name|GZ
argument_list|,
name|DataBlockEncoding
operator|.
name|ROW_INDEX_V1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

