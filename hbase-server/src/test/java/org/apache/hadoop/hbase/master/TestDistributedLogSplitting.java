begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_mgr_wait_for_zk_delete
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_wkr_final_transition_failed
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_wkr_preempt_task
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_wkr_task_acquired
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_wkr_task_done
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_wkr_task_err
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
operator|.
name|tot_wkr_task_resigned
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|LongAdder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coordination
operator|.
name|ZKSplitLogManagerCoordination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerNotRunningYetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|SplitLogManager
operator|.
name|TaskBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|RegionStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MultiVersionConcurrencyControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|MasterThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|RegionServerThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|TestDistributedLogSplitting
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSplitLogManager
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
comment|// Uncomment the following line if more verbosity is needed for
comment|// debugging (see HBASE-12285 for details).
comment|//Logger.getLogger("org.apache.hadoop.hbase").setLevel(Level.DEBUG);
comment|// test ThreeRSAbort fails under hadoop2 (2.0.2-alpha) if shortcircuit-read (scr) is on. this
comment|// turns it off for this test.  TODO: Figure out why scr breaks recovery.
name|System
operator|.
name|setProperty
argument_list|(
literal|"hbase.tests.use.shortcircuit.reads"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
comment|// Start a cluster with 2 masters and 6 regionservers
specifier|static
specifier|final
name|int
name|NUM_MASTERS
init|=
literal|2
decl_stmt|;
specifier|static
specifier|final
name|int
name|NUM_RS
init|=
literal|5
decl_stmt|;
name|MiniHBaseCluster
name|cluster
decl_stmt|;
name|HMaster
name|master
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
specifier|static
name|Configuration
name|originalConf
decl_stmt|;
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
specifier|static
name|MiniZooKeeperCluster
name|zkCluster
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|zkCluster
operator|=
name|TEST_UTIL
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|originalConf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniDFSCluster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|startCluster
parameter_list|(
name|int
name|num_rs
parameter_list|)
throws|throws
name|Exception
block|{
name|SplitLogCounters
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting cluster"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.splitlog.max.resubmit"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Make the failure test faster
name|conf
operator|.
name|setInt
argument_list|(
literal|"zookeeper.recovery.retry"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|REGIONSERVER_INFO_PORT
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|HConstants
operator|.
name|LOAD_BALANCER_SLOP_KEY
argument_list|,
operator|(
name|float
operator|)
literal|100.0
argument_list|)
expr_stmt|;
comment|// no load balancing
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.wal.max.splitters"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_HIGH_PRIORITY_HANDLER_COUNT
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|setZkCluster
argument_list|(
name|zkCluster
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniHBaseCluster
argument_list|(
name|NUM_MASTERS
argument_list|,
name|num_rs
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for active/ready master"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
expr_stmt|;
name|master
operator|=
name|cluster
operator|.
name|getMaster
argument_list|()
expr_stmt|;
while|while
condition|(
name|cluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|num_rs
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
comment|// refresh configuration
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|originalConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MasterThread
name|mt
range|:
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getLiveMasterThreads
argument_list|()
control|)
block|{
name|mt
operator|.
name|getMaster
argument_list|()
operator|.
name|abort
argument_list|(
literal|"closing..."
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|TEST_UTIL
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|TEST_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
literal|"/hbase"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testRecoveredEdits
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.regionserver.hlog.blocksize"
argument_list|,
literal|30
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// create more than one wal
name|startCluster
argument_list|(
name|NUM_RS
argument_list|)
expr_stmt|;
specifier|final
name|int
name|NUM_LOG_LINES
init|=
literal|10000
decl_stmt|;
specifier|final
name|SplitLogManager
name|slm
init|=
name|master
operator|.
name|getMasterWalManager
argument_list|()
operator|.
name|getSplitLogManager
argument_list|()
decl_stmt|;
comment|// turn off load balancing to prevent regions from moving around otherwise
comment|// they will consume recovered.edits
name|master
operator|.
name|balanceSwitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionServerThread
argument_list|>
name|rsts
init|=
name|cluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
decl_stmt|;
name|Path
name|rootdir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|numRegions
init|=
literal|50
decl_stmt|;
name|Table
name|t
init|=
name|installTable
argument_list|(
operator|new
name|ZKWatcher
argument_list|(
name|conf
argument_list|,
literal|"table-creation"
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"table"
argument_list|,
literal|"family"
argument_list|,
name|numRegions
argument_list|)
decl_stmt|;
try|try
block|{
name|TableName
name|table
init|=
name|t
operator|.
name|getName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
literal|null
decl_stmt|;
name|HRegionServer
name|hrs
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_RS
condition|;
name|i
operator|++
control|)
block|{
name|hrs
operator|=
name|rsts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRegionServer
argument_list|()
expr_stmt|;
name|regions
operator|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|hrs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
expr_stmt|;
comment|// At least one RS will have>= to average number of regions.
if|if
condition|(
name|regions
operator|.
name|size
argument_list|()
operator|>=
name|numRegions
operator|/
name|NUM_RS
condition|)
break|break;
block|}
specifier|final
name|Path
name|logDir
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|AbstractFSWALProvider
operator|.
name|getWALDirectoryName
argument_list|(
name|hrs
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"#regions = "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|RegionInfo
argument_list|>
name|it
init|=
name|regions
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RegionInfo
name|region
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getTable
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
operator|.
name|equals
argument_list|(
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE_NAME_STR
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|makeWAL
argument_list|(
name|hrs
argument_list|,
name|regions
argument_list|,
literal|"table"
argument_list|,
literal|"family"
argument_list|,
name|NUM_LOG_LINES
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|slm
operator|.
name|splitLogDistributed
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RegionInfo
name|hri
range|:
name|regions
control|)
block|{
name|Path
name|tdir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootdir
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|Path
name|editsdir
init|=
name|WALSplitter
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|tdir
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"checking edits dir "
operator|+
name|editsdir
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|editsdir
argument_list|,
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
if|if
condition|(
name|WALSplitter
operator|.
name|isSequenceIdFile
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"edits dir should have more than a single file in it. instead has "
operator|+
name|files
operator|.
name|length
argument_list|,
name|files
operator|.
name|length
operator|>
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c
init|=
name|countWAL
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|count
operator|+=
name|c
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|count
operator|+
literal|" edits in "
operator|+
name|files
operator|.
name|length
operator|+
literal|" recovered edits files."
argument_list|)
expr_stmt|;
block|}
comment|// check that the log file is moved
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|logDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_LOG_LINES
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMasterStartsUpWithLogSplittingWork
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MINTOSTART
argument_list|,
name|NUM_RS
operator|-
literal|1
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|NUM_RS
argument_list|)
expr_stmt|;
specifier|final
name|int
name|NUM_REGIONS_TO_CREATE
init|=
literal|40
decl_stmt|;
specifier|final
name|int
name|NUM_LOG_LINES
init|=
literal|1000
decl_stmt|;
comment|// turn off load balancing to prevent regions from moving around otherwise
comment|// they will consume recovered.edits
name|master
operator|.
name|balanceSwitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|ZKWatcher
name|zkw
init|=
operator|new
name|ZKWatcher
argument_list|(
name|conf
argument_list|,
literal|"table-creation"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|installTable
argument_list|(
name|zkw
argument_list|,
literal|"table"
argument_list|,
literal|"family"
argument_list|,
name|NUM_REGIONS_TO_CREATE
argument_list|)
decl_stmt|;
try|try
block|{
name|HRegionServer
name|hrs
init|=
name|findRSToKill
argument_list|(
literal|false
argument_list|,
literal|"table"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|hrs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
decl_stmt|;
name|makeWAL
argument_list|(
name|hrs
argument_list|,
name|regions
argument_list|,
literal|"table"
argument_list|,
literal|"family"
argument_list|,
name|NUM_LOG_LINES
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// abort master
name|abortMaster
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
comment|// abort RS
name|LOG
operator|.
name|info
argument_list|(
literal|"Aborting region server: "
operator|+
name|hrs
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|hrs
operator|.
name|abort
argument_list|(
literal|"testing"
argument_list|)
expr_stmt|;
comment|// wait for abort completes
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|120000
argument_list|,
literal|200
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
name|cluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
operator|(
name|NUM_RS
operator|-
literal|1
operator|)
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Current Open Regions:"
operator|+
name|HBaseTestingUtility
operator|.
name|getAllOnlineRegions
argument_list|(
name|cluster
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// wait for abort completes
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|120000
argument_list|,
literal|200
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
name|HBaseTestingUtility
operator|.
name|getAllOnlineRegions
argument_list|(
name|cluster
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
operator|(
name|NUM_REGIONS_TO_CREATE
operator|+
literal|1
operator|)
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Current Open Regions After Master Node Starts Up:"
operator|+
name|HBaseTestingUtility
operator|.
name|getAllOnlineRegions
argument_list|(
name|cluster
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_LOG_LINES
argument_list|,
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|ht
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ht
operator|!=
literal|null
condition|)
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|zkw
operator|!=
literal|null
condition|)
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * The original intention of this test was to force an abort of a region    * server and to make sure that the failure path in the region servers is    * properly evaluated. But it is difficult to ensure that the region server    * doesn't finish the log splitting before it aborts. Also now, there is    * this code path where the master will preempt the region server when master    * detects that the region server has aborted.    * @throws Exception    */
comment|// Was marked flaky before Distributed Log Replay cleanup.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testWorkerAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testWorkerAbort"
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
specifier|final
name|int
name|NUM_LOG_LINES
init|=
literal|10000
decl_stmt|;
specifier|final
name|SplitLogManager
name|slm
init|=
name|master
operator|.
name|getMasterWalManager
argument_list|()
operator|.
name|getSplitLogManager
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RegionServerThread
argument_list|>
name|rsts
init|=
name|cluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
decl_stmt|;
name|HRegionServer
name|hrs
init|=
name|findRSToKill
argument_list|(
literal|false
argument_list|,
literal|"table"
argument_list|)
decl_stmt|;
name|Path
name|rootdir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|logDir
init|=
operator|new
name|Path
argument_list|(
name|rootdir
argument_list|,
name|AbstractFSWALProvider
operator|.
name|getWALDirectoryName
argument_list|(
name|hrs
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Table
name|t
init|=
name|installTable
argument_list|(
operator|new
name|ZKWatcher
argument_list|(
name|conf
argument_list|,
literal|"table-creation"
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"table"
argument_list|,
literal|"family"
argument_list|,
literal|40
argument_list|)
decl_stmt|;
try|try
block|{
name|makeWAL
argument_list|(
name|hrs
argument_list|,
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|hrs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
argument_list|,
literal|"table"
argument_list|,
literal|"family"
argument_list|,
name|NUM_LOG_LINES
argument_list|,
literal|100
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|waitForCounter
argument_list|(
name|tot_wkr_task_acquired
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionServerThread
name|rst
range|:
name|rsts
control|)
block|{
name|rst
operator|.
name|getRegionServer
argument_list|()
operator|.
name|abort
argument_list|(
literal|"testing"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// slm.splitLogDistributed(logDir);
name|FileStatus
index|[]
name|logfiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
name|TaskBatch
name|batch
init|=
operator|new
name|TaskBatch
argument_list|()
decl_stmt|;
name|slm
operator|.
name|enqueueSplitTask
argument_list|(
name|logfiles
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|batch
argument_list|)
expr_stmt|;
comment|//waitForCounter but for one of the 2 counters
name|long
name|curt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|waitTime
init|=
literal|80000
decl_stmt|;
name|long
name|endt
init|=
name|curt
operator|+
name|waitTime
decl_stmt|;
while|while
condition|(
name|curt
operator|<
name|endt
condition|)
block|{
if|if
condition|(
operator|(
name|tot_wkr_task_resigned
operator|.
name|sum
argument_list|()
operator|+
name|tot_wkr_task_err
operator|.
name|sum
argument_list|()
operator|+
name|tot_wkr_final_transition_failed
operator|.
name|sum
argument_list|()
operator|+
name|tot_wkr_task_done
operator|.
name|sum
argument_list|()
operator|+
name|tot_wkr_preempt_task
operator|.
name|sum
argument_list|()
operator|)
operator|==
literal|0
condition|)
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
name|curt
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|1
operator|<=
operator|(
name|tot_wkr_task_resigned
operator|.
name|sum
argument_list|()
operator|+
name|tot_wkr_task_err
operator|.
name|sum
argument_list|()
operator|+
name|tot_wkr_final_transition_failed
operator|.
name|sum
argument_list|()
operator|+
name|tot_wkr_task_done
operator|.
name|sum
argument_list|()
operator|+
name|tot_wkr_preempt_task
operator|.
name|sum
argument_list|()
operator|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"none of the following counters went up in "
operator|+
name|waitTime
operator|+
literal|" milliseconds - "
operator|+
literal|"tot_wkr_task_resigned, tot_wkr_task_err, "
operator|+
literal|"tot_wkr_final_transition_failed, tot_wkr_task_done, "
operator|+
literal|"tot_wkr_preempt_task"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testThreeRSAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testThreeRSAbort"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|NUM_REGIONS_TO_CREATE
init|=
literal|40
decl_stmt|;
specifier|final
name|int
name|NUM_ROWS_PER_REGION
init|=
literal|100
decl_stmt|;
name|startCluster
argument_list|(
name|NUM_RS
argument_list|)
expr_stmt|;
comment|// NUM_RS=6.
specifier|final
name|ZKWatcher
name|zkw
init|=
operator|new
name|ZKWatcher
argument_list|(
name|conf
argument_list|,
literal|"distributed log splitting test"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|installTable
argument_list|(
name|zkw
argument_list|,
literal|"table"
argument_list|,
literal|"family"
argument_list|,
name|NUM_REGIONS_TO_CREATE
argument_list|)
decl_stmt|;
try|try
block|{
name|populateDataInTable
argument_list|(
name|NUM_ROWS_PER_REGION
argument_list|,
literal|"family"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionServerThread
argument_list|>
name|rsts
init|=
name|cluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_RS
argument_list|,
name|rsts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rsts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionServer
argument_list|()
operator|.
name|abort
argument_list|(
literal|"testing"
argument_list|)
expr_stmt|;
name|rsts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRegionServer
argument_list|()
operator|.
name|abort
argument_list|(
literal|"testing"
argument_list|)
expr_stmt|;
name|rsts
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getRegionServer
argument_list|()
operator|.
name|abort
argument_list|(
literal|"testing"
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
while|while
condition|(
name|cluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
operator|>
operator|(
name|NUM_RS
operator|-
literal|3
operator|)
condition|)
block|{
if|if
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|start
operator|>
literal|60000
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
name|start
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
while|while
condition|(
name|HBaseTestingUtility
operator|.
name|getAllOnlineRegions
argument_list|(
name|cluster
argument_list|)
operator|.
name|size
argument_list|()
operator|<
operator|(
name|NUM_REGIONS_TO_CREATE
operator|+
literal|1
operator|)
condition|)
block|{
if|if
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
name|start
operator|>
literal|60000
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Timedout"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|NUM_REGIONS_TO_CREATE
operator|*
name|NUM_ROWS_PER_REGION
argument_list|,
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|ht
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ht
operator|!=
literal|null
condition|)
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|zkw
operator|!=
literal|null
condition|)
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testDelayedDeleteOnFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testDelayedDeleteOnFailure"
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|SplitLogManager
name|slm
init|=
name|master
operator|.
name|getMasterWalManager
argument_list|()
operator|.
name|getSplitLogManager
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|logDir
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
argument_list|,
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"x"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|ExecutorService
name|executor
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|Path
name|corruptedLogFile
init|=
operator|new
name|Path
argument_list|(
name|logDir
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
decl_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|corruptedLogFile
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"corrupted bytes"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|ZKSplitLogManagerCoordination
name|coordination
init|=
call|(
name|ZKSplitLogManagerCoordination
call|)
argument_list|(
name|master
operator|.
name|getCoordinatedStateManager
argument_list|()
argument_list|)
operator|.
name|getSplitLogManagerCoordination
argument_list|()
decl_stmt|;
name|coordination
operator|.
name|setIgnoreDeleteForTesting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|executor
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
expr_stmt|;
name|Runnable
name|runnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// since the logDir is a fake, corrupted one, so the split log worker
comment|// will finish it quickly with error, and this call will fail and throw
comment|// an IOException.
name|slm
operator|.
name|splitLogDistributed
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|corruptedLogFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// this call will block waiting for the task to be removed from the
comment|// tasks map which is not going to happen since ignoreZKDeleteForTesting
comment|// is set to true, until it is interrupted.
name|slm
operator|.
name|splitLogDistributed
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"did not get the expected IOException from the 2nd call"
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"did not get the expected IOException from the 1st call"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|result
init|=
name|executor
operator|.
name|submit
argument_list|(
name|runnable
argument_list|)
decl_stmt|;
try|try
block|{
name|result
operator|.
name|get
argument_list|(
literal|2000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|te
parameter_list|)
block|{
comment|// it is ok, expected.
block|}
name|waitForCounter
argument_list|(
name|tot_mgr_wait_for_zk_delete
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|executor
operator|=
literal|null
expr_stmt|;
comment|// make sure the runnable is finished with no exception thrown.
name|result
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
comment|// interrupt the thread in case the test fails in the middle.
comment|// it has no effect if the thread is already terminated.
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
name|fs
operator|.
name|delete
argument_list|(
name|logDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testReadWriteSeqIdFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testReadWriteSeqIdFiles"
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|ZKWatcher
name|zkw
init|=
operator|new
name|ZKWatcher
argument_list|(
name|conf
argument_list|,
literal|"table-creation"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|installTable
argument_list|(
name|zkw
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
literal|"family"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|master
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|regionDirs
init|=
name|FSUtils
operator|.
name|getRegionDirs
argument_list|(
name|fs
argument_list|,
name|tableDir
argument_list|)
decl_stmt|;
name|long
name|newSeqId
init|=
name|WALSplitter
operator|.
name|writeRegionSequenceIdFile
argument_list|(
name|fs
argument_list|,
name|regionDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1L
argument_list|,
literal|1000L
argument_list|)
decl_stmt|;
name|WALSplitter
operator|.
name|writeRegionSequenceIdFile
argument_list|(
name|fs
argument_list|,
name|regionDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1L
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newSeqId
operator|+
literal|2000
argument_list|,
name|WALSplitter
operator|.
name|writeRegionSequenceIdFile
argument_list|(
name|fs
argument_list|,
name|regionDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|3L
argument_list|,
literal|1000L
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|editsdir
init|=
name|WALSplitter
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regionDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|editsdir
argument_list|,
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
name|WALSplitter
operator|.
name|isSequenceIdFile
argument_list|(
name|p
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// only one seqid file should exist
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// verify all seqId files aren't treated as recovered.edits files
name|NavigableSet
argument_list|<
name|Path
argument_list|>
name|recoveredEdits
init|=
name|WALSplitter
operator|.
name|getSplitEditFilesSorted
argument_list|(
name|fs
argument_list|,
name|regionDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|recoveredEdits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ht
operator|!=
literal|null
condition|)
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|zkw
operator|!=
literal|null
condition|)
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|Table
name|installTable
parameter_list|(
name|ZKWatcher
name|zkw
parameter_list|,
name|String
name|tname
parameter_list|,
name|String
name|fname
parameter_list|,
name|int
name|nrs
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|installTable
argument_list|(
name|zkw
argument_list|,
name|tname
argument_list|,
name|fname
argument_list|,
name|nrs
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|Table
name|installTable
parameter_list|(
name|ZKWatcher
name|zkw
parameter_list|,
name|String
name|tname
parameter_list|,
name|String
name|fname
parameter_list|,
name|int
name|nrs
parameter_list|,
name|int
name|existingRegions
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Create a table with regions
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tname
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating table with "
operator|+
name|nrs
operator|+
literal|" regions"
argument_list|)
expr_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|table
argument_list|,
name|family
argument_list|,
name|nrs
argument_list|)
decl_stmt|;
name|int
name|numRegions
init|=
operator|-
literal|1
decl_stmt|;
try|try
init|(
name|RegionLocator
name|r
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|table
argument_list|)
init|)
block|{
name|numRegions
operator|=
name|r
operator|.
name|getStartKeys
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|nrs
argument_list|,
name|numRegions
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for no more RIT\n"
argument_list|)
expr_stmt|;
name|blockUntilNoRIT
argument_list|(
name|zkw
argument_list|,
name|master
argument_list|)
expr_stmt|;
comment|// disable-enable cycle to get rid of table's dead regions left behind
comment|// by createMultiRegions
name|LOG
operator|.
name|debug
argument_list|(
literal|"Disabling table\n"
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for no more RIT\n"
argument_list|)
expr_stmt|;
name|blockUntilNoRIT
argument_list|(
name|zkw
argument_list|,
name|master
argument_list|)
expr_stmt|;
name|NavigableSet
argument_list|<
name|String
argument_list|>
name|regions
init|=
name|HBaseTestingUtility
operator|.
name|getAllOnlineRegions
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Verifying only catalog and namespace regions are assigned\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|regions
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
for|for
control|(
name|String
name|oregion
range|:
name|regions
control|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Region still online: "
operator|+
name|oregion
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
operator|+
name|existingRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Enabling table\n"
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for no more RIT\n"
argument_list|)
expr_stmt|;
name|blockUntilNoRIT
argument_list|(
name|zkw
argument_list|,
name|master
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Verifying there are "
operator|+
name|numRegions
operator|+
literal|" assigned on cluster\n"
argument_list|)
expr_stmt|;
name|regions
operator|=
name|HBaseTestingUtility
operator|.
name|getAllOnlineRegions
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numRegions
operator|+
literal|2
operator|+
name|existingRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ht
return|;
block|}
name|void
name|populateDataInTable
parameter_list|(
name|int
name|nrows
parameter_list|,
name|String
name|fname
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionServerThread
argument_list|>
name|rsts
init|=
name|cluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_RS
argument_list|,
name|rsts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionServerThread
name|rst
range|:
name|rsts
control|)
block|{
name|HRegionServer
name|hrs
init|=
name|rst
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|hris
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|hrs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionInfo
name|hri
range|:
name|hris
control|)
block|{
if|if
condition|(
name|hri
operator|.
name|getTable
argument_list|()
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"adding data to rs = "
operator|+
name|rst
operator|.
name|getName
argument_list|()
operator|+
literal|" region = "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|Region
name|region
init|=
name|hrs
operator|.
name|getOnlineRegion
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|region
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|region
argument_list|,
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|nrows
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
argument_list|,
name|family
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MasterThread
name|mt
range|:
name|cluster
operator|.
name|getLiveMasterThreads
argument_list|()
control|)
block|{
name|HRegionServer
name|hrs
init|=
name|mt
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|hris
decl_stmt|;
try|try
block|{
name|hris
operator|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|hrs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServerNotRunningYetException
name|e
parameter_list|)
block|{
comment|// It's ok: this master may be a backup. Ignored.
continue|continue;
block|}
for|for
control|(
name|RegionInfo
name|hri
range|:
name|hris
control|)
block|{
if|if
condition|(
name|hri
operator|.
name|getTable
argument_list|()
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"adding data to rs = "
operator|+
name|mt
operator|.
name|getName
argument_list|()
operator|+
literal|" region = "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|Region
name|region
init|=
name|hrs
operator|.
name|getOnlineRegion
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|region
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|region
argument_list|,
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|nrows
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
argument_list|,
name|family
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|makeWAL
parameter_list|(
name|HRegionServer
name|hrs
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
parameter_list|,
name|String
name|tname
parameter_list|,
name|String
name|fname
parameter_list|,
name|int
name|num_edits
parameter_list|,
name|int
name|edit_size
parameter_list|)
throws|throws
name|IOException
block|{
name|makeWAL
argument_list|(
name|hrs
argument_list|,
name|regions
argument_list|,
name|tname
argument_list|,
name|fname
argument_list|,
name|num_edits
argument_list|,
name|edit_size
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|makeWAL
parameter_list|(
name|HRegionServer
name|hrs
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
parameter_list|,
name|String
name|tname
parameter_list|,
name|String
name|fname
parameter_list|,
name|int
name|num_edits
parameter_list|,
name|int
name|edit_size
parameter_list|,
name|boolean
name|cleanShutdown
parameter_list|)
throws|throws
name|IOException
block|{
name|TableName
name|fullTName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tname
argument_list|)
decl_stmt|;
comment|// remove root and meta region
name|regions
operator|.
name|remove
argument_list|(
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RegionInfo
argument_list|>
name|iter
init|=
name|regions
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RegionInfo
name|regionInfo
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionInfo
operator|.
name|getTable
argument_list|()
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|fullTName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
name|edit_size
index|]
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|hris
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionInfo
name|region
range|:
name|regions
control|)
block|{
if|if
condition|(
operator|!
name|region
operator|.
name|getTable
argument_list|()
operator|.
name|getNameAsString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|tname
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|hris
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating wal edits across "
operator|+
name|hris
operator|.
name|size
argument_list|()
operator|+
literal|" regions."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|edit_size
condition|;
name|i
operator|++
control|)
block|{
name|value
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|'a'
operator|+
operator|(
name|i
operator|%
literal|26
operator|)
argument_list|)
expr_stmt|;
block|}
name|int
name|n
init|=
name|hris
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
index|[]
name|counts
init|=
operator|new
name|int
index|[
name|n
index|]
decl_stmt|;
comment|// sync every ~30k to line up with desired wal rolls
specifier|final
name|int
name|syncEvery
init|=
literal|30
operator|*
literal|1024
operator|/
name|edit_size
decl_stmt|;
name|MultiVersionConcurrencyControl
name|mvcc
init|=
operator|new
name|MultiVersionConcurrencyControl
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_edits
condition|;
name|i
operator|+=
literal|1
control|)
block|{
name|WALEdit
name|e
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|RegionInfo
name|curRegionInfo
init|=
name|hris
operator|.
name|get
argument_list|(
name|i
operator|%
name|n
argument_list|)
decl_stmt|;
specifier|final
name|WAL
name|log
init|=
name|hrs
operator|.
name|getWAL
argument_list|(
name|curRegionInfo
argument_list|)
decl_stmt|;
name|byte
index|[]
name|startRow
init|=
name|curRegionInfo
operator|.
name|getStartKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|startRow
operator|==
literal|null
operator|||
name|startRow
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|startRow
operator|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|}
expr_stmt|;
block|}
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|incrementBytes
argument_list|(
name|startRow
argument_list|,
name|counts
index|[
name|i
operator|%
name|n
index|]
argument_list|)
decl_stmt|;
name|row
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|row
argument_list|,
literal|3
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// use last 5 bytes because
comment|// HBaseTestingUtility.createMultiRegions use 5 bytes key
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|e
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|append
argument_list|(
name|curRegionInfo
argument_list|,
operator|new
name|WALKey
argument_list|(
name|curRegionInfo
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|fullTName
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|mvcc
argument_list|)
argument_list|,
name|e
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|==
name|i
operator|%
name|syncEvery
condition|)
block|{
name|log
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
name|counts
index|[
name|i
operator|%
name|n
index|]
operator|+=
literal|1
expr_stmt|;
block|}
block|}
comment|// done as two passes because the regions might share logs. shutdown is idempotent, but sync
comment|// will cause errors if done after.
for|for
control|(
name|RegionInfo
name|info
range|:
name|hris
control|)
block|{
specifier|final
name|WAL
name|log
init|=
name|hrs
operator|.
name|getWAL
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|log
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cleanShutdown
condition|)
block|{
for|for
control|(
name|RegionInfo
name|info
range|:
name|hris
control|)
block|{
specifier|final
name|WAL
name|log
init|=
name|hrs
operator|.
name|getWAL
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|log
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"region "
operator|+
name|hris
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" has "
operator|+
name|counts
index|[
name|i
index|]
operator|+
literal|" edits"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|private
name|int
name|countWAL
parameter_list|(
name|Path
name|log
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|WAL
operator|.
name|Reader
name|in
init|=
name|WALFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|log
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|WAL
operator|.
name|Entry
name|e
decl_stmt|;
while|while
condition|(
operator|(
name|e
operator|=
name|in
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|WALEdit
operator|.
name|isMetaEditFamily
argument_list|(
name|e
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem closing wal: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"exception details."
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|private
name|void
name|blockUntilNoRIT
parameter_list|(
name|ZKWatcher
name|zkw
parameter_list|,
name|HMaster
name|master
parameter_list|)
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|waitUntilNoRegionsInTransition
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|putData
parameter_list|(
name|Region
name|region
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|int
name|numRows
parameter_list|,
name|byte
index|[]
name|qf
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|startRow
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|waitForCounter
parameter_list|(
name|LongAdder
name|ctr
parameter_list|,
name|long
name|oldval
parameter_list|,
name|long
name|newval
parameter_list|,
name|long
name|timems
parameter_list|)
block|{
name|long
name|curt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|endt
init|=
name|curt
operator|+
name|timems
decl_stmt|;
while|while
condition|(
name|curt
operator|<
name|endt
condition|)
block|{
if|if
condition|(
name|ctr
operator|.
name|sum
argument_list|()
operator|==
name|oldval
condition|)
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
name|curt
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|newval
argument_list|,
name|ctr
operator|.
name|sum
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|abortMaster
parameter_list|(
name|MiniHBaseCluster
name|cluster
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|MasterThread
name|mt
range|:
name|cluster
operator|.
name|getLiveMasterThreads
argument_list|()
control|)
block|{
if|if
condition|(
name|mt
operator|.
name|getMaster
argument_list|()
operator|.
name|isActiveMaster
argument_list|()
condition|)
block|{
name|mt
operator|.
name|getMaster
argument_list|()
operator|.
name|abort
argument_list|(
literal|"Aborting for tests"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"Trace info"
argument_list|)
argument_list|)
expr_stmt|;
name|mt
operator|.
name|join
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Master is aborted"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Find a RS that has regions of a table.    * @param hasMetaRegion when true, the returned RS has hbase:meta region as well    * @param tableName    * @return    * @throws Exception    */
specifier|private
name|HRegionServer
name|findRSToKill
parameter_list|(
name|boolean
name|hasMetaRegion
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|RegionServerThread
argument_list|>
name|rsts
init|=
name|cluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
literal|null
decl_stmt|;
name|HRegionServer
name|hrs
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RegionServerThread
name|rst
range|:
name|rsts
control|)
block|{
name|hrs
operator|=
name|rst
operator|.
name|getRegionServer
argument_list|()
expr_stmt|;
while|while
condition|(
name|rst
operator|.
name|isAlive
argument_list|()
operator|&&
operator|!
name|hrs
operator|.
name|isOnline
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rst
operator|.
name|isAlive
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|boolean
name|isCarryingMeta
init|=
literal|false
decl_stmt|;
name|boolean
name|foundTableRegion
init|=
literal|false
decl_stmt|;
name|regions
operator|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|hrs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionInfo
name|region
range|:
name|regions
control|)
block|{
if|if
condition|(
name|region
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
name|isCarryingMeta
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|tableName
operator|==
literal|null
operator|||
name|region
operator|.
name|getTable
argument_list|()
operator|.
name|getNameAsString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|foundTableRegion
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|foundTableRegion
operator|&&
operator|(
name|isCarryingMeta
operator|||
operator|!
name|hasMetaRegion
operator|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|isCarryingMeta
operator|&&
name|hasMetaRegion
condition|)
block|{
comment|// clients ask for a RS with META
if|if
condition|(
operator|!
name|foundTableRegion
condition|)
block|{
specifier|final
name|HRegionServer
name|destRS
init|=
name|hrs
decl_stmt|;
comment|// the RS doesn't have regions of the specified table so we need move one to this RS
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|tableRegions
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getRegions
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RegionInfo
name|hri
init|=
name|tableRegions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|move
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|destRS
operator|.
name|getServerName
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for region move completes
specifier|final
name|RegionStates
name|regionStates
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|45000
argument_list|,
literal|200
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|ServerName
name|sn
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
return|return
operator|(
name|sn
operator|!=
literal|null
operator|&&
name|sn
operator|.
name|equals
argument_list|(
name|destRS
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|hrs
return|;
block|}
elseif|else
if|if
condition|(
name|hasMetaRegion
operator|||
name|isCarryingMeta
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|foundTableRegion
condition|)
break|break;
block|}
return|return
name|hrs
return|;
block|}
block|}
end_class

end_unit

