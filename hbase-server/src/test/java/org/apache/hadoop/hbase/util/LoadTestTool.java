begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseInterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|Encryption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|EncryptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessControlClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|test
operator|.
name|LoadTestDataGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|test
operator|.
name|LoadTestDataGeneratorWithACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * A command-line utility that reads, writes, and verifies data. Unlike  * {@link org.apache.hadoop.hbase.PerformanceEvaluation}, this tool validates the data written,  * and supports simultaneously writing and reading the same set of keys.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|TOOLS
argument_list|)
specifier|public
class|class
name|LoadTestTool
extends|extends
name|AbstractHBaseTool
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LoadTestTool
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLON
init|=
literal|":"
decl_stmt|;
comment|/** Table name for the test */
specifier|private
name|TableName
name|tableName
decl_stmt|;
comment|/** Column families for the test */
specifier|private
name|byte
index|[]
index|[]
name|families
decl_stmt|;
comment|/** Table name to use of not overridden on the command line */
specifier|protected
specifier|static
specifier|final
name|String
name|DEFAULT_TABLE_NAME
init|=
literal|"cluster_test"
decl_stmt|;
comment|/** Column family used by the test */
specifier|public
specifier|static
name|byte
index|[]
name|DEFAULT_COLUMN_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test_cf"
argument_list|)
decl_stmt|;
comment|/** Column families used by the test */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|DEFAULT_COLUMN_FAMILIES
init|=
block|{
name|DEFAULT_COLUMN_FAMILY
block|}
decl_stmt|;
comment|/** The default data size if not specified */
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_DATA_SIZE
init|=
literal|64
decl_stmt|;
comment|/** The number of reader/writer threads if not specified */
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_THREADS
init|=
literal|20
decl_stmt|;
comment|/** Usage string for the load option */
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_USAGE_LOAD
init|=
literal|"<avg_cols_per_key>:<avg_data_size>"
operator|+
literal|"[:<#threads="
operator|+
name|DEFAULT_NUM_THREADS
operator|+
literal|">]"
decl_stmt|;
comment|/** Usage string for the read option */
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_USAGE_READ
init|=
literal|"<verify_percent>[:<#threads="
operator|+
name|DEFAULT_NUM_THREADS
operator|+
literal|">]"
decl_stmt|;
comment|/** Usage string for the update option */
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_USAGE_UPDATE
init|=
literal|"<update_percent>[:<#threads="
operator|+
name|DEFAULT_NUM_THREADS
operator|+
literal|">][:<#whether to ignore nonce collisions=0>]"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_USAGE_BLOOM
init|=
literal|"Bloom filter type, one of "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|BloomType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_USAGE_COMPRESSION
init|=
literal|"Compression type, "
operator|+
literal|"one of "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|Compression
operator|.
name|Algorithm
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_DATA_BLOCK_ENCODING_USAGE
init|=
literal|"Encoding algorithm (e.g. prefix "
operator|+
literal|"compression) to use for data blocks in the test column family, "
operator|+
literal|"one of "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|DataBlockEncoding
operator|.
name|values
argument_list|()
argument_list|)
operator|+
literal|"."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_BLOOM
init|=
literal|"bloom"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_COMPRESSION
init|=
literal|"compression"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_DEFERRED_LOG_FLUSH
init|=
literal|"deferredlogflush"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_DEFERRED_LOG_FLUSH_USAGE
init|=
literal|"Enable deferred log flush."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_DATA_BLOCK_ENCODING
init|=
name|HColumnDescriptor
operator|.
name|DATA_BLOCK_ENCODING
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_INMEMORY
init|=
literal|"in_memory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_USAGE_IN_MEMORY
init|=
literal|"Tries to keep the HFiles of the CF "
operator|+
literal|"inmemory as far as possible.  Not guaranteed that reads are always served from inmemory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_GENERATOR
init|=
literal|"generator"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_GENERATOR_USAGE
init|=
literal|"The class which generates load for the tool."
operator|+
literal|" Any args for this class can be passed as colon separated after class name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_WRITER
init|=
literal|"writer"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_WRITER_USAGE
init|=
literal|"The class for executing the write requests"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_UPDATER
init|=
literal|"updater"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_UPDATER_USAGE
init|=
literal|"The class for executing the update requests"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_READER
init|=
literal|"reader"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_READER_USAGE
init|=
literal|"The class for executing the read requests"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_KEY_WINDOW
init|=
literal|"key_window"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_WRITE
init|=
literal|"write"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_MAX_READ_ERRORS
init|=
literal|"max_read_errors"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_MULTIPUT
init|=
literal|"multiput"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_MULTIGET
init|=
literal|"multiget_batchsize"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_NUM_KEYS
init|=
literal|"num_keys"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_READ
init|=
literal|"read"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_START_KEY
init|=
literal|"start_key"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_TABLE_NAME
init|=
literal|"tn"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_COLUMN_FAMILIES
init|=
literal|"families"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_ZK_QUORUM
init|=
literal|"zk"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_ZK_PARENT_NODE
init|=
literal|"zk_root"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_SKIP_INIT
init|=
literal|"skip_init"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_INIT_ONLY
init|=
literal|"init_only"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|NUM_TABLES
init|=
literal|"num_tables"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_REGIONS_PER_SERVER
init|=
literal|"regions_per_server"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_BATCHUPDATE
init|=
literal|"batchupdate"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_UPDATE
init|=
literal|"update"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_ENCRYPTION
init|=
literal|"encryption"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_ENCRYPTION_USAGE
init|=
literal|"Enables transparent encryption on the test table, one of "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|Encryption
operator|.
name|getSupportedCiphers
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_NUM_REGIONS_PER_SERVER
init|=
literal|"num_regions_per_server"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_NUM_REGIONS_PER_SERVER_USAGE
init|=
literal|"Desired number of regions per region server. Defaults to 5."
decl_stmt|;
specifier|public
specifier|static
name|int
name|DEFAULT_NUM_REGIONS_PER_SERVER
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_REGION_REPLICATION
init|=
literal|"region_replication"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_REGION_REPLICATION_USAGE
init|=
literal|"Desired number of replicas per region"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_REGION_REPLICA_ID
init|=
literal|"region_replica_id"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_REGION_REPLICA_ID_USAGE
init|=
literal|"Region replica id to do the reads from"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPT_MOB_THRESHOLD
init|=
literal|"mob_threshold"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_MOB_THRESHOLD_USAGE
init|=
literal|"Desired cell size to exceed in bytes that will use the MOB write path"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|long
name|DEFAULT_START_KEY
init|=
literal|0
decl_stmt|;
comment|/** This will be removed as we factor out the dependency on command line */
specifier|protected
name|CommandLine
name|cmd
decl_stmt|;
specifier|protected
name|MultiThreadedWriter
name|writerThreads
init|=
literal|null
decl_stmt|;
specifier|protected
name|MultiThreadedReader
name|readerThreads
init|=
literal|null
decl_stmt|;
specifier|protected
name|MultiThreadedUpdater
name|updaterThreads
init|=
literal|null
decl_stmt|;
specifier|protected
name|long
name|startKey
decl_stmt|,
name|endKey
decl_stmt|;
specifier|protected
name|boolean
name|isWrite
decl_stmt|,
name|isRead
decl_stmt|,
name|isUpdate
decl_stmt|;
specifier|protected
name|boolean
name|deferredLogFlush
decl_stmt|;
comment|// Column family options
specifier|protected
name|DataBlockEncoding
name|dataBlockEncodingAlgo
decl_stmt|;
specifier|protected
name|Compression
operator|.
name|Algorithm
name|compressAlgo
decl_stmt|;
specifier|protected
name|BloomType
name|bloomType
decl_stmt|;
specifier|private
name|boolean
name|inMemoryCF
decl_stmt|;
specifier|private
name|User
name|userOwner
decl_stmt|;
comment|// Writer options
specifier|protected
name|int
name|numWriterThreads
init|=
name|DEFAULT_NUM_THREADS
decl_stmt|;
specifier|protected
name|int
name|minColsPerKey
decl_stmt|,
name|maxColsPerKey
decl_stmt|;
specifier|protected
name|int
name|minColDataSize
init|=
name|DEFAULT_DATA_SIZE
decl_stmt|,
name|maxColDataSize
init|=
name|DEFAULT_DATA_SIZE
decl_stmt|;
specifier|protected
name|boolean
name|isMultiPut
decl_stmt|;
comment|// Updater options
specifier|protected
name|int
name|numUpdaterThreads
init|=
name|DEFAULT_NUM_THREADS
decl_stmt|;
specifier|protected
name|int
name|updatePercent
decl_stmt|;
specifier|protected
name|boolean
name|ignoreConflicts
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|isBatchUpdate
decl_stmt|;
comment|// Reader options
specifier|private
name|int
name|numReaderThreads
init|=
name|DEFAULT_NUM_THREADS
decl_stmt|;
specifier|private
name|int
name|keyWindow
init|=
name|MultiThreadedReader
operator|.
name|DEFAULT_KEY_WINDOW
decl_stmt|;
specifier|private
name|int
name|multiGetBatchSize
init|=
name|MultiThreadedReader
operator|.
name|DEFAULT_BATCH_SIZE
decl_stmt|;
specifier|private
name|int
name|maxReadErrors
init|=
name|MultiThreadedReader
operator|.
name|DEFAULT_MAX_ERRORS
decl_stmt|;
specifier|private
name|int
name|verifyPercent
decl_stmt|;
specifier|private
name|int
name|numTables
init|=
literal|1
decl_stmt|;
specifier|private
name|String
name|superUser
decl_stmt|;
specifier|private
name|String
name|userNames
decl_stmt|;
comment|//This file is used to read authentication information in secure clusters.
specifier|private
name|String
name|authnFileName
decl_stmt|;
specifier|private
name|int
name|numRegionsPerServer
init|=
name|DEFAULT_NUM_REGIONS_PER_SERVER
decl_stmt|;
specifier|private
name|int
name|regionReplication
init|=
operator|-
literal|1
decl_stmt|;
comment|// not set
specifier|private
name|int
name|regionReplicaId
init|=
operator|-
literal|1
decl_stmt|;
comment|// not set
specifier|private
name|int
name|mobThreshold
init|=
operator|-
literal|1
decl_stmt|;
comment|// not set
comment|// TODO: refactor LoadTestToolImpl somewhere to make the usage from tests less bad,
comment|//       console tool itself should only be used from console.
specifier|protected
name|boolean
name|isSkipInit
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|isInitOnly
init|=
literal|false
decl_stmt|;
specifier|protected
name|Cipher
name|cipher
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
index|[]
name|splitColonSeparated
parameter_list|(
name|String
name|option
parameter_list|,
name|int
name|minNumCols
parameter_list|,
name|int
name|maxNumCols
parameter_list|)
block|{
name|String
name|optVal
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|String
index|[]
name|cols
init|=
name|optVal
operator|.
name|split
argument_list|(
name|COLON
argument_list|)
decl_stmt|;
if|if
condition|(
name|cols
operator|.
name|length
argument_list|<
name|minNumCols
operator|||
name|cols
operator|.
name|length
argument_list|>
name|maxNumCols
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected at least "
operator|+
name|minNumCols
operator|+
literal|" columns but no more than "
operator|+
name|maxNumCols
operator|+
literal|" in the colon-separated value '"
operator|+
name|optVal
operator|+
literal|"' of the "
operator|+
literal|"-"
operator|+
name|option
operator|+
literal|" option"
argument_list|)
throw|;
block|}
return|return
name|cols
return|;
block|}
specifier|protected
name|int
name|getNumThreads
parameter_list|(
name|String
name|numThreadsStr
parameter_list|)
block|{
return|return
name|parseInt
argument_list|(
name|numThreadsStr
argument_list|,
literal|1
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
index|[]
name|getColumnFamilies
parameter_list|()
block|{
return|return
name|families
return|;
block|}
comment|/**    * Apply column family options such as Bloom filters, compression, and data    * block encoding.    */
specifier|protected
name|void
name|applyColumnFamilyOptions
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|columnFamilies
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|HTableDescriptor
name|tableDesc
init|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Disabling table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|cf
range|:
name|columnFamilies
control|)
block|{
name|HColumnDescriptor
name|columnDesc
init|=
name|tableDesc
operator|.
name|getFamily
argument_list|(
name|cf
argument_list|)
decl_stmt|;
name|boolean
name|isNewCf
init|=
name|columnDesc
operator|==
literal|null
decl_stmt|;
if|if
condition|(
name|isNewCf
condition|)
block|{
name|columnDesc
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|cf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bloomType
operator|!=
literal|null
condition|)
block|{
name|columnDesc
operator|.
name|setBloomFilterType
argument_list|(
name|bloomType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compressAlgo
operator|!=
literal|null
condition|)
block|{
name|columnDesc
operator|.
name|setCompressionType
argument_list|(
name|compressAlgo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dataBlockEncodingAlgo
operator|!=
literal|null
condition|)
block|{
name|columnDesc
operator|.
name|setDataBlockEncoding
argument_list|(
name|dataBlockEncodingAlgo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inMemoryCF
condition|)
block|{
name|columnDesc
operator|.
name|setInMemory
argument_list|(
name|inMemoryCF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cipher
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|keyBytes
init|=
operator|new
name|byte
index|[
name|cipher
operator|.
name|getKeyLength
argument_list|()
index|]
decl_stmt|;
operator|new
name|SecureRandom
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|keyBytes
argument_list|)
expr_stmt|;
name|columnDesc
operator|.
name|setEncryptionType
argument_list|(
name|cipher
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|columnDesc
operator|.
name|setEncryptionKey
argument_list|(
name|EncryptionUtil
operator|.
name|wrapKey
argument_list|(
name|conf
argument_list|,
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|,
operator|new
name|SecretKeySpec
argument_list|(
name|keyBytes
argument_list|,
name|cipher
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mobThreshold
operator|>=
literal|0
condition|)
block|{
name|columnDesc
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|columnDesc
operator|.
name|setMobThreshold
argument_list|(
name|mobThreshold
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isNewCf
condition|)
block|{
name|admin
operator|.
name|addColumnFamily
argument_list|(
name|tableName
argument_list|,
name|columnDesc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|admin
operator|.
name|modifyColumnFamily
argument_list|(
name|tableName
argument_list|,
name|columnDesc
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Enabling table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addOptions
parameter_list|()
block|{
name|addOptWithArg
argument_list|(
name|OPT_ZK_QUORUM
argument_list|,
literal|"ZK quorum as comma-separated host names "
operator|+
literal|"without port numbers"
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_ZK_PARENT_NODE
argument_list|,
literal|"name of parent znode in zookeeper"
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_TABLE_NAME
argument_list|,
literal|"The name of the table to read or write"
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_COLUMN_FAMILIES
argument_list|,
literal|"The name of the column families to use separated by comma"
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_WRITE
argument_list|,
name|OPT_USAGE_LOAD
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_READ
argument_list|,
name|OPT_USAGE_READ
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_UPDATE
argument_list|,
name|OPT_USAGE_UPDATE
argument_list|)
expr_stmt|;
name|addOptNoArg
argument_list|(
name|OPT_INIT_ONLY
argument_list|,
literal|"Initialize the test table only, don't do any loading"
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_BLOOM
argument_list|,
name|OPT_USAGE_BLOOM
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_COMPRESSION
argument_list|,
name|OPT_USAGE_COMPRESSION
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_DATA_BLOCK_ENCODING
argument_list|,
name|OPT_DATA_BLOCK_ENCODING_USAGE
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_MAX_READ_ERRORS
argument_list|,
literal|"The maximum number of read errors "
operator|+
literal|"to tolerate before terminating all reader threads. The default is "
operator|+
name|MultiThreadedReader
operator|.
name|DEFAULT_MAX_ERRORS
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_MULTIGET
argument_list|,
literal|"Whether to use multi-gets as opposed to "
operator|+
literal|"separate gets for every column in a row"
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_KEY_WINDOW
argument_list|,
literal|"The 'key window' to maintain between "
operator|+
literal|"reads and writes for concurrent write/read workload. The default "
operator|+
literal|"is "
operator|+
name|MultiThreadedReader
operator|.
name|DEFAULT_KEY_WINDOW
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|addOptNoArg
argument_list|(
name|OPT_MULTIPUT
argument_list|,
literal|"Whether to use multi-puts as opposed to "
operator|+
literal|"separate puts for every column in a row"
argument_list|)
expr_stmt|;
name|addOptNoArg
argument_list|(
name|OPT_BATCHUPDATE
argument_list|,
literal|"Whether to use batch as opposed to "
operator|+
literal|"separate updates for every column in a row"
argument_list|)
expr_stmt|;
name|addOptNoArg
argument_list|(
name|OPT_INMEMORY
argument_list|,
name|OPT_USAGE_IN_MEMORY
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_GENERATOR
argument_list|,
name|OPT_GENERATOR_USAGE
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_WRITER
argument_list|,
name|OPT_WRITER_USAGE
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_UPDATER
argument_list|,
name|OPT_UPDATER_USAGE
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_READER
argument_list|,
name|OPT_READER_USAGE
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_NUM_KEYS
argument_list|,
literal|"The number of keys to read/write"
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_START_KEY
argument_list|,
literal|"The first key to read/write "
operator|+
literal|"(a 0-based index). The default value is "
operator|+
name|DEFAULT_START_KEY
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|addOptNoArg
argument_list|(
name|OPT_SKIP_INIT
argument_list|,
literal|"Skip the initialization; assume test table "
operator|+
literal|"already exists"
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|NUM_TABLES
argument_list|,
literal|"A positive integer number. When a number n is speicfied, load test "
operator|+
literal|"tool  will load n table parallely. -tn parameter value becomes "
operator|+
literal|"table name prefix. Each table name is in format<tn>_1...<tn>_n"
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_REGIONS_PER_SERVER
argument_list|,
literal|"A positive integer number. When a number n is specified, load test "
operator|+
literal|"tool will create the test table with n regions per server"
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_ENCRYPTION
argument_list|,
name|OPT_ENCRYPTION_USAGE
argument_list|)
expr_stmt|;
name|addOptNoArg
argument_list|(
name|OPT_DEFERRED_LOG_FLUSH
argument_list|,
name|OPT_DEFERRED_LOG_FLUSH_USAGE
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_NUM_REGIONS_PER_SERVER
argument_list|,
name|OPT_NUM_REGIONS_PER_SERVER_USAGE
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_REGION_REPLICATION
argument_list|,
name|OPT_REGION_REPLICATION_USAGE
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_REGION_REPLICA_ID
argument_list|,
name|OPT_REGION_REPLICA_ID_USAGE
argument_list|)
expr_stmt|;
name|addOptWithArg
argument_list|(
name|OPT_MOB_THRESHOLD
argument_list|,
name|OPT_MOB_THRESHOLD_USAGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
block|{
name|this
operator|.
name|cmd
operator|=
name|cmd
expr_stmt|;
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_TABLE_NAME
argument_list|,
name|DEFAULT_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_COLUMN_FAMILIES
argument_list|)
condition|)
block|{
name|String
index|[]
name|list
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_COLUMN_FAMILIES
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|families
operator|=
operator|new
name|byte
index|[
name|list
operator|.
name|length
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|families
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|list
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|families
operator|=
name|DEFAULT_COLUMN_FAMILIES
expr_stmt|;
block|}
name|isWrite
operator|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_WRITE
argument_list|)
expr_stmt|;
name|isRead
operator|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_READ
argument_list|)
expr_stmt|;
name|isUpdate
operator|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_UPDATE
argument_list|)
expr_stmt|;
name|isInitOnly
operator|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_INIT_ONLY
argument_list|)
expr_stmt|;
name|deferredLogFlush
operator|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_DEFERRED_LOG_FLUSH
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isWrite
operator|&&
operator|!
name|isRead
operator|&&
operator|!
name|isUpdate
operator|&&
operator|!
name|isInitOnly
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Either -"
operator|+
name|OPT_WRITE
operator|+
literal|" or "
operator|+
literal|"-"
operator|+
name|OPT_UPDATE
operator|+
literal|" or -"
operator|+
name|OPT_READ
operator|+
literal|" has to be specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isInitOnly
operator|&&
operator|(
name|isRead
operator|||
name|isWrite
operator|||
name|isUpdate
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|OPT_INIT_ONLY
operator|+
literal|" cannot be specified with"
operator|+
literal|" either -"
operator|+
name|OPT_WRITE
operator|+
literal|" or -"
operator|+
name|OPT_UPDATE
operator|+
literal|" or -"
operator|+
name|OPT_READ
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isInitOnly
condition|)
block|{
if|if
condition|(
operator|!
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_NUM_KEYS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|OPT_NUM_KEYS
operator|+
literal|" must be specified in "
operator|+
literal|"read or write mode"
argument_list|)
throw|;
block|}
name|startKey
operator|=
name|parseLong
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_START_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|DEFAULT_START_KEY
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|long
name|numKeys
init|=
name|parseLong
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_NUM_KEYS
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
name|startKey
argument_list|)
decl_stmt|;
name|endKey
operator|=
name|startKey
operator|+
name|numKeys
expr_stmt|;
name|isSkipInit
operator|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_SKIP_INIT
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Key range: ["
operator|+
name|startKey
operator|+
literal|".."
operator|+
operator|(
name|endKey
operator|-
literal|1
operator|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|parseColumnFamilyOptions
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|isWrite
condition|)
block|{
name|String
index|[]
name|writeOpts
init|=
name|splitColonSeparated
argument_list|(
name|OPT_WRITE
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|int
name|colIndex
init|=
literal|0
decl_stmt|;
name|minColsPerKey
operator|=
literal|1
expr_stmt|;
name|maxColsPerKey
operator|=
literal|2
operator|*
name|Integer
operator|.
name|parseInt
argument_list|(
name|writeOpts
index|[
name|colIndex
operator|++
index|]
argument_list|)
expr_stmt|;
name|int
name|avgColDataSize
init|=
name|parseInt
argument_list|(
name|writeOpts
index|[
name|colIndex
operator|++
index|]
argument_list|,
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|minColDataSize
operator|=
name|avgColDataSize
operator|/
literal|2
expr_stmt|;
name|maxColDataSize
operator|=
name|avgColDataSize
operator|*
literal|3
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|colIndex
operator|<
name|writeOpts
operator|.
name|length
condition|)
block|{
name|numWriterThreads
operator|=
name|getNumThreads
argument_list|(
name|writeOpts
index|[
name|colIndex
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
name|isMultiPut
operator|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_MULTIPUT
argument_list|)
expr_stmt|;
name|mobThreshold
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_MOB_THRESHOLD
argument_list|)
condition|)
block|{
name|mobThreshold
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_MOB_THRESHOLD
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Multi-puts: "
operator|+
name|isMultiPut
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Columns per key: "
operator|+
name|minColsPerKey
operator|+
literal|".."
operator|+
name|maxColsPerKey
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Data size per column: "
operator|+
name|minColDataSize
operator|+
literal|".."
operator|+
name|maxColDataSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUpdate
condition|)
block|{
name|String
index|[]
name|mutateOpts
init|=
name|splitColonSeparated
argument_list|(
name|OPT_UPDATE
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|int
name|colIndex
init|=
literal|0
decl_stmt|;
name|updatePercent
operator|=
name|parseInt
argument_list|(
name|mutateOpts
index|[
name|colIndex
operator|++
index|]
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|colIndex
operator|<
name|mutateOpts
operator|.
name|length
condition|)
block|{
name|numUpdaterThreads
operator|=
name|getNumThreads
argument_list|(
name|mutateOpts
index|[
name|colIndex
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|colIndex
operator|<
name|mutateOpts
operator|.
name|length
condition|)
block|{
name|ignoreConflicts
operator|=
name|parseInt
argument_list|(
name|mutateOpts
index|[
name|colIndex
operator|++
index|]
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|==
literal|1
expr_stmt|;
block|}
name|isBatchUpdate
operator|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_BATCHUPDATE
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Batch updates: "
operator|+
name|isBatchUpdate
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Percent of keys to update: "
operator|+
name|updatePercent
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Updater threads: "
operator|+
name|numUpdaterThreads
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Ignore nonce conflicts: "
operator|+
name|ignoreConflicts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRead
condition|)
block|{
name|String
index|[]
name|readOpts
init|=
name|splitColonSeparated
argument_list|(
name|OPT_READ
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|int
name|colIndex
init|=
literal|0
decl_stmt|;
name|verifyPercent
operator|=
name|parseInt
argument_list|(
name|readOpts
index|[
name|colIndex
operator|++
index|]
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|colIndex
operator|<
name|readOpts
operator|.
name|length
condition|)
block|{
name|numReaderThreads
operator|=
name|getNumThreads
argument_list|(
name|readOpts
index|[
name|colIndex
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_MAX_READ_ERRORS
argument_list|)
condition|)
block|{
name|maxReadErrors
operator|=
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_MAX_READ_ERRORS
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_KEY_WINDOW
argument_list|)
condition|)
block|{
name|keyWindow
operator|=
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_KEY_WINDOW
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_MULTIGET
argument_list|)
condition|)
block|{
name|multiGetBatchSize
operator|=
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_MULTIGET
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Multi-gets (value of 1 means no multigets): "
operator|+
name|multiGetBatchSize
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Percent of keys to verify: "
operator|+
name|verifyPercent
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Reader threads: "
operator|+
name|numReaderThreads
argument_list|)
expr_stmt|;
block|}
name|numTables
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|NUM_TABLES
argument_list|)
condition|)
block|{
name|numTables
operator|=
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|NUM_TABLES
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
name|numRegionsPerServer
operator|=
name|DEFAULT_NUM_REGIONS_PER_SERVER
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_NUM_REGIONS_PER_SERVER
argument_list|)
condition|)
block|{
name|numRegionsPerServer
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_NUM_REGIONS_PER_SERVER
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|regionReplication
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_REGION_REPLICATION
argument_list|)
condition|)
block|{
name|regionReplication
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_REGION_REPLICATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|regionReplicaId
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_REGION_REPLICA_ID
argument_list|)
condition|)
block|{
name|regionReplicaId
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_REGION_REPLICA_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|parseColumnFamilyOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
block|{
name|String
name|dataBlockEncodingStr
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_DATA_BLOCK_ENCODING
argument_list|)
decl_stmt|;
name|dataBlockEncodingAlgo
operator|=
name|dataBlockEncodingStr
operator|==
literal|null
condition|?
literal|null
else|:
name|DataBlockEncoding
operator|.
name|valueOf
argument_list|(
name|dataBlockEncodingStr
argument_list|)
expr_stmt|;
name|String
name|compressStr
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_COMPRESSION
argument_list|)
decl_stmt|;
name|compressAlgo
operator|=
name|compressStr
operator|==
literal|null
condition|?
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
else|:
name|Compression
operator|.
name|Algorithm
operator|.
name|valueOf
argument_list|(
name|compressStr
argument_list|)
expr_stmt|;
name|String
name|bloomStr
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_BLOOM
argument_list|)
decl_stmt|;
name|bloomType
operator|=
name|bloomStr
operator|==
literal|null
condition|?
name|BloomType
operator|.
name|ROW
else|:
name|BloomType
operator|.
name|valueOf
argument_list|(
name|bloomStr
argument_list|)
expr_stmt|;
name|inMemoryCF
operator|=
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_INMEMORY
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_ENCRYPTION
argument_list|)
condition|)
block|{
name|cipher
operator|=
name|Encryption
operator|.
name|getCipher
argument_list|(
name|conf
argument_list|,
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_ENCRYPTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|initTestTable
parameter_list|()
throws|throws
name|IOException
block|{
name|Durability
name|durability
init|=
name|Durability
operator|.
name|USE_DEFAULT
decl_stmt|;
if|if
condition|(
name|deferredLogFlush
condition|)
block|{
name|durability
operator|=
name|Durability
operator|.
name|ASYNC_WAL
expr_stmt|;
block|}
name|HBaseTestingUtility
operator|.
name|createPreSplitLoadTestTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|,
name|getColumnFamilies
argument_list|()
argument_list|,
name|compressAlgo
argument_list|,
name|dataBlockEncodingAlgo
argument_list|,
name|numRegionsPerServer
argument_list|,
name|regionReplication
argument_list|,
name|durability
argument_list|)
expr_stmt|;
name|applyColumnFamilyOptions
argument_list|(
name|tableName
argument_list|,
name|getColumnFamilies
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|doWork
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|numTables
operator|>
literal|1
condition|)
block|{
return|return
name|parallelLoadTables
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|loadTable
argument_list|()
return|;
block|}
block|}
specifier|protected
name|int
name|loadTable
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_ZK_QUORUM
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|,
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_ZK_QUORUM
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_ZK_PARENT_NODE
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_ZK_PARENT_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isInitOnly
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing only; no reads or writes"
argument_list|)
expr_stmt|;
name|initTestTable
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
operator|!
name|isSkipInit
condition|)
block|{
name|initTestTable
argument_list|()
expr_stmt|;
block|}
name|LoadTestDataGenerator
name|dataGen
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_GENERATOR
argument_list|)
condition|)
block|{
name|String
index|[]
name|clazzAndArgs
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_GENERATOR
argument_list|)
operator|.
name|split
argument_list|(
name|COLON
argument_list|)
decl_stmt|;
name|dataGen
operator|=
name|getLoadGeneratorInstance
argument_list|(
name|clazzAndArgs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
decl_stmt|;
if|if
condition|(
name|dataGen
operator|instanceof
name|LoadTestDataGeneratorWithACL
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using LoadTestDataGeneratorWithACL"
argument_list|)
expr_stmt|;
if|if
condition|(
name|User
operator|.
name|isHBaseSecurityEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Security is enabled"
argument_list|)
expr_stmt|;
name|authnFileName
operator|=
name|clazzAndArgs
index|[
literal|1
index|]
expr_stmt|;
name|superUser
operator|=
name|clazzAndArgs
index|[
literal|2
index|]
expr_stmt|;
name|userNames
operator|=
name|clazzAndArgs
index|[
literal|3
index|]
expr_stmt|;
name|args
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|clazzAndArgs
argument_list|,
literal|2
argument_list|,
name|clazzAndArgs
operator|.
name|length
argument_list|)
expr_stmt|;
name|Properties
name|authConfig
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|authConfig
operator|.
name|load
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|authnFileName
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|addAuthInfoToConf
argument_list|(
name|authConfig
argument_list|,
name|conf
argument_list|,
name|superUser
argument_list|,
name|userNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exp
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|exp
argument_list|)
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
name|userOwner
operator|=
name|User
operator|.
name|create
argument_list|(
name|loginAndReturnUGI
argument_list|(
name|conf
argument_list|,
name|superUser
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|superUser
operator|=
name|clazzAndArgs
index|[
literal|1
index|]
expr_stmt|;
name|userNames
operator|=
name|clazzAndArgs
index|[
literal|2
index|]
expr_stmt|;
name|args
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|clazzAndArgs
argument_list|,
literal|1
argument_list|,
name|clazzAndArgs
operator|.
name|length
argument_list|)
expr_stmt|;
name|userOwner
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
name|superUser
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|args
operator|=
name|clazzAndArgs
operator|.
name|length
operator|==
literal|1
condition|?
operator|new
name|String
index|[
literal|0
index|]
else|:
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|clazzAndArgs
argument_list|,
literal|1
argument_list|,
name|clazzAndArgs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|dataGen
operator|.
name|initialize
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Default DataGenerator is MultiThreadedAction.DefaultDataGenerator
name|dataGen
operator|=
operator|new
name|MultiThreadedAction
operator|.
name|DefaultDataGenerator
argument_list|(
name|minColDataSize
argument_list|,
name|maxColDataSize
argument_list|,
name|minColsPerKey
argument_list|,
name|maxColsPerKey
argument_list|,
name|families
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|userOwner
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Granting permissions for user "
operator|+
name|userOwner
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|Permission
operator|.
name|Action
index|[]
name|actions
init|=
block|{
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
block|,
name|Permission
operator|.
name|Action
operator|.
name|CREATE
block|,
name|Permission
operator|.
name|Action
operator|.
name|READ
block|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
block|}
decl_stmt|;
try|try
block|{
name|AccessControlClient
operator|.
name|grant
argument_list|(
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
argument_list|,
name|tableName
argument_list|,
name|userOwner
operator|.
name|getShortName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Error in granting permission for the user "
operator|+
name|userOwner
operator|.
name|getShortName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
block|}
if|if
condition|(
name|userNames
operator|!=
literal|null
condition|)
block|{
comment|// This will be comma separated list of expressions.
name|String
name|users
index|[]
init|=
name|userNames
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|User
name|user
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|userStr
range|:
name|users
control|)
block|{
if|if
condition|(
name|User
operator|.
name|isHBaseSecurityEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|user
operator|=
name|User
operator|.
name|create
argument_list|(
name|loginAndReturnUGI
argument_list|(
name|conf
argument_list|,
name|userStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|user
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
name|userStr
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isWrite
condition|)
block|{
if|if
condition|(
name|userOwner
operator|!=
literal|null
condition|)
block|{
name|writerThreads
operator|=
operator|new
name|MultiThreadedWriterWithACL
argument_list|(
name|dataGen
argument_list|,
name|conf
argument_list|,
name|tableName
argument_list|,
name|userOwner
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|writerClass
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_WRITER
argument_list|)
condition|)
block|{
name|writerClass
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_WRITER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writerClass
operator|=
name|MultiThreadedWriter
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
expr_stmt|;
block|}
name|writerThreads
operator|=
name|getMultiThreadedWriterInstance
argument_list|(
name|writerClass
argument_list|,
name|dataGen
argument_list|)
expr_stmt|;
block|}
name|writerThreads
operator|.
name|setMultiPut
argument_list|(
name|isMultiPut
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUpdate
condition|)
block|{
if|if
condition|(
name|userOwner
operator|!=
literal|null
condition|)
block|{
name|updaterThreads
operator|=
operator|new
name|MultiThreadedUpdaterWithACL
argument_list|(
name|dataGen
argument_list|,
name|conf
argument_list|,
name|tableName
argument_list|,
name|updatePercent
argument_list|,
name|userOwner
argument_list|,
name|userNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|updaterClass
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_UPDATER
argument_list|)
condition|)
block|{
name|updaterClass
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_UPDATER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updaterClass
operator|=
name|MultiThreadedUpdater
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
expr_stmt|;
block|}
name|updaterThreads
operator|=
name|getMultiThreadedUpdaterInstance
argument_list|(
name|updaterClass
argument_list|,
name|dataGen
argument_list|)
expr_stmt|;
block|}
name|updaterThreads
operator|.
name|setBatchUpdate
argument_list|(
name|isBatchUpdate
argument_list|)
expr_stmt|;
name|updaterThreads
operator|.
name|setIgnoreNonceConflicts
argument_list|(
name|ignoreConflicts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRead
condition|)
block|{
if|if
condition|(
name|userOwner
operator|!=
literal|null
condition|)
block|{
name|readerThreads
operator|=
operator|new
name|MultiThreadedReaderWithACL
argument_list|(
name|dataGen
argument_list|,
name|conf
argument_list|,
name|tableName
argument_list|,
name|verifyPercent
argument_list|,
name|userNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|readerClass
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_READER
argument_list|)
condition|)
block|{
name|readerClass
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_READER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|readerClass
operator|=
name|MultiThreadedReader
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
expr_stmt|;
block|}
name|readerThreads
operator|=
name|getMultiThreadedReaderInstance
argument_list|(
name|readerClass
argument_list|,
name|dataGen
argument_list|)
expr_stmt|;
block|}
name|readerThreads
operator|.
name|setMaxErrors
argument_list|(
name|maxReadErrors
argument_list|)
expr_stmt|;
name|readerThreads
operator|.
name|setKeyWindow
argument_list|(
name|keyWindow
argument_list|)
expr_stmt|;
name|readerThreads
operator|.
name|setMultiGetBatchSize
argument_list|(
name|multiGetBatchSize
argument_list|)
expr_stmt|;
name|readerThreads
operator|.
name|setRegionReplicaId
argument_list|(
name|regionReplicaId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUpdate
operator|&&
name|isWrite
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Concurrent write/update workload: making updaters aware of the "
operator|+
literal|"write point"
argument_list|)
expr_stmt|;
name|updaterThreads
operator|.
name|linkToWriter
argument_list|(
name|writerThreads
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRead
operator|&&
operator|(
name|isUpdate
operator|||
name|isWrite
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Concurrent write/read workload: making readers aware of the "
operator|+
literal|"write point"
argument_list|)
expr_stmt|;
name|readerThreads
operator|.
name|linkToWriter
argument_list|(
name|isUpdate
condition|?
name|updaterThreads
else|:
name|writerThreads
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isWrite
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting to write data..."
argument_list|)
expr_stmt|;
name|writerThreads
operator|.
name|start
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numWriterThreads
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUpdate
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting to mutate data..."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting to mutate data..."
argument_list|)
expr_stmt|;
comment|// TODO : currently append and increment operations not tested with tags
comment|// Will update this aftet it is done
name|updaterThreads
operator|.
name|start
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numUpdaterThreads
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRead
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting to read data..."
argument_list|)
expr_stmt|;
name|readerThreads
operator|.
name|start
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numReaderThreads
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isWrite
condition|)
block|{
name|writerThreads
operator|.
name|waitForFinish
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isUpdate
condition|)
block|{
name|updaterThreads
operator|.
name|waitForFinish
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isRead
condition|)
block|{
name|readerThreads
operator|.
name|waitForFinish
argument_list|()
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|isWrite
condition|)
block|{
name|success
operator|=
name|success
operator|&&
name|writerThreads
operator|.
name|getNumWriteFailures
argument_list|()
operator|==
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|isUpdate
condition|)
block|{
name|success
operator|=
name|success
operator|&&
name|updaterThreads
operator|.
name|getNumWriteFailures
argument_list|()
operator|==
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|isRead
condition|)
block|{
name|success
operator|=
name|success
operator|&&
name|readerThreads
operator|.
name|getNumReadErrors
argument_list|()
operator|==
literal|0
operator|&&
name|readerThreads
operator|.
name|getNumReadFailures
argument_list|()
operator|==
literal|0
expr_stmt|;
block|}
return|return
name|success
condition|?
name|EXIT_SUCCESS
else|:
name|EXIT_FAILURE
return|;
block|}
specifier|private
name|LoadTestDataGenerator
name|getLoadGeneratorInstance
parameter_list|(
name|String
name|clazzName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|clazzName
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|byte
index|[]
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|LoadTestDataGenerator
operator|)
name|constructor
operator|.
name|newInstance
argument_list|(
name|minColDataSize
argument_list|,
name|maxColDataSize
argument_list|,
name|minColsPerKey
argument_list|,
name|maxColsPerKey
argument_list|,
name|families
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|MultiThreadedWriter
name|getMultiThreadedWriterInstance
parameter_list|(
name|String
name|clazzName
parameter_list|,
name|LoadTestDataGenerator
name|dataGen
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|clazzName
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|LoadTestDataGenerator
operator|.
name|class
argument_list|,
name|Configuration
operator|.
name|class
argument_list|,
name|TableName
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|MultiThreadedWriter
operator|)
name|constructor
operator|.
name|newInstance
argument_list|(
name|dataGen
argument_list|,
name|conf
argument_list|,
name|tableName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|MultiThreadedUpdater
name|getMultiThreadedUpdaterInstance
parameter_list|(
name|String
name|clazzName
parameter_list|,
name|LoadTestDataGenerator
name|dataGen
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|clazzName
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|LoadTestDataGenerator
operator|.
name|class
argument_list|,
name|Configuration
operator|.
name|class
argument_list|,
name|TableName
operator|.
name|class
argument_list|,
name|double
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|MultiThreadedUpdater
operator|)
name|constructor
operator|.
name|newInstance
argument_list|(
name|dataGen
argument_list|,
name|conf
argument_list|,
name|tableName
argument_list|,
name|updatePercent
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|MultiThreadedReader
name|getMultiThreadedReaderInstance
parameter_list|(
name|String
name|clazzName
parameter_list|,
name|LoadTestDataGenerator
name|dataGen
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|clazzName
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|LoadTestDataGenerator
operator|.
name|class
argument_list|,
name|Configuration
operator|.
name|class
argument_list|,
name|TableName
operator|.
name|class
argument_list|,
name|double
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|MultiThreadedReader
operator|)
name|constructor
operator|.
name|newInstance
argument_list|(
name|dataGen
argument_list|,
name|conf
argument_list|,
name|tableName
argument_list|,
name|verifyPercent
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|byte
index|[]
name|generateData
parameter_list|(
specifier|final
name|Random
name|r
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|length
operator|-
literal|8
operator|)
condition|;
name|i
operator|+=
literal|8
control|)
block|{
name|b
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|65
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
argument_list|)
expr_stmt|;
name|b
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|b
index|[
name|i
index|]
expr_stmt|;
name|b
index|[
name|i
operator|+
literal|2
index|]
operator|=
name|b
index|[
name|i
index|]
expr_stmt|;
name|b
index|[
name|i
operator|+
literal|3
index|]
operator|=
name|b
index|[
name|i
index|]
expr_stmt|;
name|b
index|[
name|i
operator|+
literal|4
index|]
operator|=
name|b
index|[
name|i
index|]
expr_stmt|;
name|b
index|[
name|i
operator|+
literal|5
index|]
operator|=
name|b
index|[
name|i
index|]
expr_stmt|;
name|b
index|[
name|i
operator|+
literal|6
index|]
operator|=
name|b
index|[
name|i
index|]
expr_stmt|;
name|b
index|[
name|i
operator|+
literal|7
index|]
operator|=
name|b
index|[
name|i
index|]
expr_stmt|;
block|}
name|byte
name|a
init|=
call|(
name|byte
call|)
argument_list|(
literal|65
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|b
index|[
name|i
index|]
operator|=
name|a
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
operator|new
name|LoadTestTool
argument_list|()
operator|.
name|doStaticMain
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
comment|/**    * When NUM_TABLES is specified, the function starts multiple worker threads    * which individually start a LoadTestTool instance to load a table. Each    * table name is in format<tn>_<index>. For example, "-tn test -num_tables 2"    * , table names will be "test_1", "test_2"    *    * @throws IOException    */
specifier|private
name|int
name|parallelLoadTables
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create new command args
name|String
name|tableName
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_TABLE_NAME
argument_list|,
name|DEFAULT_TABLE_NAME
argument_list|)
decl_stmt|;
name|String
index|[]
name|newArgs
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|cmd
operator|.
name|hasOption
argument_list|(
name|LoadTestTool
operator|.
name|OPT_TABLE_NAME
argument_list|)
condition|)
block|{
name|newArgs
operator|=
operator|new
name|String
index|[
name|cmdLineArgs
operator|.
name|length
operator|+
literal|2
index|]
expr_stmt|;
name|newArgs
index|[
literal|0
index|]
operator|=
literal|"-"
operator|+
name|LoadTestTool
operator|.
name|OPT_TABLE_NAME
expr_stmt|;
name|newArgs
index|[
literal|1
index|]
operator|=
name|LoadTestTool
operator|.
name|DEFAULT_TABLE_NAME
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|cmdLineArgs
argument_list|,
literal|0
argument_list|,
name|newArgs
argument_list|,
literal|2
argument_list|,
name|cmdLineArgs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newArgs
operator|=
name|cmdLineArgs
expr_stmt|;
block|}
name|int
name|tableNameValueIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|newArgs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|newArgs
index|[
name|j
index|]
operator|.
name|endsWith
argument_list|(
name|OPT_TABLE_NAME
argument_list|)
condition|)
block|{
name|tableNameValueIndex
operator|=
name|j
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newArgs
index|[
name|j
index|]
operator|.
name|endsWith
argument_list|(
name|NUM_TABLES
argument_list|)
condition|)
block|{
comment|// change NUM_TABLES to 1 so that each worker loads one table
name|newArgs
index|[
name|j
operator|+
literal|1
index|]
operator|=
literal|"1"
expr_stmt|;
block|}
block|}
comment|// starting to load multiple tables
name|List
argument_list|<
name|WorkerThread
argument_list|>
name|workers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTables
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|workerArgs
init|=
name|newArgs
operator|.
name|clone
argument_list|()
decl_stmt|;
name|workerArgs
index|[
name|tableNameValueIndex
index|]
operator|=
name|tableName
operator|+
literal|"_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
expr_stmt|;
name|WorkerThread
name|worker
init|=
operator|new
name|WorkerThread
argument_list|(
name|i
argument_list|,
name|workerArgs
argument_list|)
decl_stmt|;
name|workers
operator|.
name|add
argument_list|(
name|worker
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|worker
operator|+
literal|" starting"
argument_list|)
expr_stmt|;
name|worker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait for all workers finish
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for worker threads to finish"
argument_list|)
expr_stmt|;
for|for
control|(
name|WorkerThread
name|t
range|:
name|workers
control|)
block|{
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|IOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|()
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
name|checkForErrors
argument_list|()
expr_stmt|;
block|}
return|return
name|EXIT_SUCCESS
return|;
block|}
comment|// If an exception is thrown by one of worker threads, it will be
comment|// stored here.
specifier|protected
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|thrown
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|void
name|workerThreadError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|thrown
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check for errors in the writer threads. If any is found, rethrow it.    */
specifier|private
name|void
name|checkForErrors
parameter_list|()
throws|throws
name|IOException
block|{
name|Throwable
name|thrown
init|=
name|this
operator|.
name|thrown
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|thrown
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|thrown
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|thrown
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|thrown
argument_list|)
throw|;
block|}
block|}
class|class
name|WorkerThread
extends|extends
name|Thread
block|{
specifier|private
name|String
index|[]
name|workerArgs
decl_stmt|;
name|WorkerThread
parameter_list|(
name|int
name|i
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
name|super
argument_list|(
literal|"WorkerThread-"
operator|+
name|i
argument_list|)
expr_stmt|;
name|workerArgs
operator|=
name|args
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
operator|new
name|LoadTestTool
argument_list|()
argument_list|,
name|workerArgs
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"LoadTestTool exit with non-zero return code."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in worker thread"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|workerThreadError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addAuthInfoToConf
parameter_list|(
name|Properties
name|authConfig
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|userList
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|users
init|=
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|userList
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|users
operator|.
name|add
argument_list|(
name|owner
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|user
range|:
name|users
control|)
block|{
name|String
name|keyTabFileConfKey
init|=
literal|"hbase."
operator|+
name|user
operator|+
literal|".keytab.file"
decl_stmt|;
name|String
name|principalConfKey
init|=
literal|"hbase."
operator|+
name|user
operator|+
literal|".kerberos.principal"
decl_stmt|;
if|if
condition|(
operator|!
name|authConfig
operator|.
name|containsKey
argument_list|(
name|keyTabFileConfKey
argument_list|)
operator|||
operator|!
name|authConfig
operator|.
name|containsKey
argument_list|(
name|principalConfKey
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Authentication configs missing for user : "
operator|+
name|user
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|String
name|key
range|:
name|authConfig
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|authConfig
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added authentication properties to config successfully."
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|UserGroupInformation
name|loginAndReturnUGI
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|username
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|hostname
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|String
name|keyTabFileConfKey
init|=
literal|"hbase."
operator|+
name|username
operator|+
literal|".keytab.file"
decl_stmt|;
name|String
name|keyTabFileLocation
init|=
name|conf
operator|.
name|get
argument_list|(
name|keyTabFileConfKey
argument_list|)
decl_stmt|;
name|String
name|principalConfKey
init|=
literal|"hbase."
operator|+
name|username
operator|+
literal|".kerberos.principal"
decl_stmt|;
name|String
name|principal
init|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|principalConfKey
argument_list|)
argument_list|,
name|hostname
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyTabFileLocation
operator|==
literal|null
operator|||
name|principal
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Principal or key tab file null for : "
operator|+
name|principalConfKey
operator|+
literal|", "
operator|+
name|keyTabFileConfKey
argument_list|)
expr_stmt|;
block|}
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|principal
argument_list|,
name|keyTabFileLocation
argument_list|)
decl_stmt|;
return|return
name|ugi
return|;
block|}
block|}
end_class

end_unit

