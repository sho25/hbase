begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|VersionedProtocol
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * RpcEngine that random throws a SocketTimeoutEngine for testing.  * Make sure to call setProtocolEngine to have the client actually use the RpcEngine  * for a specific protocol  */
end_comment

begin_class
specifier|public
class|class
name|RandomTimeoutRpcEngine
extends|extends
name|ProtobufRpcEngine
block|{
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|double
name|chanceOfTimeout
init|=
literal|0.3
decl_stmt|;
specifier|private
specifier|static
name|AtomicInteger
name|invokations
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|public
name|VersionedProtocol
name|getProxy
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|VersionedProtocol
argument_list|>
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|User
name|ticket
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SocketFactory
name|factory
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Start up the requested-for proxy so we can pass-through calls to the underlying
comment|// RpcEngine.  Also instantiate and return our own proxy (RandomTimeoutInvocationHandler)
comment|// that will either throw exceptions or pass through to the underlying proxy.
name|VersionedProtocol
name|actualProxy
init|=
name|super
operator|.
name|getProxy
argument_list|(
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|addr
argument_list|,
name|ticket
argument_list|,
name|conf
argument_list|,
name|factory
argument_list|,
name|rpcTimeout
argument_list|)
decl_stmt|;
name|RandomTimeoutInvocationHandler
name|invoker
init|=
operator|new
name|RandomTimeoutInvocationHandler
argument_list|(
name|actualProxy
argument_list|)
decl_stmt|;
name|VersionedProtocol
name|object
init|=
operator|(
name|VersionedProtocol
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|protocol
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|protocol
block|}
argument_list|,
name|invoker
argument_list|)
decl_stmt|;
return|return
name|object
return|;
block|}
comment|/**    * Call this in order to set this class to run as the RpcEngine for the given protocol    */
specifier|public
specifier|static
name|void
name|setProtocolEngine
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
name|protocol
parameter_list|)
block|{
name|HBaseRPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|protocol
argument_list|,
name|RandomTimeoutRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the number of times the invoker has been invoked    */
specifier|public
specifier|static
name|int
name|getNumberOfInvocations
parameter_list|()
block|{
return|return
name|invokations
operator|.
name|get
argument_list|()
return|;
block|}
specifier|static
class|class
name|RandomTimeoutInvocationHandler
implements|implements
name|InvocationHandler
block|{
specifier|private
name|VersionedProtocol
name|actual
init|=
literal|null
decl_stmt|;
specifier|public
name|RandomTimeoutInvocationHandler
parameter_list|(
name|VersionedProtocol
name|actual
parameter_list|)
block|{
name|this
operator|.
name|actual
operator|=
name|actual
expr_stmt|;
block|}
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|RandomTimeoutRpcEngine
operator|.
name|invokations
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
if|if
condition|(
name|RANDOM
operator|.
name|nextFloat
argument_list|()
operator|<
name|chanceOfTimeout
condition|)
block|{
comment|// throw a ServiceException, becuase that is the only exception type that
comment|// {@link ProtobufRpcEngine} throws.  If this RpcEngine is used with a different
comment|// "actual" type, this may not properly mimic the underlying RpcEngine.
throw|throw
operator|new
name|ServiceException
argument_list|(
operator|new
name|SocketTimeoutException
argument_list|(
literal|"fake timeout"
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|actual
argument_list|)
operator|.
name|invoke
argument_list|(
name|proxy
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

