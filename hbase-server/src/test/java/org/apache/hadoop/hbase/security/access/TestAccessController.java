begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionServerCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|CountRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|CountResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|HelloRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|HelloResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|IncrementCountRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|IncrementCountResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|NoopRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|NoopResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|PingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|PingResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|PingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|HBaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|LoadIncrementalHFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|AccessControlService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|CheckPermissionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SecurityTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|TestTableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingRpcChannel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * Performs authorization checks for common operations, according to different  * levels of authorized users.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SecurityTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAccessController
extends|extends
name|SecureTestUtil
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAccessController
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|Logger
operator|.
name|getLogger
argument_list|(
name|AccessController
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|Logger
operator|.
name|getLogger
argument_list|(
name|AccessControlFilter
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|Logger
operator|.
name|getLogger
argument_list|(
name|TableAuthManager
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Rule
specifier|public
name|TestTableName
name|TEST_TABLE
init|=
operator|new
name|TestTableName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|Connection
name|connection
decl_stmt|;
comment|// user with all permissions
specifier|private
specifier|static
name|User
name|SUPERUSER
decl_stmt|;
comment|// user granted with all global permission
specifier|private
specifier|static
name|User
name|USER_ADMIN
decl_stmt|;
comment|// user with rw permissions on column family.
specifier|private
specifier|static
name|User
name|USER_RW
decl_stmt|;
comment|// user with read-only permissions
specifier|private
specifier|static
name|User
name|USER_RO
decl_stmt|;
comment|// user is table owner. will have all permissions on table
specifier|private
specifier|static
name|User
name|USER_OWNER
decl_stmt|;
comment|// user with create table permissions alone
specifier|private
specifier|static
name|User
name|USER_CREATE
decl_stmt|;
comment|// user with no permissions
specifier|private
specifier|static
name|User
name|USER_NONE
decl_stmt|;
comment|// user with admin rights on the column family
specifier|private
specifier|static
name|User
name|USER_ADMIN_CF
decl_stmt|;
comment|// TODO: convert this test to cover the full matrix in
comment|// https://hbase.apache.org/book/appendix_acl_matrix.html
comment|// creating all Scope x Permission combinations
specifier|private
specifier|static
name|TableName
name|TEST_TABLE2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testtable2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|TEST_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|TEST_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|TEST_ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|MasterCoprocessorEnvironment
name|CP_ENV
decl_stmt|;
specifier|private
specifier|static
name|AccessController
name|ACCESS_CONTROLLER
decl_stmt|;
specifier|private
specifier|static
name|RegionServerCoprocessorEnvironment
name|RSCP_ENV
decl_stmt|;
specifier|private
name|RegionCoprocessorEnvironment
name|RCP_ENV
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup configuration
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
comment|// Enable security
name|enableSecurity
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// In this particular test case, we can't use SecureBulkLoadEndpoint because its doAs will fail
comment|// to move a file for a random user
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify enableSecurity sets up what we require
name|verifyConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Enable EXEC permission checking
name|conf
operator|.
name|setBoolean
argument_list|(
name|AccessControlConstants
operator|.
name|EXEC_PERMISSION_CHECKS_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|MasterCoprocessorHost
name|cpHost
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|cpHost
operator|.
name|load
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_HIGHEST
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|ACCESS_CONTROLLER
operator|=
operator|(
name|AccessController
operator|)
name|cpHost
operator|.
name|findCoprocessor
argument_list|(
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CP_ENV
operator|=
name|cpHost
operator|.
name|createEnvironment
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
name|ACCESS_CONTROLLER
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_HIGHEST
argument_list|,
literal|1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|RegionServerCoprocessorHost
name|rsHost
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionServerCoprocessorHost
argument_list|()
decl_stmt|;
name|RSCP_ENV
operator|=
name|rsHost
operator|.
name|createEnvironment
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
name|ACCESS_CONTROLLER
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_HIGHEST
argument_list|,
literal|1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Wait for the ACL table to become available
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
expr_stmt|;
comment|// create a set of test users
name|SUPERUSER
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"admin"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
argument_list|)
expr_stmt|;
name|USER_ADMIN
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"admin2"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_RW
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"rwuser"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_RO
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"rouser"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_OWNER
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"owner"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_CREATE
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"tbl_create"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_NONE
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"nouser"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_ADMIN_CF
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"col_family_admin"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|connection
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create the test table (owner added to the _acl_ table)
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setOwner
argument_list|(
name|USER_OWNER
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"s"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitTableEnabled
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HRegion
name|region
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RegionCoprocessorHost
name|rcpHost
init|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
decl_stmt|;
name|RCP_ENV
operator|=
name|rcpHost
operator|.
name|createEnvironment
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
name|ACCESS_CONTROLLER
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_HIGHEST
argument_list|,
literal|1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Set up initial grants
name|grantGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|USER_ADMIN
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|USER_RW
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// USER_CREATE is USER_RW plus CREATE permissions
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|USER_CREATE
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|USER_RO
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|USER_ADMIN_CF
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|AccessControlLists
operator|.
name|getTablePermissions
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|AccessControlClient
operator|.
name|getUserPermissions
argument_list|(
name|connection
argument_list|,
name|TEST_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error during call of AccessControlClient.getUserPermissions. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Clean the _acl_ table
try|try
block|{
name|deleteTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|ex
parameter_list|)
block|{
comment|// Test deleted the table, no problem
name|LOG
operator|.
name|info
argument_list|(
literal|"Test deleted table "
operator|+
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Verify all table/namespace permissions are erased
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|AccessControlLists
operator|.
name|getTablePermissions
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|AccessControlLists
operator|.
name|getNamespacePermissions
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|createTable
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testnewtable"
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preCreateTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|htd
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// verify that superuser can create tables
name|verifyAllowed
argument_list|(
name|createTable
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
comment|// all others should be denied
name|verifyDenied
argument_list|(
name|createTable
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableModify
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|modifyTable
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"fam_"
operator|+
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preModifyTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|modifyTable
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|modifyTable
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|deleteTable
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preDeleteTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|deleteTable
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|deleteTable
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableTruncate
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|truncateTable
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preTruncateTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|truncateTable
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_CREATE
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|truncateTable
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddColumn
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"fam_new"
argument_list|)
decl_stmt|;
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preAddColumn
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifyColumn
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preModifyColumn
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_ADMIN_CF
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preDeleteColumn
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_ADMIN_CF
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableDisable
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|disableTable
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preDisableTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|disableAclTable
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preDisableTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|disableTable
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|disableTable
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// No user should be allowed to disable _acl_ table
name|verifyDenied
argument_list|(
name|disableAclTable
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableEnable
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|enableTable
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preEnableTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|enableTable
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|enableTable
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMove
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
decl_stmt|;
try|try
init|(
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|regions
operator|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
block|}
name|HRegionLocation
name|location
init|=
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|hri
init|=
name|location
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
specifier|final
name|ServerName
name|server
init|=
name|location
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preMove
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|hri
argument_list|,
name|server
argument_list|,
name|server
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAssign
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
decl_stmt|;
try|try
init|(
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|regions
operator|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
block|}
name|HRegionLocation
name|location
init|=
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|hri
init|=
name|location
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preAssign
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|hri
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnassign
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
decl_stmt|;
try|try
init|(
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|regions
operator|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
block|}
name|HRegionLocation
name|location
init|=
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|hri
init|=
name|location
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preUnassign
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|hri
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionOffline
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
decl_stmt|;
try|try
init|(
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|regions
operator|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
block|}
name|HRegionLocation
name|location
init|=
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|hri
init|=
name|location
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preRegionOffline
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|hri
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBalance
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preBalance
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBalanceSwitch
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preBalanceSwitch
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preShutdown
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStopMaster
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preStopMaster
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyWrite
parameter_list|(
name|AccessTestAction
name|action
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_NONE
argument_list|,
name|USER_RO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preSplit
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitWithSplitRow
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preSplit
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_ROW
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeRegions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|findRegionsForTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preMerge
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RSCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preFlush
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompact
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preCompact
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|ScanType
operator|.
name|COMPACT_RETAIN_DELETES
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPreCompactSelection
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preCompactSelection
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyRead
parameter_list|(
name|AccessTestAction
name|action
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyReadWrite
parameter_list|(
name|AccessTestAction
name|action
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_NONE
argument_list|,
name|USER_RO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRead
parameter_list|()
throws|throws
name|Exception
block|{
comment|// get action
name|AccessTestAction
name|getAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|g
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyRead
argument_list|(
name|getAction
argument_list|)
expr_stmt|;
comment|// action for scanning
name|AccessTestAction
name|scanAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|Result
name|r
init|=
name|scanner
operator|.
name|next
argument_list|()
init|;
name|r
operator|!=
literal|null
condition|;
name|r
operator|=
name|scanner
operator|.
name|next
argument_list|()
control|)
block|{
comment|// do nothing
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{           }
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyRead
argument_list|(
name|scanAction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// test put, delete, increment
specifier|public
name|void
name|testWrite
parameter_list|()
throws|throws
name|Exception
block|{
comment|// put action
name|AccessTestAction
name|putAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyWrite
argument_list|(
name|putAction
argument_list|)
expr_stmt|;
comment|// delete action
name|AccessTestAction
name|deleteAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyWrite
argument_list|(
name|deleteAction
argument_list|)
expr_stmt|;
comment|// increment action
name|AccessTestAction
name|incrementAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyWrite
argument_list|(
name|incrementAction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadWrite
parameter_list|()
throws|throws
name|Exception
block|{
comment|// action for checkAndDelete
name|AccessTestAction
name|checkAndDeleteAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|checkAndDelete
argument_list|(
name|TEST_ROW
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test_value"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyReadWrite
argument_list|(
name|checkAndDeleteAction
argument_list|)
expr_stmt|;
comment|// action for checkAndPut()
name|AccessTestAction
name|checkAndPut
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|checkAndPut
argument_list|(
name|TEST_ROW
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test_value"
argument_list|)
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyReadWrite
argument_list|(
name|checkAndPut
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBulkLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDirOnTestFS
argument_list|(
literal|"testBulkLoad"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|//need to make it globally writable
comment|//so users creating HFiles have write permissions
name|fs
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"-rwxrwxrwx"
argument_list|)
argument_list|)
expr_stmt|;
name|AccessTestAction
name|bulkLoadAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numRows
init|=
literal|3
decl_stmt|;
comment|//Making the assumption that the test table won't split between the range
name|byte
index|[]
index|[]
index|[]
name|hfileRanges
init|=
block|{
block|{
block|{
operator|(
name|byte
operator|)
literal|0
block|}
block|,
block|{
operator|(
name|byte
operator|)
literal|9
block|}
block|}
block|}
decl_stmt|;
name|Path
name|bulkLoadBasePath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
operator|new
name|Path
argument_list|(
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
operator|new
name|BulkLoadHelper
argument_list|(
name|bulkLoadBasePath
argument_list|)
operator|.
name|bulkLoadHFile
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
name|hfileRanges
argument_list|,
name|numRows
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// User performing bulk loads must have privilege to read table metadata
comment|// (ADMIN or CREATE)
name|verifyAllowed
argument_list|(
name|bulkLoadAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|bulkLoadAction
argument_list|,
name|USER_RW
argument_list|,
name|USER_NONE
argument_list|,
name|USER_RO
argument_list|)
expr_stmt|;
comment|// Reinit after the bulk upload
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|BulkLoadHelper
block|{
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Path
name|loadPath
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|BulkLoadHelper
parameter_list|(
name|Path
name|loadPath
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
expr_stmt|;
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|loadPath
operator|=
name|loadPath
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|this
operator|.
name|loadPath
operator|=
name|loadPath
expr_stmt|;
block|}
specifier|private
name|void
name|createHFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|int
name|numRows
parameter_list|)
throws|throws
name|IOException
block|{
name|HFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|HFileContext
name|context
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|writer
operator|=
name|HFile
operator|.
name|getWriterFactory
argument_list|(
name|conf
argument_list|,
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|withPath
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|context
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// subtract 2 since numRows doesn't include boundary keys
for|for
control|(
name|byte
index|[]
name|key
range|:
name|Bytes
operator|.
name|iterateOnSplits
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
literal|true
argument_list|,
name|numRows
operator|-
literal|2
argument_list|)
control|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|key
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|now
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|bulkLoadHFile
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
index|[]
index|[]
name|hfileRanges
parameter_list|,
name|int
name|numRowsPerRange
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|familyDir
init|=
operator|new
name|Path
argument_list|(
name|loadPath
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|familyDir
argument_list|)
expr_stmt|;
name|int
name|hfileIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
index|[]
name|range
range|:
name|hfileRanges
control|)
block|{
name|byte
index|[]
name|from
init|=
name|range
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|to
init|=
name|range
index|[
literal|1
index|]
decl_stmt|;
name|createHFile
argument_list|(
operator|new
name|Path
argument_list|(
name|familyDir
argument_list|,
literal|"hfile_"
operator|+
operator|(
name|hfileIdx
operator|++
operator|)
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|numRowsPerRange
argument_list|)
expr_stmt|;
block|}
comment|//set global read so RegionServer can move it
name|setPermission
argument_list|(
name|loadPath
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
literal|"-rwxrwxrwx"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|HTable
name|table
init|=
operator|(
name|HTable
operator|)
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|TEST_UTIL
operator|.
name|waitTableEnabled
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|LoadIncrementalHFiles
name|loader
init|=
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|loader
operator|.
name|doBulkLoad
argument_list|(
name|loadPath
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setPermission
parameter_list|(
name|Path
name|dir
parameter_list|,
name|FsPermission
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|FileStatus
name|el
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
control|)
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|el
operator|.
name|getPath
argument_list|()
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|el
operator|.
name|getPath
argument_list|()
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|appendAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|row
init|=
name|TEST_ROW
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|TEST_QUALIFIER
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Append
name|append
init|=
operator|new
name|Append
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|append
operator|.
name|add
argument_list|(
name|TEST_FAMILY
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|t
operator|.
name|append
argument_list|(
name|append
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|appendAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|appendAction
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrantRevoke
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|grantAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|acl
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ProtobufUtil
operator|.
name|grant
argument_list|(
name|protocol
argument_list|,
name|USER_RO
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|revokeAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|acl
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ProtobufUtil
operator|.
name|revoke
argument_list|(
name|protocol
argument_list|,
name|USER_RO
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|getTablePermissionsAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|acl
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ProtobufUtil
operator|.
name|getUserPermissions
argument_list|(
name|protocol
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|getGlobalPermissionsAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|acl
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ProtobufUtil
operator|.
name|getUserPermissions
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|grantAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|grantAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|revokeAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|revokeAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|getTablePermissionsAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|getTablePermissionsAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|getGlobalPermissionsAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDeniedWithException
argument_list|(
name|getGlobalPermissionsAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostGrantRevoke
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TempTable"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|family1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|family2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
comment|// create table
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|deleteTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|htd
argument_list|)
expr_stmt|;
comment|// create temp users
name|User
name|tblUser
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"tbluser"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|User
name|gblUser
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"gbluser"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// prepare actions:
name|AccessTestAction
name|putActionAll
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|family2
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|putAction1
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|putAction2
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|family2
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|getActionAll
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|g
operator|.
name|addFamily
argument_list|(
name|family1
argument_list|)
expr_stmt|;
name|g
operator|.
name|addFamily
argument_list|(
name|family2
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|getAction1
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|g
operator|.
name|addFamily
argument_list|(
name|family1
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|getAction2
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|g
operator|.
name|addFamily
argument_list|(
name|family2
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|deleteActionAll
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteFamily
argument_list|(
name|family1
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteFamily
argument_list|(
name|family2
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|deleteAction1
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteFamily
argument_list|(
name|family1
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|deleteAction2
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteFamily
argument_list|(
name|family2
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// initial check:
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|getActionAll
argument_list|,
name|getAction1
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|putActionAll
argument_list|,
name|putAction1
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|deleteActionAll
argument_list|,
name|deleteAction1
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|gblUser
argument_list|,
name|getActionAll
argument_list|,
name|getAction1
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|gblUser
argument_list|,
name|putActionAll
argument_list|,
name|putAction1
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|gblUser
argument_list|,
name|deleteActionAll
argument_list|,
name|deleteAction1
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
comment|// grant table read permission
name|grantGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|gblUser
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tblUser
operator|.
name|getShortName
argument_list|()
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// check
name|verifyAllowed
argument_list|(
name|tblUser
argument_list|,
name|getActionAll
argument_list|,
name|getAction1
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|putActionAll
argument_list|,
name|putAction1
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|deleteActionAll
argument_list|,
name|deleteAction1
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|gblUser
argument_list|,
name|getActionAll
argument_list|,
name|getAction1
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|gblUser
argument_list|,
name|putActionAll
argument_list|,
name|putAction1
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|gblUser
argument_list|,
name|deleteActionAll
argument_list|,
name|deleteAction1
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
comment|// grant table write permission while revoking read permissions
name|grantGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|gblUser
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tblUser
operator|.
name|getShortName
argument_list|()
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|getActionAll
argument_list|,
name|getAction1
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|tblUser
argument_list|,
name|putActionAll
argument_list|,
name|putAction1
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|tblUser
argument_list|,
name|deleteActionAll
argument_list|,
name|deleteAction1
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|gblUser
argument_list|,
name|getActionAll
argument_list|,
name|getAction1
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|gblUser
argument_list|,
name|putActionAll
argument_list|,
name|putAction1
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|gblUser
argument_list|,
name|deleteActionAll
argument_list|,
name|deleteAction1
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
comment|// revoke table permissions
name|revokeGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|gblUser
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|revokeFromTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tblUser
operator|.
name|getShortName
argument_list|()
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|getActionAll
argument_list|,
name|getAction1
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|putActionAll
argument_list|,
name|putAction1
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|deleteActionAll
argument_list|,
name|deleteAction1
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|gblUser
argument_list|,
name|getActionAll
argument_list|,
name|getAction1
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|gblUser
argument_list|,
name|putActionAll
argument_list|,
name|putAction1
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|gblUser
argument_list|,
name|deleteActionAll
argument_list|,
name|deleteAction1
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
comment|// grant column family read permission
name|grantGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|gblUser
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tblUser
operator|.
name|getShortName
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// Access should be denied for family2
name|verifyAllowed
argument_list|(
name|tblUser
argument_list|,
name|getActionAll
argument_list|,
name|getAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|putActionAll
argument_list|,
name|putAction1
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|deleteActionAll
argument_list|,
name|deleteAction1
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|gblUser
argument_list|,
name|getActionAll
argument_list|,
name|getAction1
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|gblUser
argument_list|,
name|putActionAll
argument_list|,
name|putAction1
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|gblUser
argument_list|,
name|deleteActionAll
argument_list|,
name|deleteAction1
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
comment|// grant column family write permission
name|grantGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|gblUser
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tblUser
operator|.
name|getShortName
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|family2
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// READ from family1, WRITE to family2 are allowed
name|verifyAllowed
argument_list|(
name|tblUser
argument_list|,
name|getActionAll
argument_list|,
name|getAction1
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|tblUser
argument_list|,
name|putAction2
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|putActionAll
argument_list|,
name|putAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|deleteActionAll
argument_list|,
name|deleteAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|gblUser
argument_list|,
name|getActionAll
argument_list|,
name|getAction1
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|gblUser
argument_list|,
name|putActionAll
argument_list|,
name|putAction1
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|gblUser
argument_list|,
name|deleteActionAll
argument_list|,
name|deleteAction1
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
comment|// revoke column family permission
name|revokeGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|gblUser
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|revokeFromTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tblUser
operator|.
name|getShortName
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|family2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Revoke on family2 should not have impact on family1 permissions
name|verifyAllowed
argument_list|(
name|tblUser
argument_list|,
name|getActionAll
argument_list|,
name|getAction1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|putActionAll
argument_list|,
name|putAction1
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|deleteActionAll
argument_list|,
name|deleteAction1
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
comment|// Should not have access as global permissions are completely revoked
name|verifyDenied
argument_list|(
name|gblUser
argument_list|,
name|getActionAll
argument_list|,
name|getAction1
argument_list|,
name|getAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|gblUser
argument_list|,
name|putActionAll
argument_list|,
name|putAction1
argument_list|,
name|putAction2
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|gblUser
argument_list|,
name|deleteActionAll
argument_list|,
name|deleteAction1
argument_list|,
name|deleteAction2
argument_list|)
expr_stmt|;
comment|// delete table
name|deleteTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|hasFoundUserPermission
parameter_list|(
name|UserPermission
name|userPermission
parameter_list|,
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
parameter_list|)
block|{
return|return
name|perms
operator|.
name|contains
argument_list|(
name|userPermission
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostGrantRevokeAtQualifierLevel
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testGrantRevokeAtQualifierLevel"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|family1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|family2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
comment|// create table
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|deleteTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|htd
argument_list|)
expr_stmt|;
comment|// create temp users
name|User
name|user
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"user"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|AccessTestAction
name|getQualifierAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|g
operator|.
name|addColumn
argument_list|(
name|family1
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|putQualifierAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|deleteQualifierAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumn
argument_list|(
name|family1
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
comment|// d.deleteFamily(family1);
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|revokeFromTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|user
operator|.
name|getShortName
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getQualifierAction
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putQualifierAction
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteQualifierAction
argument_list|)
expr_stmt|;
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|user
operator|.
name|getShortName
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|getQualifierAction
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putQualifierAction
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteQualifierAction
argument_list|)
expr_stmt|;
comment|// only grant write permission
comment|// TODO: comment this portion after HBASE-3583
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|user
operator|.
name|getShortName
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getQualifierAction
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|putQualifierAction
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|deleteQualifierAction
argument_list|)
expr_stmt|;
comment|// grant both read and write permission
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|user
operator|.
name|getShortName
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|getQualifierAction
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|putQualifierAction
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|deleteQualifierAction
argument_list|)
expr_stmt|;
comment|// revoke family level permission won't impact column level
name|revokeFromTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|user
operator|.
name|getShortName
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|getQualifierAction
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|putQualifierAction
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|deleteQualifierAction
argument_list|)
expr_stmt|;
comment|// delete table
name|deleteTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPermissionList
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testPermissionList"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|family1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|family2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
comment|// create table
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|deleteTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setOwner
argument_list|(
name|USER_OWNER
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|htd
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
decl_stmt|;
name|Table
name|acl
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|perms
operator|=
name|ProtobufUtil
operator|.
name|getUserPermissions
argument_list|(
name|protocol
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|UserPermission
name|ownerperm
init|=
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|USER_OWNER
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Owner should have all permissions on table"
argument_list|,
name|hasFoundUserPermission
argument_list|(
name|ownerperm
argument_list|,
name|perms
argument_list|)
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"user"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|byte
index|[]
name|userName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
decl_stmt|;
name|UserPermission
name|up
init|=
operator|new
name|UserPermission
argument_list|(
name|userName
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"User should not be granted permission: "
operator|+
name|up
operator|.
name|toString
argument_list|()
argument_list|,
name|hasFoundUserPermission
argument_list|(
name|up
argument_list|,
name|perms
argument_list|)
argument_list|)
expr_stmt|;
comment|// grant read permission
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|user
operator|.
name|getShortName
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|acl
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
expr_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|perms
operator|=
name|ProtobufUtil
operator|.
name|getUserPermissions
argument_list|(
name|protocol
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|UserPermission
name|upToVerify
init|=
operator|new
name|UserPermission
argument_list|(
name|userName
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"User should be granted permission: "
operator|+
name|upToVerify
operator|.
name|toString
argument_list|()
argument_list|,
name|hasFoundUserPermission
argument_list|(
name|upToVerify
argument_list|,
name|perms
argument_list|)
argument_list|)
expr_stmt|;
name|upToVerify
operator|=
operator|new
name|UserPermission
argument_list|(
name|userName
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"User should not be granted permission: "
operator|+
name|upToVerify
operator|.
name|toString
argument_list|()
argument_list|,
name|hasFoundUserPermission
argument_list|(
name|upToVerify
argument_list|,
name|perms
argument_list|)
argument_list|)
expr_stmt|;
comment|// grant read+write
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|user
operator|.
name|getShortName
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|acl
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
expr_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|perms
operator|=
name|ProtobufUtil
operator|.
name|getUserPermissions
argument_list|(
name|protocol
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|upToVerify
operator|=
operator|new
name|UserPermission
argument_list|(
name|userName
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"User should be granted permission: "
operator|+
name|upToVerify
operator|.
name|toString
argument_list|()
argument_list|,
name|hasFoundUserPermission
argument_list|(
name|upToVerify
argument_list|,
name|perms
argument_list|)
argument_list|)
expr_stmt|;
comment|// revoke
name|revokeFromTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|user
operator|.
name|getShortName
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|,
name|qualifier
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|acl
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
expr_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|perms
operator|=
name|ProtobufUtil
operator|.
name|getUserPermissions
argument_list|(
name|protocol
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"User should not be granted permission: "
operator|+
name|upToVerify
operator|.
name|toString
argument_list|()
argument_list|,
name|hasFoundUserPermission
argument_list|(
name|upToVerify
argument_list|,
name|perms
argument_list|)
argument_list|)
expr_stmt|;
comment|// disable table before modification
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|User
name|newOwner
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"new_owner"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|htd
operator|.
name|setOwner
argument_list|(
name|newOwner
argument_list|)
expr_stmt|;
name|admin
operator|.
name|modifyTable
argument_list|(
name|tableName
argument_list|,
name|htd
argument_list|)
expr_stmt|;
name|acl
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
expr_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|perms
operator|=
name|ProtobufUtil
operator|.
name|getUserPermissions
argument_list|(
name|protocol
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|UserPermission
name|newOwnerperm
init|=
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|newOwner
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"New owner should have all permissions on table"
argument_list|,
name|hasFoundUserPermission
argument_list|(
name|newOwnerperm
argument_list|,
name|perms
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete table
name|deleteTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobalPermissionList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
decl_stmt|;
name|Table
name|acl
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|perms
operator|=
name|ProtobufUtil
operator|.
name|getUserPermissions
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|UserPermission
name|adminPerm
init|=
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|USER_ADMIN
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ACRW"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Only user admin has permission on table _acl_ per setup"
argument_list|,
name|perms
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|hasFoundUserPermission
argument_list|(
name|adminPerm
argument_list|,
name|perms
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** global operations */
specifier|private
name|void
name|verifyGlobal
parameter_list|(
name|AccessTestAction
name|action
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_NONE
argument_list|,
name|USER_RO
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkGlobalPerms
parameter_list|(
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|IOException
block|{
name|Permission
index|[]
name|perms
init|=
operator|new
name|Permission
index|[
name|actions
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|perms
index|[
name|i
index|]
operator|=
operator|new
name|Permission
argument_list|(
name|actions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|CheckPermissionsRequest
operator|.
name|Builder
name|request
init|=
name|CheckPermissionsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Action
name|a
range|:
name|actions
control|)
block|{
name|request
operator|.
name|addPermission
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Global
argument_list|)
operator|.
name|setGlobalPermission
argument_list|(
name|AccessControlProtos
operator|.
name|GlobalPermission
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAction
argument_list|(
name|ProtobufUtil
operator|.
name|toPermissionAction
argument_list|(
name|a
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Table
name|acl
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|channel
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|channel
argument_list|)
decl_stmt|;
try|try
block|{
name|protocol
operator|.
name|checkPermissions
argument_list|(
literal|null
argument_list|,
name|request
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
name|ProtobufUtil
operator|.
name|toIOException
argument_list|(
name|se
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkTablePerms
parameter_list|(
name|TableName
name|table
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|IOException
block|{
name|Permission
index|[]
name|perms
init|=
operator|new
name|Permission
index|[
name|actions
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|perms
index|[
name|i
index|]
operator|=
operator|new
name|TablePermission
argument_list|(
name|table
argument_list|,
name|family
argument_list|,
name|column
argument_list|,
name|actions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|checkTablePerms
argument_list|(
name|table
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkTablePerms
parameter_list|(
name|TableName
name|table
parameter_list|,
name|Permission
modifier|...
name|perms
parameter_list|)
throws|throws
name|IOException
block|{
name|CheckPermissionsRequest
operator|.
name|Builder
name|request
init|=
name|CheckPermissionsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Permission
name|p
range|:
name|perms
control|)
block|{
name|request
operator|.
name|addPermission
argument_list|(
name|ProtobufUtil
operator|.
name|toPermission
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Table
name|acl
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
try|try
block|{
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|acl
operator|.
name|coprocessorService
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|protocol
operator|.
name|checkPermissions
argument_list|(
literal|null
argument_list|,
name|request
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
name|ProtobufUtil
operator|.
name|toIOException
argument_list|(
name|se
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckPermissions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// --------------------------------------
comment|// test global permissions
name|AccessTestAction
name|globalAdmin
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkGlobalPerms
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// verify that only superuser can admin
name|verifyGlobal
argument_list|(
name|globalAdmin
argument_list|)
expr_stmt|;
comment|// --------------------------------------
comment|// test multiple permissions
name|AccessTestAction
name|globalReadWrite
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkGlobalPerms
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyGlobal
argument_list|(
name|globalReadWrite
argument_list|)
expr_stmt|;
comment|// --------------------------------------
comment|// table/column/qualifier level permissions
specifier|final
name|byte
index|[]
name|TEST_Q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|TEST_Q2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q2"
argument_list|)
decl_stmt|;
name|User
name|userTable
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user_check_perms_table"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|User
name|userColumn
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user_check_perms_family"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|User
name|userQualifier
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user_check_perms_q"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|userTable
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|userColumn
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|userQualifier
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_Q1
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|AccessTestAction
name|tableRead
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|columnRead
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|qualifierRead
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_Q1
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|multiQualifierRead
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|new
name|Permission
index|[]
block|{
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_Q1
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
block|,
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_Q2
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
block|, }
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|globalAndTableRead
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|new
name|Permission
index|[]
block|{
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
block|,
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
block|, }
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|noCheck
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|new
name|Permission
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|tableRead
argument_list|,
name|SUPERUSER
argument_list|,
name|userTable
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|tableRead
argument_list|,
name|userColumn
argument_list|,
name|userQualifier
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|columnRead
argument_list|,
name|SUPERUSER
argument_list|,
name|userTable
argument_list|,
name|userColumn
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|columnRead
argument_list|,
name|userQualifier
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|qualifierRead
argument_list|,
name|SUPERUSER
argument_list|,
name|userTable
argument_list|,
name|userColumn
argument_list|,
name|userQualifier
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|multiQualifierRead
argument_list|,
name|SUPERUSER
argument_list|,
name|userTable
argument_list|,
name|userColumn
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|multiQualifierRead
argument_list|,
name|userQualifier
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|globalAndTableRead
argument_list|,
name|SUPERUSER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|globalAndTableRead
argument_list|,
name|userTable
argument_list|,
name|userColumn
argument_list|,
name|userQualifier
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|noCheck
argument_list|,
name|SUPERUSER
argument_list|,
name|userTable
argument_list|,
name|userColumn
argument_list|,
name|userQualifier
argument_list|)
expr_stmt|;
comment|// --------------------------------------
comment|// test family level multiple permissions
name|AccessTestAction
name|familyReadWrite
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|familyReadWrite
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|familyReadWrite
argument_list|,
name|USER_NONE
argument_list|,
name|USER_RO
argument_list|)
expr_stmt|;
comment|// --------------------------------------
comment|// check for wrong table region
name|CheckPermissionsRequest
name|checkRequest
init|=
name|CheckPermissionsRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|addPermission
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Type
operator|.
name|Table
argument_list|)
operator|.
name|setTablePermission
argument_list|(
name|AccessControlProtos
operator|.
name|TablePermission
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTableName
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addAction
argument_list|(
name|AccessControlProtos
operator|.
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Table
name|acl
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|channel
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|channel
argument_list|)
decl_stmt|;
try|try
block|{
comment|// but ask for TablePermissions for TEST_TABLE
name|protocol
operator|.
name|checkPermissions
argument_list|(
literal|null
argument_list|,
name|checkRequest
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"this should have thrown CoprocessorException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStopRegionServer
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preStopRegionServer
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RSCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRollWALWriterRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preRollWALWriterRequest
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RSCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOpenRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preOpen
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|action
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preClose
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
specifier|final
name|HTableDescriptor
name|htd
init|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|SnapshotDescription
operator|.
name|Builder
name|builder
init|=
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"-snapshot"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SnapshotDescription
name|snapshot
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|AccessTestAction
name|snapshotAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preSnapshot
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|snapshot
argument_list|,
name|htd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|deleteAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preDeleteSnapshot
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|restoreAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preRestoreSnapshot
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|snapshot
argument_list|,
name|htd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|cloneAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preCloneSnapshot
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|snapshotAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|snapshotAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|cloneAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|deleteAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|restoreAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|restoreAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|deleteAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|cloneAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotWithOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
specifier|final
name|HTableDescriptor
name|htd
init|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|SnapshotDescription
operator|.
name|Builder
name|builder
init|=
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"-snapshot"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setOwner
argument_list|(
name|USER_OWNER
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SnapshotDescription
name|snapshot
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|AccessTestAction
name|snapshotAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preSnapshot
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|snapshot
argument_list|,
name|htd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|snapshotAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|snapshotAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|AccessTestAction
name|deleteAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preDeleteSnapshot
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|deleteAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|deleteAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|AccessTestAction
name|restoreAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preRestoreSnapshot
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|snapshot
argument_list|,
name|htd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|restoreAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|restoreAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|AccessTestAction
name|cloneAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preCloneSnapshot
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// Clone by snapshot owner is not allowed , because clone operation creates a new table,
comment|// which needs global admin permission.
name|verifyAllowed
argument_list|(
name|cloneAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|cloneAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobalAuthorizationForNewRegisteredRS
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Test for global authorization for a new registered RegionServer."
argument_list|)
expr_stmt|;
name|MiniHBaseCluster
name|hbaseCluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
comment|// Since each RegionServer running on different user, add global
comment|// permissions for the new user.
name|String
name|currentUser
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
name|String
name|activeUserForNewRs
init|=
name|currentUser
operator|+
literal|".hfs."
operator|+
name|hbaseCluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|grantGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|activeUserForNewRs
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TEST_TABLE2
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|htd
argument_list|)
expr_stmt|;
comment|// Starting a new RegionServer.
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|newRsThread
init|=
name|hbaseCluster
operator|.
name|startRegionServer
argument_list|()
decl_stmt|;
specifier|final
name|HRegionServer
name|newRs
init|=
name|newRsThread
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
comment|// Move region to the new RegionServer.
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
decl_stmt|;
try|try
init|(
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|TEST_TABLE2
argument_list|)
init|)
block|{
name|regions
operator|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
block|}
name|HRegionLocation
name|location
init|=
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|hri
init|=
name|location
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
specifier|final
name|ServerName
name|server
init|=
name|location
operator|.
name|getServerName
argument_list|()
decl_stmt|;
try|try
init|(
name|HTable
name|table
init|=
operator|(
name|HTable
operator|)
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE2
argument_list|)
init|)
block|{
name|AccessTestAction
name|moveAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|admin
operator|.
name|move
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|newRs
operator|.
name|getServerName
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|SUPERUSER
operator|.
name|runAs
argument_list|(
name|moveAction
argument_list|)
expr_stmt|;
specifier|final
name|int
name|RETRIES_LIMIT
init|=
literal|10
decl_stmt|;
name|int
name|retries
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|newRs
operator|.
name|getOnlineRegions
argument_list|(
name|TEST_TABLE2
argument_list|)
operator|.
name|size
argument_list|()
operator|<
literal|1
operator|&&
name|retries
operator|<
name|RETRIES_LIMIT
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for region to be opened. Already retried "
operator|+
name|retries
operator|+
literal|" times."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
name|retries
operator|++
expr_stmt|;
if|if
condition|(
name|retries
operator|==
name|RETRIES_LIMIT
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Retry exhaust for waiting region to be opened."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Verify write permission for user "admin2" who has the global
comment|// permissions.
name|AccessTestAction
name|putAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|TEST_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|USER_ADMIN
operator|.
name|runAs
argument_list|(
name|putAction
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableDescriptorsEnumeration
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|TABLE_ADMIN
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"UserA"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// Grant TABLE ADMIN privs
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|TABLE_ADMIN
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|AccessTestAction
name|listTablesAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|unmanagedConnection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|unmanagedConnection
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|listTables
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
name|unmanagedConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|getTableDescAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|unmanagedConnection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|unmanagedConnection
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
name|unmanagedConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|listTablesAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_CREATE
argument_list|,
name|TABLE_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|listTablesAction
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|getTableDescAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_CREATE
argument_list|,
name|TABLE_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|getTableDescAction
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableNameEnumeration
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|listTablesAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|unmanagedConnection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|unmanagedConnection
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|admin
operator|.
name|listTableNames
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
name|unmanagedConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|listTablesAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|listTablesAction
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableDeletion
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|TABLE_ADMIN
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"TestUser"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// Grant TABLE ADMIN privs
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|TABLE_ADMIN
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|AccessTestAction
name|deleteTableAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|unmanagedConnection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|unmanagedConnection
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
try|try
block|{
name|deleteTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|admin
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
name|unmanagedConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyDenied
argument_list|(
name|deleteTableAction
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|deleteTableAction
argument_list|,
name|TABLE_ADMIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespaceUserGrant
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|getAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|TEST_ROW
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|verifyDenied
argument_list|(
name|getAction
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// Grant namespace READ to USER_NONE, this should supersede any table permissions
name|grantOnNamespace
argument_list|(
name|TEST_UTIL
argument_list|,
name|USER_NONE
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// Now USER_NONE should be able to read also
name|verifyAllowed
argument_list|(
name|getAction
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessControlClientGrantRevoke
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create user for testing, who has no READ privileges by default.
name|User
name|testGrantRevoke
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"testGrantRevoke"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|AccessTestAction
name|getAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|TEST_ROW
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|verifyDenied
argument_list|(
name|getAction
argument_list|,
name|testGrantRevoke
argument_list|)
expr_stmt|;
comment|// Grant table READ permissions to testGrantRevoke.
try|try
block|{
name|grantOnTableUsingAccessControlClient
argument_list|(
name|TEST_UTIL
argument_list|,
name|connection
argument_list|,
name|testGrantRevoke
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error during call of AccessControlClient.grant. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Now testGrantRevoke should be able to read also
name|verifyAllowed
argument_list|(
name|getAction
argument_list|,
name|testGrantRevoke
argument_list|)
expr_stmt|;
comment|// Revoke table READ permission to testGrantRevoke.
try|try
block|{
name|revokeFromTableUsingAccessControlClient
argument_list|(
name|TEST_UTIL
argument_list|,
name|connection
argument_list|,
name|testGrantRevoke
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error during call of AccessControlClient.revoke "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Now testGrantRevoke shouldn't be able read
name|verifyDenied
argument_list|(
name|getAction
argument_list|,
name|testGrantRevoke
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessControlClientGlobalGrantRevoke
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create user for testing, who has no READ privileges by default.
name|User
name|testGlobalGrantRevoke
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"testGlobalGrantRevoke"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|AccessTestAction
name|getAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|TEST_ROW
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|verifyDenied
argument_list|(
name|getAction
argument_list|,
name|testGlobalGrantRevoke
argument_list|)
expr_stmt|;
comment|// Grant table READ permissions to testGlobalGrantRevoke.
try|try
block|{
name|grantGlobalUsingAccessControlClient
argument_list|(
name|TEST_UTIL
argument_list|,
name|connection
argument_list|,
name|testGlobalGrantRevoke
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error during call of AccessControlClient.grant. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Now testGlobalGrantRevoke should be able to read also
name|verifyAllowed
argument_list|(
name|getAction
argument_list|,
name|testGlobalGrantRevoke
argument_list|)
expr_stmt|;
comment|// Revoke table READ permission to testGlobalGrantRevoke.
try|try
block|{
name|revokeGlobalUsingAccessControlClient
argument_list|(
name|TEST_UTIL
argument_list|,
name|connection
argument_list|,
name|testGlobalGrantRevoke
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error during call of AccessControlClient.revoke "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Now testGlobalGrantRevoke shouldn't be able read
name|verifyDenied
argument_list|(
name|getAction
argument_list|,
name|testGlobalGrantRevoke
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessControlClientGrantRevokeOnNamespace
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create user for testing, who has no READ privileges by default.
name|User
name|testNS
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"testNS"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|AccessTestAction
name|getAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|TEST_ROW
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|verifyDenied
argument_list|(
name|getAction
argument_list|,
name|testNS
argument_list|)
expr_stmt|;
comment|// Grant namespace READ to testNS, this should supersede any table permissions
try|try
block|{
name|grantOnNamespaceUsingAccessControlClient
argument_list|(
name|TEST_UTIL
argument_list|,
name|connection
argument_list|,
name|testNS
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error during call of AccessControlClient.grant. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Now testNS should be able to read also
name|verifyAllowed
argument_list|(
name|getAction
argument_list|,
name|testNS
argument_list|)
expr_stmt|;
comment|// Revoke namespace READ to testNS, this should supersede any table permissions
try|try
block|{
name|revokeFromNamespaceUsingAccessControlClient
argument_list|(
name|TEST_UTIL
argument_list|,
name|connection
argument_list|,
name|testNS
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error during call of AccessControlClient.revoke "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Now testNS shouldn't be able read
name|verifyDenied
argument_list|(
name|getAction
argument_list|,
name|testNS
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|PingCoprocessor
extends|extends
name|PingService
implements|implements
name|Coprocessor
implements|,
name|CoprocessorService
block|{
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{ }
annotation|@
name|Override
specifier|public
name|Service
name|getService
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|ping
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|PingRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|PingResponse
argument_list|>
name|callback
parameter_list|)
block|{
name|callback
operator|.
name|run
argument_list|(
name|PingResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPong
argument_list|(
literal|"Pong!"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|count
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CountRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|CountResponse
argument_list|>
name|callback
parameter_list|)
block|{
name|callback
operator|.
name|run
argument_list|(
name|CountResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|increment
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IncrementCountRequest
name|requet
parameter_list|,
name|RpcCallback
argument_list|<
name|IncrementCountResponse
argument_list|>
name|callback
parameter_list|)
block|{
name|callback
operator|.
name|run
argument_list|(
name|IncrementCountResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|hello
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|HelloRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|HelloResponse
argument_list|>
name|callback
parameter_list|)
block|{
name|callback
operator|.
name|run
argument_list|(
name|HelloResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResponse
argument_list|(
literal|"Hello!"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|noop
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|NoopRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|NoopResponse
argument_list|>
name|callback
parameter_list|)
block|{
name|callback
operator|.
name|run
argument_list|(
name|NoopResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCoprocessorExec
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up our ping endpoint service on all regions of our test table
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|thread
range|:
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
name|HRegionServer
name|rs
init|=
name|thread
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|rs
operator|.
name|getOnlineRegions
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
control|)
block|{
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|load
argument_list|(
name|PingCoprocessor
operator|.
name|class
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_USER
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Create users for testing, and grant EXEC privileges on our test table
comment|// only to user A
name|User
name|userA
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"UserA"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|User
name|userB
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"UserB"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|userA
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|EXEC
argument_list|)
expr_stmt|;
comment|// Create an action for invoking our test endpoint
name|AccessTestAction
name|execEndpointAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|t
operator|.
name|coprocessorService
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
decl_stmt|;
name|PingCoprocessor
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
operator|.
name|noop
argument_list|(
literal|null
argument_list|,
name|NoopRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// Verify that EXEC permission is checked correctly
name|verifyDenied
argument_list|(
name|execEndpointAction
argument_list|,
name|userB
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|execEndpointAction
argument_list|,
name|userA
argument_list|)
expr_stmt|;
comment|// Now grant EXEC to the entire namespace to user B
name|grantOnNamespace
argument_list|(
name|TEST_UTIL
argument_list|,
name|userB
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|EXEC
argument_list|)
expr_stmt|;
comment|// User B should now be allowed also
name|verifyAllowed
argument_list|(
name|execEndpointAction
argument_list|,
name|userA
argument_list|,
name|userB
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReservedCellTags
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|putWithReservedTag
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|TEST_ROW
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
operator|new
name|Tag
index|[]
block|{
operator|new
name|Tag
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TAG_TYPE
argument_list|,
name|ProtobufUtil
operator|.
name|toUsersAndPermissions
argument_list|(
name|USER_OWNER
operator|.
name|getShortName
argument_list|()
argument_list|,
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|add
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// Current user is superuser
name|verifyAllowed
argument_list|(
name|putWithReservedTag
argument_list|,
name|User
operator|.
name|getCurrent
argument_list|()
argument_list|)
expr_stmt|;
comment|// No other user should be allowed
name|verifyDenied
argument_list|(
name|putWithReservedTag
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|setUserQuotaAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preSetUserQuota
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|setUserTableQuotaAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preSetUserQuota
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|setUserNamespaceQuotaAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preSetUserQuota
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|setTableQuotaAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preSetTableQuota
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|setNamespaceQuotaAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preSetNamespaceQuota
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|setUserQuotaAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|setUserQuotaAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|setUserTableQuotaAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|setUserTableQuotaAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|setUserNamespaceQuotaAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|setUserNamespaceQuotaAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|setTableQuotaAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|setTableQuotaAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|setNamespaceQuotaAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|setNamespaceQuotaAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNamespacePermission
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|namespace
init|=
literal|"testGetNamespacePermission"
decl_stmt|;
name|NamespaceDescriptor
name|desc
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|namespace
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|createNamespace
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|grantOnNamespace
argument_list|(
name|TEST_UTIL
argument_list|,
name|USER_NONE
operator|.
name|getShortName
argument_list|()
argument_list|,
name|namespace
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|UserPermission
argument_list|>
name|namespacePermissions
init|=
name|AccessControlClient
operator|.
name|getUserPermissions
argument_list|(
name|connection
argument_list|,
name|AccessControlLists
operator|.
name|toNamespaceEntry
argument_list|(
name|namespace
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|namespacePermissions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namespacePermissions
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|thw
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseException
argument_list|(
name|thw
argument_list|)
throw|;
block|}
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|deleteNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncatePerms
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|List
argument_list|<
name|UserPermission
argument_list|>
name|existingPerms
init|=
name|AccessControlClient
operator|.
name|getUserPermissions
argument_list|(
name|connection
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|existingPerms
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|existingPerms
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|truncateTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
name|AccessControlClient
operator|.
name|getUserPermissions
argument_list|(
name|connection
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|perms
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|existingPerms
operator|.
name|size
argument_list|()
argument_list|,
name|perms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HBaseIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|PrivilegedAction
argument_list|<
name|List
argument_list|<
name|UserPermission
argument_list|>
argument_list|>
name|getPrivilegedAction
parameter_list|(
specifier|final
name|String
name|regex
parameter_list|)
block|{
return|return
operator|new
name|PrivilegedAction
argument_list|<
name|List
argument_list|<
name|UserPermission
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|UserPermission
argument_list|>
name|run
parameter_list|()
block|{
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|AccessControlClient
operator|.
name|getUserPermissions
argument_list|(
name|connection
argument_list|,
name|regex
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error during call of AccessControlClient.getUserPermissions."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during close of connection."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessControlClientUserPerms
parameter_list|()
throws|throws
name|Exception
block|{
comment|// adding default prefix explicitly as it is not included in the table name.
name|assertEquals
argument_list|(
name|NamespaceDescriptor
operator|.
name|DEFAULT_NAMESPACE_NAME_STR
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|regex
init|=
name|NamespaceDescriptor
operator|.
name|DEFAULT_NAMESPACE_NAME_STR
operator|+
name|TableName
operator|.
name|NAMESPACE_DELIM
operator|+
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
name|User
name|testUserPerms
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"testUserPerms"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testUserPerms
operator|.
name|runAs
argument_list|(
name|getPrivilegedAction
argument_list|(
name|regex
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Grant TABLE ADMIN privs to testUserPerms
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|testUserPerms
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UserPermission
argument_list|>
name|perms
init|=
name|testUserPerms
operator|.
name|runAs
argument_list|(
name|getPrivilegedAction
argument_list|(
name|regex
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|perms
argument_list|)
expr_stmt|;
comment|// USER_ADMIN, USER_CREATE, USER_RW, USER_RO, testUserPerms, USER_ADMIN_CF has row each.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|perms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessControllerUserPermsRegexHandling
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|testRegexHandler
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"testRegexHandling"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|String
name|REGEX_ALL_TABLES
init|=
literal|".*"
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
literal|"testRegex"
decl_stmt|;
specifier|final
name|TableName
name|table1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
comment|// create table in default ns
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|table1
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|htd
argument_list|)
expr_stmt|;
comment|// creating the ns and table in it
name|String
name|ns
init|=
literal|"testNamespace"
decl_stmt|;
name|NamespaceDescriptor
name|desc
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|ns
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|table2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|ns
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|createNamespace
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|htd
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|table2
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|htd
argument_list|)
expr_stmt|;
comment|// Verify that we can read sys-tables
name|String
name|aclTableName
init|=
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|SUPERUSER
operator|.
name|runAs
argument_list|(
name|getPrivilegedAction
argument_list|(
name|aclTableName
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testRegexHandler
operator|.
name|runAs
argument_list|(
name|getPrivilegedAction
argument_list|(
name|aclTableName
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Grant TABLE ADMIN privs to testUserPerms
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testRegexHandler
operator|.
name|runAs
argument_list|(
name|getPrivilegedAction
argument_list|(
name|REGEX_ALL_TABLES
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|testRegexHandler
operator|.
name|getShortName
argument_list|()
argument_list|,
name|table1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|testRegexHandler
operator|.
name|runAs
argument_list|(
name|getPrivilegedAction
argument_list|(
name|REGEX_ALL_TABLES
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|testRegexHandler
operator|.
name|getShortName
argument_list|()
argument_list|,
name|table2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|testRegexHandler
operator|.
name|runAs
argument_list|(
name|getPrivilegedAction
argument_list|(
name|REGEX_ALL_TABLES
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// USER_ADMIN, testUserPerms must have a row each.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|testRegexHandler
operator|.
name|runAs
argument_list|(
name|getPrivilegedAction
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|testRegexHandler
operator|.
name|runAs
argument_list|(
name|getPrivilegedAction
argument_list|(
name|NamespaceDescriptor
operator|.
name|DEFAULT_NAMESPACE_NAME_STR
operator|+
name|TableName
operator|.
name|NAMESPACE_DELIM
operator|+
name|tableName
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|testRegexHandler
operator|.
name|runAs
argument_list|(
name|getPrivilegedAction
argument_list|(
name|ns
operator|+
name|TableName
operator|.
name|NAMESPACE_DELIM
operator|+
name|tableName
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testRegexHandler
operator|.
name|runAs
argument_list|(
name|getPrivilegedAction
argument_list|(
literal|"notMatchingAny"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|deleteTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|table1
argument_list|)
expr_stmt|;
name|deleteTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|table2
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|deleteNamespace
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyAnyCreate
parameter_list|(
name|AccessTestAction
name|action
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyAllowed
argument_list|(
name|action
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_ADMIN_CF
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|action
argument_list|,
name|USER_NONE
argument_list|,
name|USER_RO
argument_list|,
name|USER_RW
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareAndCleanBulkLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|prepareBulkLoadAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|prePrepareBulkLoad
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|cleanupBulkLoadAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preCleanupBulkLoad
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAnyCreate
argument_list|(
name|prepareBulkLoadAction
argument_list|)
expr_stmt|;
name|verifyAnyCreate
argument_list|(
name|cleanupBulkLoadAction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplicateLogEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|replicateLogEntriesAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preReplicateLogEntries
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RSCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|postReplicateLogEntries
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RSCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|replicateLogEntriesAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|replicateLogEntriesAction
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

