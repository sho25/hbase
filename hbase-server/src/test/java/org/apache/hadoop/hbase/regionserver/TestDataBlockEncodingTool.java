begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ArrayBackedTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  *  Test DataBlockEncodingTool.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestDataBlockEncodingTool
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestDataBlockEncodingTool
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ROOT_DIR
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"TestDataBlockEncodingTool"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|static
name|StoreFileWriter
name|sfw
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|testHFile
parameter_list|(
name|String
name|fileName
parameter_list|,
name|boolean
name|useTags
parameter_list|,
name|boolean
name|allTags
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
try|try
block|{
name|createHFileWithTags
argument_list|(
name|path
argument_list|,
name|useTags
argument_list|,
name|allTags
argument_list|)
expr_stmt|;
name|testDataBlockingTool
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|createHFileWithTags
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|useTags
parameter_list|,
name|boolean
name|allTags
parameter_list|)
throws|throws
name|IOException
block|{
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
literal|64
operator|*
literal|1024
argument_list|)
operator|.
name|withIncludesTags
argument_list|(
name|useTags
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|sfw
operator|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|)
operator|.
name|withFilePath
argument_list|(
name|path
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|char
name|d
init|=
literal|'a'
init|;
name|d
operator|<=
literal|'z'
condition|;
name|d
operator|++
control|)
block|{
for|for
control|(
name|char
name|e
init|=
literal|'a'
init|;
name|e
operator|<=
literal|'z'
condition|;
name|e
operator|++
control|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|d
block|,
operator|(
name|byte
operator|)
name|e
block|}
decl_stmt|;
name|KeyValue
name|kv
decl_stmt|;
if|if
condition|(
name|useTags
condition|)
block|{
if|if
condition|(
name|allTags
condition|)
block|{
comment|// Write cells with tags to HFile.
name|Tag
index|[]
name|tags
init|=
operator|new
name|Tag
index|[]
block|{
operator|new
name|ArrayBackedTag
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|b
argument_list|)
argument_list|)
block|,
operator|new
name|ArrayBackedTag
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|b
argument_list|)
argument_list|)
block|}
decl_stmt|;
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|b
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|now
argument_list|,
name|b
argument_list|,
name|tags
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Write half cells with tags and half without tags to HFile.
if|if
condition|(
operator|(
name|e
operator|-
literal|'a'
operator|)
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|b
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|now
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Tag
index|[]
name|tags
init|=
operator|new
name|Tag
index|[]
block|{
operator|new
name|ArrayBackedTag
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|b
argument_list|)
argument_list|)
block|,
operator|new
name|ArrayBackedTag
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|b
argument_list|)
argument_list|)
block|}
decl_stmt|;
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|b
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|now
argument_list|,
name|b
argument_list|,
name|tags
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Write cells without tags to HFile.
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|b
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|now
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|sfw
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
name|sfw
operator|.
name|appendMetadata
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sfw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|testDataBlockingTool
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|int
name|maxKV
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|boolean
name|doVerify
init|=
literal|true
decl_stmt|;
name|boolean
name|doBenchmark
init|=
literal|true
decl_stmt|;
name|String
name|testHFilePath
init|=
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
name|DataBlockEncodingTool
operator|.
name|testCodecs
argument_list|(
name|conf
argument_list|,
name|maxKV
argument_list|,
name|testHFilePath
argument_list|,
name|Compression
operator|.
name|Algorithm
operator|.
name|GZ
operator|.
name|getName
argument_list|()
argument_list|,
name|doBenchmark
argument_list|,
name|doVerify
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHFileAllCellsWithTags
parameter_list|()
throws|throws
name|IOException
block|{
name|testHFile
argument_list|(
literal|"1234567890"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHFileAllCellsWithoutTags
parameter_list|()
throws|throws
name|IOException
block|{
name|testHFile
argument_list|(
literal|"1234567089"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHFileHalfCellsWithTags
parameter_list|()
throws|throws
name|IOException
block|{
name|testHFile
argument_list|(
literal|"1234560789"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

