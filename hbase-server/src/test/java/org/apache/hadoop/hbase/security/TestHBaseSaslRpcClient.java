begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|PasswordCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|TextOutputCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|RealmCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|RealmChoiceCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HBaseSaslRpcClient
operator|.
name|SaslClientCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHBaseSaslRpcClient
block|{
static|static
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.security.krb5.realm"
argument_list|,
literal|"DOMAIN.COM"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.security.krb5.kdc"
argument_list|,
literal|"DOMAIN.COM"
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|final
name|String
name|DEFAULT_USER_NAME
init|=
literal|"principal"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEFAULT_USER_PASSWORD
init|=
literal|"password"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|TestHBaseSaslRpcClient
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|before
parameter_list|()
block|{
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSaslClientCallbackHandler
parameter_list|()
throws|throws
name|UnsupportedCallbackException
block|{
specifier|final
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
init|=
name|createTokenMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DEFAULT_USER_NAME
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|token
operator|.
name|getPassword
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DEFAULT_USER_PASSWORD
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|NameCallback
name|nameCallback
init|=
name|mock
argument_list|(
name|NameCallback
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PasswordCallback
name|passwordCallback
init|=
name|mock
argument_list|(
name|PasswordCallback
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|RealmCallback
name|realmCallback
init|=
name|mock
argument_list|(
name|RealmCallback
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|RealmChoiceCallback
name|realmChoiceCallback
init|=
name|mock
argument_list|(
name|RealmChoiceCallback
operator|.
name|class
argument_list|)
decl_stmt|;
name|Callback
index|[]
name|callbackArray
init|=
block|{
name|nameCallback
block|,
name|passwordCallback
block|,
name|realmCallback
block|,
name|realmChoiceCallback
block|}
decl_stmt|;
specifier|final
name|SaslClientCallbackHandler
name|saslClCallbackHandler
init|=
operator|new
name|SaslClientCallbackHandler
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|saslClCallbackHandler
operator|.
name|handle
argument_list|(
name|callbackArray
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nameCallback
argument_list|)
operator|.
name|setName
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|realmCallback
argument_list|)
operator|.
name|setText
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|passwordCallback
argument_list|)
operator|.
name|setPassword
argument_list|(
name|any
argument_list|(
name|char
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSaslClientCallbackHandlerWithException
parameter_list|()
block|{
specifier|final
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
init|=
name|createTokenMock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DEFAULT_USER_NAME
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|token
operator|.
name|getPassword
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DEFAULT_USER_PASSWORD
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SaslClientCallbackHandler
name|saslClCallbackHandler
init|=
operator|new
name|SaslClientCallbackHandler
argument_list|(
name|token
argument_list|)
decl_stmt|;
try|try
block|{
name|saslClCallbackHandler
operator|.
name|handle
argument_list|(
operator|new
name|Callback
index|[]
block|{
name|mock
argument_list|(
name|TextOutputCallback
operator|.
name|class
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedCallbackException
name|expEx
parameter_list|)
block|{
comment|//expected
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testSaslClientCallbackHandlerWithException error : "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHBaseSaslRpcClientCreation
parameter_list|()
throws|throws
name|Exception
block|{
comment|//creation kerberos principal check section
name|assertFalse
argument_list|(
name|assertSuccessCreationKerberosPrincipal
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|assertSuccessCreationKerberosPrincipal
argument_list|(
literal|"DOMAIN.COM"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|assertSuccessCreationKerberosPrincipal
argument_list|(
literal|"principal/DOMAIN.COM"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertSuccessCreationKerberosPrincipal
argument_list|(
literal|"principal/localhost@DOMAIN.COM"
argument_list|)
argument_list|)
expr_stmt|;
comment|//creation digest principal check section
name|assertFalse
argument_list|(
name|assertSuccessCreationDigestPrincipal
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|assertSuccessCreationDigestPrincipal
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|assertSuccessCreationDigestPrincipal
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|assertSuccessCreationDigestPrincipal
argument_list|(
literal|null
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertSuccessCreationDigestPrincipal
argument_list|(
name|DEFAULT_USER_NAME
argument_list|,
name|DEFAULT_USER_PASSWORD
argument_list|)
argument_list|)
expr_stmt|;
comment|//creation simple principal check section
name|assertFalse
argument_list|(
name|assertSuccessCreationSimplePrincipal
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|assertSuccessCreationSimplePrincipal
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|assertSuccessCreationSimplePrincipal
argument_list|(
name|DEFAULT_USER_NAME
argument_list|,
name|DEFAULT_USER_PASSWORD
argument_list|)
argument_list|)
expr_stmt|;
comment|//exceptions check section
name|assertTrue
argument_list|(
name|assertIOExceptionThenSaslClientIsNull
argument_list|(
name|DEFAULT_USER_NAME
argument_list|,
name|DEFAULT_USER_PASSWORD
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertIOExceptionWhenGetStreamsBeforeConnectCall
argument_list|(
name|DEFAULT_USER_NAME
argument_list|,
name|DEFAULT_USER_PASSWORD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAuthMethodReadWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|assertAuthMethodRead
argument_list|(
name|in
argument_list|,
name|AuthMethod
operator|.
name|SIMPLE
argument_list|)
expr_stmt|;
name|assertAuthMethodRead
argument_list|(
name|in
argument_list|,
name|AuthMethod
operator|.
name|KERBEROS
argument_list|)
expr_stmt|;
name|assertAuthMethodRead
argument_list|(
name|in
argument_list|,
name|AuthMethod
operator|.
name|DIGEST
argument_list|)
expr_stmt|;
name|assertAuthMethodWrite
argument_list|(
name|out
argument_list|,
name|AuthMethod
operator|.
name|SIMPLE
argument_list|)
expr_stmt|;
name|assertAuthMethodWrite
argument_list|(
name|out
argument_list|,
name|AuthMethod
operator|.
name|KERBEROS
argument_list|)
expr_stmt|;
name|assertAuthMethodWrite
argument_list|(
name|out
argument_list|,
name|AuthMethod
operator|.
name|DIGEST
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertAuthMethodRead
parameter_list|(
name|DataInputBuffer
name|in
parameter_list|,
name|AuthMethod
name|authMethod
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|reset
argument_list|(
operator|new
name|byte
index|[]
block|{
name|authMethod
operator|.
name|code
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|authMethod
argument_list|,
name|AuthMethod
operator|.
name|read
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertAuthMethodWrite
parameter_list|(
name|DataOutputBuffer
name|out
parameter_list|,
name|AuthMethod
name|authMethod
parameter_list|)
throws|throws
name|IOException
block|{
name|authMethod
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|authMethod
operator|.
name|code
argument_list|,
name|out
operator|.
name|getData
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|assertIOExceptionWhenGetStreamsBeforeConnectCall
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|inState
init|=
literal|false
decl_stmt|;
name|boolean
name|outState
init|=
literal|false
decl_stmt|;
name|HBaseSaslRpcClient
name|rpcClient
init|=
operator|new
name|HBaseSaslRpcClient
argument_list|(
name|AuthMethod
operator|.
name|DIGEST
argument_list|,
name|createTokenMockWithCredentials
argument_list|(
name|principal
argument_list|,
name|password
argument_list|)
argument_list|,
name|principal
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|SaslClient
name|createDigestSaslClient
parameter_list|(
name|String
index|[]
name|mechanismNames
parameter_list|,
name|String
name|saslDefaultRealm
parameter_list|,
name|CallbackHandler
name|saslClientCallbackHandler
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Mockito
operator|.
name|mock
argument_list|(
name|SaslClient
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SaslClient
name|createKerberosSaslClient
parameter_list|(
name|String
index|[]
name|mechanismNames
parameter_list|,
name|String
name|userFirstPart
parameter_list|,
name|String
name|userSecondPart
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Mockito
operator|.
name|mock
argument_list|(
name|SaslClient
operator|.
name|class
argument_list|)
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|rpcClient
operator|.
name|getInputStream
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|//Sasl authentication exchange hasn't completed yet
name|inState
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
name|rpcClient
operator|.
name|getOutputStream
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|//Sasl authentication exchange hasn't completed yet
name|outState
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|inState
operator|&&
name|outState
return|;
block|}
specifier|private
name|boolean
name|assertIOExceptionThenSaslClientIsNull
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|password
parameter_list|)
block|{
try|try
block|{
operator|new
name|HBaseSaslRpcClient
argument_list|(
name|AuthMethod
operator|.
name|DIGEST
argument_list|,
name|createTokenMockWithCredentials
argument_list|(
name|principal
argument_list|,
name|password
argument_list|)
argument_list|,
name|principal
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|SaslClient
name|createDigestSaslClient
parameter_list|(
name|String
index|[]
name|mechanismNames
parameter_list|,
name|String
name|saslDefaultRealm
parameter_list|,
name|CallbackHandler
name|saslClientCallbackHandler
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|SaslClient
name|createKerberosSaslClient
parameter_list|(
name|String
index|[]
name|mechanismNames
parameter_list|,
name|String
name|userFirstPart
parameter_list|,
name|String
name|userSecondPart
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|private
name|boolean
name|assertSuccessCreationKerberosPrincipal
parameter_list|(
name|String
name|principal
parameter_list|)
block|{
name|HBaseSaslRpcClient
name|rpcClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rpcClient
operator|=
name|createSaslRpcClientForKerberos
argument_list|(
name|principal
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|rpcClient
operator|!=
literal|null
return|;
block|}
specifier|private
name|boolean
name|assertSuccessCreationDigestPrincipal
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|HBaseSaslRpcClient
name|rpcClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rpcClient
operator|=
operator|new
name|HBaseSaslRpcClient
argument_list|(
name|AuthMethod
operator|.
name|DIGEST
argument_list|,
name|createTokenMockWithCredentials
argument_list|(
name|principal
argument_list|,
name|password
argument_list|)
argument_list|,
name|principal
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|rpcClient
operator|!=
literal|null
return|;
block|}
specifier|private
name|boolean
name|assertSuccessCreationSimplePrincipal
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|HBaseSaslRpcClient
name|rpcClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rpcClient
operator|=
name|createSaslRpcClientSimple
argument_list|(
name|principal
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|rpcClient
operator|!=
literal|null
return|;
block|}
specifier|private
name|HBaseSaslRpcClient
name|createSaslRpcClientForKerberos
parameter_list|(
name|String
name|principal
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HBaseSaslRpcClient
argument_list|(
name|AuthMethod
operator|.
name|KERBEROS
argument_list|,
name|createTokenMock
argument_list|()
argument_list|,
name|principal
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|createTokenMockWithCredentials
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
init|=
name|createTokenMock
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|principal
argument_list|)
operator|&&
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|password
argument_list|)
condition|)
block|{
name|when
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DEFAULT_USER_NAME
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|token
operator|.
name|getPassword
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DEFAULT_USER_PASSWORD
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
specifier|private
name|HBaseSaslRpcClient
name|createSaslRpcClientSimple
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HBaseSaslRpcClient
argument_list|(
name|AuthMethod
operator|.
name|SIMPLE
argument_list|,
name|createTokenMock
argument_list|()
argument_list|,
name|principal
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|createTokenMock
parameter_list|()
block|{
return|return
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

