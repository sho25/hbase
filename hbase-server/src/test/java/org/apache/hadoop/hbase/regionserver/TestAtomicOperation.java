begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|fam1
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|fam2
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MultithreadedTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MultithreadedTestUtil
operator|.
name|TestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MultithreadedTestUtil
operator|.
name|TestThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|IsolationLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RowMutations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|VerySlowRegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_comment
comment|/**  * Testing of HRegion.incrementColumnValue, HRegion.increment,  * and HRegion.append  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|VerySlowRegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
comment|// Starts 100 threads
specifier|public
class|class
name|TestAtomicOperation
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAtomicOperation
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
literal|null
decl_stmt|;
specifier|private
name|HBaseTestingUtility
name|TEST_UTIL
init|=
name|HBaseTestingUtility
operator|.
name|createLocalHTU
argument_list|()
decl_stmt|;
comment|// Test names
specifier|static
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|qual1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual1"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|qual2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|qual3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual3"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|value1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|value2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|tableName
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
name|BlockCache
name|bc
init|=
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCacheConfig
argument_list|()
operator|.
name|getBlockCache
argument_list|()
decl_stmt|;
operator|(
operator|(
name|HRegion
operator|)
name|region
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|WAL
name|wal
init|=
operator|(
operator|(
name|HRegion
operator|)
name|region
operator|)
operator|.
name|getWAL
argument_list|()
decl_stmt|;
if|if
condition|(
name|wal
operator|!=
literal|null
condition|)
name|wal
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|bc
operator|!=
literal|null
condition|)
name|bc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// New tests that doesn't spin up a mini cluster but rather just test the
comment|// individual code pieces in the HRegion.
comment|//////////////////////////////////////////////////////////////////////////////
comment|/**    * Test basic append operation.    * More tests in    * @see org.apache.hadoop.hbase.client.TestFromClientSide#testAppend()    */
annotation|@
name|Test
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|IOException
block|{
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
name|String
name|v1
init|=
literal|"Ultimate Answer to the Ultimate Question of Life,"
operator|+
literal|" The Universe, and Everything"
decl_stmt|;
name|String
name|v2
init|=
literal|" is... 42."
decl_stmt|;
name|Append
name|a
init|=
operator|new
name|Append
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|a
operator|.
name|setReturnResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|v1
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|region
operator|.
name|append
argument_list|(
name|a
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|Append
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|v1
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|append
argument_list|(
name|a
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|v1
operator|+
name|v2
argument_list|)
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|v2
operator|+
name|v1
argument_list|)
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qual2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendWithNonExistingFamily
parameter_list|()
throws|throws
name|IOException
block|{
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|v1
init|=
literal|"Value"
decl_stmt|;
specifier|final
name|Append
name|a
init|=
operator|new
name|Append
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|a
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|v1
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
name|qual2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|v1
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|region
operator|.
name|append
argument_list|(
name|a
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Append operation should fail with NoSuchColumnFamilyException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchColumnFamilyException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Append operation should fail with NoSuchColumnFamilyException."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementWithNonExistingFamily
parameter_list|()
throws|throws
name|IOException
block|{
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
specifier|final
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|fam2
argument_list|,
name|qual2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|inc
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
try|try
block|{
name|region
operator|.
name|increment
argument_list|(
name|inc
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchColumnFamilyException
name|e
parameter_list|)
block|{
specifier|final
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
specifier|final
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|fam2
argument_list|,
name|qual2
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Increment operation should fail with NoSuchColumnFamilyException."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test multi-threaded increments.    */
annotation|@
name|Test
specifier|public
name|void
name|testIncrementMultiThreads
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|fast
init|=
literal|true
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test testIncrementMultiThreads"
argument_list|)
expr_stmt|;
comment|// run a with mixed column families (1 and 3 versions)
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|,
name|fam1
argument_list|,
name|fam2
argument_list|)
expr_stmt|;
comment|// Create 100 threads, each will increment by its own quantity. All 100 threads update the
comment|// same row over two column families.
name|int
name|numThreads
init|=
literal|100
decl_stmt|;
name|int
name|incrementsPerThread
init|=
literal|1000
decl_stmt|;
name|Incrementer
index|[]
name|all
init|=
operator|new
name|Incrementer
index|[
name|numThreads
index|]
decl_stmt|;
name|int
name|expectedTotal
init|=
literal|0
decl_stmt|;
comment|// create all threads
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|all
index|[
name|i
index|]
operator|=
operator|new
name|Incrementer
argument_list|(
name|region
argument_list|,
name|i
argument_list|,
name|i
argument_list|,
name|incrementsPerThread
argument_list|)
expr_stmt|;
name|expectedTotal
operator|+=
operator|(
name|i
operator|*
name|incrementsPerThread
operator|)
expr_stmt|;
block|}
comment|// run all threads
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|all
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait for all threads to finish
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|all
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignored"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|assertICV
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|expectedTotal
argument_list|,
name|fast
argument_list|)
expr_stmt|;
name|assertICV
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual2
argument_list|,
name|expectedTotal
operator|*
literal|2
argument_list|,
name|fast
argument_list|)
expr_stmt|;
name|assertICV
argument_list|(
name|row
argument_list|,
name|fam2
argument_list|,
name|qual3
argument_list|,
name|expectedTotal
operator|*
literal|3
argument_list|,
name|fast
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testIncrementMultiThreads successfully verified that total is "
operator|+
name|expectedTotal
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertICV
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|familiy
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|amount
parameter_list|,
name|boolean
name|fast
parameter_list|)
throws|throws
name|IOException
block|{
comment|// run a get and see?
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|fast
condition|)
name|get
operator|.
name|setIsolationLevel
argument_list|(
name|IsolationLevel
operator|.
name|READ_UNCOMMITTED
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|familiy
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|kv
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|long
name|r
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|amount
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initHRegion
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|String
name|callingMethod
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|callingMethod
argument_list|,
literal|null
argument_list|,
name|families
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initHRegion
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|String
name|callingMethod
parameter_list|,
name|int
index|[]
name|maxVersions
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
name|maxVersions
operator|!=
literal|null
condition|?
name|maxVersions
index|[
name|i
operator|++
index|]
else|:
literal|1
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|region
operator|=
name|TEST_UTIL
operator|.
name|createLocalHRegion
argument_list|(
name|info
argument_list|,
name|htd
argument_list|)
expr_stmt|;
block|}
comment|/**    * A thread that makes increment calls always on the same row, this.row against two column    * families on this row.    */
specifier|public
specifier|static
class|class
name|Incrementer
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|Region
name|region
decl_stmt|;
specifier|private
specifier|final
name|int
name|numIncrements
decl_stmt|;
specifier|private
specifier|final
name|int
name|amount
decl_stmt|;
specifier|public
name|Incrementer
parameter_list|(
name|Region
name|region
parameter_list|,
name|int
name|threadNumber
parameter_list|,
name|int
name|amount
parameter_list|,
name|int
name|numIncrements
parameter_list|)
block|{
name|super
argument_list|(
literal|"Incrementer."
operator|+
name|threadNumber
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|numIncrements
operator|=
name|numIncrements
expr_stmt|;
name|this
operator|.
name|amount
operator|=
name|amount
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIncrements
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|amount
argument_list|)
expr_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qual2
argument_list|,
name|amount
operator|*
literal|2
argument_list|)
expr_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|fam2
argument_list|,
name|qual3
argument_list|,
name|amount
operator|*
literal|3
argument_list|)
expr_stmt|;
name|inc
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|increment
argument_list|(
name|inc
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
argument_list|)
operator|*
literal|2
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qual2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|fam2
argument_list|,
name|qual3
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
argument_list|)
operator|*
literal|3
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|fam2
argument_list|,
name|qual3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
argument_list|)
operator|*
literal|2
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qual2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|fam1Increment
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
argument_list|)
operator|*
literal|3
decl_stmt|;
name|long
name|fam2Increment
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|fam2
argument_list|,
name|qual3
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"fam1="
operator|+
name|fam1Increment
operator|+
literal|", fam2="
operator|+
name|fam2Increment
argument_list|,
name|fam1Increment
argument_list|,
name|fam2Increment
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendMultiThreads
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test testAppendMultiThreads"
argument_list|)
expr_stmt|;
comment|// run a with mixed column families (1 and 3 versions)
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|,
name|fam1
argument_list|,
name|fam2
argument_list|)
expr_stmt|;
name|int
name|numThreads
init|=
literal|100
decl_stmt|;
name|int
name|opsPerThread
init|=
literal|100
decl_stmt|;
name|AtomicOperation
index|[]
name|all
init|=
operator|new
name|AtomicOperation
index|[
name|numThreads
index|]
decl_stmt|;
specifier|final
name|byte
index|[]
name|val
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|}
decl_stmt|;
name|AtomicInteger
name|failures
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// create all threads
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|all
index|[
name|i
index|]
operator|=
operator|new
name|AtomicOperation
argument_list|(
name|region
argument_list|,
name|opsPerThread
argument_list|,
literal|null
argument_list|,
name|failures
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOps
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Append
name|a
init|=
operator|new
name|Append
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|a
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual2
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
name|qual3
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|region
operator|.
name|append
argument_list|(
name|a
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
operator|.
name|length
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qual2
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
operator|.
name|length
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|fam2
argument_list|,
name|qual3
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|failures
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
block|}
comment|// run all threads
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|all
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait for all threads to finish
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|all
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|failures
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
operator|.
name|length
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qual2
argument_list|)
operator|.
name|length
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|fam2
argument_list|,
name|qual3
argument_list|)
operator|.
name|length
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test multi-threaded row mutations.    */
annotation|@
name|Test
specifier|public
name|void
name|testRowMutationMultiThreads
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test testRowMutationMultiThreads"
argument_list|)
expr_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
comment|// create 10 threads, each will alternate between adding and
comment|// removing a column
name|int
name|numThreads
init|=
literal|10
decl_stmt|;
name|int
name|opsPerThread
init|=
literal|250
decl_stmt|;
name|AtomicOperation
index|[]
name|all
init|=
operator|new
name|AtomicOperation
index|[
name|numThreads
index|]
decl_stmt|;
name|AtomicLong
name|timeStamps
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicInteger
name|failures
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// create all threads
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|all
index|[
name|i
index|]
operator|=
operator|new
name|AtomicOperation
argument_list|(
name|region
argument_list|,
name|opsPerThread
argument_list|,
name|timeStamps
argument_list|,
name|failures
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|op
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOps
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
comment|// throw in some flushes
if|if
condition|(
name|i
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
synchronized|synchronized
init|(
name|region
init|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"flushing"
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|region
operator|.
name|compact
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|long
name|ts
init|=
name|timeStamps
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|RowMutations
name|rm
init|=
operator|new
name|RowMutations
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
condition|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|rm
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|fam1
argument_list|,
name|qual2
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|d
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|rm
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|d
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|rm
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qual2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|rm
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|mutateRow
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|op
operator|^=
literal|true
expr_stmt|;
comment|// check: should always see exactly one column
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|failures
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|failures
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
block|}
comment|// run all threads
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|all
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait for all threads to finish
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|all
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|failures
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test multi-threaded region mutations.    */
annotation|@
name|Test
specifier|public
name|void
name|testMultiRowMutationMultiThreads
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test testMultiRowMutationMultiThreads"
argument_list|)
expr_stmt|;
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
comment|// create 10 threads, each will alternate between adding and
comment|// removing a column
name|int
name|numThreads
init|=
literal|10
decl_stmt|;
name|int
name|opsPerThread
init|=
literal|250
decl_stmt|;
name|AtomicOperation
index|[]
name|all
init|=
operator|new
name|AtomicOperation
index|[
name|numThreads
index|]
decl_stmt|;
name|AtomicLong
name|timeStamps
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicInteger
name|failures
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|rowsToLock
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|row
argument_list|,
name|row2
argument_list|)
decl_stmt|;
comment|// create all threads
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|all
index|[
name|i
index|]
operator|=
operator|new
name|AtomicOperation
argument_list|(
name|region
argument_list|,
name|opsPerThread
argument_list|,
name|timeStamps
argument_list|,
name|failures
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|op
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOps
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
comment|// throw in some flushes
if|if
condition|(
name|i
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
synchronized|synchronized
init|(
name|region
init|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"flushing"
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|region
operator|.
name|compact
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|long
name|ts
init|=
name|timeStamps
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Mutation
argument_list|>
name|mrm
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
condition|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|mrm
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|d
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|mrm
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|row2
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|d
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|mrm
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|mrm
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|mutateRowsWithLocks
argument_list|(
name|mrm
argument_list|,
name|rowsToLock
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
expr_stmt|;
name|op
operator|^=
literal|true
expr_stmt|;
comment|// check: should always see exactly one column
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|RegionScanner
name|rs
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|(
name|r
argument_list|)
condition|)
empty_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|failures
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|failures
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
block|}
comment|// run all threads
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|all
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// wait for all threads to finish
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|all
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|failures
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|AtomicOperation
extends|extends
name|Thread
block|{
specifier|protected
specifier|final
name|Region
name|region
decl_stmt|;
specifier|protected
specifier|final
name|int
name|numOps
decl_stmt|;
specifier|protected
specifier|final
name|AtomicLong
name|timeStamps
decl_stmt|;
specifier|protected
specifier|final
name|AtomicInteger
name|failures
decl_stmt|;
specifier|protected
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|public
name|AtomicOperation
parameter_list|(
name|Region
name|region
parameter_list|,
name|int
name|numOps
parameter_list|,
name|AtomicLong
name|timeStamps
parameter_list|,
name|AtomicInteger
name|failures
parameter_list|)
block|{
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|numOps
operator|=
name|numOps
expr_stmt|;
name|this
operator|.
name|timeStamps
operator|=
name|timeStamps
expr_stmt|;
name|this
operator|.
name|failures
operator|=
name|failures
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
enum|enum
name|TestStep
block|{
name|INIT
block|,
comment|// initial put of 10 to set value of the cell
name|PUT_STARTED
block|,
comment|// began doing a put of 50 to cell
name|PUT_COMPLETED
block|,
comment|// put complete (released RowLock, but may not have advanced MVCC).
name|CHECKANDPUT_STARTED
block|,
comment|// began checkAndPut: if 10 -> 11
name|CHECKANDPUT_COMPLETED
comment|// completed checkAndPut
comment|// NOTE: at the end of these steps, the value of the cell should be 50, not 11!
block|}
specifier|private
specifier|static
specifier|volatile
name|TestStep
name|testStep
init|=
name|TestStep
operator|.
name|INIT
decl_stmt|;
specifier|private
specifier|final
name|String
name|family
init|=
literal|"f1"
decl_stmt|;
comment|/**    * Test written as a verifier for HBASE-7051, CheckAndPut should properly read    * MVCC.     *     * Moved into TestAtomicOperation from its original location, TestHBase7051    */
annotation|@
name|Test
specifier|public
name|void
name|testPutAndCheckAndPutInParallel
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|tableName
init|=
literal|"testPutAndCheckAndPut"
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|HConstants
operator|.
name|REGION_IMPL
argument_list|,
name|MockHRegion
operator|.
name|class
argument_list|,
name|HeapSize
operator|.
name|class
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|TEST_UTIL
operator|.
name|createLocalHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Put
index|[]
name|puts
init|=
operator|new
name|Put
index|[
literal|1
index|]
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|puts
index|[
literal|0
index|]
operator|=
name|put
expr_stmt|;
name|region
operator|.
name|batchMutate
argument_list|(
name|puts
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
expr_stmt|;
name|MultithreadedTestUtil
operator|.
name|TestContext
name|ctx
init|=
operator|new
name|MultithreadedTestUtil
operator|.
name|TestContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|addThread
argument_list|(
operator|new
name|PutThread
argument_list|(
name|ctx
argument_list|,
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|addThread
argument_list|(
operator|new
name|CheckAndPutThread
argument_list|(
name|ctx
argument_list|,
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|startThreads
argument_list|()
expr_stmt|;
while|while
condition|(
name|testStep
operator|!=
name|TestStep
operator|.
name|CHECKANDPUT_COMPLETED
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|RegionScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|ScannerContext
name|scannerContext
init|=
name|ScannerContext
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBatchLimit
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|,
name|scannerContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|keyValue
range|:
name|results
control|)
block|{
name|assertEquals
argument_list|(
literal|"50"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|keyValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|PutThread
extends|extends
name|TestThread
block|{
specifier|private
name|Region
name|region
decl_stmt|;
name|PutThread
parameter_list|(
name|TestContext
name|ctx
parameter_list|,
name|Region
name|region
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
block|}
specifier|public
name|void
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
index|[]
name|puts
init|=
operator|new
name|Put
index|[
literal|1
index|]
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"50"
argument_list|)
argument_list|)
expr_stmt|;
name|puts
index|[
literal|0
index|]
operator|=
name|put
expr_stmt|;
name|testStep
operator|=
name|TestStep
operator|.
name|PUT_STARTED
expr_stmt|;
name|region
operator|.
name|batchMutate
argument_list|(
name|puts
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|CheckAndPutThread
extends|extends
name|TestThread
block|{
specifier|private
name|Region
name|region
decl_stmt|;
name|CheckAndPutThread
parameter_list|(
name|TestContext
name|ctx
parameter_list|,
name|Region
name|region
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
block|}
specifier|public
name|void
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
index|[]
name|puts
init|=
operator|new
name|Put
index|[
literal|1
index|]
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"11"
argument_list|)
argument_list|)
expr_stmt|;
name|puts
index|[
literal|0
index|]
operator|=
name|put
expr_stmt|;
while|while
condition|(
name|testStep
operator|!=
name|TestStep
operator|.
name|PUT_COMPLETED
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|testStep
operator|=
name|TestStep
operator|.
name|CHECKANDPUT_STARTED
expr_stmt|;
name|region
operator|.
name|checkAndMutate
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"10"
argument_list|)
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testStep
operator|=
name|TestStep
operator|.
name|CHECKANDPUT_COMPLETED
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MockHRegion
extends|extends
name|HRegion
block|{
specifier|public
name|MockHRegion
parameter_list|(
name|Path
name|tableDir
parameter_list|,
name|WAL
name|log
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
name|RegionServerServices
name|rsServices
parameter_list|)
block|{
name|super
argument_list|(
name|tableDir
argument_list|,
name|log
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|regionInfo
argument_list|,
name|htd
argument_list|,
name|rsServices
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RowLock
name|getRowLockInternal
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
name|boolean
name|readLock
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|testStep
operator|==
name|TestStep
operator|.
name|CHECKANDPUT_STARTED
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|WrappedRowLock
argument_list|(
name|super
operator|.
name|getRowLockInternal
argument_list|(
name|row
argument_list|,
name|readLock
argument_list|)
argument_list|)
return|;
block|}
specifier|public
class|class
name|WrappedRowLock
implements|implements
name|RowLock
block|{
specifier|private
specifier|final
name|RowLock
name|rowLock
decl_stmt|;
specifier|private
name|WrappedRowLock
parameter_list|(
name|RowLock
name|rowLock
parameter_list|)
block|{
name|this
operator|.
name|rowLock
operator|=
name|rowLock
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|release
parameter_list|()
block|{
if|if
condition|(
name|testStep
operator|==
name|TestStep
operator|.
name|INIT
condition|)
block|{
name|this
operator|.
name|rowLock
operator|.
name|release
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|testStep
operator|==
name|TestStep
operator|.
name|PUT_STARTED
condition|)
block|{
try|try
block|{
name|testStep
operator|=
name|TestStep
operator|.
name|PUT_COMPLETED
expr_stmt|;
name|this
operator|.
name|rowLock
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// put has been written to the memstore and the row lock has been released, but the
comment|// MVCC has not been advanced.  Prior to fixing HBASE-7051, the following order of
comment|// operations would cause the non-atomicity to show up:
comment|// 1) Put releases row lock (where we are now)
comment|// 2) CheckAndPut grabs row lock and reads the value prior to the put (10)
comment|//    because the MVCC has not advanced
comment|// 3) Put advances MVCC
comment|// So, in order to recreate this order, we wait for the checkAndPut to grab the rowLock
comment|// (see below), and then wait some more to give the checkAndPut time to read the old
comment|// value.
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|testStep
operator|==
name|TestStep
operator|.
name|CHECKANDPUT_STARTED
condition|)
block|{
name|this
operator|.
name|rowLock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

