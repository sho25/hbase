begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ScheduledChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|StartMiniClusterOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|BalancerChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|ClusterStatusChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
operator|.
name|HFileCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
operator|.
name|LogCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
operator|.
name|ReplicationBarrierCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|normalizer
operator|.
name|RegionNormalizerChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Tests to validate if HMaster default chores are scheduled  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMasterChoreScheduled
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestMasterChoreScheduled
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HMaster
name|hMaster
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|MockHMaster
extends|extends
name|HMaster
block|{
specifier|public
name|MockHMaster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
name|StartMiniClusterOption
operator|.
name|builder
argument_list|()
operator|.
name|numRegionServers
argument_list|(
literal|1
argument_list|)
operator|.
name|masterClass
argument_list|(
name|TestCloseAnOpeningRegion
operator|.
name|MockHMaster
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|hMaster
operator|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultScheduledChores
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test if logCleaner chore is scheduled by default in HMaster init
name|TestChoreField
argument_list|<
name|LogCleaner
argument_list|>
name|logCleanerTestChoreField
init|=
operator|new
name|TestChoreField
argument_list|<>
argument_list|()
decl_stmt|;
name|LogCleaner
name|logCleaner
init|=
name|logCleanerTestChoreField
operator|.
name|getChoreObj
argument_list|(
literal|"logCleaner"
argument_list|)
decl_stmt|;
name|logCleanerTestChoreField
operator|.
name|testIfChoreScheduled
argument_list|(
name|logCleaner
argument_list|)
expr_stmt|;
comment|// test if hfileCleaner chore is scheduled by default in HMaster init
name|TestChoreField
argument_list|<
name|HFileCleaner
argument_list|>
name|hFileCleanerTestChoreField
init|=
operator|new
name|TestChoreField
argument_list|<>
argument_list|()
decl_stmt|;
name|HFileCleaner
name|hFileCleaner
init|=
name|hFileCleanerTestChoreField
operator|.
name|getChoreObj
argument_list|(
literal|"hfileCleaner"
argument_list|)
decl_stmt|;
name|hFileCleanerTestChoreField
operator|.
name|testIfChoreScheduled
argument_list|(
name|hFileCleaner
argument_list|)
expr_stmt|;
comment|// test if replicationBarrierCleaner chore is scheduled by default in HMaster init
name|TestChoreField
argument_list|<
name|ReplicationBarrierCleaner
argument_list|>
name|replicationBarrierCleanerTestChoreField
init|=
operator|new
name|TestChoreField
argument_list|<>
argument_list|()
decl_stmt|;
name|ReplicationBarrierCleaner
name|replicationBarrierCleaner
init|=
name|replicationBarrierCleanerTestChoreField
operator|.
name|getChoreObj
argument_list|(
literal|"replicationBarrierCleaner"
argument_list|)
decl_stmt|;
name|replicationBarrierCleanerTestChoreField
operator|.
name|testIfChoreScheduled
argument_list|(
name|replicationBarrierCleaner
argument_list|)
expr_stmt|;
comment|// test if clusterStatusChore chore is scheduled by default in HMaster init
name|TestChoreField
argument_list|<
name|ClusterStatusChore
argument_list|>
name|clusterStatusChoreTestChoreField
init|=
operator|new
name|TestChoreField
argument_list|<>
argument_list|()
decl_stmt|;
name|ClusterStatusChore
name|clusterStatusChore
init|=
name|clusterStatusChoreTestChoreField
operator|.
name|getChoreObj
argument_list|(
literal|"clusterStatusChore"
argument_list|)
decl_stmt|;
name|clusterStatusChoreTestChoreField
operator|.
name|testIfChoreScheduled
argument_list|(
name|clusterStatusChore
argument_list|)
expr_stmt|;
comment|// test if balancerChore chore is scheduled by default in HMaster init
name|TestChoreField
argument_list|<
name|BalancerChore
argument_list|>
name|balancerChoreTestChoreField
init|=
operator|new
name|TestChoreField
argument_list|<>
argument_list|()
decl_stmt|;
name|BalancerChore
name|balancerChore
init|=
name|balancerChoreTestChoreField
operator|.
name|getChoreObj
argument_list|(
literal|"balancerChore"
argument_list|)
decl_stmt|;
name|balancerChoreTestChoreField
operator|.
name|testIfChoreScheduled
argument_list|(
name|balancerChore
argument_list|)
expr_stmt|;
comment|// test if normalizerChore chore is scheduled by default in HMaster init
name|TestChoreField
argument_list|<
name|RegionNormalizerChore
argument_list|>
name|regionNormalizerChoreTestChoreField
init|=
operator|new
name|TestChoreField
argument_list|<>
argument_list|()
decl_stmt|;
name|RegionNormalizerChore
name|regionNormalizerChore
init|=
name|regionNormalizerChoreTestChoreField
operator|.
name|getChoreObj
argument_list|(
literal|"normalizerChore"
argument_list|)
decl_stmt|;
name|regionNormalizerChoreTestChoreField
operator|.
name|testIfChoreScheduled
argument_list|(
name|regionNormalizerChore
argument_list|)
expr_stmt|;
comment|// test if catalogJanitorChore chore is scheduled by default in HMaster init
name|TestChoreField
argument_list|<
name|CatalogJanitor
argument_list|>
name|catalogJanitorTestChoreField
init|=
operator|new
name|TestChoreField
argument_list|<>
argument_list|()
decl_stmt|;
name|CatalogJanitor
name|catalogJanitor
init|=
name|catalogJanitorTestChoreField
operator|.
name|getChoreObj
argument_list|(
literal|"catalogJanitorChore"
argument_list|)
decl_stmt|;
name|catalogJanitorTestChoreField
operator|.
name|testIfChoreScheduled
argument_list|(
name|catalogJanitor
argument_list|)
expr_stmt|;
comment|// test if hbckChore chore is scheduled by default in HMaster init
name|TestChoreField
argument_list|<
name|HbckChore
argument_list|>
name|hbckChoreTestChoreField
init|=
operator|new
name|TestChoreField
argument_list|<>
argument_list|()
decl_stmt|;
name|HbckChore
name|hbckChore
init|=
name|hbckChoreTestChoreField
operator|.
name|getChoreObj
argument_list|(
literal|"hbckChore"
argument_list|)
decl_stmt|;
name|hbckChoreTestChoreField
operator|.
name|testIfChoreScheduled
argument_list|(
name|hbckChore
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|TestChoreField
parameter_list|<
name|E
extends|extends
name|ScheduledChore
parameter_list|>
block|{
specifier|private
name|E
name|getChoreObj
parameter_list|(
name|String
name|fieldName
parameter_list|)
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|Field
name|masterField
init|=
name|HMaster
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|masterField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|E
name|choreFieldVal
init|=
operator|(
name|E
operator|)
name|masterField
operator|.
name|get
argument_list|(
name|hMaster
argument_list|)
decl_stmt|;
return|return
name|choreFieldVal
return|;
block|}
specifier|private
name|void
name|testIfChoreScheduled
parameter_list|(
name|E
name|choreObj
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|choreObj
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hMaster
operator|.
name|getChoreService
argument_list|()
operator|.
name|isChoreScheduled
argument_list|(
name|choreObj
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

