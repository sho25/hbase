begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * Test the {@link RegionMergeTransaction} class against two HRegions (as  * opposed to running cluster).  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestRegionMergeTransaction
block|{
specifier|private
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Path
name|testdir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|HRegion
name|region_a
decl_stmt|;
specifier|private
name|HRegion
name|region_b
decl_stmt|;
specifier|private
name|HRegion
name|region_c
decl_stmt|;
specifier|private
name|HLog
name|wal
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
comment|// Start rows of region_a,region_b,region_c
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|STARTROW_A
init|=
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'a'
block|,
literal|'a'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|STARTROW_B
init|=
operator|new
name|byte
index|[]
block|{
literal|'g'
block|,
literal|'g'
block|,
literal|'g'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|STARTROW_C
init|=
operator|new
name|byte
index|[]
block|{
literal|'w'
block|,
literal|'w'
block|,
literal|'w'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ENDROW
init|=
operator|new
name|byte
index|[]
block|{
literal|'{'
block|,
literal|'{'
block|,
literal|'{'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CF
init|=
name|HConstants
operator|.
name|CATALOG_FAMILY
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|this
operator|.
name|testdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|wal
operator|=
name|HLogFactory
operator|.
name|createHLog
argument_list|(
name|fs
argument_list|,
name|this
operator|.
name|testdir
argument_list|,
literal|"logs"
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|region_a
operator|=
name|createRegion
argument_list|(
name|this
operator|.
name|testdir
argument_list|,
name|this
operator|.
name|wal
argument_list|,
name|STARTROW_A
argument_list|,
name|STARTROW_B
argument_list|)
expr_stmt|;
name|this
operator|.
name|region_b
operator|=
name|createRegion
argument_list|(
name|this
operator|.
name|testdir
argument_list|,
name|this
operator|.
name|wal
argument_list|,
name|STARTROW_B
argument_list|,
name|STARTROW_C
argument_list|)
expr_stmt|;
name|this
operator|.
name|region_c
operator|=
name|createRegion
argument_list|(
name|this
operator|.
name|testdir
argument_list|,
name|this
operator|.
name|wal
argument_list|,
name|STARTROW_C
argument_list|,
name|ENDROW
argument_list|)
expr_stmt|;
assert|assert
name|region_a
operator|!=
literal|null
operator|&&
name|region_b
operator|!=
literal|null
operator|&&
name|region_c
operator|!=
literal|null
assert|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.testing.nocluster"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|HRegion
name|region
range|:
operator|new
name|HRegion
index|[]
block|{
name|region_a
block|,
name|region_b
block|,
name|region_c
block|}
control|)
block|{
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
operator|!
name|region
operator|.
name|isClosed
argument_list|()
condition|)
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getRegionDir
argument_list|()
argument_list|)
operator|&&
operator|!
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getRegionDir
argument_list|()
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed deleting of "
operator|+
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getRegionDir
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|wal
operator|!=
literal|null
condition|)
name|this
operator|.
name|wal
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|this
operator|.
name|testdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test straight prepare works. Tries to merge on {@link #region_a} and    * {@link #region_b}    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testPrepare
parameter_list|()
throws|throws
name|IOException
block|{
name|prepareOnGoodRegions
argument_list|()
expr_stmt|;
block|}
specifier|private
name|RegionMergeTransaction
name|prepareOnGoodRegions
parameter_list|()
throws|throws
name|IOException
block|{
name|RegionMergeTransaction
name|mt
init|=
operator|new
name|RegionMergeTransaction
argument_list|(
name|region_a
argument_list|,
name|region_b
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RegionMergeTransaction
name|spyMT
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|mt
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|spyMT
argument_list|)
operator|.
name|hasMergeQualifierInMeta
argument_list|(
literal|null
argument_list|,
name|region_a
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|spyMT
argument_list|)
operator|.
name|hasMergeQualifierInMeta
argument_list|(
literal|null
argument_list|,
name|region_b
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|spyMT
operator|.
name|prepare
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|spyMT
return|;
block|}
comment|/**    * Test merging the same region    */
annotation|@
name|Test
specifier|public
name|void
name|testPrepareWithSameRegion
parameter_list|()
throws|throws
name|IOException
block|{
name|RegionMergeTransaction
name|mt
init|=
operator|new
name|RegionMergeTransaction
argument_list|(
name|this
operator|.
name|region_a
argument_list|,
name|this
operator|.
name|region_a
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"should not merge the same region even if it is forcible "
argument_list|,
name|mt
operator|.
name|prepare
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test merging two not adjacent regions under a common merge    */
annotation|@
name|Test
specifier|public
name|void
name|testPrepareWithRegionsNotAdjacent
parameter_list|()
throws|throws
name|IOException
block|{
name|RegionMergeTransaction
name|mt
init|=
operator|new
name|RegionMergeTransaction
argument_list|(
name|this
operator|.
name|region_a
argument_list|,
name|this
operator|.
name|region_c
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"should not merge two regions if they are adjacent except it is forcible"
argument_list|,
name|mt
operator|.
name|prepare
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test merging two not adjacent regions under a compulsory merge    */
annotation|@
name|Test
specifier|public
name|void
name|testPrepareWithRegionsNotAdjacentUnderCompulsory
parameter_list|()
throws|throws
name|IOException
block|{
name|RegionMergeTransaction
name|mt
init|=
operator|new
name|RegionMergeTransaction
argument_list|(
name|region_a
argument_list|,
name|region_c
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RegionMergeTransaction
name|spyMT
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|mt
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|spyMT
argument_list|)
operator|.
name|hasMergeQualifierInMeta
argument_list|(
literal|null
argument_list|,
name|region_a
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|spyMT
argument_list|)
operator|.
name|hasMergeQualifierInMeta
argument_list|(
literal|null
argument_list|,
name|region_c
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Since focible is true, should merge two regions even if they are not adjacent"
argument_list|,
name|spyMT
operator|.
name|prepare
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Pass a reference store    */
annotation|@
name|Test
specifier|public
name|void
name|testPrepareWithRegionsWithReference
parameter_list|()
throws|throws
name|IOException
block|{
name|HStore
name|storeMock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|storeMock
operator|.
name|hasReferences
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|storeMock
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"cf"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|storeMock
operator|.
name|close
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableList
operator|.
expr|<
name|StoreFile
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|region_a
operator|.
name|stores
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|storeMock
argument_list|)
expr_stmt|;
name|RegionMergeTransaction
name|mt
init|=
operator|new
name|RegionMergeTransaction
argument_list|(
name|this
operator|.
name|region_a
argument_list|,
name|this
operator|.
name|region_b
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"a region should not be mergeable if it has instances of store file references"
argument_list|,
name|mt
operator|.
name|prepare
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareWithClosedRegion
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|region_a
operator|.
name|close
argument_list|()
expr_stmt|;
name|RegionMergeTransaction
name|mt
init|=
operator|new
name|RegionMergeTransaction
argument_list|(
name|this
operator|.
name|region_a
argument_list|,
name|this
operator|.
name|region_b
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|mt
operator|.
name|prepare
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test merging regions which are merged regions and has reference in META all    * the same    */
annotation|@
name|Test
specifier|public
name|void
name|testPrepareWithRegionsWithMergeReference
parameter_list|()
throws|throws
name|IOException
block|{
name|RegionMergeTransaction
name|mt
init|=
operator|new
name|RegionMergeTransaction
argument_list|(
name|region_a
argument_list|,
name|region_b
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RegionMergeTransaction
name|spyMT
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|mt
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|spyMT
argument_list|)
operator|.
name|hasMergeQualifierInMeta
argument_list|(
literal|null
argument_list|,
name|region_a
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|spyMT
argument_list|)
operator|.
name|hasMergeQualifierInMeta
argument_list|(
literal|null
argument_list|,
name|region_b
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|spyMT
operator|.
name|prepare
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWholesomeMerge
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|rowCountOfRegionA
init|=
name|loadRegion
argument_list|(
name|this
operator|.
name|region_a
argument_list|,
name|CF
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|int
name|rowCountOfRegionB
init|=
name|loadRegion
argument_list|(
name|this
operator|.
name|region_b
argument_list|,
name|CF
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rowCountOfRegionA
operator|>
literal|0
operator|&&
name|rowCountOfRegionB
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowCountOfRegionA
argument_list|,
name|countRows
argument_list|(
name|this
operator|.
name|region_a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowCountOfRegionB
argument_list|,
name|countRows
argument_list|(
name|this
operator|.
name|region_b
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start transaction.
name|RegionMergeTransaction
name|mt
init|=
name|prepareOnGoodRegions
argument_list|()
decl_stmt|;
comment|// Run the execute. Look at what it returns.
name|Server
name|mockServer
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockServer
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|HRegion
name|mergedRegion
init|=
name|mt
operator|.
name|execute
argument_list|(
name|mockServer
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Do some assertions about execution.
name|assertTrue
argument_list|(
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|mt
operator|.
name|getMergesDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert region_a and region_b is closed.
name|assertTrue
argument_list|(
name|region_a
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|region_b
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert mergedir is empty -- because its content will have been moved out
comment|// to be under the merged region dirs.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|fs
operator|.
name|listStatus
argument_list|(
name|mt
operator|.
name|getMergesDir
argument_list|()
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Check merged region have correct key span.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|this
operator|.
name|region_a
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|mergedRegion
operator|.
name|getStartKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|this
operator|.
name|region_b
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|mergedRegion
operator|.
name|getEndKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Count rows. merged region are already open
try|try
block|{
name|int
name|mergedRegionRowCount
init|=
name|countRows
argument_list|(
name|mergedRegion
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|rowCountOfRegionA
operator|+
name|rowCountOfRegionB
operator|)
argument_list|,
name|mergedRegionRowCount
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|mergedRegion
argument_list|)
expr_stmt|;
block|}
comment|// Assert the write lock is no longer held on region_a and region_b
name|assertTrue
argument_list|(
operator|!
name|this
operator|.
name|region_a
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|this
operator|.
name|region_b
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRollback
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|rowCountOfRegionA
init|=
name|loadRegion
argument_list|(
name|this
operator|.
name|region_a
argument_list|,
name|CF
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|int
name|rowCountOfRegionB
init|=
name|loadRegion
argument_list|(
name|this
operator|.
name|region_b
argument_list|,
name|CF
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rowCountOfRegionA
operator|>
literal|0
operator|&&
name|rowCountOfRegionB
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowCountOfRegionA
argument_list|,
name|countRows
argument_list|(
name|this
operator|.
name|region_a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowCountOfRegionB
argument_list|,
name|countRows
argument_list|(
name|this
operator|.
name|region_b
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start transaction.
name|RegionMergeTransaction
name|mt
init|=
name|prepareOnGoodRegions
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mt
operator|.
name|createMergedRegionFromMerges
argument_list|(
name|region_a
argument_list|,
name|region_b
argument_list|,
name|mt
operator|.
name|getMergedRegionInfo
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|MockedFailedMergedRegionCreation
argument_list|()
argument_list|)
expr_stmt|;
comment|// Run the execute. Look at what it returns.
name|boolean
name|expectedException
init|=
literal|false
decl_stmt|;
name|Server
name|mockServer
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockServer
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|mt
operator|.
name|execute
argument_list|(
name|mockServer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MockedFailedMergedRegionCreation
name|e
parameter_list|)
block|{
name|expectedException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|expectedException
argument_list|)
expr_stmt|;
comment|// Run rollback
name|assertTrue
argument_list|(
name|mt
operator|.
name|rollback
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert I can scan region_a and region_b.
name|int
name|rowCountOfRegionA2
init|=
name|countRows
argument_list|(
name|this
operator|.
name|region_a
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rowCountOfRegionA
argument_list|,
name|rowCountOfRegionA2
argument_list|)
expr_stmt|;
name|int
name|rowCountOfRegionB2
init|=
name|countRows
argument_list|(
name|this
operator|.
name|region_b
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rowCountOfRegionB
argument_list|,
name|rowCountOfRegionB2
argument_list|)
expr_stmt|;
comment|// Assert rollback cleaned up stuff in fs
name|assertTrue
argument_list|(
operator|!
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|this
operator|.
name|testdir
argument_list|,
name|mt
operator|.
name|getMergedRegionInfo
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|this
operator|.
name|region_a
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|this
operator|.
name|region_b
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now retry the merge but do not throw an exception this time.
name|assertTrue
argument_list|(
name|mt
operator|.
name|prepare
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
name|mergedRegion
init|=
name|mt
operator|.
name|execute
argument_list|(
name|mockServer
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Count rows. daughters are already open
comment|// Count rows. merged region are already open
try|try
block|{
name|int
name|mergedRegionRowCount
init|=
name|countRows
argument_list|(
name|mergedRegion
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|rowCountOfRegionA
operator|+
name|rowCountOfRegionB
operator|)
argument_list|,
name|mergedRegionRowCount
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|mergedRegion
argument_list|)
expr_stmt|;
block|}
comment|// Assert the write lock is no longer held on region_a and region_b
name|assertTrue
argument_list|(
operator|!
name|this
operator|.
name|region_a
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|this
operator|.
name|region_b
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailAfterPONR
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
specifier|final
name|int
name|rowCountOfRegionA
init|=
name|loadRegion
argument_list|(
name|this
operator|.
name|region_a
argument_list|,
name|CF
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|int
name|rowCountOfRegionB
init|=
name|loadRegion
argument_list|(
name|this
operator|.
name|region_b
argument_list|,
name|CF
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rowCountOfRegionA
operator|>
literal|0
operator|&&
name|rowCountOfRegionB
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowCountOfRegionA
argument_list|,
name|countRows
argument_list|(
name|this
operator|.
name|region_a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowCountOfRegionB
argument_list|,
name|countRows
argument_list|(
name|this
operator|.
name|region_b
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start transaction.
name|RegionMergeTransaction
name|mt
init|=
name|prepareOnGoodRegions
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|MockedFailedMergedRegionOpen
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mt
argument_list|)
operator|.
name|openMergedRegion
argument_list|(
operator|(
name|Server
operator|)
name|Mockito
operator|.
name|anyObject
argument_list|()
argument_list|,
operator|(
name|RegionServerServices
operator|)
name|Mockito
operator|.
name|anyObject
argument_list|()
argument_list|,
operator|(
name|HRegion
operator|)
name|Mockito
operator|.
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Run the execute. Look at what it returns.
name|boolean
name|expectedException
init|=
literal|false
decl_stmt|;
name|Server
name|mockServer
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockServer
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|mt
operator|.
name|execute
argument_list|(
name|mockServer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MockedFailedMergedRegionOpen
name|e
parameter_list|)
block|{
name|expectedException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|expectedException
argument_list|)
expr_stmt|;
comment|// Run rollback returns false that we should restart.
name|assertFalse
argument_list|(
name|mt
operator|.
name|rollback
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that merged region is still in the filesystem, that
comment|// they have not been removed; this is supposed to be the case if we go
comment|// past point of no return.
name|Path
name|tableDir
init|=
name|this
operator|.
name|region_a
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getRegionDir
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Path
name|mergedRegionDir
init|=
operator|new
name|Path
argument_list|(
name|tableDir
argument_list|,
name|mt
operator|.
name|getMergedRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|mergedRegionDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Exception used in this class only.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|private
class|class
name|MockedFailedMergedRegionCreation
extends|extends
name|IOException
block|{   }
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|private
class|class
name|MockedFailedMergedRegionOpen
extends|extends
name|IOException
block|{   }
specifier|private
name|HRegion
name|createRegion
parameter_list|(
specifier|final
name|Path
name|testdir
parameter_list|,
specifier|final
name|HLog
name|wal
parameter_list|,
specifier|final
name|byte
index|[]
name|startrow
parameter_list|,
specifier|final
name|byte
index|[]
name|endrow
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Make a region with start and end keys.
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|CF
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|startrow
argument_list|,
name|endrow
argument_list|)
decl_stmt|;
name|HRegion
name|a
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|hri
argument_list|,
name|testdir
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|htd
argument_list|)
decl_stmt|;
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|a
argument_list|)
expr_stmt|;
return|return
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|testdir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|int
name|countRows
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|rowcount
init|=
literal|0
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|r
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasNext
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|hasNext
condition|)
block|{
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|kvs
operator|.
name|isEmpty
argument_list|()
condition|)
name|rowcount
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|rowcount
return|;
block|}
comment|/**    * Load region with rows from 'aaa' to 'zzz', skip the rows which are out of    * range of the region    * @param r Region    * @param f Family    * @param flush flush the cache if true    * @return Count of rows loaded.    * @throws IOException    */
specifier|private
name|int
name|loadRegion
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|byte
index|[]
name|f
parameter_list|,
specifier|final
name|boolean
name|flush
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|k
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
name|b1
init|=
literal|'a'
init|;
name|b1
operator|<=
literal|'z'
condition|;
name|b1
operator|++
control|)
block|{
for|for
control|(
name|byte
name|b2
init|=
literal|'a'
init|;
name|b2
operator|<=
literal|'z'
condition|;
name|b2
operator|++
control|)
block|{
for|for
control|(
name|byte
name|b3
init|=
literal|'a'
init|;
name|b3
operator|<=
literal|'z'
condition|;
name|b3
operator|++
control|)
block|{
name|k
index|[
literal|0
index|]
operator|=
name|b1
expr_stmt|;
name|k
index|[
literal|1
index|]
operator|=
name|b2
expr_stmt|;
name|k
index|[
literal|2
index|]
operator|=
name|b3
expr_stmt|;
if|if
condition|(
operator|!
name|HRegion
operator|.
name|rowIsInRange
argument_list|(
name|r
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|k
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|f
argument_list|,
literal|null
argument_list|,
name|k
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getLog
argument_list|()
operator|==
literal|null
condition|)
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|r
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|rowCount
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|flush
condition|)
block|{
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|rowCount
return|;
block|}
block|}
end_class

end_unit

