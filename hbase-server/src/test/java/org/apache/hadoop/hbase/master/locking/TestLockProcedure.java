begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUTKey WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|locking
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ProcedureInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|locking
operator|.
name|LockServiceClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterRpcServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|LockServiceProtos
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsInstanceOf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|StringStartsWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CategoryBasedTimeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestLockProcedure
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TestRule
name|timeout
init|=
name|CategoryBasedTimeout
operator|.
name|builder
argument_list|()
operator|.
name|withTimeout
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|withLookingForStuckThread
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
comment|// crank this up if this test turns out to be flaky.
specifier|private
specifier|static
specifier|final
name|int
name|HEARTBEAT_TIMEOUT
init|=
literal|2000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|LOCAL_LOCKS_TIMEOUT
init|=
literal|4000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestLockProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|MasterRpcServices
name|masterRpcService
decl_stmt|;
specifier|private
specifier|static
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
decl_stmt|;
specifier|private
specifier|static
name|String
name|namespace
init|=
literal|"namespace"
decl_stmt|;
specifier|private
specifier|static
name|TableName
name|tableName1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|namespace
argument_list|,
literal|"table1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|tableRegions1
decl_stmt|;
specifier|private
specifier|static
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|namespace
argument_list|,
literal|"table2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|tableRegions2
decl_stmt|;
specifier|private
name|String
name|testMethodName
decl_stmt|;
specifier|private
specifier|static
name|void
name|setupConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|MasterProcedureConstants
operator|.
name|MASTER_PROCEDURE_THREADS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.procedure.check.owner.set"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// since rpc user will be null
name|conf
operator|.
name|setInt
argument_list|(
name|LockProcedure
operator|.
name|REMOTE_LOCKS_TIMEOUT_MS_CONF
argument_list|,
name|HEARTBEAT_TIMEOUT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|LockProcedure
operator|.
name|LOCAL_MASTER_LOCKS_TIMEOUT_MS_CONF
argument_list|,
name|LOCAL_LOCKS_TIMEOUT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|setupConf
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|namespace
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|createTable
argument_list|(
name|tableName1
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
literal|"fam"
operator|.
name|getBytes
argument_list|()
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
literal|"1"
operator|.
name|getBytes
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|createTable
argument_list|(
name|tableName2
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
literal|"fam"
operator|.
name|getBytes
argument_list|()
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
literal|"1"
operator|.
name|getBytes
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|masterRpcService
operator|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterRpcServices
argument_list|()
expr_stmt|;
name|procExec
operator|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterProcedureExecutor
argument_list|()
expr_stmt|;
name|tableRegions1
operator|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getTableRegions
argument_list|(
name|tableName1
argument_list|)
expr_stmt|;
name|tableRegions2
operator|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getTableRegions
argument_list|(
name|tableName2
argument_list|)
expr_stmt|;
assert|assert
name|tableRegions1
operator|.
name|size
argument_list|()
operator|>
literal|0
assert|;
assert|assert
name|tableRegions2
operator|.
name|size
argument_list|()
operator|>
literal|0
assert|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanupTest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failure shutting down cluster"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|ProcedureTestingUtility
operator|.
name|setKillAndToggleBeforeStoreUpdate
argument_list|(
name|procExec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testMethodName
operator|=
name|testName
operator|.
name|getMethodName
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|ProcedureTestingUtility
operator|.
name|setKillAndToggleBeforeStoreUpdate
argument_list|(
name|procExec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Kill all running procedures.
for|for
control|(
name|ProcedureInfo
name|procInfo
range|:
name|procExec
operator|.
name|listProcedures
argument_list|()
control|)
block|{
name|Procedure
name|proc
init|=
name|procExec
operator|.
name|getProcedure
argument_list|(
name|procInfo
operator|.
name|getProcId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|proc
operator|==
literal|null
condition|)
continue|continue;
name|procExec
operator|.
name|abort
argument_list|(
name|procInfo
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|proc
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|procExec
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getProcedureScheduler
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|LockRequest
name|getNamespaceLock
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|description
parameter_list|)
block|{
return|return
name|LockServiceClient
operator|.
name|buildLockRequest
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|namespace
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|description
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
return|;
block|}
specifier|private
name|LockRequest
name|getTableExclusiveLock
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
name|description
parameter_list|)
block|{
return|return
name|LockServiceClient
operator|.
name|buildLockRequest
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|description
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
return|;
block|}
specifier|private
name|LockRequest
name|getRegionLock
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionInfos
parameter_list|,
name|String
name|description
parameter_list|)
block|{
return|return
name|LockServiceClient
operator|.
name|buildLockRequest
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|regionInfos
argument_list|,
name|description
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|)
return|;
block|}
specifier|private
name|void
name|validateLockRequestException
parameter_list|(
name|LockRequest
name|lockRequest
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|ServiceException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectCause
argument_list|(
name|IsInstanceOf
operator|.
name|instanceOf
argument_list|(
name|DoNotRetryIOException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|StringStartsWith
operator|.
name|startsWith
argument_list|(
literal|"org.apache.hadoop.hbase.DoNotRetryIOException: "
operator|+
literal|"java.lang.IllegalArgumentException: "
operator|+
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|masterRpcService
operator|.
name|requestLock
argument_list|(
literal|null
argument_list|,
name|lockRequest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockRequestValidationEmptyDescription
parameter_list|()
throws|throws
name|Exception
block|{
name|validateLockRequestException
argument_list|(
name|getNamespaceLock
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|"Empty description"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockRequestValidationEmptyNamespaceName
parameter_list|()
throws|throws
name|Exception
block|{
name|validateLockRequestException
argument_list|(
name|getNamespaceLock
argument_list|(
literal|""
argument_list|,
literal|"desc"
argument_list|)
argument_list|,
literal|"Empty namespace"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockRequestValidationRegionsFromDifferentTable
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|regions
operator|.
name|addAll
argument_list|(
name|tableRegions1
argument_list|)
expr_stmt|;
name|regions
operator|.
name|addAll
argument_list|(
name|tableRegions2
argument_list|)
expr_stmt|;
name|validateLockRequestException
argument_list|(
name|getRegionLock
argument_list|(
name|regions
argument_list|,
literal|"desc"
argument_list|)
argument_list|,
literal|"All regions should be from same table"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns immediately if the lock is acquired.    * @throws TimeoutException if lock couldn't be acquired.    */
specifier|private
name|boolean
name|awaitForLocked
parameter_list|(
name|long
name|procId
parameter_list|,
name|long
name|timeoutInMs
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|deadline
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeoutInMs
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|deadline
condition|)
block|{
name|LockHeartbeatResponse
name|response
init|=
name|masterRpcService
operator|.
name|lockHeartbeat
argument_list|(
literal|null
argument_list|,
name|LockHeartbeatRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getLockStatus
argument_list|()
operator|==
name|LockHeartbeatResponse
operator|.
name|LockStatus
operator|.
name|LOCKED
condition|)
block|{
name|assertEquals
argument_list|(
name|response
operator|.
name|getTimeoutMs
argument_list|()
argument_list|,
name|HEARTBEAT_TIMEOUT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Proc id %s acquired lock."
argument_list|,
name|procId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|long
name|queueLock
parameter_list|(
name|LockRequest
name|lockRequest
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LockResponse
name|response
init|=
name|masterRpcService
operator|.
name|requestLock
argument_list|(
literal|null
argument_list|,
name|lockRequest
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getProcId
argument_list|()
return|;
block|}
specifier|private
name|void
name|sendHeartbeatAndCheckLocked
parameter_list|(
name|long
name|procId
parameter_list|,
name|boolean
name|isLocked
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LockHeartbeatResponse
name|response
init|=
name|masterRpcService
operator|.
name|lockHeartbeat
argument_list|(
literal|null
argument_list|,
name|LockHeartbeatRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isLocked
condition|)
block|{
name|assertEquals
argument_list|(
name|LockHeartbeatResponse
operator|.
name|LockStatus
operator|.
name|LOCKED
argument_list|,
name|response
operator|.
name|getLockStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|LockHeartbeatResponse
operator|.
name|LockStatus
operator|.
name|UNLOCKED
argument_list|,
name|response
operator|.
name|getLockStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Proc id %s : %s."
argument_list|,
name|procId
argument_list|,
name|response
operator|.
name|getLockStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|releaseLock
parameter_list|(
name|long
name|procId
parameter_list|)
throws|throws
name|ServiceException
block|{
name|masterRpcService
operator|.
name|lockHeartbeat
argument_list|(
literal|null
argument_list|,
name|LockHeartbeatRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|setKeepAlive
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateHeartbeatAndUnlockForTable
parameter_list|()
throws|throws
name|Exception
block|{
name|LockRequest
name|lock
init|=
name|getTableExclusiveLock
argument_list|(
name|tableName1
argument_list|,
name|testMethodName
argument_list|)
decl_stmt|;
specifier|final
name|long
name|procId
init|=
name|queueLock
argument_list|(
name|lock
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|awaitForLocked
argument_list|(
name|procId
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|HEARTBEAT_TIMEOUT
operator|/
literal|2
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|procId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|HEARTBEAT_TIMEOUT
operator|/
literal|2
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|procId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|HEARTBEAT_TIMEOUT
operator|/
literal|2
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|procId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|releaseLock
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|procId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|LockRequest
name|lock
init|=
name|getTableExclusiveLock
argument_list|(
name|tableName1
argument_list|,
name|testMethodName
argument_list|)
decl_stmt|;
specifier|final
name|long
name|procId
init|=
name|queueLock
argument_list|(
name|lock
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|awaitForLocked
argument_list|(
name|procId
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procExec
operator|.
name|abort
argument_list|(
name|procId
argument_list|)
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|procId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateHeartbeatAndUnlockForNamespace
parameter_list|()
throws|throws
name|Exception
block|{
name|LockRequest
name|lock
init|=
name|getNamespaceLock
argument_list|(
name|namespace
argument_list|,
name|testMethodName
argument_list|)
decl_stmt|;
specifier|final
name|long
name|procId
init|=
name|queueLock
argument_list|(
name|lock
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|awaitForLocked
argument_list|(
name|procId
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|HEARTBEAT_TIMEOUT
operator|/
literal|2
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|procId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|HEARTBEAT_TIMEOUT
operator|/
literal|2
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|procId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|HEARTBEAT_TIMEOUT
operator|/
literal|2
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|procId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|releaseLock
argument_list|(
name|procId
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|procId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|LockRequest
name|lock
init|=
name|getNamespaceLock
argument_list|(
name|namespace
argument_list|,
name|testMethodName
argument_list|)
decl_stmt|;
specifier|final
name|long
name|procId
init|=
name|queueLock
argument_list|(
name|lock
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|awaitForLocked
argument_list|(
name|procId
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|HEARTBEAT_TIMEOUT
operator|/
literal|2
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|procId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|HEARTBEAT_TIMEOUT
operator|/
literal|2
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|procId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|HEARTBEAT_TIMEOUT
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|procId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleLocks
parameter_list|()
throws|throws
name|Exception
block|{
name|LockRequest
name|nsLock
init|=
name|getNamespaceLock
argument_list|(
name|namespace
argument_list|,
name|testMethodName
argument_list|)
decl_stmt|;
name|LockRequest
name|tableLock1
init|=
name|getTableExclusiveLock
argument_list|(
name|tableName1
argument_list|,
name|testMethodName
argument_list|)
decl_stmt|;
name|LockRequest
name|tableLock2
init|=
name|getTableExclusiveLock
argument_list|(
name|tableName2
argument_list|,
name|testMethodName
argument_list|)
decl_stmt|;
name|LockRequest
name|regionsLock1
init|=
name|getRegionLock
argument_list|(
name|tableRegions1
argument_list|,
name|testMethodName
argument_list|)
decl_stmt|;
name|LockRequest
name|regionsLock2
init|=
name|getRegionLock
argument_list|(
name|tableRegions2
argument_list|,
name|testMethodName
argument_list|)
decl_stmt|;
comment|// Acquire namespace lock, then queue other locks.
name|long
name|nsProcId
init|=
name|queueLock
argument_list|(
name|nsLock
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|awaitForLocked
argument_list|(
name|nsProcId
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|nsProcId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|table1ProcId
init|=
name|queueLock
argument_list|(
name|tableLock1
argument_list|)
decl_stmt|;
name|long
name|table2ProcId
init|=
name|queueLock
argument_list|(
name|tableLock2
argument_list|)
decl_stmt|;
name|long
name|regions1ProcId
init|=
name|queueLock
argument_list|(
name|regionsLock1
argument_list|)
decl_stmt|;
name|long
name|regions2ProcId
init|=
name|queueLock
argument_list|(
name|regionsLock2
argument_list|)
decl_stmt|;
comment|// Assert tables& region locks are waiting because of namespace lock.
name|Thread
operator|.
name|sleep
argument_list|(
name|HEARTBEAT_TIMEOUT
operator|/
literal|2
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|nsProcId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|table1ProcId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|table2ProcId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|regions1ProcId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|regions2ProcId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Release namespace lock and assert tables locks are acquired but not region lock
name|releaseLock
argument_list|(
name|nsProcId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|awaitForLocked
argument_list|(
name|table1ProcId
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|awaitForLocked
argument_list|(
name|table2ProcId
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|regions1ProcId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|regions2ProcId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Release table1 lock and assert region lock is acquired.
name|releaseLock
argument_list|(
name|table1ProcId
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|table1ProcId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|awaitForLocked
argument_list|(
name|regions1ProcId
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|table2ProcId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|regions2ProcId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Release table2 lock and assert region lock is acquired.
name|releaseLock
argument_list|(
name|table2ProcId
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|table2ProcId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|awaitForLocked
argument_list|(
name|regions2ProcId
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|regions1ProcId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|regions2ProcId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Release region locks.
name|releaseLock
argument_list|(
name|regions1ProcId
argument_list|)
expr_stmt|;
name|releaseLock
argument_list|(
name|regions2ProcId
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|regions1ProcId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|regions2ProcId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitAllProcedures
argument_list|(
name|procExec
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|nsProcId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|table1ProcId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|table2ProcId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|regions1ProcId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|regions2ProcId
argument_list|)
expr_stmt|;
block|}
comment|// Test latch is decreased in count when lock is acquired.
annotation|@
name|Test
specifier|public
name|void
name|testLatch
parameter_list|()
throws|throws
name|Exception
block|{
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// MasterRpcServices don't set latch with LockProcedure, so create one and submit it directly.
name|LockProcedure
name|lockProc
init|=
operator|new
name|LockProcedure
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table"
argument_list|)
argument_list|,
name|LockProcedure
operator|.
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
literal|"desc"
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|procExec
operator|.
name|submitProcedure
argument_list|(
name|lockProc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|2000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|releaseLock
argument_list|(
name|lockProc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|lockProc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|lockProc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// LockProcedures with latch are considered local locks.
annotation|@
name|Test
specifier|public
name|void
name|testLocalLockTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// MasterRpcServices don't set latch with LockProcedure, so create one and submit it directly.
name|LockProcedure
name|lockProc
init|=
operator|new
name|LockProcedure
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table"
argument_list|)
argument_list|,
name|LockProcedure
operator|.
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
literal|"desc"
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|procExec
operator|.
name|submitProcedure
argument_list|(
name|lockProc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|awaitForLocked
argument_list|(
name|lockProc
operator|.
name|getProcId
argument_list|()
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|LOCAL_LOCKS_TIMEOUT
operator|/
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lockProc
operator|.
name|isLocked
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|LOCAL_LOCKS_TIMEOUT
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lockProc
operator|.
name|isLocked
argument_list|()
argument_list|)
expr_stmt|;
name|releaseLock
argument_list|(
name|lockProc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|lockProc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|lockProc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testRemoteLockRecovery
parameter_list|(
name|LockRequest
name|lock
parameter_list|)
throws|throws
name|Exception
block|{
name|ProcedureTestingUtility
operator|.
name|setKillAndToggleBeforeStoreUpdate
argument_list|(
name|procExec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|long
name|procId
init|=
name|queueLock
argument_list|(
name|lock
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|awaitForLocked
argument_list|(
name|procId
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for proc Executor to die, then restart it and wait for Lock Procedure to get started.
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|procExec
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|setKillAndToggleBeforeStoreUpdate
argument_list|(
name|procExec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|restart
argument_list|(
name|procExec
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|procExec
operator|.
name|isStarted
argument_list|(
name|procId
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|procExec
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// After recovery, remote locks should reacquire locks and function normally.
name|assertTrue
argument_list|(
name|awaitForLocked
argument_list|(
name|procId
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|HEARTBEAT_TIMEOUT
operator|/
literal|2
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|procId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|HEARTBEAT_TIMEOUT
operator|/
literal|2
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|procId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|HEARTBEAT_TIMEOUT
argument_list|)
expr_stmt|;
name|sendHeartbeatAndCheckLocked
argument_list|(
name|procId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testRemoteTableLockRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|LockRequest
name|lock
init|=
name|getTableExclusiveLock
argument_list|(
name|tableName1
argument_list|,
name|testMethodName
argument_list|)
decl_stmt|;
name|testRemoteLockRecovery
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testRemoteNamespaceLockRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|LockRequest
name|lock
init|=
name|getNamespaceLock
argument_list|(
name|namespace
argument_list|,
name|testMethodName
argument_list|)
decl_stmt|;
name|testRemoteLockRecovery
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testRemoteRegionLockRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|LockRequest
name|lock
init|=
name|getRegionLock
argument_list|(
name|tableRegions1
argument_list|,
name|testMethodName
argument_list|)
decl_stmt|;
name|testRemoteLockRecovery
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testLocalMasterLockRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|ProcedureTestingUtility
operator|.
name|setKillAndToggleBeforeStoreUpdate
argument_list|(
name|procExec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|LockProcedure
name|lockProc
init|=
operator|new
name|LockProcedure
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table"
argument_list|)
argument_list|,
name|LockProcedure
operator|.
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
literal|"desc"
argument_list|,
name|latch
argument_list|)
decl_stmt|;
name|procExec
operator|.
name|submitProcedure
argument_list|(
name|lockProc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|2000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for proc Executor to die, then restart it and wait for Lock Procedure to get started.
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|lockProc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|procExec
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|setKillAndToggleBeforeStoreUpdate
argument_list|(
name|procExec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// remove zk lock node otherwise recovered lock will keep waiting on it.
name|ProcedureTestingUtility
operator|.
name|restart
argument_list|(
name|procExec
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|procExec
operator|.
name|isStarted
argument_list|(
name|lockProc
operator|.
name|getProcId
argument_list|()
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|procExec
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|lockProc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|ProcedureInfo
argument_list|,
name|Procedure
argument_list|>
name|result
init|=
name|procExec
operator|.
name|getResultOrProcedure
argument_list|(
name|lockProc
operator|.
name|getProcId
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|result
operator|.
name|getFirst
argument_list|()
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|lockProc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

