begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|webapp
operator|.
name|TestMetaBrowser
operator|.
name|MockRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|MockitoAnnotations
import|;
end_import

begin_comment
comment|/**  * Cluster-backed correctness tests for the functionality provided by {@link MetaBrowser}.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMetaBrowserNoCluster
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|testRule
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestMetaBrowserNoCluster
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|AsyncConnection
name|connection
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|MockitoAnnotations
operator|.
name|initMocks
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|buildFirstPageQueryStringNoParams
parameter_list|()
block|{
specifier|final
name|HttpServletRequest
name|request
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|MetaBrowser
name|metaBrowser
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hbase:meta"
argument_list|,
name|metaBrowser
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|metaBrowser
operator|.
name|getScanLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|metaBrowser
operator|.
name|getScanRegionState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|metaBrowser
operator|.
name|getScanStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|metaBrowser
operator|.
name|getScanTable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/table.jsp?name=hbase%3Ameta"
argument_list|,
name|metaBrowser
operator|.
name|buildFirstPageUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|buildFirstPageQueryStringNonNullParams
parameter_list|()
block|{
specifier|final
name|HttpServletRequest
name|request
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|50
argument_list|)
operator|.
name|setRegionState
argument_list|(
name|RegionState
operator|.
name|State
operator|.
name|ABNORMALLY_CLOSED
argument_list|)
operator|.
name|setTable
argument_list|(
literal|"foo%3Abar"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|MetaBrowser
name|metaBrowser
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|metaBrowser
operator|.
name|getScanLimit
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RegionState
operator|.
name|State
operator|.
name|ABNORMALLY_CLOSED
argument_list|,
name|metaBrowser
operator|.
name|getScanRegionState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|metaBrowser
operator|.
name|getScanTable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/table.jsp?name=hbase%3Ameta"
operator|+
literal|"&scan_limit=50"
operator|+
literal|"&scan_region_state=ABNORMALLY_CLOSED"
operator|+
literal|"&scan_table=foo%3Abar"
argument_list|,
name|metaBrowser
operator|.
name|buildNextPageUrl
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|buildNextPageQueryString
parameter_list|()
block|{
specifier|final
name|HttpServletRequest
name|request
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|MetaBrowser
name|metaBrowser
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/table.jsp?name=hbase%3Ameta&scan_start=%255Cx80%255Cx00%255Cx7F"
argument_list|,
name|metaBrowser
operator|.
name|buildNextPageUrl
argument_list|(
operator|new
name|byte
index|[]
block|{
name|Byte
operator|.
name|MIN_VALUE
block|,
operator|(
name|byte
operator|)
literal|0
block|,
name|Byte
operator|.
name|MAX_VALUE
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|unparseableLimitParam
parameter_list|()
block|{
specifier|final
name|HttpServletRequest
name|request
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|MetaBrowser
name|metaBrowser
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|metaBrowser
operator|.
name|getScanLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|metaBrowser
operator|.
name|getErrorMessages
argument_list|()
argument_list|,
name|contains
argument_list|(
literal|"Requested SCAN_LIMIT value 'foo' cannot be parsed as an integer."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|zeroLimitParam
parameter_list|()
block|{
specifier|final
name|HttpServletRequest
name|request
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|MetaBrowser
name|metaBrowser
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MetaBrowser
operator|.
name|SCAN_LIMIT_DEFAULT
argument_list|,
name|metaBrowser
operator|.
name|getScanLimit
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|metaBrowser
operator|.
name|getErrorMessages
argument_list|()
argument_list|,
name|contains
argument_list|(
literal|"Requested SCAN_LIMIT value 0 is<= 0."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|negativeLimitParam
parameter_list|()
block|{
specifier|final
name|HttpServletRequest
name|request
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
operator|-
literal|10
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|MetaBrowser
name|metaBrowser
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MetaBrowser
operator|.
name|SCAN_LIMIT_DEFAULT
argument_list|,
name|metaBrowser
operator|.
name|getScanLimit
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|metaBrowser
operator|.
name|getErrorMessages
argument_list|()
argument_list|,
name|contains
argument_list|(
literal|"Requested SCAN_LIMIT value -10 is<= 0."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|excessiveLimitParam
parameter_list|()
block|{
specifier|final
name|HttpServletRequest
name|request
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|10_001
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|MetaBrowser
name|metaBrowser
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MetaBrowser
operator|.
name|SCAN_LIMIT_MAX
argument_list|,
name|metaBrowser
operator|.
name|getScanLimit
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|metaBrowser
operator|.
name|getErrorMessages
argument_list|()
argument_list|,
name|contains
argument_list|(
literal|"Requested SCAN_LIMIT value 10001 exceeds maximum value 10000."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|invalidRegionStateParam
parameter_list|()
block|{
specifier|final
name|HttpServletRequest
name|request
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|setRegionState
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|MetaBrowser
name|metaBrowser
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|metaBrowser
operator|.
name|getScanRegionState
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|metaBrowser
operator|.
name|getErrorMessages
argument_list|()
argument_list|,
name|contains
argument_list|(
literal|"Requested SCAN_REGION_STATE value 'foo' cannot be parsed as a RegionState."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleErrorMessages
parameter_list|()
block|{
specifier|final
name|HttpServletRequest
name|request
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setRegionState
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|MetaBrowser
name|metaBrowser
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|metaBrowser
operator|.
name|getErrorMessages
argument_list|()
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"Requested SCAN_LIMIT value 'foo' cannot be parsed as an integer."
argument_list|,
literal|"Requested SCAN_REGION_STATE value 'bar' cannot be parsed as a RegionState."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

