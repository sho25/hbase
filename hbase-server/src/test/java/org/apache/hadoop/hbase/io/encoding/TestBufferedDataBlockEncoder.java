begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ObjectIntPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestBufferedDataBlockEncoder
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row_1_0
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row10"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam_1_2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam12"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qual1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qual2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testEnsureSpaceForKey
parameter_list|()
block|{
name|BufferedDataBlockEncoder
operator|.
name|SeekerState
name|state
init|=
operator|new
name|BufferedDataBlockEncoder
operator|.
name|SeekerState
argument_list|(
operator|new
name|ObjectIntPair
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|65536
condition|;
operator|++
name|i
control|)
block|{
name|state
operator|.
name|keyLength
operator|=
name|i
expr_stmt|;
name|state
operator|.
name|ensureSpaceForKey
argument_list|()
expr_stmt|;
name|state
operator|.
name|keyBuffer
index|[
name|state
operator|.
name|keyLength
operator|-
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|-
literal|1
operator|)
operator|%
literal|0xff
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
operator|-
literal|1
condition|;
operator|++
name|j
control|)
block|{
comment|// Check that earlier bytes were preserved as the buffer grew.
name|assertEquals
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|j
operator|%
literal|0xff
argument_list|)
argument_list|,
name|state
operator|.
name|keyBuffer
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommonPrefixComparators
parameter_list|()
block|{
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1l
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam_1_2
argument_list|,
name|qual1
argument_list|,
literal|1l
argument_list|,
name|Type
operator|.
name|Maximum
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
name|BufferedDataBlockEncoder
operator|.
name|compareCommonFamilyPrefix
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|,
literal|4
argument_list|)
operator|<
literal|0
operator|)
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1l
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|row_1_0
argument_list|,
name|fam_1_2
argument_list|,
name|qual1
argument_list|,
literal|1l
argument_list|,
name|Type
operator|.
name|Maximum
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|BufferedDataBlockEncoder
operator|.
name|compareCommonRowPrefix
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|,
literal|4
argument_list|)
operator|<
literal|0
operator|)
argument_list|)
expr_stmt|;
name|kv1
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual2
argument_list|,
literal|1l
argument_list|,
name|Type
operator|.
name|Put
argument_list|)
expr_stmt|;
name|kv2
operator|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
literal|1l
argument_list|,
name|Type
operator|.
name|Maximum
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|BufferedDataBlockEncoder
operator|.
name|compareCommonQualifierPrefix
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|,
literal|4
argument_list|)
operator|>
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

