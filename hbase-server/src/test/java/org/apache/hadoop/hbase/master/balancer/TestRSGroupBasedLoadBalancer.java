begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|net
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
operator|.
name|RSGroupBasedLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
operator|.
name|RSGroupInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_comment
comment|/**  * Test RSGroupBasedLoadBalancer with SimpleLoadBalancer as internal balancer  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestRSGroupBasedLoadBalancer
extends|extends
name|RSGroupableBalancerTestBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRSGroupBasedLoadBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRSGroupBasedLoadBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|RSGroupBasedLoadBalancer
name|loadBalancer
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeAllTests
parameter_list|()
throws|throws
name|Exception
block|{
name|servers
operator|=
name|generateServers
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|groupMap
operator|=
name|constructGroupInfo
argument_list|(
name|servers
argument_list|,
name|groups
argument_list|)
expr_stmt|;
name|tableDescs
operator|=
name|constructTableDesc
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.regions.slop"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.rsgroup.grouploadbalancer.class"
argument_list|,
name|SimpleLoadBalancer
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|loadBalancer
operator|=
operator|new
name|RSGroupBasedLoadBalancer
argument_list|()
expr_stmt|;
name|loadBalancer
operator|.
name|setRsGroupInfoManager
argument_list|(
name|getMockedGroupInfoManager
argument_list|()
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|setMasterServices
argument_list|(
name|getMockedMaster
argument_list|()
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test the load balancing algorithm.    *    * Invariant is that all servers of the group should be hosting either floor(average) or    * ceiling(average)    */
annotation|@
name|Test
specifier|public
name|void
name|testBalanceCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|servers
init|=
name|mockClusterServers
argument_list|()
decl_stmt|;
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|ServerAndLoad
argument_list|>
name|list
init|=
name|convertToGroupBasedMap
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mock Cluster :  "
operator|+
name|printStats
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
init|=
name|loadBalancer
operator|.
name|balanceCluster
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|ServerAndLoad
argument_list|>
name|balancedCluster
init|=
name|reconcile
argument_list|(
name|list
argument_list|,
name|plans
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mock Balance : "
operator|+
name|printStats
argument_list|(
name|balancedCluster
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterAsBalanced
argument_list|(
name|balancedCluster
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the bulk assignment used during cluster startup.    *<p/>    * Round-robin. Should yield a balanced cluster so same invariant as the load balancer holds, all    * servers holding either floor(avg) or ceiling(avg).    */
annotation|@
name|Test
specifier|public
name|void
name|testBulkAssignment
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|randomRegions
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|assignments
init|=
name|loadBalancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
decl_stmt|;
comment|// test empty region/servers scenario
comment|// this should not throw an NPE
name|loadBalancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
comment|// test regular scenario
name|assertTrue
argument_list|(
name|assignments
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|servers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ServerName
name|sn
range|:
name|assignments
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionAssigned
init|=
name|assignments
operator|.
name|get
argument_list|(
name|sn
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionInfo
name|region
range|:
name|regionAssigned
control|)
block|{
name|TableName
name|tableName
init|=
name|region
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|String
name|groupName
init|=
name|tableDescs
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|getRegionServerGroup
argument_list|()
operator|.
name|orElse
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|groupName
argument_list|)
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|gInfo
init|=
name|getMockedGroupInfoManager
argument_list|()
operator|.
name|getRSGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Region is not correctly assigned to group servers."
argument_list|,
name|gInfo
operator|.
name|containsServer
argument_list|(
name|sn
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|ServerAndLoad
argument_list|>
name|loadMap
init|=
name|convertToGroupBasedMap
argument_list|(
name|assignments
argument_list|)
decl_stmt|;
name|assertClusterAsBalanced
argument_list|(
name|loadMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the cluster startup bulk assignment which attempts to retain assignment info.    */
annotation|@
name|Test
specifier|public
name|void
name|testRetainAssignment
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test simple case where all same servers are there
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|currentAssignments
init|=
name|mockClusterServers
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|inputForTest
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|sn
range|:
name|currentAssignments
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|RegionInfo
name|region
range|:
name|currentAssignments
operator|.
name|get
argument_list|(
name|sn
argument_list|)
control|)
block|{
name|inputForTest
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|sn
argument_list|)
expr_stmt|;
block|}
block|}
comment|//verify region->null server assignment is handled
name|inputForTest
operator|.
name|put
argument_list|(
name|randomRegions
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|newAssignment
init|=
name|loadBalancer
operator|.
name|retainAssignment
argument_list|(
name|inputForTest
argument_list|,
name|servers
argument_list|)
decl_stmt|;
name|assertRetainedAssignment
argument_list|(
name|inputForTest
argument_list|,
name|servers
argument_list|,
name|newAssignment
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test BOGUS_SERVER_NAME among groups do not overwrite each other.    */
annotation|@
name|Test
specifier|public
name|void
name|testRoundRobinAssignment
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|onlineServers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
name|servers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|onlineServers
operator|.
name|addAll
argument_list|(
name|servers
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|randomRegions
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|int
name|bogusRegion
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RegionInfo
name|region
range|:
name|regions
control|)
block|{
name|String
name|group
init|=
name|tableDescs
operator|.
name|get
argument_list|(
name|region
operator|.
name|getTable
argument_list|()
argument_list|)
operator|.
name|getRegionServerGroup
argument_list|()
operator|.
name|orElse
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"dg3"
operator|.
name|equals
argument_list|(
name|group
argument_list|)
operator|||
literal|"dg4"
operator|.
name|equals
argument_list|(
name|group
argument_list|)
condition|)
block|{
name|bogusRegion
operator|++
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|Address
argument_list|>
name|offlineServers
init|=
operator|new
name|HashSet
argument_list|<
name|Address
argument_list|>
argument_list|()
decl_stmt|;
name|offlineServers
operator|.
name|addAll
argument_list|(
name|groupMap
operator|.
name|get
argument_list|(
literal|"dg3"
argument_list|)
operator|.
name|getServers
argument_list|()
argument_list|)
expr_stmt|;
name|offlineServers
operator|.
name|addAll
argument_list|(
name|groupMap
operator|.
name|get
argument_list|(
literal|"dg4"
argument_list|)
operator|.
name|getServers
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ServerName
argument_list|>
name|it
init|=
name|onlineServers
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ServerName
name|server
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Address
name|address
init|=
name|server
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|offlineServers
operator|.
name|contains
argument_list|(
name|address
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|assignments
init|=
name|loadBalancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|onlineServers
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bogusRegion
argument_list|,
name|assignments
operator|.
name|get
argument_list|(
name|LoadBalancer
operator|.
name|BOGUS_SERVER_NAME
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

