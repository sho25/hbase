begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * These helper methods generate random byte[]'s data for KeyValues  */
end_comment

begin_class
specifier|public
class|class
name|RandomKeyValueUtil
block|{
specifier|public
specifier|static
specifier|final
name|String
name|COLUMN_FAMILY_NAME
init|=
literal|"_-myColumnFamily-_"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MIN_ROW_OR_QUALIFIER_LENGTH
init|=
literal|64
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ROW_OR_QUALIFIER_LENGTH
init|=
literal|128
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|randomReadableChar
parameter_list|(
name|Random
name|rand
parameter_list|)
block|{
name|int
name|i
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|26
operator|*
literal|2
operator|+
literal|10
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|26
condition|)
return|return
call|(
name|char
call|)
argument_list|(
literal|'A'
operator|+
name|i
argument_list|)
return|;
name|i
operator|-=
literal|26
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|26
condition|)
return|return
call|(
name|char
call|)
argument_list|(
literal|'a'
operator|+
name|i
argument_list|)
return|;
name|i
operator|-=
literal|26
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|10
condition|)
return|return
call|(
name|char
call|)
argument_list|(
literal|'0'
operator|+
name|i
argument_list|)
return|;
name|i
operator|-=
literal|10
expr_stmt|;
assert|assert
name|i
operator|==
literal|0
assert|;
return|return
literal|'_'
return|;
block|}
specifier|public
specifier|static
name|KeyValue
name|randomKeyValue
parameter_list|(
name|Random
name|rand
parameter_list|)
block|{
return|return
operator|new
name|KeyValue
argument_list|(
name|randomRowOrQualifier
argument_list|(
name|rand
argument_list|)
argument_list|,
name|COLUMN_FAMILY_NAME
operator|.
name|getBytes
argument_list|()
argument_list|,
name|randomRowOrQualifier
argument_list|(
name|rand
argument_list|)
argument_list|,
name|randomValue
argument_list|(
name|rand
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|randomRowOrQualifier
parameter_list|(
name|Random
name|rand
parameter_list|)
block|{
name|StringBuilder
name|field
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|fieldLen
init|=
name|MIN_ROW_OR_QUALIFIER_LENGTH
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
name|MAX_ROW_OR_QUALIFIER_LENGTH
operator|-
name|MIN_ROW_OR_QUALIFIER_LENGTH
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldLen
condition|;
operator|++
name|i
control|)
name|field
operator|.
name|append
argument_list|(
name|randomReadableChar
argument_list|(
name|rand
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|field
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|randomValue
parameter_list|(
name|Random
name|rand
parameter_list|)
block|{
name|StringBuilder
name|v
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|2000
argument_list|)
condition|;
operator|++
name|j
control|)
block|{
name|v
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
literal|32
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|95
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|valueBytes
init|=
name|v
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
return|return
name|valueBytes
return|;
block|}
comment|/**    * Generates a random key that is guaranteed to increase as the given index i    * increases. The result consists of a prefix, which is a deterministic    * increasing function of i, and a random suffix.    *    * @param rand    *          random number generator to use    * @param i    * @return    */
specifier|public
specifier|static
name|byte
index|[]
name|randomOrderedKey
parameter_list|(
name|Random
name|rand
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|StringBuilder
name|k
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// The fixed-length lexicographically increasing part of the key.
for|for
control|(
name|int
name|bitIndex
init|=
literal|31
init|;
name|bitIndex
operator|>=
literal|0
condition|;
operator|--
name|bitIndex
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|&
operator|(
literal|1
operator|<<
name|bitIndex
operator|)
operator|)
operator|==
literal|0
condition|)
name|k
operator|.
name|append
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
else|else
name|k
operator|.
name|append
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
block|}
comment|// A random-length random suffix of the key.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rand
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
condition|;
operator|++
name|j
control|)
name|k
operator|.
name|append
argument_list|(
name|randomReadableChar
argument_list|(
name|rand
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|keyBytes
init|=
name|k
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
return|return
name|keyBytes
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|randomOrderedFixedLengthKey
parameter_list|(
name|Random
name|rand
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|suffixLength
parameter_list|)
block|{
name|StringBuilder
name|k
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// The fixed-length lexicographically increasing part of the key.
for|for
control|(
name|int
name|bitIndex
init|=
literal|31
init|;
name|bitIndex
operator|>=
literal|0
condition|;
operator|--
name|bitIndex
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|&
operator|(
literal|1
operator|<<
name|bitIndex
operator|)
operator|)
operator|==
literal|0
condition|)
name|k
operator|.
name|append
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
else|else
name|k
operator|.
name|append
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
block|}
comment|// A random suffix of the key.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|suffixLength
condition|;
operator|++
name|j
control|)
name|k
operator|.
name|append
argument_list|(
name|randomReadableChar
argument_list|(
name|rand
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|keyBytes
init|=
name|k
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
return|return
name|keyBytes
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|randomFixedLengthValue
parameter_list|(
name|Random
name|rand
parameter_list|,
name|int
name|valueLength
parameter_list|)
block|{
name|StringBuilder
name|v
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|valueLength
condition|;
operator|++
name|j
control|)
block|{
name|v
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
literal|32
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|95
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|valueBytes
init|=
name|v
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
return|return
name|valueBytes
return|;
block|}
block|}
end_class

end_unit

