begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|MasterNotRunningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|UnknownRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
operator|.
name|SplitRegionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HBaseFsck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|RegionServerThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NodeExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * Like {@link TestSplitTransaction} in that we're testing {@link SplitTransaction}  * only the below tests are against a running cluster where {@link TestSplitTransaction}  * is tests against a bare {@link HRegion}.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSplitTransactionOnCluster
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSplitTransactionOnCluster
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HBaseAdmin
name|admin
init|=
literal|null
decl_stmt|;
specifier|private
name|MiniHBaseCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NB_SERVERS
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|boolean
name|secondSplit
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|boolean
name|callRollBack
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|boolean
name|firstSplitCompleted
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TESTING_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|TESTING_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.balancer.period"
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
comment|// Needed because some tests have splits happening on RS that are killed
comment|// We don't want to wait 3min for the master to figure it out
name|TESTING_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.master.assignment.timeoutmonitor.timeout"
argument_list|,
literal|4000
argument_list|)
expr_stmt|;
name|TESTING_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|NB_SERVERS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|TESTING_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|TESTING_UTIL
operator|.
name|ensureSomeNonStoppedRegionServersAvailable
argument_list|(
name|NB_SERVERS
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|TESTING_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|cluster
operator|=
name|TESTING_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|HRegionInfo
name|getAndCheckSingleTableRegion
parameter_list|(
specifier|final
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hri
init|=
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
return|return
name|waitOnRIT
argument_list|(
name|hri
argument_list|)
return|;
block|}
comment|/**    * Often region has not yet fully opened.  If we try to use it -- do a move for instance -- it    * will fail silently if the region is not yet opened.    * @param hri Region to check if in Regions In Transition... wait until out of transition before    * returning    * @return Passed in<code>hri</code>    */
specifier|private
name|HRegionInfo
name|waitOnRIT
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
block|{
comment|// Close worked but we are going to open the region elsewhere.  Before going on, make sure
comment|// this completes.
while|while
condition|(
name|TESTING_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting on region in transition: "
operator|+
name|TESTING_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionTransitionState
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
return|return
name|hri
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testShouldFailSplitIfZNodeDoesNotExistDueToPrevRollBack
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testShouldFailSplitIfZNodeDoesNotExistDueToPrevRollBack"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Create table then get the single region for our new table.
name|HTable
name|t
init|=
name|createTableAndWait
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|getAndCheckSingleTableRegion
argument_list|(
name|regions
argument_list|)
decl_stmt|;
name|int
name|regionServerIndex
init|=
name|cluster
operator|.
name|getServerWith
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|HRegionServer
name|regionServer
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|regionServerIndex
argument_list|)
decl_stmt|;
name|insertData
argument_list|(
name|tableName
argument_list|,
name|admin
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Turn off balancer so it doesn't cut in and mess up our placements.
name|this
operator|.
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Turn off the meta scanner so it don't remove parent on us.
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// find a splittable region
specifier|final
name|HRegion
name|region
init|=
name|findSplittableRegion
argument_list|(
name|regions
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|region
operator|!=
literal|null
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|SplitTransaction
name|st
init|=
literal|null
decl_stmt|;
name|st
operator|=
operator|new
name|MockedSplitTransaction
argument_list|(
name|region
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|st
operator|.
name|prepare
argument_list|()
expr_stmt|;
name|st
operator|.
name|execute
argument_list|(
name|regionServer
argument_list|,
name|regionServer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{            }
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|callRollBack
operator|&&
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Waited too long for rollback"
argument_list|,
name|callRollBack
argument_list|)
expr_stmt|;
name|SplitTransaction
name|st
init|=
operator|new
name|MockedSplitTransaction
argument_list|(
name|region
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row3"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|secondSplit
operator|=
literal|true
expr_stmt|;
name|st
operator|.
name|prepare
argument_list|()
expr_stmt|;
name|st
operator|.
name|execute
argument_list|(
name|regionServer
argument_list|,
name|regionServer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rollback started :"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|rollback
argument_list|(
name|regionServer
argument_list|,
name|regionServer
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|firstSplitCompleted
operator|&&
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"fist split did not complete"
argument_list|,
name|firstSplitCompleted
argument_list|)
expr_stmt|;
name|RegionStates
name|regionStates
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|rit
init|=
name|regionStates
operator|.
name|getRegionsInTransition
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|rit
operator|.
name|containsKey
argument_list|(
name|hri
operator|.
name|getTableNameAsString
argument_list|()
argument_list|)
operator|&&
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"region still in transition"
argument_list|,
name|rit
operator|.
name|containsKey
argument_list|(
name|rit
operator|.
name|containsKey
argument_list|(
name|hri
operator|.
name|getTableNameAsString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions
init|=
name|regionServer
operator|.
name|getOnlineRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Region server side split is successful.
name|assertEquals
argument_list|(
literal|"The parent region should be splitted"
argument_list|,
literal|2
argument_list|,
name|onlineRegions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Should be present in RIT
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsOfTable
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Master side should also reflect the same
name|assertEquals
argument_list|(
literal|"No of regions in master"
argument_list|,
literal|2
argument_list|,
name|regionsOfTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|secondSplit
operator|=
literal|false
expr_stmt|;
name|firstSplitCompleted
operator|=
literal|false
expr_stmt|;
name|callRollBack
operator|=
literal|false
expr_stmt|;
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TESTING_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A test that intentionally has master fail the processing of the split message.    * Tests that the regionserver split ephemeral node gets cleaned up if it    * crashes and that after we process server shutdown, the daughters are up on    * line.    * @throws IOException    * @throws InterruptedException    * @throws NodeExistsException    * @throws KeeperException    * @throws DeserializationException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testRSSplitEphemeralsDisappearButDaughtersAreOnlinedAfterShutdownHandling
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|NodeExistsException
throws|,
name|KeeperException
throws|,
name|DeserializationException
throws|,
name|ServiceException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRSSplitEphemeralsDisappearButDaughtersAreOnlinedAfterShutdownHandling"
argument_list|)
decl_stmt|;
comment|// Create table then get the single region for our new table.
name|HTable
name|t
init|=
name|createTableAndWait
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|getAndCheckSingleTableRegion
argument_list|(
name|regions
argument_list|)
decl_stmt|;
name|int
name|tableRegionIndex
init|=
name|ensureTableRegionNotOnSameServerAsMeta
argument_list|(
name|admin
argument_list|,
name|hri
argument_list|)
decl_stmt|;
comment|// Turn off balancer so it doesn't cut in and mess up our placements.
name|this
operator|.
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Turn off the meta scanner so it don't remove parent on us.
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Add a bit of load up into the table so splittable.
name|TESTING_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
comment|// Get region pre-split.
name|HRegionServer
name|server
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|tableRegionIndex
argument_list|)
decl_stmt|;
name|printOutRegions
argument_list|(
name|server
argument_list|,
literal|"Initial regions: "
argument_list|)
expr_stmt|;
name|int
name|regionCount
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|server
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Now, before we split, set special flag in master, a flag that has
comment|// it FAIL the processing of split.
name|SplitRegionHandler
operator|.
name|TEST_SKIP
operator|=
literal|true
expr_stmt|;
comment|// Now try splitting and it should work.
name|split
argument_list|(
name|hri
argument_list|,
name|server
argument_list|,
name|regionCount
argument_list|)
expr_stmt|;
comment|// Get daughters
name|List
argument_list|<
name|HRegion
argument_list|>
name|daughters
init|=
name|checkAndGetDaughters
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Assert the ephemeral node is up in zk.
name|String
name|path
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|TESTING_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|Stat
name|stats
init|=
name|TESTING_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"EPHEMERAL NODE BEFORE SERVER ABORT, path="
operator|+
name|path
operator|+
literal|", stats="
operator|+
name|stats
argument_list|)
expr_stmt|;
name|RegionTransition
name|rt
init|=
name|RegionTransition
operator|.
name|parseFrom
argument_list|(
name|ZKAssign
operator|.
name|getData
argument_list|(
name|TESTING_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// State could be SPLIT or SPLITTING.
name|assertTrue
argument_list|(
name|rt
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_SPLIT
argument_list|)
operator|||
name|rt
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now crash the server
name|cluster
operator|.
name|abortRegionServer
argument_list|(
name|tableRegionIndex
argument_list|)
expr_stmt|;
name|waitUntilRegionServerDead
argument_list|()
expr_stmt|;
name|awaitDaughters
argument_list|(
name|tableName
argument_list|,
name|daughters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert daughters are online.
name|regions
operator|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|regions
control|)
block|{
name|assertTrue
argument_list|(
name|daughters
operator|.
name|contains
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Finally assert that the ephemeral SPLIT znode was cleaned up.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
comment|// wait a bit (10s max) for the node to disappear
name|stats
operator|=
name|TESTING_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"EPHEMERAL NODE AFTER SERVER ABORT, path="
operator|+
name|path
operator|+
literal|", stats="
operator|+
name|stats
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stats
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Set this flag back.
name|SplitRegionHandler
operator|.
name|TEST_SKIP
operator|=
literal|false
expr_stmt|;
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testExistingZnodeBlocksSplitAndWeRollback
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|NodeExistsException
throws|,
name|KeeperException
throws|,
name|ServiceException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testExistingZnodeBlocksSplitAndWeRollback"
argument_list|)
decl_stmt|;
comment|// Create table then get the single region for our new table.
name|HTable
name|t
init|=
name|createTableAndWait
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|getAndCheckSingleTableRegion
argument_list|(
name|regions
argument_list|)
decl_stmt|;
name|int
name|tableRegionIndex
init|=
name|ensureTableRegionNotOnSameServerAsMeta
argument_list|(
name|admin
argument_list|,
name|hri
argument_list|)
decl_stmt|;
comment|// Turn off balancer so it doesn't cut in and mess up our placements.
name|this
operator|.
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Turn off the meta scanner so it don't remove parent on us.
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Add a bit of load up into the table so splittable.
name|TESTING_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
comment|// Get region pre-split.
name|HRegionServer
name|server
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|tableRegionIndex
argument_list|)
decl_stmt|;
name|printOutRegions
argument_list|(
name|server
argument_list|,
literal|"Initial regions: "
argument_list|)
expr_stmt|;
name|int
name|regionCount
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|server
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Insert into zk a blocking znode, a znode of same name as region
comment|// so it gets in way of our splitting.
name|ZKAssign
operator|.
name|createNodeClosing
argument_list|(
name|TESTING_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|hri
argument_list|,
operator|new
name|ServerName
argument_list|(
literal|"any.old.server"
argument_list|,
literal|1234
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now try splitting.... should fail.  And each should successfully
comment|// rollback.
name|this
operator|.
name|admin
operator|.
name|split
argument_list|(
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|split
argument_list|(
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|split
argument_list|(
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait around a while and assert count of regions remains constant.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|regionCount
argument_list|,
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|server
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now clear the zknode
name|ZKAssign
operator|.
name|deleteClosingNode
argument_list|(
name|TESTING_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|hri
argument_list|)
expr_stmt|;
comment|// Now try splitting and it should work.
name|split
argument_list|(
name|hri
argument_list|,
name|server
argument_list|,
name|regionCount
argument_list|)
expr_stmt|;
comment|// Get daughters
name|checkAndGetDaughters
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// OK, so split happened after we cleared the blocking node.
block|}
finally|finally
block|{
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that if daughter split on us, we won't do the shutdown handler fixup    * just because we can't find the immediate daughter of an offlined parent.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testShutdownFixupWhenDaughterHasSplit
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ServiceException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testShutdownFixupWhenDaughterHasSplit"
argument_list|)
decl_stmt|;
comment|// Create table then get the single region for our new table.
name|HTable
name|t
init|=
name|createTableAndWait
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|getAndCheckSingleTableRegion
argument_list|(
name|regions
argument_list|)
decl_stmt|;
name|int
name|tableRegionIndex
init|=
name|ensureTableRegionNotOnSameServerAsMeta
argument_list|(
name|admin
argument_list|,
name|hri
argument_list|)
decl_stmt|;
comment|// Turn off balancer so it doesn't cut in and mess up our placements.
name|this
operator|.
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Turn off the meta scanner so it don't remove parent on us.
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Add a bit of load up into the table so splittable.
name|TESTING_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
comment|// Get region pre-split.
name|HRegionServer
name|server
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|tableRegionIndex
argument_list|)
decl_stmt|;
name|printOutRegions
argument_list|(
name|server
argument_list|,
literal|"Initial regions: "
argument_list|)
expr_stmt|;
name|int
name|regionCount
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|server
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Now split.
name|split
argument_list|(
name|hri
argument_list|,
name|server
argument_list|,
name|regionCount
argument_list|)
expr_stmt|;
comment|// Get daughters
name|List
argument_list|<
name|HRegion
argument_list|>
name|daughters
init|=
name|checkAndGetDaughters
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Now split one of the daughters.
name|regionCount
operator|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|server
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|HRegionInfo
name|daughter
init|=
name|daughters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Daughter we are going to split: "
operator|+
name|daughter
argument_list|)
expr_stmt|;
comment|// Compact first to ensure we have cleaned up references -- else the split
comment|// will fail.
name|this
operator|.
name|admin
operator|.
name|compact
argument_list|(
name|daughter
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|daughters
operator|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|HRegion
name|daughterRegion
init|=
literal|null
decl_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|daughters
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|daughter
argument_list|)
condition|)
block|{
name|daughterRegion
operator|=
name|r
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found matching HRI: "
operator|+
name|daughterRegion
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|daughterRegion
operator|!=
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|daughterRegion
operator|.
name|hasReferences
argument_list|()
condition|)
break|break;
name|Threads
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Waiting for reference to be compacted"
argument_list|,
name|daughterRegion
operator|.
name|hasReferences
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Daughter hri before split (has been compacted): "
operator|+
name|daughter
argument_list|)
expr_stmt|;
name|split
argument_list|(
name|daughter
argument_list|,
name|server
argument_list|,
name|regionCount
argument_list|)
expr_stmt|;
comment|// Get list of daughters
name|daughters
operator|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegion
name|d
range|:
name|daughters
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Regions before crash: "
operator|+
name|d
argument_list|)
expr_stmt|;
block|}
comment|// Now crash the server
name|cluster
operator|.
name|abortRegionServer
argument_list|(
name|tableRegionIndex
argument_list|)
expr_stmt|;
name|waitUntilRegionServerDead
argument_list|()
expr_stmt|;
name|awaitDaughters
argument_list|(
name|tableName
argument_list|,
name|daughters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert daughters are online and ONLY the original daughters -- that
comment|// fixup didn't insert one during server shutdown recover.
name|regions
operator|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegion
name|d
range|:
name|daughters
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Regions after crash: "
operator|+
name|d
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|daughters
operator|.
name|size
argument_list|()
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|regions
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Regions post crash "
operator|+
name|r
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing region post crash "
operator|+
name|r
argument_list|,
name|daughters
operator|.
name|contains
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testSplitShouldNotThrowNPEEvenARegionHasEmptySplitFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TESTING_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ZooKeeperWatcher
name|zkw
init|=
name|HBaseTestingUtility
operator|.
name|getZooKeeperWatcher
argument_list|(
name|TESTING_UTIL
argument_list|)
decl_stmt|;
name|String
name|userTableName
init|=
literal|"testSplitShouldNotThrowNPEEvenARegionHasEmptySplitFiles"
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|userTableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"col"
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|userTableName
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|String
name|row
init|=
literal|"row"
operator|+
name|i
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|val
init|=
literal|"Val"
operator|+
name|i
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"col"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"ql"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|val
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|userTableName
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|row
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|// Do a normal delete
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|userTableName
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|majorCompact
argument_list|(
name|userTableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsOfTable
init|=
name|TESTING_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsOfTable
argument_list|(
name|userTableName
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hRegionInfo
init|=
name|regionsOfTable
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
literal|"row6"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"col"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"ql"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"val"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
literal|"row7"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"col"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"ql"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"val"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
literal|"row8"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"col"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"ql"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"val"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|userTableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|split
argument_list|(
name|hRegionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|"row7"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|regionsOfTable
operator|=
name|TESTING_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsOfTable
argument_list|(
name|userTableName
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|regionsOfTable
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|regionsOfTable
operator|=
name|TESTING_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsOfTable
argument_list|(
name|userTableName
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|regionsOfTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|int
name|mainTableCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|rr
init|=
name|scanner
operator|.
name|next
argument_list|()
init|;
name|rr
operator|!=
literal|null
condition|;
name|rr
operator|=
name|scanner
operator|.
name|next
argument_list|()
control|)
block|{
name|mainTableCount
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mainTableCount
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Noop Abortable implementation used below in tests.    */
specifier|static
class|class
name|UselessTestAbortable
implements|implements
name|Abortable
block|{
name|boolean
name|aborted
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ABORTED (But nothing to abort): why="
operator|+
name|why
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|aborted
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|this
operator|.
name|aborted
return|;
block|}
block|}
comment|/**    * Verifies HBASE-5806.  When splitting is partially done and the master goes down    * when the SPLIT node is in either SPLIT or SPLITTING state.    *    * @throws IOException    * @throws InterruptedException    * @throws NodeExistsException    * @throws KeeperException    * @throws DeserializationException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMasterRestartWhenSplittingIsPartial
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|NodeExistsException
throws|,
name|KeeperException
throws|,
name|DeserializationException
throws|,
name|ServiceException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testMasterRestartWhenSplittingIsPartial"
argument_list|)
decl_stmt|;
comment|// Create table then get the single region for our new table.
name|HTable
name|t
init|=
name|createTableAndWait
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|getAndCheckSingleTableRegion
argument_list|(
name|regions
argument_list|)
decl_stmt|;
name|int
name|tableRegionIndex
init|=
name|ensureTableRegionNotOnSameServerAsMeta
argument_list|(
name|admin
argument_list|,
name|hri
argument_list|)
decl_stmt|;
comment|// Turn off balancer so it doesn't cut in and mess up our placements.
name|this
operator|.
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Turn off the meta scanner so it don't remove parent on us.
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ZooKeeperWatcher
name|zkw
init|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|t
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"testMasterRestartWhenSplittingIsPartial"
argument_list|,
operator|new
name|UselessTestAbortable
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Add a bit of load up into the table so splittable.
name|TESTING_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
comment|// Get region pre-split.
name|HRegionServer
name|server
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|tableRegionIndex
argument_list|)
decl_stmt|;
name|printOutRegions
argument_list|(
name|server
argument_list|,
literal|"Initial regions: "
argument_list|)
expr_stmt|;
comment|// Now, before we split, set special flag in master, a flag that has
comment|// it FAIL the processing of split.
name|SplitRegionHandler
operator|.
name|TEST_SKIP
operator|=
literal|true
expr_stmt|;
comment|// Now try splitting and it should work.
name|this
operator|.
name|admin
operator|.
name|split
argument_list|(
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|checkAndGetDaughters
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Assert the ephemeral node is up in zk.
name|String
name|path
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|zkw
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|Stat
name|stats
init|=
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"EPHEMERAL NODE BEFORE SERVER ABORT, path="
operator|+
name|path
operator|+
literal|", stats="
operator|+
name|stats
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|ZKAssign
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|RegionTransition
name|rtd
init|=
name|RegionTransition
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
comment|// State could be SPLIT or SPLITTING.
name|assertTrue
argument_list|(
name|rtd
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_SPLIT
argument_list|)
operator|||
name|rtd
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_SPLITTING
argument_list|)
argument_list|)
expr_stmt|;
comment|// abort and wait for new master.
name|MockMasterWithoutCatalogJanitor
name|master
init|=
name|abortAndWaitForMaster
argument_list|()
decl_stmt|;
name|this
operator|.
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|TESTING_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// update the hri to be offlined and splitted.
name|hri
operator|.
name|setOffline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hri
operator|.
name|setSplit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ServerName
name|regionServerOfRegion
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|regionServerOfRegion
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Set this flag back.
name|SplitRegionHandler
operator|.
name|TEST_SKIP
operator|=
literal|false
expr_stmt|;
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Verifies HBASE-5806.  Here the case is that splitting is completed but before the    * CJ could remove the parent region the master is killed and restarted.    * @throws IOException    * @throws InterruptedException    * @throws NodeExistsException    * @throws KeeperException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMasterRestartAtRegionSplitPendingCatalogJanitor
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|NodeExistsException
throws|,
name|KeeperException
throws|,
name|ServiceException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testMasterRestartAtRegionSplitPendingCatalogJanitor"
argument_list|)
decl_stmt|;
comment|// Create table then get the single region for our new table.
name|HTable
name|t
init|=
name|createTableAndWait
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|getAndCheckSingleTableRegion
argument_list|(
name|regions
argument_list|)
decl_stmt|;
name|int
name|tableRegionIndex
init|=
name|ensureTableRegionNotOnSameServerAsMeta
argument_list|(
name|admin
argument_list|,
name|hri
argument_list|)
decl_stmt|;
comment|// Turn off balancer so it doesn't cut in and mess up our placements.
name|this
operator|.
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Turn off the meta scanner so it don't remove parent on us.
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ZooKeeperWatcher
name|zkw
init|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|t
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"testMasterRestartAtRegionSplitPendingCatalogJanitor"
argument_list|,
operator|new
name|UselessTestAbortable
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Add a bit of load up into the table so splittable.
name|TESTING_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
comment|// Get region pre-split.
name|HRegionServer
name|server
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|tableRegionIndex
argument_list|)
decl_stmt|;
name|printOutRegions
argument_list|(
name|server
argument_list|,
literal|"Initial regions: "
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|split
argument_list|(
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|checkAndGetDaughters
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Assert the ephemeral node is up in zk.
name|String
name|path
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|zkw
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|Stat
name|stats
init|=
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"EPHEMERAL NODE BEFORE SERVER ABORT, path="
operator|+
name|path
operator|+
literal|", stats="
operator|+
name|stats
argument_list|)
expr_stmt|;
name|String
name|node
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|zkw
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getDataNoWatch
argument_list|(
name|zkw
argument_list|,
name|node
argument_list|,
name|stat
argument_list|)
decl_stmt|;
comment|// ZKUtil.create
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|data
operator|!=
literal|null
operator|&&
name|i
operator|<
literal|60
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|data
operator|=
name|ZKUtil
operator|.
name|getDataNoWatch
argument_list|(
name|zkw
argument_list|,
name|node
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
literal|"Waited too long for ZK node to be removed: "
operator|+
name|node
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|MockMasterWithoutCatalogJanitor
name|master
init|=
name|abortAndWaitForMaster
argument_list|()
decl_stmt|;
name|this
operator|.
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|TESTING_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|hri
operator|.
name|setOffline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hri
operator|.
name|setSplit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ServerName
name|regionServerOfRegion
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|regionServerOfRegion
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Set this flag back.
name|SplitRegionHandler
operator|.
name|TEST_SKIP
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    *    * While transitioning node from RS_ZK_REGION_SPLITTING to    * RS_ZK_REGION_SPLITTING during region split,if zookeper went down split always    * fails for the region. HBASE-6088 fixes this scenario.    * This test case is to test the znode is deleted(if created) or not in roll back.    *    * @throws IOException    * @throws InterruptedException    * @throws KeeperException    */
annotation|@
name|Test
specifier|public
name|void
name|testSplitBeforeSettingSplittingInZK
parameter_list|()
throws|throws
name|Exception
throws|,
name|InterruptedException
throws|,
name|KeeperException
block|{
name|testSplitBeforeSettingSplittingInZKInternals
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTableExistsIfTheSpecifiedTableRegionIsSplitParent
parameter_list|()
throws|throws
name|Exception
block|{
name|ZooKeeperWatcher
name|zkw
init|=
name|HBaseTestingUtility
operator|.
name|getZooKeeperWatcher
argument_list|(
name|TESTING_UTIL
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testTableExistsIfTheSpecifiedTableRegionIsSplitParent"
argument_list|)
decl_stmt|;
comment|// Create table then get the single region for our new table.
name|HTable
name|t
init|=
name|createTableAndWait
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
literal|null
decl_stmt|;
try|try
block|{
name|regions
operator|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|int
name|regionServerIndex
init|=
name|cluster
operator|.
name|getServerWith
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionServer
name|regionServer
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|regionServerIndex
argument_list|)
decl_stmt|;
name|insertData
argument_list|(
name|tableName
argument_list|,
name|admin
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// Turn off balancer so it doesn't cut in and mess up our placements.
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Turn off the meta scanner so it don't remove parent on us.
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|tableExists
init|=
name|MetaReader
operator|.
name|tableExists
argument_list|(
name|regionServer
operator|.
name|getCatalogTracker
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The specified table should present."
argument_list|,
literal|true
argument_list|,
name|tableExists
argument_list|)
expr_stmt|;
specifier|final
name|HRegion
name|region
init|=
name|findSplittableRegion
argument_list|(
name|regions
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|region
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|SplitTransaction
name|st
init|=
operator|new
name|SplitTransaction
argument_list|(
name|region
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|st
operator|.
name|prepare
argument_list|()
expr_stmt|;
name|st
operator|.
name|createDaughters
argument_list|(
name|regionServer
argument_list|,
name|regionServer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{        }
name|tableExists
operator|=
name|MetaReader
operator|.
name|tableExists
argument_list|(
name|regionServer
operator|.
name|getCatalogTracker
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The specified table should present."
argument_list|,
literal|true
argument_list|,
name|tableExists
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|regions
operator|!=
literal|null
condition|)
block|{
name|String
name|node
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|zkw
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|deleteNodeFailSilent
argument_list|(
name|zkw
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|insertData
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
name|HBaseAdmin
name|admin
parameter_list|,
name|HTable
name|t
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row3"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row4"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * If a table has regions that have no store files in a region, they should split successfully    * into two regions with no store files.    */
annotation|@
name|Test
specifier|public
name|void
name|testSplitRegionWithNoStoreFiles
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testSplitRegionWithNoStoreFiles"
argument_list|)
decl_stmt|;
comment|// Create table then get the single region for our new table.
name|createTableAndWait
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|getAndCheckSingleTableRegion
argument_list|(
name|regions
argument_list|)
decl_stmt|;
name|ensureTableRegionNotOnSameServerAsMeta
argument_list|(
name|admin
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|int
name|regionServerIndex
init|=
name|cluster
operator|.
name|getServerWith
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionServer
name|regionServer
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|regionServerIndex
argument_list|)
decl_stmt|;
comment|// Turn off balancer so it doesn't cut in and mess up our placements.
name|this
operator|.
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Turn off the meta scanner so it don't remove parent on us.
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Precondition: we created a table with no data, no store files.
name|printOutRegions
argument_list|(
name|regionServer
argument_list|,
literal|"Initial regions: "
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|cluster
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|HBaseFsck
operator|.
name|debugLsr
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|TESTING_UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|storefiles
init|=
name|FSUtils
operator|.
name|getTableStoreFilePathMap
argument_list|(
literal|null
argument_list|,
name|fs
argument_list|,
name|rootDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected nothing but found "
operator|+
name|storefiles
operator|.
name|toString
argument_list|()
argument_list|,
name|storefiles
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// find a splittable region.  Refresh the regions list
name|regions
operator|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
specifier|final
name|HRegion
name|region
init|=
name|findSplittableRegion
argument_list|(
name|regions
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|region
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Now split.
name|SplitTransaction
name|st
init|=
operator|new
name|MockedSplitTransaction
argument_list|(
name|region
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|st
operator|.
name|prepare
argument_list|()
expr_stmt|;
name|st
operator|.
name|execute
argument_list|(
name|regionServer
argument_list|,
name|regionServer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Split execution should have succeeded with no exceptions thrown"
argument_list|)
expr_stmt|;
block|}
comment|// Postcondition: split the table with no store files into two regions, but still have not
comment|// store files
name|List
argument_list|<
name|HRegion
argument_list|>
name|daughters
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|daughters
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// check dirs
name|HBaseFsck
operator|.
name|debugLsr
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|storefilesAfter
init|=
name|FSUtils
operator|.
name|getTableStoreFilePathMap
argument_list|(
literal|null
argument_list|,
name|fs
argument_list|,
name|rootDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected nothing but found "
operator|+
name|storefilesAfter
operator|.
name|toString
argument_list|()
argument_list|,
name|storefilesAfter
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hri
operator|=
name|region
operator|.
name|getRegionInfo
argument_list|()
expr_stmt|;
comment|// split parent
name|AssignmentManager
name|am
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|regionStates
operator|.
name|isRegionInState
argument_list|(
name|hri
argument_list|,
name|State
operator|.
name|SPLIT
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Timed out in waiting split parent to be in state SPLIT"
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|>
literal|60000
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
comment|// We should not be able to assign it again
name|am
operator|.
name|assign
argument_list|(
name|hri
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Split region should not be in transition again"
argument_list|,
name|regionStates
operator|.
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
operator|&&
name|regionStates
operator|.
name|isRegionInState
argument_list|(
name|hri
argument_list|,
name|State
operator|.
name|SPLIT
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testSplitBeforeSettingSplittingInZKInternals
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testSplitBeforeSettingSplittingInZK"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Create table then get the single region for our new table.
name|HTable
name|t
init|=
name|createTableAndWait
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|awaitTableRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Table not online"
argument_list|,
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|int
name|regionServerIndex
init|=
name|cluster
operator|.
name|getServerWith
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionServer
name|regionServer
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|regionServerIndex
argument_list|)
decl_stmt|;
specifier|final
name|HRegion
name|region
init|=
name|findSplittableRegion
argument_list|(
name|regions
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not able to find a splittable region"
argument_list|,
name|region
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|SplitTransaction
name|st
init|=
operator|new
name|MockedSplitTransaction
argument_list|(
name|region
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
name|int
name|createNodeSplitting
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|HRegionInfo
name|region
parameter_list|,
name|ServerName
name|serverName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|SplittingNodeCreationFailedException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
name|String
name|node
init|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|regionServer
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|regionServer
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|sync
argument_list|(
name|node
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
comment|// We expect the znode to be deleted by this time. Here the
comment|// znode could be in OPENED state and the
comment|// master has not yet deleted the znode.
if|if
condition|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|regionServer
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|node
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|st
operator|.
name|prepare
argument_list|()
expr_stmt|;
name|st
operator|.
name|execute
argument_list|(
name|regionServer
argument_list|,
name|regionServer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// check for the specific instance in case the Split failed due to the
comment|// existence of the znode in OPENED state.
comment|// This will at least make the test to fail;
name|assertTrue
argument_list|(
literal|"Should be instance of CreateSplittingNodeFailedException"
argument_list|,
name|e
operator|instanceof
name|SplittingNodeCreationFailedException
argument_list|)
expr_stmt|;
name|node
operator|=
name|ZKAssign
operator|.
name|getNodeName
argument_list|(
name|regionServer
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|regionServer
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|node
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|st
operator|.
name|rollback
argument_list|(
name|regionServer
argument_list|,
name|regionServer
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|regionServer
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|node
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|TESTING_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MockedSplitTransaction
extends|extends
name|SplitTransaction
block|{
specifier|private
name|HRegion
name|currentRegion
decl_stmt|;
specifier|public
name|MockedSplitTransaction
parameter_list|(
name|HRegion
name|r
parameter_list|,
name|byte
index|[]
name|splitrow
parameter_list|)
block|{
name|super
argument_list|(
name|r
argument_list|,
name|splitrow
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentRegion
operator|=
name|r
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|transitionZKNode
parameter_list|(
name|Server
name|server
parameter_list|,
name|RegionServerServices
name|services
parameter_list|,
name|HRegion
name|a
parameter_list|,
name|HRegion
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|currentRegion
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTableNameAsString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testShouldFailSplitIfZNodeDoesNotExistDueToPrevRollBack"
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|secondSplit
condition|)
block|{
name|callRollBack
operator|=
literal|true
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
block|}
name|super
operator|.
name|transitionZKNode
argument_list|(
name|server
argument_list|,
name|services
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|currentRegion
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTableNameAsString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testShouldFailSplitIfZNodeDoesNotExistDueToPrevRollBack"
argument_list|)
condition|)
block|{
name|firstSplitCompleted
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|rollback
parameter_list|(
name|Server
name|server
parameter_list|,
name|RegionServerServices
name|services
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|currentRegion
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTableNameAsString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testShouldFailSplitIfZNodeDoesNotExistDueToPrevRollBack"
argument_list|)
condition|)
block|{
if|if
condition|(
name|secondSplit
condition|)
block|{
name|super
operator|.
name|rollback
argument_list|(
name|server
argument_list|,
name|services
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
name|super
operator|.
name|rollback
argument_list|(
name|server
argument_list|,
name|services
argument_list|)
return|;
block|}
block|}
specifier|private
name|HRegion
name|findSplittableRegion
parameter_list|(
specifier|final
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|HRegion
name|region
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|HRegion
name|r
range|:
name|regions
control|)
block|{
if|if
condition|(
name|r
operator|.
name|isSplittable
argument_list|()
condition|)
block|{
return|return
operator|(
name|r
operator|)
return|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
literal|null
operator|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|HRegion
argument_list|>
name|checkAndGetDaughters
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|List
argument_list|<
name|HRegion
argument_list|>
name|daughters
init|=
literal|null
decl_stmt|;
comment|// try up to 10s
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|daughters
operator|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|daughters
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|daughters
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
return|return
name|daughters
return|;
block|}
specifier|private
name|MockMasterWithoutCatalogJanitor
name|abortAndWaitForMaster
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|cluster
operator|.
name|abortMaster
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitOnMaster
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setClass
argument_list|(
name|HConstants
operator|.
name|MASTER_IMPL
argument_list|,
name|MockMasterWithoutCatalogJanitor
operator|.
name|class
argument_list|,
name|HMaster
operator|.
name|class
argument_list|)
expr_stmt|;
name|MockMasterWithoutCatalogJanitor
name|master
init|=
literal|null
decl_stmt|;
name|master
operator|=
operator|(
name|MockMasterWithoutCatalogJanitor
operator|)
name|cluster
operator|.
name|startMaster
argument_list|()
operator|.
name|getMaster
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
expr_stmt|;
return|return
name|master
return|;
block|}
specifier|private
name|void
name|split
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|HRegionServer
name|server
parameter_list|,
specifier|final
name|int
name|regionCount
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|admin
operator|.
name|split
argument_list|(
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|server
argument_list|)
operator|.
name|size
argument_list|()
operator|<=
name|regionCount
operator|&&
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting on region to split"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Waited too long for split"
argument_list|,
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|server
argument_list|)
operator|.
name|size
argument_list|()
operator|<=
name|regionCount
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|removeDaughterFromMeta
parameter_list|(
specifier|final
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|metaTable
init|=
operator|new
name|HTable
argument_list|(
name|TESTING_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|metaTable
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|metaTable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Ensure single table region is not on same server as the single .META. table    * region.    * @param admin    * @param hri    * @return Index of the server hosting the single table region    * @throws UnknownRegionException    * @throws MasterNotRunningException    * @throws org.apache.hadoop.hbase.exceptions.ZooKeeperConnectionException    * @throws InterruptedException    */
specifier|private
name|int
name|ensureTableRegionNotOnSameServerAsMeta
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|HBaseIOException
throws|,
name|MasterNotRunningException
throws|,
name|ZooKeeperConnectionException
throws|,
name|InterruptedException
block|{
comment|// Now make sure that the table region is not on same server as that hosting
comment|// .META.  We don't want .META. replay polluting our test when we later crash
comment|// the table region serving server.
name|int
name|metaServerIndex
init|=
name|cluster
operator|.
name|getServerWithMeta
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|metaServerIndex
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|HRegionServer
name|metaRegionServer
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|metaServerIndex
argument_list|)
decl_stmt|;
name|int
name|tableRegionIndex
init|=
name|cluster
operator|.
name|getServerWith
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tableRegionIndex
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|HRegionServer
name|tableRegionServer
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|tableRegionIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaRegionServer
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|tableRegionServer
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
name|HRegionServer
name|hrs
init|=
name|getOtherRegionServer
argument_list|(
name|cluster
argument_list|,
name|metaRegionServer
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|hrs
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" from "
operator|+
name|metaRegionServer
operator|.
name|getServerName
argument_list|()
operator|+
literal|" to "
operator|+
name|hrs
operator|.
name|getServerName
argument_list|()
operator|+
literal|"; metaServerIndex="
operator|+
name|metaServerIndex
argument_list|)
expr_stmt|;
name|admin
operator|.
name|move
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|hrs
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Wait till table region is up on the server that is NOT carrying .META..
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|tableRegionIndex
operator|=
name|cluster
operator|.
name|getServerWith
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableRegionIndex
operator|!=
operator|-
literal|1
operator|&&
name|tableRegionIndex
operator|!=
name|metaServerIndex
condition|)
break|break;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting on region move off the .META. server; current index "
operator|+
name|tableRegionIndex
operator|+
literal|" and metaServerIndex="
operator|+
name|metaServerIndex
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Region not moved off .META. server"
argument_list|,
name|tableRegionIndex
operator|!=
operator|-
literal|1
operator|&&
name|tableRegionIndex
operator|!=
name|metaServerIndex
argument_list|)
expr_stmt|;
comment|// Verify for sure table region is not on same server as .META.
name|tableRegionIndex
operator|=
name|cluster
operator|.
name|getServerWith
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tableRegionIndex
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|metaServerIndex
argument_list|,
name|tableRegionIndex
argument_list|)
expr_stmt|;
return|return
name|tableRegionIndex
return|;
block|}
comment|/**    * Find regionserver other than the one passed.    * Can't rely on indexes into list of regionservers since crashed servers    * occupy an index.    * @param cluster    * @param notThisOne    * @return A regionserver that is not<code>notThisOne</code> or null if none    * found    */
specifier|private
name|HRegionServer
name|getOtherRegionServer
parameter_list|(
specifier|final
name|MiniHBaseCluster
name|cluster
parameter_list|,
specifier|final
name|HRegionServer
name|notThisOne
parameter_list|)
block|{
for|for
control|(
name|RegionServerThread
name|rst
range|:
name|cluster
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
name|HRegionServer
name|hrs
init|=
name|rst
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|hrs
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|notThisOne
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|hrs
operator|.
name|isStopping
argument_list|()
operator|||
name|hrs
operator|.
name|isStopped
argument_list|()
condition|)
continue|continue;
return|return
name|hrs
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|printOutRegions
parameter_list|(
specifier|final
name|HRegionServer
name|hrs
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|hrs
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|prefix
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|waitUntilRegionServerDead
parameter_list|()
throws|throws
name|InterruptedException
block|{
comment|// Wait until the master processes the RS shutdown
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|NB_SERVERS
operator|&&
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting on server to go down"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Waited too long for RS to die"
argument_list|,
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|NB_SERVERS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|awaitDaughters
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|int
name|numDaughters
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// Wait till regions are back on line again.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|<
name|numDaughters
operator|&&
name|i
operator|<
literal|60
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for repair to happen"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|<
name|numDaughters
condition|)
block|{
name|fail
argument_list|(
literal|"Waiting too long for daughter regions"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|HRegion
argument_list|>
name|awaitTableRegions
parameter_list|(
specifier|final
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|regions
operator|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|regions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
specifier|private
name|HTable
name|createTableAndWait
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HTable
name|t
init|=
name|TESTING_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|cf
argument_list|)
decl_stmt|;
name|awaitTableRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table not online: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|cluster
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
specifier|public
specifier|static
class|class
name|MockMasterWithoutCatalogJanitor
extends|extends
name|HMaster
block|{
specifier|public
name|MockMasterWithoutCatalogJanitor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|startCatalogJanitorChore
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Customised master executed."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SplittingNodeCreationFailedException
extends|extends
name|IOException
block|{
specifier|public
name|SplittingNodeCreationFailedException
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

