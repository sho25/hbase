begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test the fault injection policies and combinations  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestFaultInjectionPolicies
block|{
annotation|@
name|Test
specifier|public
name|void
name|testAndCombination
parameter_list|()
block|{
name|FaultInjectionPolicy
name|alwaysFalse
init|=
operator|new
name|FaultInjectionPolicy
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Default policy isn't false"
argument_list|,
name|alwaysFalse
operator|.
name|shouldFault
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|FaultInjectionPolicy
name|alwaysTrue
init|=
operator|new
name|AlwaysTrue
argument_list|()
decl_stmt|;
name|FaultInjectionPolicy
name|andTrue
init|=
operator|new
name|AlwaysTrue
argument_list|()
operator|.
name|or
argument_list|(
name|alwaysTrue
argument_list|)
operator|.
name|or
argument_list|(
name|alwaysTrue
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"And True isn't always returning true"
argument_list|,
name|andTrue
operator|.
name|shouldFault
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|FaultInjectionPolicy
name|andFalse
init|=
operator|new
name|FaultInjectionPolicy
argument_list|()
operator|.
name|and
argument_list|(
name|alwaysTrue
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"false AND true"
argument_list|,
name|andFalse
operator|.
name|shouldFault
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"true AND false"
argument_list|,
name|alwaysTrue
operator|.
name|and
argument_list|(
name|alwaysFalse
argument_list|)
operator|.
name|shouldFault
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"true AND (false AND true)"
argument_list|,
operator|new
name|AlwaysTrue
argument_list|()
operator|.
name|and
argument_list|(
operator|new
name|FaultInjectionPolicy
argument_list|()
operator|.
name|and
argument_list|(
operator|new
name|AlwaysTrue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|shouldFault
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"(true AND false AND true)"
argument_list|,
operator|new
name|AlwaysTrue
argument_list|()
operator|.
name|and
argument_list|(
operator|new
name|FaultInjectionPolicy
argument_list|()
argument_list|)
operator|.
name|and
argument_list|(
operator|new
name|AlwaysTrue
argument_list|()
argument_list|)
operator|.
name|shouldFault
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testORCombination
parameter_list|()
block|{
name|FaultInjectionPolicy
name|alwaysTrue
init|=
operator|new
name|AlwaysTrue
argument_list|()
decl_stmt|;
name|FaultInjectionPolicy
name|andTrue
init|=
operator|new
name|AlwaysTrue
argument_list|()
operator|.
name|or
argument_list|(
name|alwaysTrue
argument_list|)
operator|.
name|or
argument_list|(
name|alwaysTrue
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"OR True isn't always returning true"
argument_list|,
name|andTrue
operator|.
name|shouldFault
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|FaultInjectionPolicy
name|andFalse
init|=
operator|new
name|FaultInjectionPolicy
argument_list|()
operator|.
name|or
argument_list|(
name|alwaysTrue
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Combination of true OR false should be true"
argument_list|,
name|andFalse
operator|.
name|shouldFault
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Combining multiple ands isn't correct"
argument_list|,
operator|new
name|FaultInjectionPolicy
argument_list|()
operator|.
name|or
argument_list|(
name|andTrue
argument_list|)
operator|.
name|or
argument_list|(
name|andFalse
argument_list|)
operator|.
name|shouldFault
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMixedAndOr
parameter_list|()
block|{
name|assertTrue
argument_list|(
literal|"true AND (false OR true)"
argument_list|,
operator|new
name|AlwaysTrue
argument_list|()
operator|.
name|and
argument_list|(
operator|new
name|FaultInjectionPolicy
argument_list|()
operator|.
name|or
argument_list|(
operator|new
name|AlwaysTrue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|shouldFault
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"(true AND false) OR true"
argument_list|,
operator|new
name|AlwaysTrue
argument_list|()
operator|.
name|or
argument_list|(
operator|new
name|AlwaysTrue
argument_list|()
operator|.
name|and
argument_list|(
operator|new
name|FaultInjectionPolicy
argument_list|()
argument_list|)
argument_list|)
operator|.
name|shouldFault
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"(true AND false) OR false"
argument_list|,
operator|new
name|FaultInjectionPolicy
argument_list|()
operator|.
name|or
argument_list|(
operator|new
name|AlwaysTrue
argument_list|()
operator|.
name|and
argument_list|(
operator|new
name|FaultInjectionPolicy
argument_list|()
argument_list|)
argument_list|)
operator|.
name|shouldFault
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|AlwaysTrue
extends|extends
name|FaultInjectionPolicy
block|{
specifier|protected
name|boolean
name|checkForFault
parameter_list|(
name|StackTraceElement
index|[]
name|stack
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SimplePolicyFaultInjector
extends|extends
name|PoliciedFaultInjector
argument_list|<
name|Exception
argument_list|>
block|{
specifier|public
name|SimplePolicyFaultInjector
parameter_list|(
name|FaultInjectionPolicy
name|policy
parameter_list|)
block|{
name|super
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Pair
argument_list|<
name|Exception
argument_list|,
name|Object
index|[]
argument_list|>
name|getInjectedError
parameter_list|(
name|StackTraceElement
index|[]
name|trace
parameter_list|)
block|{
return|return
operator|new
name|Pair
argument_list|<
name|Exception
argument_list|,
name|Object
index|[]
argument_list|>
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"error"
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

