begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|log
operator|.
name|HBaseMarkers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|BloomFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|BloomFilterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ChecksumType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test TestRowPrefixBloomFilter  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRowPrefixBloomFilter
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRowPrefixBloomFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRowPrefixBloomFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|CacheConfig
name|cacheConf
init|=
operator|new
name|CacheConfig
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ChecksumType
name|CKTYPE
init|=
name|ChecksumType
operator|.
name|CRC32C
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CKBYTES
init|=
literal|512
decl_stmt|;
specifier|private
name|boolean
name|localfs
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|static
name|Path
name|testDir
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BLOCKSIZE_SMALL
init|=
literal|8192
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|err
init|=
operator|(
name|float
operator|)
literal|0.01
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|prefixLength
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|invalidFormatter
init|=
literal|"%08d"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|prefixFormatter
init|=
literal|"%010d"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|suffixFormatter
init|=
literal|"%010d"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|prefixRowCount
init|=
literal|50
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|suffixRowCount
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|fixedLengthExpKeys
init|=
name|prefixRowCount
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BloomType
name|bt
init|=
name|BloomType
operator|.
name|ROWPREFIX_FIXED_LENGTH
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|BloomFilterFactory
operator|.
name|IO_STOREFILE_BLOOM_ERROR_RATE
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|BloomFilterFactory
operator|.
name|IO_STOREFILE_BLOOM_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|BloomFilterUtil
operator|.
name|PREFIX_LENGTH_KEY
argument_list|,
name|prefixLength
argument_list|)
expr_stmt|;
name|localfs
operator|=
operator|(
name|conf
operator|.
name|get
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
operator|.
name|compareTo
argument_list|(
literal|"file:///"
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|localfs
condition|)
block|{
name|testDir
operator|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"TestRowPrefixBloomFilter"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|testDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|testDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|testDir
operator|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|HBaseMarkers
operator|.
name|FATAL
argument_list|,
literal|"error during setup"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|localfs
condition|)
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|testDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|testDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|HBaseMarkers
operator|.
name|FATAL
argument_list|,
literal|"error during tear down"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|StoreFileScanner
name|getStoreFileScanner
parameter_list|(
name|StoreFileReader
name|reader
parameter_list|)
block|{
return|return
name|reader
operator|.
name|getStoreFileScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|void
name|writeStoreFile
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
name|BloomType
name|bt
parameter_list|,
name|int
name|expKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
name|BLOCKSIZE_SMALL
argument_list|)
operator|.
name|withChecksumType
argument_list|(
name|CKTYPE
argument_list|)
operator|.
name|withBytesPerCheckSum
argument_list|(
name|CKBYTES
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Make a store file and write data to it.
name|StoreFileWriter
name|writer
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|fs
argument_list|)
operator|.
name|withFilePath
argument_list|(
name|f
argument_list|)
operator|.
name|withBloomType
argument_list|(
name|bt
argument_list|)
operator|.
name|withMaxKeyCount
argument_list|(
name|expKeys
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
comment|//Put with valid row style
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefixRowCount
condition|;
name|i
operator|+=
literal|2
control|)
block|{
comment|// prefix rows
name|String
name|prefixRow
init|=
name|String
operator|.
name|format
argument_list|(
name|prefixFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|suffixRowCount
condition|;
name|j
operator|++
control|)
block|{
comment|// suffix rows
name|String
name|row
init|=
name|generateRowWithSuffix
argument_list|(
name|prefixRow
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col"
argument_list|)
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Put with invalid row style
for|for
control|(
name|int
name|i
init|=
name|prefixRowCount
init|;
name|i
operator|<
name|prefixRowCount
operator|*
literal|2
condition|;
name|i
operator|+=
literal|2
control|)
block|{
comment|// prefix rows
name|String
name|row
init|=
name|String
operator|.
name|format
argument_list|(
name|invalidFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col"
argument_list|)
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|generateRowWithSuffix
parameter_list|(
name|String
name|prefixRow
parameter_list|,
name|int
name|suffix
parameter_list|)
block|{
name|StringBuilder
name|row
init|=
operator|new
name|StringBuilder
argument_list|(
name|prefixRow
argument_list|)
decl_stmt|;
name|row
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
name|row
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|suffixFormatter
argument_list|,
name|suffix
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|row
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowPrefixBloomFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|float
name|expErr
init|=
literal|2
operator|*
name|prefixRowCount
operator|*
name|suffixRowCount
operator|*
name|err
decl_stmt|;
name|int
name|expKeys
init|=
name|fixedLengthExpKeys
decl_stmt|;
comment|// write the file
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|writeStoreFile
argument_list|(
name|f
argument_list|,
name|bt
argument_list|,
name|expKeys
argument_list|)
expr_stmt|;
comment|// read the file
name|StoreFileReader
name|reader
init|=
operator|new
name|StoreFileReader
argument_list|(
name|fs
argument_list|,
name|f
argument_list|,
name|cacheConf
argument_list|,
literal|true
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|reader
operator|.
name|loadBloomfilter
argument_list|()
expr_stmt|;
comment|//check basic param
name|assertEquals
argument_list|(
name|bt
argument_list|,
name|reader
operator|.
name|getBloomFilterType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|prefixLength
argument_list|,
name|reader
operator|.
name|getPrefixLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expKeys
argument_list|,
name|reader
operator|.
name|getGeneralBloomFilter
argument_list|()
operator|.
name|getKeyCount
argument_list|()
argument_list|)
expr_stmt|;
name|StoreFileScanner
name|scanner
init|=
name|getStoreFileScanner
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|HStore
name|store
init|=
name|mock
argument_list|(
name|HStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getColumnFamilyDescriptor
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"family"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check false positives rate
name|int
name|falsePos
init|=
literal|0
decl_stmt|;
name|int
name|falseNeg
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefixRowCount
condition|;
name|i
operator|++
control|)
block|{
comment|// prefix rows
name|String
name|prefixRow
init|=
name|String
operator|.
name|format
argument_list|(
name|prefixFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|suffixRowCount
condition|;
name|j
operator|++
control|)
block|{
comment|// suffix rows
name|String
name|startRow
init|=
name|generateRowWithSuffix
argument_list|(
name|prefixRow
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|String
name|stopRow
init|=
name|generateRowWithSuffix
argument_list|(
name|prefixRow
argument_list|,
name|j
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|startRow
argument_list|)
argument_list|)
operator|.
name|withStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|stopRow
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
name|boolean
name|shouldPrefixRowExist
init|=
name|i
operator|%
literal|2
operator|==
literal|0
decl_stmt|;
if|if
condition|(
name|shouldPrefixRowExist
condition|)
block|{
if|if
condition|(
operator|!
name|exists
condition|)
block|{
name|falseNeg
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|exists
condition|)
block|{
name|falsePos
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|prefixRowCount
init|;
name|i
operator|<
name|prefixRowCount
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
comment|// prefix rows
name|String
name|row
init|=
name|String
operator|.
name|format
argument_list|(
name|invalidFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
name|boolean
name|shouldPrefixRowExist
init|=
name|i
operator|%
literal|2
operator|==
literal|0
decl_stmt|;
if|if
condition|(
name|shouldPrefixRowExist
condition|)
block|{
if|if
condition|(
operator|!
name|exists
condition|)
block|{
name|falseNeg
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|exists
condition|)
block|{
name|falsePos
operator|++
expr_stmt|;
block|}
block|}
block|}
name|reader
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// evict because we are about to delete the file
name|fs
operator|.
name|delete
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"False negatives: "
operator|+
name|falseNeg
argument_list|,
literal|0
argument_list|,
name|falseNeg
argument_list|)
expr_stmt|;
name|int
name|maxFalsePos
init|=
call|(
name|int
call|)
argument_list|(
literal|2
operator|*
name|expErr
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Too many false positives: "
operator|+
name|falsePos
operator|+
literal|" (err="
operator|+
name|err
operator|+
literal|", expected no more than "
operator|+
name|maxFalsePos
operator|+
literal|")"
argument_list|,
name|falsePos
operator|<=
name|maxFalsePos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowPrefixBloomFilterWithGet
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|expKeys
init|=
name|fixedLengthExpKeys
decl_stmt|;
comment|// write the file
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|writeStoreFile
argument_list|(
name|f
argument_list|,
name|bt
argument_list|,
name|expKeys
argument_list|)
expr_stmt|;
name|StoreFileReader
name|reader
init|=
operator|new
name|StoreFileReader
argument_list|(
name|fs
argument_list|,
name|f
argument_list|,
name|cacheConf
argument_list|,
literal|true
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|reader
operator|.
name|loadBloomfilter
argument_list|()
expr_stmt|;
name|StoreFileScanner
name|scanner
init|=
name|getStoreFileScanner
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|HStore
name|store
init|=
name|mock
argument_list|(
name|HStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getColumnFamilyDescriptor
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"family"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Get with valid row style
comment|//prefix row in bloom
name|String
name|prefixRow
init|=
name|String
operator|.
name|format
argument_list|(
name|prefixFormatter
argument_list|,
name|prefixRowCount
operator|-
literal|2
argument_list|)
decl_stmt|;
name|String
name|row
init|=
name|generateRowWithSuffix
argument_list|(
name|prefixRow
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|)
expr_stmt|;
comment|// prefix row not in bloom
name|prefixRow
operator|=
name|String
operator|.
name|format
argument_list|(
name|prefixFormatter
argument_list|,
name|prefixRowCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|row
operator|=
name|generateRowWithSuffix
argument_list|(
name|prefixRow
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|exists
operator|=
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|exists
argument_list|)
expr_stmt|;
comment|// Get with invalid row style
comment|// ROWPREFIX: the length of row is less than prefixLength
comment|// row in bloom
name|row
operator|=
name|String
operator|.
name|format
argument_list|(
name|invalidFormatter
argument_list|,
name|prefixRowCount
operator|+
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|exists
operator|=
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|)
expr_stmt|;
comment|// row not in bloom
name|row
operator|=
name|String
operator|.
name|format
argument_list|(
name|invalidFormatter
argument_list|,
name|prefixRowCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|exists
operator|=
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|exists
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// evict because we are about to delete the file
name|fs
operator|.
name|delete
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowPrefixBloomFilterWithScan
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|expKeys
init|=
name|fixedLengthExpKeys
decl_stmt|;
comment|// write the file
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|writeStoreFile
argument_list|(
name|f
argument_list|,
name|bt
argument_list|,
name|expKeys
argument_list|)
expr_stmt|;
name|StoreFileReader
name|reader
init|=
operator|new
name|StoreFileReader
argument_list|(
name|fs
argument_list|,
name|f
argument_list|,
name|cacheConf
argument_list|,
literal|true
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|reader
operator|.
name|loadBloomfilter
argument_list|()
expr_stmt|;
name|StoreFileScanner
name|scanner
init|=
name|getStoreFileScanner
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|HStore
name|store
init|=
name|mock
argument_list|(
name|HStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getColumnFamilyDescriptor
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"family"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Scan with valid row style. startRow and stopRow have a common prefix.
comment|//And the length of the common prefix is no less than prefixLength.
comment|//prefix row in bloom
name|String
name|prefixRow
init|=
name|String
operator|.
name|format
argument_list|(
name|prefixFormatter
argument_list|,
name|prefixRowCount
operator|-
literal|2
argument_list|)
decl_stmt|;
name|String
name|startRow
init|=
name|generateRowWithSuffix
argument_list|(
name|prefixRow
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|stopRow
init|=
name|generateRowWithSuffix
argument_list|(
name|prefixRow
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|startRow
argument_list|)
argument_list|)
operator|.
name|withStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|stopRow
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|)
expr_stmt|;
comment|// prefix row not in bloom
name|prefixRow
operator|=
name|String
operator|.
name|format
argument_list|(
name|prefixFormatter
argument_list|,
name|prefixRowCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|startRow
operator|=
name|generateRowWithSuffix
argument_list|(
name|prefixRow
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|stopRow
operator|=
name|generateRowWithSuffix
argument_list|(
name|prefixRow
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|startRow
argument_list|)
argument_list|)
operator|.
name|withStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
name|exists
operator|=
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|exists
argument_list|)
expr_stmt|;
comment|// There is no common prefix between startRow and stopRow.
name|prefixRow
operator|=
name|String
operator|.
name|format
argument_list|(
name|prefixFormatter
argument_list|,
name|prefixRowCount
operator|-
literal|2
argument_list|)
expr_stmt|;
name|startRow
operator|=
name|generateRowWithSuffix
argument_list|(
name|prefixRow
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|startRow
argument_list|)
argument_list|)
expr_stmt|;
name|exists
operator|=
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|)
expr_stmt|;
comment|// startRow and stopRow have a common prefix.
comment|// But the length of the common prefix is less than prefixLength.
name|String
name|prefixStartRow
init|=
name|String
operator|.
name|format
argument_list|(
name|prefixFormatter
argument_list|,
name|prefixRowCount
operator|-
literal|2
argument_list|)
decl_stmt|;
name|String
name|prefixStopRow
init|=
name|String
operator|.
name|format
argument_list|(
name|prefixFormatter
argument_list|,
name|prefixRowCount
operator|-
literal|1
argument_list|)
decl_stmt|;
name|startRow
operator|=
name|generateRowWithSuffix
argument_list|(
name|prefixStartRow
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|stopRow
operator|=
name|generateRowWithSuffix
argument_list|(
name|prefixStopRow
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|startRow
argument_list|)
argument_list|)
operator|.
name|withStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
name|exists
operator|=
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exists
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// evict because we are about to delete the file
name|fs
operator|.
name|delete
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

