begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * This tests some race conditions that can happen  * occasionally, but not every time.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSizeBasedThrottler
block|{
specifier|private
specifier|static
specifier|final
name|int
name|REPEATS
init|=
literal|100
decl_stmt|;
specifier|private
name|Thread
name|makeThread
parameter_list|(
specifier|final
name|SizeBasedThrottler
name|throttler
parameter_list|,
specifier|final
name|AtomicBoolean
name|failed
parameter_list|,
specifier|final
name|int
name|delta
parameter_list|,
specifier|final
name|int
name|limit
parameter_list|,
specifier|final
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|Thread
name|ret
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|throttler
operator|.
name|increase
argument_list|(
name|delta
argument_list|)
operator|>
name|limit
condition|)
block|{
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|throttler
operator|.
name|decrease
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|ret
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|runGenericTest
parameter_list|(
name|int
name|threshold
parameter_list|,
name|int
name|delta
parameter_list|,
name|int
name|maxValueAllowed
parameter_list|,
name|int
name|numberOfThreads
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
name|SizeBasedThrottler
name|throttler
init|=
operator|new
name|SizeBasedThrottler
argument_list|(
name|threshold
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|failed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|(
name|numberOfThreads
argument_list|)
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|long
name|timeElapsed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
condition|;
operator|++
name|i
control|)
block|{
name|threads
operator|.
name|add
argument_list|(
name|makeThread
argument_list|(
name|throttler
argument_list|,
name|failed
argument_list|,
name|delta
argument_list|,
name|maxValueAllowed
argument_list|,
name|latch
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
try|try
block|{
name|long
name|beforeJoin
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|t
operator|.
name|join
argument_list|(
name|timeout
operator|-
name|timeElapsed
argument_list|)
expr_stmt|;
name|timeElapsed
operator|+=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|beforeJoin
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|isAlive
argument_list|()
operator|||
name|timeElapsed
operator|>=
name|timeout
condition|)
block|{
name|fail
argument_list|(
literal|"Timeout reached."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Got InterruptedException"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
name|failed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSmallIncreases
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REPEATS
condition|;
operator|++
name|i
control|)
block|{
name|runGenericTest
argument_list|(
literal|10
argument_list|,
comment|// threshold
literal|1
argument_list|,
comment|// delta
literal|15
argument_list|,
comment|// fail if throttler's value
comment|// exceeds 15
literal|1000
argument_list|,
comment|// use 1000 threads
literal|200
comment|// wait for 200ms
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBigIncreases
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REPEATS
condition|;
operator|++
name|i
control|)
block|{
name|runGenericTest
argument_list|(
literal|1
argument_list|,
comment|// threshold
literal|2
argument_list|,
comment|// delta
literal|4
argument_list|,
comment|// fail if throttler's value
comment|// exceeds 4
literal|1000
argument_list|,
comment|// use 1000 threads
literal|200
comment|// wait for 200ms
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncreasesEqualToThreshold
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REPEATS
condition|;
operator|++
name|i
control|)
block|{
name|runGenericTest
argument_list|(
literal|1
argument_list|,
comment|// threshold
literal|1
argument_list|,
comment|// delta
literal|2
argument_list|,
comment|// fail if throttler's value
comment|// exceeds 2
literal|1000
argument_list|,
comment|// use 1000 threads
literal|200
comment|// wait for 200ms
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

