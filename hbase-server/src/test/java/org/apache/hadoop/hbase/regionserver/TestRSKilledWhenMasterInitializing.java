begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TestMasterFailover
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|MasterThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestRSKilledWhenMasterInitializing
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMasterFailover
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TESTUTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_MASTERS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_RS
init|=
literal|4
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set it so that this test runs with my custom master
name|Configuration
name|conf
init|=
name|TESTUTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|HConstants
operator|.
name|MASTER_IMPL
argument_list|,
name|TestingMaster
operator|.
name|class
argument_list|,
name|HMaster
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MINTOSTART
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MAXTOSTART
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Start up the cluster.
name|TESTUTIL
operator|.
name|startMiniCluster
argument_list|(
name|NUM_MASTERS
argument_list|,
name|NUM_RS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|TESTUTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
comment|// master is not initialized and is waiting something forever.
for|for
control|(
name|MasterThread
name|mt
range|:
name|TESTUTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getLiveMasterThreads
argument_list|()
control|)
block|{
name|mt
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
name|TESTUTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * An HMaster instance used in this test. If 'TestingMaster.sleep' is set in    * the Configuration, then we'll sleep after log is split and we'll also    * return a custom RegionServerTracker.    */
specifier|public
specifier|static
class|class
name|TestingMaster
extends|extends
name|HMaster
block|{
specifier|private
name|boolean
name|logSplit
init|=
literal|false
decl_stmt|;
specifier|public
name|TestingMaster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|splitLogAfterStartup
parameter_list|(
name|MasterFileSystem
name|mfs
parameter_list|)
block|{
name|super
operator|.
name|splitLogAfterStartup
argument_list|(
name|mfs
argument_list|)
expr_stmt|;
name|logSplit
operator|=
literal|true
expr_stmt|;
comment|// If "TestingMaster.sleep" is set, sleep after log split.
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"TestingMaster.sleep"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|int
name|duration
init|=
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"TestingMaster.sleep.duration"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isLogSplitAfterStartup
parameter_list|()
block|{
return|return
name|logSplit
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testCorrectnessWhenMasterFailOver
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testCorrectnessWhenMasterFailOver"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
index|[]
name|SPLITKEYS
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
block|}
decl_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|TESTUTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|hbaseAdmin
init|=
name|TESTUTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|hbaseAdmin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|SPLITKEYS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hbaseAdmin
operator|.
name|isTableAvailable
argument_list|(
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|TESTUTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLENAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|put1
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"h"
argument_list|)
argument_list|)
decl_stmt|;
name|put2
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|Put
name|put3
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"o"
argument_list|)
argument_list|)
decl_stmt|;
name|put3
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|ResultScanner
name|resultScanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|resultScanner
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|resultScanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|/* Starting test */
name|cluster
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"TestingMaster.sleep"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"TestingMaster.sleep.duration"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
comment|/* NO.1 .META. region correctness */
comment|// First abort master
name|abortMaster
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|TestingMaster
name|master
init|=
name|startMasterAndWaitUntilLogSplit
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
comment|// Second kill meta server
name|int
name|metaServerNum
init|=
name|cluster
operator|.
name|getServerWithMeta
argument_list|()
decl_stmt|;
name|HRegionServer
name|metaRS
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|metaServerNum
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Killing metaRS"
argument_list|)
expr_stmt|;
name|metaRS
operator|.
name|kill
argument_list|()
expr_stmt|;
name|metaRS
operator|.
name|join
argument_list|()
expr_stmt|;
comment|/*      * Sleep double time of TestingMaster.sleep.duration, so we can ensure that      * master has already assigned META or is blocking on assigning      * META      */
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
operator|*
literal|2
argument_list|)
expr_stmt|;
name|waitUntilMasterIsInitialized
argument_list|(
name|master
argument_list|)
expr_stmt|;
comment|// Third check whether data is correct in meta region
name|assertTrue
argument_list|(
name|hbaseAdmin
operator|.
name|isTableAvailable
argument_list|(
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
comment|/* NO.2 data region correctness */
name|ServerManager
name|serverManager
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerManager
argument_list|()
decl_stmt|;
while|while
condition|(
name|serverManager
operator|.
name|areDeadServersInProgress
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// Create a ZKW to use in the test
name|ZooKeeperWatcher
name|zkw
init|=
name|HBaseTestingUtility
operator|.
name|getZooKeeperWatcher
argument_list|(
name|TESTUTIL
argument_list|)
decl_stmt|;
name|ZKAssign
operator|.
name|blockUntilNoRIT
argument_list|(
name|zkw
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|TESTUTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLENAME
argument_list|)
expr_stmt|;
name|resultScanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|resultScanner
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|resultScanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|abortMaster
parameter_list|(
name|MiniHBaseCluster
name|cluster
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|MasterThread
name|mt
range|:
name|cluster
operator|.
name|getLiveMasterThreads
argument_list|()
control|)
block|{
if|if
condition|(
name|mt
operator|.
name|getMaster
argument_list|()
operator|.
name|isActiveMaster
argument_list|()
condition|)
block|{
name|mt
operator|.
name|getMaster
argument_list|()
operator|.
name|abort
argument_list|(
literal|"Aborting for tests"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"Trace info"
argument_list|)
argument_list|)
expr_stmt|;
name|mt
operator|.
name|join
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Master is aborted"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TestingMaster
name|startMasterAndWaitUntilLogSplit
parameter_list|(
name|MiniHBaseCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TestingMaster
name|master
init|=
operator|(
name|TestingMaster
operator|)
name|cluster
operator|.
name|startMaster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|master
operator|.
name|isLogSplitAfterStartup
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"splitted:"
operator|+
name|master
operator|.
name|isLogSplitAfterStartup
argument_list|()
operator|+
literal|",initialized:"
operator|+
name|master
operator|.
name|isInitialized
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|master
return|;
block|}
specifier|private
name|void
name|waitUntilMasterIsInitialized
parameter_list|(
name|HMaster
name|master
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
operator|!
name|master
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"master isInitialized"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

