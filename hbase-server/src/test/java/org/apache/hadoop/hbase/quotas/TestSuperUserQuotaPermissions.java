begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessControlClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_comment
comment|/**  * Test class to verify that the HBase superuser can override quotas.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSuperUserQuotaPermissions
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSuperUserQuotaPermissions
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|// Default to the user running the tests
specifier|private
specifier|static
specifier|final
name|String
name|SUPERUSER_NAME
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|SUPERUSER_UGI
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|SUPERUSER_NAME
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REGULARUSER_NAME
init|=
literal|"quota_regularuser"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|REGULARUSER_UGI
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|REGULARUSER_NAME
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|COUNTER
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|SpaceQuotaHelperForTests
name|helper
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupMiniCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Increase the frequency of some of the chores for responsiveness of the test
name|SpaceQuotaHelperForTests
operator|.
name|updateConfigForQuotas
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|MASTER_COPROCESSOR_CONF_KEY
argument_list|,
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGIONSERVER_COPROCESSOR_CONF_KEY
argument_list|,
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.security.exec.permission.checks"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.security.authorization"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.superuser"
argument_list|,
name|SUPERUSER_NAME
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|removeAllQuotas
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|conn
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|==
literal|null
condition|)
block|{
name|helper
operator|=
operator|new
name|SpaceQuotaHelperForTests
argument_list|(
name|TEST_UTIL
argument_list|,
name|testName
argument_list|,
name|COUNTER
argument_list|)
expr_stmt|;
block|}
comment|// Wait for the quota table to be created
if|if
condition|(
operator|!
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
condition|)
block|{
name|helper
operator|.
name|waitForQuotaTable
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Or, clean up any quotas from previous test runs.
name|helper
operator|.
name|removeAllQuotas
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|helper
operator|.
name|listNumDefinedQuotas
argument_list|(
name|conn
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuperUserCanStillCompact
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a table and write enough data to push it into quota violation
specifier|final
name|TableName
name|tn
init|=
name|doAsSuperUser
argument_list|(
operator|new
name|Callable
argument_list|<
name|TableName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TableName
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|getConnection
argument_list|()
init|)
block|{
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
name|admin
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|long
name|sizeLimit
init|=
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|sizeLimit
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_WRITES_COMPACTIONS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// Grant the normal user permissions
try|try
block|{
name|AccessControlClient
operator|.
name|grant
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|,
name|REGULARUSER_NAME
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|t
throw|;
block|}
throw|throw
operator|new
name|Exception
argument_list|(
name|t
argument_list|)
throw|;
block|}
return|return
name|tn
return|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Write a bunch of data as our end-user
name|doAsRegularUser
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|getConnection
argument_list|()
init|)
block|{
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
literal|3L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|waitForTableToEnterQuotaViolation
argument_list|(
name|tn
argument_list|)
expr_stmt|;
comment|// Should throw an exception, unprivileged users cannot compact due to the quota
try|try
block|{
name|doAsRegularUser
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|getConnection
argument_list|()
init|)
block|{
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|majorCompact
argument_list|(
name|tn
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception trying to compact a table with a quota violation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
comment|// Should not throw an exception (superuser can do anything)
name|doAsSuperUser
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|getConnection
argument_list|()
init|)
block|{
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|majorCompact
argument_list|(
name|tn
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuperuserCanRemoveQuota
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a table and write enough data to push it into quota violation
specifier|final
name|TableName
name|tn
init|=
name|doAsSuperUser
argument_list|(
operator|new
name|Callable
argument_list|<
name|TableName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TableName
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|getConnection
argument_list|()
init|)
block|{
specifier|final
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
name|admin
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|long
name|sizeLimit
init|=
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|sizeLimit
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_WRITES_COMPACTIONS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// Grant the normal user permission to create a table and set a quota
try|try
block|{
name|AccessControlClient
operator|.
name|grant
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|,
name|REGULARUSER_NAME
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|t
throw|;
block|}
throw|throw
operator|new
name|Exception
argument_list|(
name|t
argument_list|)
throw|;
block|}
return|return
name|tn
return|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Write a bunch of data as our end-user
name|doAsRegularUser
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|getConnection
argument_list|()
init|)
block|{
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
literal|3L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Wait for the table to hit quota violation
name|waitForTableToEnterQuotaViolation
argument_list|(
name|tn
argument_list|)
expr_stmt|;
comment|// Try to be "bad" and remove the quota as the end user (we want to write more data!)
name|doAsRegularUser
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|getConnection
argument_list|()
init|)
block|{
specifier|final
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|QuotaSettings
name|qs
init|=
name|QuotaSettingsFactory
operator|.
name|removeTableSpaceLimit
argument_list|(
name|tn
argument_list|)
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|setQuota
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected that an unprivileged user should not be allowed to remove a quota"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// pass
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Verify that the superuser can remove the quota
name|doAsSuperUser
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|getConnection
argument_list|()
init|)
block|{
specifier|final
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|QuotaSettings
name|qs
init|=
name|QuotaSettingsFactory
operator|.
name|removeTableSpaceLimit
argument_list|(
name|tn
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|helper
operator|.
name|getTableSpaceQuota
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|doAsSuperUser
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|task
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|doAsUser
argument_list|(
name|SUPERUSER_UGI
argument_list|,
name|task
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|doAsRegularUser
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|task
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|doAsUser
argument_list|(
name|REGULARUSER_UGI
argument_list|,
name|task
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|doAsUser
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|Callable
argument_list|<
name|T
argument_list|>
name|task
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|T
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|task
operator|.
name|call
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|void
name|waitForTableToEnterQuotaViolation
parameter_list|(
name|TableName
name|tn
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Verify that the RegionServer has the quota in violation
specifier|final
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Waiter
operator|.
name|waitFor
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|30
operator|*
literal|1000
argument_list|,
literal|1000
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|snapshots
init|=
name|rs
operator|.
name|getRegionServerSpaceQuotaManager
argument_list|()
operator|.
name|copyQuotaSnapshots
argument_list|()
decl_stmt|;
name|SpaceQuotaSnapshot
name|snapshot
init|=
name|snapshots
operator|.
name|get
argument_list|(
name|tn
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found no snapshot for "
operator|+
name|tn
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Found snapshot "
operator|+
name|snapshot
argument_list|)
expr_stmt|;
return|return
name|snapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|isInViolation
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

