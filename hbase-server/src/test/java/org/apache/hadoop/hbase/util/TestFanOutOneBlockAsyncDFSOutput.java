begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoop
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestFanOutOneBlockAsyncDFSOutput
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|DistributedFileSystem
name|FS
decl_stmt|;
specifier|private
specifier|static
name|EventLoopGroup
name|EVENT_LOOP_GROUP
decl_stmt|;
specifier|private
specifier|static
name|int
name|READ_TIMEOUT_MS
init|=
literal|2000
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hdfs.StateChange"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"BlockStateChange"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
argument_list|,
name|READ_TIMEOUT_MS
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniDFSCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|FS
operator|=
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|EVENT_LOOP_GROUP
operator|=
operator|new
name|NioEventLoopGroup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|EVENT_LOOP_GROUP
operator|!=
literal|null
condition|)
block|{
name|EVENT_LOOP_GROUP
operator|.
name|shutdownGracefully
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|shutdownMiniDFSCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|writeAndVerify
parameter_list|(
name|EventLoop
name|eventLoop
parameter_list|,
name|Path
name|f
parameter_list|,
specifier|final
name|FanOutOneBlockAsyncDFSOutput
name|out
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
specifier|final
name|FanOutOneBlockAsyncDFSOutputFlushHandler
name|handler
init|=
operator|new
name|FanOutOneBlockAsyncDFSOutputFlushHandler
argument_list|()
decl_stmt|;
name|eventLoop
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|(
literal|null
argument_list|,
name|handler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
operator|.
name|length
argument_list|,
name|handler
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|b
operator|.
name|length
argument_list|,
name|FS
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
operator|new
name|byte
index|[
name|b
operator|.
name|length
index|]
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|FS
operator|.
name|open
argument_list|(
name|f
argument_list|)
init|)
block|{
name|in
operator|.
name|readFully
argument_list|(
name|actual
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|b
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|EventLoop
name|eventLoop
init|=
name|EVENT_LOOP_GROUP
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|FanOutOneBlockAsyncDFSOutput
name|out
init|=
name|FanOutOneBlockAsyncDFSOutputHelper
operator|.
name|createOutput
argument_list|(
name|FS
argument_list|,
name|f
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
name|FS
operator|.
name|getDefaultBlockSize
argument_list|()
argument_list|,
name|eventLoop
argument_list|)
decl_stmt|;
name|writeAndVerify
argument_list|(
name|eventLoop
argument_list|,
name|f
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecover
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|EventLoop
name|eventLoop
init|=
name|EVENT_LOOP_GROUP
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|FanOutOneBlockAsyncDFSOutput
name|out
init|=
name|FanOutOneBlockAsyncDFSOutputHelper
operator|.
name|createOutput
argument_list|(
name|FS
argument_list|,
name|f
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
name|FS
operator|.
name|getDefaultBlockSize
argument_list|()
argument_list|,
name|eventLoop
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
specifier|final
name|FanOutOneBlockAsyncDFSOutputFlushHandler
name|handler
init|=
operator|new
name|FanOutOneBlockAsyncDFSOutputFlushHandler
argument_list|()
decl_stmt|;
name|eventLoop
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|(
literal|null
argument_list|,
name|handler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|handler
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// restart one datanode which causes one connection broken
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|restartDataNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|handler
operator|.
name|reset
argument_list|()
expr_stmt|;
name|eventLoop
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|(
literal|null
argument_list|,
name|handler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"flush should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// we restarted one datanode so the flush should fail
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|recoverAndClose
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
operator|.
name|length
argument_list|,
name|FS
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
operator|new
name|byte
index|[
name|b
operator|.
name|length
index|]
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|FS
operator|.
name|open
argument_list|(
name|f
argument_list|)
init|)
block|{
name|in
operator|.
name|readFully
argument_list|(
name|actual
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|b
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeartbeat
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|EventLoop
name|eventLoop
init|=
name|EVENT_LOOP_GROUP
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|FanOutOneBlockAsyncDFSOutput
name|out
init|=
name|FanOutOneBlockAsyncDFSOutputHelper
operator|.
name|createOutput
argument_list|(
name|FS
argument_list|,
name|f
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
name|FS
operator|.
name|getDefaultBlockSize
argument_list|()
argument_list|,
name|eventLoop
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|READ_TIMEOUT_MS
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// the connection to datanode should still alive.
name|writeAndVerify
argument_list|(
name|eventLoop
argument_list|,
name|f
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is important for fencing when recover from RS crash.    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateParentFailed
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"/test"
argument_list|)
decl_stmt|;
name|EventLoop
name|eventLoop
init|=
name|EVENT_LOOP_GROUP
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|FanOutOneBlockAsyncDFSOutputHelper
operator|.
name|createOutput
argument_list|(
name|FS
argument_list|,
name|f
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
name|FS
operator|.
name|getDefaultBlockSize
argument_list|()
argument_list|,
name|eventLoop
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should fail with parent does not exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|unwrapRemoteException
argument_list|()
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

