begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verifyNoMoreInteractions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|util
operator|.
name|BlockIOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|ByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|MultiByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|SingleByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestBlockIOUtils
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestBlockIOUtils
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testIsByteBufferReadable
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDirOnTestFS
argument_list|()
argument_list|,
literal|"testIsByteBufferReadable"
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
init|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|23
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|FSDataInputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
init|)
block|{
name|assertFalse
argument_list|(
name|BlockIOUtils
operator|.
name|isByteBufferReadable
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadFully
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDirOnTestFS
argument_list|()
argument_list|,
literal|"testReadFully"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
literal|"hello world"
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
init|)
block|{
name|out
operator|.
name|writeBytes
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|ByteBuff
name|buf
init|=
operator|new
name|SingleByteBuff
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|11
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
init|)
block|{
name|BlockIOUtils
operator|.
name|readFully
argument_list|(
name|buf
argument_list|,
name|in
argument_list|,
literal|11
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|byte
index|[]
name|heapBuf
init|=
operator|new
name|byte
index|[
name|s
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
name|buf
operator|.
name|get
argument_list|(
name|heapBuf
argument_list|,
literal|0
argument_list|,
name|heapBuf
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|s
argument_list|)
argument_list|,
name|heapBuf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadWithExtra
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDirOnTestFS
argument_list|()
argument_list|,
literal|"testReadWithExtra"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
literal|"hello world"
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
init|)
block|{
name|out
operator|.
name|writeBytes
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|ByteBuff
name|buf
init|=
operator|new
name|SingleByteBuff
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|BlockIOUtils
operator|.
name|readWithExtra
argument_list|(
name|buf
argument_list|,
name|in
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|byte
index|[]
name|heapBuf
init|=
operator|new
name|byte
index|[
name|buf
operator|.
name|capacity
argument_list|()
index|]
decl_stmt|;
name|buf
operator|.
name|get
argument_list|(
name|heapBuf
argument_list|,
literal|0
argument_list|,
name|heapBuf
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hello wo"
argument_list|)
argument_list|,
name|heapBuf
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|new
name|MultiByteBuff
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|BlockIOUtils
operator|.
name|readWithExtra
argument_list|(
name|buf
argument_list|,
name|in
argument_list|,
literal|8
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|heapBuf
operator|=
operator|new
name|byte
index|[
literal|11
index|]
expr_stmt|;
name|buf
operator|.
name|get
argument_list|(
name|heapBuf
argument_list|,
literal|0
argument_list|,
name|heapBuf
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hello world"
argument_list|)
argument_list|,
name|heapBuf
argument_list|)
expr_stmt|;
name|buf
operator|.
name|position
argument_list|(
literal|0
argument_list|)
operator|.
name|limit
argument_list|(
literal|12
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
init|)
block|{
try|try
block|{
name|BlockIOUtils
operator|.
name|readWithExtra
argument_list|(
name|buf
argument_list|,
name|in
argument_list|,
literal|12
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should only read 11 bytes"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{        }
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPositionalReadNoExtra
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|position
init|=
literal|0
decl_stmt|;
name|int
name|bufOffset
init|=
literal|0
decl_stmt|;
name|int
name|necessaryLen
init|=
literal|10
decl_stmt|;
name|int
name|extraLen
init|=
literal|0
decl_stmt|;
name|int
name|totalLen
init|=
name|necessaryLen
operator|+
name|extraLen
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|totalLen
index|]
decl_stmt|;
name|ByteBuff
name|bb
init|=
operator|new
name|SingleByteBuff
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|totalLen
argument_list|)
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|mock
argument_list|(
name|FSDataInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|totalLen
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|BlockIOUtils
operator|.
name|preadWithExtra
argument_list|(
name|bb
argument_list|,
name|in
argument_list|,
name|position
argument_list|,
name|necessaryLen
argument_list|,
name|extraLen
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Expect false return when no extra bytes requested"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|in
argument_list|)
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPositionalReadShortReadOfNecessaryBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|position
init|=
literal|0
decl_stmt|;
name|int
name|bufOffset
init|=
literal|0
decl_stmt|;
name|int
name|necessaryLen
init|=
literal|10
decl_stmt|;
name|int
name|extraLen
init|=
literal|0
decl_stmt|;
name|int
name|totalLen
init|=
name|necessaryLen
operator|+
name|extraLen
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|totalLen
index|]
decl_stmt|;
name|ByteBuff
name|bb
init|=
operator|new
name|SingleByteBuff
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|totalLen
argument_list|)
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|mock
argument_list|(
name|FSDataInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
literal|5
argument_list|,
name|buf
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|BlockIOUtils
operator|.
name|preadWithExtra
argument_list|(
name|bb
argument_list|,
name|in
argument_list|,
name|position
argument_list|,
name|necessaryLen
argument_list|,
name|extraLen
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Expect false return when no extra bytes requested"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|in
argument_list|)
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|in
argument_list|)
operator|.
name|read
argument_list|(
literal|5
argument_list|,
name|buf
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPositionalReadExtraSucceeded
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|position
init|=
literal|0
decl_stmt|;
name|int
name|bufOffset
init|=
literal|0
decl_stmt|;
name|int
name|necessaryLen
init|=
literal|10
decl_stmt|;
name|int
name|extraLen
init|=
literal|5
decl_stmt|;
name|int
name|totalLen
init|=
name|necessaryLen
operator|+
name|extraLen
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|totalLen
index|]
decl_stmt|;
name|ByteBuff
name|bb
init|=
operator|new
name|SingleByteBuff
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|totalLen
argument_list|)
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|mock
argument_list|(
name|FSDataInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|totalLen
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|BlockIOUtils
operator|.
name|preadWithExtra
argument_list|(
name|bb
argument_list|,
name|in
argument_list|,
name|position
argument_list|,
name|necessaryLen
argument_list|,
name|extraLen
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expect true return when reading extra bytes succeeds"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|in
argument_list|)
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPositionalReadExtraFailed
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|position
init|=
literal|0
decl_stmt|;
name|int
name|bufOffset
init|=
literal|0
decl_stmt|;
name|int
name|necessaryLen
init|=
literal|10
decl_stmt|;
name|int
name|extraLen
init|=
literal|5
decl_stmt|;
name|int
name|totalLen
init|=
name|necessaryLen
operator|+
name|extraLen
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|totalLen
index|]
decl_stmt|;
name|ByteBuff
name|bb
init|=
operator|new
name|SingleByteBuff
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|totalLen
argument_list|)
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|mock
argument_list|(
name|FSDataInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|necessaryLen
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|BlockIOUtils
operator|.
name|preadWithExtra
argument_list|(
name|bb
argument_list|,
name|in
argument_list|,
name|position
argument_list|,
name|necessaryLen
argument_list|,
name|extraLen
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Expect false return when reading extra bytes fails"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|in
argument_list|)
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPositionalReadShortReadCompletesNecessaryAndExtraBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|position
init|=
literal|0
decl_stmt|;
name|int
name|bufOffset
init|=
literal|0
decl_stmt|;
name|int
name|necessaryLen
init|=
literal|10
decl_stmt|;
name|int
name|extraLen
init|=
literal|5
decl_stmt|;
name|int
name|totalLen
init|=
name|necessaryLen
operator|+
name|extraLen
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|totalLen
index|]
decl_stmt|;
name|ByteBuff
name|bb
init|=
operator|new
name|SingleByteBuff
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|totalLen
argument_list|)
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|mock
argument_list|(
name|FSDataInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
literal|5
argument_list|,
name|buf
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|BlockIOUtils
operator|.
name|preadWithExtra
argument_list|(
name|bb
argument_list|,
name|in
argument_list|,
name|position
argument_list|,
name|necessaryLen
argument_list|,
name|extraLen
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expect true return when reading extra bytes succeeds"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|in
argument_list|)
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|in
argument_list|)
operator|.
name|read
argument_list|(
literal|5
argument_list|,
name|buf
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPositionalReadPrematureEOF
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|position
init|=
literal|0
decl_stmt|;
name|int
name|bufOffset
init|=
literal|0
decl_stmt|;
name|int
name|necessaryLen
init|=
literal|10
decl_stmt|;
name|int
name|extraLen
init|=
literal|0
decl_stmt|;
name|int
name|totalLen
init|=
name|necessaryLen
operator|+
name|extraLen
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|totalLen
index|]
decl_stmt|;
name|ByteBuff
name|bb
init|=
operator|new
name|SingleByteBuff
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|totalLen
argument_list|)
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|mock
argument_list|(
name|FSDataInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"EOF"
argument_list|)
expr_stmt|;
name|BlockIOUtils
operator|.
name|preadWithExtra
argument_list|(
name|bb
argument_list|,
name|in
argument_list|,
name|position
argument_list|,
name|necessaryLen
argument_list|,
name|extraLen
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

