begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|querymatcher
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeepDeletedCells
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|querymatcher
operator|.
name|ScanQueryMatcher
operator|.
name|MatchCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestUserScanQueryMatcher
extends|extends
name|AbstractTestScanQueryMatcher
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestUserScanQueryMatcher
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * This is a cryptic test. It is checking that we don't include a fake cell, one that has a    * timestamp of {@link HConstants#OLDEST_TIMESTAMP}. See HBASE-16074 for background.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testNeverIncludeFakeCell
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
comment|// Do with fam2 which has a col2 qualifier.
name|UserScanQueryMatcher
name|qm
init|=
name|UserScanQueryMatcher
operator|.
name|create
argument_list|(
name|scan
argument_list|,
operator|new
name|ScanInfo
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|fam2
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
name|ttl
argument_list|,
name|KeepDeletedCells
operator|.
name|FALSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
literal|0
argument_list|,
name|rowComparator
argument_list|,
literal|false
argument_list|)
argument_list|,
name|get
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|fam2
argument_list|)
argument_list|,
name|now
operator|-
name|ttl
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Cell
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col2
argument_list|,
literal|1
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|Cell
name|cell
init|=
name|CellUtil
operator|.
name|createLastOnRowCol
argument_list|(
name|kv
argument_list|)
decl_stmt|;
name|qm
operator|.
name|setToNewRow
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|MatchCode
name|code
init|=
name|qm
operator|.
name|match
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|code
operator|.
name|compareTo
argument_list|(
name|MatchCode
operator|.
name|SEEK_NEXT_COL
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchExplicitColumns
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Moving up from the Tracker by using Gets and List<KeyValue> instead
comment|// of just byte []
comment|// Expected result
name|List
argument_list|<
name|MatchCode
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|SEEK_NEXT_COL
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_COL
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|SEEK_NEXT_COL
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_COL
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|DONE
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
comment|// 2,4,5
name|UserScanQueryMatcher
name|qm
init|=
name|UserScanQueryMatcher
operator|.
name|create
argument_list|(
name|scan
argument_list|,
operator|new
name|ScanInfo
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|fam2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|ttl
argument_list|,
name|KeepDeletedCells
operator|.
name|FALSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
literal|0
argument_list|,
name|rowComparator
argument_list|,
literal|false
argument_list|)
argument_list|,
name|get
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|fam2
argument_list|)
argument_list|,
name|now
operator|-
name|ttl
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|memstore
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col1
argument_list|,
literal|1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col2
argument_list|,
literal|1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col3
argument_list|,
literal|1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col4
argument_list|,
literal|1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col5
argument_list|,
literal|1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ScanQueryMatcher
operator|.
name|MatchCode
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|memstore
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|KeyValue
name|k
init|=
name|memstore
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|qm
operator|.
name|setToNewRow
argument_list|(
name|k
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|memstore
control|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|qm
operator|.
name|match
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"expected "
operator|+
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|", actual "
operator|+
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatch_Wildcard
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Moving up from the Tracker by using Gets and List<KeyValue> instead
comment|// of just byte []
comment|// Expected result
name|List
argument_list|<
name|MatchCode
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|DONE
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|UserScanQueryMatcher
name|qm
init|=
name|UserScanQueryMatcher
operator|.
name|create
argument_list|(
name|scan
argument_list|,
operator|new
name|ScanInfo
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|fam2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|ttl
argument_list|,
name|KeepDeletedCells
operator|.
name|FALSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
literal|0
argument_list|,
name|rowComparator
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|null
argument_list|,
name|now
operator|-
name|ttl
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|memstore
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col1
argument_list|,
literal|1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col2
argument_list|,
literal|1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col3
argument_list|,
literal|1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col4
argument_list|,
literal|1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col5
argument_list|,
literal|1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
literal|1
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ScanQueryMatcher
operator|.
name|MatchCode
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|memstore
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|KeyValue
name|k
init|=
name|memstore
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|qm
operator|.
name|setToNewRow
argument_list|(
name|k
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|memstore
control|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|qm
operator|.
name|match
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"expected "
operator|+
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|", actual "
operator|+
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify that {@link ScanQueryMatcher} only skips expired KeyValue instances and does not exit    * early from the row (skipping later non-expired KeyValues). This version mimics a Get with    * explicitly specified column qualifiers.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testMatch_ExpiredExplicit
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|testTTL
init|=
literal|1000
decl_stmt|;
name|MatchCode
index|[]
name|expected
init|=
operator|new
name|MatchCode
index|[]
block|{
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|SEEK_NEXT_COL
block|,
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_COL
block|,
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|SEEK_NEXT_COL
block|,
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_COL
block|,
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|SEEK_NEXT_ROW
block|,
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|DONE
block|}
decl_stmt|;
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|UserScanQueryMatcher
name|qm
init|=
name|UserScanQueryMatcher
operator|.
name|create
argument_list|(
name|scan
argument_list|,
operator|new
name|ScanInfo
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|fam2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|testTTL
argument_list|,
name|KeepDeletedCells
operator|.
name|FALSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
literal|0
argument_list|,
name|rowComparator
argument_list|,
literal|false
argument_list|)
argument_list|,
name|get
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|fam2
argument_list|)
argument_list|,
name|now
operator|-
name|testTTL
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col1
argument_list|,
name|now
operator|-
literal|100
argument_list|,
name|data
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col2
argument_list|,
name|now
operator|-
literal|50
argument_list|,
name|data
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col3
argument_list|,
name|now
operator|-
literal|5000
argument_list|,
name|data
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col4
argument_list|,
name|now
operator|-
literal|500
argument_list|,
name|data
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col5
argument_list|,
name|now
operator|-
literal|10000
argument_list|,
name|data
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|now
operator|-
literal|10
argument_list|,
name|data
argument_list|)
block|}
decl_stmt|;
name|KeyValue
name|k
init|=
name|kvs
index|[
literal|0
index|]
decl_stmt|;
name|qm
operator|.
name|setToNewRow
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MatchCode
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|kvs
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|qm
operator|.
name|match
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"expected "
operator|+
name|expected
index|[
name|i
index|]
operator|+
literal|", actual "
operator|+
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify that {@link ScanQueryMatcher} only skips expired KeyValue instances and does not exit    * early from the row (skipping later non-expired KeyValues). This version mimics a Get with    * wildcard-inferred column qualifiers.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testMatch_ExpiredWildcard
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|testTTL
init|=
literal|1000
decl_stmt|;
name|MatchCode
index|[]
name|expected
init|=
operator|new
name|MatchCode
index|[]
block|{
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE
block|,
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE
block|,
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|SEEK_NEXT_COL
block|,
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|INCLUDE
block|,
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|SEEK_NEXT_COL
block|,
name|ScanQueryMatcher
operator|.
name|MatchCode
operator|.
name|DONE
block|}
decl_stmt|;
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|UserScanQueryMatcher
name|qm
init|=
name|UserScanQueryMatcher
operator|.
name|create
argument_list|(
name|scan
argument_list|,
operator|new
name|ScanInfo
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|fam2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|testTTL
argument_list|,
name|KeepDeletedCells
operator|.
name|FALSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
literal|0
argument_list|,
name|rowComparator
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|null
argument_list|,
name|now
operator|-
name|testTTL
argument_list|,
name|now
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col1
argument_list|,
name|now
operator|-
literal|100
argument_list|,
name|data
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col2
argument_list|,
name|now
operator|-
literal|50
argument_list|,
name|data
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col3
argument_list|,
name|now
operator|-
literal|5000
argument_list|,
name|data
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col4
argument_list|,
name|now
operator|-
literal|500
argument_list|,
name|data
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|col5
argument_list|,
name|now
operator|-
literal|10000
argument_list|,
name|data
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
name|now
operator|-
literal|10
argument_list|,
name|data
argument_list|)
block|}
decl_stmt|;
name|KeyValue
name|k
init|=
name|kvs
index|[
literal|0
index|]
decl_stmt|;
name|qm
operator|.
name|setToNewRow
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ScanQueryMatcher
operator|.
name|MatchCode
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|kvs
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|qm
operator|.
name|match
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"expected "
operator|+
name|expected
index|[
name|i
index|]
operator|+
literal|", actual "
operator|+
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

