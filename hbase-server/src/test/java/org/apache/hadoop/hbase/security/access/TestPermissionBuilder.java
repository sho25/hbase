begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SecurityTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SecurityTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestPermissionBuilder
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestPermissionBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testBuildGlobalPermission
parameter_list|()
block|{
comment|// check global permission with empty action
name|Permission
name|permission
init|=
name|Permission
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|instanceof
name|GlobalPermission
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// check global permission with ADMIN action
name|permission
operator|=
name|Permission
operator|.
name|newBuilder
argument_list|()
operator|.
name|withActions
argument_list|(
name|Action
operator|.
name|ADMIN
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|instanceof
name|GlobalPermission
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|.
name|getActions
argument_list|()
index|[
literal|0
index|]
operator|==
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
try|try
block|{
name|permission
operator|=
name|Permission
operator|.
name|newBuilder
argument_list|()
operator|.
name|withQualifier
argument_list|(
name|qualifier
argument_list|)
operator|.
name|withActions
argument_list|(
name|Action
operator|.
name|CREATE
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// catch NPE because set family but table name is null
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildNamespacePermission
parameter_list|()
block|{
name|String
name|namespace
init|=
literal|"ns"
decl_stmt|;
comment|// check namespace permission with CREATE and READ actions
name|Permission
name|permission
init|=
name|Permission
operator|.
name|newBuilder
argument_list|(
name|namespace
argument_list|)
operator|.
name|withActions
argument_list|(
name|Action
operator|.
name|CREATE
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|instanceof
name|NamespacePermission
argument_list|)
expr_stmt|;
name|NamespacePermission
name|namespacePermission
init|=
operator|(
name|NamespacePermission
operator|)
name|permission
decl_stmt|;
name|assertEquals
argument_list|(
name|namespace
argument_list|,
name|namespacePermission
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Action
operator|.
name|READ
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Action
operator|.
name|CREATE
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
try|try
block|{
name|permission
operator|=
name|Permission
operator|.
name|newBuilder
argument_list|(
name|namespace
argument_list|)
operator|.
name|withFamily
argument_list|(
name|family
argument_list|)
operator|.
name|withActions
argument_list|(
name|Action
operator|.
name|CREATE
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// catch NPE because set family but table name is null
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildTablePermission
parameter_list|()
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"ns"
argument_list|,
literal|"table"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
comment|// check table permission without family or qualifier
name|Permission
name|permission
init|=
name|Permission
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|withActions
argument_list|(
name|Action
operator|.
name|WRITE
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|instanceof
name|TablePermission
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Action
operator|.
name|READ
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Action
operator|.
name|WRITE
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|TablePermission
name|tPerm
init|=
operator|(
name|TablePermission
operator|)
name|permission
decl_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|tPerm
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|tPerm
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|tPerm
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// check table permission with family
name|permission
operator|=
name|Permission
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|withFamily
argument_list|(
name|family
argument_list|)
operator|.
name|withActions
argument_list|(
name|Action
operator|.
name|EXEC
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|instanceof
name|TablePermission
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Action
operator|.
name|EXEC
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|tPerm
operator|=
operator|(
name|TablePermission
operator|)
name|permission
expr_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|tPerm
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|family
argument_list|,
name|tPerm
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
literal|null
argument_list|,
name|tPerm
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check table permission with family and qualifier
name|permission
operator|=
name|Permission
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|withFamily
argument_list|(
name|family
argument_list|)
operator|.
name|withQualifier
argument_list|(
name|qualifier
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|permission
operator|instanceof
name|TablePermission
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|tPerm
operator|=
operator|(
name|TablePermission
operator|)
name|permission
expr_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|tPerm
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|family
argument_list|,
name|tPerm
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|qualifier
argument_list|,
name|tPerm
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

