begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|Quotas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|SpaceLimitRequest
import|;
end_import

begin_comment
comment|/**  * minicluster tests that validate that quota  entries are properly set in the quota table  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestQuotaAdmin
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestQuotaAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestQuotaAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_CONF_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|QuotaCache
operator|.
name|REFRESH_CONF_KEY
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.msginterval"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|250
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.master.enabletable.roundrobin"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|clearQuotaTable
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
condition|)
block|{
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|truncateTable
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThrottleType
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|ThrottleType
operator|.
name|READ_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|12
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|bypassGlobals
argument_list|(
name|userName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|QuotaRetriever
name|scanner
init|=
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
name|int
name|countThrottle
init|=
literal|0
decl_stmt|;
name|int
name|countGlobalBypass
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QuotaSettings
name|settings
range|:
name|scanner
control|)
block|{
switch|switch
condition|(
name|settings
operator|.
name|getQuotaType
argument_list|()
condition|)
block|{
case|case
name|THROTTLE
case|:
name|ThrottleSettings
name|throttle
init|=
operator|(
name|ThrottleSettings
operator|)
name|settings
decl_stmt|;
if|if
condition|(
name|throttle
operator|.
name|getSoftLimit
argument_list|()
operator|==
literal|6
condition|)
block|{
name|assertEquals
argument_list|(
name|ThrottleType
operator|.
name|READ_NUMBER
argument_list|,
name|throttle
operator|.
name|getThrottleType
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|throttle
operator|.
name|getSoftLimit
argument_list|()
operator|==
literal|12
condition|)
block|{
name|assertEquals
argument_list|(
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
name|throttle
operator|.
name|getThrottleType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"should not come here, because don't set quota with this limit"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|throttle
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|throttle
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|throttle
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|throttle
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
expr_stmt|;
name|countThrottle
operator|++
expr_stmt|;
break|break;
case|case
name|GLOBAL_BYPASS
case|:
name|countGlobalBypass
operator|++
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"unexpected settings type: "
operator|+
name|settings
operator|.
name|getQuotaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|countThrottle
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countGlobalBypass
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUser
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|bypassGlobals
argument_list|(
name|userName
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleScan
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|bypassGlobals
argument_list|(
name|userName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|QuotaRetriever
name|scanner
init|=
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
name|int
name|countThrottle
init|=
literal|0
decl_stmt|;
name|int
name|countGlobalBypass
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QuotaSettings
name|settings
range|:
name|scanner
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|Objects
operator|.
name|toString
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|settings
operator|.
name|getQuotaType
argument_list|()
condition|)
block|{
case|case
name|THROTTLE
case|:
name|ThrottleSettings
name|throttle
init|=
operator|(
name|ThrottleSettings
operator|)
name|settings
decl_stmt|;
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|throttle
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|throttle
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|throttle
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|throttle
operator|.
name|getSoftLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|throttle
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
expr_stmt|;
name|countThrottle
operator|++
expr_stmt|;
break|break;
case|case
name|GLOBAL_BYPASS
case|:
name|countGlobalBypass
operator|++
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"unexpected settings type: "
operator|+
name|settings
operator|.
name|getQuotaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countThrottle
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countGlobalBypass
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUser
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|bypassGlobals
argument_list|(
name|userName
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiQuotaThrottling
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValue"
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testMultiQuotaThrottling"
argument_list|)
decl_stmt|;
name|TableDescriptor
name|desc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// Set up the quota.
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|tableName
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getRegionServerRpcQuotaManager
argument_list|()
operator|.
name|getQuotaCache
argument_list|()
operator|.
name|triggerCacheRefresh
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|size
init|=
literal|5
decl_stmt|;
name|List
name|actions
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put1
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|put1
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|batch
argument_list|(
name|actions
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|t
operator|.
name|batch
argument_list|(
name|actions
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Not supposed to get ThrottlingExcepiton "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQuotaRetrieverFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|TableName
index|[]
name|tables
init|=
operator|new
name|TableName
index|[]
block|{
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"T0"
argument_list|)
block|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"T01"
argument_list|)
block|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"NS0:T2"
argument_list|)
block|,     }
decl_stmt|;
name|String
index|[]
name|namespaces
init|=
operator|new
name|String
index|[]
block|{
literal|"NS0"
block|,
literal|"NS01"
block|,
literal|"NS2"
block|}
decl_stmt|;
name|String
index|[]
name|users
init|=
operator|new
name|String
index|[]
block|{
literal|"User0"
block|,
literal|"User01"
block|,
literal|"User2"
block|}
decl_stmt|;
for|for
control|(
name|String
name|user
range|:
name|users
control|)
block|{
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|user
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|tables
control|)
block|{
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|user
argument_list|,
name|table
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|ns
range|:
name|namespaces
control|)
block|{
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|user
argument_list|,
name|ns
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|3
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNumResults
argument_list|(
literal|21
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|tables
control|)
block|{
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|table
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|4
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNumResults
argument_list|(
literal|24
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|namespaces
control|)
block|{
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleNamespace
argument_list|(
name|ns
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNumResults
argument_list|(
literal|27
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|7
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setUserFilter
argument_list|(
literal|"User0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|0
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setUserFilter
argument_list|(
literal|"User"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|21
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setUserFilter
argument_list|(
literal|"User.*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|3
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setUserFilter
argument_list|(
literal|"User.*"
argument_list|)
operator|.
name|setTableFilter
argument_list|(
literal|"T0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|3
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setUserFilter
argument_list|(
literal|"User.*"
argument_list|)
operator|.
name|setTableFilter
argument_list|(
literal|"NS.*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|0
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setUserFilter
argument_list|(
literal|"User.*"
argument_list|)
operator|.
name|setTableFilter
argument_list|(
literal|"T"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|6
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setUserFilter
argument_list|(
literal|"User.*"
argument_list|)
operator|.
name|setTableFilter
argument_list|(
literal|"T.*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|3
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setUserFilter
argument_list|(
literal|"User.*"
argument_list|)
operator|.
name|setNamespaceFilter
argument_list|(
literal|"NS0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|0
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setUserFilter
argument_list|(
literal|"User.*"
argument_list|)
operator|.
name|setNamespaceFilter
argument_list|(
literal|"NS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|9
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setUserFilter
argument_list|(
literal|"User.*"
argument_list|)
operator|.
name|setNamespaceFilter
argument_list|(
literal|"NS.*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|6
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setUserFilter
argument_list|(
literal|"User.*"
argument_list|)
operator|.
name|setTableFilter
argument_list|(
literal|"T0"
argument_list|)
operator|.
name|setNamespaceFilter
argument_list|(
literal|"NS0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|1
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setTableFilter
argument_list|(
literal|"T0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|0
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setTableFilter
argument_list|(
literal|"T"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|2
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setTableFilter
argument_list|(
literal|"T.*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|3
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setTableFilter
argument_list|(
literal|".*T.*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|1
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setNamespaceFilter
argument_list|(
literal|"NS0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|0
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setNamespaceFilter
argument_list|(
literal|"NS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumResults
argument_list|(
literal|3
argument_list|,
operator|new
name|QuotaFilter
argument_list|()
operator|.
name|setNamespaceFilter
argument_list|(
literal|"NS.*"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|user
range|:
name|users
control|)
block|{
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUser
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|tables
control|)
block|{
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUser
argument_list|(
name|user
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|ns
range|:
name|namespaces
control|)
block|{
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUser
argument_list|(
name|user
argument_list|,
name|ns
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNumResults
argument_list|(
literal|6
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|tables
control|)
block|{
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleTable
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNumResults
argument_list|(
literal|3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|namespaces
control|)
block|{
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleNamespace
argument_list|(
name|ns
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNumResults
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetGetRemoveSpaceQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"sq_table1"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|sizeLimit
init|=
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|5L
decl_stmt|;
comment|// 5TB
specifier|final
name|SpaceViolationPolicy
name|violationPolicy
init|=
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
decl_stmt|;
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|sizeLimit
argument_list|,
name|violationPolicy
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// Verify the Quotas in the table
try|try
init|(
name|Table
name|quotaTable
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
init|)
block|{
name|ResultScanner
name|scanner
init|=
name|quotaTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
name|r
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|scanner
argument_list|)
decl_stmt|;
name|CellScanner
name|cells
init|=
name|r
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected to find a cell"
argument_list|,
name|cells
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|assertSpaceQuota
argument_list|(
name|sizeLimit
argument_list|,
name|violationPolicy
argument_list|,
name|cells
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Verify we can retrieve it via the QuotaRetriever API
name|QuotaRetriever
name|scanner
init|=
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|admin
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|assertSpaceQuota
argument_list|(
name|sizeLimit
argument_list|,
name|violationPolicy
argument_list|,
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|scanner
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Now, remove the quota
name|QuotaSettings
name|removeQuota
init|=
name|QuotaSettingsFactory
operator|.
name|removeTableSpaceLimit
argument_list|(
name|tn
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|removeQuota
argument_list|)
expr_stmt|;
comment|// Verify that the record doesn't exist in the table
try|try
init|(
name|Table
name|quotaTable
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
init|)
block|{
name|ResultScanner
name|rs
init|=
name|quotaTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|assertNull
argument_list|(
literal|"Did not expect to find a quota entry"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Verify that we can also not fetch it via the API
name|scanner
operator|=
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|admin
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|assertNull
argument_list|(
literal|"Did not expect to find a quota entry"
argument_list|,
name|scanner
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetModifyRemoveSpaceQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"sq_table2"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|originalSizeLimit
init|=
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|5L
decl_stmt|;
comment|// 5TB
specifier|final
name|SpaceViolationPolicy
name|violationPolicy
init|=
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
decl_stmt|;
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|originalSizeLimit
argument_list|,
name|violationPolicy
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// Verify the Quotas in the table
try|try
init|(
name|Table
name|quotaTable
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
init|)
block|{
name|ResultScanner
name|scanner
init|=
name|quotaTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
name|r
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|scanner
argument_list|)
decl_stmt|;
name|CellScanner
name|cells
init|=
name|r
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected to find a cell"
argument_list|,
name|cells
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|assertSpaceQuota
argument_list|(
name|originalSizeLimit
argument_list|,
name|violationPolicy
argument_list|,
name|cells
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Verify we can retrieve it via the QuotaRetriever API
name|QuotaRetriever
name|quotaScanner
init|=
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|admin
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|assertSpaceQuota
argument_list|(
name|originalSizeLimit
argument_list|,
name|violationPolicy
argument_list|,
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|quotaScanner
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|quotaScanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Setting a new size and policy should be reflected
specifier|final
name|long
name|newSizeLimit
init|=
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
decl_stmt|;
comment|// 1TB
specifier|final
name|SpaceViolationPolicy
name|newViolationPolicy
init|=
name|SpaceViolationPolicy
operator|.
name|NO_WRITES_COMPACTIONS
decl_stmt|;
name|QuotaSettings
name|newSettings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|newSizeLimit
argument_list|,
name|newViolationPolicy
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|newSettings
argument_list|)
expr_stmt|;
comment|// Verify the new Quotas in the table
try|try
init|(
name|Table
name|quotaTable
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
init|)
block|{
name|ResultScanner
name|scanner
init|=
name|quotaTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
name|r
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|scanner
argument_list|)
decl_stmt|;
name|CellScanner
name|cells
init|=
name|r
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected to find a cell"
argument_list|,
name|cells
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|assertSpaceQuota
argument_list|(
name|newSizeLimit
argument_list|,
name|newViolationPolicy
argument_list|,
name|cells
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Verify we can retrieve the new quota via the QuotaRetriever API
name|quotaScanner
operator|=
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|admin
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|assertSpaceQuota
argument_list|(
name|newSizeLimit
argument_list|,
name|newViolationPolicy
argument_list|,
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|quotaScanner
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|quotaScanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Now, remove the quota
name|QuotaSettings
name|removeQuota
init|=
name|QuotaSettingsFactory
operator|.
name|removeTableSpaceLimit
argument_list|(
name|tn
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|removeQuota
argument_list|)
expr_stmt|;
comment|// Verify that the record doesn't exist in the table
try|try
init|(
name|Table
name|quotaTable
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
init|)
block|{
name|ResultScanner
name|scanner
init|=
name|quotaTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|assertNull
argument_list|(
literal|"Did not expect to find a quota entry"
argument_list|,
name|scanner
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Verify that we can also not fetch it via the API
name|quotaScanner
operator|=
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|admin
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|assertNull
argument_list|(
literal|"Did not expect to find a quota entry"
argument_list|,
name|quotaScanner
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|quotaScanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertNumResults
parameter_list|(
name|int
name|expected
parameter_list|,
specifier|final
name|QuotaFilter
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|countResults
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetGetRemoveRPCQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"sq_table1"
argument_list|)
decl_stmt|;
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|tn
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// Verify the Quota in the table
name|verifyRecordPresentInQuotaTable
argument_list|(
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
expr_stmt|;
comment|// Verify we can retrieve it via the QuotaRetriever API
name|verifyFetchableViaAPI
argument_list|(
name|admin
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
expr_stmt|;
comment|// Now, remove the quota
name|QuotaSettings
name|removeQuota
init|=
name|QuotaSettingsFactory
operator|.
name|unthrottleTable
argument_list|(
name|tn
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|removeQuota
argument_list|)
expr_stmt|;
comment|// Verify that the record doesn't exist in the table
name|verifyRecordNotPresentInQuotaTable
argument_list|()
expr_stmt|;
comment|// Verify that we can also not fetch it via the API
name|verifyNotFetchableViaAPI
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetModifyRemoveRPCQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"sq_table1"
argument_list|)
decl_stmt|;
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|tn
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// Verify the Quota in the table
name|verifyRecordPresentInQuotaTable
argument_list|(
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
expr_stmt|;
comment|// Verify we can retrieve it via the QuotaRetriever API
name|verifyFetchableViaAPI
argument_list|(
name|admin
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
expr_stmt|;
comment|// Setting a limit and time unit should be reflected
name|QuotaSettings
name|newSettings
init|=
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|tn
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|3L
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|newSettings
argument_list|)
expr_stmt|;
comment|// Verify the new Quota in the table
name|verifyRecordPresentInQuotaTable
argument_list|(
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|3L
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
expr_stmt|;
comment|// Verify we can retrieve the new quota via the QuotaRetriever API
name|verifyFetchableViaAPI
argument_list|(
name|admin
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|3L
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
expr_stmt|;
comment|// Now, remove the quota
name|QuotaSettings
name|removeQuota
init|=
name|QuotaSettingsFactory
operator|.
name|unthrottleTable
argument_list|(
name|tn
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|removeQuota
argument_list|)
expr_stmt|;
comment|// Verify that the record doesn't exist in the table
name|verifyRecordNotPresentInQuotaTable
argument_list|()
expr_stmt|;
comment|// Verify that we can also not fetch it via the API
name|verifyNotFetchableViaAPI
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyRecordPresentInQuotaTable
parameter_list|(
name|ThrottleType
name|type
parameter_list|,
name|long
name|limit
parameter_list|,
name|TimeUnit
name|tu
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Verify the RPC Quotas in the table
try|try
init|(
name|Table
name|quotaTable
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|quotaTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
init|)
block|{
name|Result
name|r
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|scanner
argument_list|)
decl_stmt|;
name|CellScanner
name|cells
init|=
name|r
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected to find a cell"
argument_list|,
name|cells
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|assertRPCQuota
argument_list|(
name|type
argument_list|,
name|limit
argument_list|,
name|tu
argument_list|,
name|cells
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyRecordNotPresentInQuotaTable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Verify that the record doesn't exist in the QuotaTableUtil.QUOTA_TABLE_NAME
try|try
init|(
name|Table
name|quotaTable
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|quotaTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
init|)
block|{
name|assertNull
argument_list|(
literal|"Did not expect to find a quota entry"
argument_list|,
name|scanner
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyFetchableViaAPI
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|ThrottleType
name|type
parameter_list|,
name|long
name|limit
parameter_list|,
name|TimeUnit
name|tu
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Verify we can retrieve the new quota via the QuotaRetriever API
try|try
init|(
name|QuotaRetriever
name|quotaScanner
init|=
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|admin
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
name|assertRPCQuota
argument_list|(
name|type
argument_list|,
name|limit
argument_list|,
name|tu
argument_list|,
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|quotaScanner
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyNotFetchableViaAPI
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Verify that we can also not fetch it via the API
try|try
init|(
name|QuotaRetriever
name|quotaScanner
init|=
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|admin
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
name|assertNull
argument_list|(
literal|"Did not expect to find a quota entry"
argument_list|,
name|quotaScanner
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertRPCQuota
parameter_list|(
name|ThrottleType
name|type
parameter_list|,
name|long
name|limit
parameter_list|,
name|TimeUnit
name|tu
parameter_list|,
name|Cell
name|cell
parameter_list|)
throws|throws
name|Exception
block|{
name|Quotas
name|q
init|=
name|QuotaTableUtil
operator|.
name|quotasFromData
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Quota should have rpc quota defined"
argument_list|,
name|q
operator|.
name|hasThrottle
argument_list|()
argument_list|)
expr_stmt|;
name|QuotaProtos
operator|.
name|Throttle
name|rpcQuota
init|=
name|q
operator|.
name|getThrottle
argument_list|()
decl_stmt|;
name|QuotaProtos
operator|.
name|TimedQuota
name|t
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|REQUEST_SIZE
case|:
name|assertTrue
argument_list|(
name|rpcQuota
operator|.
name|hasReqSize
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|rpcQuota
operator|.
name|getReqSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|READ_NUMBER
case|:
name|assertTrue
argument_list|(
name|rpcQuota
operator|.
name|hasReadNum
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|rpcQuota
operator|.
name|getReadNum
argument_list|()
expr_stmt|;
break|break;
case|case
name|READ_SIZE
case|:
name|assertTrue
argument_list|(
name|rpcQuota
operator|.
name|hasReadSize
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|rpcQuota
operator|.
name|getReadSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|REQUEST_NUMBER
case|:
name|assertTrue
argument_list|(
name|rpcQuota
operator|.
name|hasReqNum
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|rpcQuota
operator|.
name|getReqNum
argument_list|()
expr_stmt|;
break|break;
case|case
name|WRITE_NUMBER
case|:
name|assertTrue
argument_list|(
name|rpcQuota
operator|.
name|hasWriteNum
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|rpcQuota
operator|.
name|getWriteNum
argument_list|()
expr_stmt|;
break|break;
case|case
name|WRITE_SIZE
case|:
name|assertTrue
argument_list|(
name|rpcQuota
operator|.
name|hasWriteSize
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|rpcQuota
operator|.
name|getWriteSize
argument_list|()
expr_stmt|;
break|break;
block|}
name|assertEquals
argument_list|(
name|t
operator|.
name|getSoftLimit
argument_list|()
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|getTimeUnit
argument_list|()
argument_list|,
name|ProtobufUtil
operator|.
name|toProtoTimeUnit
argument_list|(
name|tu
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertRPCQuota
parameter_list|(
name|ThrottleType
name|type
parameter_list|,
name|long
name|limit
parameter_list|,
name|TimeUnit
name|tu
parameter_list|,
name|QuotaSettings
name|actualSettings
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"The actual QuotaSettings was not an instance of "
operator|+
name|ThrottleSettings
operator|.
name|class
operator|+
literal|" but of "
operator|+
name|actualSettings
operator|.
name|getClass
argument_list|()
argument_list|,
name|actualSettings
operator|instanceof
name|ThrottleSettings
argument_list|)
expr_stmt|;
name|QuotaProtos
operator|.
name|ThrottleRequest
name|throttleRequest
init|=
operator|(
operator|(
name|ThrottleSettings
operator|)
name|actualSettings
operator|)
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|limit
argument_list|,
name|throttleRequest
operator|.
name|getTimedQuota
argument_list|()
operator|.
name|getSoftLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoTimeUnit
argument_list|(
name|tu
argument_list|)
argument_list|,
name|throttleRequest
operator|.
name|getTimedQuota
argument_list|()
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoThrottleType
argument_list|(
name|type
argument_list|)
argument_list|,
name|throttleRequest
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertSpaceQuota
parameter_list|(
name|long
name|sizeLimit
parameter_list|,
name|SpaceViolationPolicy
name|violationPolicy
parameter_list|,
name|Cell
name|cell
parameter_list|)
throws|throws
name|Exception
block|{
name|Quotas
name|q
init|=
name|QuotaTableUtil
operator|.
name|quotasFromData
argument_list|(
name|cell
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getValueLength
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Quota should have space quota defined"
argument_list|,
name|q
operator|.
name|hasSpace
argument_list|()
argument_list|)
expr_stmt|;
name|QuotaProtos
operator|.
name|SpaceQuota
name|spaceQuota
init|=
name|q
operator|.
name|getSpace
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sizeLimit
argument_list|,
name|spaceQuota
operator|.
name|getSoftLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|violationPolicy
argument_list|,
name|ProtobufUtil
operator|.
name|toViolationPolicy
argument_list|(
name|spaceQuota
operator|.
name|getViolationPolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertSpaceQuota
parameter_list|(
name|long
name|sizeLimit
parameter_list|,
name|SpaceViolationPolicy
name|violationPolicy
parameter_list|,
name|QuotaSettings
name|actualSettings
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"The actual QuotaSettings was not an instance of "
operator|+
name|SpaceLimitSettings
operator|.
name|class
operator|+
literal|" but of "
operator|+
name|actualSettings
operator|.
name|getClass
argument_list|()
argument_list|,
name|actualSettings
operator|instanceof
name|SpaceLimitSettings
argument_list|)
expr_stmt|;
name|SpaceLimitRequest
name|spaceLimitRequest
init|=
operator|(
operator|(
name|SpaceLimitSettings
operator|)
name|actualSettings
operator|)
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sizeLimit
argument_list|,
name|spaceLimitRequest
operator|.
name|getQuota
argument_list|()
operator|.
name|getSoftLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|violationPolicy
argument_list|,
name|ProtobufUtil
operator|.
name|toViolationPolicy
argument_list|(
name|spaceLimitRequest
operator|.
name|getQuota
argument_list|()
operator|.
name|getViolationPolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|countResults
parameter_list|(
specifier|final
name|QuotaFilter
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
name|QuotaRetriever
name|scanner
init|=
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|filter
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QuotaSettings
name|settings
range|:
name|scanner
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|Objects
operator|.
name|toString
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

