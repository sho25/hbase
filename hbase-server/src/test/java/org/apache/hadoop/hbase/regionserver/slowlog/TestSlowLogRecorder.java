begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|slowlog
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Uninterruptibles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|TooSlowLog
operator|.
name|SlowLogPayload
import|;
end_import

begin_comment
comment|/**  * Tests for Online SlowLog Provider Service  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
annotation|@
name|Ignore
comment|// Disabled until HBASE-23977 is addressed.
specifier|public
class|class
name|TestSlowLogRecorder
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSlowLogRecorder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSlowLogRecorder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|HBASE_TESTING_UTILITY
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|SlowLogRecorder
name|slowLogRecorder
decl_stmt|;
specifier|private
specifier|static
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|applySlowLogRecorderConf
parameter_list|(
name|int
name|eventSize
parameter_list|)
block|{
name|Configuration
name|conf
init|=
name|HBASE_TESTING_UTILITY
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|SLOW_LOG_BUFFER_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.slowlog.ringbuffer.size"
argument_list|,
name|eventSize
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * confirm that for a ringbuffer of slow logs, payload on given index of buffer    * has expected elements    *    * @param i index of ringbuffer logs    * @param j data value that was put on index i    * @param slowLogPayloads list of payload retrieved from {@link SlowLogRecorder}    */
specifier|private
name|void
name|confirmPayloadParams
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|,
name|List
argument_list|<
name|SlowLogPayload
argument_list|>
name|slowLogPayloads
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogPayloads
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getClientAddress
argument_list|()
argument_list|,
literal|"client_"
operator|+
name|j
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogPayloads
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getUserName
argument_list|()
argument_list|,
literal|"userName_"
operator|+
name|j
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogPayloads
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getServerClass
argument_list|()
argument_list|,
literal|"class_"
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnlieSlowLogConsumption
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|applySlowLogRecorderConf
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|slowLogRecorder
operator|=
operator|new
name|SlowLogRecorder
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AdminProtos
operator|.
name|SlowLogResponseRequest
name|request
init|=
name|AdminProtos
operator|.
name|SlowLogResponseRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|15
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initially ringbuffer of Slow Log records is empty"
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|// add 5 records initially
for|for
control|(
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|RpcLogDetails
name|rpcLogDetails
init|=
name|getRpcLogDetails
argument_list|(
literal|"userName_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"client_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"class_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|slowLogRecorder
operator|.
name|addSlowLogPayload
argument_list|(
name|rpcLogDetails
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|HBASE_TESTING_UTILITY
operator|.
name|waitFor
argument_list|(
literal|3000
argument_list|,
parameter_list|()
lambda|->
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SlowLogPayload
argument_list|>
name|slowLogPayloads
init|=
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|confirmPayloadParams
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
comment|// add 2 more records
for|for
control|(
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|RpcLogDetails
name|rpcLogDetails
init|=
name|getRpcLogDetails
argument_list|(
literal|"userName_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"client_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"class_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|slowLogRecorder
operator|.
name|addSlowLogPayload
argument_list|(
name|rpcLogDetails
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|HBASE_TESTING_UTILITY
operator|.
name|waitFor
argument_list|(
literal|3000
argument_list|,
parameter_list|()
lambda|->
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|slowLogPayloads
operator|=
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogPayloads
operator|.
name|size
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|0
argument_list|,
literal|7
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|6
argument_list|,
literal|1
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
comment|// add 3 more records
for|for
control|(
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|RpcLogDetails
name|rpcLogDetails
init|=
name|getRpcLogDetails
argument_list|(
literal|"userName_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"client_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"class_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|slowLogRecorder
operator|.
name|addSlowLogPayload
argument_list|(
name|rpcLogDetails
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|HBASE_TESTING_UTILITY
operator|.
name|waitFor
argument_list|(
literal|3000
argument_list|,
parameter_list|()
lambda|->
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|slowLogPayloads
operator|=
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// confirm ringbuffer is full
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogPayloads
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|7
argument_list|,
literal|3
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|1
argument_list|,
literal|9
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
comment|// add 4 more records
for|for
control|(
init|;
name|i
operator|<
literal|14
condition|;
name|i
operator|++
control|)
block|{
name|RpcLogDetails
name|rpcLogDetails
init|=
name|getRpcLogDetails
argument_list|(
literal|"userName_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"client_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"class_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|slowLogRecorder
operator|.
name|addSlowLogPayload
argument_list|(
name|rpcLogDetails
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|HBASE_TESTING_UTILITY
operator|.
name|waitFor
argument_list|(
literal|3000
argument_list|,
parameter_list|()
lambda|->
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|slowLogPayloads
operator|=
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// confirm ringbuffer is full
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogPayloads
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|0
argument_list|,
literal|14
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|1
argument_list|,
literal|13
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|2
argument_list|,
literal|12
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|3
argument_list|,
literal|11
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|boolean
name|isRingBufferCleaned
init|=
name|slowLogRecorder
operator|.
name|clearSlowLogPayloads
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isRingBufferCleaned
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"cleared the ringbuffer of Online Slow Log records"
argument_list|)
expr_stmt|;
name|slowLogPayloads
operator|=
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// confirm ringbuffer is empty
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogPayloads
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnlineSlowLogWithHighRecords
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|applySlowLogRecorderConf
argument_list|(
literal|14
argument_list|)
decl_stmt|;
name|slowLogRecorder
operator|=
operator|new
name|SlowLogRecorder
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AdminProtos
operator|.
name|SlowLogResponseRequest
name|request
init|=
name|AdminProtos
operator|.
name|SlowLogResponseRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|14
operator|*
literal|11
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initially ringbuffer of Slow Log records is empty"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|14
operator|*
literal|11
condition|;
name|i
operator|++
control|)
block|{
name|RpcLogDetails
name|rpcLogDetails
init|=
name|getRpcLogDetails
argument_list|(
literal|"userName_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"client_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"class_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|slowLogRecorder
operator|.
name|addSlowLogPayload
argument_list|(
name|rpcLogDetails
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added 14 * 11 records, ringbuffer should only provide latest 14 records"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|HBASE_TESTING_UTILITY
operator|.
name|waitFor
argument_list|(
literal|3000
argument_list|,
parameter_list|()
lambda|->
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SlowLogPayload
argument_list|>
name|slowLogPayloads
init|=
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogPayloads
operator|.
name|size
argument_list|()
argument_list|,
literal|14
argument_list|)
expr_stmt|;
comment|// confirm strict order of slow log payloads
name|confirmPayloadParams
argument_list|(
literal|0
argument_list|,
literal|154
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|1
argument_list|,
literal|153
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|2
argument_list|,
literal|152
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|3
argument_list|,
literal|151
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|4
argument_list|,
literal|150
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|5
argument_list|,
literal|149
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|6
argument_list|,
literal|148
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|7
argument_list|,
literal|147
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|8
argument_list|,
literal|146
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|9
argument_list|,
literal|145
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|10
argument_list|,
literal|144
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|11
argument_list|,
literal|143
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|12
argument_list|,
literal|142
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|confirmPayloadParams
argument_list|(
literal|13
argument_list|,
literal|141
argument_list|,
name|slowLogPayloads
argument_list|)
expr_stmt|;
name|boolean
name|isRingBufferCleaned
init|=
name|slowLogRecorder
operator|.
name|clearSlowLogPayloads
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isRingBufferCleaned
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"cleared the ringbuffer of Online Slow Log records"
argument_list|)
expr_stmt|;
name|slowLogPayloads
operator|=
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// confirm ringbuffer is empty
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogPayloads
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnlineSlowLogWithDefaultDisableConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBASE_TESTING_UTILITY
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|HConstants
operator|.
name|SLOW_LOG_BUFFER_ENABLED_KEY
argument_list|)
expr_stmt|;
name|slowLogRecorder
operator|=
operator|new
name|SlowLogRecorder
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AdminProtos
operator|.
name|SlowLogResponseRequest
name|request
init|=
name|AdminProtos
operator|.
name|SlowLogResponseRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initially ringbuffer of Slow Log records is empty"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|300
condition|;
name|i
operator|++
control|)
block|{
name|RpcLogDetails
name|rpcLogDetails
init|=
name|getRpcLogDetails
argument_list|(
literal|"userName_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"client_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"class_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|slowLogRecorder
operator|.
name|addSlowLogPayload
argument_list|(
name|rpcLogDetails
argument_list|)
expr_stmt|;
block|}
name|Uninterruptibles
operator|.
name|sleepUninterruptibly
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SlowLogPayload
argument_list|>
name|slowLogPayloads
init|=
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogPayloads
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnlineSlowLogWithDisableConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBASE_TESTING_UTILITY
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|SLOW_LOG_BUFFER_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|slowLogRecorder
operator|=
operator|new
name|SlowLogRecorder
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AdminProtos
operator|.
name|SlowLogResponseRequest
name|request
init|=
name|AdminProtos
operator|.
name|SlowLogResponseRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initially ringbuffer of Slow Log records is empty"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|300
condition|;
name|i
operator|++
control|)
block|{
name|RpcLogDetails
name|rpcLogDetails
init|=
name|getRpcLogDetails
argument_list|(
literal|"userName_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"client_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"class_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|slowLogRecorder
operator|.
name|addSlowLogPayload
argument_list|(
name|rpcLogDetails
argument_list|)
expr_stmt|;
block|}
name|Uninterruptibles
operator|.
name|sleepUninterruptibly
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SlowLogPayload
argument_list|>
name|slowLogPayloads
init|=
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogPayloads
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|SLOW_LOG_BUFFER_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSlowLogFilters
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|applySlowLogRecorderConf
argument_list|(
literal|30
argument_list|)
decl_stmt|;
name|slowLogRecorder
operator|=
operator|new
name|SlowLogRecorder
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AdminProtos
operator|.
name|SlowLogResponseRequest
name|request
init|=
name|AdminProtos
operator|.
name|SlowLogResponseRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|15
argument_list|)
operator|.
name|setUserName
argument_list|(
literal|"userName_87"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initially ringbuffer of Slow Log records is empty"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|RpcLogDetails
name|rpcLogDetails
init|=
name|getRpcLogDetails
argument_list|(
literal|"userName_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"client_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"class_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|slowLogRecorder
operator|.
name|addSlowLogPayload
argument_list|(
name|rpcLogDetails
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added 100 records, ringbuffer should only 1 record with matching filter"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|HBASE_TESTING_UTILITY
operator|.
name|waitFor
argument_list|(
literal|3000
argument_list|,
parameter_list|()
lambda|->
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|AdminProtos
operator|.
name|SlowLogResponseRequest
name|requestClient
init|=
name|AdminProtos
operator|.
name|SlowLogResponseRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|15
argument_list|)
operator|.
name|setClientAddress
argument_list|(
literal|"client_85"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|HBASE_TESTING_UTILITY
operator|.
name|waitFor
argument_list|(
literal|3000
argument_list|,
parameter_list|()
lambda|->
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|requestClient
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|AdminProtos
operator|.
name|SlowLogResponseRequest
name|requestSlowLog
init|=
name|AdminProtos
operator|.
name|SlowLogResponseRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|15
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|HBASE_TESTING_UTILITY
operator|.
name|waitFor
argument_list|(
literal|3000
argument_list|,
parameter_list|()
lambda|->
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|requestSlowLog
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|15
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentSlowLogEvents
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|applySlowLogRecorderConf
argument_list|(
literal|50000
argument_list|)
decl_stmt|;
name|slowLogRecorder
operator|=
operator|new
name|SlowLogRecorder
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AdminProtos
operator|.
name|SlowLogResponseRequest
name|request
init|=
name|AdminProtos
operator|.
name|SlowLogResponseRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|500000
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initially ringbuffer of Slow Log records is empty"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1000
condition|;
name|j
operator|++
control|)
block|{
name|CompletableFuture
operator|.
name|runAsync
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3500
condition|;
name|i
operator|++
control|)
block|{
name|RpcLogDetails
name|rpcLogDetails
init|=
name|getRpcLogDetails
argument_list|(
literal|"userName_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"client_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"class_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|slowLogRecorder
operator|.
name|addSlowLogPayload
argument_list|(
name|rpcLogDetails
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|Uninterruptibles
operator|.
name|sleepUninterruptibly
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|slowLogRecorder
operator|.
name|clearSlowLogPayloads
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|HBASE_TESTING_UTILITY
operator|.
name|waitFor
argument_list|(
literal|4000
argument_list|,
parameter_list|()
lambda|->
name|slowLogRecorder
operator|.
name|getSlowLogPayloads
argument_list|(
name|request
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RpcLogDetails
name|getRpcLogDetails
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|clientAddress
parameter_list|,
name|String
name|className
parameter_list|)
block|{
return|return
operator|new
name|RpcLogDetails
argument_list|(
name|getRpcCall
argument_list|(
name|userName
argument_list|)
argument_list|,
name|clientAddress
argument_list|,
literal|0
argument_list|,
name|className
argument_list|)
return|;
block|}
specifier|private
name|RpcCall
name|getRpcCall
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|RpcCall
name|rpcCall
init|=
operator|new
name|RpcCall
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|BlockingService
name|getService
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Descriptors
operator|.
name|MethodDescriptor
name|getMethod
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Message
name|getParam
parameter_list|()
block|{
return|return
name|getMessage
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CellScanner
name|getCellScanner
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getReceiveTime
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setStartTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{        }
annotation|@
name|Override
specifier|public
name|int
name|getTimeout
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDeadline
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|RPCProtos
operator|.
name|RequestHeader
name|getHeader
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRemotePort
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setResponse
parameter_list|(
name|Message
name|param
parameter_list|,
name|CellScanner
name|cells
parameter_list|,
name|Throwable
name|errorThrowable
parameter_list|,
name|String
name|error
parameter_list|)
block|{       }
annotation|@
name|Override
specifier|public
name|void
name|sendResponseIfReady
parameter_list|()
throws|throws
name|IOException
block|{       }
annotation|@
name|Override
specifier|public
name|void
name|cleanup
parameter_list|()
block|{       }
annotation|@
name|Override
specifier|public
name|String
name|toShortString
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|disconnectSince
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isClientCellBlockSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|User
argument_list|>
name|getRequestUser
parameter_list|()
block|{
return|return
name|getUser
argument_list|(
name|userName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|InetAddress
name|getRemoteAddress
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|HBaseProtos
operator|.
name|VersionInfo
name|getClientVersionInfo
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCallBack
parameter_list|(
name|RpcCallback
name|callback
parameter_list|)
block|{       }
annotation|@
name|Override
specifier|public
name|boolean
name|isRetryImmediatelySupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getResponseCellSize
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|incrementResponseCellSize
parameter_list|(
name|long
name|cellSize
parameter_list|)
block|{       }
annotation|@
name|Override
specifier|public
name|long
name|getResponseBlockSize
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|incrementResponseBlockSize
parameter_list|(
name|long
name|blockSize
parameter_list|)
block|{       }
annotation|@
name|Override
specifier|public
name|long
name|getResponseExceptionSize
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|incrementResponseExceptionSize
parameter_list|(
name|long
name|exceptionSize
parameter_list|)
block|{       }
block|}
decl_stmt|;
return|return
name|rpcCall
return|;
block|}
specifier|private
name|Message
name|getMessage
parameter_list|()
block|{
name|i
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|3
expr_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
block|{
name|message
operator|=
name|ClientProtos
operator|.
name|ScanRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRegion
argument_list|(
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|newBuilder
argument_list|()
operator|.
name|setValue
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
literal|"region1"
argument_list|)
argument_list|)
operator|.
name|setType
argument_list|(
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
operator|.
name|REGION_NAME
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|1
case|:
block|{
name|message
operator|=
name|ClientProtos
operator|.
name|MutateRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRegion
argument_list|(
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|newBuilder
argument_list|()
operator|.
name|setValue
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
literal|"region2"
argument_list|)
argument_list|)
operator|.
name|setType
argument_list|(
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
operator|.
name|REGION_NAME
argument_list|)
argument_list|)
operator|.
name|setMutation
argument_list|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRow
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
literal|"row123"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|2
case|:
block|{
name|message
operator|=
name|ClientProtos
operator|.
name|GetRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRegion
argument_list|(
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|newBuilder
argument_list|()
operator|.
name|setValue
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
literal|"region2"
argument_list|)
argument_list|)
operator|.
name|setType
argument_list|(
name|HBaseProtos
operator|.
name|RegionSpecifier
operator|.
name|RegionSpecifierType
operator|.
name|REGION_NAME
argument_list|)
argument_list|)
operator|.
name|setGet
argument_list|(
name|ClientProtos
operator|.
name|Get
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRow
argument_list|(
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
literal|"row123"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not supposed to get here?"
argument_list|)
throw|;
block|}
return|return
name|message
return|;
block|}
specifier|private
name|Optional
argument_list|<
name|User
argument_list|>
name|getUser
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|User
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|runAs
parameter_list|(
name|PrivilegedAction
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|runAs
parameter_list|(
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

