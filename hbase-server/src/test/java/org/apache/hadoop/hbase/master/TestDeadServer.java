begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|ServerCrashProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ManualEnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestDeadServer
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestDeadServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|final
name|ServerName
name|hostname123
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|123
argument_list|,
literal|3L
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|hostname123_2
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|123
argument_list|,
literal|4L
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|hostname1234
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"127.0.0.2"
argument_list|,
literal|1234
argument_list|,
literal|4L
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|hostname12345
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"127.0.0.2"
argument_list|,
literal|12345
argument_list|,
literal|4L
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsDead
parameter_list|()
block|{
name|DeadServer
name|ds
init|=
operator|new
name|DeadServer
argument_list|()
decl_stmt|;
name|ds
operator|.
name|add
argument_list|(
name|hostname123
argument_list|)
expr_stmt|;
name|ds
operator|.
name|notifyServer
argument_list|(
name|hostname123
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ds
operator|.
name|areDeadServersInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|ds
operator|.
name|finish
argument_list|(
name|hostname123
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ds
operator|.
name|areDeadServersInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|ds
operator|.
name|add
argument_list|(
name|hostname1234
argument_list|)
expr_stmt|;
name|ds
operator|.
name|notifyServer
argument_list|(
name|hostname1234
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ds
operator|.
name|areDeadServersInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|ds
operator|.
name|finish
argument_list|(
name|hostname1234
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ds
operator|.
name|areDeadServersInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|ds
operator|.
name|add
argument_list|(
name|hostname12345
argument_list|)
expr_stmt|;
name|ds
operator|.
name|notifyServer
argument_list|(
name|hostname12345
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ds
operator|.
name|areDeadServersInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|ds
operator|.
name|finish
argument_list|(
name|hostname12345
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ds
operator|.
name|areDeadServersInProgress
argument_list|()
argument_list|)
expr_stmt|;
comment|// Already dead =       127.0.0.1,9090,112321
comment|// Coming back alive =  127.0.0.1,9090,223341
specifier|final
name|ServerName
name|deadServer
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|9090
argument_list|,
literal|112321L
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ds
operator|.
name|cleanPreviousInstance
argument_list|(
name|deadServer
argument_list|)
argument_list|)
expr_stmt|;
name|ds
operator|.
name|add
argument_list|(
name|deadServer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ds
operator|.
name|isDeadServer
argument_list|(
name|deadServer
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|deadServerNames
init|=
name|ds
operator|.
name|copyServerNames
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|eachDeadServer
range|:
name|deadServerNames
control|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ds
operator|.
name|getTimeOfDeath
argument_list|(
name|eachDeadServer
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ServerName
name|deadServerHostComingAlive
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|9090
argument_list|,
literal|223341L
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ds
operator|.
name|cleanPreviousInstance
argument_list|(
name|deadServerHostComingAlive
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ds
operator|.
name|isDeadServer
argument_list|(
name|deadServer
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ds
operator|.
name|cleanPreviousInstance
argument_list|(
name|deadServerHostComingAlive
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCrashProcedureReplay
parameter_list|()
block|{
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|pExecutor
init|=
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|ServerCrashProcedure
name|proc
init|=
operator|new
name|ServerCrashProcedure
argument_list|(
name|pExecutor
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|hostname123
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ProcedureTestingUtility
operator|.
name|submitAndWait
argument_list|(
name|pExecutor
argument_list|,
name|proc
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getDeadServers
argument_list|()
operator|.
name|areDeadServersInProgress
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSortExtract
parameter_list|()
block|{
name|ManualEnvironmentEdge
name|mee
init|=
operator|new
name|ManualEnvironmentEdge
argument_list|()
decl_stmt|;
name|EnvironmentEdgeManager
operator|.
name|injectEdge
argument_list|(
name|mee
argument_list|)
expr_stmt|;
name|mee
operator|.
name|setValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DeadServer
name|d
init|=
operator|new
name|DeadServer
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
name|hostname123
argument_list|)
expr_stmt|;
name|mee
operator|.
name|incValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
name|hostname1234
argument_list|)
expr_stmt|;
name|mee
operator|.
name|incValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
name|hostname12345
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|Long
argument_list|>
argument_list|>
name|copy
init|=
name|d
operator|.
name|copyDeadServersSince
argument_list|(
literal|2L
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|copy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hostname1234
argument_list|,
name|copy
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|2L
argument_list|)
argument_list|,
name|copy
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hostname12345
argument_list|,
name|copy
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|3L
argument_list|)
argument_list|,
name|copy
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
name|EnvironmentEdgeManager
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClean
parameter_list|()
block|{
name|DeadServer
name|d
init|=
operator|new
name|DeadServer
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
name|hostname123
argument_list|)
expr_stmt|;
name|d
operator|.
name|cleanPreviousInstance
argument_list|(
name|hostname12345
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|d
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|cleanPreviousInstance
argument_list|(
name|hostname1234
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|d
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|cleanPreviousInstance
argument_list|(
name|hostname123_2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|d
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClearDeadServer
parameter_list|()
block|{
name|DeadServer
name|d
init|=
operator|new
name|DeadServer
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
name|hostname123
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
name|hostname1234
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|d
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|finish
argument_list|(
name|hostname123
argument_list|)
expr_stmt|;
name|d
operator|.
name|removeDeadServer
argument_list|(
name|hostname123
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|d
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|finish
argument_list|(
name|hostname1234
argument_list|)
expr_stmt|;
name|d
operator|.
name|removeDeadServer
argument_list|(
name|hostname1234
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|d
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
name|hostname1234
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|d
operator|.
name|removeDeadServer
argument_list|(
name|hostname123_2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|d
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|finish
argument_list|(
name|hostname1234
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|d
operator|.
name|removeDeadServer
argument_list|(
name|hostname1234
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|d
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

