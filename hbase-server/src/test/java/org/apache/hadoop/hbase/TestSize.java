begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSize
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSize
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testConversion
parameter_list|()
block|{
name|Size
name|kbSize
init|=
operator|new
name|Size
argument_list|(
literal|1024D
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|MEGABYTE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1D
argument_list|,
name|kbSize
operator|.
name|get
argument_list|(
name|Size
operator|.
name|Unit
operator|.
name|GIGABYTE
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024D
argument_list|,
name|kbSize
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024D
operator|*
literal|1024D
argument_list|,
name|kbSize
operator|.
name|get
argument_list|(
name|Size
operator|.
name|Unit
operator|.
name|KILOBYTE
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024D
operator|*
literal|1024D
operator|*
literal|1024D
argument_list|,
name|kbSize
operator|.
name|get
argument_list|(
name|Size
operator|.
name|Unit
operator|.
name|BYTE
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompare
parameter_list|()
block|{
name|Size
name|size00
init|=
operator|new
name|Size
argument_list|(
literal|100D
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|GIGABYTE
argument_list|)
decl_stmt|;
name|Size
name|size01
init|=
operator|new
name|Size
argument_list|(
literal|100D
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|MEGABYTE
argument_list|)
decl_stmt|;
name|Size
name|size02
init|=
operator|new
name|Size
argument_list|(
literal|100D
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|BYTE
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Size
argument_list|>
name|sizes
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|sizes
operator|.
name|add
argument_list|(
name|size00
argument_list|)
expr_stmt|;
name|sizes
operator|.
name|add
argument_list|(
name|size01
argument_list|)
expr_stmt|;
name|sizes
operator|.
name|add
argument_list|(
name|size02
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Size
name|s
range|:
name|sizes
control|)
block|{
switch|switch
condition|(
name|count
operator|++
condition|)
block|{
case|case
literal|0
case|:
name|assertEquals
argument_list|(
name|size02
argument_list|,
name|s
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|assertEquals
argument_list|(
name|size01
argument_list|,
name|s
argument_list|)
expr_stmt|;
break|break;
default|default:
name|assertEquals
argument_list|(
name|size00
argument_list|,
name|s
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqual
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|Size
argument_list|(
literal|1024D
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|TERABYTE
argument_list|)
argument_list|,
operator|new
name|Size
argument_list|(
literal|1D
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|PETABYTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Size
argument_list|(
literal|1024D
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|GIGABYTE
argument_list|)
argument_list|,
operator|new
name|Size
argument_list|(
literal|1D
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|TERABYTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Size
argument_list|(
literal|1024D
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|MEGABYTE
argument_list|)
argument_list|,
operator|new
name|Size
argument_list|(
literal|1D
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|GIGABYTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Size
argument_list|(
literal|1024D
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|KILOBYTE
argument_list|)
argument_list|,
operator|new
name|Size
argument_list|(
literal|1D
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|MEGABYTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Size
argument_list|(
literal|1024D
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|BYTE
argument_list|)
argument_list|,
operator|new
name|Size
argument_list|(
literal|1D
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|KILOBYTE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

