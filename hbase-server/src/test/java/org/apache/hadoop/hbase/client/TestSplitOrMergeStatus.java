begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSplitOrMergeStatus
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSplitOrMergeStatus
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitSwitch
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|name
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testSplitSwitch"
argument_list|)
decl_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|FAMILY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|orignalCount
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|initSwitchStatus
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|results
init|=
name|admin
operator|.
name|setSplitOrMergeEnabled
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|MasterSwitchType
operator|.
name|SPLIT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|results
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|admin
operator|.
name|split
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|waitOnSplitOrMerge
argument_list|(
name|t
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|orignalCount
operator|==
name|count
argument_list|)
expr_stmt|;
name|results
operator|=
name|admin
operator|.
name|setSplitOrMergeEnabled
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|MasterSwitchType
operator|.
name|SPLIT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|admin
operator|.
name|split
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|=
name|waitOnSplitOrMerge
argument_list|(
name|t
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|orignalCount
operator|<
name|count
argument_list|)
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeSwitch
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|name
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testMergeSwitch"
argument_list|)
decl_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|FAMILY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|initSwitchStatus
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|admin
operator|.
name|split
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|waitOnSplitOrMerge
argument_list|(
name|t
argument_list|)
expr_stmt|;
comment|//Split the table to ensure we have two regions at least.
name|waitForMergable
argument_list|(
name|admin
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|int
name|orignalCount
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
index|[]
name|results
init|=
name|admin
operator|.
name|setSplitOrMergeEnabled
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|MasterSwitchType
operator|.
name|MERGE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|results
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|regions
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|mergeRegionsAsync
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|waitOnSplitOrMerge
argument_list|(
name|t
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|orignalCount
operator|==
name|count
argument_list|)
expr_stmt|;
name|waitForMergable
argument_list|(
name|admin
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|results
operator|=
name|admin
operator|.
name|setSplitOrMergeEnabled
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|MasterSwitchType
operator|.
name|MERGE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|admin
operator|.
name|mergeRegionsAsync
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|count
operator|=
name|waitOnSplitOrMerge
argument_list|(
name|t
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|orignalCount
operator|>
name|count
argument_list|)
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiSwitches
parameter_list|()
throws|throws
name|IOException
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|boolean
index|[]
name|switches
init|=
name|admin
operator|.
name|setSplitOrMergeEnabled
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|MasterSwitchType
operator|.
name|SPLIT
argument_list|,
name|MasterSwitchType
operator|.
name|MERGE
argument_list|)
decl_stmt|;
for|for
control|(
name|boolean
name|s
range|:
name|switches
control|)
block|{
name|assertTrue
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|admin
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|MasterSwitchType
operator|.
name|SPLIT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|admin
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|MasterSwitchType
operator|.
name|MERGE
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSwitchLock
parameter_list|()
throws|throws
name|IOException
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|setSplitOrMergeEnabled
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|MasterSwitchType
operator|.
name|SPLIT
argument_list|,
name|MasterSwitchType
operator|.
name|MERGE
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|setSplitOrMergeEnabled
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|MasterSwitchType
operator|.
name|SPLIT
argument_list|,
name|MasterSwitchType
operator|.
name|MERGE
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|releaseSplitOrMergeLockAndRollback
argument_list|()
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|setSplitOrMergeEnabled
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|MasterSwitchType
operator|.
name|SPLIT
argument_list|,
name|MasterSwitchType
operator|.
name|MERGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initSwitchStatus
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|admin
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|MasterSwitchType
operator|.
name|SPLIT
argument_list|)
condition|)
block|{
name|admin
operator|.
name|setSplitOrMergeEnabled
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|MasterSwitchType
operator|.
name|SPLIT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|admin
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|MasterSwitchType
operator|.
name|MERGE
argument_list|)
condition|)
block|{
name|admin
operator|.
name|setSplitOrMergeEnabled
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|MasterSwitchType
operator|.
name|MERGE
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|admin
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|MasterSwitchType
operator|.
name|SPLIT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|MasterSwitchType
operator|.
name|MERGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|waitForMergable
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|TableName
name|t
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
comment|// Wait for the Regions to be mergeable
name|MiniHBaseCluster
name|miniCluster
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
decl_stmt|;
name|int
name|mergeable
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|mergeable
operator|<
literal|2
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|mergeable
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|regionThread
range|:
name|miniCluster
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
for|for
control|(
name|Region
name|region
range|:
name|regionThread
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getOnlineRegions
argument_list|(
name|t
argument_list|)
control|)
block|{
name|mergeable
operator|+=
operator|(
operator|(
name|HRegion
operator|)
name|region
operator|)
operator|.
name|isMergeable
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*    * Wait on table split.  May return because we waited long enough on the split    * and it didn't happen.  Caller should check.    * @param t    * @return Map of table regions; caller needs to check table actually split.    */
specifier|private
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|waitOnSplitOrMerge
parameter_list|(
specifier|final
name|Table
name|t
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
init|)
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
name|int
name|originalCount
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.test.retries"
argument_list|,
literal|10
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|regions
operator|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
if|if
condition|(
name|regions
operator|.
name|size
argument_list|()
operator|!=
name|originalCount
condition|)
break|break;
block|}
return|return
name|regions
return|;
block|}
block|}
block|}
end_class

end_unit

