begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ByteBuffAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Cacheable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheableDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheableDeserializerIdManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|ByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Basic test for {@link ByteBufferIOEngine}  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestByteBufferIOEngine
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestByteBufferIOEngine
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Override the {@link BucketEntry} so that we can set an arbitrary offset.    */
specifier|private
specifier|static
class|class
name|MockBucketEntry
extends|extends
name|BucketEntry
block|{
specifier|private
name|long
name|off
decl_stmt|;
name|MockBucketEntry
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|offset
operator|&
literal|0xFF00
argument_list|,
name|length
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|off
operator|=
name|offset
expr_stmt|;
block|}
annotation|@
name|Override
name|long
name|offset
parameter_list|()
block|{
return|return
name|this
operator|.
name|off
return|;
block|}
block|}
specifier|private
specifier|static
name|BufferGrabbingDeserializer
name|DESERIALIZER
init|=
operator|new
name|BufferGrabbingDeserializer
argument_list|()
decl_stmt|;
static|static
block|{
name|int
name|id
init|=
name|CacheableDeserializerIdManager
operator|.
name|registerDeserializer
argument_list|(
name|DESERIALIZER
argument_list|)
decl_stmt|;
name|DESERIALIZER
operator|.
name|setIdentifier
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
specifier|static
name|BucketEntry
name|createBucketEntry
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|BucketEntry
name|be
init|=
operator|new
name|MockBucketEntry
argument_list|(
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|be
operator|.
name|setDeserializerReference
argument_list|(
name|DESERIALIZER
argument_list|)
expr_stmt|;
return|return
name|be
return|;
block|}
specifier|static
name|ByteBuff
name|getByteBuff
parameter_list|(
name|BucketEntry
name|be
parameter_list|)
block|{
return|return
operator|(
operator|(
name|BufferGrabbingDeserializer
operator|)
name|be
operator|.
name|deserializerReference
argument_list|()
operator|)
operator|.
name|buf
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testByteBufferIOEngine
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|capacity
init|=
literal|32
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// 32 MB
name|int
name|testNum
init|=
literal|100
decl_stmt|;
name|int
name|maxBlockSize
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
name|ByteBufferIOEngine
name|ioEngine
init|=
operator|new
name|ByteBufferIOEngine
argument_list|(
name|capacity
argument_list|)
decl_stmt|;
name|int
name|testOffsetAtStartNum
init|=
name|testNum
operator|/
literal|10
decl_stmt|;
name|int
name|testOffsetAtEndNum
init|=
name|testNum
operator|/
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testNum
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|val
init|=
call|(
name|byte
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|255
argument_list|)
decl_stmt|;
name|int
name|blockSize
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|maxBlockSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockSize
operator|==
literal|0
condition|)
block|{
name|blockSize
operator|=
literal|1
expr_stmt|;
block|}
name|ByteBuff
name|src
init|=
name|createByteBuffer
argument_list|(
name|blockSize
argument_list|,
name|val
argument_list|,
name|i
operator|%
literal|2
operator|==
literal|0
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|src
operator|.
name|position
argument_list|()
decl_stmt|,
name|lim
init|=
name|src
operator|.
name|limit
argument_list|()
decl_stmt|;
name|int
name|offset
decl_stmt|;
if|if
condition|(
name|testOffsetAtStartNum
operator|>
literal|0
condition|)
block|{
name|testOffsetAtStartNum
operator|--
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testOffsetAtEndNum
operator|>
literal|0
condition|)
block|{
name|testOffsetAtEndNum
operator|--
expr_stmt|;
name|offset
operator|=
name|capacity
operator|-
name|blockSize
expr_stmt|;
block|}
else|else
block|{
name|offset
operator|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
operator|(
name|capacity
operator|-
name|maxBlockSize
operator|)
argument_list|)
expr_stmt|;
block|}
name|ioEngine
operator|.
name|write
argument_list|(
name|src
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|src
operator|.
name|position
argument_list|(
name|pos
argument_list|)
operator|.
name|limit
argument_list|(
name|lim
argument_list|)
expr_stmt|;
name|BucketEntry
name|be
init|=
name|createBucketEntry
argument_list|(
name|offset
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|ioEngine
operator|.
name|read
argument_list|(
name|be
argument_list|)
expr_stmt|;
name|ByteBuff
name|dst
init|=
name|getByteBuff
argument_list|(
name|be
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|src
operator|.
name|remaining
argument_list|()
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dst
operator|.
name|remaining
argument_list|()
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ByteBuff
operator|.
name|compareTo
argument_list|(
name|src
argument_list|,
name|src
operator|.
name|position
argument_list|()
argument_list|,
name|src
operator|.
name|remaining
argument_list|()
argument_list|,
name|dst
argument_list|,
name|dst
operator|.
name|position
argument_list|()
argument_list|,
name|dst
operator|.
name|remaining
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
assert|assert
name|testOffsetAtStartNum
operator|==
literal|0
assert|;
assert|assert
name|testOffsetAtEndNum
operator|==
literal|0
assert|;
block|}
comment|/**    * A CacheableDeserializer implementation which just store reference to the {@link ByteBuff} to be    * deserialized.    */
specifier|static
class|class
name|BufferGrabbingDeserializer
implements|implements
name|CacheableDeserializer
argument_list|<
name|Cacheable
argument_list|>
block|{
specifier|private
name|ByteBuff
name|buf
decl_stmt|;
specifier|private
name|int
name|identifier
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Cacheable
name|deserialize
parameter_list|(
specifier|final
name|ByteBuff
name|b
parameter_list|,
name|ByteBuffAllocator
name|alloc
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|buf
operator|=
name|b
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setIdentifier
parameter_list|(
name|int
name|identifier
parameter_list|)
block|{
name|this
operator|.
name|identifier
operator|=
name|identifier
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDeserializerIdentifier
parameter_list|()
block|{
return|return
name|identifier
return|;
block|}
block|}
specifier|static
name|ByteBuff
name|createByteBuffer
parameter_list|(
name|int
name|len
parameter_list|,
name|int
name|val
parameter_list|,
name|boolean
name|useHeap
parameter_list|)
block|{
name|ByteBuffer
name|b
init|=
name|useHeap
condition|?
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|2
operator|*
name|len
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
literal|2
operator|*
name|len
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|len
argument_list|)
decl_stmt|;
name|b
operator|.
name|position
argument_list|(
name|pos
argument_list|)
operator|.
name|limit
argument_list|(
name|pos
operator|+
name|len
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|pos
init|;
name|i
operator|<
name|pos
operator|+
name|len
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|put
argument_list|(
name|i
argument_list|,
operator|(
name|byte
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|ByteBuff
operator|.
name|wrap
argument_list|(
name|b
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testByteBufferIOEngineWithMBB
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|capacity
init|=
literal|32
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// 32 MB
name|int
name|testNum
init|=
literal|100
decl_stmt|;
name|int
name|maxBlockSize
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
name|ByteBufferIOEngine
name|ioEngine
init|=
operator|new
name|ByteBufferIOEngine
argument_list|(
name|capacity
argument_list|)
decl_stmt|;
name|int
name|testOffsetAtStartNum
init|=
name|testNum
operator|/
literal|10
decl_stmt|;
name|int
name|testOffsetAtEndNum
init|=
name|testNum
operator|/
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testNum
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|val
init|=
call|(
name|byte
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|255
argument_list|)
decl_stmt|;
name|int
name|blockSize
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|maxBlockSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockSize
operator|==
literal|0
condition|)
block|{
name|blockSize
operator|=
literal|1
expr_stmt|;
block|}
name|ByteBuff
name|src
init|=
name|createByteBuffer
argument_list|(
name|blockSize
argument_list|,
name|val
argument_list|,
name|i
operator|%
literal|2
operator|==
literal|0
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|src
operator|.
name|position
argument_list|()
decl_stmt|,
name|lim
init|=
name|src
operator|.
name|limit
argument_list|()
decl_stmt|;
name|int
name|offset
decl_stmt|;
if|if
condition|(
name|testOffsetAtStartNum
operator|>
literal|0
condition|)
block|{
name|testOffsetAtStartNum
operator|--
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testOffsetAtEndNum
operator|>
literal|0
condition|)
block|{
name|testOffsetAtEndNum
operator|--
expr_stmt|;
name|offset
operator|=
name|capacity
operator|-
name|blockSize
expr_stmt|;
block|}
else|else
block|{
name|offset
operator|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
operator|(
name|capacity
operator|-
name|maxBlockSize
operator|)
argument_list|)
expr_stmt|;
block|}
name|ioEngine
operator|.
name|write
argument_list|(
name|src
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|src
operator|.
name|position
argument_list|(
name|pos
argument_list|)
operator|.
name|limit
argument_list|(
name|lim
argument_list|)
expr_stmt|;
name|BucketEntry
name|be
init|=
name|createBucketEntry
argument_list|(
name|offset
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|ioEngine
operator|.
name|read
argument_list|(
name|be
argument_list|)
expr_stmt|;
name|ByteBuff
name|dst
init|=
name|getByteBuff
argument_list|(
name|be
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|src
operator|.
name|remaining
argument_list|()
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dst
operator|.
name|remaining
argument_list|()
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ByteBuff
operator|.
name|compareTo
argument_list|(
name|src
argument_list|,
name|src
operator|.
name|position
argument_list|()
argument_list|,
name|src
operator|.
name|remaining
argument_list|()
argument_list|,
name|dst
argument_list|,
name|dst
operator|.
name|position
argument_list|()
argument_list|,
name|dst
operator|.
name|remaining
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
assert|assert
name|testOffsetAtStartNum
operator|==
literal|0
assert|;
assert|assert
name|testOffsetAtEndNum
operator|==
literal|0
assert|;
block|}
block|}
end_class

end_unit

