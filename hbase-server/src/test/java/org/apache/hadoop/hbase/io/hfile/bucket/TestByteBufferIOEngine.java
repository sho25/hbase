begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Cacheable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Cacheable
operator|.
name|MemoryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheableDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|ByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Basic test for {@link ByteBufferIOEngine}  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestByteBufferIOEngine
block|{
annotation|@
name|Test
specifier|public
name|void
name|testByteBufferIOEngine
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|capacity
init|=
literal|32
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// 32 MB
name|int
name|testNum
init|=
literal|100
decl_stmt|;
name|int
name|maxBlockSize
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
name|ByteBufferIOEngine
name|ioEngine
init|=
operator|new
name|ByteBufferIOEngine
argument_list|(
name|capacity
argument_list|)
decl_stmt|;
name|int
name|testOffsetAtStartNum
init|=
name|testNum
operator|/
literal|10
decl_stmt|;
name|int
name|testOffsetAtEndNum
init|=
name|testNum
operator|/
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testNum
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|val
init|=
call|(
name|byte
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|255
argument_list|)
decl_stmt|;
name|int
name|blockSize
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|maxBlockSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockSize
operator|==
literal|0
condition|)
block|{
name|blockSize
operator|=
literal|1
expr_stmt|;
block|}
name|byte
index|[]
name|byteArray
init|=
operator|new
name|byte
index|[
name|blockSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|byteArray
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|byteArray
index|[
name|j
index|]
operator|=
name|val
expr_stmt|;
block|}
name|ByteBuffer
name|srcBuffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|byteArray
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|testOffsetAtStartNum
operator|>
literal|0
condition|)
block|{
name|testOffsetAtStartNum
operator|--
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testOffsetAtEndNum
operator|>
literal|0
condition|)
block|{
name|testOffsetAtEndNum
operator|--
expr_stmt|;
name|offset
operator|=
name|capacity
operator|-
name|blockSize
expr_stmt|;
block|}
else|else
block|{
name|offset
operator|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
operator|(
name|capacity
operator|-
name|maxBlockSize
operator|)
argument_list|)
expr_stmt|;
block|}
name|ioEngine
operator|.
name|write
argument_list|(
name|srcBuffer
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|BufferGrabbingDeserializer
name|deserializer
init|=
operator|new
name|BufferGrabbingDeserializer
argument_list|()
decl_stmt|;
name|ioEngine
operator|.
name|read
argument_list|(
name|offset
argument_list|,
name|blockSize
argument_list|,
name|deserializer
argument_list|)
expr_stmt|;
name|ByteBuff
name|dstBuffer
init|=
name|deserializer
operator|.
name|buf
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|byteArray
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|assertTrue
argument_list|(
name|byteArray
index|[
name|j
index|]
operator|==
name|dstBuffer
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
name|testOffsetAtStartNum
operator|==
literal|0
assert|;
assert|assert
name|testOffsetAtEndNum
operator|==
literal|0
assert|;
block|}
comment|/**    * A CacheableDeserializer implementation which just store reference to the {@link ByteBuff} to be    * deserialized. Use {@link #getDeserializedByteBuff()} to get this reference.    */
specifier|static
class|class
name|BufferGrabbingDeserializer
implements|implements
name|CacheableDeserializer
argument_list|<
name|Cacheable
argument_list|>
block|{
specifier|private
name|ByteBuff
name|buf
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Cacheable
name|deserialize
parameter_list|(
name|ByteBuff
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cacheable
name|deserialize
parameter_list|(
specifier|final
name|ByteBuff
name|b
parameter_list|,
name|boolean
name|reuse
parameter_list|,
name|MemoryType
name|memType
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|buf
operator|=
name|b
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDeserialiserIdentifier
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|ByteBuff
name|getDeserializedByteBuff
parameter_list|()
block|{
return|return
name|this
operator|.
name|buf
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testByteBufferIOEngineWithMBB
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|capacity
init|=
literal|32
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// 32 MB
name|int
name|testNum
init|=
literal|100
decl_stmt|;
name|int
name|maxBlockSize
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
name|ByteBufferIOEngine
name|ioEngine
init|=
operator|new
name|ByteBufferIOEngine
argument_list|(
name|capacity
argument_list|)
decl_stmt|;
name|int
name|testOffsetAtStartNum
init|=
name|testNum
operator|/
literal|10
decl_stmt|;
name|int
name|testOffsetAtEndNum
init|=
name|testNum
operator|/
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testNum
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|val
init|=
call|(
name|byte
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|255
argument_list|)
decl_stmt|;
name|int
name|blockSize
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|maxBlockSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockSize
operator|==
literal|0
condition|)
block|{
name|blockSize
operator|=
literal|1
expr_stmt|;
block|}
name|byte
index|[]
name|byteArray
init|=
operator|new
name|byte
index|[
name|blockSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|byteArray
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|byteArray
index|[
name|j
index|]
operator|=
name|val
expr_stmt|;
block|}
name|ByteBuffer
name|srcBuffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|byteArray
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|testOffsetAtStartNum
operator|>
literal|0
condition|)
block|{
name|testOffsetAtStartNum
operator|--
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|testOffsetAtEndNum
operator|>
literal|0
condition|)
block|{
name|testOffsetAtEndNum
operator|--
expr_stmt|;
name|offset
operator|=
name|capacity
operator|-
name|blockSize
expr_stmt|;
block|}
else|else
block|{
name|offset
operator|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
operator|(
name|capacity
operator|-
name|maxBlockSize
operator|)
argument_list|)
expr_stmt|;
block|}
name|ioEngine
operator|.
name|write
argument_list|(
name|srcBuffer
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|BufferGrabbingDeserializer
name|deserializer
init|=
operator|new
name|BufferGrabbingDeserializer
argument_list|()
decl_stmt|;
name|ioEngine
operator|.
name|read
argument_list|(
name|offset
argument_list|,
name|blockSize
argument_list|,
name|deserializer
argument_list|)
expr_stmt|;
name|ByteBuff
name|dstBuffer
init|=
name|deserializer
operator|.
name|buf
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|byteArray
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|assertTrue
argument_list|(
name|srcBuffer
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|==
name|dstBuffer
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
name|testOffsetAtStartNum
operator|==
literal|0
assert|;
assert|assert
name|testOffsetAtEndNum
operator|==
literal|0
assert|;
block|}
block|}
end_class

end_unit

