begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|favored
operator|.
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|PRIMARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|favored
operator|.
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|SECONDARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|favored
operator|.
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|TERTIARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|favored
operator|.
name|FavoredNodeAssignmentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|favored
operator|.
name|FavoredNodesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|BaseLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|LoadOnlyFavoredStochasticBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestTableFavoredNodes
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestTableFavoredNodes
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|WAIT_TIMEOUT
init|=
literal|60000
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|SLAVES
init|=
literal|8
decl_stmt|;
specifier|private
name|FavoredNodesManager
name|fnm
decl_stmt|;
specifier|private
name|Admin
name|admin
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|9
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|final
name|int
name|NUM_REGIONS
init|=
name|splitKeys
operator|.
name|length
operator|+
literal|1
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Setting FavoredNodeBalancer will enable favored nodes
name|conf
operator|.
name|setClass
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOADBALANCER_CLASS
argument_list|,
name|LoadOnlyFavoredStochasticBalancer
operator|.
name|class
argument_list|,
name|LoadBalancer
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MINTOSTART
argument_list|,
literal|""
operator|+
name|SLAVES
argument_list|)
expr_stmt|;
comment|// This helps test if RS get the appropriate FN updates.
name|conf
operator|.
name|set
argument_list|(
name|BaseLoadBalancer
operator|.
name|TABLES_ON_MASTER
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|SLAVES
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|waitForActiveAndReadyMaster
argument_list|(
name|WAIT_TIMEOUT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|cleanupTestDir
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|fnm
operator|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getFavoredNodesManager
argument_list|()
expr_stmt|;
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableCatalogJanitor
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/*    * Create a table with FN enabled and check if all its regions have favored nodes set.    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// All regions should have favored nodes
name|checkIfFavoredNodeInformationIsCorrect
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|checkNoFNForDeletedTable
argument_list|(
name|regions
argument_list|)
expr_stmt|;
block|}
comment|/*    * Checks if favored node information is removed on table truncation.    */
annotation|@
name|Test
specifier|public
name|void
name|testTruncateTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// All regions should have favored nodes
name|checkIfFavoredNodeInformationIsCorrect
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|truncateTable
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkNoFNForDeletedTable
argument_list|(
name|regions
argument_list|)
expr_stmt|;
name|checkIfFavoredNodeInformationIsCorrect
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|regions
operator|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|truncateTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkNoFNForDeletedTable
argument_list|(
name|regions
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/*    * Check if daughters inherit at-least 2 FN from parent after region split.    */
annotation|@
name|Test
specifier|public
name|void
name|testSplitTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|splitKeys
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numberOfRegions
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|checkIfFavoredNodeInformationIsCorrect
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|byte
index|[]
name|splitPoint
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|parent
init|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|splitPoint
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|parentFN
init|=
name|fnm
operator|.
name|getFavoredNodes
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"FN should not be null for region: "
operator|+
name|parent
argument_list|,
name|parentFN
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SPLITTING TABLE"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|split
argument_list|(
name|tableName
argument_list|,
name|splitPoint
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilNoRegionsInTransition
argument_list|(
name|WAIT_TIMEOUT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"FINISHED WAITING ON RIT"
argument_list|)
expr_stmt|;
name|waitUntilTableRegionCountReached
argument_list|(
name|tableName
argument_list|,
name|numberOfRegions
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// All regions should have favored nodes    checkIfFavoredNodeInformationIsCorrect(tableName);
comment|// Get the daughters of parent.
name|HRegionInfo
name|daughter1
init|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|parent
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|daughter1FN
init|=
name|fnm
operator|.
name|getFavoredNodes
argument_list|(
name|daughter1
argument_list|)
decl_stmt|;
name|HRegionInfo
name|daughter2
init|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|splitPoint
argument_list|,
literal|true
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|daughter2FN
init|=
name|fnm
operator|.
name|getFavoredNodes
argument_list|(
name|daughter2
argument_list|)
decl_stmt|;
name|checkIfDaughterInherits2FN
argument_list|(
name|parentFN
argument_list|,
name|daughter1FN
argument_list|)
expr_stmt|;
name|checkIfDaughterInherits2FN
argument_list|(
name|parentFN
argument_list|,
name|daughter2FN
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Daughter's PRIMARY FN should be PRIMARY of parent"
argument_list|,
name|parentFN
operator|.
name|get
argument_list|(
name|PRIMARY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|daughter1FN
operator|.
name|get
argument_list|(
name|PRIMARY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Daughter's SECONDARY FN should be SECONDARY of parent"
argument_list|,
name|parentFN
operator|.
name|get
argument_list|(
name|SECONDARY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|daughter1FN
operator|.
name|get
argument_list|(
name|SECONDARY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Daughter's PRIMARY FN should be PRIMARY of parent"
argument_list|,
name|parentFN
operator|.
name|get
argument_list|(
name|PRIMARY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|daughter2FN
operator|.
name|get
argument_list|(
name|PRIMARY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Daughter's SECONDARY FN should be TERTIARY of parent"
argument_list|,
name|parentFN
operator|.
name|get
argument_list|(
name|TERTIARY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|daughter2FN
operator|.
name|get
argument_list|(
name|SECONDARY
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Major compact table and run catalog janitor. Parent's FN should be removed
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|compact
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|admin
operator|.
name|runCatalogScan
argument_list|()
expr_stmt|;
comment|// Catalog cleanup is async. Wait on procedure to finish up.
name|ProcedureTestingUtility
operator|.
name|waitAllProcedures
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterProcedureExecutor
argument_list|()
argument_list|)
expr_stmt|;
comment|// assertEquals("Parent region should have been cleaned", 1, admin.runCatalogScan());
name|assertNull
argument_list|(
literal|"Parent FN should be null"
argument_list|,
name|fnm
operator|.
name|getFavoredNodes
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Split and Table Disable interfere with each other around region replicas
comment|// TODO. Meantime pause a few seconds.
name|Threads
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"STARTING DELETE"
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|checkNoFNForDeletedTable
argument_list|(
name|regions
argument_list|)
expr_stmt|;
block|}
comment|/*    * Check if merged region inherits FN from one of its regions.    */
annotation|@
name|Test
specifier|public
name|void
name|testMergeTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|checkIfFavoredNodeInformationIsCorrect
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegionInfo
name|regionA
init|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|HRegionInfo
name|regionB
init|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|splitKeys
index|[
literal|0
index|]
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|regionAFN
init|=
name|fnm
operator|.
name|getFavoredNodes
argument_list|(
name|regionA
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"regionA: "
operator|+
name|regionA
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" with FN: "
operator|+
name|fnm
operator|.
name|getFavoredNodes
argument_list|(
name|regionA
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"regionB: "
operator|+
name|regionA
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" with FN: "
operator|+
name|fnm
operator|.
name|getFavoredNodes
argument_list|(
name|regionB
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|countOfRegions
init|=
name|MetaTableAccessor
operator|.
name|getRegionCount
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|admin
operator|.
name|mergeRegionsAsync
argument_list|(
name|regionA
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regionB
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilNoRegionsInTransition
argument_list|(
name|WAIT_TIMEOUT
argument_list|)
expr_stmt|;
name|waitUntilTableRegionCountReached
argument_list|(
name|tableName
argument_list|,
name|countOfRegions
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// All regions should have favored nodes
name|checkIfFavoredNodeInformationIsCorrect
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|HRegionInfo
name|mergedRegion
init|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|mergedFN
init|=
name|fnm
operator|.
name|getFavoredNodes
argument_list|(
name|mergedRegion
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Merged region doesn't match regionA's FN"
argument_list|,
name|regionAFN
operator|.
name|toArray
argument_list|()
argument_list|,
name|mergedFN
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// Major compact table and run catalog janitor. Parent FN should be removed
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|compact
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Merge parents should have been cleaned"
argument_list|,
literal|1
argument_list|,
name|admin
operator|.
name|runCatalogScan
argument_list|()
argument_list|)
expr_stmt|;
comment|// Catalog cleanup is async. Wait on procedure to finish up.
name|ProcedureTestingUtility
operator|.
name|waitAllProcedures
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterProcedureExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Parent FN should be null"
argument_list|,
name|fnm
operator|.
name|getFavoredNodes
argument_list|(
name|regionA
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Parent FN should be null"
argument_list|,
name|fnm
operator|.
name|getFavoredNodes
argument_list|(
name|regionB
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|checkNoFNForDeletedTable
argument_list|(
name|regions
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkNoFNForDeletedTable
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
block|{
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing if FN data for "
operator|+
name|region
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"FN not null for deleted table's region: "
operator|+
name|region
argument_list|,
name|fnm
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * This checks the following:    *    * 1. Do all regions of the table have favored nodes updated in master?    * 2. Is the number of favored nodes correct for a region? Is the start code -1?    * 3. Is the FN information consistent between Master and the respective RegionServer?    */
specifier|private
name|void
name|checkIfFavoredNodeInformationIsCorrect
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
comment|/*      * Since we need HRegionServer to check for consistency of FN between Master and RS,      * lets construct a map for each serverName lookup. Makes it easy later.      */
name|Map
argument_list|<
name|ServerName
argument_list|,
name|HRegionServer
argument_list|>
name|snRSMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|rst
range|:
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
control|)
block|{
name|snRSMap
operator|.
name|put
argument_list|(
name|rst
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|,
name|rst
operator|.
name|getRegionServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Also include master, since it can also host user regions.
for|for
control|(
name|JVMClusterUtil
operator|.
name|MasterThread
name|rst
range|:
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getLiveMasterThreads
argument_list|()
control|)
block|{
name|snRSMap
operator|.
name|put
argument_list|(
name|rst
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|,
name|rst
operator|.
name|getMaster
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|dnPort
init|=
name|fnm
operator|.
name|getDataNodePort
argument_list|()
decl_stmt|;
name|RegionLocator
name|regionLocator
init|=
name|admin
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionLocation
name|regionLocation
range|:
name|regionLocator
operator|.
name|getAllRegionLocations
argument_list|()
control|)
block|{
name|HRegionInfo
name|regionInfo
init|=
name|regionLocation
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|fnList
init|=
name|fnm
operator|.
name|getFavoredNodes
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
comment|// 1. Does each region have favored node?
name|assertNotNull
argument_list|(
literal|"Favored nodes should not be null for region:"
operator|+
name|regionInfo
argument_list|,
name|fnList
argument_list|)
expr_stmt|;
comment|// 2. Do we have the right number of favored nodes? Is start code -1?
name|assertEquals
argument_list|(
literal|"Incorrect favored nodes for region:"
operator|+
name|regionInfo
operator|+
literal|" fnlist: "
operator|+
name|fnList
argument_list|,
name|FavoredNodeAssignmentHelper
operator|.
name|FAVORED_NODES_NUM
argument_list|,
name|fnList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ServerName
name|sn
range|:
name|fnList
control|)
block|{
name|assertEquals
argument_list|(
literal|"FN should not have startCode, fnlist:"
operator|+
name|fnList
argument_list|,
operator|-
literal|1
argument_list|,
name|sn
operator|.
name|getStartcode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// 3. Check if the regionServers have all the FN updated and in sync with Master
name|HRegionServer
name|regionServer
init|=
name|snRSMap
operator|.
name|get
argument_list|(
name|regionLocation
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"RS should not be null for regionLocation: "
operator|+
name|regionLocation
argument_list|,
name|regionServer
argument_list|)
expr_stmt|;
name|InetSocketAddress
index|[]
name|rsFavNodes
init|=
name|regionServer
operator|.
name|getFavoredNodesForRegion
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"RS "
operator|+
name|regionLocation
operator|.
name|getServerName
argument_list|()
operator|+
literal|" does not have FN for region: "
operator|+
name|regionInfo
argument_list|,
name|rsFavNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect FN for region:"
operator|+
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" on server:"
operator|+
name|regionLocation
operator|.
name|getServerName
argument_list|()
argument_list|,
name|FavoredNodeAssignmentHelper
operator|.
name|FAVORED_NODES_NUM
argument_list|,
name|rsFavNodes
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// 4. Does DN port match all FN node list?
for|for
control|(
name|ServerName
name|sn
range|:
name|fnm
operator|.
name|getFavoredNodesWithDNPort
argument_list|(
name|regionInfo
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
literal|"FN should not have startCode, fnlist:"
operator|+
name|fnList
argument_list|,
operator|-
literal|1
argument_list|,
name|sn
operator|.
name|getStartcode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FN port should belong to DN port, fnlist:"
operator|+
name|fnList
argument_list|,
name|dnPort
argument_list|,
name|sn
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Check favored nodes for system tables    */
annotation|@
name|Test
specifier|public
name|void
name|testSystemTables
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// All regions should have favored nodes
name|checkIfFavoredNodeInformationIsCorrect
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
for|for
control|(
name|TableName
name|sysTable
range|:
name|admin
operator|.
name|listTableNamesByNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE_NAME_STR
argument_list|)
control|)
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|sysTable
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|assertNull
argument_list|(
literal|"FN should be null for sys region"
argument_list|,
name|fnm
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkIfDaughterInherits2FN
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|parentFN
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|daughterFN
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|parentFN
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|daughterFN
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|daughterFN
argument_list|)
decl_stmt|;
name|favoredNodes
operator|.
name|removeAll
argument_list|(
name|parentFN
argument_list|)
expr_stmt|;
comment|/*      * With a small cluster its likely some FN might accidentally get shared. Its likely the      * 3rd FN the balancer chooses might still belong to the parent in which case favoredNodes      * size would be 0.      */
name|assertTrue
argument_list|(
literal|"Daughter FN:"
operator|+
name|daughterFN
operator|+
literal|" should have inherited 2 FN from parent FN:"
operator|+
name|parentFN
argument_list|,
name|favoredNodes
operator|.
name|size
argument_list|()
operator|<=
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|waitUntilTableRegionCountReached
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|int
name|numRegions
parameter_list|)
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|MetaTableAccessor
operator|.
name|getRegionCount
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
operator|==
name|numRegions
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

