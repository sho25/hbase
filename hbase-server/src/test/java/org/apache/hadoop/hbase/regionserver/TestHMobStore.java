begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ArrayBackedTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|KeyProviderForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|aes
operator|.
name|AES
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|throttle
operator|.
name|NoLimitThroughputController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|EncryptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHMobStore
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHMobStore
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|HMobStore
name|store
decl_stmt|;
specifier|private
name|HRegion
name|region
decl_stmt|;
specifier|private
name|HColumnDescriptor
name|hcd
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|byte
index|[]
name|table
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf1"
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf2"
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf3"
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|qf4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf4"
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|qf5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf5"
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|qf6
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf6"
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|value2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
decl_stmt|;
specifier|private
name|Path
name|mobFilePath
decl_stmt|;
specifier|private
name|Date
name|currentDate
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
specifier|private
name|Cell
name|seekKey1
decl_stmt|;
specifier|private
name|Cell
name|seekKey2
decl_stmt|;
specifier|private
name|Cell
name|seekKey3
decl_stmt|;
specifier|private
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
operator|new
name|ConcurrentSkipListSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Cell
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|id
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|DIR
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"TestHMobStore"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|/**    * Setup    * @throws Exception    */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|qualifiers
operator|.
name|add
argument_list|(
name|qf1
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|qf3
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|qf5
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|iter
init|=
name|qualifiers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|byte
index|[]
name|next
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|next
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
comment|// all versions.
block|}
block|}
specifier|private
name|void
name|init
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|testStore
parameter_list|)
throws|throws
name|IOException
block|{
name|hcd
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobThreshold
argument_list|(
literal|3L
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|methodName
argument_list|,
name|conf
argument_list|,
name|hcd
argument_list|,
name|testStore
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|HColumnDescriptor
name|hcd
parameter_list|,
name|boolean
name|testStore
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|init
argument_list|(
name|methodName
argument_list|,
name|conf
argument_list|,
name|htd
argument_list|,
name|hcd
argument_list|,
name|testStore
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|,
name|HColumnDescriptor
name|hcd
parameter_list|,
name|boolean
name|testStore
parameter_list|)
throws|throws
name|IOException
block|{
comment|//Setting up tje Region and Store
name|Path
name|basedir
init|=
operator|new
name|Path
argument_list|(
name|DIR
operator|+
name|methodName
argument_list|)
decl_stmt|;
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|basedir
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|logName
init|=
literal|"logs"
decl_stmt|;
name|Path
name|logdir
init|=
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|logdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|walConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|walConf
argument_list|,
name|basedir
argument_list|)
expr_stmt|;
specifier|final
name|WALFactory
name|wals
init|=
operator|new
name|WALFactory
argument_list|(
name|walConf
argument_list|,
literal|null
argument_list|,
name|methodName
argument_list|)
decl_stmt|;
name|region
operator|=
operator|new
name|HRegion
argument_list|(
name|tableDir
argument_list|,
name|wals
operator|.
name|getWAL
argument_list|(
name|info
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|info
operator|.
name|getTable
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|info
argument_list|,
name|htd
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|HMobStore
argument_list|(
name|region
argument_list|,
name|hcd
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|testStore
condition|)
block|{
name|init
argument_list|(
name|conf
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HColumnDescriptor
name|hcd
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|basedir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|homePath
init|=
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|homePath
argument_list|)
expr_stmt|;
name|KeyValue
name|key1
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|KeyValue
name|key2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|KeyValue
name|key3
init|=
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
literal|1
argument_list|,
name|value2
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|keys
init|=
operator|new
name|KeyValue
index|[]
block|{
name|key1
block|,
name|key2
block|,
name|key3
block|}
decl_stmt|;
name|int
name|maxKeyCount
init|=
name|keys
operator|.
name|length
decl_stmt|;
name|StoreFileWriter
name|mobWriter
init|=
name|store
operator|.
name|createWriterInTmp
argument_list|(
name|currentDate
argument_list|,
name|maxKeyCount
argument_list|,
name|hcd
operator|.
name|getCompactionCompressionType
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|)
decl_stmt|;
name|mobFilePath
operator|=
name|mobWriter
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|mobWriter
operator|.
name|append
argument_list|(
name|key1
argument_list|)
expr_stmt|;
name|mobWriter
operator|.
name|append
argument_list|(
name|key2
argument_list|)
expr_stmt|;
name|mobWriter
operator|.
name|append
argument_list|(
name|key3
argument_list|)
expr_stmt|;
name|mobWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|targetPathName
init|=
name|MobUtils
operator|.
name|formatDate
argument_list|(
name|currentDate
argument_list|)
decl_stmt|;
name|byte
index|[]
name|referenceValue
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|targetPathName
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|mobFilePath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Tag
name|tableNameTag
init|=
operator|new
name|ArrayBackedTag
argument_list|(
name|TagType
operator|.
name|MOB_TABLE_NAME_TAG_TYPE
argument_list|,
name|store
operator|.
name|getTableName
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|referenceValue
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|referenceValue
argument_list|)
decl_stmt|;
name|KeyValue
name|kv3
init|=
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|referenceValue
argument_list|)
decl_stmt|;
name|seekKey1
operator|=
name|MobUtils
operator|.
name|createMobRefCell
argument_list|(
name|kv1
argument_list|,
name|referenceValue
argument_list|,
name|tableNameTag
argument_list|)
expr_stmt|;
name|seekKey2
operator|=
name|MobUtils
operator|.
name|createMobRefCell
argument_list|(
name|kv2
argument_list|,
name|referenceValue
argument_list|,
name|tableNameTag
argument_list|)
expr_stmt|;
name|seekKey3
operator|=
name|MobUtils
operator|.
name|createMobRefCell
argument_list|(
name|kv3
argument_list|,
name|referenceValue
argument_list|,
name|tableNameTag
argument_list|)
expr_stmt|;
block|}
comment|/**    * Getting data from memstore    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testGetFromMemStore
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//Put data in memstore
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf4
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf5
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf6
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|InternalScanner
name|scanner
init|=
operator|(
name|InternalScanner
operator|)
name|store
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|,
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|store
operator|.
name|getFamily
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//Compare
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// Verify the values
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Getting MOB data from files    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testGetFromFiles
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//Put data in memstore
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//Add more data
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf4
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//Add more data
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf5
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf6
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|InternalScanner
name|scanner
init|=
operator|(
name|InternalScanner
operator|)
name|store
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|,
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|store
operator|.
name|getFamily
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//Compare
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Getting the reference data from files    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testGetReferencesFromFiles
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//Put data in memstore
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//Add more data
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf4
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//Add more data
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf5
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf6
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setAttribute
argument_list|(
name|MobConstants
operator|.
name|MOB_SCAN_RAW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
operator|(
name|InternalScanner
operator|)
name|store
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|,
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|store
operator|.
name|getFamily
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//Compare
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Cell
name|cell
init|=
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|MobUtils
operator|.
name|isMobReferenceCell
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Getting data from memstore and files    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testGetFromMemStoreAndFiles
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//Put data in memstore
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//Add more data
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf4
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//Add more data
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf5
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf6
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|InternalScanner
name|scanner
init|=
operator|(
name|InternalScanner
operator|)
name|store
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|,
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|store
operator|.
name|getFamily
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//Compare
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Getting data from memstore and files    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testMobCellSizeThreshold
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|HColumnDescriptor
name|hcd
decl_stmt|;
name|hcd
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobThreshold
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|hcd
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//Put data in memstore
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//Add more data
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf4
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//Add more data
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf5
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf6
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setAttribute
argument_list|(
name|MobConstants
operator|.
name|MOB_SCAN_RAW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
operator|(
name|InternalScanner
operator|)
name|store
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|,
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|store
operator|.
name|getFamily
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//Compare
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Cell
name|cell
init|=
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|//this is not mob reference cell.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|MobUtils
operator|.
name|isMobReferenceCell
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|store
operator|.
name|getFamily
argument_list|()
operator|.
name|getMobThreshold
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommitFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|targetPathName
init|=
name|MobUtils
operator|.
name|formatDate
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|store
operator|.
name|getPath
argument_list|()
argument_list|,
operator|(
name|targetPathName
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|mobFilePath
operator|.
name|getName
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|targetPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|targetPath
argument_list|)
argument_list|)
expr_stmt|;
comment|//commit file
name|store
operator|.
name|commitFile
argument_list|(
name|mobFilePath
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|targetPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolve
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|targetPathName
init|=
name|MobUtils
operator|.
name|formatDate
argument_list|(
name|currentDate
argument_list|)
decl_stmt|;
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|store
operator|.
name|getPath
argument_list|()
argument_list|,
name|targetPathName
argument_list|)
decl_stmt|;
name|store
operator|.
name|commitFile
argument_list|(
name|mobFilePath
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
comment|//resolve
name|Cell
name|resultCell1
init|=
name|store
operator|.
name|resolve
argument_list|(
name|seekKey1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Cell
name|resultCell2
init|=
name|store
operator|.
name|resolve
argument_list|(
name|seekKey2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Cell
name|resultCell3
init|=
name|store
operator|.
name|resolve
argument_list|(
name|seekKey3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//compare
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|resultCell1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|resultCell2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|value2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|resultCell3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Flush the memstore    * @param storeFilesSize    * @throws IOException    */
specifier|private
name|void
name|flush
parameter_list|(
name|int
name|storeFilesSize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|flushStore
argument_list|(
name|store
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|storeFilesSize
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|AbstractMemStore
operator|)
name|this
operator|.
name|store
operator|.
name|memstore
operator|)
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Flush the memstore    * @param store    * @param id    * @throws IOException    */
specifier|private
specifier|static
name|void
name|flushStore
parameter_list|(
name|HMobStore
name|store
parameter_list|,
name|long
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|StoreFlushContext
name|storeFlushCtx
init|=
name|store
operator|.
name|createFlushContext
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|storeFlushCtx
operator|.
name|prepare
argument_list|()
expr_stmt|;
name|storeFlushCtx
operator|.
name|flushCache
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|MonitoredTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|storeFlushCtx
operator|.
name|commit
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|MonitoredTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMOBStoreEncryption
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|CRYPTO_KEYPROVIDER_CONF_KEY
argument_list|,
name|KeyProviderForTesting
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|CRYPTO_MASTERKEY_NAME_CONF_KEY
argument_list|,
literal|"hbase"
argument_list|)
expr_stmt|;
name|SecureRandom
name|rng
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
name|byte
index|[]
name|keyBytes
init|=
operator|new
name|byte
index|[
name|AES
operator|.
name|KEY_LENGTH
index|]
decl_stmt|;
name|rng
operator|.
name|nextBytes
argument_list|(
name|keyBytes
argument_list|)
expr_stmt|;
name|String
name|algorithm
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|CRYPTO_KEY_ALGORITHM_CONF_KEY
argument_list|,
name|HConstants
operator|.
name|CIPHER_AES
argument_list|)
decl_stmt|;
name|Key
name|cfKey
init|=
operator|new
name|SecretKeySpec
argument_list|(
name|keyBytes
argument_list|,
name|algorithm
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobThreshold
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setEncryptionType
argument_list|(
name|algorithm
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setEncryptionKey
argument_list|(
name|EncryptionUtil
operator|.
name|wrapKey
argument_list|(
name|conf
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|CRYPTO_MASTERKEY_NAME_CONF_KEY
argument_list|,
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
name|cfKey
argument_list|)
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|hcd
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf4
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf5
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf6
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|StoreFile
argument_list|>
name|storefiles
init|=
name|this
operator|.
name|store
operator|.
name|getStorefiles
argument_list|()
decl_stmt|;
name|checkMobHFileEncrytption
argument_list|(
name|storefiles
argument_list|)
expr_stmt|;
comment|// Scan the values
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|InternalScanner
name|scanner
init|=
operator|(
name|InternalScanner
operator|)
name|store
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|,
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|store
operator|.
name|getFamily
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Trigger major compaction
name|this
operator|.
name|store
operator|.
name|triggerMajorCompaction
argument_list|()
expr_stmt|;
name|CompactionContext
name|requestCompaction
init|=
name|this
operator|.
name|store
operator|.
name|requestCompaction
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|this
operator|.
name|store
operator|.
name|compact
argument_list|(
name|requestCompaction
argument_list|,
name|NoLimitThroughputController
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Check encryption after compaction
name|checkMobHFileEncrytption
argument_list|(
name|this
operator|.
name|store
operator|.
name|getStorefiles
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkMobHFileEncrytption
parameter_list|(
name|Collection
argument_list|<
name|StoreFile
argument_list|>
name|storefiles
parameter_list|)
block|{
name|StoreFile
name|storeFile
init|=
name|storefiles
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|HFile
operator|.
name|Reader
name|reader
init|=
name|storeFile
operator|.
name|getReader
argument_list|()
operator|.
name|getHFileReader
argument_list|()
decl_stmt|;
name|byte
index|[]
name|encryptionKey
init|=
name|reader
operator|.
name|getTrailer
argument_list|()
operator|.
name|getEncryptionKey
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|null
operator|!=
name|encryptionKey
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reader
operator|.
name|getFileContext
argument_list|()
operator|.
name|getEncryptionContext
argument_list|()
operator|.
name|getCipher
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|CIPHER_AES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

