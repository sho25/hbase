begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|TestReplicationBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestReplicationAdminUsingProcedure
extends|extends
name|TestReplicationBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PEER_ID
init|=
literal|"2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|TestReplicationAdminUsingProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|conf1
operator|.
name|setInt
argument_list|(
literal|"hbase.multihconnection.threads.max"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Start the master& slave mini cluster.
name|TestReplicationBase
operator|.
name|setUpBeforeClass
argument_list|()
expr_stmt|;
comment|// Remove the replication peer
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|loadData
parameter_list|(
name|int
name|startRowKey
parameter_list|,
name|int
name|endRowKey
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|startRowKey
init|;
name|i
operator|<
name|endRowKey
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|waitForReplication
parameter_list|(
name|int
name|expectedRows
parameter_list|,
name|int
name|retries
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Scan
name|scan
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retries
condition|;
name|i
operator|++
control|)
block|{
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|retries
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Waited too much time for normal batch replication"
argument_list|)
throw|;
block|}
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|htable2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|res
range|:
name|scanner
control|)
block|{
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|!=
name|expectedRows
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Only got "
operator|+
name|count
operator|+
literal|" rows,  expected rows: "
operator|+
name|expectedRows
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
block|}
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|utility2
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|PEER_ID
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|utility1
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|utility2
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
name|truncateBoth
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|truncateBoth
parameter_list|()
throws|throws
name|IOException
block|{
name|utility1
operator|.
name|deleteTableData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|utility2
operator|.
name|deleteTableData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPeer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Load data
name|loadData
argument_list|(
literal|0
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
comment|// Wait the replication finished
name|waitForReplication
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|,
name|NB_RETRIES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePeer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// prev-check
name|waitForReplication
argument_list|(
literal|0
argument_list|,
name|NB_RETRIES
argument_list|)
expr_stmt|;
comment|// Load data
name|loadData
argument_list|(
literal|0
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
comment|// Wait the replication finished
name|waitForReplication
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|,
name|NB_RETRIES
argument_list|)
expr_stmt|;
comment|// Remove the peer id
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
comment|// Load data again
name|loadData
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|,
literal|2
operator|*
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
comment|// Wait the replication again
name|boolean
name|foundException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|waitForReplication
argument_list|(
name|NB_ROWS_IN_BATCH
operator|*
literal|2
argument_list|,
name|NB_RETRIES
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|foundException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|foundException
argument_list|)
expr_stmt|;
comment|// Truncate the table in source cluster
name|truncateBoth
argument_list|()
expr_stmt|;
comment|// Add peer again
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|utility2
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|PEER_ID
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
comment|// Load data again
name|loadData
argument_list|(
literal|0
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
comment|// Wait the replication finished
name|waitForReplication
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|,
name|NB_RETRIES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisableAndEnablePeer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// disable peer
name|hbaseAdmin
operator|.
name|disableReplicationPeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
comment|// Load data
name|loadData
argument_list|(
literal|0
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
comment|// Will failed to wait the replication.
name|boolean
name|foundException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|waitForReplication
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|,
name|NB_RETRIES
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|foundException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|foundException
argument_list|)
expr_stmt|;
comment|// Enable the peer
name|hbaseAdmin
operator|.
name|enableReplicationPeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
name|waitForReplication
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|,
name|NB_RETRIES
argument_list|)
expr_stmt|;
comment|// Load more data
name|loadData
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|,
name|NB_ROWS_IN_BATCH
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// Wait replication again.
name|waitForReplication
argument_list|(
name|NB_ROWS_IN_BATCH
operator|*
literal|2
argument_list|,
name|NB_RETRIES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatePeerConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|utility2
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setExcludeTableCFsMap
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|tableName
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|famName
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Update the peer config to exclude the test table name.
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|PEER_ID
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
comment|// Load data
name|loadData
argument_list|(
literal|0
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
comment|// Will failed to wait the replication
name|boolean
name|foundException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|waitForReplication
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|,
name|NB_RETRIES
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|foundException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|foundException
argument_list|)
expr_stmt|;
comment|// Truncate the table in source cluster
name|truncateBoth
argument_list|()
expr_stmt|;
comment|// Update the peer config to include the test table name.
name|ReplicationPeerConfig
name|rpc2
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc2
operator|.
name|setClusterKey
argument_list|(
name|utility2
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|PEER_ID
argument_list|,
name|rpc2
argument_list|)
expr_stmt|;
comment|// Load data again
name|loadData
argument_list|(
literal|0
argument_list|,
name|NB_ROWS_IN_BATCH
argument_list|)
expr_stmt|;
comment|// Wait the replication finished
name|waitForReplication
argument_list|(
name|NB_ROWS_IN_BATCH
argument_list|,
name|NB_RETRIES
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

