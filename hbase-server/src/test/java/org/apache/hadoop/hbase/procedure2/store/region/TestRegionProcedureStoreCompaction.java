begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|region
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
operator|.
name|TimeToLiveHFileCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HFileArchiveUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionProcedureStoreCompaction
extends|extends
name|RegionProcedureStoreTestBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRegionProcedureStoreCompaction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|compactMin
init|=
literal|4
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|RegionFlusherAndCompactor
operator|.
name|COMPACT_MIN_KEY
argument_list|,
name|compactMin
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HMaster
operator|.
name|HBASE_MASTER_CLEANER_INTERVAL
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|TimeToLiveHFileCleaner
operator|.
name|TTL_CONF_KEY
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getStorefilesCount
parameter_list|()
block|{
return|return
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|store
operator|.
name|region
operator|.
name|getStores
argument_list|()
argument_list|)
operator|.
name|getStorefilesCount
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compactMin
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|insert
argument_list|(
operator|new
name|RegionProcedureStoreTestProcedure
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|store
operator|.
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|compactMin
operator|-
literal|1
argument_list|,
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|insert
argument_list|(
operator|new
name|RegionProcedureStoreTestProcedure
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|store
operator|.
name|flusherAndCompactor
operator|.
name|requestFlush
argument_list|()
expr_stmt|;
name|htu
operator|.
name|waitFor
argument_list|(
literal|15000
argument_list|,
parameter_list|()
lambda|->
name|getStorefilesCount
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Path
name|storeArchiveDir
init|=
name|HFileArchiveUtil
operator|.
name|getStoreArchivePathForRootDir
argument_list|(
operator|new
name|Path
argument_list|(
name|htu
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
name|RegionProcedureStore
operator|.
name|MASTER_PROCEDURE_DIR
argument_list|)
argument_list|,
name|store
operator|.
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|RegionProcedureStore
operator|.
name|FAMILY
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|storeArchiveDir
operator|.
name|getFileSystem
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// after compaction, the old hfiles should have been compacted
name|htu
operator|.
name|waitFor
argument_list|(
literal|15000
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
name|FileStatus
index|[]
name|fses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|storeArchiveDir
argument_list|)
decl_stmt|;
return|return
name|fses
operator|!=
literal|null
operator|&&
name|fses
operator|.
name|length
operator|==
name|compactMin
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// ttl has not expired, so should not delete any files
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|compactedHFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|storeArchiveDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|compactedHFiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// touch one file
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setTimes
argument_list|(
name|compactedHFiles
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|currentTime
argument_list|,
name|currentTime
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
comment|// only the touched file is still there after clean up
name|FileStatus
index|[]
name|remainingHFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|storeArchiveDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|remainingHFiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|compactedHFiles
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|remainingHFiles
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// the touched file should also be cleaned up and then the cleaner will delete the parent
comment|// directory since it is empty.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|storeArchiveDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

