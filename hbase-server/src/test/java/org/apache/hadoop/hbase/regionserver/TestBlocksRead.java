begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCacheFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManagerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestBlocksRead
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestBlocksRead
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBlocksRead
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|BloomType
index|[]
name|BLOOM_TYPE
init|=
operator|new
name|BloomType
index|[]
block|{
name|BloomType
operator|.
name|ROWCOL
block|,
name|BloomType
operator|.
name|ROW
block|,
name|BloomType
operator|.
name|NONE
block|}
decl_stmt|;
name|HRegion
name|region
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|DIR
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"TestBlocksRead"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// disable compactions in this test.
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|EnvironmentEdgeManagerTestHelper
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**    * Callers must afterward call {@link HBaseTestingUtility#closeRegionAndWAL(HRegion)}    * @param tableName    * @param callingMethod    * @param conf    * @param family    * @throws IOException    * @return created and initialized region.    */
specifier|private
name|HRegion
name|initHRegion
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|String
name|callingMethod
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|family
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|callingMethod
argument_list|,
name|conf
argument_list|,
name|family
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Callers must afterward call {@link HBaseTestingUtility#closeRegionAndWAL(HRegion)}    */
specifier|private
name|HRegion
name|initHRegion
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|String
name|callingMethod
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|family
parameter_list|,
name|BlockCache
name|blockCache
parameter_list|)
throws|throws
name|IOException
block|{
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BLOOM_TYPE
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BloomType
name|bloomType
init|=
name|BLOOM_TYPE
index|[
name|i
index|]
decl_stmt|;
name|builder
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
operator|+
literal|"_"
operator|+
name|bloomType
argument_list|)
argument_list|)
operator|.
name|setBlocksize
argument_list|(
literal|1
argument_list|)
operator|.
name|setBloomFilterType
argument_list|(
name|bloomType
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RegionInfo
name|info
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|DIR
operator|+
name|callingMethod
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockCache
operator|!=
literal|null
condition|)
block|{
return|return
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|info
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|blockCache
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|info
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|putData
parameter_list|(
name|String
name|family
parameter_list|,
name|String
name|row
parameter_list|,
name|String
name|col
parameter_list|,
name|long
name|version
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BLOOM_TYPE
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|putData
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
operator|+
literal|"_"
operator|+
name|BLOOM_TYPE
index|[
name|i
index|]
argument_list|)
argument_list|,
name|row
argument_list|,
name|col
argument_list|,
name|version
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
block|}
comment|// generates a value to put for a row/col/version.
specifier|private
specifier|static
name|byte
index|[]
name|genValue
parameter_list|(
name|String
name|row
parameter_list|,
name|String
name|col
parameter_list|,
name|long
name|version
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Value:"
operator|+
name|row
operator|+
literal|"#"
operator|+
name|col
operator|+
literal|"#"
operator|+
name|version
argument_list|)
return|;
block|}
specifier|private
name|void
name|putData
parameter_list|(
name|byte
index|[]
name|cf
parameter_list|,
name|String
name|row
parameter_list|,
name|String
name|col
parameter_list|,
name|long
name|versionStart
parameter_list|,
name|long
name|versionEnd
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|columnBytes
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|version
init|=
name|versionStart
init|;
name|version
operator|<=
name|versionEnd
condition|;
name|version
operator|++
control|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|columnBytes
argument_list|,
name|version
argument_list|,
name|genValue
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Cell
index|[]
name|getData
parameter_list|(
name|String
name|family
parameter_list|,
name|String
name|row
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|,
name|int
name|expBlocks
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getData
argument_list|(
name|family
argument_list|,
name|row
argument_list|,
name|columns
argument_list|,
name|expBlocks
argument_list|,
name|expBlocks
argument_list|,
name|expBlocks
argument_list|)
return|;
block|}
specifier|private
name|Cell
index|[]
name|getData
parameter_list|(
name|String
name|family
parameter_list|,
name|String
name|row
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|,
name|int
name|expBlocksRowCol
parameter_list|,
name|int
name|expBlocksRow
parameter_list|,
name|int
name|expBlocksNone
parameter_list|)
throws|throws
name|IOException
block|{
name|int
index|[]
name|expBlocks
init|=
operator|new
name|int
index|[]
block|{
name|expBlocksRowCol
block|,
name|expBlocksRow
block|,
name|expBlocksNone
block|}
decl_stmt|;
name|Cell
index|[]
name|kvs
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BLOOM_TYPE
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BloomType
name|bloomType
init|=
name|BLOOM_TYPE
index|[
name|i
index|]
decl_stmt|;
name|byte
index|[]
name|cf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
operator|+
literal|"_"
operator|+
name|bloomType
argument_list|)
decl_stmt|;
name|long
name|blocksStart
init|=
name|getBlkAccessCount
argument_list|(
name|cf
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|column
range|:
name|columns
control|)
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|kvs
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|rawCells
argument_list|()
expr_stmt|;
name|long
name|blocksEnd
init|=
name|getBlkAccessCount
argument_list|(
name|cf
argument_list|)
decl_stmt|;
if|if
condition|(
name|expBlocks
index|[
name|i
index|]
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Blocks Read Check for Bloom: "
operator|+
name|bloomType
argument_list|,
name|expBlocks
index|[
name|i
index|]
argument_list|,
name|blocksEnd
operator|-
name|blocksStart
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Blocks Read for Bloom: "
operator|+
name|bloomType
operator|+
literal|" = "
operator|+
operator|(
name|blocksEnd
operator|-
name|blocksStart
operator|)
operator|+
literal|"Expected = "
operator|+
name|expBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|kvs
return|;
block|}
specifier|private
name|Cell
index|[]
name|getData
parameter_list|(
name|String
name|family
parameter_list|,
name|String
name|row
parameter_list|,
name|String
name|column
parameter_list|,
name|int
name|expBlocks
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getData
argument_list|(
name|family
argument_list|,
name|row
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|column
argument_list|)
argument_list|,
name|expBlocks
argument_list|,
name|expBlocks
argument_list|,
name|expBlocks
argument_list|)
return|;
block|}
specifier|private
name|Cell
index|[]
name|getData
parameter_list|(
name|String
name|family
parameter_list|,
name|String
name|row
parameter_list|,
name|String
name|column
parameter_list|,
name|int
name|expBlocksRowCol
parameter_list|,
name|int
name|expBlocksRow
parameter_list|,
name|int
name|expBlocksNone
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getData
argument_list|(
name|family
argument_list|,
name|row
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|column
argument_list|)
argument_list|,
name|expBlocksRowCol
argument_list|,
name|expBlocksRow
argument_list|,
name|expBlocksNone
argument_list|)
return|;
block|}
specifier|private
name|void
name|deleteFamily
parameter_list|(
name|String
name|family
parameter_list|,
name|String
name|row
parameter_list|,
name|long
name|version
parameter_list|)
throws|throws
name|IOException
block|{
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|del
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
operator|+
literal|"_ROWCOL"
argument_list|)
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|del
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
operator|+
literal|"_ROW"
argument_list|)
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|del
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
operator|+
literal|"_NONE"
argument_list|)
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|verifyData
parameter_list|(
name|Cell
name|kv
parameter_list|,
name|String
name|expectedRow
parameter_list|,
name|String
name|expectedCol
parameter_list|,
name|long
name|expectedVersion
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"RowCheck"
argument_list|,
name|CellUtil
operator|.
name|matchingRows
argument_list|(
name|kv
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|expectedRow
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ColumnCheck"
argument_list|,
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|kv
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|expectedCol
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TSCheck"
argument_list|,
name|expectedVersion
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ValueCheck"
argument_list|,
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|kv
argument_list|,
name|genValue
argument_list|(
name|expectedRow
argument_list|,
name|expectedCol
argument_list|,
name|expectedVersion
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|long
name|getBlkAccessCount
parameter_list|(
name|byte
index|[]
name|cf
parameter_list|)
block|{
return|return
name|HFile
operator|.
name|DATABLOCK_READ_COUNT
operator|.
name|sum
argument_list|()
return|;
block|}
comment|/**    * Test # of blocks read for some simple seek cases.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testBlocksRead
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testBlocksRead"
argument_list|)
decl_stmt|;
name|String
name|FAMILY
init|=
literal|"cf1"
decl_stmt|;
name|Cell
name|kvs
index|[]
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|TABLE
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
try|try
block|{
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col4"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col5"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col6"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col7"
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Expected block reads: 1
comment|// The top block has the KV we are
comment|// interested. So only 1 seek is needed.
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Expected block reads: 2
comment|// The top block and next block has the KVs we are
comment|// interested. So only 2 seek is needed.
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Expected block reads: 3
comment|// The first 2 seeks is to find out col2. [HBASE-4443]
comment|// One additional seek for col3
comment|// So 3 seeks are needed.
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col2"
argument_list|,
literal|"col3"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Expected block reads: 1. [HBASE-4443]&[HBASE-7845]
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col5"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col5"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Test # of blocks read (targeted at some of the cases Lazy Seek optimizes).    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testLazySeekBlocksRead
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testLazySeekBlocksRead"
argument_list|)
decl_stmt|;
name|String
name|FAMILY
init|=
literal|"cf1"
decl_stmt|;
name|Cell
name|kvs
index|[]
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|TABLE
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
try|try
block|{
comment|// File 1
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// File 2
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Expected blocks read: 1.
comment|// File 2's top block is also the KV we are
comment|// interested. So only 1 seek is needed.
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Expected blocks read: 2
comment|// File 2's top block has the "col1" KV we are
comment|// interested. We also need "col2" which is in a block
comment|// of its own. So, we need that block as well.
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// File 3: Add another column
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Expected blocks read: 1
comment|// File 3's top block has the "col3" KV we are
comment|// interested. So only 1 seek is needed.
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Get a column from older file.
comment|// For ROWCOL Bloom filter: Expected blocks read: 1.
comment|// For ROW Bloom filter: Expected blocks read: 2.
comment|// For NONE Bloom filter: Expected blocks read: 2.
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// File 4: Delete the entire row.
name|deleteFamily
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// For ROWCOL Bloom filter: Expected blocks read: 2.
comment|// For ROW Bloom filter: Expected blocks read: 3.
comment|// For NONE Bloom filter: Expected blocks read: 3.
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|,
literal|"col3"
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// File 5: Delete
name|deleteFamily
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// File 6: some more puts, but with timestamps older than the
comment|// previous delete.
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Baseline expected blocks read: 6. [HBASE-4532]
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|,
literal|"col3"
argument_list|)
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// File 7: Put back new data
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Expected blocks read: 8. [HBASE-4585, HBASE-13109]
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|,
literal|"col3"
argument_list|)
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col3"
argument_list|,
literal|13
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Test # of blocks read to ensure disabling cache-fill on Scan works.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testBlocksStoredWhenCachingDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testBlocksReadWhenCachingDisabled"
argument_list|)
decl_stmt|;
name|String
name|FAMILY
init|=
literal|"cf1"
decl_stmt|;
name|BlockCache
name|blockCache
init|=
name|BlockCacheFactory
operator|.
name|createBlockCache
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|TABLE
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|FAMILY
argument_list|,
name|blockCache
argument_list|)
expr_stmt|;
try|try
block|{
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Execute a scan with caching turned off
comment|// Expected blocks stored: 0
name|long
name|blocksStart
init|=
name|blockCache
operator|.
name|getBlockCount
argument_list|()
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setCacheBlocks
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|RegionScanner
name|rs
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|rs
operator|.
name|next
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|BLOOM_TYPE
operator|.
name|length
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|blocksEnd
init|=
name|blockCache
operator|.
name|getBlockCount
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|blocksStart
argument_list|,
name|blocksEnd
argument_list|)
expr_stmt|;
comment|// Execute with caching turned on
comment|// Expected blocks stored: 2
name|blocksStart
operator|=
name|blocksEnd
expr_stmt|;
name|scan
operator|.
name|setCacheBlocks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rs
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|rs
operator|.
name|next
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|BLOOM_TYPE
operator|.
name|length
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|blocksEnd
operator|=
name|blockCache
operator|.
name|getBlockCount
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|BLOOM_TYPE
operator|.
name|length
argument_list|,
name|blocksEnd
operator|-
name|blocksStart
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLazySeekBlocksReadWithDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testLazySeekBlocksReadWithDelete"
argument_list|)
decl_stmt|;
name|String
name|FAMILY
init|=
literal|"cf1"
decl_stmt|;
name|Cell
name|kvs
index|[]
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|TABLE
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
try|try
block|{
name|deleteFamily
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|200
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col"
operator|+
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|putData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
literal|"col99"
argument_list|,
literal|201
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col0"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|getData
argument_list|(
name|FAMILY
argument_list|,
literal|"row"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col99"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
literal|"row"
argument_list|,
literal|"col99"
argument_list|,
literal|201
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

