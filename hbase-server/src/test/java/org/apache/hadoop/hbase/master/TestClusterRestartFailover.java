begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|StartMiniClusterOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|ServerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|ServerStateNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|ServerCrashProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestClusterRestartFailover
extends|extends
name|AbstractTestRestartCluster
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestClusterRestartFailover
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestClusterRestartFailover
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
specifier|static
name|CountDownLatch
name|SCP_LATCH
decl_stmt|;
specifier|private
specifier|static
name|ServerName
name|SERVER_FOR_TEST
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|boolean
name|splitWALCoordinatedByZk
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|private
name|ServerStateNode
name|getServerStateNode
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
return|return
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getServerNode
argument_list|(
name|serverName
argument_list|)
return|;
block|}
comment|/**    * Test for HBASE-22964    */
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCluster
argument_list|()
expr_stmt|;
name|setupTable
argument_list|()
expr_stmt|;
comment|// Find server that does not have hbase:namespace on it. This tests holds up SCPs. If it
comment|// holds up the server w/ hbase:namespace, the Master initialization will be held up
comment|// because this table is not online and test fails.
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|rst
range|:
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
control|)
block|{
name|HRegionServer
name|rs
init|=
name|rst
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|getRegions
argument_list|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SERVER_FOR_TEST
operator|=
name|rs
operator|.
name|getServerName
argument_list|()
expr_stmt|;
block|}
block|}
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|60000
argument_list|,
parameter_list|()
lambda|->
name|getServerStateNode
argument_list|(
name|SERVER_FOR_TEST
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|ServerStateNode
name|serverNode
init|=
name|getServerStateNode
argument_list|(
name|SERVER_FOR_TEST
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|serverNode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"serverNode should be ONLINE when cluster runs normally"
argument_list|,
name|serverNode
operator|.
name|isInState
argument_list|(
name|ServerState
operator|.
name|ONLINE
argument_list|)
argument_list|)
expr_stmt|;
name|SCP_LATCH
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Shutdown cluster and restart
name|List
argument_list|<
name|Integer
argument_list|>
name|ports
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServersList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|serverName
lambda|->
name|serverName
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down cluster"
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|killAll
argument_list|()
expr_stmt|;
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|waitUntilShutDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarting cluster"
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|restartHBaseCluster
argument_list|(
name|StartMiniClusterOption
operator|.
name|builder
argument_list|()
operator|.
name|masterClass
argument_list|(
name|HMasterForTest
operator|.
name|class
argument_list|)
operator|.
name|numMasters
argument_list|(
literal|1
argument_list|)
operator|.
name|numRegionServers
argument_list|(
literal|3
argument_list|)
operator|.
name|rsPorts
argument_list|(
name|ports
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started cluster"
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|60000
argument_list|,
parameter_list|()
lambda|->
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|isInitialized
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started cluster master, waiting for {}"
argument_list|,
name|SERVER_FOR_TEST
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|60000
argument_list|,
parameter_list|()
lambda|->
name|getServerStateNode
argument_list|(
name|SERVER_FOR_TEST
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|serverNode
operator|=
name|getServerStateNode
argument_list|(
name|SERVER_FOR_TEST
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"serverNode should not be ONLINE during SCP processing"
argument_list|,
name|serverNode
operator|.
name|isInState
argument_list|(
name|ServerState
operator|.
name|ONLINE
argument_list|)
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|Procedure
argument_list|<
name|?
argument_list|>
argument_list|>
name|procedure
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getProcedures
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
operator|(
name|p
operator|instanceof
name|ServerCrashProcedure
operator|)
operator|&&
operator|(
operator|(
name|ServerCrashProcedure
operator|)
name|p
operator|)
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|SERVER_FOR_TEST
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have one SCP for "
operator|+
name|SERVER_FOR_TEST
argument_list|,
name|procedure
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Submit the SCP for the same serverName "
operator|+
name|SERVER_FOR_TEST
operator|+
literal|" which should fail"
argument_list|,
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerManager
argument_list|()
operator|.
name|expireServer
argument_list|(
name|SERVER_FOR_TEST
argument_list|)
operator|==
name|Procedure
operator|.
name|NO_PROC_ID
argument_list|)
expr_stmt|;
comment|// Wait the SCP to finish
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting on latch"
argument_list|)
expr_stmt|;
name|SCP_LATCH
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|60000
argument_list|,
parameter_list|()
lambda|->
name|procedure
operator|.
name|get
argument_list|()
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Even when the SCP is finished, the duplicate SCP should not be scheduled for "
operator|+
name|SERVER_FOR_TEST
argument_list|,
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerManager
argument_list|()
operator|.
name|expireServer
argument_list|(
name|SERVER_FOR_TEST
argument_list|)
operator|==
name|Procedure
operator|.
name|NO_PROC_ID
argument_list|)
expr_stmt|;
name|serverNode
operator|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getServerNode
argument_list|(
name|SERVER_FOR_TEST
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"serverNode should be deleted after SCP finished"
argument_list|,
name|serverNode
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup cluster"
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
name|StartMiniClusterOption
operator|.
name|builder
argument_list|()
operator|.
name|masterClass
argument_list|(
name|HMasterForTest
operator|.
name|class
argument_list|)
operator|.
name|numMasters
argument_list|(
literal|1
argument_list|)
operator|.
name|numRegionServers
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster is up"
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|60000
argument_list|,
parameter_list|()
lambda|->
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|isInitialized
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Master is up"
argument_list|)
expr_stmt|;
comment|// wait for all SCPs finished
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|60000
argument_list|,
parameter_list|()
lambda|->
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getProcedures
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|p
lambda|->
name|p
operator|instanceof
name|ServerCrashProcedure
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"No SCPs"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupTable
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TABLES
index|[
literal|0
index|]
decl_stmt|;
name|UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|UTIL
operator|.
name|loadTable
argument_list|(
name|table
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|HMasterForTest
extends|extends
name|HMaster
block|{
specifier|public
name|HMasterForTest
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|AssignmentManager
name|createAssignmentManager
parameter_list|(
name|MasterServices
name|master
parameter_list|)
block|{
return|return
operator|new
name|AssignmentManagerForTest
argument_list|(
name|master
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|AssignmentManagerForTest
extends|extends
name|AssignmentManager
block|{
specifier|public
name|AssignmentManagerForTest
parameter_list|(
name|MasterServices
name|master
parameter_list|)
block|{
name|super
argument_list|(
name|master
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|getRegionsOnServer
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|super
operator|.
name|getRegionsOnServer
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
comment|// ServerCrashProcedure will call this method, so wait the CountDownLatch here
if|if
condition|(
name|SCP_LATCH
operator|!=
literal|null
operator|&&
name|SERVER_FOR_TEST
operator|!=
literal|null
operator|&&
name|serverName
operator|.
name|equals
argument_list|(
name|SERVER_FOR_TEST
argument_list|)
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ServerCrashProcedure wait the CountDownLatch here"
argument_list|)
expr_stmt|;
name|SCP_LATCH
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Continue the ServerCrashProcedure"
argument_list|)
expr_stmt|;
name|SCP_LATCH
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|regions
return|;
block|}
block|}
block|}
end_class

end_unit

