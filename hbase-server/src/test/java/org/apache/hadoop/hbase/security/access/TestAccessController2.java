begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AuthUtil
operator|.
name|toGroupEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionServerCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SecurityTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TestTableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SecurityTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAccessController2
extends|extends
name|SecureTestUtil
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAccessController2
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
comment|/** The systemUserConnection created here is tied to the system user. In case, you are planning    * to create AccessTestAction, DON'T use this systemUserConnection as the 'doAs' user    * gets  eclipsed by the system user. */
specifier|private
specifier|static
name|Connection
name|systemUserConnection
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|Q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|value1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|TEST_FAMILY_2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|TEST_ROW_2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r2"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|Q2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q2"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|value2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|TEST_ROW_3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r3"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TESTGROUP_1
init|=
literal|"testgroup_1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TESTGROUP_2
init|=
literal|"testgroup_2"
decl_stmt|;
specifier|private
specifier|static
name|User
name|TESTGROUP1_USER1
decl_stmt|;
specifier|private
specifier|static
name|User
name|TESTGROUP2_USER1
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestTableName
name|TEST_TABLE
init|=
operator|new
name|TestTableName
argument_list|()
decl_stmt|;
specifier|private
name|String
name|namespace
init|=
literal|"testNamespace"
decl_stmt|;
specifier|private
name|String
name|tname
init|=
name|namespace
operator|+
literal|":testtable1"
decl_stmt|;
specifier|private
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tname
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|TESTGROUP_1_NAME
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
comment|// Up the handlers; this test needs more than usual.
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_HIGH_PRIORITY_HANDLER_COUNT
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Enable security
name|enableSecurity
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Verify enableSecurity sets up what we require
name|verifyConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
comment|// Wait for the ACL table to become available
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
expr_stmt|;
name|TESTGROUP_1_NAME
operator|=
name|toGroupEntry
argument_list|(
name|TESTGROUP_1
argument_list|)
expr_stmt|;
name|TESTGROUP1_USER1
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"testgroup1_user1"
argument_list|,
operator|new
name|String
index|[]
block|{
name|TESTGROUP_1
block|}
argument_list|)
expr_stmt|;
name|TESTGROUP2_USER1
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"testgroup2_user2"
argument_list|,
operator|new
name|String
index|[]
block|{
name|TESTGROUP_2
block|}
argument_list|)
expr_stmt|;
name|systemUserConnection
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|createNamespace
argument_list|(
name|TEST_UTIL
argument_list|,
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|namespace
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|createTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|TEST_FAMILY
block|,
name|TEST_FAMILY_2
block|}
argument_list|)
init|)
block|{
name|TEST_UTIL
operator|.
name|waitTableEnabled
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Ingesting test data.
name|table
operator|.
name|put
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|Q1
argument_list|,
name|value1
argument_list|)
argument_list|,
operator|new
name|Put
argument_list|(
name|TEST_ROW_2
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|Q2
argument_list|,
name|value2
argument_list|)
argument_list|,
operator|new
name|Put
argument_list|(
name|TEST_ROW_3
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY_2
argument_list|,
name|Q1
argument_list|,
name|value1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AccessControlLists
operator|.
name|getTablePermissions
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AccessControlClient
operator|.
name|getUserPermissions
argument_list|(
name|systemUserConnection
argument_list|,
name|tableName
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during call of AccessControlClient.getUserPermissions. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|systemUserConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Clean the _acl_ table
try|try
block|{
name|deleteTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|ex
parameter_list|)
block|{
comment|// Test deleted the table, no problem
name|LOG
operator|.
name|info
argument_list|(
literal|"Test deleted table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
name|deleteNamespace
argument_list|(
name|TEST_UTIL
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
comment|// Verify all table/namespace permissions are erased
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|AccessControlLists
operator|.
name|getTablePermissions
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|AccessControlLists
operator|.
name|getNamespacePermissions
argument_list|(
name|conf
argument_list|,
name|namespace
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testCreateWithCorrectOwner
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a test user
specifier|final
name|User
name|testUser
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"TestUser"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// Grant the test user the ability to create tables
name|SecureTestUtil
operator|.
name|grantGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|testUser
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|testUser
argument_list|)
init|)
block|{
try|try
init|(
name|Admin
name|admin
init|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|createTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|admin
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|testUser
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that owner permissions have been granted to the test user on the
comment|// table just created
name|List
argument_list|<
name|TablePermission
argument_list|>
name|perms
init|=
name|AccessControlLists
operator|.
name|getTablePermissions
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|testUser
operator|.
name|getShortName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|perms
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|perms
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should be RWXCA
name|assertTrue
argument_list|(
name|perms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|implies
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|perms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|implies
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|perms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|implies
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|EXEC
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|perms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|implies
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|perms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|implies
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testCreateTableWithGroupPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|grantGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|TESTGROUP_1_NAME
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
try|try
block|{
name|AccessTestAction
name|createAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
try|try
init|(
name|Admin
name|admin
init|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|createAction
argument_list|,
name|TESTGROUP1_USER1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|createAction
argument_list|,
name|TESTGROUP2_USER1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|revokeGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|TESTGROUP_1_NAME
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testACLTableAccess
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Superuser
name|User
name|superUser
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"admin"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
argument_list|)
decl_stmt|;
comment|// Global users
name|User
name|globalRead
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"globalRead"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|User
name|globalWrite
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"globalWrite"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|User
name|globalCreate
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"globalCreate"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|User
name|globalAdmin
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"globalAdmin"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|SecureTestUtil
operator|.
name|grantGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|globalRead
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|grantGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|globalWrite
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|grantGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|globalCreate
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|grantGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|globalAdmin
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
comment|// Namespace users
name|User
name|nsRead
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"nsRead"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|User
name|nsWrite
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"nsWrite"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|User
name|nsCreate
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"nsCreate"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|User
name|nsAdmin
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"nsAdmin"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|SecureTestUtil
operator|.
name|grantOnNamespace
argument_list|(
name|TEST_UTIL
argument_list|,
name|nsRead
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|grantOnNamespace
argument_list|(
name|TEST_UTIL
argument_list|,
name|nsWrite
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|grantOnNamespace
argument_list|(
name|TEST_UTIL
argument_list|,
name|nsCreate
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|grantOnNamespace
argument_list|(
name|TEST_UTIL
argument_list|,
name|nsAdmin
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
comment|// Table users
name|User
name|tableRead
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"tableRead"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|User
name|tableWrite
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"tableWrite"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|User
name|tableCreate
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"tableCreate"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|User
name|tableAdmin
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"tableAdmin"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|SecureTestUtil
operator|.
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tableRead
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tableWrite
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tableCreate
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tableAdmin
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|grantGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|TESTGROUP_1_NAME
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Write tests
name|AccessTestAction
name|writeAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|t
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|AccessControlLists
operator|.
name|ACL_LIST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
name|TEST_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{           }
block|}
block|}
decl_stmt|;
comment|// All writes to ACL table denied except for GLOBAL WRITE permission and superuser
name|verifyDenied
argument_list|(
name|writeAction
argument_list|,
name|globalAdmin
argument_list|,
name|globalCreate
argument_list|,
name|globalRead
argument_list|,
name|TESTGROUP2_USER1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|writeAction
argument_list|,
name|nsAdmin
argument_list|,
name|nsCreate
argument_list|,
name|nsRead
argument_list|,
name|nsWrite
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|writeAction
argument_list|,
name|tableAdmin
argument_list|,
name|tableCreate
argument_list|,
name|tableRead
argument_list|,
name|tableWrite
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|writeAction
argument_list|,
name|superUser
argument_list|,
name|globalWrite
argument_list|,
name|TESTGROUP1_USER1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|revokeGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|TESTGROUP_1_NAME
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
name|grantGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|TESTGROUP_1_NAME
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Read tests
name|AccessTestAction
name|scanAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|t
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|ResultScanner
name|s
init|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|Result
name|r
init|=
name|s
operator|.
name|next
argument_list|()
init|;
name|r
operator|!=
literal|null
condition|;
name|r
operator|=
name|s
operator|.
name|next
argument_list|()
control|)
block|{
comment|// do nothing
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
decl_stmt|;
comment|// All reads from ACL table denied except for GLOBAL READ and superuser
name|verifyDenied
argument_list|(
name|scanAction
argument_list|,
name|globalAdmin
argument_list|,
name|globalCreate
argument_list|,
name|globalWrite
argument_list|,
name|TESTGROUP2_USER1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|scanAction
argument_list|,
name|nsCreate
argument_list|,
name|nsAdmin
argument_list|,
name|nsRead
argument_list|,
name|nsWrite
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|scanAction
argument_list|,
name|tableCreate
argument_list|,
name|tableAdmin
argument_list|,
name|tableRead
argument_list|,
name|tableWrite
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|scanAction
argument_list|,
name|superUser
argument_list|,
name|globalRead
argument_list|,
name|TESTGROUP1_USER1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|revokeGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|TESTGROUP_1_NAME
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Test table scan operation at table, column family and column qualifier level.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testPostGrantAndRevokeScanAction
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|scanTableActionForGroupWithTableLevelAccess
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
init|)
block|{
name|Scan
name|s1
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultScanner
name|scanner1
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s1
argument_list|)
init|;
init|)
block|{
name|Result
index|[]
name|next1
init|=
name|scanner1
operator|.
name|next
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"User having table level access should be able to scan all "
operator|+
literal|"the data in the table."
argument_list|,
name|next1
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|scanTableActionForGroupWithFamilyLevelAccess
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
init|)
block|{
name|Scan
name|s1
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultScanner
name|scanner1
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s1
argument_list|)
init|;
init|)
block|{
name|Result
index|[]
name|next1
init|=
name|scanner1
operator|.
name|next
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"User having column family level access should be able to scan all "
operator|+
literal|"the data belonging to that family."
argument_list|,
name|next1
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|scanFamilyActionForGroupWithFamilyLevelAccess
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
init|)
block|{
name|Scan
name|s1
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s1
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY_2
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner1
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s1
argument_list|)
init|;
init|)
block|{
name|scanner1
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|scanTableActionForGroupWithQualifierLevelAccess
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
init|)
block|{
name|Scan
name|s1
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultScanner
name|scanner1
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s1
argument_list|)
init|;
init|)
block|{
name|Result
index|[]
name|next1
init|=
name|scanner1
operator|.
name|next
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"User having column qualifier level access should be able to scan "
operator|+
literal|"that column family qualifier data."
argument_list|,
name|next1
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|scanFamilyActionForGroupWithQualifierLevelAccess
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
init|)
block|{
name|Scan
name|s1
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s1
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY_2
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner1
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s1
argument_list|)
init|;
init|)
block|{
name|scanner1
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|scanQualifierActionForGroupWithQualifierLevelAccess
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
init|)
block|{
name|Scan
name|s1
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s1
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|Q2
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner1
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s1
argument_list|)
init|;
init|)
block|{
name|scanner1
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// Verify user from a group which has table level access can read all the data and group which
comment|// has no access can't read any data.
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|TESTGROUP_1_NAME
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|TESTGROUP1_USER1
argument_list|,
name|scanTableActionForGroupWithTableLevelAccess
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|TESTGROUP2_USER1
argument_list|,
name|scanTableActionForGroupWithTableLevelAccess
argument_list|)
expr_stmt|;
comment|// Verify user from a group whose table level access has been revoked can't read any data.
name|revokeFromTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|TESTGROUP_1_NAME
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|TESTGROUP1_USER1
argument_list|,
name|scanTableActionForGroupWithTableLevelAccess
argument_list|)
expr_stmt|;
comment|// Verify user from a group which has column family level access can read all the data
comment|// belonging to that family and group which has no access can't read any data.
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|TESTGROUP_1_NAME
argument_list|,
name|tableName
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|TESTGROUP1_USER1
argument_list|,
name|scanTableActionForGroupWithFamilyLevelAccess
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|TESTGROUP1_USER1
argument_list|,
name|scanFamilyActionForGroupWithFamilyLevelAccess
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|TESTGROUP2_USER1
argument_list|,
name|scanTableActionForGroupWithFamilyLevelAccess
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|TESTGROUP2_USER1
argument_list|,
name|scanFamilyActionForGroupWithFamilyLevelAccess
argument_list|)
expr_stmt|;
comment|// Verify user from a group whose column family level access has been revoked can't read any
comment|// data from that family.
name|revokeFromTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|TESTGROUP_1_NAME
argument_list|,
name|tableName
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|TESTGROUP1_USER1
argument_list|,
name|scanTableActionForGroupWithFamilyLevelAccess
argument_list|)
expr_stmt|;
comment|// Verify user from a group which has column qualifier level access can read data that has this
comment|// family and qualifier, and group which has no access can't read any data.
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|TESTGROUP_1_NAME
argument_list|,
name|tableName
argument_list|,
name|TEST_FAMILY
argument_list|,
name|Q1
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|TESTGROUP1_USER1
argument_list|,
name|scanTableActionForGroupWithQualifierLevelAccess
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|TESTGROUP1_USER1
argument_list|,
name|scanFamilyActionForGroupWithQualifierLevelAccess
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|TESTGROUP1_USER1
argument_list|,
name|scanQualifierActionForGroupWithQualifierLevelAccess
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|TESTGROUP2_USER1
argument_list|,
name|scanTableActionForGroupWithQualifierLevelAccess
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|TESTGROUP2_USER1
argument_list|,
name|scanFamilyActionForGroupWithQualifierLevelAccess
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|TESTGROUP2_USER1
argument_list|,
name|scanQualifierActionForGroupWithQualifierLevelAccess
argument_list|)
expr_stmt|;
comment|// Verify user from a group whose column qualifier level access has been revoked can't read the
comment|// data having this column family and qualifier.
name|revokeFromTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|TESTGROUP_1_NAME
argument_list|,
name|tableName
argument_list|,
name|TEST_FAMILY
argument_list|,
name|Q1
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|TESTGROUP1_USER1
argument_list|,
name|scanTableActionForGroupWithQualifierLevelAccess
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|MyAccessController
extends|extends
name|AccessController
block|{   }
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testCoprocessorLoading
parameter_list|()
throws|throws
name|Exception
block|{
name|MasterCoprocessorHost
name|cpHost
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|cpHost
operator|.
name|load
argument_list|(
name|MyAccessController
operator|.
name|class
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_HIGHEST
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|AccessController
name|ACCESS_CONTROLLER
init|=
operator|(
name|AccessController
operator|)
name|cpHost
operator|.
name|findCoprocessor
argument_list|(
name|MyAccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|MasterCoprocessorEnvironment
name|CP_ENV
init|=
name|cpHost
operator|.
name|createEnvironment
argument_list|(
name|MyAccessController
operator|.
name|class
argument_list|,
name|ACCESS_CONTROLLER
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_HIGHEST
argument_list|,
literal|1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|RegionServerCoprocessorHost
name|rsHost
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionServerCoprocessorHost
argument_list|()
decl_stmt|;
name|RegionServerCoprocessorEnvironment
name|RSCP_ENV
init|=
name|rsHost
operator|.
name|createEnvironment
argument_list|(
name|MyAccessController
operator|.
name|class
argument_list|,
name|ACCESS_CONTROLLER
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_HIGHEST
argument_list|,
literal|1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testACLZNodeDeletion
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|baseAclZNode
init|=
literal|"/hbase/acl/"
decl_stmt|;
name|String
name|ns
init|=
literal|"testACLZNodeDeletionNamespace"
decl_stmt|;
name|NamespaceDescriptor
name|desc
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|ns
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createNamespace
argument_list|(
name|TEST_UTIL
argument_list|,
name|desc
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|ns
argument_list|,
literal|"testACLZNodeDeletionTable"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|htd
argument_list|)
expr_stmt|;
comment|// Namespace needs this, as they follow the lazy creation of ACL znode.
name|grantOnNamespace
argument_list|(
name|TEST_UTIL
argument_list|,
name|TESTGROUP1_USER1
operator|.
name|getShortName
argument_list|()
argument_list|,
name|ns
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|ZooKeeperWatcher
name|zkw
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The acl znode for table should exist"
argument_list|,
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|baseAclZNode
operator|+
name|table
operator|.
name|getNameAsString
argument_list|()
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The acl znode for namespace should exist"
argument_list|,
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|baseAclZNode
operator|+
name|convertToNamespace
argument_list|(
name|ns
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|revokeFromNamespace
argument_list|(
name|TEST_UTIL
argument_list|,
name|TESTGROUP1_USER1
operator|.
name|getShortName
argument_list|()
argument_list|,
name|ns
argument_list|,
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|deleteTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|deleteNamespace
argument_list|(
name|TEST_UTIL
argument_list|,
name|ns
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The acl znode for table should have been deleted"
argument_list|,
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|baseAclZNode
operator|+
name|table
operator|.
name|getNameAsString
argument_list|()
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The acl znode for namespace should have been deleted"
argument_list|,
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|baseAclZNode
operator|+
name|convertToNamespace
argument_list|(
name|ns
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

