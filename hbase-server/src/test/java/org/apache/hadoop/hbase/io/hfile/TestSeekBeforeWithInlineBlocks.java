begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|fs
operator|.
name|HFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|BloomFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSeekBeforeWithInlineBlocks
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSeekBeforeWithInlineBlocks
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_KV
init|=
literal|10000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DATA_BLOCK_SIZE
init|=
literal|4096
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BLOOM_BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|INDEX_CHUNK_SIZES
init|=
block|{
literal|65536
block|,
literal|4096
block|,
literal|1024
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|EXPECTED_NUM_LEVELS
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|RAND
init|=
operator|new
name|Random
argument_list|(
literal|192537
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/**    * Scanner.seekBefore() could fail because when seeking to a previous HFile data block, it needs     * to know the size of that data block, which it calculates using current data block offset and     * the previous data block offset.  This fails to work when there are leaf-level index blocks in     * the scannable section of the HFile, i.e. starting in HFileV2.  This test will try seekBefore()     * on a flat (single-level) and multi-level (2,3) HFile and confirm this bug is now fixed.  This    * bug also happens for inline Bloom blocks for the same reasons.    */
annotation|@
name|Test
specifier|public
name|void
name|testMultiIndexLevelRandomHFileWithBlooms
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
comment|// Try out different HFile versions to ensure reverse scan works on each version
for|for
control|(
name|int
name|hfileVersion
init|=
name|HFile
operator|.
name|MIN_FORMAT_VERSION_WITH_TAGS
init|;
name|hfileVersion
operator|<=
name|HFile
operator|.
name|MAX_FORMAT_VERSION
condition|;
name|hfileVersion
operator|++
control|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|HFile
operator|.
name|FORMAT_VERSION_KEY
argument_list|,
name|hfileVersion
argument_list|)
expr_stmt|;
name|fs
operator|=
name|HFileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Try out different bloom types because inline Bloom blocks break seekBefore()
for|for
control|(
name|BloomType
name|bloomType
range|:
name|BloomType
operator|.
name|values
argument_list|()
control|)
block|{
comment|// Test out HFile block indices of various sizes/levels
for|for
control|(
name|int
name|testI
init|=
literal|0
init|;
name|testI
operator|<
name|INDEX_CHUNK_SIZES
operator|.
name|length
condition|;
name|testI
operator|++
control|)
block|{
name|int
name|indexBlockSize
init|=
name|INDEX_CHUNK_SIZES
index|[
name|testI
index|]
decl_stmt|;
name|int
name|expectedNumLevels
init|=
name|EXPECTED_NUM_LEVELS
index|[
name|testI
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Testing HFileVersion: %s, BloomType: %s, Index Levels: %s"
argument_list|,
name|hfileVersion
argument_list|,
name|bloomType
argument_list|,
name|expectedNumLevels
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HFileBlockIndex
operator|.
name|MAX_CHUNK_SIZE_KEY
argument_list|,
name|indexBlockSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|BloomFilterFactory
operator|.
name|IO_STOREFILE_BLOOM_BLOCK_SIZE
argument_list|,
name|BLOOM_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|cells
init|=
operator|new
name|Cell
index|[
name|NUM_KV
index|]
decl_stmt|;
name|Path
name|hfilePath
init|=
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"testMultiIndexLevelRandomHFileWithBlooms-%s-%s-%s"
argument_list|,
name|hfileVersion
argument_list|,
name|bloomType
argument_list|,
name|testI
argument_list|)
argument_list|)
decl_stmt|;
comment|// Disable caching to prevent it from hiding any bugs in block seeks/reads
name|conf
operator|.
name|setFloat
argument_list|(
name|HConstants
operator|.
name|HFILE_BLOCK_CACHE_SIZE_KEY
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|CacheConfig
name|cacheConf
init|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Write the HFile
block|{
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
name|DATA_BLOCK_SIZE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StoreFile
operator|.
name|Writer
name|storeFileWriter
init|=
operator|new
name|StoreFile
operator|.
name|WriterBuilder
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|fs
argument_list|)
operator|.
name|withFilePath
argument_list|(
name|hfilePath
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|withBloomType
argument_list|(
name|bloomType
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_KV
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|TestHFileWriterV2
operator|.
name|randomOrderedKey
argument_list|(
name|RAND
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qual
init|=
name|TestHFileWriterV2
operator|.
name|randomRowOrQualifier
argument_list|(
name|RAND
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|TestHFileWriterV2
operator|.
name|randomValue
argument_list|(
name|RAND
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|FAM
argument_list|,
name|qual
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|storeFileWriter
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|cells
index|[
name|i
index|]
operator|=
name|kv
expr_stmt|;
block|}
name|storeFileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Read the HFile
name|HFile
operator|.
name|Reader
name|reader
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|hfilePath
argument_list|,
name|cacheConf
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Sanity check the HFile index level
name|assertEquals
argument_list|(
name|expectedNumLevels
argument_list|,
name|reader
operator|.
name|getTrailer
argument_list|()
operator|.
name|getNumDataIndexLevels
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that we can seekBefore in either direction and with both pread
comment|// enabled and disabled
for|for
control|(
name|boolean
name|pread
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
name|HFileScanner
name|scanner
init|=
name|reader
operator|.
name|getScanner
argument_list|(
literal|true
argument_list|,
name|pread
argument_list|)
decl_stmt|;
name|checkNoSeekBefore
argument_list|(
name|cells
argument_list|,
name|scanner
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|NUM_KV
condition|;
name|i
operator|++
control|)
block|{
name|checkSeekBefore
argument_list|(
name|cells
argument_list|,
name|scanner
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|checkCell
argument_list|(
name|cells
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
name|scanner
operator|.
name|getCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|scanner
operator|.
name|seekTo
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|NUM_KV
operator|-
literal|1
init|;
name|i
operator|>=
literal|1
condition|;
name|i
operator|--
control|)
block|{
name|checkSeekBefore
argument_list|(
name|cells
argument_list|,
name|scanner
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|checkCell
argument_list|(
name|cells
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
name|scanner
operator|.
name|getCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkNoSeekBefore
argument_list|(
name|cells
argument_list|,
name|scanner
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|checkSeekBefore
parameter_list|(
name|Cell
index|[]
name|cells
parameter_list|,
name|HFileScanner
name|scanner
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"Failed to seek to the key before #"
operator|+
name|i
operator|+
literal|" ("
operator|+
name|CellUtil
operator|.
name|getCellKeyAsString
argument_list|(
name|cells
index|[
name|i
index|]
argument_list|)
operator|+
literal|")"
argument_list|,
literal|true
argument_list|,
name|scanner
operator|.
name|seekBefore
argument_list|(
name|cells
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkNoSeekBefore
parameter_list|(
name|Cell
index|[]
name|cells
parameter_list|,
name|HFileScanner
name|scanner
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"Incorrectly succeeded in seeking to before first key ("
operator|+
name|CellUtil
operator|.
name|getCellKeyAsString
argument_list|(
name|cells
index|[
name|i
index|]
argument_list|)
operator|+
literal|")"
argument_list|,
literal|false
argument_list|,
name|scanner
operator|.
name|seekBefore
argument_list|(
name|cells
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Check a key/value pair after it was read by the reader */
specifier|private
name|void
name|checkCell
parameter_list|(
name|Cell
name|expected
parameter_list|,
name|Cell
name|actual
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected key %s, but was %s"
argument_list|,
name|CellUtil
operator|.
name|getCellKeyAsString
argument_list|(
name|expected
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|getCellKeyAsString
argument_list|(
name|actual
argument_list|)
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

