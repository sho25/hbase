begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|StartMiniClusterOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|DoNotRetryRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|MergeRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterRpcServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|RegionStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|RegionServerThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PairOfSameType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionStateTransition
operator|.
name|TransitionCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportRegionStateTransitionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportRegionStateTransitionResponse
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionMergeTransactionOnCluster
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRegionMergeTransactionOnCluster
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRegionMergeTransactionOnCluster
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NB_SERVERS
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILYNAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|INITIAL_REGION_NUM
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ROWSIZE
init|=
literal|200
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
name|ROWSIZE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|waitTime
init|=
literal|60
operator|*
literal|1000
decl_stmt|;
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|HMaster
name|MASTER
decl_stmt|;
specifier|private
specifier|static
name|Admin
name|ADMIN
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeAllTests
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start a cluster
name|StartMiniClusterOption
name|option
init|=
name|StartMiniClusterOption
operator|.
name|builder
argument_list|()
operator|.
name|masterClass
argument_list|(
name|MyMaster
operator|.
name|class
argument_list|)
operator|.
name|numRegionServers
argument_list|(
name|NB_SERVERS
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NB_SERVERS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|MASTER
operator|=
name|cluster
operator|.
name|getMaster
argument_list|()
expr_stmt|;
name|MASTER
operator|.
name|balanceSwitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ADMIN
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterAllTests
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
if|if
condition|(
name|ADMIN
operator|!=
literal|null
condition|)
name|ADMIN
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWholesomeMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create table and load data.
name|Table
name|table
init|=
name|createTableAndLoadData
argument_list|(
name|MASTER
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
comment|// Merge 1st and 2nd region
name|mergeRegionsAndVerifyRegionNum
argument_list|(
name|MASTER
argument_list|,
name|tableName
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|INITIAL_REGION_NUM
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Merge 2nd and 3th region
name|PairOfSameType
argument_list|<
name|RegionInfo
argument_list|>
name|mergedRegions
init|=
name|mergeRegionsAndVerifyRegionNum
argument_list|(
name|MASTER
argument_list|,
name|tableName
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|INITIAL_REGION_NUM
operator|-
literal|2
argument_list|)
decl_stmt|;
name|verifyRowCount
argument_list|(
name|table
argument_list|,
name|ROWSIZE
argument_list|)
expr_stmt|;
comment|// Randomly choose one of the two merged regions
name|RegionInfo
name|hri
init|=
name|RandomUtils
operator|.
name|nextBoolean
argument_list|()
condition|?
name|mergedRegions
operator|.
name|getFirst
argument_list|()
else|:
name|mergedRegions
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|AssignmentManager
name|am
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
comment|// We should not be able to assign it again
name|am
operator|.
name|assign
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Merged region can't be assigned"
argument_list|,
name|regionStates
operator|.
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
comment|// We should not be able to unassign it either
name|am
operator|.
name|unassign
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Merged region can't be unassigned"
argument_list|,
name|regionStates
operator|.
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Not really restarting the master. Simulate it by clear of new region    * state since it is not persisted, will be lost after master restarts.    */
annotation|@
name|Test
specifier|public
name|void
name|testMergeAndRestartingMaster
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create table and load data.
name|Table
name|table
init|=
name|createTableAndLoadData
argument_list|(
name|MASTER
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|MyMasterRpcServices
operator|.
name|enabled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Merge 1st and 2nd region
name|mergeRegionsAndVerifyRegionNum
argument_list|(
name|MASTER
argument_list|,
name|tableName
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|INITIAL_REGION_NUM
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|MyMasterRpcServices
operator|.
name|enabled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCleanMergeReference
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|catalogJanitorSwitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create table and load data.
name|Table
name|table
init|=
name|createTableAndLoadData
argument_list|(
name|MASTER
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
comment|// Merge 1st and 2nd region
name|mergeRegionsAndVerifyRegionNum
argument_list|(
name|MASTER
argument_list|,
name|tableName
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|INITIAL_REGION_NUM
operator|-
literal|1
argument_list|)
expr_stmt|;
name|verifyRowCount
argument_list|(
name|table
argument_list|,
name|ROWSIZE
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|tableRegions
init|=
name|MetaTableAccessor
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|MASTER
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|RegionInfo
name|mergedRegionInfo
init|=
name|tableRegions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|TableDescriptor
name|tableDescriptor
init|=
name|MASTER
operator|.
name|getTableDescriptors
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Result
name|mergedRegionResult
init|=
name|MetaTableAccessor
operator|.
name|getRegionResult
argument_list|(
name|MASTER
operator|.
name|getConnection
argument_list|()
argument_list|,
name|mergedRegionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
comment|// contains merge reference in META
name|assertTrue
argument_list|(
name|MetaTableAccessor
operator|.
name|hasMergeRegions
argument_list|(
name|mergedRegionResult
operator|.
name|rawCells
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// merging regions' directory are in the file system all the same
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|p
init|=
name|MetaTableAccessor
operator|.
name|getMergeRegions
argument_list|(
name|mergedRegionResult
operator|.
name|rawCells
argument_list|()
argument_list|)
decl_stmt|;
name|RegionInfo
name|regionA
init|=
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RegionInfo
name|regionB
init|=
name|p
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|MASTER
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|rootDir
init|=
name|MASTER
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
decl_stmt|;
name|Path
name|tabledir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|mergedRegionInfo
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|regionAdir
init|=
operator|new
name|Path
argument_list|(
name|tabledir
argument_list|,
name|regionA
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|regionBdir
init|=
operator|new
name|Path
argument_list|(
name|tabledir
argument_list|,
name|regionB
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|regionAdir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|regionBdir
argument_list|)
argument_list|)
expr_stmt|;
name|ColumnFamilyDescriptor
index|[]
name|columnFamilies
init|=
name|tableDescriptor
operator|.
name|getColumnFamilies
argument_list|()
decl_stmt|;
name|HRegionFileSystem
name|hrfs
init|=
operator|new
name|HRegionFileSystem
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
name|tabledir
argument_list|,
name|mergedRegionInfo
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|colFamily
range|:
name|columnFamilies
control|)
block|{
name|count
operator|+=
name|hrfs
operator|.
name|getStoreFiles
argument_list|(
name|colFamily
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|ADMIN
operator|.
name|compactRegion
argument_list|(
name|mergedRegionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
comment|// clean up the merged region store files
comment|// wait until merged region have reference file
name|long
name|timeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|waitTime
decl_stmt|;
name|int
name|newcount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
condition|)
block|{
for|for
control|(
name|ColumnFamilyDescriptor
name|colFamily
range|:
name|columnFamilies
control|)
block|{
name|newcount
operator|+=
name|hrfs
operator|.
name|getStoreFiles
argument_list|(
name|colFamily
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|newcount
operator|>
name|count
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|newcount
operator|>
name|count
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionServerThread
argument_list|>
name|regionServerThreads
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionServerThread
name|rs
range|:
name|regionServerThreads
control|)
block|{
name|CompactedHFilesDischarger
name|cleaner
init|=
operator|new
name|CompactedHFilesDischarger
argument_list|(
literal|100
argument_list|,
literal|null
argument_list|,
name|rs
operator|.
name|getRegionServer
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cleaner
operator|.
name|chore
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
condition|)
block|{
name|int
name|newcount1
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|colFamily
range|:
name|columnFamilies
control|)
block|{
name|newcount1
operator|+=
name|hrfs
operator|.
name|getStoreFiles
argument_list|(
name|colFamily
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|newcount1
operator|<=
literal|1
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
comment|// run CatalogJanitor to clean merge references in hbase:meta and archive the
comment|// files of merging regions
name|int
name|cleaned
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|cleaned
operator|==
literal|0
condition|)
block|{
name|cleaned
operator|=
name|ADMIN
operator|.
name|runCatalogJanitor
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"catalog janitor returned "
operator|+
name|cleaned
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
comment|// Cleanup is async so wait till all procedures are done running.
name|ProcedureTestingUtility
operator|.
name|waitNoProcedureRunning
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterProcedureExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|regionAdir
operator|.
name|toString
argument_list|()
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|regionAdir
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|regionBdir
operator|.
name|toString
argument_list|()
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|regionBdir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cleaned
operator|>
literal|0
argument_list|)
expr_stmt|;
name|mergedRegionResult
operator|=
name|MetaTableAccessor
operator|.
name|getRegionResult
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|mergedRegionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MetaTableAccessor
operator|.
name|hasMergeRegions
argument_list|(
name|mergedRegionResult
operator|.
name|rawCells
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ADMIN
operator|.
name|catalogJanitorSwitch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This test tests 1, merging region not online;    * 2, merging same two regions; 3, merging unknown regions.    * They are in one test case so that we don't have to create    * many tables, and these tests are simple.    */
annotation|@
name|Test
specifier|public
name|void
name|testMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Create table and load data.
name|Table
name|table
init|=
name|createTableAndLoadData
argument_list|(
name|MASTER
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|AssignmentManager
name|am
init|=
name|MASTER
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Fake offline one region
name|RegionInfo
name|a
init|=
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RegionInfo
name|b
init|=
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|am
operator|.
name|unassign
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|am
operator|.
name|offlineRegion
argument_list|(
name|b
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Merge offline region. Region a is offline here
name|FutureUtils
operator|.
name|get
argument_list|(
name|admin
operator|.
name|mergeRegionsAsync
argument_list|(
name|a
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|b
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Offline regions should not be able to merge"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryRegionException
name|ie
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ie
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ie
operator|instanceof
name|MergeRegionException
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Merge the same region: b and b.
name|FutureUtils
operator|.
name|get
argument_list|(
name|admin
operator|.
name|mergeRegionsAsync
argument_list|(
name|b
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|b
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"A region should not be able to merge with itself, even forcfully"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Exception should mention regions not online"
argument_list|,
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ie
argument_list|)
operator|.
name|contains
argument_list|(
literal|"region to itself"
argument_list|)
operator|&&
name|ie
operator|instanceof
name|MergeRegionException
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Merge unknown regions
name|FutureUtils
operator|.
name|get
argument_list|(
name|admin
operator|.
name|mergeRegionsAsync
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-f1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-f2"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Unknown region could not be merged"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"UnknownRegionException should be thrown"
argument_list|,
name|ie
operator|instanceof
name|UnknownRegionException
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeWithReplicas
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create table and load data.
name|createTableAndLoadData
argument_list|(
name|MASTER
argument_list|,
name|tableName
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|initialRegionToServers
init|=
name|MetaTableAccessor
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
comment|// Merge 1st and 2nd region
name|PairOfSameType
argument_list|<
name|RegionInfo
argument_list|>
name|mergedRegions
init|=
name|mergeRegionsAndVerifyRegionNum
argument_list|(
name|MASTER
argument_list|,
name|tableName
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|5
operator|*
literal|2
operator|-
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|currentRegionToServers
init|=
name|MetaTableAccessor
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|initialRegions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|p
range|:
name|initialRegionToServers
control|)
block|{
name|initialRegions
operator|.
name|add
argument_list|(
name|p
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|currentRegions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|p
range|:
name|currentRegionToServers
control|)
block|{
name|currentRegions
operator|.
name|add
argument_list|(
name|p
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|initialRegions
operator|.
name|contains
argument_list|(
name|mergedRegions
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//this is the first region
name|assertTrue
argument_list|(
name|initialRegions
operator|.
name|contains
argument_list|(
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|mergedRegions
operator|.
name|getFirst
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//this is the replica of the first region
name|assertTrue
argument_list|(
name|initialRegions
operator|.
name|contains
argument_list|(
name|mergedRegions
operator|.
name|getSecond
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//this is the second region
name|assertTrue
argument_list|(
name|initialRegions
operator|.
name|contains
argument_list|(
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|mergedRegions
operator|.
name|getSecond
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//this is the replica of the second region
name|assertTrue
argument_list|(
operator|!
name|initialRegions
operator|.
name|contains
argument_list|(
name|currentRegions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//this is the new region
name|assertTrue
argument_list|(
operator|!
name|initialRegions
operator|.
name|contains
argument_list|(
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|currentRegions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//replica of the new region
name|assertTrue
argument_list|(
name|currentRegions
operator|.
name|contains
argument_list|(
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|currentRegions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//replica of the new region
name|assertTrue
argument_list|(
operator|!
name|currentRegions
operator|.
name|contains
argument_list|(
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|mergedRegions
operator|.
name|getFirst
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//replica of the merged region
name|assertTrue
argument_list|(
operator|!
name|currentRegions
operator|.
name|contains
argument_list|(
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|mergedRegions
operator|.
name|getSecond
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//replica of the merged region
block|}
specifier|private
name|PairOfSameType
argument_list|<
name|RegionInfo
argument_list|>
name|mergeRegionsAndVerifyRegionNum
parameter_list|(
name|HMaster
name|master
parameter_list|,
name|TableName
name|tablename
parameter_list|,
name|int
name|regionAnum
parameter_list|,
name|int
name|regionBnum
parameter_list|,
name|int
name|expectedRegionNum
parameter_list|)
throws|throws
name|Exception
block|{
name|PairOfSameType
argument_list|<
name|RegionInfo
argument_list|>
name|mergedRegions
init|=
name|requestMergeRegion
argument_list|(
name|master
argument_list|,
name|tablename
argument_list|,
name|regionAnum
argument_list|,
name|regionBnum
argument_list|)
decl_stmt|;
name|waitAndVerifyRegionNum
argument_list|(
name|master
argument_list|,
name|tablename
argument_list|,
name|expectedRegionNum
argument_list|)
expr_stmt|;
return|return
name|mergedRegions
return|;
block|}
specifier|private
name|PairOfSameType
argument_list|<
name|RegionInfo
argument_list|>
name|requestMergeRegion
parameter_list|(
name|HMaster
name|master
parameter_list|,
name|TableName
name|tablename
parameter_list|,
name|int
name|regionAnum
parameter_list|,
name|int
name|regionBnum
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|tableRegions
init|=
name|MetaTableAccessor
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tablename
argument_list|)
decl_stmt|;
name|RegionInfo
name|regionA
init|=
name|tableRegions
operator|.
name|get
argument_list|(
name|regionAnum
argument_list|)
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|RegionInfo
name|regionB
init|=
name|tableRegions
operator|.
name|get
argument_list|(
name|regionBnum
argument_list|)
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|ADMIN
operator|.
name|mergeRegionsAsync
argument_list|(
name|regionA
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regionB
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
operator|new
name|PairOfSameType
argument_list|<>
argument_list|(
name|regionA
argument_list|,
name|regionB
argument_list|)
return|;
block|}
specifier|private
name|void
name|waitAndVerifyRegionNum
parameter_list|(
name|HMaster
name|master
parameter_list|,
name|TableName
name|tablename
parameter_list|,
name|int
name|expectedRegionNum
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|tableRegionsInMeta
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|tableRegionsInMaster
decl_stmt|;
name|long
name|timeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|waitTime
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
condition|)
block|{
name|tableRegionsInMeta
operator|=
name|MetaTableAccessor
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tablename
argument_list|)
expr_stmt|;
name|tableRegionsInMaster
operator|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsOfTable
argument_list|(
name|tablename
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|Objects
operator|.
name|toString
argument_list|(
name|tableRegionsInMaster
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|Objects
operator|.
name|toString
argument_list|(
name|tableRegionsInMeta
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|tableRegionsInMetaSize
init|=
name|tableRegionsInMeta
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|tableRegionsInMasterSize
init|=
name|tableRegionsInMaster
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableRegionsInMetaSize
operator|==
name|expectedRegionNum
operator|&&
name|tableRegionsInMasterSize
operator|==
name|expectedRegionNum
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
name|tableRegionsInMeta
operator|=
name|MetaTableAccessor
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tablename
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Regions after merge:"
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|tableRegionsInMeta
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRegionNum
argument_list|,
name|tableRegionsInMeta
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Table
name|createTableAndLoadData
parameter_list|(
name|HMaster
name|master
parameter_list|,
name|TableName
name|tablename
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createTableAndLoadData
argument_list|(
name|master
argument_list|,
name|tablename
argument_list|,
name|INITIAL_REGION_NUM
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|private
name|Table
name|createTableAndLoadData
parameter_list|(
name|HMaster
name|master
parameter_list|,
name|TableName
name|tablename
parameter_list|,
name|int
name|numRegions
parameter_list|,
name|int
name|replication
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"ROWSIZE must> numregions:"
operator|+
name|numRegions
argument_list|,
name|ROWSIZE
operator|>
name|numRegions
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|splitRows
init|=
operator|new
name|byte
index|[
name|numRegions
operator|-
literal|1
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splitRows
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|splitRows
index|[
name|i
index|]
operator|=
name|ROWS
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
name|ROWSIZE
operator|/
name|numRegions
index|]
expr_stmt|;
block|}
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tablename
argument_list|,
name|FAMILYNAME
argument_list|,
name|splitRows
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created "
operator|+
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|replication
operator|>
literal|1
condition|)
block|{
name|HBaseTestingUtility
operator|.
name|setReplicas
argument_list|(
name|ADMIN
argument_list|,
name|tablename
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Set replication of "
operator|+
name|replication
operator|+
literal|" on "
operator|+
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|loadData
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded "
operator|+
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|verifyRowCount
argument_list|(
name|table
argument_list|,
name|ROWSIZE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verified "
operator|+
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|tableRegions
decl_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|tablename
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"All regions assigned for table - "
operator|+
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tableRegions
operator|=
name|MetaTableAccessor
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tablename
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of regions in table "
operator|+
name|tablename
argument_list|,
name|numRegions
operator|*
name|replication
argument_list|,
name|tableRegions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|tableRegions
operator|.
name|size
argument_list|()
operator|+
literal|"Regions after load: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|tableRegions
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numRegions
operator|*
name|replication
argument_list|,
name|tableRegions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|makeN
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|base
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%04d"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|loadData
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROWSIZE
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILYNAME
argument_list|,
name|QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyRowCount
parameter_list|(
name|Table
name|table
parameter_list|,
name|int
name|expectedRegionNum
parameter_list|)
throws|throws
name|IOException
block|{
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rowCount
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedRegionNum
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Make it public so that JVMClusterUtil can access it.
specifier|public
specifier|static
class|class
name|MyMaster
extends|extends
name|HMaster
block|{
specifier|public
name|MyMaster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|RSRpcServices
name|createRpcServices
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|MyMasterRpcServices
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|MyMasterRpcServices
extends|extends
name|MasterRpcServices
block|{
specifier|static
name|AtomicBoolean
name|enabled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|HMaster
name|myMaster
decl_stmt|;
specifier|public
name|MyMasterRpcServices
parameter_list|(
name|HMaster
name|master
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|myMaster
operator|=
name|master
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ReportRegionStateTransitionResponse
name|reportRegionStateTransition
parameter_list|(
name|RpcController
name|c
parameter_list|,
name|ReportRegionStateTransitionRequest
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
name|ReportRegionStateTransitionResponse
name|resp
init|=
name|super
operator|.
name|reportRegionStateTransition
argument_list|(
name|c
argument_list|,
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|enabled
operator|.
name|get
argument_list|()
operator|&&
name|req
operator|.
name|getTransition
argument_list|(
literal|0
argument_list|)
operator|.
name|getTransitionCode
argument_list|()
operator|==
name|TransitionCode
operator|.
name|READY_TO_MERGE
operator|&&
operator|!
name|resp
operator|.
name|hasErrorMessage
argument_list|()
condition|)
block|{
name|RegionStates
name|regionStates
init|=
name|myMaster
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionState
name|regionState
range|:
name|regionStates
operator|.
name|getRegionsStateInTransition
argument_list|()
control|)
block|{
comment|// Find the merging_new region and remove it
if|if
condition|(
name|regionState
operator|.
name|isMergingNew
argument_list|()
condition|)
block|{
name|regionStates
operator|.
name|deleteRegion
argument_list|(
name|regionState
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|resp
return|;
block|}
block|}
block|}
end_class

end_unit

