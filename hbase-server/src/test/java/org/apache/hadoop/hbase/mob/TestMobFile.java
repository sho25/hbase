begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMobFile
extends|extends
name|TestCase
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMobFile
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|private
name|CacheConfig
name|cacheConf
init|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testReadKeyValue
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testDir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|testDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
literal|8
operator|*
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StoreFileWriter
name|writer
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|fs
argument_list|)
operator|.
name|withOutputDir
argument_list|(
name|testDir
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|caseName
init|=
name|getName
argument_list|()
decl_stmt|;
name|MobTestUtil
operator|.
name|writeStoreFile
argument_list|(
name|writer
argument_list|,
name|caseName
argument_list|)
expr_stmt|;
name|MobFile
name|mobFile
init|=
operator|new
name|MobFile
argument_list|(
operator|new
name|HStoreFile
argument_list|(
name|fs
argument_list|,
name|writer
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|caseName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualify
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|caseName
argument_list|)
decl_stmt|;
comment|// Test the start key
name|byte
index|[]
name|startKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aa"
argument_list|)
decl_stmt|;
comment|// The start key bytes
name|KeyValue
name|expectedKey
init|=
operator|new
name|KeyValue
argument_list|(
name|startKey
argument_list|,
name|family
argument_list|,
name|qualify
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Type
operator|.
name|Put
argument_list|,
name|startKey
argument_list|)
decl_stmt|;
name|KeyValue
name|seekKey
init|=
name|expectedKey
operator|.
name|createKeyOnly
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Cell
name|cell
init|=
name|mobFile
operator|.
name|readCell
argument_list|(
name|seekKey
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MobTestUtil
operator|.
name|assertCellEquals
argument_list|(
name|expectedKey
argument_list|,
name|cell
argument_list|)
expr_stmt|;
comment|// Test the end key
name|byte
index|[]
name|endKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zz"
argument_list|)
decl_stmt|;
comment|// The end key bytes
name|expectedKey
operator|=
operator|new
name|KeyValue
argument_list|(
name|endKey
argument_list|,
name|family
argument_list|,
name|qualify
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Type
operator|.
name|Put
argument_list|,
name|endKey
argument_list|)
expr_stmt|;
name|seekKey
operator|=
name|expectedKey
operator|.
name|createKeyOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cell
operator|=
name|mobFile
operator|.
name|readCell
argument_list|(
name|seekKey
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MobTestUtil
operator|.
name|assertCellEquals
argument_list|(
name|expectedKey
argument_list|,
name|cell
argument_list|)
expr_stmt|;
comment|// Test the random key
name|byte
index|[]
name|randomKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|MobTestUtil
operator|.
name|generateRandomString
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|expectedKey
operator|=
operator|new
name|KeyValue
argument_list|(
name|randomKey
argument_list|,
name|family
argument_list|,
name|qualify
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Type
operator|.
name|Put
argument_list|,
name|randomKey
argument_list|)
expr_stmt|;
name|seekKey
operator|=
name|expectedKey
operator|.
name|createKeyOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cell
operator|=
name|mobFile
operator|.
name|readCell
argument_list|(
name|seekKey
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MobTestUtil
operator|.
name|assertCellEquals
argument_list|(
name|expectedKey
argument_list|,
name|cell
argument_list|)
expr_stmt|;
comment|// Test the key which is less than the start key
name|byte
index|[]
name|lowerKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
comment|// Smaller than "aa"
name|expectedKey
operator|=
operator|new
name|KeyValue
argument_list|(
name|startKey
argument_list|,
name|family
argument_list|,
name|qualify
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Type
operator|.
name|Put
argument_list|,
name|startKey
argument_list|)
expr_stmt|;
name|seekKey
operator|=
operator|new
name|KeyValue
argument_list|(
name|lowerKey
argument_list|,
name|family
argument_list|,
name|qualify
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Type
operator|.
name|Put
argument_list|,
name|lowerKey
argument_list|)
expr_stmt|;
name|cell
operator|=
name|mobFile
operator|.
name|readCell
argument_list|(
name|seekKey
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MobTestUtil
operator|.
name|assertCellEquals
argument_list|(
name|expectedKey
argument_list|,
name|cell
argument_list|)
expr_stmt|;
comment|// Test the key which is more than the end key
name|byte
index|[]
name|upperKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"z{"
argument_list|)
decl_stmt|;
comment|// Bigger than "zz"
name|seekKey
operator|=
operator|new
name|KeyValue
argument_list|(
name|upperKey
argument_list|,
name|family
argument_list|,
name|qualify
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Type
operator|.
name|Put
argument_list|,
name|upperKey
argument_list|)
expr_stmt|;
name|cell
operator|=
name|mobFile
operator|.
name|readCell
argument_list|(
name|seekKey
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetScanner
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testDir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|testDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
literal|8
operator|*
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StoreFileWriter
name|writer
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|fs
argument_list|)
operator|.
name|withOutputDir
argument_list|(
name|testDir
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MobTestUtil
operator|.
name|writeStoreFile
argument_list|(
name|writer
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MobFile
name|mobFile
init|=
operator|new
name|MobFile
argument_list|(
operator|new
name|HStoreFile
argument_list|(
name|fs
argument_list|,
name|writer
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mobFile
operator|.
name|getScanner
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mobFile
operator|.
name|getScanner
argument_list|()
operator|instanceof
name|StoreFileScanner
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

