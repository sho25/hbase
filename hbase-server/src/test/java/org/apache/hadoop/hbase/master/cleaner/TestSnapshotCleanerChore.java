begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|SnapshotManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
import|;
end_import

begin_comment
comment|/**  * Tests for SnapshotsCleanerChore  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSnapshotCleanerChore
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSnapshotCleanerChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSnapshotCleanerChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|HBASE_TESTING_UTILITY
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|SnapshotManager
name|snapshotManager
decl_stmt|;
specifier|private
name|Configuration
name|getSnapshotCleanerConf
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBASE_TESTING_UTILITY
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.master.cleaner.snapshot.interval"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotCleanerWithoutAnyCompletedSnapshot
parameter_list|()
throws|throws
name|IOException
block|{
name|snapshotManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SnapshotManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|Stoppable
name|stopper
init|=
operator|new
name|StoppableImplementation
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|getSnapshotCleanerConf
argument_list|()
decl_stmt|;
name|SnapshotCleanerChore
name|snapshotCleanerChore
init|=
operator|new
name|SnapshotCleanerChore
argument_list|(
name|stopper
argument_list|,
name|conf
argument_list|,
name|snapshotManager
argument_list|)
decl_stmt|;
try|try
block|{
name|snapshotCleanerChore
operator|.
name|chore
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stopper
operator|.
name|stop
argument_list|(
literal|"Stopping Test Stopper"
argument_list|)
expr_stmt|;
block|}
name|Mockito
operator|.
name|verify
argument_list|(
name|snapshotManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|deleteSnapshot
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotCleanerWithNoTtlExpired
parameter_list|()
throws|throws
name|IOException
block|{
name|snapshotManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SnapshotManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|Stoppable
name|stopper
init|=
operator|new
name|StoppableImplementation
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|getSnapshotCleanerConf
argument_list|()
decl_stmt|;
name|SnapshotCleanerChore
name|snapshotCleanerChore
init|=
operator|new
name|SnapshotCleanerChore
argument_list|(
name|stopper
argument_list|,
name|conf
argument_list|,
name|snapshotManager
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SnapshotProtos
operator|.
name|SnapshotDescription
argument_list|>
name|snapshotDescriptionList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|snapshotDescriptionList
operator|.
name|add
argument_list|(
name|getSnapshotDescription
argument_list|(
operator|-
literal|2
argument_list|,
literal|"snapshot01"
argument_list|,
literal|"table01"
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|-
literal|100000
argument_list|)
argument_list|)
expr_stmt|;
name|snapshotDescriptionList
operator|.
name|add
argument_list|(
name|getSnapshotDescription
argument_list|(
literal|10
argument_list|,
literal|"snapshot02"
argument_list|,
literal|"table02"
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|snapshotManager
operator|.
name|getCompletedSnapshots
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|snapshotDescriptionList
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"2 Snapshots are completed but TTL is not expired for any of them"
argument_list|)
expr_stmt|;
name|snapshotCleanerChore
operator|.
name|chore
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stopper
operator|.
name|stop
argument_list|(
literal|"Stopping Test Stopper"
argument_list|)
expr_stmt|;
block|}
name|Mockito
operator|.
name|verify
argument_list|(
name|snapshotManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|deleteSnapshot
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotCleanerWithSomeTtlExpired
parameter_list|()
throws|throws
name|IOException
block|{
name|snapshotManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SnapshotManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|Stoppable
name|stopper
init|=
operator|new
name|StoppableImplementation
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|getSnapshotCleanerConf
argument_list|()
decl_stmt|;
name|SnapshotCleanerChore
name|snapshotCleanerChore
init|=
operator|new
name|SnapshotCleanerChore
argument_list|(
name|stopper
argument_list|,
name|conf
argument_list|,
name|snapshotManager
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SnapshotProtos
operator|.
name|SnapshotDescription
argument_list|>
name|snapshotDescriptionList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|snapshotDescriptionList
operator|.
name|add
argument_list|(
name|getSnapshotDescription
argument_list|(
literal|10
argument_list|,
literal|"snapshot01"
argument_list|,
literal|"table01"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|snapshotDescriptionList
operator|.
name|add
argument_list|(
name|getSnapshotDescription
argument_list|(
literal|5
argument_list|,
literal|"snapshot02"
argument_list|,
literal|"table02"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|snapshotDescriptionList
operator|.
name|add
argument_list|(
name|getSnapshotDescription
argument_list|(
literal|30
argument_list|,
literal|"snapshot01"
argument_list|,
literal|"table01"
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|snapshotDescriptionList
operator|.
name|add
argument_list|(
name|getSnapshotDescription
argument_list|(
literal|0
argument_list|,
literal|"snapshot02"
argument_list|,
literal|"table02"
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|snapshotDescriptionList
operator|.
name|add
argument_list|(
name|getSnapshotDescription
argument_list|(
literal|40
argument_list|,
literal|"snapshot03"
argument_list|,
literal|"table03"
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|snapshotManager
operator|.
name|getCompletedSnapshots
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|snapshotDescriptionList
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"5 Snapshots are completed. TTL is expired for 2 them. Going to delete them"
argument_list|)
expr_stmt|;
name|snapshotCleanerChore
operator|.
name|chore
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stopper
operator|.
name|stop
argument_list|(
literal|"Stopping Test Stopper"
argument_list|)
expr_stmt|;
block|}
name|Mockito
operator|.
name|verify
argument_list|(
name|snapshotManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|deleteSnapshot
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotCleanerWithReadIOE
parameter_list|()
throws|throws
name|IOException
block|{
name|snapshotManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SnapshotManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|Stoppable
name|stopper
init|=
operator|new
name|StoppableImplementation
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|SnapshotCleanerChore
name|snapshotCleanerChore
init|=
operator|new
name|SnapshotCleanerChore
argument_list|(
name|stopper
argument_list|,
name|conf
argument_list|,
name|snapshotManager
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|snapshotManager
operator|.
name|getCompletedSnapshots
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"While getting completed Snapshots, IOException would occur. Hence, No Snapshot"
operator|+
literal|" should be deleted"
argument_list|)
expr_stmt|;
name|snapshotCleanerChore
operator|.
name|chore
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stopper
operator|.
name|stop
argument_list|(
literal|"Stopping Test Stopper"
argument_list|)
expr_stmt|;
block|}
name|Mockito
operator|.
name|verify
argument_list|(
name|snapshotManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|deleteSnapshot
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotChoreWithTtlOutOfRange
parameter_list|()
throws|throws
name|IOException
block|{
name|snapshotManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SnapshotManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|Stoppable
name|stopper
init|=
operator|new
name|StoppableImplementation
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|getSnapshotCleanerConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SnapshotProtos
operator|.
name|SnapshotDescription
argument_list|>
name|snapshotDescriptionList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|snapshotDescriptionList
operator|.
name|add
argument_list|(
name|getSnapshotDescription
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|"snapshot01"
argument_list|,
literal|"table01"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|snapshotDescriptionList
operator|.
name|add
argument_list|(
name|getSnapshotDescription
argument_list|(
literal|5
argument_list|,
literal|"snapshot02"
argument_list|,
literal|"table02"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|snapshotManager
operator|.
name|getCompletedSnapshots
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|snapshotDescriptionList
argument_list|)
expr_stmt|;
name|SnapshotCleanerChore
name|snapshotCleanerChore
init|=
operator|new
name|SnapshotCleanerChore
argument_list|(
name|stopper
argument_list|,
name|conf
argument_list|,
name|snapshotManager
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Snapshot Chore is disabled. No cleanup performed for Expired Snapshots"
argument_list|)
expr_stmt|;
name|snapshotCleanerChore
operator|.
name|chore
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stopper
operator|.
name|stop
argument_list|(
literal|"Stopping Test Stopper"
argument_list|)
expr_stmt|;
block|}
name|Mockito
operator|.
name|verify
argument_list|(
name|snapshotManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getCompletedSnapshots
argument_list|()
expr_stmt|;
block|}
specifier|private
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|getSnapshotDescription
parameter_list|(
specifier|final
name|long
name|ttl
parameter_list|,
specifier|final
name|String
name|snapshotName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|long
name|snapshotCreationTime
parameter_list|)
block|{
name|SnapshotProtos
operator|.
name|SnapshotDescription
operator|.
name|Builder
name|snapshotDescriptionBuilder
init|=
name|SnapshotProtos
operator|.
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|snapshotDescriptionBuilder
operator|.
name|setTtl
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
name|snapshotDescriptionBuilder
operator|.
name|setName
argument_list|(
name|snapshotName
argument_list|)
expr_stmt|;
name|snapshotDescriptionBuilder
operator|.
name|setTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|snapshotDescriptionBuilder
operator|.
name|setType
argument_list|(
name|SnapshotProtos
operator|.
name|SnapshotDescription
operator|.
name|Type
operator|.
name|FLUSH
argument_list|)
expr_stmt|;
name|snapshotDescriptionBuilder
operator|.
name|setCreationTime
argument_list|(
name|snapshotCreationTime
argument_list|)
expr_stmt|;
return|return
name|snapshotDescriptionBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Simple helper class that just keeps track of whether or not its stopped.    */
specifier|private
specifier|static
class|class
name|StoppableImplementation
implements|implements
name|Stoppable
block|{
specifier|private
specifier|volatile
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
name|this
operator|.
name|stop
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|this
operator|.
name|stop
return|;
block|}
block|}
block|}
end_class

end_unit

