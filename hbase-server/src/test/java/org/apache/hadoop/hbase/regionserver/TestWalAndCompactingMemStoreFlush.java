begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * This test verifies the correctness of the Per Column Family flushing strategy  * when part of the memstores are compacted memstores  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestWalAndCompactingMemStoreFlush
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Path
name|DIR
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"TestHRegion"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|TableName
name|TABLENAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestWalAndCompactingMemStoreFlush"
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|FAMILIES
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f3"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f4"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f5"
argument_list|)
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY1
init|=
name|FAMILIES
index|[
literal|0
index|]
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY2
init|=
name|FAMILIES
index|[
literal|1
index|]
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY3
init|=
name|FAMILIES
index|[
literal|2
index|]
decl_stmt|;
specifier|private
name|HRegion
name|initHRegion
parameter_list|(
name|String
name|callingMethod
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|FAMILIES
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
decl_stmt|;
comment|// even column families are going to have compacted memstore
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|hcd
operator|.
name|setInMemoryCompaction
argument_list|(
name|MemoryCompactionPolicy
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|CompactingMemStore
operator|.
name|COMPACTING_MEMSTORE_TYPE_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hcd
operator|.
name|setInMemoryCompaction
argument_list|(
name|MemoryCompactionPolicy
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TABLENAME
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|DIR
argument_list|,
name|callingMethod
argument_list|)
decl_stmt|;
return|return
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|info
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|htd
argument_list|)
return|;
block|}
comment|// A helper function to create puts.
specifier|private
name|Put
name|createPut
parameter_list|(
name|int
name|familyNum
parameter_list|,
name|int
name|putNum
parameter_list|)
block|{
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
operator|+
name|familyNum
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|familyNum
operator|+
literal|"-"
operator|+
name|putNum
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
operator|+
name|familyNum
operator|+
literal|"-"
operator|+
name|putNum
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|familyNum
operator|-
literal|1
index|]
argument_list|,
name|qf
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
comment|// A helper function to create double puts, so something can be compacted later.
specifier|private
name|Put
name|createDoublePut
parameter_list|(
name|int
name|familyNum
parameter_list|,
name|int
name|putNum
parameter_list|)
block|{
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
operator|+
name|familyNum
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|familyNum
operator|+
literal|"-"
operator|+
name|putNum
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
operator|+
name|familyNum
operator|+
literal|"-"
operator|+
name|putNum
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
comment|// add twice with different timestamps
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|familyNum
operator|-
literal|1
index|]
argument_list|,
name|qf
argument_list|,
literal|10
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|familyNum
operator|-
literal|1
index|]
argument_list|,
name|qf
argument_list|,
literal|20
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
comment|// A helper function to create gets.
specifier|private
name|Get
name|createGet
parameter_list|(
name|int
name|familyNum
parameter_list|,
name|int
name|putNum
parameter_list|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|familyNum
operator|+
literal|"-"
operator|+
name|putNum
argument_list|)
decl_stmt|;
return|return
operator|new
name|Get
argument_list|(
name|row
argument_list|)
return|;
block|}
specifier|private
name|void
name|verifyInMemoryFlushSize
parameter_list|(
name|Region
name|region
parameter_list|)
block|{
name|assertEquals
argument_list|(
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|getInmemoryFlushSize
argument_list|()
argument_list|,
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|getInmemoryFlushSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// A helper function to verify edits.
name|void
name|verifyEdit
parameter_list|(
name|int
name|familyNum
parameter_list|,
name|int
name|putNum
parameter_list|,
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|createGet
argument_list|(
name|familyNum
argument_list|,
name|putNum
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|FAMILIES
index|[
name|familyNum
operator|-
literal|1
index|]
decl_stmt|;
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
operator|+
name|familyNum
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
operator|+
name|familyNum
operator|+
literal|"-"
operator|+
name|putNum
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
operator|(
literal|"Missing Put#"
operator|+
name|putNum
operator|+
literal|" for CF# "
operator|+
name|familyNum
operator|)
argument_list|,
name|r
operator|.
name|getFamilyMap
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
operator|(
literal|"Missing Put#"
operator|+
name|putNum
operator|+
literal|" for CF# "
operator|+
name|familyNum
operator|)
argument_list|,
name|r
operator|.
name|getFamilyMap
argument_list|(
name|family
argument_list|)
operator|.
name|get
argument_list|(
name|qf
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
literal|"Incorrect value for Put#"
operator|+
name|putNum
operator|+
literal|" for CF# "
operator|+
name|familyNum
operator|)
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getFamilyMap
argument_list|(
name|family
argument_list|)
operator|.
name|get
argument_list|(
name|qf
argument_list|)
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testSelectiveFlushWithEager
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Set up the configuration
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
literal|300
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FlushPolicyFactory
operator|.
name|HBASE_FLUSH_POLICY_KEY
argument_list|,
name|FlushNonSloppyStoresFirstPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FlushLargeStoresPolicy
operator|.
name|HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN
argument_list|,
literal|75
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
name|CompactingMemStore
operator|.
name|IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY
argument_list|,
literal|0.5
argument_list|)
expr_stmt|;
comment|// set memstore to do data compaction
name|conf
operator|.
name|set
argument_list|(
name|CompactingMemStore
operator|.
name|COMPACTING_MEMSTORE_TYPE_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|MemoryCompactionPolicy
operator|.
name|EAGER
argument_list|)
argument_list|)
expr_stmt|;
comment|// Intialize the region
name|HRegion
name|region
init|=
name|initHRegion
argument_list|(
literal|"testSelectiveFlushWithEager"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|verifyInMemoryFlushSize
argument_list|(
name|region
argument_list|)
expr_stmt|;
comment|// Add 1200 entries for CF1, 100 for CF2 and 50 for CF3
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1200
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// compacted memstore, all the keys are unique
if|if
condition|(
name|i
operator|<=
literal|100
condition|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
literal|50
condition|)
block|{
comment|// compacted memstore, subject for compaction due to duplications
name|region
operator|.
name|put
argument_list|(
name|createDoublePut
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Now add more puts for CF2, so that we only flush CF2 (DefaultMemStore) to disk
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|totalMemstoreSize
init|=
name|region
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
comment|// Find the smallest LSNs for edits wrt to each CF.
name|long
name|smallestSeqCF1PhaseI
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY1
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF2PhaseI
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY2
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF3PhaseI
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY3
argument_list|)
decl_stmt|;
comment|// Find the sizes of the memstores of each CF.
name|MemStoreSize
name|cf1MemstoreSizePhaseI
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf2MemstoreSizePhaseI
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf3MemstoreSizePhaseI
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
comment|// Get the overall smallest LSN in the region's memstores.
name|long
name|smallestSeqInRegionCurrentMemstorePhaseI
init|=
name|getWAL
argument_list|(
name|region
argument_list|)
operator|.
name|getEarliestMemStoreSeqNum
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|s
init|=
literal|"\n\n----------------------------------\n"
operator|+
literal|"Upon initial insert and before any flush, size of CF1 is:"
operator|+
name|cf1MemstoreSizePhaseI
operator|+
literal|", is CF1 compacted memstore?:"
operator|+
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|isSloppyMemStore
argument_list|()
operator|+
literal|". Size of CF2 is:"
operator|+
name|cf2MemstoreSizePhaseI
operator|+
literal|", is CF2 compacted memstore?:"
operator|+
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|isSloppyMemStore
argument_list|()
operator|+
literal|". Size of CF3 is:"
operator|+
name|cf3MemstoreSizePhaseI
operator|+
literal|", is CF3 compacted memstore?:"
operator|+
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|isSloppyMemStore
argument_list|()
operator|+
literal|"\n"
decl_stmt|;
comment|// The overall smallest LSN in the region's memstores should be the same as
comment|// the LSN of the smallest edit in CF1
name|assertEquals
argument_list|(
name|smallestSeqCF1PhaseI
argument_list|,
name|smallestSeqInRegionCurrentMemstorePhaseI
argument_list|)
expr_stmt|;
comment|// Some other sanity checks.
name|assertTrue
argument_list|(
name|smallestSeqCF1PhaseI
operator|<
name|smallestSeqCF2PhaseI
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|smallestSeqCF2PhaseI
operator|<
name|smallestSeqCF3PhaseI
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf1MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf2MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf3MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// The total memstore size should be the same as the sum of the sizes of
comment|// memstores of CF1, CF2 and CF3.
name|String
name|msg
init|=
literal|"totalMemstoreSize="
operator|+
name|totalMemstoreSize
operator|+
literal|" cf1MemstoreSizePhaseI="
operator|+
name|cf1MemstoreSizePhaseI
operator|+
literal|" cf2MemstoreSizePhaseI="
operator|+
name|cf2MemstoreSizePhaseI
operator|+
literal|" cf3MemstoreSizePhaseI="
operator|+
name|cf3MemstoreSizePhaseI
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|totalMemstoreSize
argument_list|,
name|cf1MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|+
name|cf2MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|+
name|cf3MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Flush!!!!!!!!!!!!!!!!!!!!!!
comment|// We have big compacting memstore CF1 and two small memstores:
comment|// CF2 (not compacted) and CF3 (compacting)
comment|// All together they are above the flush size lower bound.
comment|// Since CF1 and CF3 should be flushed to memory (not to disk),
comment|// CF2 is going to be flushed to disk.
comment|// CF1 - nothing to compact (but flattening), CF3 - should be twice compacted
name|CompactingMemStore
name|cms1
init|=
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
decl_stmt|;
name|CompactingMemStore
name|cms3
init|=
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
operator|.
name|memstore
decl_stmt|;
name|cms1
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
name|cms3
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Recalculate everything
name|MemStoreSize
name|cf1MemstoreSizePhaseII
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf2MemstoreSizePhaseII
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf3MemstoreSizePhaseII
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|long
name|smallestSeqInRegionCurrentMemstorePhaseII
init|=
name|getWAL
argument_list|(
name|region
argument_list|)
operator|.
name|getEarliestMemStoreSeqNum
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|// Find the smallest LSNs for edits wrt to each CF.
name|long
name|smallestSeqCF1PhaseII
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY1
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF2PhaseII
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY2
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF3PhaseII
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY3
argument_list|)
decl_stmt|;
name|s
operator|=
name|s
operator|+
literal|"\n----After first flush! CF1 should be flushed to memory, but not compacted.---\n"
operator|+
literal|"Size of CF1 is:"
operator|+
name|cf1MemstoreSizePhaseII
operator|+
literal|", size of CF2 is:"
operator|+
name|cf2MemstoreSizePhaseII
operator|+
literal|", size of CF3 is:"
operator|+
name|cf3MemstoreSizePhaseII
operator|+
literal|"\n"
expr_stmt|;
comment|// CF1 was flushed to memory, but there is nothing to compact, and CF1 was flattened
name|assertTrue
argument_list|(
name|cf1MemstoreSizePhaseII
operator|.
name|getDataSize
argument_list|()
operator|==
name|cf1MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf1MemstoreSizePhaseII
operator|.
name|getHeapSize
argument_list|()
operator|<
name|cf1MemstoreSizePhaseI
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// CF2 should become empty
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cf2MemstoreSizePhaseII
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf2MemstoreSizePhaseII
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that CF3 was flushed to memory and was compacted (this is approximation check)
name|assertTrue
argument_list|(
name|cf3MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|>
name|cf3MemstoreSizePhaseII
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf3MemstoreSizePhaseI
operator|.
name|getHeapSize
argument_list|()
operator|/
literal|2
operator|>
name|cf3MemstoreSizePhaseII
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now the smallest LSN in the region should be the same as the smallest
comment|// LSN in the memstore of CF1.
name|assertEquals
argument_list|(
name|smallestSeqInRegionCurrentMemstorePhaseII
argument_list|,
name|smallestSeqCF1PhaseI
argument_list|)
expr_stmt|;
comment|// Now add more puts for CF1, so that we also flush CF1 to disk instead of
comment|// memory in next flush
for|for
control|(
name|int
name|i
init|=
literal|1200
init|;
name|i
operator|<
literal|3000
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
name|s
operator|+
literal|"The smallest sequence in region WAL is: "
operator|+
name|smallestSeqInRegionCurrentMemstorePhaseII
operator|+
literal|", the smallest sequence in CF1:"
operator|+
name|smallestSeqCF1PhaseII
operator|+
literal|", "
operator|+
literal|"the smallest sequence in CF2:"
operator|+
name|smallestSeqCF2PhaseII
operator|+
literal|", the smallest sequence in CF3:"
operator|+
name|smallestSeqCF3PhaseII
operator|+
literal|"\n"
expr_stmt|;
comment|// How much does the CF1 memstore occupy? Will be used later.
name|MemStoreSize
name|cf1MemstoreSizePhaseIII
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|long
name|smallestSeqCF1PhaseIII
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY1
argument_list|)
decl_stmt|;
name|s
operator|=
name|s
operator|+
literal|"----After more puts into CF1 its size is:"
operator|+
name|cf1MemstoreSizePhaseIII
operator|+
literal|", and its sequence is:"
operator|+
name|smallestSeqCF1PhaseIII
operator|+
literal|" ----\n"
expr_stmt|;
comment|// Flush!!!!!!!!!!!!!!!!!!!!!!
comment|// Flush again, CF1 is flushed to disk
comment|// CF2 is flushed to disk, because it is not in-memory compacted memstore
comment|// CF3 is flushed empty to memory (actually nothing happens to CF3)
name|region
operator|.
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Recalculate everything
name|MemStoreSize
name|cf1MemstoreSizePhaseIV
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf2MemstoreSizePhaseIV
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf3MemstoreSizePhaseIV
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|long
name|smallestSeqInRegionCurrentMemstorePhaseIV
init|=
name|getWAL
argument_list|(
name|region
argument_list|)
operator|.
name|getEarliestMemStoreSeqNum
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF1PhaseIV
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY1
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF2PhaseIV
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY2
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF3PhaseIV
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY3
argument_list|)
decl_stmt|;
name|s
operator|=
name|s
operator|+
literal|"----After SECOND FLUSH, CF1 size is:"
operator|+
name|cf1MemstoreSizePhaseIV
operator|+
literal|", CF2 size is:"
operator|+
name|cf2MemstoreSizePhaseIV
operator|+
literal|" and CF3 size is:"
operator|+
name|cf3MemstoreSizePhaseIV
operator|+
literal|"\n"
expr_stmt|;
name|s
operator|=
name|s
operator|+
literal|"The smallest sequence in region WAL is: "
operator|+
name|smallestSeqInRegionCurrentMemstorePhaseIV
operator|+
literal|", the smallest sequence in CF1:"
operator|+
name|smallestSeqCF1PhaseIV
operator|+
literal|", "
operator|+
literal|"the smallest sequence in CF2:"
operator|+
name|smallestSeqCF2PhaseIV
operator|+
literal|", the smallest sequence in CF3:"
operator|+
name|smallestSeqCF3PhaseIV
operator|+
literal|"\n"
expr_stmt|;
comment|// CF1's pipeline component (inserted before first flush) should be flushed to disk
comment|// CF2 should be flushed to disk
name|assertTrue
argument_list|(
name|cf1MemstoreSizePhaseIII
operator|.
name|getDataSize
argument_list|()
operator|>
name|cf1MemstoreSizePhaseIV
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cf2MemstoreSizePhaseIV
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf2MemstoreSizePhaseIV
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// CF3 shouldn't have been touched.
name|assertEquals
argument_list|(
name|cf3MemstoreSizePhaseIV
argument_list|,
name|cf3MemstoreSizePhaseII
argument_list|)
expr_stmt|;
comment|// the smallest LSN of CF3 shouldn't change
name|assertEquals
argument_list|(
name|smallestSeqCF3PhaseII
argument_list|,
name|smallestSeqCF3PhaseIV
argument_list|)
expr_stmt|;
comment|// CF3 should be bottleneck for WAL
name|assertEquals
argument_list|(
name|s
argument_list|,
name|smallestSeqInRegionCurrentMemstorePhaseIV
argument_list|,
name|smallestSeqCF3PhaseIV
argument_list|)
expr_stmt|;
comment|// Flush!!!!!!!!!!!!!!!!!!!!!!
comment|// Trying to clean the existing memstores, CF2 all flushed to disk. The single
comment|// memstore segment in the compaction pipeline of CF1 and CF3 should be flushed to disk.
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Recalculate everything
name|MemStoreSize
name|cf1MemstoreSizePhaseV
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf2MemstoreSizePhaseV
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf3MemstoreSizePhaseV
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|long
name|smallestSeqInRegionCurrentMemstorePhaseV
init|=
name|getWAL
argument_list|(
name|region
argument_list|)
operator|.
name|getEarliestMemStoreSeqNum
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cf1MemstoreSizePhaseV
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf1MemstoreSizePhaseV
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cf2MemstoreSizePhaseV
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf2MemstoreSizePhaseV
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cf3MemstoreSizePhaseV
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf3MemstoreSizePhaseV
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// What happens when we hit the memstore limit, but we are not able to find
comment|// any Column Family above the threshold?
comment|// In that case, we should flush all the CFs.
comment|// The memstore limit is 100*1024 and the column family flush threshold is
comment|// around 25*1024. We try to just hit the memstore limit with each CF's
comment|// memstore being below the CF flush threshold.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|300
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|4
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|5
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|+
literal|"----AFTER THIRD AND FORTH FLUSH, The smallest sequence in region WAL is: "
operator|+
name|smallestSeqInRegionCurrentMemstorePhaseV
operator|+
literal|". After additional inserts and last flush, the entire region size is:"
operator|+
name|region
operator|.
name|getMemStoreSize
argument_list|()
operator|+
literal|"\n----------------------------------\n"
expr_stmt|;
comment|// Since we won't find any CF above the threshold, and hence no specific
comment|// store to flush, we should flush all the memstores
comment|// Also compacted memstores are flushed to disk.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|region
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
comment|/*------------------------------------------------------------------------------*/
comment|/* Check the same as above but for index-compaction type of compacting memstore */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testSelectiveFlushWithIndexCompaction
parameter_list|()
throws|throws
name|IOException
block|{
comment|/*------------------------------------------------------------------------------*/
comment|/* SETUP */
comment|// Set up the configuration
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
literal|300
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FlushPolicyFactory
operator|.
name|HBASE_FLUSH_POLICY_KEY
argument_list|,
name|FlushNonSloppyStoresFirstPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FlushLargeStoresPolicy
operator|.
name|HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN
argument_list|,
literal|75
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
name|CompactingMemStore
operator|.
name|IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY
argument_list|,
literal|0.5
argument_list|)
expr_stmt|;
comment|// set memstore to index-compaction
name|conf
operator|.
name|set
argument_list|(
name|CompactingMemStore
operator|.
name|COMPACTING_MEMSTORE_TYPE_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|MemoryCompactionPolicy
operator|.
name|BASIC
argument_list|)
argument_list|)
expr_stmt|;
comment|// Initialize the region
name|HRegion
name|region
init|=
name|initHRegion
argument_list|(
literal|"testSelectiveFlushWithIndexCompaction"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|verifyInMemoryFlushSize
argument_list|(
name|region
argument_list|)
expr_stmt|;
comment|/*------------------------------------------------------------------------------*/
comment|/* PHASE I - insertions */
comment|// Add 1200 entries for CF1, 100 for CF2 and 50 for CF3
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1200
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// compacted memstore
if|if
condition|(
name|i
operator|<=
literal|100
condition|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
literal|50
condition|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createDoublePut
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// subject for in-memory compaction
block|}
block|}
block|}
comment|// Now add more puts for CF2, so that we only flush CF2 to disk
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*------------------------------------------------------------------------------*/
comment|/*------------------------------------------------------------------------------*/
comment|/* PHASE I - collect sizes */
name|long
name|totalMemstoreSizePhaseI
init|=
name|region
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
comment|// Find the smallest LSNs for edits wrt to each CF.
name|long
name|smallestSeqCF1PhaseI
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY1
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF2PhaseI
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY2
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF3PhaseI
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY3
argument_list|)
decl_stmt|;
comment|// Find the sizes of the memstores of each CF.
name|MemStoreSize
name|cf1MemstoreSizePhaseI
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf2MemstoreSizePhaseI
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf3MemstoreSizePhaseI
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
comment|// Get the overall smallest LSN in the region's memstores.
name|long
name|smallestSeqInRegionCurrentMemstorePhaseI
init|=
name|getWAL
argument_list|(
name|region
argument_list|)
operator|.
name|getEarliestMemStoreSeqNum
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|/*------------------------------------------------------------------------------*/
comment|/* PHASE I - validation */
comment|// The overall smallest LSN in the region's memstores should be the same as
comment|// the LSN of the smallest edit in CF1
name|assertEquals
argument_list|(
name|smallestSeqCF1PhaseI
argument_list|,
name|smallestSeqInRegionCurrentMemstorePhaseI
argument_list|)
expr_stmt|;
comment|// Some other sanity checks.
name|assertTrue
argument_list|(
name|smallestSeqCF1PhaseI
operator|<
name|smallestSeqCF2PhaseI
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|smallestSeqCF2PhaseI
operator|<
name|smallestSeqCF3PhaseI
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf1MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf2MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf3MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// The total memstore size should be the same as the sum of the sizes of
comment|// memstores of CF1, CF2 and CF3.
name|assertEquals
argument_list|(
name|totalMemstoreSizePhaseI
argument_list|,
name|cf1MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|+
name|cf2MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|+
name|cf3MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
comment|/*------------------------------------------------------------------------------*/
comment|/* PHASE I - Flush */
comment|// First Flush in Test!!!!!!!!!!!!!!!!!!!!!!
comment|// CF1, CF2, CF3, all together they are above the flush size lower bound.
comment|// Since CF1 and CF3 are compacting, CF2 is going to be flushed to disk.
comment|// CF1 and CF3 - flushed to memory and flatten explicitly
name|region
operator|.
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CompactingMemStore
name|cms1
init|=
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
decl_stmt|;
name|CompactingMemStore
name|cms3
init|=
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
operator|.
name|memstore
decl_stmt|;
name|cms1
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
name|cms3
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// CF3/CF1 should be merged so wait here to be sure the compaction is done
while|while
condition|(
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|/*------------------------------------------------------------------------------*/
comment|/*------------------------------------------------------------------------------*/
comment|/* PHASE II - collect sizes */
comment|// Recalculate everything
name|MemStoreSize
name|cf1MemstoreSizePhaseII
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf2MemstoreSizePhaseII
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf3MemstoreSizePhaseII
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|long
name|smallestSeqInRegionCurrentMemstorePhaseII
init|=
name|getWAL
argument_list|(
name|region
argument_list|)
operator|.
name|getEarliestMemStoreSeqNum
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|// Find the smallest LSNs for edits wrt to each CF.
name|long
name|smallestSeqCF3PhaseII
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY3
argument_list|)
decl_stmt|;
name|long
name|totalMemstoreSizePhaseII
init|=
name|region
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
comment|/*------------------------------------------------------------------------------*/
comment|/* PHASE II - validation */
comment|// CF1 was flushed to memory, should be flattened and take less space
name|assertEquals
argument_list|(
name|cf1MemstoreSizePhaseII
operator|.
name|getDataSize
argument_list|()
argument_list|,
name|cf1MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf1MemstoreSizePhaseII
operator|.
name|getHeapSize
argument_list|()
operator|<
name|cf1MemstoreSizePhaseI
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// CF2 should become empty
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cf2MemstoreSizePhaseII
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf2MemstoreSizePhaseII
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that CF3 was flushed to memory and was not compacted (this is an approximation check)
comment|// if compacted CF# should be at least twice less because its every key was duplicated
name|assertEquals
argument_list|(
name|cf3MemstoreSizePhaseII
operator|.
name|getDataSize
argument_list|()
argument_list|,
name|cf3MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf3MemstoreSizePhaseI
operator|.
name|getHeapSize
argument_list|()
operator|/
literal|2
operator|<
name|cf3MemstoreSizePhaseII
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now the smallest LSN in the region should be the same as the smallest
comment|// LSN in the memstore of CF1.
name|assertEquals
argument_list|(
name|smallestSeqInRegionCurrentMemstorePhaseII
argument_list|,
name|smallestSeqCF1PhaseI
argument_list|)
expr_stmt|;
comment|// The total memstore size should be the same as the sum of the sizes of
comment|// memstores of CF1, CF2 and CF3. Counting the empty active segments in CF1/2/3 and pipeline
comment|// items in CF1/2
name|assertEquals
argument_list|(
name|totalMemstoreSizePhaseII
argument_list|,
name|cf1MemstoreSizePhaseII
operator|.
name|getDataSize
argument_list|()
operator|+
name|cf2MemstoreSizePhaseII
operator|.
name|getDataSize
argument_list|()
operator|+
name|cf3MemstoreSizePhaseII
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
comment|/*------------------------------------------------------------------------------*/
comment|/*------------------------------------------------------------------------------*/
comment|/* PHASE III - insertions */
comment|// Now add more puts for CF1, so that we also flush CF1 to disk instead of
comment|// memory in next flush. This is causing the CF! to be flushed to memory twice.
for|for
control|(
name|int
name|i
init|=
literal|1200
init|;
name|i
operator|<
literal|8000
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// CF1 should be flatten and merged so wait here to be sure the compaction is done
while|while
condition|(
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|/*------------------------------------------------------------------------------*/
comment|/* PHASE III - collect sizes */
comment|// How much does the CF1 memstore occupy now? Will be used later.
name|MemStoreSize
name|cf1MemstoreSizePhaseIII
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|long
name|totalMemstoreSizePhaseIII
init|=
name|region
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
comment|/*------------------------------------------------------------------------------*/
comment|/* PHASE III - validation */
comment|// The total memstore size should be the same as the sum of the sizes of
comment|// memstores of CF1, CF2 and CF3. Counting the empty active segments in CF1/2/3 and pipeline
comment|// items in CF1/2
name|assertEquals
argument_list|(
name|totalMemstoreSizePhaseIII
argument_list|,
name|cf1MemstoreSizePhaseIII
operator|.
name|getDataSize
argument_list|()
operator|+
name|cf2MemstoreSizePhaseII
operator|.
name|getDataSize
argument_list|()
operator|+
name|cf3MemstoreSizePhaseII
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
comment|/*------------------------------------------------------------------------------*/
comment|/* PHASE III - Flush */
comment|// Second Flush in Test!!!!!!!!!!!!!!!!!!!!!!
comment|// CF1 is flushed to disk, but not entirely emptied.
comment|// CF2 was and remained empty, same way nothing happens to CF3
name|region
operator|.
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|/*------------------------------------------------------------------------------*/
comment|/*------------------------------------------------------------------------------*/
comment|/* PHASE IV - collect sizes */
comment|// Recalculate everything
name|MemStoreSize
name|cf1MemstoreSizePhaseIV
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf2MemstoreSizePhaseIV
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf3MemstoreSizePhaseIV
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|long
name|smallestSeqInRegionCurrentMemstorePhaseIV
init|=
name|getWAL
argument_list|(
name|region
argument_list|)
operator|.
name|getEarliestMemStoreSeqNum
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF3PhaseIV
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY3
argument_list|)
decl_stmt|;
comment|/*------------------------------------------------------------------------------*/
comment|/* PHASE IV - validation */
comment|// CF1's biggest pipeline component (inserted before first flush) should be flushed to disk
comment|// CF2 should remain empty
name|assertTrue
argument_list|(
name|cf1MemstoreSizePhaseIII
operator|.
name|getDataSize
argument_list|()
operator|>
name|cf1MemstoreSizePhaseIV
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cf2MemstoreSizePhaseIV
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf2MemstoreSizePhaseIV
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// CF3 shouldn't have been touched.
name|assertEquals
argument_list|(
name|cf3MemstoreSizePhaseIV
argument_list|,
name|cf3MemstoreSizePhaseII
argument_list|)
expr_stmt|;
comment|// the smallest LSN of CF3 shouldn't change
name|assertEquals
argument_list|(
name|smallestSeqCF3PhaseII
argument_list|,
name|smallestSeqCF3PhaseIV
argument_list|)
expr_stmt|;
comment|// CF3 should be bottleneck for WAL
name|assertEquals
argument_list|(
name|smallestSeqInRegionCurrentMemstorePhaseIV
argument_list|,
name|smallestSeqCF3PhaseIV
argument_list|)
expr_stmt|;
comment|/*------------------------------------------------------------------------------*/
comment|/* PHASE IV - Flush */
comment|// Third Flush in Test!!!!!!!!!!!!!!!!!!!!!!
comment|// Force flush to disk on all memstores (flush parameter true).
comment|// CF1/CF3 all flushed to disk. Note that active sets of CF1 and CF3 are empty
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|/*------------------------------------------------------------------------------*/
comment|/*------------------------------------------------------------------------------*/
comment|/* PHASE V - collect sizes */
comment|// Recalculate everything
name|MemStoreSize
name|cf1MemstoreSizePhaseV
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf2MemstoreSizePhaseV
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf3MemstoreSizePhaseV
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|long
name|smallestSeqInRegionCurrentMemstorePhaseV
init|=
name|getWAL
argument_list|(
name|region
argument_list|)
operator|.
name|getEarliestMemStoreSeqNum
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|totalMemstoreSizePhaseV
init|=
name|region
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
comment|/*------------------------------------------------------------------------------*/
comment|/* PHASE V - validation */
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cf1MemstoreSizePhaseV
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf1MemstoreSizePhaseV
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cf2MemstoreSizePhaseV
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf2MemstoreSizePhaseV
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cf3MemstoreSizePhaseV
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf3MemstoreSizePhaseV
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// The total memstores size should be empty
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|totalMemstoreSizePhaseV
argument_list|)
expr_stmt|;
comment|// Because there is nothing in any memstore the WAL's LSN should be -1
name|assertEquals
argument_list|(
name|smallestSeqInRegionCurrentMemstorePhaseV
argument_list|,
name|HConstants
operator|.
name|NO_SEQNUM
argument_list|)
expr_stmt|;
comment|// What happens when we hit the memstore limit, but we are not able to find
comment|// any Column Family above the threshold?
comment|// In that case, we should flush all the CFs.
comment|/*------------------------------------------------------------------------------*/
comment|/*------------------------------------------------------------------------------*/
comment|/* PHASE VI - insertions */
comment|// The memstore limit is 200*1024 and the column family flush threshold is
comment|// around 50*1024. We try to just hit the memstore limit with each CF's
comment|// memstore being below the CF flush threshold.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|300
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|4
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|5
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MemStoreSize
name|cf1ActiveSizePhaseVI
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf3ActiveSizePhaseVI
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf5ActiveSizePhaseVI
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
comment|/*------------------------------------------------------------------------------*/
comment|/* PHASE VI - Flush */
comment|// Fourth Flush in Test!!!!!!!!!!!!!!!!!!!!!!
comment|// None among compacting memstores was flushed to memory due to previous puts.
comment|// But is going to be moved to pipeline and flatten due to the flush.
name|region
operator|.
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Since we won't find any CF above the threshold, and hence no specific
comment|// store to flush, we should flush all the memstores
comment|// Also compacted memstores are flushed to disk, but not entirely emptied
name|MemStoreSize
name|cf1ActiveSizePhaseVII
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf3ActiveSizePhaseVII
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf5ActiveSizePhaseVII
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cf1ActiveSizePhaseVII
operator|.
name|getDataSize
argument_list|()
operator|<
name|cf1ActiveSizePhaseVI
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf3ActiveSizePhaseVII
operator|.
name|getDataSize
argument_list|()
operator|<
name|cf3ActiveSizePhaseVI
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf5ActiveSizePhaseVII
operator|.
name|getDataSize
argument_list|()
operator|<
name|cf5ActiveSizePhaseVI
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testSelectiveFlushAndWALinDataCompaction
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Set up the configuration
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
literal|300
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FlushPolicyFactory
operator|.
name|HBASE_FLUSH_POLICY_KEY
argument_list|,
name|FlushNonSloppyStoresFirstPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FlushLargeStoresPolicy
operator|.
name|HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN
argument_list|,
literal|75
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
name|CompactingMemStore
operator|.
name|IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY
argument_list|,
literal|0.5
argument_list|)
expr_stmt|;
comment|// set memstore to do data compaction and not to use the speculative scan
name|conf
operator|.
name|set
argument_list|(
name|CompactingMemStore
operator|.
name|COMPACTING_MEMSTORE_TYPE_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|MemoryCompactionPolicy
operator|.
name|EAGER
argument_list|)
argument_list|)
expr_stmt|;
comment|// Intialize the HRegion
name|HRegion
name|region
init|=
name|initHRegion
argument_list|(
literal|"testSelectiveFlushAndWALinDataCompaction"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|verifyInMemoryFlushSize
argument_list|(
name|region
argument_list|)
expr_stmt|;
comment|// Add 1200 entries for CF1, 100 for CF2 and 50 for CF3
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1200
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
literal|100
condition|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
literal|50
condition|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Now add more puts for CF2, so that we only flush CF2 to disk
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// in this test check the non-composite snapshot - flashing only tail of the pipeline
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|setCompositeSnapshot
argument_list|(
literal|false
argument_list|)
expr_stmt|;
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|setCompositeSnapshot
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|long
name|totalMemstoreSize
init|=
name|region
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
comment|// Find the sizes of the memstores of each CF.
name|MemStoreSize
name|cf1MemstoreSizePhaseI
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf2MemstoreSizePhaseI
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf3MemstoreSizePhaseI
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
comment|// Some other sanity checks.
name|assertTrue
argument_list|(
name|cf1MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf2MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf3MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// The total memstore size should be the same as the sum of the sizes of
comment|// memstores of CF1, CF2 and CF3.
name|String
name|msg
init|=
literal|"totalMemstoreSize="
operator|+
name|totalMemstoreSize
operator|+
literal|" DefaultMemStore.DEEP_OVERHEAD="
operator|+
name|DefaultMemStore
operator|.
name|DEEP_OVERHEAD
operator|+
literal|" cf1MemstoreSizePhaseI="
operator|+
name|cf1MemstoreSizePhaseI
operator|+
literal|" cf2MemstoreSizePhaseI="
operator|+
name|cf2MemstoreSizePhaseI
operator|+
literal|" cf3MemstoreSizePhaseI="
operator|+
name|cf3MemstoreSizePhaseI
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|totalMemstoreSize
argument_list|,
name|cf1MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|+
name|cf2MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|+
name|cf3MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Flush!
name|CompactingMemStore
name|cms1
init|=
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
decl_stmt|;
name|CompactingMemStore
name|cms3
init|=
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
operator|.
name|memstore
decl_stmt|;
name|cms1
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
name|cms3
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|MemStoreSize
name|cf2MemstoreSizePhaseII
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|long
name|smallestSeqInRegionCurrentMemstorePhaseII
init|=
name|region
operator|.
name|getWAL
argument_list|()
operator|.
name|getEarliestMemStoreSeqNum
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF1PhaseII
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY1
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF2PhaseII
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY2
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF3PhaseII
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY3
argument_list|)
decl_stmt|;
comment|// CF2 should have been cleared
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cf2MemstoreSizePhaseII
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf2MemstoreSizePhaseII
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|s
init|=
literal|"\n\n----------------------------------\n"
operator|+
literal|"Upon initial insert and flush, LSN of CF1 is:"
operator|+
name|smallestSeqCF1PhaseII
operator|+
literal|". LSN of CF2 is:"
operator|+
name|smallestSeqCF2PhaseII
operator|+
literal|". LSN of CF3 is:"
operator|+
name|smallestSeqCF3PhaseII
operator|+
literal|", smallestSeqInRegionCurrentMemstore:"
operator|+
name|smallestSeqInRegionCurrentMemstorePhaseII
operator|+
literal|"\n"
decl_stmt|;
comment|// Add same entries to compact them later
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1200
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
literal|100
condition|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
literal|50
condition|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Now add more puts for CF2, so that we only flush CF2 to disk
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|smallestSeqInRegionCurrentMemstorePhaseIII
init|=
name|region
operator|.
name|getWAL
argument_list|()
operator|.
name|getEarliestMemStoreSeqNum
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF1PhaseIII
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY1
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF2PhaseIII
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY2
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF3PhaseIII
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY3
argument_list|)
decl_stmt|;
name|s
operator|=
name|s
operator|+
literal|"The smallest sequence in region WAL is: "
operator|+
name|smallestSeqInRegionCurrentMemstorePhaseIII
operator|+
literal|", the smallest sequence in CF1:"
operator|+
name|smallestSeqCF1PhaseIII
operator|+
literal|", "
operator|+
literal|"the smallest sequence in CF2:"
operator|+
name|smallestSeqCF2PhaseIII
operator|+
literal|", the smallest sequence in CF3:"
operator|+
name|smallestSeqCF3PhaseIII
operator|+
literal|"\n"
expr_stmt|;
comment|// Flush!
name|cms1
operator|=
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
expr_stmt|;
name|cms3
operator|=
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
operator|.
name|memstore
expr_stmt|;
name|cms1
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
name|cms3
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|long
name|smallestSeqInRegionCurrentMemstorePhaseIV
init|=
name|region
operator|.
name|getWAL
argument_list|()
operator|.
name|getEarliestMemStoreSeqNum
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF1PhaseIV
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY1
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF2PhaseIV
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY2
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF3PhaseIV
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY3
argument_list|)
decl_stmt|;
name|s
operator|=
name|s
operator|+
literal|"The smallest sequence in region WAL is: "
operator|+
name|smallestSeqInRegionCurrentMemstorePhaseIV
operator|+
literal|", the smallest sequence in CF1:"
operator|+
name|smallestSeqCF1PhaseIV
operator|+
literal|", "
operator|+
literal|"the smallest sequence in CF2:"
operator|+
name|smallestSeqCF2PhaseIV
operator|+
literal|", the smallest sequence in CF3:"
operator|+
name|smallestSeqCF3PhaseIV
operator|+
literal|"\n"
expr_stmt|;
comment|// now check that the LSN of the entire WAL, of CF1 and of CF3 has progressed due to compaction
name|assertTrue
argument_list|(
name|s
argument_list|,
name|smallestSeqInRegionCurrentMemstorePhaseIV
operator|>
name|smallestSeqInRegionCurrentMemstorePhaseIII
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|smallestSeqCF1PhaseIV
operator|>
name|smallestSeqCF1PhaseIII
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|smallestSeqCF3PhaseIV
operator|>
name|smallestSeqCF3PhaseIII
argument_list|)
expr_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testSelectiveFlushWithBasicAndMerge
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Set up the configuration
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
literal|300
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FlushPolicyFactory
operator|.
name|HBASE_FLUSH_POLICY_KEY
argument_list|,
name|FlushNonSloppyStoresFirstPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FlushLargeStoresPolicy
operator|.
name|HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN
argument_list|,
literal|75
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
name|CompactingMemStore
operator|.
name|IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY
argument_list|,
literal|0.8
argument_list|)
expr_stmt|;
comment|// set memstore to do index compaction with merge
name|conf
operator|.
name|set
argument_list|(
name|CompactingMemStore
operator|.
name|COMPACTING_MEMSTORE_TYPE_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|MemoryCompactionPolicy
operator|.
name|BASIC
argument_list|)
argument_list|)
expr_stmt|;
comment|// length of pipeline that requires merge
name|conf
operator|.
name|setInt
argument_list|(
name|MemStoreCompactionStrategy
operator|.
name|COMPACTING_MEMSTORE_THRESHOLD_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Intialize the HRegion
name|HRegion
name|region
init|=
name|initHRegion
argument_list|(
literal|"testSelectiveFlushWithBasicAndMerge"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|verifyInMemoryFlushSize
argument_list|(
name|region
argument_list|)
expr_stmt|;
comment|// Add 1200 entries for CF1 (CompactingMemStore), 100 for CF2 (DefaultMemStore) and 50 for CF3
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1200
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
literal|100
condition|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
literal|50
condition|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Now put more entries to CF2
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|totalMemstoreSize
init|=
name|region
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
comment|// test in-memory flashing into CAM here
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|setIndexType
argument_list|(
name|CompactingMemStore
operator|.
name|IndexType
operator|.
name|ARRAY_MAP
argument_list|)
expr_stmt|;
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|setIndexType
argument_list|(
name|CompactingMemStore
operator|.
name|IndexType
operator|.
name|ARRAY_MAP
argument_list|)
expr_stmt|;
comment|// Find the sizes of the memstores of each CF.
name|MemStoreSize
name|cf1MemstoreSizePhaseI
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf2MemstoreSizePhaseI
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf3MemstoreSizePhaseI
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
comment|// Some other sanity checks.
name|assertTrue
argument_list|(
name|cf1MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf2MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf3MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// The total memstore size should be the same as the sum of the sizes of
comment|// memstores of CF1, CF2 and CF3.
name|assertEquals
argument_list|(
name|totalMemstoreSize
argument_list|,
name|cf1MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|+
name|cf2MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|+
name|cf3MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Initiate in-memory Flush!
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// CF1 and CF3 should be flatten and merged so wait here to be sure the merge is done
while|while
condition|(
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// Flush-to-disk! CF2 only should be flushed
name|region
operator|.
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|MemStoreSize
name|cf1MemstoreSizePhaseII
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf2MemstoreSizePhaseII
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf3MemstoreSizePhaseII
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
comment|// CF1 should be flushed in memory and just flattened, so CF1 heap overhead should be smaller
name|assertTrue
argument_list|(
name|cf1MemstoreSizePhaseI
operator|.
name|getHeapSize
argument_list|()
operator|>
name|cf1MemstoreSizePhaseII
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// CF1 should be flushed in memory and just flattened, so CF1 data size should remain the same
name|assertEquals
argument_list|(
name|cf1MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
argument_list|,
name|cf1MemstoreSizePhaseII
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// CF2 should have been cleared
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cf2MemstoreSizePhaseII
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add the same amount of entries to see the merging
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1200
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
literal|100
condition|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
literal|50
condition|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Now add more puts for CF2, so that we only flush CF2 to disk
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MemStoreSize
name|cf1MemstoreSizePhaseIII
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
comment|// Flush in memory!
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// CF1 and CF3 should be merged so wait here to be sure the merge is done
while|while
condition|(
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|MemStoreSize
name|cf1MemstoreSizePhaseIV
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|MemStoreSize
name|cf2MemstoreSizePhaseIV
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|cf1MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
argument_list|,
name|cf1MemstoreSizePhaseIV
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// the decrease in the heap size due to usage of CellArrayMap instead of CSLM
comment|// should be the same in flattening and in merge (first and second in-memory-flush)
comment|// but in phase 1 we do not yet have immutable segment
name|assertEquals
argument_list|(
name|cf1MemstoreSizePhaseI
operator|.
name|getHeapSize
argument_list|()
operator|-
name|cf1MemstoreSizePhaseII
operator|.
name|getHeapSize
argument_list|()
argument_list|,
name|cf1MemstoreSizePhaseIII
operator|.
name|getHeapSize
argument_list|()
operator|-
name|cf1MemstoreSizePhaseIV
operator|.
name|getHeapSize
argument_list|()
operator|-
name|CellArrayImmutableSegment
operator|.
name|DEEP_OVERHEAD_CAM
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
comment|// active, one in pipeline, snapshot
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|getSegments
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// CF2 should have been cleared
name|assertEquals
argument_list|(
literal|"\n<<< DEBUG: The data--heap sizes of stores before/after first flushes,"
operator|+
literal|" CF1: "
operator|+
name|cf1MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|+
literal|"/"
operator|+
name|cf1MemstoreSizePhaseII
operator|.
name|getDataSize
argument_list|()
operator|+
literal|"--"
operator|+
name|cf1MemstoreSizePhaseI
operator|.
name|getHeapSize
argument_list|()
operator|+
literal|"/"
operator|+
name|cf1MemstoreSizePhaseII
operator|.
name|getHeapSize
argument_list|()
operator|+
literal|", CF2: "
operator|+
name|cf2MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|+
literal|"/"
operator|+
name|cf2MemstoreSizePhaseII
operator|.
name|getDataSize
argument_list|()
operator|+
literal|"--"
operator|+
name|cf2MemstoreSizePhaseI
operator|.
name|getHeapSize
argument_list|()
operator|+
literal|"/"
operator|+
name|cf2MemstoreSizePhaseII
operator|.
name|getHeapSize
argument_list|()
operator|+
literal|", CF3: "
operator|+
name|cf3MemstoreSizePhaseI
operator|.
name|getDataSize
argument_list|()
operator|+
literal|"/"
operator|+
name|cf3MemstoreSizePhaseII
operator|.
name|getDataSize
argument_list|()
operator|+
literal|"--"
operator|+
name|cf3MemstoreSizePhaseI
operator|.
name|getHeapSize
argument_list|()
operator|+
literal|"/"
operator|+
name|cf3MemstoreSizePhaseII
operator|.
name|getHeapSize
argument_list|()
operator|+
literal|"\n<<< AND before/after second flushes "
operator|+
literal|" CF1: "
operator|+
name|cf1MemstoreSizePhaseIII
operator|.
name|getDataSize
argument_list|()
operator|+
literal|"/"
operator|+
name|cf1MemstoreSizePhaseIV
operator|.
name|getDataSize
argument_list|()
operator|+
literal|"--"
operator|+
name|cf1MemstoreSizePhaseIII
operator|.
name|getHeapSize
argument_list|()
operator|+
literal|"/"
operator|+
name|cf1MemstoreSizePhaseIV
operator|.
name|getHeapSize
argument_list|()
operator|+
literal|"\n"
argument_list|,
literal|0
argument_list|,
name|cf2MemstoreSizePhaseIV
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
comment|// should end in 300 seconds (5 minutes)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testStressFlushAndWALinIndexCompaction
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Set up the configuration
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
literal|600
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FlushPolicyFactory
operator|.
name|HBASE_FLUSH_POLICY_KEY
argument_list|,
name|FlushNonSloppyStoresFirstPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FlushLargeStoresPolicy
operator|.
name|HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN
argument_list|,
literal|200
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
name|CompactingMemStore
operator|.
name|IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY
argument_list|,
literal|0.5
argument_list|)
expr_stmt|;
comment|// set memstore to do data compaction and not to use the speculative scan
name|conf
operator|.
name|set
argument_list|(
name|CompactingMemStore
operator|.
name|COMPACTING_MEMSTORE_TYPE_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|MemoryCompactionPolicy
operator|.
name|BASIC
argument_list|)
argument_list|)
expr_stmt|;
comment|// Successfully initialize the HRegion
name|HRegion
name|region
init|=
name|initHRegion
argument_list|(
literal|"testSelectiveFlushAndWALinDataCompaction"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|verifyInMemoryFlushSize
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
literal|25
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|i
operator|*
literal|10000
decl_stmt|;
name|ConcurrentPutRunnable
name|runnable
init|=
operator|new
name|ConcurrentPutRunnable
argument_list|(
name|region
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|Threads
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
comment|// let other threads start
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// enforce flush of everything TO DISK while there are still ongoing puts
name|Threads
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
comment|// let other threads continue
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// enforce flush of everything TO DISK while there are still ongoing puts
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * The in-memory-flusher thread performs the flush asynchronously. There is at most one thread per    * memstore instance. It takes the updatesLock exclusively, pushes active into the pipeline,    * releases updatesLock and compacts the pipeline.    */
specifier|private
class|class
name|ConcurrentPutRunnable
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|HRegion
name|stressedRegion
decl_stmt|;
specifier|private
specifier|final
name|int
name|startNumber
decl_stmt|;
name|ConcurrentPutRunnable
parameter_list|(
name|HRegion
name|r
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|this
operator|.
name|stressedRegion
operator|=
name|r
expr_stmt|;
name|this
operator|.
name|startNumber
operator|=
name|i
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|int
name|dummy
init|=
name|startNumber
operator|/
literal|10000
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Thread "
operator|+
name|dummy
operator|+
literal|" with start number "
operator|+
name|startNumber
operator|+
literal|" starts\n"
argument_list|)
expr_stmt|;
comment|// Add 1200 entries for CF1, 100 for CF2 and 50 for CF3
for|for
control|(
name|int
name|i
init|=
name|startNumber
init|;
name|i
operator|<=
name|startNumber
operator|+
literal|3000
condition|;
name|i
operator|++
control|)
block|{
name|stressedRegion
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
name|startNumber
operator|+
literal|2000
condition|)
block|{
name|stressedRegion
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
name|startNumber
operator|+
literal|1000
condition|)
block|{
name|stressedRegion
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Thread with start number "
operator|+
name|startNumber
operator|+
literal|" continues to more puts\n"
argument_list|)
expr_stmt|;
comment|// Now add more puts for CF2, so that we only flush CF2 to disk
for|for
control|(
name|int
name|i
init|=
name|startNumber
operator|+
literal|3000
init|;
name|i
operator|<
name|startNumber
operator|+
literal|5000
condition|;
name|i
operator|++
control|)
block|{
name|stressedRegion
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// And add more puts for CF1
for|for
control|(
name|int
name|i
init|=
name|startNumber
operator|+
literal|5000
init|;
name|i
operator|<
name|startNumber
operator|+
literal|7000
condition|;
name|i
operator|++
control|)
block|{
name|stressedRegion
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Thread with start number "
operator|+
name|startNumber
operator|+
literal|" flushes\n"
argument_list|)
expr_stmt|;
comment|// flush (IN MEMORY) one of the stores (each thread flushes different store)
comment|// and wait till the flush and the following action are done
if|if
condition|(
name|startNumber
operator|==
literal|0
condition|)
block|{
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|stressedRegion
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|stressedRegion
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|startNumber
operator|==
literal|10000
condition|)
block|{
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|stressedRegion
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|stressedRegion
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|startNumber
operator|==
literal|20000
condition|)
block|{
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|stressedRegion
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|stressedRegion
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
operator|.
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Thread with start number "
operator|+
name|startNumber
operator|+
literal|" finishes\n"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
assert|assert
literal|false
assert|;
block|}
block|}
block|}
specifier|private
name|WAL
name|getWAL
parameter_list|(
name|Region
name|region
parameter_list|)
block|{
return|return
operator|(
operator|(
name|HRegion
operator|)
name|region
operator|)
operator|.
name|getWAL
argument_list|()
return|;
block|}
block|}
end_class

end_unit

