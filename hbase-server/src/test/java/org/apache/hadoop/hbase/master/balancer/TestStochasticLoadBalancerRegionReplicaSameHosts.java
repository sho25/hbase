begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestStochasticLoadBalancerRegionReplicaSameHosts
extends|extends
name|BalancerTestBase
block|{
annotation|@
name|Test
comment|// Test is flakey. TODO: Fix!
specifier|public
name|void
name|testRegionReplicationOnMidClusterSameHosts
parameter_list|()
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|StochasticLoadBalancer
operator|.
name|MAX_STEPS_KEY
argument_list|,
literal|2000000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.master.balancer.stochastic.maxRunningTime"
argument_list|,
literal|90
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// 90 sec
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.master.balancer.stochastic.maxMovePercent"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|numHosts
init|=
literal|100
decl_stmt|;
name|int
name|numRegions
init|=
literal|100
operator|*
literal|100
decl_stmt|;
name|int
name|replication
init|=
literal|3
decl_stmt|;
comment|// 3 replicas per region
name|int
name|numRegionsPerServer
init|=
literal|5
decl_stmt|;
name|int
name|numTables
init|=
literal|10
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|serverMap
init|=
name|createServerMap
argument_list|(
name|numHosts
argument_list|,
name|numRegions
argument_list|,
name|numRegionsPerServer
argument_list|,
name|replication
argument_list|,
name|numTables
argument_list|)
decl_stmt|;
name|int
name|numNodesPerHost
init|=
literal|4
decl_stmt|;
comment|// create a new map with 4 RS per host.
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|newServerMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|serverMap
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|serverMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numNodesPerHost
condition|;
name|i
operator|++
control|)
block|{
name|ServerName
name|s1
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// create an RS for the same host
name|ServerName
name|s2
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
name|s1
operator|.
name|getHostname
argument_list|()
argument_list|,
name|s1
operator|.
name|getPort
argument_list|()
operator|+
name|i
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|newServerMap
operator|.
name|put
argument_list|(
name|s2
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|testWithCluster
argument_list|(
name|newServerMap
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

