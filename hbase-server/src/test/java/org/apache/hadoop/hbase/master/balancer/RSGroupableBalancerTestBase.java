begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|net
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
operator|.
name|RSGroupInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
operator|.
name|RSGroupInfoManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Base UT of RSGroupableBalancer.  */
end_comment

begin_class
specifier|public
class|class
name|RSGroupableBalancerTestBase
block|{
specifier|static
name|SecureRandom
name|rand
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
specifier|static
name|String
index|[]
name|groups
init|=
operator|new
name|String
index|[]
block|{
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
block|,
literal|"dg2"
block|,
literal|"dg3"
block|,
literal|"dg4"
block|}
decl_stmt|;
specifier|static
name|TableName
name|table0
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"dt0"
argument_list|)
decl_stmt|;
specifier|static
name|TableName
index|[]
name|tables
init|=
operator|new
name|TableName
index|[]
block|{
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"dt1"
argument_list|)
block|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"dt2"
argument_list|)
block|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"dt3"
argument_list|)
block|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"dt4"
argument_list|)
block|}
decl_stmt|;
specifier|static
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
decl_stmt|;
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|groupMap
decl_stmt|;
specifier|static
name|Map
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|tableMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|static
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|tableDescs
decl_stmt|;
name|int
index|[]
name|regionAssignment
init|=
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|5
block|,
literal|7
block|,
literal|10
block|,
literal|4
block|,
literal|3
block|,
literal|1
block|}
decl_stmt|;
specifier|static
name|int
name|regionId
init|=
literal|0
decl_stmt|;
comment|/**    * Invariant is that all servers of a group have load between floor(avg) and    * ceiling(avg) number of regions.    */
specifier|protected
name|void
name|assertClusterAsBalanced
parameter_list|(
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|ServerAndLoad
argument_list|>
name|groupLoadMap
parameter_list|)
block|{
for|for
control|(
name|String
name|gName
range|:
name|groupLoadMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|groupLoad
init|=
name|groupLoadMap
operator|.
name|get
argument_list|(
name|gName
argument_list|)
decl_stmt|;
name|int
name|numServers
init|=
name|groupLoad
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numRegions
init|=
literal|0
decl_stmt|;
name|int
name|maxRegions
init|=
literal|0
decl_stmt|;
name|int
name|minRegions
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|ServerAndLoad
name|server
range|:
name|groupLoad
control|)
block|{
name|int
name|nr
init|=
name|server
operator|.
name|getLoad
argument_list|()
decl_stmt|;
if|if
condition|(
name|nr
operator|>
name|maxRegions
condition|)
block|{
name|maxRegions
operator|=
name|nr
expr_stmt|;
block|}
if|if
condition|(
name|nr
operator|<
name|minRegions
condition|)
block|{
name|minRegions
operator|=
name|nr
expr_stmt|;
block|}
name|numRegions
operator|+=
name|nr
expr_stmt|;
block|}
if|if
condition|(
name|maxRegions
operator|-
name|minRegions
operator|<
literal|2
condition|)
block|{
comment|// less than 2 between max and min, can't balance
return|return;
block|}
name|int
name|min
init|=
name|numRegions
operator|/
name|numServers
decl_stmt|;
name|int
name|max
init|=
name|numRegions
operator|%
name|numServers
operator|==
literal|0
condition|?
name|min
else|:
name|min
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|ServerAndLoad
name|server
range|:
name|groupLoad
control|)
block|{
name|assertTrue
argument_list|(
name|server
operator|.
name|getLoad
argument_list|()
operator|<=
name|max
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|server
operator|.
name|getLoad
argument_list|()
operator|>=
name|min
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * All regions have an assignment.    */
specifier|protected
name|void
name|assertImmediateAssignment
parameter_list|(
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|,
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|assignments
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|RegionInfo
name|region
range|:
name|regions
control|)
block|{
name|assertTrue
argument_list|(
name|assignments
operator|.
name|containsKey
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|ServerName
name|server
init|=
name|assignments
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|TableName
name|tableName
init|=
name|region
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|String
name|groupName
init|=
name|getMockedGroupInfoManager
argument_list|()
operator|.
name|getRSGroupOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|groupName
argument_list|)
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|gInfo
init|=
name|getMockedGroupInfoManager
argument_list|()
operator|.
name|getRSGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Region is not correctly assigned to group servers."
argument_list|,
name|gInfo
operator|.
name|containsServer
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Asserts a valid retained assignment plan.    *<p>    * Must meet the following conditions:    *<ul>    *<li>Every input region has an assignment, and to an online server    *<li>If a region had an existing assignment to a server with the same    * address a a currently online server, it will be assigned to it    *</ul>    */
specifier|protected
name|void
name|assertRetainedAssignment
parameter_list|(
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|existing
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|assignment
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
comment|// Verify condition 1, every region assigned, and to online server
name|Set
argument_list|<
name|ServerName
argument_list|>
name|onlineServerSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RegionInfo
argument_list|>
name|assignedRegions
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|RegionInfo
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|a
range|:
name|assignment
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"Region assigned to server that was not listed as online"
argument_list|,
name|onlineServerSet
operator|.
name|contains
argument_list|(
name|a
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionInfo
name|r
range|:
name|a
operator|.
name|getValue
argument_list|()
control|)
block|{
name|assignedRegions
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|existing
operator|.
name|size
argument_list|()
argument_list|,
name|assignedRegions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify condition 2, every region must be assigned to correct server.
name|Set
argument_list|<
name|String
argument_list|>
name|onlineHostNames
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|s
range|:
name|servers
control|)
block|{
name|onlineHostNames
operator|.
name|add
argument_list|(
name|s
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|a
range|:
name|assignment
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ServerName
name|currentServer
init|=
name|a
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionInfo
name|r
range|:
name|a
operator|.
name|getValue
argument_list|()
control|)
block|{
name|ServerName
name|oldAssignedServer
init|=
name|existing
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|TableName
name|tableName
init|=
name|r
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|String
name|groupName
init|=
name|getMockedGroupInfoManager
argument_list|()
operator|.
name|getRSGroupOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|groupName
argument_list|)
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|gInfo
init|=
name|getMockedGroupInfoManager
argument_list|()
operator|.
name|getRSGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Region is not correctly assigned to group servers."
argument_list|,
name|gInfo
operator|.
name|containsServer
argument_list|(
name|currentServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldAssignedServer
operator|!=
literal|null
operator|&&
name|onlineHostNames
operator|.
name|contains
argument_list|(
name|oldAssignedServer
operator|.
name|getHostname
argument_list|()
argument_list|)
condition|)
block|{
comment|// this region was previously assigned somewhere, and that
comment|// host is still around, then the host must have been is a
comment|// different group.
if|if
condition|(
operator|!
name|oldAssignedServer
operator|.
name|getAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|currentServer
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
name|gInfo
operator|.
name|containsServer
argument_list|(
name|oldAssignedServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|String
name|printStats
parameter_list|(
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|ServerAndLoad
argument_list|>
name|groupBasedLoad
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|groupBasedLoad
operator|.
name|keySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Stats for group: "
operator|+
name|groupName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|groupMap
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
operator|.
name|getServers
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|groupLoad
init|=
name|groupBasedLoad
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|int
name|numServers
init|=
name|groupLoad
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|totalRegions
init|=
literal|0
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Per Server Load: \n"
argument_list|)
expr_stmt|;
for|for
control|(
name|ServerAndLoad
name|sLoad
range|:
name|groupLoad
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Server :"
operator|+
name|sLoad
operator|.
name|getServerName
argument_list|()
operator|+
literal|" Load : "
operator|+
name|sLoad
operator|.
name|getLoad
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|totalRegions
operator|+=
name|sLoad
operator|.
name|getLoad
argument_list|()
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" Group Statistics : \n"
argument_list|)
expr_stmt|;
name|float
name|average
init|=
operator|(
name|float
operator|)
name|totalRegions
operator|/
name|numServers
decl_stmt|;
name|int
name|max
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|average
argument_list|)
decl_stmt|;
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|average
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"[srvr="
operator|+
name|numServers
operator|+
literal|" rgns="
operator|+
name|totalRegions
operator|+
literal|" avg="
operator|+
name|average
operator|+
literal|" max="
operator|+
name|max
operator|+
literal|" min="
operator|+
name|min
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"==============================="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|ServerAndLoad
argument_list|>
name|convertToGroupBasedMap
parameter_list|(
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|serversMap
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|ServerAndLoad
argument_list|>
name|loadMap
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|RSGroupInfo
name|gInfo
range|:
name|getMockedGroupInfoManager
argument_list|()
operator|.
name|listRSGroups
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Address
argument_list|>
name|groupServers
init|=
name|gInfo
operator|.
name|getServers
argument_list|()
decl_stmt|;
for|for
control|(
name|Address
name|hostPort
range|:
name|groupServers
control|)
block|{
name|ServerName
name|actual
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ServerName
name|entry
range|:
name|servers
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|hostPort
argument_list|)
condition|)
block|{
name|actual
operator|=
name|entry
expr_stmt|;
break|break;
block|}
block|}
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|serversMap
operator|.
name|get
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No load for "
operator|+
name|actual
argument_list|,
name|regions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|loadMap
operator|.
name|put
argument_list|(
name|gInfo
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ServerAndLoad
argument_list|(
name|actual
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|loadMap
return|;
block|}
specifier|protected
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|ServerAndLoad
argument_list|>
name|reconcile
parameter_list|(
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|ServerAndLoad
argument_list|>
name|previousLoad
parameter_list|,
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
parameter_list|)
block|{
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|ServerAndLoad
argument_list|>
name|result
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|result
operator|.
name|putAll
argument_list|(
name|previousLoad
argument_list|)
expr_stmt|;
if|if
condition|(
name|plans
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RegionPlan
name|plan
range|:
name|plans
control|)
block|{
name|ServerName
name|source
init|=
name|plan
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|updateLoad
argument_list|(
name|result
argument_list|,
name|source
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ServerName
name|destination
init|=
name|plan
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|updateLoad
argument_list|(
name|result
argument_list|,
name|destination
argument_list|,
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|void
name|updateLoad
parameter_list|(
name|ArrayListMultimap
argument_list|<
name|String
argument_list|,
name|ServerAndLoad
argument_list|>
name|previousLoad
parameter_list|,
specifier|final
name|ServerName
name|sn
parameter_list|,
specifier|final
name|int
name|diff
parameter_list|)
block|{
for|for
control|(
name|String
name|groupName
range|:
name|previousLoad
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ServerAndLoad
name|newSAL
init|=
literal|null
decl_stmt|;
name|ServerAndLoad
name|oldSAL
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ServerAndLoad
name|sal
range|:
name|previousLoad
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
control|)
block|{
if|if
condition|(
name|ServerName
operator|.
name|isSameAddress
argument_list|(
name|sn
argument_list|,
name|sal
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
name|oldSAL
operator|=
name|sal
expr_stmt|;
name|newSAL
operator|=
operator|new
name|ServerAndLoad
argument_list|(
name|sn
argument_list|,
name|sal
operator|.
name|getLoad
argument_list|()
operator|+
name|diff
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|newSAL
operator|!=
literal|null
condition|)
block|{
name|previousLoad
operator|.
name|remove
argument_list|(
name|groupName
argument_list|,
name|oldSAL
argument_list|)
expr_stmt|;
name|previousLoad
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|newSAL
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|protected
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|mockClusterServers
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|servers
operator|.
name|size
argument_list|()
operator|==
name|regionAssignment
operator|.
name|length
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|assignment
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|servers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numRegions
init|=
name|regionAssignment
index|[
name|i
index|]
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|assignedRegions
argument_list|(
name|numRegions
argument_list|,
name|servers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assignment
operator|.
name|put
argument_list|(
name|servers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|regions
argument_list|)
expr_stmt|;
block|}
return|return
name|assignment
return|;
block|}
comment|/**    * Generate a list of regions evenly distributed between the tables.    *    * @param numRegions The number of regions to be generated.    * @return List of RegionInfo.    */
specifier|protected
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|randomRegions
parameter_list|(
name|int
name|numRegions
parameter_list|)
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numRegions
argument_list|)
decl_stmt|;
name|byte
index|[]
name|start
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|byte
index|[]
name|end
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|int
name|regionIdx
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|tables
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRegions
condition|;
name|i
operator|++
control|)
block|{
name|Bytes
operator|.
name|putInt
argument_list|(
name|start
argument_list|,
literal|0
argument_list|,
name|numRegions
operator|<<
literal|1
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|putInt
argument_list|(
name|end
argument_list|,
literal|0
argument_list|,
operator|(
name|numRegions
operator|<<
literal|1
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|int
name|tableIndex
init|=
operator|(
name|i
operator|+
name|regionIdx
operator|)
operator|%
name|tables
operator|.
name|length
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tables
index|[
name|tableIndex
index|]
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|start
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|end
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
operator|++
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
comment|/**    * Generate assigned regions to a given server using group information.    *    * @param numRegions the num regions to generate    * @param sn the servername    * @return the list of regions    * @throws java.io.IOException Signals that an I/O exception has occurred.    */
specifier|protected
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|assignedRegions
parameter_list|(
name|int
name|numRegions
parameter_list|,
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numRegions
argument_list|)
decl_stmt|;
name|byte
index|[]
name|start
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|byte
index|[]
name|end
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|Bytes
operator|.
name|putInt
argument_list|(
name|start
argument_list|,
literal|0
argument_list|,
name|numRegions
operator|<<
literal|1
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|putInt
argument_list|(
name|end
argument_list|,
literal|0
argument_list|,
operator|(
name|numRegions
operator|<<
literal|1
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRegions
condition|;
name|i
operator|++
control|)
block|{
name|TableName
name|tableName
init|=
name|getTableName
argument_list|(
name|sn
argument_list|)
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|start
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|end
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
operator|++
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
specifier|protected
specifier|static
name|List
argument_list|<
name|ServerName
argument_list|>
name|generateServers
parameter_list|(
name|int
name|numServers
parameter_list|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numServers
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numServers
condition|;
name|i
operator|++
control|)
block|{
name|String
name|host
init|=
literal|"server"
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|100000
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|60000
argument_list|)
decl_stmt|;
name|servers
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|servers
return|;
block|}
comment|/**    * Construct group info, with each group having at least one server.    *    * @param servers the servers    * @param groups the groups    * @return the map    */
specifier|protected
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|constructGroupInfo
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|,
name|String
index|[]
name|groups
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|servers
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|servers
operator|.
name|size
argument_list|()
operator|>=
name|groups
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RSGroupInfo
argument_list|>
name|groupMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|grpName
range|:
name|groups
control|)
block|{
name|RSGroupInfo
name|RSGroupInfo
init|=
operator|new
name|RSGroupInfo
argument_list|(
name|grpName
argument_list|)
decl_stmt|;
name|RSGroupInfo
operator|.
name|addServer
argument_list|(
name|servers
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|groupMap
operator|.
name|put
argument_list|(
name|grpName
argument_list|,
name|RSGroupInfo
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
while|while
condition|(
name|index
operator|<
name|servers
operator|.
name|size
argument_list|()
condition|)
block|{
name|int
name|grpIndex
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|groups
operator|.
name|length
argument_list|)
decl_stmt|;
name|groupMap
operator|.
name|get
argument_list|(
name|groups
index|[
name|grpIndex
index|]
argument_list|)
operator|.
name|addServer
argument_list|(
name|servers
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
return|return
name|groupMap
return|;
block|}
comment|/**    * Construct table descriptors evenly distributed between the groups.    * @param hasBogusTable there is a table that does not determine the group    * @return the list of table descriptors    */
specifier|protected
specifier|static
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|constructTableDesc
parameter_list|(
name|boolean
name|hasBogusTable
parameter_list|)
block|{
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|tds
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|groups
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TableDescriptor
name|htd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|grpIndex
init|=
operator|(
name|i
operator|+
name|index
operator|)
operator|%
name|groups
operator|.
name|length
decl_stmt|;
name|String
name|groupName
init|=
name|groups
index|[
name|grpIndex
index|]
decl_stmt|;
name|tableMap
operator|.
name|put
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
name|tds
operator|.
name|add
argument_list|(
name|htd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasBogusTable
condition|)
block|{
name|tableMap
operator|.
name|put
argument_list|(
name|table0
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|tds
operator|.
name|add
argument_list|(
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|table0
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tds
return|;
block|}
specifier|protected
specifier|static
name|MasterServices
name|getMockedMaster
parameter_list|()
throws|throws
name|IOException
block|{
name|TableDescriptors
name|tds
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TableDescriptors
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|tds
operator|.
name|get
argument_list|(
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableDescs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|tds
operator|.
name|get
argument_list|(
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableDescs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|tds
operator|.
name|get
argument_list|(
name|tables
index|[
literal|2
index|]
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableDescs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|tds
operator|.
name|get
argument_list|(
name|tables
index|[
literal|3
index|]
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableDescs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|MasterServices
name|services
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HMaster
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|services
operator|.
name|getTableDescriptors
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tds
argument_list|)
expr_stmt|;
name|AssignmentManager
name|am
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AssignmentManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|services
operator|.
name|getAssignmentManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|am
argument_list|)
expr_stmt|;
return|return
name|services
return|;
block|}
specifier|protected
specifier|static
name|RSGroupInfoManager
name|getMockedGroupInfoManager
parameter_list|()
throws|throws
name|IOException
block|{
name|RSGroupInfoManager
name|gm
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RSGroupInfoManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|gm
operator|.
name|getRSGroup
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|RSGroupInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RSGroupInfo
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|groupMap
operator|.
name|get
argument_list|(
name|invocation
operator|.
name|getArgument
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|gm
operator|.
name|listRSGroups
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Lists
operator|.
name|newLinkedList
argument_list|(
name|groupMap
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|gm
operator|.
name|isOnline
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|gm
operator|.
name|getRSGroupOfTable
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|tableMap
operator|.
name|get
argument_list|(
name|invocation
operator|.
name|getArgument
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|gm
return|;
block|}
specifier|protected
name|TableName
name|getTableName
parameter_list|(
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
name|TableName
name|tableName
init|=
literal|null
decl_stmt|;
name|RSGroupInfoManager
name|gm
init|=
name|getMockedGroupInfoManager
argument_list|()
decl_stmt|;
name|RSGroupInfo
name|groupOfServer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RSGroupInfo
name|gInfo
range|:
name|gm
operator|.
name|listRSGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|gInfo
operator|.
name|containsServer
argument_list|(
name|sn
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
name|groupOfServer
operator|=
name|gInfo
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|TableDescriptor
name|desc
range|:
name|tableDescs
control|)
block|{
if|if
condition|(
name|gm
operator|.
name|getRSGroupOfTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|endsWith
argument_list|(
name|groupOfServer
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|tableName
operator|=
name|desc
operator|.
name|getTableName
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tableName
return|;
block|}
block|}
end_class

end_unit

