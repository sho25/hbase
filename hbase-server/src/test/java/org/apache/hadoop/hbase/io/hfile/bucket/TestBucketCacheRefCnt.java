begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ByteBuffAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCacheKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Cacheable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
operator|.
name|BucketCache
operator|.
name|WriterThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestBucketCacheRefCnt
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestBucketCacheRefCnt
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|IO_ENGINE
init|=
literal|"offheap"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|CAPACITY_SIZE
init|=
literal|32
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|BLOCK_SIZE_ARRAY
init|=
operator|new
name|int
index|[]
block|{
literal|64
block|,
literal|128
block|,
literal|256
block|,
literal|512
block|,
literal|1024
block|,
literal|2048
block|,
literal|4096
block|,
literal|8192
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PERSISTENCE_PATH
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HFileContext
name|CONTEXT
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
name|BucketCache
name|cache
decl_stmt|;
specifier|private
specifier|static
name|BucketCache
name|create
parameter_list|(
name|int
name|writerSize
parameter_list|,
name|int
name|queueSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|BucketCache
argument_list|(
name|IO_ENGINE
argument_list|,
name|CAPACITY_SIZE
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|BLOCK_SIZE_ARRAY
argument_list|,
name|writerSize
argument_list|,
name|queueSize
argument_list|,
name|PERSISTENCE_PATH
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|HFileBlock
name|createBlock
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|)
block|{
return|return
name|createBlock
argument_list|(
name|offset
argument_list|,
name|size
argument_list|,
name|ByteBuffAllocator
operator|.
name|HEAP
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|HFileBlock
name|createBlock
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|,
name|ByteBuffAllocator
name|alloc
parameter_list|)
block|{
return|return
operator|new
name|HFileBlock
argument_list|(
name|BlockType
operator|.
name|DATA
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
operator|-
literal|1
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|size
argument_list|)
argument_list|,
name|HFileBlock
operator|.
name|FILL_HEADER
argument_list|,
name|offset
argument_list|,
literal|52
argument_list|,
name|size
argument_list|,
name|CONTEXT
argument_list|,
name|alloc
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|BlockCacheKey
name|createKey
parameter_list|(
name|String
name|hfileName
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
return|return
operator|new
name|BlockCacheKey
argument_list|(
name|hfileName
argument_list|,
name|offset
argument_list|)
return|;
block|}
specifier|private
name|void
name|disableWriter
parameter_list|()
block|{
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WriterThread
name|wt
range|:
name|cache
operator|.
name|writerThreads
control|)
block|{
name|wt
operator|.
name|disableWriter
argument_list|()
expr_stmt|;
name|wt
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBlockInRAMCache
parameter_list|()
throws|throws
name|IOException
block|{
name|cache
operator|=
name|create
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|disableWriter
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|HFileBlock
name|blk
init|=
name|createBlock
argument_list|(
name|i
argument_list|,
literal|1020
argument_list|)
decl_stmt|;
name|BlockCacheKey
name|key
init|=
name|createKey
argument_list|(
literal|"testHFile-00"
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blk
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|cacheBlock
argument_list|(
name|key
argument_list|,
name|blk
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|blk
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Cacheable
name|block
init|=
name|cache
operator|.
name|getBlock
argument_list|(
name|key
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|blk
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|block
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blk
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|block
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|blk
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|block
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|BlockCacheKey
name|key
init|=
name|createKey
argument_list|(
literal|"testHFile-00"
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|Cacheable
name|blk
init|=
name|cache
operator|.
name|getBlock
argument_list|(
name|key
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|blk
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|blk
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|blk
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|evictBlock
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blk
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|blk
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blk
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|waitUntilFlushedToCache
parameter_list|(
name|BlockCacheKey
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
operator|!
name|cache
operator|.
name|backingMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|||
name|cache
operator|.
name|ramCache
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBlockInBackingMap
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteBuffAllocator
name|alloc
init|=
name|ByteBuffAllocator
operator|.
name|create
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|cache
operator|=
name|create
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
try|try
block|{
name|HFileBlock
name|blk
init|=
name|createBlock
argument_list|(
literal|200
argument_list|,
literal|1020
argument_list|,
name|alloc
argument_list|)
decl_stmt|;
name|BlockCacheKey
name|key
init|=
name|createKey
argument_list|(
literal|"testHFile-00"
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|cache
operator|.
name|cacheBlock
argument_list|(
name|key
argument_list|,
name|blk
argument_list|)
expr_stmt|;
name|waitUntilFlushedToCache
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blk
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Cacheable
name|block
init|=
name|cache
operator|.
name|getBlock
argument_list|(
name|key
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|block
operator|instanceof
name|HFileBlock
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|HFileBlock
operator|)
name|block
operator|)
operator|.
name|getByteBuffAllocator
argument_list|()
operator|==
name|alloc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|block
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|block
operator|.
name|retain
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|block
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|Cacheable
name|newBlock
init|=
name|cache
operator|.
name|getBlock
argument_list|(
name|key
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newBlock
operator|instanceof
name|HFileBlock
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|HFileBlock
operator|)
name|newBlock
operator|)
operator|.
name|getByteBuffAllocator
argument_list|()
operator|==
name|alloc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|newBlock
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// release the newBlock
name|assertFalse
argument_list|(
name|newBlock
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|newBlock
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|block
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Evict the key
name|cache
operator|.
name|evictBlock
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|block
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Evict again, shouldn't change the refCnt.
name|cache
operator|.
name|evictBlock
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|block
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|block
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|block
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|newBlock
operator|=
name|cache
operator|.
name|getBlock
argument_list|(
name|key
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|block
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|newBlock
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|HFileBlock
operator|)
name|newBlock
operator|)
operator|.
name|getByteBuffAllocator
argument_list|()
operator|==
name|alloc
argument_list|)
expr_stmt|;
comment|// Release the block
name|assertFalse
argument_list|(
name|block
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|block
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release the newBlock;
name|assertTrue
argument_list|(
name|newBlock
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newBlock
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInBucketCache
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteBuffAllocator
name|alloc
init|=
name|ByteBuffAllocator
operator|.
name|create
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|cache
operator|=
name|create
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
try|try
block|{
name|HFileBlock
name|blk
init|=
name|createBlock
argument_list|(
literal|200
argument_list|,
literal|1020
argument_list|,
name|alloc
argument_list|)
decl_stmt|;
name|BlockCacheKey
name|key
init|=
name|createKey
argument_list|(
literal|"testHFile-00"
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|cache
operator|.
name|cacheBlock
argument_list|(
name|key
argument_list|,
name|blk
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|blk
operator|.
name|refCnt
argument_list|()
operator|==
literal|1
operator|||
name|blk
operator|.
name|refCnt
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Cacheable
name|block1
init|=
name|cache
operator|.
name|getBlock
argument_list|(
name|key
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|block1
operator|.
name|refCnt
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|HFileBlock
operator|)
name|block1
operator|)
operator|.
name|getByteBuffAllocator
argument_list|()
operator|==
name|alloc
argument_list|)
expr_stmt|;
name|Cacheable
name|block2
init|=
name|cache
operator|.
name|getBlock
argument_list|(
name|key
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|HFileBlock
operator|)
name|block2
operator|)
operator|.
name|getByteBuffAllocator
argument_list|()
operator|==
name|alloc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|block2
operator|.
name|refCnt
argument_list|()
operator|>=
literal|3
argument_list|)
expr_stmt|;
name|cache
operator|.
name|evictBlock
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|blk
operator|.
name|refCnt
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|block1
operator|.
name|refCnt
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|block2
operator|.
name|refCnt
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
comment|// Get key again
name|Cacheable
name|block3
init|=
name|cache
operator|.
name|getBlock
argument_list|(
name|key
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|block3
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
operator|(
operator|(
name|HFileBlock
operator|)
name|block3
operator|)
operator|.
name|getByteBuffAllocator
argument_list|()
operator|==
name|alloc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|block3
operator|.
name|refCnt
argument_list|()
operator|>=
literal|3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|block3
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|blk
operator|.
name|release
argument_list|()
expr_stmt|;
name|boolean
name|ret1
init|=
name|block1
operator|.
name|release
argument_list|()
decl_stmt|;
name|boolean
name|ret2
init|=
name|block2
operator|.
name|release
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ret1
operator|||
name|ret2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blk
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|block1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|block2
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMarkStaleAsEvicted
parameter_list|()
throws|throws
name|Exception
block|{
name|cache
operator|=
name|create
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
try|try
block|{
name|HFileBlock
name|blk
init|=
name|createBlock
argument_list|(
literal|200
argument_list|,
literal|1020
argument_list|)
decl_stmt|;
name|BlockCacheKey
name|key
init|=
name|createKey
argument_list|(
literal|"testMarkStaleAsEvicted"
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|cache
operator|.
name|cacheBlock
argument_list|(
name|key
argument_list|,
name|blk
argument_list|)
expr_stmt|;
name|waitUntilFlushedToCache
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blk
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cache
operator|.
name|backingMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|backingMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// RPC reference this cache.
name|Cacheable
name|block1
init|=
name|cache
operator|.
name|getBlock
argument_list|(
name|key
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|block1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|BucketEntry
name|be1
init|=
name|cache
operator|.
name|backingMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|be1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|be1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// We've some RPC reference, so it won't have any effect.
name|assertFalse
argument_list|(
name|be1
operator|.
name|markStaleAsEvicted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|block1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|backingMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release the RPC reference.
name|block1
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|block1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|backingMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mark the stale as evicted again, it'll do the de-allocation.
name|assertTrue
argument_list|(
name|be1
operator|.
name|markStaleAsEvicted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|block1
operator|.
name|refCnt
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cache
operator|.
name|backingMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

