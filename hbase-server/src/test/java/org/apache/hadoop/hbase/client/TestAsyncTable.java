begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ForkJoinPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAsyncTable
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"async"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cq"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|AsyncConnection
name|ASYNC_CONN
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|byte
index|[]
name|row
decl_stmt|;
annotation|@
name|Parameter
specifier|public
name|Supplier
argument_list|<
name|AsyncTableBase
argument_list|>
name|getTable
decl_stmt|;
specifier|private
specifier|static
name|RawAsyncTable
name|getRawTable
parameter_list|()
block|{
return|return
name|ASYNC_CONN
operator|.
name|getRawTable
argument_list|(
name|TABLE_NAME
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|AsyncTable
name|getTable
parameter_list|()
block|{
return|return
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|ForkJoinPool
operator|.
name|commonPool
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Parameters
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|params
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Supplier
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|TestAsyncTable
operator|::
name|getRawTable
block|}
operator|,
operator|new
name|Supplier
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|TestAsyncTable
operator|::
name|getTable
block|}
block|)
function|;
block|}
end_class

begin_function
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|ASYNC_CONN
operator|=
name|ConnectionFactory
operator|.
name|createAsyncConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|ASYNC_CONN
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|row
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|testName
operator|.
name|getMethodName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[^0-9A-Za-z]"
argument_list|,
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncTableBase
name|table
init|=
name|getTable
operator|.
name|get
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|exists
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|VALUE
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|exists
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|byte
index|[]
name|concat
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|base
argument_list|)
operator|+
literal|"-"
operator|+
name|index
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testSimpleMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncTableBase
name|table
init|=
name|getTable
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|100
decl_stmt|;
name|CountDownLatch
name|putLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|concat
argument_list|(
name|row
argument_list|,
name|i
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|concat
argument_list|(
name|VALUE
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAccept
argument_list|(
name|x
lambda|->
name|putLatch
operator|.
name|countDown
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|putLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|BlockingQueue
argument_list|<
name|Boolean
argument_list|>
name|existsResp
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|table
operator|.
name|exists
argument_list|(
operator|new
name|Get
argument_list|(
name|concat
argument_list|(
name|row
argument_list|,
name|i
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
operator|.
name|thenAccept
argument_list|(
name|x
lambda|->
name|existsResp
operator|.
name|add
argument_list|(
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|existsResp
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BlockingQueue
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Result
argument_list|>
argument_list|>
name|getResp
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|concat
argument_list|(
name|row
argument_list|,
name|i
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
operator|.
name|thenAccept
argument_list|(
name|x
lambda|->
name|getResp
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|newPair
argument_list|(
name|i
argument_list|,
name|x
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Result
argument_list|>
name|pair
init|=
name|getResp
operator|.
name|take
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|concat
argument_list|(
name|VALUE
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|,
name|pair
operator|.
name|getSecond
argument_list|()
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CountDownLatch
name|deleteLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|table
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|concat
argument_list|(
name|row
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAccept
argument_list|(
name|x
lambda|->
name|deleteLatch
operator|.
name|countDown
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|deleteLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|table
operator|.
name|exists
argument_list|(
operator|new
name|Get
argument_list|(
name|concat
argument_list|(
name|row
argument_list|,
name|i
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
operator|.
name|thenAccept
argument_list|(
name|x
lambda|->
name|existsResp
operator|.
name|add
argument_list|(
name|x
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|existsResp
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|concat
argument_list|(
name|row
argument_list|,
name|i
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
operator|.
name|thenAccept
argument_list|(
name|x
lambda|->
name|getResp
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|newPair
argument_list|(
name|i
argument_list|,
name|x
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Result
argument_list|>
name|pair
init|=
name|getResp
operator|.
name|take
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testIncrement
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|AsyncTableBase
name|table
init|=
name|getTable
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|100
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|AtomicLong
name|sum
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|table
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|1
argument_list|)
operator|.
name|thenAccept
argument_list|(
name|x
lambda|->
block|{
name|sum
operator|.
name|addAndGet
argument_list|(
name|x
argument_list|)
argument_list|;
name|latch
operator|.
name|countDown
argument_list|()
argument_list|;
block|}
end_function

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
name|count
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
operator|(
literal|1
operator|+
name|count
operator|)
operator|*
name|count
operator|/
literal|2
argument_list|,
name|sum
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Test
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|AsyncTableBase
name|table
init|=
name|getTable
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|10
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|char
name|suffix
init|=
literal|':'
decl_stmt|;
name|AtomicLong
name|suffixCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|forEachOrdered
argument_list|(
name|i
lambda|->
name|table
operator|.
name|append
argument_list|(
operator|new
name|Append
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|i
operator|+
name|suffix
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAccept
argument_list|(
name|r
lambda|->
block|{
name|suffixCount
operator|.
name|addAndGet
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
operator|.
name|chars
argument_list|()
operator|.
name|filter
argument_list|(
name|x
lambda|->
name|x
operator|==
name|suffix
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
argument_list|;
name|latch
operator|.
name|countDown
argument_list|()
argument_list|;
block|}
end_function

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
operator|(
literal|1
operator|+
name|count
operator|)
operator|*
name|count
operator|/
literal|2
argument_list|,
name|suffixCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|String
name|value
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
index|[]
name|actual
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|value
operator|.
name|split
argument_list|(
literal|""
operator|+
name|suffix
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|Integer
operator|::
name|parseInt
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertArrayEquals
argument_list|(
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|,
name|actual
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Test
specifier|public
name|void
name|testCheckAndPut
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|AsyncTableBase
name|table
init|=
name|getTable
operator|.
name|get
argument_list|()
decl_stmt|;
name|AtomicInteger
name|successCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicInteger
name|successIndex
init|=
operator|new
name|AtomicInteger
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|10
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|table
operator|.
name|checkAndMutate
argument_list|(
name|row
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifNotExists
argument_list|()
operator|.
name|thenPut
argument_list|(
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|concat
argument_list|(
name|VALUE
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAccept
argument_list|(
name|x
lambda|->
block|{
block|if (x
argument_list|)
block|{
name|successCount
operator|.
name|incrementAndGet
argument_list|()
block|;
name|successIndex
operator|.
name|set
argument_list|(
name|i
argument_list|)
block|;               }
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
end_function

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|successCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|String
name|actual
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|actual
operator|.
name|endsWith
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|successIndex
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Test
specifier|public
name|void
name|testCheckAndDelete
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|AsyncTableBase
name|table
init|=
name|getTable
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|10
decl_stmt|;
name|CountDownLatch
name|putLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
operator|+
literal|1
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
argument_list|)
operator|.
name|thenRun
argument_list|(
parameter_list|()
lambda|->
name|putLatch
operator|.
name|countDown
argument_list|()
argument_list|)
expr_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|concat
argument_list|(
name|QUALIFIER
argument_list|,
name|i
argument_list|)
argument_list|,
name|VALUE
argument_list|)
argument_list|)
operator|.
name|thenRun
argument_list|(
parameter_list|()
lambda|->
name|putLatch
operator|.
name|countDown
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|putLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|AtomicInteger
name|successCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicInteger
name|successIndex
init|=
operator|new
name|AtomicInteger
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|deleteLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|table
operator|.
name|checkAndMutate
argument_list|(
name|row
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenDelete
argument_list|(
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|concat
argument_list|(
name|QUALIFIER
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAccept
argument_list|(
name|x
lambda|->
block|{
block|if (x
argument_list|)
block|{
name|successCount
operator|.
name|incrementAndGet
argument_list|()
block|;
name|successIndex
operator|.
name|set
argument_list|(
name|i
argument_list|)
block|;               }
name|deleteLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
end_function

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|deleteLatch
operator|.
name|await
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|successCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
block|{
if|if
condition|(
name|i
operator|==
name|successIndex
operator|.
name|get
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|FAMILY
argument_list|,
name|concat
argument_list|(
name|QUALIFIER
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertArrayEquals
argument_list|(
name|VALUE
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|concat
argument_list|(
name|QUALIFIER
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Test
specifier|public
name|void
name|testMutateRow
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
name|AsyncTableBase
name|table
init|=
name|getTable
operator|.
name|get
argument_list|()
decl_stmt|;
name|RowMutations
name|mutation
init|=
operator|new
name|RowMutations
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|mutation
operator|.
name|add
argument_list|(
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|concat
argument_list|(
name|QUALIFIER
argument_list|,
literal|1
argument_list|)
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|mutateRow
argument_list|(
name|mutation
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|VALUE
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|concat
argument_list|(
name|QUALIFIER
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mutation
operator|=
operator|new
name|RowMutations
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|mutation
operator|.
name|add
argument_list|(
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|concat
argument_list|(
name|QUALIFIER
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mutation
operator|.
name|add
argument_list|(
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|concat
argument_list|(
name|QUALIFIER
argument_list|,
literal|2
argument_list|)
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|mutateRow
argument_list|(
name|mutation
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|concat
argument_list|(
name|QUALIFIER
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|VALUE
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|concat
argument_list|(
name|QUALIFIER
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndMutate
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|AsyncTableBase
name|table
init|=
name|getTable
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|10
decl_stmt|;
name|CountDownLatch
name|putLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
operator|+
literal|1
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
argument_list|)
operator|.
name|thenRun
argument_list|(
parameter_list|()
lambda|->
name|putLatch
operator|.
name|countDown
argument_list|()
argument_list|)
expr_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|concat
argument_list|(
name|QUALIFIER
argument_list|,
name|i
argument_list|)
argument_list|,
name|VALUE
argument_list|)
argument_list|)
operator|.
name|thenRun
argument_list|(
parameter_list|()
lambda|->
name|putLatch
operator|.
name|countDown
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|putLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|AtomicInteger
name|successCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicInteger
name|successIndex
init|=
operator|new
name|AtomicInteger
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|mutateLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
argument_list|)
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
block|{
name|RowMutations
name|mutation
init|=
operator|new
name|RowMutations
argument_list|(
name|row
argument_list|)
decl_stmt|;
try|try
block|{
name|mutation
operator|.
name|add
argument_list|(
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
expr_stmt|;
name|mutation
operator|.
name|add
argument_list|(
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|concat
argument_list|(
name|QUALIFIER
argument_list|,
name|i
argument_list|)
argument_list|,
name|concat
argument_list|(
name|VALUE
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|table
operator|.
name|checkAndMutate
argument_list|(
name|row
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenMutate
argument_list|(
name|mutation
argument_list|)
operator|.
name|thenAccept
argument_list|(
name|x
lambda|->
block|{
if|if
condition|(
name|x
condition|)
block|{
name|successCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|successIndex
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|mutateLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|mutateLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|successCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
block|{
if|if
condition|(
name|i
operator|==
name|successIndex
operator|.
name|get
argument_list|()
condition|)
block|{
name|assertArrayEquals
argument_list|(
name|concat
argument_list|(
name|VALUE
argument_list|,
name|i
argument_list|)
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|concat
argument_list|(
name|QUALIFIER
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertArrayEquals
argument_list|(
name|VALUE
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|concat
argument_list|(
name|QUALIFIER
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

