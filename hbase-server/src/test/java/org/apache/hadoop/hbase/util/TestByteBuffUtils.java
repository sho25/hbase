begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|ByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|MultiByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|SingleByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestByteBuffUtils
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestByteBuffUtils
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testCopyAndCompare
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteBuffer
name|bb1
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|50
argument_list|)
decl_stmt|;
name|ByteBuffer
name|bb2
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|50
argument_list|)
decl_stmt|;
name|MultiByteBuff
name|src
init|=
operator|new
name|MultiByteBuff
argument_list|(
name|bb1
argument_list|,
name|bb2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|src
operator|.
name|putLong
argument_list|(
literal|8L
argument_list|)
expr_stmt|;
block|}
name|src
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|src
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|ByteBuffer
name|bb3
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|50
argument_list|)
decl_stmt|;
name|ByteBuffer
name|bb4
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|50
argument_list|)
decl_stmt|;
name|MultiByteBuff
name|mbbDst
init|=
operator|new
name|MultiByteBuff
argument_list|(
name|bb3
argument_list|,
name|bb4
argument_list|)
decl_stmt|;
comment|// copy from MBB to MBB
name|mbbDst
operator|.
name|put
argument_list|(
literal|0
argument_list|,
name|src
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|int
name|compareTo
init|=
name|ByteBuff
operator|.
name|compareTo
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
name|mbbDst
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|compareTo
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Copy from MBB to SBB
name|bb3
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|SingleByteBuff
name|sbbDst
init|=
operator|new
name|SingleByteBuff
argument_list|(
name|bb3
argument_list|)
decl_stmt|;
name|src
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|sbbDst
operator|.
name|put
argument_list|(
literal|0
argument_list|,
name|src
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|compareTo
operator|=
name|ByteBuff
operator|.
name|compareTo
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
name|sbbDst
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|compareTo
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Copy from SBB to SBB
name|bb3
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|SingleByteBuff
name|sbb
init|=
operator|new
name|SingleByteBuff
argument_list|(
name|bb3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|sbb
operator|.
name|putLong
argument_list|(
literal|8L
argument_list|)
expr_stmt|;
block|}
name|sbb
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|sbb
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|bb4
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|sbbDst
operator|=
operator|new
name|SingleByteBuff
argument_list|(
name|bb4
argument_list|)
expr_stmt|;
name|sbbDst
operator|.
name|put
argument_list|(
literal|0
argument_list|,
name|sbb
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|compareTo
operator|=
name|ByteBuff
operator|.
name|compareTo
argument_list|(
name|sbb
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
name|sbbDst
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|compareTo
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// copy from SBB to MBB
name|sbb
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|mbbDst
operator|=
operator|new
name|MultiByteBuff
argument_list|(
name|bb3
argument_list|,
name|bb4
argument_list|)
expr_stmt|;
name|mbbDst
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|mbbDst
operator|.
name|put
argument_list|(
literal|0
argument_list|,
name|sbb
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|compareTo
operator|=
name|ByteBuff
operator|.
name|compareTo
argument_list|(
name|sbb
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
name|mbbDst
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|compareTo
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

