begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|constraint
operator|.
name|ConstraintException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableNamespaceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|SnapshotManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|net
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRSGroupsAdmin1
extends|extends
name|TestRSGroupsBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRSGroupsAdmin1
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRSGroupsAdmin1
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpTestBeforeClass
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDownAfterClass
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|beforeMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpBeforeMethod
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|afterMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDownAfterMethod
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidGroupNames
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|badNames
init|=
block|{
literal|"foo*"
block|,
literal|"foo@"
block|,
literal|"-"
block|}
decl_stmt|;
name|String
index|[]
name|goodNames
init|=
block|{
literal|"foo_123"
block|}
decl_stmt|;
for|for
control|(
name|String
name|entry
range|:
name|badNames
control|)
block|{
try|try
block|{
name|rsGroupAdmin
operator|.
name|addRSGroup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a constraint exception for: "
operator|+
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
for|for
control|(
name|String
name|entry
range|:
name|goodNames
control|)
block|{
name|rsGroupAdmin
operator|.
name|addRSGroup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBogusArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"nonexistent"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rsGroupAdmin
operator|.
name|getRSGroupOfServer
argument_list|(
name|Address
operator|.
name|fromParts
argument_list|(
literal|"bogus"
argument_list|,
literal|123
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
literal|"bogus"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected removing bogus group to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"bogustable"
argument_list|)
argument_list|)
argument_list|,
literal|"bogus"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected move with bogus group to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintException
decl||
name|TableNotFoundException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Address
operator|.
name|fromParts
argument_list|(
literal|"bogus"
argument_list|,
literal|123
argument_list|)
argument_list|)
argument_list|,
literal|"bogus"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected move with bogus group to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|admin
operator|.
name|balancerSwitch
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|balanceRSGroup
argument_list|(
literal|"bogus"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|balancerSwitch
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected move with bogus group to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespaceConstraint
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nsName
init|=
name|tablePrefix
operator|+
literal|"_foo"
decl_stmt|;
name|String
name|groupName
init|=
name|tablePrefix
operator|+
literal|"_foo"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testNamespaceConstraint"
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|addRSGroup
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|preAddRSGroupCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|postAddRSGroupCalled
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|nsName
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|RSGroupInfo
operator|.
name|NAMESPACE_DESC_PROP_GROUP
argument_list|,
name|groupName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// test removing a referenced group
try|try
block|{
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a constraint exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{     }
comment|// test modify group
comment|// changing with the same name is fine
name|admin
operator|.
name|modifyNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|nsName
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|RSGroupInfo
operator|.
name|NAMESPACE_DESC_PROP_GROUP
argument_list|,
name|groupName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|anotherGroup
init|=
name|tablePrefix
operator|+
literal|"_anotherGroup"
decl_stmt|;
name|rsGroupAdmin
operator|.
name|addRSGroup
argument_list|(
name|anotherGroup
argument_list|)
expr_stmt|;
comment|// test add non-existent group
name|admin
operator|.
name|deleteNamespace
argument_list|(
name|nsName
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|preRemoveRSGroupCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|postRemoveRSGroupCalled
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|nsName
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|RSGroupInfo
operator|.
name|NAMESPACE_DESC_PROP_GROUP
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a constraint exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGroupInfoMultiAccessing
parameter_list|()
throws|throws
name|Exception
block|{
name|RSGroupInfoManager
name|manager
init|=
name|rsGroupAdminEndpoint
operator|.
name|getGroupInfoManager
argument_list|()
decl_stmt|;
name|RSGroupInfo
name|defaultGroup
init|=
name|manager
operator|.
name|getRSGroup
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
comment|// getRSGroup updates default group's server list
comment|// this process must not affect other threads iterating the list
name|Iterator
argument_list|<
name|Address
argument_list|>
name|it
init|=
name|defaultGroup
operator|.
name|getServers
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|manager
operator|.
name|getRSGroup
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRSGroupInfoCPHookCalled
parameter_list|()
throws|throws
name|Exception
block|{
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|preGetRSGroupInfoCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|postGetRSGroupInfoCalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRSGroupInfoOfTableCPHookCalled
parameter_list|()
throws|throws
name|Exception
block|{
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|preGetRSGroupInfoOfTableCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|postGetRSGroupInfoOfTableCalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListRSGroupsCPHookCalled
parameter_list|()
throws|throws
name|Exception
block|{
name|rsGroupAdmin
operator|.
name|listRSGroups
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|preListRSGroupsCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|postListRSGroupsCalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRSGroupInfoOfServerCPHookCalled
parameter_list|()
throws|throws
name|Exception
block|{
name|ServerName
name|masterServerName
init|=
operator|(
operator|(
name|MiniHBaseCluster
operator|)
name|cluster
operator|)
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|rsGroupAdmin
operator|.
name|getRSGroupOfServer
argument_list|(
name|masterServerName
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|preGetRSGroupInfoOfServerCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|postGetRSGroupInfoOfServerCalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailRemoveGroup
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|initNumGroups
init|=
name|rsGroupAdmin
operator|.
name|listRSGroups
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|addGroup
argument_list|(
literal|"bar"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|barGroup
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
comment|// group is not empty therefore it should fail
try|try
block|{
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|barGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected remove group to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
comment|// group cannot lose all it's servers therefore it should fail
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|barGroup
operator|.
name|getServers
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected move servers to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|barGroup
operator|.
name|getTables
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
try|try
block|{
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|barGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected move servers to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|barGroup
operator|.
name|getServers
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|barGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initNumGroups
argument_list|,
name|rsGroupAdmin
operator|.
name|listRSGroups
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiTableMove
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableNameA
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tablePrefix
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"A"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableNameB
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tablePrefix
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"B"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|familyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|String
name|newGroupName
init|=
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|newGroupName
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableNameA
argument_list|,
name|familyNameBytes
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableNameB
argument_list|,
name|familyNameBytes
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|regionsA
init|=
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableNameA
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionsA
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|regionsB
init|=
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableNameB
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionsB
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableNameA
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
literal|1
operator|&&
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableNameB
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|tableGrpA
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableNameA
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tableGrpA
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|tableGrpB
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableNameB
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tableGrpB
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
argument_list|)
expr_stmt|;
comment|// change table's group
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving table ["
operator|+
name|tableNameA
operator|+
literal|","
operator|+
name|tableNameB
operator|+
literal|"] to "
operator|+
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableNameA
argument_list|,
name|tableNameB
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify group change
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableNameA
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableNameB
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify tables' not exist in old group
name|Set
argument_list|<
name|TableName
argument_list|>
name|DefaultTables
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getTables
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|DefaultTables
operator|.
name|contains
argument_list|(
name|tableNameA
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DefaultTables
operator|.
name|contains
argument_list|(
name|tableNameB
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify tables' exist in new group
name|Set
argument_list|<
name|TableName
argument_list|>
name|newGroupTables
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroupName
argument_list|)
operator|.
name|getTables
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newGroupTables
operator|.
name|contains
argument_list|(
name|tableNameA
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroupTables
operator|.
name|contains
argument_list|(
name|tableNameB
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableMoveTruncateAndDrop
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|familyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|String
name|newGroupName
init|=
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|newGroupName
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
name|familyNameBytes
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|regions
init|=
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
literal|5
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|tableGrp
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tableGrp
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
argument_list|)
expr_stmt|;
comment|// change table's group
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving table "
operator|+
name|tableName
operator|+
literal|" to "
operator|+
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify group change
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|serverMap
init|=
name|getTableServerRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|serverMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServerName
name|rs
range|:
name|serverMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|newGroup
operator|.
name|containsServer
argument_list|(
name|rs
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
name|count
operator|+=
name|serverMap
operator|.
name|get
argument_list|(
name|rs
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|count
operator|==
literal|5
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// test truncate
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|truncateTable
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getTables
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify removed table is removed from group
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|preMoveTablesCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|postMoveTablesCalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisabledTableMove
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|familyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|String
name|newGroupName
init|=
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|newGroupName
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
name|familyNameBytes
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|regions
init|=
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
literal|5
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|tableGrp
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tableGrp
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
argument_list|)
expr_stmt|;
comment|// test disable table
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// change table's group
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving table "
operator|+
name|tableName
operator|+
literal|" to "
operator|+
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify group change
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonExistentTableMove
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tablePrefix
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|tableGrp
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|tableGrp
argument_list|)
expr_stmt|;
comment|// test if table exists already.
name|boolean
name|exist
init|=
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|exist
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving table "
operator|+
name|tableName
operator|+
literal|" to "
operator|+
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" shouldn't have been successfully moved."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveServersAndTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Address
operator|.
name|fromParts
argument_list|(
literal|"bogus"
argument_list|,
literal|123
argument_list|)
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" shouldn't have been successfully moved."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
block|}
comment|// verify group change
name|assertNull
argument_list|(
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRSGroupListDoesNotContainFailedTableCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|toggleQuotaCheckAndRestartMiniCluster
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|nsp
init|=
literal|"np1"
decl_stmt|;
name|NamespaceDescriptor
name|nspDesc
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|nsp
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_REGIONS
argument_list|,
literal|"5"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_TABLES
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|nspDesc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|admin
operator|.
name|listNamespaceDescriptors
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|ColumnFamilyDescriptor
name|fam1
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|TableDescriptor
name|tableDescOne
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|nsp
operator|+
name|TableName
operator|.
name|NAMESPACE_DELIM
operator|+
literal|"table1"
argument_list|)
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|fam1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescOne
argument_list|)
expr_stmt|;
name|TableDescriptor
name|tableDescTwo
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|nsp
operator|+
name|TableName
operator|.
name|NAMESPACE_DELIM
operator|+
literal|"table2"
argument_list|)
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|fam1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|boolean
name|constraintViolated
init|=
literal|false
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescTwo
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AAA"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ZZZ"
argument_list|)
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Creation table should fail because of quota violation."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|exp
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
name|constraintViolated
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
literal|"Constraint not violated for table "
operator|+
name|tableDescTwo
operator|.
name|getTableName
argument_list|()
argument_list|,
name|constraintViolated
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|RSGroupInfo
argument_list|>
name|rsGroupInfoList
init|=
name|rsGroupAdmin
operator|.
name|listRSGroups
argument_list|()
decl_stmt|;
name|boolean
name|foundTable2
init|=
literal|false
decl_stmt|;
name|boolean
name|foundTable1
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rsGroupInfoList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|rsGroupInfoList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTables
argument_list|()
operator|.
name|contains
argument_list|(
name|tableDescTwo
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|foundTable2
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|rsGroupInfoList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTables
argument_list|()
operator|.
name|contains
argument_list|(
name|tableDescOne
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|foundTable1
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
literal|"Found table2 in rsgroup list."
argument_list|,
name|foundTable2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not find table1 in rsgroup list"
argument_list|,
name|foundTable1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableDescOne
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteNamespace
argument_list|(
name|nspDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|toggleQuotaCheckAndRestartMiniCluster
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotMoveTableToNullRSGroupWhenCreatingExistingTable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Trigger
name|TableName
name|tn1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t1"
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tn1
argument_list|,
literal|"cf1"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Create an existing table to trigger HBASE-21866
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tn1
argument_list|,
literal|"cf1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableExistsException
name|teex
parameter_list|)
block|{
comment|// Ignore
block|}
comment|// Wait then verify
comment|//   Could not verify until the rollback of CreateTableProcedure is done
comment|//   (that is, the coprocessor finishes its work),
comment|//   or the table is still in the "default" rsgroup even though HBASE-21866
comment|//   is not fixed.
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|5000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getActiveExecutorCount
argument_list|()
operator|==
literal|0
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|TableName
argument_list|>
name|tables
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getTables
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Table 't1' must be in 'default' rsgroup"
argument_list|,
name|tables
operator|.
name|contains
argument_list|(
name|tn1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Cleanup
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tn1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|toggleQuotaCheckAndRestartMiniCluster
parameter_list|(
name|boolean
name|enable
parameter_list|)
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_CONF_KEY
argument_list|,
name|enable
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|NUM_SLAVES_BASE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MINTOSTART
argument_list|,
name|NUM_SLAVES_BASE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|SnapshotManager
operator|.
name|HBASE_SNAPSHOT_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

