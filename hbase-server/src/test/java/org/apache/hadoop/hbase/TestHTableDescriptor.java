begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseRegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test setting values in the descriptor  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHTableDescriptor
block|{
annotation|@
name|Test
specifier|public
name|void
name|testPb
parameter_list|()
throws|throws
name|DeserializationException
throws|,
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
name|HTableDescriptor
operator|.
name|META_TABLEDESC
decl_stmt|;
specifier|final
name|int
name|v
init|=
literal|123
decl_stmt|;
name|htd
operator|.
name|setMaxFileSize
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setDeferredLogFlush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|htd
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|deserializedHtd
init|=
name|HTableDescriptor
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|htd
argument_list|,
name|deserializedHtd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
name|deserializedHtd
operator|.
name|getMaxFileSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deserializedHtd
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deserializedHtd
operator|.
name|isDeferredLogFlush
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test cps in the table description    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testGetSetRemoveCP
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
comment|// simple CP
name|String
name|className
init|=
name|BaseRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// add and check that it is present
name|desc
operator|.
name|addCoprocessor
argument_list|(
name|className
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|desc
operator|.
name|hasCoprocessor
argument_list|(
name|className
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove it and check that it is gone
name|desc
operator|.
name|removeCoprocessor
argument_list|(
name|className
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|desc
operator|.
name|hasCoprocessor
argument_list|(
name|className
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that we add and remove strings from settings properly.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testRemoveString
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
name|String
name|key
init|=
literal|"Some"
decl_stmt|;
name|String
name|value
init|=
literal|"value"
decl_stmt|;
name|desc
operator|.
name|setValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|desc
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|desc
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

