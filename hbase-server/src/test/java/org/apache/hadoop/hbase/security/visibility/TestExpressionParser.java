begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SecurityTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|ExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|LeafExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|NonLeafExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|expression
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SecurityTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestExpressionParser
block|{
specifier|private
name|ExpressionParser
name|parser
init|=
operator|new
name|ExpressionParser
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testPositiveCases
parameter_list|()
throws|throws
name|Exception
block|{
comment|// abc -> (abc)
name|ExpressionNode
name|node
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|LeafExpressionNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|node
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// a&b|c&d -> (((a& b) | c)& )
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"a&b|c&d"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|NonLeafExpressionNode
name|nlNode
init|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
decl_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|OR
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// (a) -> (a)
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"(a)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|LeafExpressionNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|node
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// (a&b) -> (a& b)
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|" ( a& b )"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// ((((a&b)))) -> (a& b)
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"((((a&b))))"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// (a|b)&(cc|def) -> ((a | b)& (cc | def))
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"( a | b )& (cc|def)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|NonLeafExpressionNode
name|nlNodeLeft
init|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NonLeafExpressionNode
name|nlNodeRight
init|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|OR
argument_list|,
name|nlNodeLeft
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNodeLeft
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNodeLeft
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNodeLeft
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|OR
argument_list|,
name|nlNodeRight
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNodeRight
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cc"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNodeRight
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"def"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNodeRight
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// a&(cc|de) -> (a& (cc | de))
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"a&(cc|de)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|OR
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cc"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"de"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// (a&b)|c -> ((a& b) | c)
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"(a&b)|c"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|OR
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// (a&b&c)|d -> (((a& b)& c) | d)
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"(a&b&c)|d"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|OR
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// a&(b|(c|d)) -> (a& (b | (c | d)))
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"a&(b|(c|d))"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|OR
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|OR
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// (!a) -> (!a)
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"(!a)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|NOT
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// a&(!b) -> (a& (!b))
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"a&(!b)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|NOT
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// !a&b -> ((!a)& b)
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"!a&b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|NOT
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// !a&(!b) -> ((!a)& (!b))
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"!a&(!b)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNodeLeft
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nlNodeRight
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|NOT
argument_list|,
name|nlNodeLeft
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nlNodeLeft
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNodeLeft
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|NOT
argument_list|,
name|nlNodeRight
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nlNodeRight
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNodeRight
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// !a&!b -> ((!a)& (!b))
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"!a&!b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNodeLeft
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nlNodeRight
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|NOT
argument_list|,
name|nlNodeLeft
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nlNodeLeft
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNodeLeft
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|NOT
argument_list|,
name|nlNodeRight
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nlNodeRight
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNodeRight
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// !(a&b) -> (!(a& b))
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"!(a&b)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|NOT
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// a&!b -> (a& (!b))
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"a&!b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|NOT
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// !((a|b)&!(c&!b)) -> (!((a | b)& (!(c& (!b)))))
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"!((a | b)& !(c& !b))"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|NOT
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNodeLeft
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nlNodeRight
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|OR
argument_list|,
name|nlNodeLeft
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNodeLeft
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNodeLeft
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|NOT
argument_list|,
name|nlNodeRight
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nlNodeRight
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nlNodeRight
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNodeRight
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNodeRight
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNodeRight
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNodeRight
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNodeRight
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNodeRight
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNodeRight
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|NOT
argument_list|,
name|nlNodeRight
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nlNodeRight
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNodeRight
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNegativeCases
parameter_list|()
throws|throws
name|Exception
block|{
name|executeNegativeCase
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|executeNegativeCase
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|executeNegativeCase
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|executeNegativeCase
argument_list|(
literal|"(a"
argument_list|)
expr_stmt|;
name|executeNegativeCase
argument_list|(
literal|"a&"
argument_list|)
expr_stmt|;
name|executeNegativeCase
argument_list|(
literal|"a&|b"
argument_list|)
expr_stmt|;
name|executeNegativeCase
argument_list|(
literal|"!"
argument_list|)
expr_stmt|;
name|executeNegativeCase
argument_list|(
literal|"a!"
argument_list|)
expr_stmt|;
name|executeNegativeCase
argument_list|(
literal|"a!&"
argument_list|)
expr_stmt|;
name|executeNegativeCase
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|executeNegativeCase
argument_list|(
literal|"|"
argument_list|)
expr_stmt|;
name|executeNegativeCase
argument_list|(
literal|"!(a|(b&c)&!b"
argument_list|)
expr_stmt|;
name|executeNegativeCase
argument_list|(
literal|"!!a"
argument_list|)
expr_stmt|;
name|executeNegativeCase
argument_list|(
literal|"( a& b ) | ( c& d e)"
argument_list|)
expr_stmt|;
name|executeNegativeCase
argument_list|(
literal|"! a"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonAsciiCases
parameter_list|()
throws|throws
name|Exception
block|{
name|ExpressionNode
name|node
init|=
name|parser
operator|.
name|parse
argument_list|(
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"\u0027"
argument_list|)
operator|+
literal|"&"
operator|+
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"\u002b"
argument_list|)
operator|+
literal|"|"
operator|+
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"\u002d"
argument_list|)
operator|+
literal|"&"
operator|+
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"\u003f"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|NonLeafExpressionNode
name|nlNode
init|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
decl_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u003f"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|OR
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u002d"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u002b"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u0027"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"\u0027"
argument_list|)
operator|+
literal|"&"
operator|+
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"\u002b"
argument_list|)
operator|+
literal|"|"
operator|+
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"\u002d"
argument_list|)
operator|+
literal|"&"
operator|+
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"\u003f"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u003f"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|OR
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u002d"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u002b"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u0027"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCasesSeperatedByDoubleQuotes
parameter_list|()
throws|throws
name|Exception
block|{
name|ExpressionNode
name|node
init|=
literal|null
decl_stmt|;
try|try
block|{
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
literal|"\u0027&\"|\u002b&\u003f"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Excpetion must be thrown as there are special characters without quotes"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{     }
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"\u0027"
argument_list|)
operator|+
literal|"&"
operator|+
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"\""
argument_list|)
operator|+
literal|"|"
operator|+
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"\u002b"
operator|+
literal|"&"
operator|+
literal|"\u003f"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|NonLeafExpressionNode
name|nlNode
init|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
decl_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|OR
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u002b"
operator|+
literal|"&"
operator|+
literal|"\u003f"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\""
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u0027"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"\u0027&\\"
argument_list|)
operator|+
literal|"|"
operator|+
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"\u002b"
operator|+
literal|"&"
operator|+
literal|"\\"
argument_list|)
operator|+
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"$$\""
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Excpetion must be thrown as there is not operator"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{     }
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"\u0027"
operator|+
literal|"&"
operator|+
literal|"\\"
argument_list|)
operator|+
literal|"|"
operator|+
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"\u003f"
operator|+
literal|"&"
operator|+
literal|"\\"
argument_list|)
operator|+
literal|"&"
operator|+
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"$$\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|node
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|AND
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"$$\""
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|NonLeafExpressionNode
argument_list|)
expr_stmt|;
name|nlNode
operator|=
operator|(
name|NonLeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Operator
operator|.
name|OR
argument_list|,
name|nlNode
operator|.
name|getOperator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u0027"
operator|+
literal|"&"
operator|+
literal|"\\"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u003f"
operator|+
literal|"&"
operator|+
literal|"\\"
argument_list|,
operator|(
operator|(
name|LeafExpressionNode
operator|)
name|nlNode
operator|.
name|getChildExps
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|node
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"\u002b&\\"
argument_list|)
operator|+
literal|"|"
operator|+
name|CellVisibility
operator|.
name|quote
argument_list|(
literal|"\u0027&\\"
argument_list|)
operator|+
literal|"&"
operator|+
literal|"\"$$"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Excpetion must be thrown as there is no end quote"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{     }
block|}
specifier|private
name|void
name|executeNegativeCase
parameter_list|(
name|String
name|exp
parameter_list|)
block|{
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ParseException for expression "
operator|+
name|exp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

