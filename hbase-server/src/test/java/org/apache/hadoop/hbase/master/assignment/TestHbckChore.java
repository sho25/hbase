begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HbckChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHbckChore
extends|extends
name|TestAssignmentManagerBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHbckChore
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestHbckChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HbckChore
name|hbckChore
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|hbckChore
operator|=
operator|new
name|HbckChore
argument_list|(
name|master
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testForMeta
parameter_list|()
block|{
name|byte
index|[]
name|metaRegionNameAsBytes
init|=
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|String
name|metaRegionName
init|=
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionNameAsString
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|serverNames
init|=
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServersList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NSERVERS
argument_list|,
name|serverNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hbckChore
operator|.
name|choreForTesting
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
argument_list|>
name|inconsistentRegions
init|=
name|hbckChore
operator|.
name|getInconsistentRegions
argument_list|()
decl_stmt|;
comment|// Test for case1: Master thought this region opened, but no regionserver reported it.
name|assertTrue
argument_list|(
name|inconsistentRegions
operator|.
name|containsKey
argument_list|(
name|metaRegionName
argument_list|)
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|pair
init|=
name|inconsistentRegions
operator|.
name|get
argument_list|(
name|metaRegionName
argument_list|)
decl_stmt|;
name|ServerName
name|locationInMeta
init|=
name|pair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|reportedRegionServers
init|=
name|pair
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|serverNames
operator|.
name|contains
argument_list|(
name|locationInMeta
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reportedRegionServers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reported right region location. Then not in problematic regions.
name|am
operator|.
name|reportOnlineRegions
argument_list|(
name|locationInMeta
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|metaRegionNameAsBytes
argument_list|)
argument_list|)
expr_stmt|;
name|hbckChore
operator|.
name|choreForTesting
argument_list|()
expr_stmt|;
name|inconsistentRegions
operator|=
name|hbckChore
operator|.
name|getInconsistentRegions
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|inconsistentRegions
operator|.
name|containsKey
argument_list|(
name|metaRegionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testForUserTable
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testForUserTable"
argument_list|)
decl_stmt|;
name|RegionInfo
name|hri
init|=
name|createRegionInfo
argument_list|(
name|tableName
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|regionName
init|=
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
decl_stmt|;
name|rsDispatcher
operator|.
name|setMockRsExecutor
argument_list|(
operator|new
name|GoodRsExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|byte
index|[]
argument_list|>
name|future
init|=
name|submitProcedure
argument_list|(
name|createAssignProcedure
argument_list|(
name|hri
argument_list|)
argument_list|)
decl_stmt|;
name|waitOnFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|serverNames
init|=
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServersList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NSERVERS
argument_list|,
name|serverNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test for case1: Master thought this region opened, but no regionserver reported it.
name|hbckChore
operator|.
name|choreForTesting
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
argument_list|>
name|inconsistentRegions
init|=
name|hbckChore
operator|.
name|getInconsistentRegions
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|inconsistentRegions
operator|.
name|containsKey
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|pair
init|=
name|inconsistentRegions
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|ServerName
name|locationInMeta
init|=
name|pair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|reportedRegionServers
init|=
name|pair
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|serverNames
operator|.
name|contains
argument_list|(
name|locationInMeta
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reportedRegionServers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test for case2: Master thought this region opened on Server1, but regionserver reported
comment|// Server2
specifier|final
name|ServerName
name|tempLocationInMeta
init|=
name|locationInMeta
decl_stmt|;
specifier|final
name|ServerName
name|anotherServer
init|=
name|serverNames
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|s
lambda|->
operator|!
name|s
operator|.
name|equals
argument_list|(
name|tempLocationInMeta
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|am
operator|.
name|reportOnlineRegions
argument_list|(
name|anotherServer
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hbckChore
operator|.
name|choreForTesting
argument_list|()
expr_stmt|;
name|inconsistentRegions
operator|=
name|hbckChore
operator|.
name|getInconsistentRegions
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|inconsistentRegions
operator|.
name|containsKey
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|pair
operator|=
name|inconsistentRegions
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|locationInMeta
operator|=
name|pair
operator|.
name|getFirst
argument_list|()
expr_stmt|;
name|reportedRegionServers
operator|=
name|pair
operator|.
name|getSecond
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reportedRegionServers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reportedRegionServers
operator|.
name|contains
argument_list|(
name|locationInMeta
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reportedRegionServers
operator|.
name|contains
argument_list|(
name|anotherServer
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test for case3: More than one regionservers reported opened this region.
name|am
operator|.
name|reportOnlineRegions
argument_list|(
name|locationInMeta
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hbckChore
operator|.
name|choreForTesting
argument_list|()
expr_stmt|;
name|inconsistentRegions
operator|=
name|hbckChore
operator|.
name|getInconsistentRegions
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|inconsistentRegions
operator|.
name|containsKey
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|pair
operator|=
name|inconsistentRegions
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|locationInMeta
operator|=
name|pair
operator|.
name|getFirst
argument_list|()
expr_stmt|;
name|reportedRegionServers
operator|=
name|pair
operator|.
name|getSecond
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|reportedRegionServers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reportedRegionServers
operator|.
name|contains
argument_list|(
name|locationInMeta
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reportedRegionServers
operator|.
name|contains
argument_list|(
name|anotherServer
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reported right region location, then not in inconsistent regions.
name|am
operator|.
name|reportOnlineRegions
argument_list|(
name|anotherServer
argument_list|,
name|Collections
operator|.
name|EMPTY_SET
argument_list|)
expr_stmt|;
name|hbckChore
operator|.
name|choreForTesting
argument_list|()
expr_stmt|;
name|inconsistentRegions
operator|=
name|hbckChore
operator|.
name|getInconsistentRegions
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|inconsistentRegions
operator|.
name|containsKey
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testForDisabledTable
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testForDisabledTable"
argument_list|)
decl_stmt|;
name|RegionInfo
name|hri
init|=
name|createRegionInfo
argument_list|(
name|tableName
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|regionName
init|=
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
decl_stmt|;
name|rsDispatcher
operator|.
name|setMockRsExecutor
argument_list|(
operator|new
name|GoodRsExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|byte
index|[]
argument_list|>
name|future
init|=
name|submitProcedure
argument_list|(
name|createAssignProcedure
argument_list|(
name|hri
argument_list|)
argument_list|)
decl_stmt|;
name|waitOnFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|serverNames
init|=
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServersList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NSERVERS
argument_list|,
name|serverNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hbckChore
operator|.
name|choreForTesting
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
argument_list|>
name|inconsistentRegions
init|=
name|hbckChore
operator|.
name|getInconsistentRegions
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|inconsistentRegions
operator|.
name|containsKey
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|pair
init|=
name|inconsistentRegions
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|ServerName
name|locationInMeta
init|=
name|pair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|reportedRegionServers
init|=
name|pair
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|serverNames
operator|.
name|contains
argument_list|(
name|locationInMeta
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reportedRegionServers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set table state to disabled, then not in inconsistent regions.
name|TableStateManager
name|tableStateManager
init|=
name|master
operator|.
name|getTableStateManager
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|tableStateManager
operator|.
name|isTableState
argument_list|(
name|tableName
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hbckChore
operator|.
name|choreForTesting
argument_list|()
expr_stmt|;
name|inconsistentRegions
operator|=
name|hbckChore
operator|.
name|getInconsistentRegions
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|inconsistentRegions
operator|.
name|containsKey
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testForSplitParent
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testForSplitParent"
argument_list|)
decl_stmt|;
name|RegionInfo
name|hri
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|true
argument_list|)
operator|.
name|setOffline
argument_list|(
literal|true
argument_list|)
operator|.
name|setRegionId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|regionName
init|=
name|hri
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|rsDispatcher
operator|.
name|setMockRsExecutor
argument_list|(
operator|new
name|GoodRsExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|byte
index|[]
argument_list|>
name|future
init|=
name|submitProcedure
argument_list|(
name|createAssignProcedure
argument_list|(
name|hri
argument_list|)
argument_list|)
decl_stmt|;
name|waitOnFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|serverNames
init|=
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServersList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NSERVERS
argument_list|,
name|serverNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hbckChore
operator|.
name|choreForTesting
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
argument_list|>
name|inconsistentRegions
init|=
name|hbckChore
operator|.
name|getInconsistentRegions
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|inconsistentRegions
operator|.
name|containsKey
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrphanRegionsOnFS
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testOrphanRegionsOnFS"
argument_list|)
decl_stmt|;
name|RegionInfo
name|regionInfo
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|hbckChore
operator|.
name|choreForTesting
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbckChore
operator|.
name|getOrphanRegionsOnFS
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HRegion
operator|.
name|createRegionDir
argument_list|(
name|conf
argument_list|,
name|regionInfo
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|hbckChore
operator|.
name|choreForTesting
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hbckChore
operator|.
name|getOrphanRegionsOnFS
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hbckChore
operator|.
name|getOrphanRegionsOnFS
argument_list|()
operator|.
name|containsKey
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|deleteRegionDir
argument_list|(
name|conf
argument_list|,
operator|new
name|HRegionInfo
argument_list|(
name|regionInfo
argument_list|)
argument_list|)
expr_stmt|;
name|hbckChore
operator|.
name|choreForTesting
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbckChore
operator|.
name|getOrphanRegionsOnFS
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChoreDisable
parameter_list|()
block|{
comment|// The way to disable to chore is to set hbase.master.hbck.chore.interval<= 0
comment|// When the interval is> 0, the chore should run.
name|long
name|lastRunTime
init|=
name|hbckChore
operator|.
name|getCheckingEndTimestamp
argument_list|()
decl_stmt|;
name|hbckChore
operator|.
name|choreForTesting
argument_list|()
expr_stmt|;
name|boolean
name|ran
init|=
name|lastRunTime
operator|!=
name|hbckChore
operator|.
name|getCheckingEndTimestamp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ran
argument_list|)
expr_stmt|;
comment|// When the interval<= 0, the chore shouldn't run
name|master
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.master.hbck.chore.interval"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|HbckChore
name|hbckChoreWithChangedConf
init|=
operator|new
name|HbckChore
argument_list|(
name|master
argument_list|)
decl_stmt|;
name|lastRunTime
operator|=
name|hbckChoreWithChangedConf
operator|.
name|getCheckingEndTimestamp
argument_list|()
expr_stmt|;
name|hbckChoreWithChangedConf
operator|.
name|choreForTesting
argument_list|()
expr_stmt|;
name|ran
operator|=
name|lastRunTime
operator|!=
name|hbckChoreWithChangedConf
operator|.
name|getCheckingEndTimestamp
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|ran
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

