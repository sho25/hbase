begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|token
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SecurityTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZNodePaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test the refreshKeys in ZKSecretWatcher  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SecurityTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestZKSecretWatcherRefreshKeys
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestZKSecretWatcherRefreshKeys
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
specifier|private
specifier|static
class|class
name|MockAbortable
implements|implements
name|Abortable
block|{
specifier|private
name|boolean
name|abort
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|reason
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Aborting: "
operator|+
name|reason
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|abort
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|abort
return|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|ZKWatcher
name|newZK
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|name
parameter_list|,
name|Abortable
name|abort
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|copy
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ZKWatcher
name|zk
init|=
operator|new
name|ZKWatcher
argument_list|(
name|copy
argument_list|,
name|name
argument_list|,
name|abort
argument_list|)
decl_stmt|;
return|return
name|zk
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRefreshKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ZKWatcher
name|zk
init|=
name|newZK
argument_list|(
name|conf
argument_list|,
literal|"127.0.0.1"
argument_list|,
operator|new
name|MockAbortable
argument_list|()
argument_list|)
decl_stmt|;
name|AuthenticationTokenSecretManager
name|keyManager
init|=
operator|new
name|AuthenticationTokenSecretManager
argument_list|(
name|conf
argument_list|,
name|zk
argument_list|,
literal|"127.0.0.1"
argument_list|,
literal|60
operator|*
literal|60
operator|*
literal|1000
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|ZKSecretWatcher
name|watcher
init|=
operator|new
name|ZKSecretWatcher
argument_list|(
name|conf
argument_list|,
name|zk
argument_list|,
name|keyManager
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|deleteChildrenRecursively
argument_list|(
name|zk
argument_list|,
name|watcher
operator|.
name|getKeysParentZNode
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
index|[]
name|keys
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|}
decl_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|keys
control|)
block|{
name|AuthenticationKey
name|ak
init|=
operator|new
name|AuthenticationKey
argument_list|(
name|key
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|600
operator|*
literal|1000
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zk
argument_list|,
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|watcher
operator|.
name|getKeysParentZNode
argument_list|()
argument_list|,
name|key
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|Writables
operator|.
name|getBytes
argument_list|(
name|ak
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNull
argument_list|(
name|keyManager
operator|.
name|getCurrentKey
argument_list|()
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|refreshKeys
argument_list|()
expr_stmt|;
for|for
control|(
name|Integer
name|key
range|:
name|keys
control|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|keyManager
operator|.
name|getKey
argument_list|(
name|key
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

