begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaHelperForTests
operator|.
name|SpaceQuotaSnapshotPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnsafeByteOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * Test class to exercise the inclusion of snapshots in space quotas  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSpaceQuotasWithSnapshots
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSpaceQuotasWithSnapshots
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|// Global for all tests in the class
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|COUNTER
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|FUDGE_FOR_TABLE_SIZE
init|=
literal|500L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_KILOBYTE
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|SpaceQuotaHelperForTests
name|helper
decl_stmt|;
specifier|private
name|Connection
name|conn
decl_stmt|;
specifier|private
name|Admin
name|admin
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|SpaceQuotaHelperForTests
operator|.
name|updateConfigForQuotas
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|removeAllQuotas
parameter_list|()
throws|throws
name|Exception
block|{
name|helper
operator|=
operator|new
name|SpaceQuotaHelperForTests
argument_list|(
name|TEST_UTIL
argument_list|,
name|testName
argument_list|,
name|COUNTER
argument_list|)
expr_stmt|;
name|conn
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTablesInheritSnapshotSize
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing data"
argument_list|)
expr_stmt|;
comment|// Set a quota
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|SpaceQuotaHelperForTests
operator|.
name|ONE_GIGABYTE
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// Write some data
specifier|final
name|long
name|initialSize
init|=
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
name|initialSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting until table size reflects written data"
argument_list|)
expr_stmt|;
comment|// Wait until that data is seen by the master
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|500
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>=
name|initialSize
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Make sure we see the final quota usage size
name|waitForStableQuotaSize
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// The actual size on disk after we wrote our data the first time
specifier|final
name|long
name|actualInitialSize
init|=
name|QuotaTableUtil
operator|.
name|getCurrentSnapshot
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
operator|.
name|getUsage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initial table size was "
operator|+
name|actualInitialSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Snapshot the table"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|snapshot1
init|=
name|tn
operator|.
name|toString
argument_list|()
operator|+
literal|"_snapshot1"
decl_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
name|snapshot1
argument_list|,
name|tn
argument_list|)
expr_stmt|;
comment|// Write the same data again, then flush+compact. This should make sure that
comment|// the snapshot is referencing files that the table no longer references.
name|LOG
operator|.
name|info
argument_list|(
literal|"Write more data"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
name|initialSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Flush the table"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Synchronously compacting the table"
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|compact
argument_list|(
name|tn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|long
name|upperBound
init|=
name|initialSize
operator|+
name|FUDGE_FOR_TABLE_SIZE
decl_stmt|;
specifier|final
name|long
name|lowerBound
init|=
name|initialSize
operator|-
name|FUDGE_FOR_TABLE_SIZE
decl_stmt|;
comment|// Store the actual size after writing more data and then compacting it down to one file
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for the region reports to reflect the correct size, between ("
operator|+
name|lowerBound
operator|+
literal|", "
operator|+
name|upperBound
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|500
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|size
init|=
name|getRegionSizeReportForTable
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
decl_stmt|;
return|return
name|size
argument_list|<
name|upperBound
operator|&&
name|size
argument_list|>
name|lowerBound
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Make sure we see the "final" new size for the table, not some intermediate
name|waitForStableRegionSizeReport
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
expr_stmt|;
specifier|final
name|long
name|finalSize
init|=
name|getRegionSizeReportForTable
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Did not expect to see a null size"
argument_list|,
name|finalSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Last seen size: "
operator|+
name|finalSize
argument_list|)
expr_stmt|;
comment|// Make sure the QuotaObserverChore has time to reflect the new region size reports
comment|// (we saw above). The usage of the table should *not* decrease when we check it below,
comment|// though, because the snapshot on our table will cause the table to "retain" the size.
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|20
operator|*
literal|1000
argument_list|,
literal|500
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>=
name|finalSize
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The final usage should be the sum of the initial size (referenced by the snapshot) and the
comment|// new size we just wrote above.
name|long
name|expectedFinalSize
init|=
name|actualInitialSize
operator|+
name|finalSize
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expecting table usage to be "
operator|+
name|actualInitialSize
operator|+
literal|" + "
operator|+
name|finalSize
operator|+
literal|" = "
operator|+
name|expectedFinalSize
argument_list|)
expr_stmt|;
comment|// The size of the table (WRT quotas) should now be approximately double what it was previously
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|1000
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking for "
operator|+
name|expectedFinalSize
operator|+
literal|" == "
operator|+
name|snapshot
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|expectedFinalSize
operator|==
name|snapshot
operator|.
name|getUsage
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|snapshotSizes
init|=
name|QuotaTableUtil
operator|.
name|getObservedSnapshotSizes
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|Long
name|size
init|=
name|snapshotSizes
operator|.
name|get
argument_list|(
name|snapshot1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Did not observe the size of the snapshot"
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The recorded size of the HBase snapshot was not the size we expected"
argument_list|,
name|actualInitialSize
argument_list|,
name|size
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespacesInheritSnapshotSize
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ns
init|=
name|helper
operator|.
name|createNamespace
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
name|ns
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing data"
argument_list|)
expr_stmt|;
comment|// Set a quota
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitNamespaceSpace
argument_list|(
name|ns
argument_list|,
name|SpaceQuotaHelperForTests
operator|.
name|ONE_GIGABYTE
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// Write some data and flush it to disk
specifier|final
name|long
name|initialSize
init|=
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
name|initialSize
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting until namespace size reflects written data"
argument_list|)
expr_stmt|;
comment|// Wait until that data is seen by the master
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|500
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|ns
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>=
name|initialSize
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Make sure we see the "final" new size for the table, not some intermediate
name|waitForStableQuotaSize
argument_list|(
name|conn
argument_list|,
literal|null
argument_list|,
name|ns
argument_list|)
expr_stmt|;
comment|// The actual size on disk after we wrote our data the first time
specifier|final
name|long
name|actualInitialSize
init|=
name|QuotaTableUtil
operator|.
name|getCurrentSnapshot
argument_list|(
name|conn
argument_list|,
name|ns
argument_list|)
operator|.
name|getUsage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initial table size was "
operator|+
name|actualInitialSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Snapshot the table"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|snapshot1
init|=
name|tn
operator|.
name|getQualifierAsString
argument_list|()
operator|+
literal|"_snapshot1"
decl_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
name|snapshot1
argument_list|,
name|tn
argument_list|)
expr_stmt|;
comment|// Write the same data again, then flush+compact. This should make sure that
comment|// the snapshot is referencing files that the table no longer references.
name|LOG
operator|.
name|info
argument_list|(
literal|"Write more data"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
name|initialSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Flush the table"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Synchronously compacting the table"
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|compact
argument_list|(
name|tn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|long
name|upperBound
init|=
name|initialSize
operator|+
name|FUDGE_FOR_TABLE_SIZE
decl_stmt|;
specifier|final
name|long
name|lowerBound
init|=
name|initialSize
operator|-
name|FUDGE_FOR_TABLE_SIZE
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for the region reports to reflect the correct size, between ("
operator|+
name|lowerBound
operator|+
literal|", "
operator|+
name|upperBound
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|500
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|Long
argument_list|>
name|sizes
init|=
name|QuotaTableUtil
operator|.
name|getMasterReportedTableSizes
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Master observed table sizes from region size reports: "
operator|+
name|sizes
argument_list|)
expr_stmt|;
name|Long
name|size
init|=
name|sizes
operator|.
name|get
argument_list|(
name|tn
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|size
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|size
argument_list|<
name|upperBound
operator|&&
name|size
argument_list|>
name|lowerBound
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Make sure we see the "final" new size for the table, not some intermediate
name|waitForStableRegionSizeReport
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
expr_stmt|;
specifier|final
name|long
name|finalSize
init|=
name|getRegionSizeReportForTable
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Did not expect to see a null size"
argument_list|,
name|finalSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Final observed size of table: "
operator|+
name|finalSize
argument_list|)
expr_stmt|;
comment|// Make sure the QuotaObserverChore has time to reflect the new region size reports
comment|// (we saw above). The usage of the table should *not* decrease when we check it below,
comment|// though, because the snapshot on our table will cause the table to "retain" the size.
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|20
operator|*
literal|1000
argument_list|,
literal|500
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|ns
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>=
name|finalSize
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The final usage should be the sum of the initial size (referenced by the snapshot) and the
comment|// new size we just wrote above.
name|long
name|expectedFinalSize
init|=
name|actualInitialSize
operator|+
name|finalSize
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expecting namespace usage to be "
operator|+
name|actualInitialSize
operator|+
literal|" + "
operator|+
name|finalSize
operator|+
literal|" = "
operator|+
name|expectedFinalSize
argument_list|)
expr_stmt|;
comment|// The size of the table (WRT quotas) should now be approximately double what it was previously
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|1000
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|ns
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking for "
operator|+
name|expectedFinalSize
operator|+
literal|" == "
operator|+
name|snapshot
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|expectedFinalSize
operator|==
name|snapshot
operator|.
name|getUsage
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|snapshotSizes
init|=
name|QuotaTableUtil
operator|.
name|getObservedSnapshotSizes
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|Long
name|size
init|=
name|snapshotSizes
operator|.
name|get
argument_list|(
name|snapshot1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Did not observe the size of the snapshot"
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The recorded size of the HBase snapshot was not the size we expected"
argument_list|,
name|actualInitialSize
argument_list|,
name|size
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTablesWithSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|conn
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
specifier|final
name|SpaceViolationPolicy
name|policy
init|=
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// 3MB limit on the table
specifier|final
name|long
name|tableLimit
init|=
literal|3L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|tableLimit
argument_list|,
name|policy
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing first data set"
argument_list|)
expr_stmt|;
comment|// Write more data than should be allowed and flush it to disk
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
literal|1L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
argument_list|,
literal|"q1"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating snapshot"
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|snapshot
argument_list|(
name|tn
operator|.
name|toString
argument_list|()
operator|+
literal|"snap1"
argument_list|,
name|tn
argument_list|,
name|SnapshotType
operator|.
name|FLUSH
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing second data set"
argument_list|)
expr_stmt|;
comment|// Write some more data
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
literal|1L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
argument_list|,
literal|"q2"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Flushing and major compacting table"
argument_list|)
expr_stmt|;
comment|// Compact the table to force the snapshot to own all of its files
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|compact
argument_list|(
name|tn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking for quota violation"
argument_list|)
expr_stmt|;
comment|// Wait to observe the quota moving into violation
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|60_000
argument_list|,
literal|1_000
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|s
init|=
name|QuotaTableUtil
operator|.
name|makeQuotaSnapshotScanForTable
argument_list|(
name|tn
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
init|)
block|{
name|ResultScanner
name|rs
init|=
name|t
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
name|r
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|rs
argument_list|)
decl_stmt|;
name|CellScanner
name|cs
init|=
name|r
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|c
init|=
name|cs
operator|.
name|current
argument_list|()
decl_stmt|;
name|SpaceQuotaSnapshot
name|snapshot
init|=
name|SpaceQuotaSnapshot
operator|.
name|toSpaceQuotaSnapshot
argument_list|(
name|QuotaProtos
operator|.
name|SpaceQuotaSnapshot
operator|.
name|parseFrom
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|c
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|c
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|+
literal|"/"
operator|+
name|snapshot
operator|.
name|getLimit
argument_list|()
operator|+
literal|" "
operator|+
name|snapshot
operator|.
name|getQuotaStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// We expect to see the table move to violation
return|return
name|snapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|isInViolation
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|rs
condition|)
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRematerializedTablesDoNoInheritSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TableName
name|tn2
init|=
name|helper
operator|.
name|getNextTableName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing data"
argument_list|)
expr_stmt|;
comment|// Set a quota on both tables
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|SpaceQuotaHelperForTests
operator|.
name|ONE_GIGABYTE
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|QuotaSettings
name|settings2
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn2
argument_list|,
name|SpaceQuotaHelperForTests
operator|.
name|ONE_GIGABYTE
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings2
argument_list|)
expr_stmt|;
comment|// Write some data
specifier|final
name|long
name|initialSize
init|=
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
name|initialSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting until table size reflects written data"
argument_list|)
expr_stmt|;
comment|// Wait until that data is seen by the master
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|500
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>=
name|initialSize
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Make sure we see the final quota usage size
name|waitForStableQuotaSize
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// The actual size on disk after we wrote our data the first time
specifier|final
name|long
name|actualInitialSize
init|=
name|QuotaTableUtil
operator|.
name|getCurrentSnapshot
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
operator|.
name|getUsage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initial table size was "
operator|+
name|actualInitialSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Snapshot the table"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|snapshot1
init|=
name|tn
operator|.
name|toString
argument_list|()
operator|+
literal|"_snapshot1"
decl_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
name|snapshot1
argument_list|,
name|tn
argument_list|)
expr_stmt|;
name|admin
operator|.
name|cloneSnapshot
argument_list|(
name|snapshot1
argument_list|,
name|tn2
argument_list|)
expr_stmt|;
comment|// Write some more data to the first table
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
name|initialSize
argument_list|,
literal|"q2"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tn
argument_list|)
expr_stmt|;
comment|// Watch the usage of the first table with some more data to know when the new
comment|// region size reports were sent to the master
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30_000
argument_list|,
literal|1_000
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>=
name|actualInitialSize
operator|*
literal|2
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// We know that reports were sent by our RS, verify that they take up zero size.
name|SpaceQuotaSnapshot
name|snapshot
init|=
name|QuotaTableUtil
operator|.
name|getCurrentSnapshot
argument_list|(
name|conn
argument_list|,
name|tn2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|snapshot
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compact the cloned table to force it to own its own files.
name|TEST_UTIL
operator|.
name|compact
argument_list|(
name|tn2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// After the table is compacted, it should have its own files and be the same size as originally
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30_000
argument_list|,
literal|1_000
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn2
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|==
name|actualInitialSize
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|void
name|waitForStableQuotaSize
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|TableName
name|tn
parameter_list|,
name|String
name|ns
parameter_list|)
throws|throws
name|Exception
block|{
comment|// For some stability in the value before proceeding
comment|// Helps make sure that we got the actual last value, not some inbetween
name|AtomicLong
name|lastValue
init|=
operator|new
name|AtomicLong
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|15_000
argument_list|,
literal|500
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|,
name|ns
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Last observed size="
operator|+
name|lastValue
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|==
name|lastValue
operator|.
name|get
argument_list|()
condition|)
block|{
name|int
name|numMatches
init|=
name|counter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|numMatches
operator|>=
literal|5
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Not yet..
return|return
literal|false
return|;
block|}
name|counter
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastValue
operator|.
name|set
argument_list|(
name|snapshot
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|long
name|getRegionSizeReportForTable
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|TableName
name|tn
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|Long
argument_list|>
name|sizes
init|=
name|QuotaTableUtil
operator|.
name|getMasterReportedTableSizes
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|Long
name|value
init|=
name|sizes
operator|.
name|get
argument_list|(
name|tn
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|value
condition|)
block|{
return|return
literal|0L
return|;
block|}
return|return
name|value
operator|.
name|longValue
argument_list|()
return|;
block|}
name|void
name|waitForStableRegionSizeReport
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|TableName
name|tn
parameter_list|)
throws|throws
name|Exception
block|{
comment|// For some stability in the value before proceeding
comment|// Helps make sure that we got the actual last value, not some inbetween
name|AtomicLong
name|lastValue
init|=
operator|new
name|AtomicLong
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|15_000
argument_list|,
literal|500
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Last observed size="
operator|+
name|lastValue
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|actual
init|=
name|getRegionSizeReportForTable
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
decl_stmt|;
if|if
condition|(
name|actual
operator|==
name|lastValue
operator|.
name|get
argument_list|()
condition|)
block|{
name|int
name|numMatches
init|=
name|counter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|numMatches
operator|>=
literal|5
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Not yet..
return|return
literal|false
return|;
block|}
name|counter
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastValue
operator|.
name|set
argument_list|(
name|actual
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

