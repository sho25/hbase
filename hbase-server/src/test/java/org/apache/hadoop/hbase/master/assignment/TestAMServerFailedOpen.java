begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RetriesExhaustedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAMServerFailedOpen
extends|extends
name|TestAssignmentManagerBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAMServerFailedOpen
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAMServerFailedOpen
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|int
name|getAssignMaxAttempts
parameter_list|()
block|{
comment|// do not need to retry so many times as we will finally fail...
return|return
literal|10
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServerNotYetRunning
parameter_list|()
throws|throws
name|Exception
block|{
name|testRetriesExhaustedFailure
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ServerNotYetRunningRsExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testRetriesExhaustedFailure
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|MockRSExecutor
name|executor
parameter_list|)
throws|throws
name|Exception
block|{
name|RegionInfo
name|hri
init|=
name|createRegionInfo
argument_list|(
name|tableName
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// collect AM metrics before test
name|collectAssignmentManagerMetrics
argument_list|()
expr_stmt|;
comment|// Test Assign operation failure
name|rsDispatcher
operator|.
name|setMockRsExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
try|try
block|{
name|waitOnFuture
argument_list|(
name|submitProcedure
argument_list|(
name|createAssignProcedure
argument_list|(
name|hri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"unexpected assign completion"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
comment|// expected exception
name|LOG
operator|.
name|info
argument_list|(
literal|"expected exception from assign operation: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Assign the region (without problems)
name|rsDispatcher
operator|.
name|setMockRsExecutor
argument_list|(
operator|new
name|GoodRsExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|waitOnFuture
argument_list|(
name|submitProcedure
argument_list|(
name|createAssignProcedure
argument_list|(
name|hri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: Currently unassign just keeps trying until it sees a server crash.
comment|// There is no count on unassign.
comment|/*      * // Test Unassign operation failure rsDispatcher.setMockRsExecutor(executor);      * waitOnFuture(submitProcedure(createUnassignProcedure(hri)));      * assertEquals(assignSubmittedCount + 2, assignProcMetrics.getSubmittedCounter().getCount());      * assertEquals(assignFailedCount + 1, assignProcMetrics.getFailedCounter().getCount());      * assertEquals(unassignSubmittedCount + 1,      * unassignProcMetrics.getSubmittedCounter().getCount()); // TODO: We supposed to have 1 failed      * assign, 1 successful assign and a failed unassign // operation. But ProcV2 framework marks      * aborted unassign operation as success. Fix it! assertEquals(unassignFailedCount,      * unassignProcMetrics.getFailedCounter().getCount());      */
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIOExceptionOnAssignment
parameter_list|()
throws|throws
name|Exception
block|{
comment|// collect AM metrics before test
name|collectAssignmentManagerMetrics
argument_list|()
expr_stmt|;
name|testFailedOpen
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testExceptionOnAssignment"
argument_list|)
argument_list|,
operator|new
name|FaultyRsExecutor
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"test fault"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assignSubmittedCount
operator|+
literal|1
argument_list|,
name|assignProcMetrics
operator|.
name|getSubmittedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assignFailedCount
operator|+
literal|1
argument_list|,
name|assignProcMetrics
operator|.
name|getFailedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoNotRetryExceptionOnAssignment
parameter_list|()
throws|throws
name|Exception
block|{
comment|// collect AM metrics before test
name|collectAssignmentManagerMetrics
argument_list|()
expr_stmt|;
name|testFailedOpen
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testDoNotRetryExceptionOnAssignment"
argument_list|)
argument_list|,
operator|new
name|FaultyRsExecutor
argument_list|(
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"test do not retry fault"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assignSubmittedCount
operator|+
literal|1
argument_list|,
name|assignProcMetrics
operator|.
name|getSubmittedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assignFailedCount
operator|+
literal|1
argument_list|,
name|assignProcMetrics
operator|.
name|getFailedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testFailedOpen
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|MockRSExecutor
name|executor
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|RegionInfo
name|hri
init|=
name|createRegionInfo
argument_list|(
name|tableName
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Test Assign operation failure
name|rsDispatcher
operator|.
name|setMockRsExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
try|try
block|{
name|waitOnFuture
argument_list|(
name|submitProcedure
argument_list|(
name|createAssignProcedure
argument_list|(
name|hri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"unexpected assign completion"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
comment|// expected exception
name|LOG
operator|.
name|info
argument_list|(
literal|"REGION STATE "
operator|+
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionStateNode
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"expected exception from assign operation: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
operator|.
name|isFailedOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

