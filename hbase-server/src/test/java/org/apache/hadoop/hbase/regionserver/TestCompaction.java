begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|START_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|START_KEY_BYTES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|fam1
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ChoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|DefaultCompactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|throttle
operator|.
name|CompactionThroughputControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|throttle
operator|.
name|NoLimitThroughputController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|throttle
operator|.
name|ThroughputController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_comment
comment|/**  * Test compaction framework and common functions  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestCompaction
block|{
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
name|HBaseTestingUtility
operator|.
name|createLocalHTU
argument_list|()
decl_stmt|;
specifier|protected
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|private
name|HRegion
name|r
init|=
literal|null
decl_stmt|;
specifier|private
name|HTableDescriptor
name|htd
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COLUMN_FAMILY
init|=
name|fam1
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|STARTROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|START_KEY
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COLUMN_FAMILY_TEXT
init|=
name|COLUMN_FAMILY
decl_stmt|;
specifier|private
name|int
name|compactionThreshold
decl_stmt|;
specifier|private
name|byte
index|[]
name|secondRowBytes
decl_stmt|,
name|thirdRowBytes
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MAX_FILES_TO_COMPACT
init|=
literal|10
decl_stmt|;
comment|/** constructor */
specifier|public
name|TestCompaction
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// Set cache flush size to 1MB
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_BLOCK_MULTIPLIER
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CompactionThroughputControllerFactory
operator|.
name|HBASE_THROUGHPUT_CONTROLLER_KEY
argument_list|,
name|NoLimitThroughputController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|compactionThreshold
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|secondRowBytes
operator|=
name|START_KEY_BYTES
operator|.
name|clone
argument_list|()
expr_stmt|;
comment|// Increment the least significant character so we get to next row.
name|secondRowBytes
index|[
name|START_KEY_BYTES
operator|.
name|length
operator|-
literal|1
index|]
operator|++
expr_stmt|;
name|thirdRowBytes
operator|=
name|START_KEY_BYTES
operator|.
name|clone
argument_list|()
expr_stmt|;
name|thirdRowBytes
index|[
name|START_KEY_BYTES
operator|.
name|length
operator|-
literal|1
index|]
operator|+=
literal|2
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|htd
operator|=
name|UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|r
operator|=
name|UTIL
operator|.
name|createLocalHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|WAL
name|wal
init|=
name|r
operator|.
name|getWAL
argument_list|()
decl_stmt|;
name|this
operator|.
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|wal
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify that you can stop a long-running compaction    * (used during RS shutdown)    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testInterruptCompaction
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// lower the polling interval for this test
name|int
name|origWI
init|=
name|HStore
operator|.
name|closeCheckInterval
decl_stmt|;
name|HStore
operator|.
name|closeCheckInterval
operator|=
literal|10
operator|*
literal|1000
expr_stmt|;
comment|// 10 KB
try|try
block|{
comment|// Create a couple store files w/ 15KB (over 10KB interval)
name|int
name|jmax
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
literal|15.0
operator|/
name|compactionThreshold
argument_list|)
decl_stmt|;
name|byte
index|[]
name|pad
init|=
operator|new
name|byte
index|[
literal|1000
index|]
decl_stmt|;
comment|// 1 KB chunk
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compactionThreshold
condition|;
name|i
operator|++
control|)
block|{
name|Table
name|loader
init|=
operator|new
name|RegionAsTable
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|STARTROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|jmax
condition|;
name|j
operator|++
control|)
block|{
name|p
operator|.
name|addColumn
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|j
argument_list|)
argument_list|,
name|pad
argument_list|)
expr_stmt|;
block|}
name|HBaseTestCase
operator|.
name|addContent
argument_list|(
name|loader
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|COLUMN_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|loader
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|r
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|HRegion
name|spyR
init|=
name|spy
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|r
operator|.
name|writestate
operator|.
name|writesEnabled
operator|=
literal|false
expr_stmt|;
return|return
name|invocation
operator|.
name|callRealMethod
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spyR
argument_list|)
operator|.
name|doRegionCompactionPrep
argument_list|()
expr_stmt|;
comment|// force a minor compaction, but not before requesting a stop
name|spyR
operator|.
name|compactStores
argument_list|()
expr_stmt|;
comment|// ensure that the compaction stopped, all old files are intact,
name|Store
name|s
init|=
name|r
operator|.
name|stores
operator|.
name|get
argument_list|(
name|COLUMN_FAMILY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|compactionThreshold
argument_list|,
name|s
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|getStorefilesSize
argument_list|()
operator|>
literal|15
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// and no new store files persisted past compactStores()
name|FileStatus
index|[]
name|ls
init|=
name|r
operator|.
name|getFilesystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|r
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getTempDir
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ls
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// don't mess up future tests
name|r
operator|.
name|writestate
operator|.
name|writesEnabled
operator|=
literal|true
expr_stmt|;
name|HStore
operator|.
name|closeCheckInterval
operator|=
name|origWI
expr_stmt|;
comment|// Delete all Store information once done using
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compactionThreshold
condition|;
name|i
operator|++
control|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|STARTROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|famAndQf
init|=
block|{
name|COLUMN_FAMILY
block|,
literal|null
block|}
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|r
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Multiple versions allowed for an entry, so the delete isn't enough
comment|// Lower TTL and expire to ensure that all our entries have been wiped
specifier|final
name|int
name|ttl
init|=
literal|1000
decl_stmt|;
for|for
control|(
name|Store
name|hstore
range|:
name|this
operator|.
name|r
operator|.
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
name|HStore
name|store
init|=
operator|(
name|HStore
operator|)
name|hstore
decl_stmt|;
name|ScanInfo
name|old
init|=
name|store
operator|.
name|getScanInfo
argument_list|()
decl_stmt|;
name|ScanInfo
name|si
init|=
operator|new
name|ScanInfo
argument_list|(
name|old
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|old
operator|.
name|getFamily
argument_list|()
argument_list|,
name|old
operator|.
name|getMinVersions
argument_list|()
argument_list|,
name|old
operator|.
name|getMaxVersions
argument_list|()
argument_list|,
name|ttl
argument_list|,
name|old
operator|.
name|getKeepDeletedCells
argument_list|()
argument_list|,
literal|0
argument_list|,
name|old
operator|.
name|getComparator
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|setScanInfo
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
name|r
operator|.
name|compact
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|count
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StoreFile
name|f
range|:
name|this
operator|.
name|r
operator|.
name|stores
operator|.
name|get
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|getStorefiles
argument_list|()
control|)
block|{
name|HFileScanner
name|scanner
init|=
name|f
operator|.
name|getReader
argument_list|()
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|scanner
operator|.
name|seekTo
argument_list|()
condition|)
block|{
continue|continue;
block|}
do|do
block|{
name|count
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
condition|)
do|;
block|}
return|return
name|count
return|;
block|}
specifier|private
name|void
name|createStoreFile
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|createStoreFile
argument_list|(
name|region
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|COLUMN_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createStoreFile
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|,
name|String
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|Table
name|loader
init|=
operator|new
name|RegionAsTable
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|HBaseTestCase
operator|.
name|addContent
argument_list|(
name|loader
argument_list|,
name|family
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompactionWithCorruptResult
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|nfiles
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nfiles
condition|;
name|i
operator|++
control|)
block|{
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|HStore
name|store
init|=
operator|(
name|HStore
operator|)
name|r
operator|.
name|getStore
argument_list|(
name|COLUMN_FAMILY
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|StoreFile
argument_list|>
name|storeFiles
init|=
name|store
operator|.
name|getStorefiles
argument_list|()
decl_stmt|;
name|DefaultCompactor
name|tool
init|=
operator|(
name|DefaultCompactor
operator|)
name|store
operator|.
name|storeEngine
operator|.
name|getCompactor
argument_list|()
decl_stmt|;
name|tool
operator|.
name|compactForTesting
argument_list|(
name|storeFiles
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Now lets corrupt the compacted file.
name|FileSystem
name|fs
init|=
name|store
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// default compaction policy created one and only one new compacted file
name|Path
name|dstPath
init|=
name|store
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|createTempName
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|dstPath
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|512
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
operator|(
name|long
operator|)
literal|1024
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|stream
operator|.
name|writeChars
argument_list|(
literal|"CORRUPT FILE!!!!"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|origPath
init|=
name|store
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|commitStoreFile
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|COLUMN_FAMILY
argument_list|)
argument_list|,
name|dstPath
argument_list|)
decl_stmt|;
try|try
block|{
operator|(
operator|(
name|HStore
operator|)
name|store
operator|)
operator|.
name|moveFileIntoPlace
argument_list|(
name|origPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// The complete compaction should fail and the corrupt file should remain
comment|// in the 'tmp' directory;
assert|assert
operator|(
name|fs
operator|.
name|exists
argument_list|(
name|origPath
argument_list|)
operator|)
assert|;
assert|assert
operator|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|dstPath
argument_list|)
operator|)
assert|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testCompactionWithCorruptResult Passed"
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"testCompactionWithCorruptResult failed since no exception was"
operator|+
literal|"thrown while completing a corrupt file"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a custom compaction request and be sure that we can track it through the queue, knowing    * when the compaction is completed.    */
annotation|@
name|Test
specifier|public
name|void
name|testTrackingCompactionRequest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup a compact/split thread on a mock server
name|HRegionServer
name|mockServer
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HRegionServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockServer
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
operator|.
name|getBaseConf
argument_list|()
argument_list|)
expr_stmt|;
name|CompactSplitThread
name|thread
init|=
operator|new
name|CompactSplitThread
argument_list|(
name|mockServer
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockServer
operator|.
name|getCompactSplitThread
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|thread
argument_list|)
expr_stmt|;
comment|// setup a region/store with some files
name|Store
name|store
init|=
name|r
operator|.
name|getStore
argument_list|(
name|COLUMN_FAMILY
argument_list|)
decl_stmt|;
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_FILES_TO_COMPACT
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TrackableCompactionRequest
name|request
init|=
operator|new
name|TrackableCompactionRequest
argument_list|(
name|latch
argument_list|)
decl_stmt|;
name|thread
operator|.
name|requestCompaction
argument_list|(
name|r
argument_list|,
name|store
argument_list|,
literal|"test custom comapction"
argument_list|,
name|Store
operator|.
name|PRIORITY_USER
argument_list|,
name|request
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// wait for the latch to complete.
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|thread
operator|.
name|interruptIfNecessary
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompactionFailure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup a compact/split thread on a mock server
name|HRegionServer
name|mockServer
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HRegionServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockServer
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
operator|.
name|getBaseConf
argument_list|()
argument_list|)
expr_stmt|;
name|CompactSplitThread
name|thread
init|=
operator|new
name|CompactSplitThread
argument_list|(
name|mockServer
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockServer
operator|.
name|getCompactSplitThread
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|thread
argument_list|)
expr_stmt|;
comment|// setup a region/store with some files
name|Store
name|store
init|=
name|r
operator|.
name|getStore
argument_list|(
name|COLUMN_FAMILY
argument_list|)
decl_stmt|;
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|HStore
operator|.
name|DEFAULT_BLOCKING_STOREFILE_COUNT
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|HRegion
name|mockRegion
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockRegion
operator|.
name|checkSplit
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IndexOutOfBoundsException
argument_list|()
argument_list|)
expr_stmt|;
name|MetricsRegionWrapper
name|metricsWrapper
init|=
operator|new
name|MetricsRegionWrapperImpl
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|long
name|preCompletedCount
init|=
name|metricsWrapper
operator|.
name|getNumCompactionsCompleted
argument_list|()
decl_stmt|;
name|long
name|preFailedCount
init|=
name|metricsWrapper
operator|.
name|getNumCompactionsFailed
argument_list|()
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TrackableCompactionRequest
name|request
init|=
operator|new
name|TrackableCompactionRequest
argument_list|(
name|latch
argument_list|)
decl_stmt|;
name|thread
operator|.
name|requestCompaction
argument_list|(
name|mockRegion
argument_list|,
name|store
argument_list|,
literal|"test custom comapction"
argument_list|,
name|Store
operator|.
name|PRIORITY_USER
argument_list|,
name|request
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// wait for the latch to complete.
name|latch
operator|.
name|await
argument_list|(
literal|120
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// compaction should have completed and been marked as failed due to error in split request
name|long
name|postCompletedCount
init|=
name|metricsWrapper
operator|.
name|getNumCompactionsCompleted
argument_list|()
decl_stmt|;
name|long
name|postFailedCount
init|=
name|metricsWrapper
operator|.
name|getNumCompactionsFailed
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Completed count should have increased (pre="
operator|+
name|preCompletedCount
operator|+
literal|", post="
operator|+
name|postCompletedCount
operator|+
literal|")"
argument_list|,
name|postCompletedCount
operator|>
name|preCompletedCount
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed count should have increased (pre="
operator|+
name|preFailedCount
operator|+
literal|", post="
operator|+
name|postFailedCount
operator|+
literal|")"
argument_list|,
name|postFailedCount
operator|>
name|preFailedCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-7947: Regression test to ensure adding to the correct list in the    * {@link CompactSplitThread}    * @throws Exception on failure    */
annotation|@
name|Test
specifier|public
name|void
name|testMultipleCustomCompactionRequests
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup a compact/split thread on a mock server
name|HRegionServer
name|mockServer
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HRegionServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockServer
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
operator|.
name|getBaseConf
argument_list|()
argument_list|)
expr_stmt|;
name|CompactSplitThread
name|thread
init|=
operator|new
name|CompactSplitThread
argument_list|(
name|mockServer
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockServer
operator|.
name|getCompactSplitThread
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|thread
argument_list|)
expr_stmt|;
comment|// setup a region/store with some files
name|int
name|numStores
init|=
name|r
operator|.
name|getStores
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|CompactionRequest
argument_list|,
name|Store
argument_list|>
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|CompactionRequest
argument_list|,
name|Store
argument_list|>
argument_list|>
argument_list|(
name|numStores
argument_list|)
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numStores
argument_list|)
decl_stmt|;
comment|// create some store files and setup requests for each store on which we want to do a
comment|// compaction
for|for
control|(
name|Store
name|store
range|:
name|r
operator|.
name|getStores
argument_list|()
control|)
block|{
name|createStoreFile
argument_list|(
name|r
argument_list|,
name|store
operator|.
name|getColumnFamilyName
argument_list|()
argument_list|)
expr_stmt|;
name|createStoreFile
argument_list|(
name|r
argument_list|,
name|store
operator|.
name|getColumnFamilyName
argument_list|()
argument_list|)
expr_stmt|;
name|createStoreFile
argument_list|(
name|r
argument_list|,
name|store
operator|.
name|getColumnFamilyName
argument_list|()
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|CompactionRequest
argument_list|,
name|Store
argument_list|>
argument_list|(
operator|new
name|TrackableCompactionRequest
argument_list|(
name|latch
argument_list|)
argument_list|,
name|store
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|thread
operator|.
name|requestCompaction
argument_list|(
name|r
argument_list|,
literal|"test mulitple custom comapctions"
argument_list|,
name|Store
operator|.
name|PRIORITY_USER
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|requests
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// wait for the latch to complete.
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|thread
operator|.
name|interruptIfNecessary
argument_list|()
expr_stmt|;
block|}
specifier|private
class|class
name|StoreMockMaker
extends|extends
name|StatefulStoreMockMaker
block|{
specifier|public
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
name|compacting
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
name|notCompacting
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|results
decl_stmt|;
specifier|public
name|StoreMockMaker
parameter_list|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|results
parameter_list|)
block|{
name|this
operator|.
name|results
operator|=
name|results
expr_stmt|;
block|}
specifier|public
class|class
name|TestCompactionContext
extends|extends
name|CompactionContext
block|{
specifier|private
name|List
argument_list|<
name|StoreFile
argument_list|>
name|selectedFiles
decl_stmt|;
specifier|public
name|TestCompactionContext
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|selectedFiles
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|selectedFiles
operator|=
name|selectedFiles
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|StoreFile
argument_list|>
name|preSelect
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesCompacting
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|select
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesCompacting
parameter_list|,
name|boolean
name|isUserCompaction
parameter_list|,
name|boolean
name|mayUseOffPeak
parameter_list|,
name|boolean
name|forceMajor
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|request
operator|=
operator|new
name|CompactionRequest
argument_list|(
name|selectedFiles
argument_list|)
expr_stmt|;
name|this
operator|.
name|request
operator|.
name|setPriority
argument_list|(
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|compact
parameter_list|(
name|ThroughputController
name|throughputController
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|finishCompaction
argument_list|(
name|this
operator|.
name|selectedFiles
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|CompactionContext
name|selectCompaction
parameter_list|()
block|{
name|CompactionContext
name|ctx
init|=
operator|new
name|TestCompactionContext
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|(
name|notCompacting
argument_list|)
argument_list|)
decl_stmt|;
name|compacting
operator|.
name|addAll
argument_list|(
name|notCompacting
argument_list|)
expr_stmt|;
name|notCompacting
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|ctx
operator|.
name|select
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Shouldn't happen"
argument_list|)
expr_stmt|;
block|}
return|return
name|ctx
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|cancelCompaction
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|TestCompactionContext
name|ctx
init|=
operator|(
name|TestCompactionContext
operator|)
name|object
decl_stmt|;
name|compacting
operator|.
name|removeAll
argument_list|(
name|ctx
operator|.
name|selectedFiles
argument_list|)
expr_stmt|;
name|notCompacting
operator|.
name|addAll
argument_list|(
name|ctx
operator|.
name|selectedFiles
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|finishCompaction
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|sfs
parameter_list|)
block|{
if|if
condition|(
name|sfs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
synchronized|synchronized
init|(
name|results
init|)
block|{
name|results
operator|.
name|add
argument_list|(
name|sfs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|compacting
operator|.
name|removeAll
argument_list|(
name|sfs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
literal|7
operator|-
name|compacting
operator|.
name|size
argument_list|()
operator|-
name|notCompacting
operator|.
name|size
argument_list|()
return|;
block|}
block|}
specifier|public
class|class
name|BlockingStoreMockMaker
extends|extends
name|StatefulStoreMockMaker
block|{
name|BlockingCompactionContext
name|blocked
init|=
literal|null
decl_stmt|;
specifier|public
class|class
name|BlockingCompactionContext
extends|extends
name|CompactionContext
block|{
specifier|public
specifier|volatile
name|boolean
name|isInCompact
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|unblock
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|compact
parameter_list|(
name|ThroughputController
name|throughputController
parameter_list|,
name|User
name|user
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|isInCompact
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Assume
operator|.
name|assumeNoException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|StoreFile
argument_list|>
name|preSelect
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesCompacting
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|select
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|f
parameter_list|,
name|boolean
name|i
parameter_list|,
name|boolean
name|m
parameter_list|,
name|boolean
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|request
operator|=
operator|new
name|CompactionRequest
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CompactionContext
name|selectCompaction
parameter_list|()
block|{
name|this
operator|.
name|blocked
operator|=
operator|new
name|BlockingCompactionContext
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|blocked
operator|.
name|select
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Shouldn't happen"
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|blocked
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancelCompaction
parameter_list|(
name|Object
name|object
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|MIN_VALUE
return|;
comment|// some invalid value, see createStoreMock
block|}
specifier|public
name|BlockingCompactionContext
name|waitForBlocking
parameter_list|()
block|{
while|while
condition|(
name|this
operator|.
name|blocked
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|blocked
operator|.
name|isInCompact
condition|)
block|{
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|BlockingCompactionContext
name|ctx
init|=
name|this
operator|.
name|blocked
decl_stmt|;
name|this
operator|.
name|blocked
operator|=
literal|null
expr_stmt|;
return|return
name|ctx
return|;
block|}
annotation|@
name|Override
specifier|public
name|Store
name|createStoreMock
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createStoreMock
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|public
name|Store
name|createStoreMock
parameter_list|(
name|int
name|priority
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Override the mock to always return the specified priority.
name|Store
name|s
init|=
name|super
operator|.
name|createStoreMock
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|s
operator|.
name|getCompactPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|priority
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
block|}
comment|/** Test compaction priority management and multiple compactions per store (HBASE-8665). */
annotation|@
name|Test
specifier|public
name|void
name|testCompactionQueuePriorities
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup a compact/split thread on a mock server.
specifier|final
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|HRegionServer
name|mockServer
init|=
name|mock
argument_list|(
name|HRegionServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockServer
operator|.
name|isStopped
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockServer
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockServer
operator|.
name|getChoreService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ChoreService
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|CompactSplitThread
name|cst
init|=
operator|new
name|CompactSplitThread
argument_list|(
name|mockServer
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockServer
operator|.
name|getCompactSplitThread
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cst
argument_list|)
expr_stmt|;
comment|//prevent large compaction thread pool stealing job from small compaction queue.
name|cst
operator|.
name|shutdownLongCompactions
argument_list|()
expr_stmt|;
comment|// Set up the region mock that redirects compactions.
name|HRegion
name|r
init|=
name|mock
argument_list|(
name|HRegion
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|r
operator|.
name|compact
argument_list|(
name|any
argument_list|(
name|CompactionContext
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Store
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ThroughputController
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|User
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
operator|new
name|Answer
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|invocation
operator|.
name|getArgumentAt
argument_list|(
literal|0
argument_list|,
name|CompactionContext
operator|.
name|class
argument_list|)
operator|.
name|compact
argument_list|(
name|invocation
operator|.
name|getArgumentAt
argument_list|(
literal|2
argument_list|,
name|ThroughputController
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Set up store mocks for 2 "real" stores and the one we use for blocking CST.
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|StoreMockMaker
name|sm
init|=
operator|new
name|StoreMockMaker
argument_list|(
name|results
argument_list|)
decl_stmt|,
name|sm2
init|=
operator|new
name|StoreMockMaker
argument_list|(
name|results
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|sm
operator|.
name|createStoreMock
argument_list|(
literal|"store1"
argument_list|)
decl_stmt|,
name|store2
init|=
name|sm2
operator|.
name|createStoreMock
argument_list|(
literal|"store2"
argument_list|)
decl_stmt|;
name|BlockingStoreMockMaker
name|blocker
init|=
operator|new
name|BlockingStoreMockMaker
argument_list|()
decl_stmt|;
comment|// First, block the compaction thread so that we could muck with queue.
name|cst
operator|.
name|requestSystemCompaction
argument_list|(
name|r
argument_list|,
name|blocker
operator|.
name|createStoreMock
argument_list|(
literal|1
argument_list|,
literal|"b-pri1"
argument_list|)
argument_list|,
literal|"b-pri1"
argument_list|)
expr_stmt|;
name|BlockingStoreMockMaker
operator|.
name|BlockingCompactionContext
name|currentBlock
init|=
name|blocker
operator|.
name|waitForBlocking
argument_list|()
decl_stmt|;
comment|// Add 4 files to store1, 3 to store2, and queue compactions; pri 3 and 4 respectively.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|sm
operator|.
name|notCompacting
operator|.
name|add
argument_list|(
name|createFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cst
operator|.
name|requestSystemCompaction
argument_list|(
name|r
argument_list|,
name|store
argument_list|,
literal|"s1-pri3"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|sm2
operator|.
name|notCompacting
operator|.
name|add
argument_list|(
name|createFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cst
operator|.
name|requestSystemCompaction
argument_list|(
name|r
argument_list|,
name|store2
argument_list|,
literal|"s2-pri4"
argument_list|)
expr_stmt|;
comment|// Now add 2 more files to store1 and queue compaction - pri 1.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|sm
operator|.
name|notCompacting
operator|.
name|add
argument_list|(
name|createFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cst
operator|.
name|requestSystemCompaction
argument_list|(
name|r
argument_list|,
name|store
argument_list|,
literal|"s1-pri1"
argument_list|)
expr_stmt|;
comment|// Finally add blocking compaction with priority 2.
name|cst
operator|.
name|requestSystemCompaction
argument_list|(
name|r
argument_list|,
name|blocker
operator|.
name|createStoreMock
argument_list|(
literal|2
argument_list|,
literal|"b-pri2"
argument_list|)
argument_list|,
literal|"b-pri2"
argument_list|)
expr_stmt|;
comment|// Unblock the blocking compaction; we should run pri1 and become block again in pri2.
name|currentBlock
operator|.
name|unblock
argument_list|()
expr_stmt|;
name|currentBlock
operator|=
name|blocker
operator|.
name|waitForBlocking
argument_list|()
expr_stmt|;
comment|// Pri1 should have "compacted" all 6 files.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add 2 files to store 1 (it has 2 files now).
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|sm
operator|.
name|notCompacting
operator|.
name|add
argument_list|(
name|createFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now we have pri4 for store 2 in queue, and pri3 for store1; store1's current priority
comment|// is 5, however, so it must not preempt store 2. Add blocking compaction at the end.
name|cst
operator|.
name|requestSystemCompaction
argument_list|(
name|r
argument_list|,
name|blocker
operator|.
name|createStoreMock
argument_list|(
literal|7
argument_list|,
literal|"b-pri7"
argument_list|)
argument_list|,
literal|"b-pri7"
argument_list|)
expr_stmt|;
name|currentBlock
operator|.
name|unblock
argument_list|()
expr_stmt|;
name|currentBlock
operator|=
name|blocker
operator|.
name|waitForBlocking
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3 files should go before 2 files.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|currentBlock
operator|.
name|unblock
argument_list|()
expr_stmt|;
name|cst
operator|.
name|interruptIfNecessary
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|StoreFile
name|createFile
parameter_list|()
throws|throws
name|Exception
block|{
name|StoreFile
name|sf
init|=
name|mock
argument_list|(
name|StoreFile
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|sf
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Path
argument_list|(
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
name|StoreFileReader
name|r
init|=
name|mock
argument_list|(
name|StoreFileReader
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|r
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sf
operator|.
name|getReader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|sf
return|;
block|}
comment|/**    * Simple {@link CompactionRequest} on which you can wait until the requested compaction finishes.    */
specifier|public
specifier|static
class|class
name|TrackableCompactionRequest
extends|extends
name|CompactionRequest
block|{
specifier|private
name|CountDownLatch
name|done
decl_stmt|;
comment|/**      * Constructor for a custom compaction. Uses the setXXX methods to update the state of the      * compaction before being used.      */
specifier|public
name|TrackableCompactionRequest
parameter_list|(
name|CountDownLatch
name|finished
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|done
operator|=
name|finished
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterExecute
parameter_list|()
block|{
name|super
operator|.
name|afterExecute
argument_list|()
expr_stmt|;
name|this
operator|.
name|done
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

