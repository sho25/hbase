begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileDataBlockEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileDataBlockEncoderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|Compactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|DefaultCompactionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_comment
comment|/**  * Test compactions  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestCompaction
extends|extends
name|HBaseTestCase
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCompaction
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|HRegion
name|r
init|=
literal|null
decl_stmt|;
specifier|private
name|HTableDescriptor
name|htd
init|=
literal|null
decl_stmt|;
specifier|private
name|Path
name|compactionDir
init|=
literal|null
decl_stmt|;
specifier|private
name|Path
name|regionCompactionDir
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COLUMN_FAMILY
init|=
name|fam1
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|STARTROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|START_KEY
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COLUMN_FAMILY_TEXT
init|=
name|COLUMN_FAMILY
decl_stmt|;
specifier|private
name|int
name|compactionThreshold
decl_stmt|;
specifier|private
name|byte
index|[]
name|firstRowBytes
decl_stmt|,
name|secondRowBytes
decl_stmt|,
name|thirdRowBytes
decl_stmt|;
specifier|final
specifier|private
name|byte
index|[]
name|col1
decl_stmt|,
name|col2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MAX_FILES_TO_COMPACT
init|=
literal|10
decl_stmt|;
comment|/** constructor */
specifier|public
name|TestCompaction
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// Set cache flush size to 1MB
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hregion.memstore.block.multiplier"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|compactionThreshold
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|firstRowBytes
operator|=
name|START_KEY_BYTES
expr_stmt|;
name|secondRowBytes
operator|=
name|START_KEY_BYTES
operator|.
name|clone
argument_list|()
expr_stmt|;
comment|// Increment the least significant character so we get to next row.
name|secondRowBytes
index|[
name|START_KEY_BYTES
operator|.
name|length
operator|-
literal|1
index|]
operator|++
expr_stmt|;
name|thirdRowBytes
operator|=
name|START_KEY_BYTES
operator|.
name|clone
argument_list|()
expr_stmt|;
name|thirdRowBytes
index|[
name|START_KEY_BYTES
operator|.
name|length
operator|-
literal|1
index|]
operator|+=
literal|2
expr_stmt|;
name|col1
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column1"
argument_list|)
expr_stmt|;
name|col2
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|this
operator|.
name|htd
operator|=
name|createTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|r
operator|=
name|createNewHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|HLog
name|hlog
init|=
name|r
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|this
operator|.
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|hlog
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that on a major compaction, if all cells are expired or deleted, then    * we'll end up with no product.  Make sure scanner over region returns    * right answer in this case - and that it just basically works.    * @throws IOException    */
specifier|public
name|void
name|testMajorCompactingToNoOutput
parameter_list|()
throws|throws
name|IOException
block|{
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compactionThreshold
condition|;
name|i
operator|++
control|)
block|{
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
comment|// Now delete everything.
name|InternalScanner
name|s
init|=
name|r
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
do|do
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|result
init|=
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|)
decl_stmt|;
name|r
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
break|break;
block|}
do|while
condition|(
literal|true
condition|)
do|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Flush
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Major compact.
name|r
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|=
name|r
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
do|do
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|result
init|=
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
break|break;
name|counter
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run compaction and flushing memstore    * Assert deletes get cleaned up.    * @throws Exception    */
specifier|public
name|void
name|testMajorCompaction
parameter_list|()
throws|throws
name|Exception
block|{
name|majorCompaction
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testDataBlockEncodingInCacheOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|majorCompactionWithDataBlockEncoding
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDataBlockEncodingEverywhere
parameter_list|()
throws|throws
name|Exception
block|{
name|majorCompactionWithDataBlockEncoding
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|majorCompactionWithDataBlockEncoding
parameter_list|(
name|boolean
name|inCacheOnly
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|HStore
argument_list|,
name|HFileDataBlockEncoder
argument_list|>
name|replaceBlockCache
init|=
operator|new
name|HashMap
argument_list|<
name|HStore
argument_list|,
name|HFileDataBlockEncoder
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Store
argument_list|>
name|pair
range|:
name|r
operator|.
name|getStores
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HStore
name|store
init|=
operator|(
name|HStore
operator|)
name|pair
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|HFileDataBlockEncoder
name|blockEncoder
init|=
name|store
operator|.
name|getDataBlockEncoder
argument_list|()
decl_stmt|;
name|replaceBlockCache
operator|.
name|put
argument_list|(
name|store
argument_list|,
name|blockEncoder
argument_list|)
expr_stmt|;
specifier|final
name|DataBlockEncoding
name|inCache
init|=
name|DataBlockEncoding
operator|.
name|PREFIX
decl_stmt|;
specifier|final
name|DataBlockEncoding
name|onDisk
init|=
name|inCacheOnly
condition|?
name|DataBlockEncoding
operator|.
name|NONE
else|:
name|inCache
decl_stmt|;
name|store
operator|.
name|setDataBlockEncoderInTest
argument_list|(
operator|new
name|HFileDataBlockEncoderImpl
argument_list|(
name|onDisk
argument_list|,
name|inCache
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|majorCompaction
argument_list|()
expr_stmt|;
comment|// restore settings
for|for
control|(
name|Entry
argument_list|<
name|HStore
argument_list|,
name|HFileDataBlockEncoder
argument_list|>
name|entry
range|:
name|replaceBlockCache
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|setDataBlockEncoderInTest
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|majorCompaction
parameter_list|()
throws|throws
name|Exception
block|{
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compactionThreshold
condition|;
name|i
operator|++
control|)
block|{
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
comment|// Add more content.
name|addContent
argument_list|(
operator|new
name|HRegionIncommon
argument_list|(
name|r
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|COLUMN_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now there are about 5 versions of each column.
comment|// Default is that there only 3 (MAXVERSIONS) versions allowed per column.
comment|//
comment|// Assert == 3 when we ask for versions.
name|Result
name|result
init|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|STARTROW
argument_list|)
operator|.
name|addFamily
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|compactionThreshold
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// see if CompactionProgress is in place but null
for|for
control|(
name|Store
name|store
range|:
name|this
operator|.
name|r
operator|.
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
name|assertNull
argument_list|(
name|store
operator|.
name|getCompactionProgress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|r
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// see if CompactionProgress has done its thing on at least one store
name|int
name|storeCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Store
name|store
range|:
name|this
operator|.
name|r
operator|.
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
name|CompactionProgress
name|progress
init|=
name|store
operator|.
name|getCompactionProgress
argument_list|()
decl_stmt|;
if|if
condition|(
name|progress
operator|!=
literal|null
condition|)
block|{
operator|++
name|storeCount
expr_stmt|;
name|assertTrue
argument_list|(
name|progress
operator|.
name|currentCompactedKVs
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|progress
operator|.
name|totalCompactingKVs
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|storeCount
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// look at the second row
comment|// Increment the least significant character so we get to next row.
name|byte
index|[]
name|secondRowBytes
init|=
name|START_KEY_BYTES
operator|.
name|clone
argument_list|()
decl_stmt|;
name|secondRowBytes
index|[
name|START_KEY_BYTES
operator|.
name|length
operator|-
literal|1
index|]
operator|++
expr_stmt|;
comment|// Always 3 versions if that is what max versions is.
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addFamily
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Row "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|secondRowBytes
argument_list|)
operator|+
literal|" after "
operator|+
literal|"initial compaction: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid number of versions of row "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|secondRowBytes
argument_list|)
operator|+
literal|"."
argument_list|,
name|compactionThreshold
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now add deletes to memstore and then flush it.
comment|// That will put us over
comment|// the compaction threshold of 3 store files.  Compacting these store files
comment|// should result in a compacted store file that has no references to the
comment|// deleted row.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding deletes to memstore and flushing"
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|secondRowBytes
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|famAndQf
init|=
block|{
name|COLUMN_FAMILY
block|,
literal|null
block|}
decl_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|r
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Assert deleted.
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addFamily
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Second row should have been deleted"
argument_list|,
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addFamily
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Second row should have been deleted"
argument_list|,
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a bit of data and flush.  Start adding at 'bbb'.
name|createSmallerStoreFile
argument_list|(
name|this
operator|.
name|r
argument_list|)
expr_stmt|;
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Assert that the second row is still deleted.
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addFamily
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Second row should still be deleted"
argument_list|,
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Force major compaction.
name|r
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|getStore
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|getStorefiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addFamily
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Second row should still be deleted"
argument_list|,
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure the store files do have some 'aaa' keys in them -- exactly 3.
comment|// Also, that compacted store files do not have any secondRowBytes because
comment|// they were deleted.
name|verifyCounts
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Multiple versions allowed for an entry, so the delete isn't enough
comment|// Lower TTL and expire to ensure that all our entries have been wiped
specifier|final
name|int
name|ttl
init|=
literal|1000
decl_stmt|;
for|for
control|(
name|Store
name|hstore
range|:
name|this
operator|.
name|r
operator|.
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
name|HStore
name|store
init|=
operator|(
operator|(
name|HStore
operator|)
name|hstore
operator|)
decl_stmt|;
name|ScanInfo
name|old
init|=
name|store
operator|.
name|getScanInfo
argument_list|()
decl_stmt|;
name|ScanInfo
name|si
init|=
operator|new
name|ScanInfo
argument_list|(
name|old
operator|.
name|getFamily
argument_list|()
argument_list|,
name|old
operator|.
name|getMinVersions
argument_list|()
argument_list|,
name|old
operator|.
name|getMaxVersions
argument_list|()
argument_list|,
name|ttl
argument_list|,
name|old
operator|.
name|getKeepDeletedCells
argument_list|()
argument_list|,
literal|0
argument_list|,
name|old
operator|.
name|getComparator
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|setScanInfo
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|r
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|count
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should not see anything after TTL has expired"
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTimeBasedMajorCompaction
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create 2 storefiles and force a major compaction to reset the time
name|int
name|delay
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
comment|// 10 sec
name|float
name|jitterPct
init|=
literal|0.20f
decl_stmt|;
comment|// 20%
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|MAJOR_COMPACTION_PERIOD
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.hregion.majorcompaction.jitter"
argument_list|,
name|jitterPct
argument_list|)
expr_stmt|;
name|HStore
name|s
init|=
operator|(
operator|(
name|HStore
operator|)
name|r
operator|.
name|getStore
argument_list|(
name|COLUMN_FAMILY
argument_list|)
operator|)
decl_stmt|;
name|s
operator|.
name|storeEngine
operator|.
name|getCompactionPolicy
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|r
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// add one more file& verify that a regular compaction won't work
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|r
operator|.
name|compactStores
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|s
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// ensure that major compaction time is deterministic
name|DefaultCompactionPolicy
name|c
init|=
operator|(
name|DefaultCompactionPolicy
operator|)
name|s
operator|.
name|storeEngine
operator|.
name|getCompactionPolicy
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|StoreFile
argument_list|>
name|storeFiles
init|=
name|s
operator|.
name|getStorefiles
argument_list|()
decl_stmt|;
name|long
name|mcTime
init|=
name|c
operator|.
name|getNextMajorCompactTime
argument_list|(
name|storeFiles
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|mcTime
argument_list|,
name|c
operator|.
name|getNextMajorCompactTime
argument_list|(
name|storeFiles
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// ensure that the major compaction time is within the variance
name|long
name|jitter
init|=
name|Math
operator|.
name|round
argument_list|(
name|delay
operator|*
name|jitterPct
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|delay
operator|-
name|jitter
operator|<=
name|mcTime
operator|&&
name|mcTime
operator|<=
name|delay
operator|+
name|jitter
argument_list|)
expr_stmt|;
comment|// wait until the time-based compaction interval
name|Thread
operator|.
name|sleep
argument_list|(
name|mcTime
argument_list|)
expr_stmt|;
comment|// trigger a compaction request and ensure that it's upgraded to major
name|r
operator|.
name|compactStores
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// reset the timed compaction settings
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|MAJOR_COMPACTION_PERIOD
argument_list|,
literal|1000
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.hregion.majorcompaction.jitter"
argument_list|,
literal|0.20F
argument_list|)
expr_stmt|;
comment|// run a major to reset the cache
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|r
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testMinorCompactionWithDeleteRow
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|deleteRow
init|=
operator|new
name|Delete
argument_list|(
name|secondRowBytes
argument_list|)
decl_stmt|;
name|testMinorCompactionWithDelete
argument_list|(
name|deleteRow
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMinorCompactionWithDeleteColumn1
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|dc
init|=
operator|new
name|Delete
argument_list|(
name|secondRowBytes
argument_list|)
decl_stmt|;
comment|/* delete all timestamps in the column */
name|dc
operator|.
name|deleteColumns
argument_list|(
name|fam2
argument_list|,
name|col2
argument_list|)
expr_stmt|;
name|testMinorCompactionWithDelete
argument_list|(
name|dc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMinorCompactionWithDeleteColumn2
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|dc
init|=
operator|new
name|Delete
argument_list|(
name|secondRowBytes
argument_list|)
decl_stmt|;
name|dc
operator|.
name|deleteColumn
argument_list|(
name|fam2
argument_list|,
name|col2
argument_list|)
expr_stmt|;
comment|/* compactionThreshold is 3. The table has 4 versions: 0, 1, 2, and 3.      * we only delete the latest version. One might expect to see only      * versions 1 and 2. HBase differs, and gives us 0, 1 and 2.      * This is okay as well. Since there was no compaction done before the      * delete, version 0 seems to stay on.      */
comment|//testMinorCompactionWithDelete(dc, 2);
name|testMinorCompactionWithDelete
argument_list|(
name|dc
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMinorCompactionWithDeleteColumnFamily
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|deleteCF
init|=
operator|new
name|Delete
argument_list|(
name|secondRowBytes
argument_list|)
decl_stmt|;
name|deleteCF
operator|.
name|deleteFamily
argument_list|(
name|fam2
argument_list|)
expr_stmt|;
name|testMinorCompactionWithDelete
argument_list|(
name|deleteCF
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMinorCompactionWithDeleteVersion1
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|deleteVersion
init|=
operator|new
name|Delete
argument_list|(
name|secondRowBytes
argument_list|)
decl_stmt|;
name|deleteVersion
operator|.
name|deleteColumns
argument_list|(
name|fam2
argument_list|,
name|col2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|/* compactionThreshold is 3. The table has 4 versions: 0, 1, 2, and 3.      * We delete versions 0 ... 2. So, we still have one remaining.      */
name|testMinorCompactionWithDelete
argument_list|(
name|deleteVersion
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMinorCompactionWithDeleteVersion2
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|deleteVersion
init|=
operator|new
name|Delete
argument_list|(
name|secondRowBytes
argument_list|)
decl_stmt|;
name|deleteVersion
operator|.
name|deleteColumn
argument_list|(
name|fam2
argument_list|,
name|col2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|/*      * the table has 4 versions: 0, 1, 2, and 3.      * We delete 1.      * Should have 3 remaining.      */
name|testMinorCompactionWithDelete
argument_list|(
name|deleteVersion
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/*    * A helper function to test the minor compaction algorithm. We check that    * the delete markers are left behind. Takes delete as an argument, which    * can be any delete (row, column, columnfamliy etc), that essentially    * deletes row2 and column2. row1 and column1 should be undeleted    */
specifier|private
name|void
name|testMinorCompactionWithDelete
parameter_list|(
name|Delete
name|delete
parameter_list|)
throws|throws
name|Exception
block|{
name|testMinorCompactionWithDelete
argument_list|(
name|delete
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testMinorCompactionWithDelete
parameter_list|(
name|Delete
name|delete
parameter_list|,
name|int
name|expectedResultsAfterDelete
parameter_list|)
throws|throws
name|Exception
block|{
name|HRegionIncommon
name|loader
init|=
operator|new
name|HRegionIncommon
argument_list|(
name|r
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compactionThreshold
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|addContent
argument_list|(
name|loader
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|fam1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|col1
argument_list|)
argument_list|,
name|firstRowBytes
argument_list|,
name|thirdRowBytes
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|addContent
argument_list|(
name|loader
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|fam1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|col2
argument_list|)
argument_list|,
name|firstRowBytes
argument_list|,
name|thirdRowBytes
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|addContent
argument_list|(
name|loader
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|fam2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|col1
argument_list|)
argument_list|,
name|firstRowBytes
argument_list|,
name|thirdRowBytes
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|addContent
argument_list|(
name|loader
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|fam2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|col2
argument_list|)
argument_list|,
name|firstRowBytes
argument_list|,
name|thirdRowBytes
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
name|Result
name|result
init|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|firstRowBytes
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|col1
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|compactionThreshold
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam2
argument_list|,
name|col2
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|compactionThreshold
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now add deletes to memstore and then flush it.  That will put us over
comment|// the compaction threshold of 3 store files.  Compacting these store files
comment|// should result in a compacted store file that has no references to the
comment|// deleted row.
name|r
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Make sure that we have only deleted family2 from secondRowBytes
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam2
argument_list|,
name|col2
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResultsAfterDelete
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// but we still have firstrow
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|firstRowBytes
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|col1
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|compactionThreshold
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// should not change anything.
comment|// Let us check again
comment|// Make sure that we have only deleted family2 from secondRowBytes
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam2
argument_list|,
name|col2
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResultsAfterDelete
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// but we still have firstrow
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|firstRowBytes
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|col1
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|compactionThreshold
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// do a compaction
name|Store
name|store2
init|=
name|this
operator|.
name|r
operator|.
name|stores
operator|.
name|get
argument_list|(
name|fam2
argument_list|)
decl_stmt|;
name|int
name|numFiles1
init|=
name|store2
operator|.
name|getStorefiles
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Was expecting to see 4 store files"
argument_list|,
name|numFiles1
operator|>
name|compactionThreshold
argument_list|)
expr_stmt|;
comment|//> 3
operator|(
operator|(
name|HStore
operator|)
name|store2
operator|)
operator|.
name|compactRecentForTestingAssumingDefaultPolicy
argument_list|(
name|compactionThreshold
argument_list|)
expr_stmt|;
comment|// = 3
name|int
name|numFiles2
init|=
name|store2
operator|.
name|getStorefiles
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Check that we did compact
name|assertTrue
argument_list|(
literal|"Number of store files should go down"
argument_list|,
name|numFiles1
operator|>
name|numFiles2
argument_list|)
expr_stmt|;
comment|// Check that it was a minor compaction.
name|assertTrue
argument_list|(
literal|"Was not supposed to be a major compaction"
argument_list|,
name|numFiles2
operator|>
literal|1
argument_list|)
expr_stmt|;
comment|// Make sure that we have only deleted family2 from secondRowBytes
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam2
argument_list|,
name|col2
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResultsAfterDelete
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// but we still have firstrow
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|firstRowBytes
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|col1
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|compactionThreshold
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyCounts
parameter_list|(
name|int
name|countRow1
parameter_list|,
name|int
name|countRow2
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|count1
init|=
literal|0
decl_stmt|;
name|int
name|count2
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StoreFile
name|f
range|:
name|this
operator|.
name|r
operator|.
name|stores
operator|.
name|get
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|getStorefiles
argument_list|()
control|)
block|{
name|HFileScanner
name|scanner
init|=
name|f
operator|.
name|getReader
argument_list|()
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|()
expr_stmt|;
do|do
block|{
name|byte
index|[]
name|row
init|=
name|scanner
operator|.
name|getKeyValue
argument_list|()
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|STARTROW
argument_list|)
condition|)
block|{
name|count1
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|secondRowBytes
argument_list|)
condition|)
block|{
name|count2
operator|++
expr_stmt|;
block|}
block|}
do|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
condition|)
do|;
block|}
name|assertEquals
argument_list|(
name|countRow1
argument_list|,
name|count1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|countRow2
argument_list|,
name|count2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that you can stop a long-running compaction    * (used during RS shutdown)    * @throws Exception    */
specifier|public
name|void
name|testInterruptCompaction
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// lower the polling interval for this test
name|int
name|origWI
init|=
name|HStore
operator|.
name|closeCheckInterval
decl_stmt|;
name|HStore
operator|.
name|closeCheckInterval
operator|=
literal|10
operator|*
literal|1000
expr_stmt|;
comment|// 10 KB
try|try
block|{
comment|// Create a couple store files w/ 15KB (over 10KB interval)
name|int
name|jmax
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
literal|15.0
operator|/
name|compactionThreshold
argument_list|)
decl_stmt|;
name|byte
index|[]
name|pad
init|=
operator|new
name|byte
index|[
literal|1000
index|]
decl_stmt|;
comment|// 1 KB chunk
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compactionThreshold
condition|;
name|i
operator|++
control|)
block|{
name|HRegionIncommon
name|loader
init|=
operator|new
name|HRegionIncommon
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|STARTROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|jmax
condition|;
name|j
operator|++
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|j
argument_list|)
argument_list|,
name|pad
argument_list|)
expr_stmt|;
block|}
name|addContent
argument_list|(
name|loader
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|COLUMN_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|loader
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|loader
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
name|HRegion
name|spyR
init|=
name|spy
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|r
operator|.
name|writestate
operator|.
name|writesEnabled
operator|=
literal|false
expr_stmt|;
return|return
name|invocation
operator|.
name|callRealMethod
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spyR
argument_list|)
operator|.
name|doRegionCompactionPrep
argument_list|()
expr_stmt|;
comment|// force a minor compaction, but not before requesting a stop
name|spyR
operator|.
name|compactStores
argument_list|()
expr_stmt|;
comment|// ensure that the compaction stopped, all old files are intact,
name|Store
name|s
init|=
name|r
operator|.
name|stores
operator|.
name|get
argument_list|(
name|COLUMN_FAMILY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|compactionThreshold
argument_list|,
name|s
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|getStorefilesSize
argument_list|()
operator|>
literal|15
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// and no new store files persisted past compactStores()
name|FileStatus
index|[]
name|ls
init|=
name|r
operator|.
name|getFilesystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|r
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getTempDir
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ls
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// don't mess up future tests
name|r
operator|.
name|writestate
operator|.
name|writesEnabled
operator|=
literal|true
expr_stmt|;
name|HStore
operator|.
name|closeCheckInterval
operator|=
name|origWI
expr_stmt|;
comment|// Delete all Store information once done using
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compactionThreshold
condition|;
name|i
operator|++
control|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|STARTROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|famAndQf
init|=
block|{
name|COLUMN_FAMILY
block|,
literal|null
block|}
decl_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|famAndQf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|r
operator|.
name|delete
argument_list|(
name|delete
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Multiple versions allowed for an entry, so the delete isn't enough
comment|// Lower TTL and expire to ensure that all our entries have been wiped
specifier|final
name|int
name|ttl
init|=
literal|1000
decl_stmt|;
for|for
control|(
name|Store
name|hstore
range|:
name|this
operator|.
name|r
operator|.
name|stores
operator|.
name|values
argument_list|()
control|)
block|{
name|HStore
name|store
init|=
operator|(
name|HStore
operator|)
name|hstore
decl_stmt|;
name|ScanInfo
name|old
init|=
name|store
operator|.
name|getScanInfo
argument_list|()
decl_stmt|;
name|ScanInfo
name|si
init|=
operator|new
name|ScanInfo
argument_list|(
name|old
operator|.
name|getFamily
argument_list|()
argument_list|,
name|old
operator|.
name|getMinVersions
argument_list|()
argument_list|,
name|old
operator|.
name|getMaxVersions
argument_list|()
argument_list|,
name|ttl
argument_list|,
name|old
operator|.
name|getKeepDeletedCells
argument_list|()
argument_list|,
literal|0
argument_list|,
name|old
operator|.
name|getComparator
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|setScanInfo
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
name|r
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|count
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StoreFile
name|f
range|:
name|this
operator|.
name|r
operator|.
name|stores
operator|.
name|get
argument_list|(
name|COLUMN_FAMILY_TEXT
argument_list|)
operator|.
name|getStorefiles
argument_list|()
control|)
block|{
name|HFileScanner
name|scanner
init|=
name|f
operator|.
name|getReader
argument_list|()
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|scanner
operator|.
name|seekTo
argument_list|()
condition|)
block|{
continue|continue;
block|}
do|do
block|{
name|count
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
condition|)
do|;
block|}
return|return
name|count
return|;
block|}
specifier|private
name|void
name|createStoreFile
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|createStoreFile
argument_list|(
name|region
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|COLUMN_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createStoreFile
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|,
name|String
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionIncommon
name|loader
init|=
operator|new
name|HRegionIncommon
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|addContent
argument_list|(
name|loader
argument_list|,
name|family
argument_list|)
expr_stmt|;
name|loader
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createSmallerStoreFile
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionIncommon
name|loader
init|=
operator|new
name|HRegionIncommon
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|addContent
argument_list|(
name|loader
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|COLUMN_FAMILY
argument_list|)
argument_list|,
operator|(
literal|""
operator|+
literal|"bbb"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|loader
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCompactionWithCorruptResult
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|nfiles
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nfiles
condition|;
name|i
operator|++
control|)
block|{
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|HStore
name|store
init|=
operator|(
name|HStore
operator|)
name|r
operator|.
name|getStore
argument_list|(
name|COLUMN_FAMILY
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|StoreFile
argument_list|>
name|storeFiles
init|=
name|store
operator|.
name|getStorefiles
argument_list|()
decl_stmt|;
name|Compactor
name|tool
init|=
name|store
operator|.
name|storeEngine
operator|.
name|getCompactor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|newFiles
init|=
name|tool
operator|.
name|compactForTesting
argument_list|(
name|storeFiles
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Now lets corrupt the compacted file.
name|FileSystem
name|fs
init|=
name|store
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// default compaction policy created one and only one new compacted file
name|Path
name|dstPath
init|=
name|store
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|createTempName
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|dstPath
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|512
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
operator|(
name|long
operator|)
literal|1024
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|stream
operator|.
name|writeChars
argument_list|(
literal|"CORRUPT FILE!!!!"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|origPath
init|=
name|store
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|commitStoreFile
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|COLUMN_FAMILY
argument_list|)
argument_list|,
name|dstPath
argument_list|)
decl_stmt|;
try|try
block|{
operator|(
operator|(
name|HStore
operator|)
name|store
operator|)
operator|.
name|moveFileIntoPlace
argument_list|(
name|origPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// The complete compaction should fail and the corrupt file should remain
comment|// in the 'tmp' directory;
assert|assert
operator|(
name|fs
operator|.
name|exists
argument_list|(
name|origPath
argument_list|)
operator|)
assert|;
assert|assert
operator|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|dstPath
argument_list|)
operator|)
assert|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testCompactionWithCorruptResult Passed"
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"testCompactionWithCorruptResult failed since no exception was"
operator|+
literal|"thrown while completing a corrupt file"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for HBASE-5920 - Test user requested major compactions always occurring    */
specifier|public
name|void
name|testNonUserMajorCompactionRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|Store
name|store
init|=
name|r
operator|.
name|getStore
argument_list|(
name|COLUMN_FAMILY
argument_list|)
decl_stmt|;
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_FILES_TO_COMPACT
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|triggerMajorCompaction
argument_list|()
expr_stmt|;
name|CompactionRequest
name|request
init|=
name|store
operator|.
name|requestCompaction
argument_list|(
name|Store
operator|.
name|NO_PRIORITY
argument_list|,
literal|null
argument_list|)
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected to receive a compaction request"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"System-requested major compaction should not occur if there are too many store files"
argument_list|,
literal|false
argument_list|,
name|request
operator|.
name|isMajor
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for HBASE-5920    */
specifier|public
name|void
name|testUserMajorCompactionRequest
parameter_list|()
throws|throws
name|IOException
block|{
name|Store
name|store
init|=
name|r
operator|.
name|getStore
argument_list|(
name|COLUMN_FAMILY
argument_list|)
decl_stmt|;
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_FILES_TO_COMPACT
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|triggerMajorCompaction
argument_list|()
expr_stmt|;
name|CompactionRequest
name|request
init|=
name|store
operator|.
name|requestCompaction
argument_list|(
name|Store
operator|.
name|PRIORITY_USER
argument_list|,
literal|null
argument_list|)
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected to receive a compaction request"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"User-requested major compaction should always occur, even if there are too many store files"
argument_list|,
literal|true
argument_list|,
name|request
operator|.
name|isMajor
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a custom compaction request and be sure that we can track it through the queue, knowing    * when the compaction is completed.    */
specifier|public
name|void
name|testTrackingCompactionRequest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup a compact/split thread on a mock server
name|HRegionServer
name|mockServer
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HRegionServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockServer
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
operator|.
name|getBaseConf
argument_list|()
argument_list|)
expr_stmt|;
name|CompactSplitThread
name|thread
init|=
operator|new
name|CompactSplitThread
argument_list|(
name|mockServer
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockServer
operator|.
name|getCompactSplitThread
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|thread
argument_list|)
expr_stmt|;
comment|// setup a region/store with some files
name|Store
name|store
init|=
name|r
operator|.
name|getStore
argument_list|(
name|COLUMN_FAMILY
argument_list|)
decl_stmt|;
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_FILES_TO_COMPACT
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|createStoreFile
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TrackableCompactionRequest
name|request
init|=
operator|new
name|TrackableCompactionRequest
argument_list|(
name|latch
argument_list|)
decl_stmt|;
name|thread
operator|.
name|requestCompaction
argument_list|(
name|r
argument_list|,
name|store
argument_list|,
literal|"test custom comapction"
argument_list|,
name|Store
operator|.
name|PRIORITY_USER
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// wait for the latch to complete.
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|thread
operator|.
name|interruptIfNecessary
argument_list|()
expr_stmt|;
block|}
comment|/**    * HBASE-7947: Regression test to ensure adding to the correct list in the    * {@link CompactSplitThread}    * @throws Exception on failure    */
specifier|public
name|void
name|testMultipleCustomCompactionRequests
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup a compact/split thread on a mock server
name|HRegionServer
name|mockServer
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HRegionServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockServer
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
operator|.
name|getBaseConf
argument_list|()
argument_list|)
expr_stmt|;
name|CompactSplitThread
name|thread
init|=
operator|new
name|CompactSplitThread
argument_list|(
name|mockServer
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockServer
operator|.
name|getCompactSplitThread
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|thread
argument_list|)
expr_stmt|;
comment|// setup a region/store with some files
name|int
name|numStores
init|=
name|r
operator|.
name|getStores
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|CompactionRequest
argument_list|,
name|Store
argument_list|>
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|CompactionRequest
argument_list|,
name|Store
argument_list|>
argument_list|>
argument_list|(
name|numStores
argument_list|)
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numStores
argument_list|)
decl_stmt|;
comment|// create some store files and setup requests for each store on which we want to do a
comment|// compaction
for|for
control|(
name|Store
name|store
range|:
name|r
operator|.
name|getStores
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|createStoreFile
argument_list|(
name|r
argument_list|,
name|store
operator|.
name|getColumnFamilyName
argument_list|()
argument_list|)
expr_stmt|;
name|createStoreFile
argument_list|(
name|r
argument_list|,
name|store
operator|.
name|getColumnFamilyName
argument_list|()
argument_list|)
expr_stmt|;
name|createStoreFile
argument_list|(
name|r
argument_list|,
name|store
operator|.
name|getColumnFamilyName
argument_list|()
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|CompactionRequest
argument_list|,
name|Store
argument_list|>
argument_list|(
operator|new
name|TrackableCompactionRequest
argument_list|(
name|latch
argument_list|)
argument_list|,
name|store
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|thread
operator|.
name|requestCompaction
argument_list|(
name|r
argument_list|,
literal|"test mulitple custom comapctions"
argument_list|,
name|Store
operator|.
name|PRIORITY_USER
argument_list|,
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|requests
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for the latch to complete.
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|thread
operator|.
name|interruptIfNecessary
argument_list|()
expr_stmt|;
block|}
comment|/**    * Simple {@link CompactionRequest} on which you can wait until the requested compaction finishes.    */
specifier|public
specifier|static
class|class
name|TrackableCompactionRequest
extends|extends
name|CompactionRequest
block|{
specifier|private
name|CountDownLatch
name|done
decl_stmt|;
comment|/**      * Constructor for a custom compaction. Uses the setXXX methods to update the state of the      * compaction before being used.      */
specifier|public
name|TrackableCompactionRequest
parameter_list|(
name|CountDownLatch
name|finished
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|done
operator|=
name|finished
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterExecute
parameter_list|()
block|{
name|super
operator|.
name|afterExecute
argument_list|()
expr_stmt|;
name|this
operator|.
name|done
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

