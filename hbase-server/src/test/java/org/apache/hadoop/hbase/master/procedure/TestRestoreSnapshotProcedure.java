begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotDisabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotTestingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRestoreSnapshotProcedure
extends|extends
name|TestTableDDLProcedureBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRestoreSnapshotProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRestoreSnapshotProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|TableName
name|snapshotTableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testRestoreSnapshot"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|CF1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|CF2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf2"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|CF3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf3"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|CF4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf4"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|int
name|rowCountCF1
init|=
literal|10
decl_stmt|;
specifier|protected
specifier|final
name|int
name|rowCountCF2
init|=
literal|40
decl_stmt|;
specifier|protected
specifier|final
name|int
name|rowCountCF3
init|=
literal|40
decl_stmt|;
specifier|protected
specifier|final
name|int
name|rowCountCF4
init|=
literal|40
decl_stmt|;
specifier|protected
specifier|final
name|int
name|rowCountCF1addition
init|=
literal|10
decl_stmt|;
specifier|private
name|SnapshotProtos
operator|.
name|SnapshotDescription
name|snapshot
init|=
literal|null
decl_stmt|;
specifier|private
name|TableDescriptor
name|snapshotHTD
init|=
literal|null
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|setupSnapshotAndUpdateTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|deleteAllSnapshots
argument_list|(
name|UTIL
operator|.
name|getAdmin
argument_list|()
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|deleteArchiveDirectory
argument_list|(
name|UTIL
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getNumReplicas
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
specifier|private
name|void
name|setupSnapshotAndUpdateTable
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|tid
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|String
name|snapshotName
init|=
literal|"snapshot-"
operator|+
name|tid
decl_stmt|;
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|// create Table
name|SnapshotTestingUtils
operator|.
name|createTable
argument_list|(
name|UTIL
argument_list|,
name|snapshotTableName
argument_list|,
name|getNumReplicas
argument_list|()
argument_list|,
name|CF1
argument_list|,
name|CF2
argument_list|)
expr_stmt|;
comment|// Load data
name|SnapshotTestingUtils
operator|.
name|loadData
argument_list|(
name|UTIL
argument_list|,
name|snapshotTableName
argument_list|,
name|rowCountCF1
argument_list|,
name|CF1
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|loadData
argument_list|(
name|UTIL
argument_list|,
name|snapshotTableName
argument_list|,
name|rowCountCF2
argument_list|,
name|CF2
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyRowCount
argument_list|(
name|UTIL
argument_list|,
name|snapshotTableName
argument_list|,
name|rowCountCF1
operator|+
name|rowCountCF2
argument_list|)
expr_stmt|;
name|snapshotHTD
operator|=
name|admin
operator|.
name|getDescriptor
argument_list|(
name|snapshotTableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|snapshotTableName
argument_list|)
expr_stmt|;
comment|// take a snapshot
name|admin
operator|.
name|snapshot
argument_list|(
name|snapshotName
argument_list|,
name|snapshotTableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshotList
init|=
name|admin
operator|.
name|listSnapshots
argument_list|()
decl_stmt|;
name|snapshot
operator|=
name|ProtobufUtil
operator|.
name|createHBaseProtosSnapshotDesc
argument_list|(
name|snapshotList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// modify the table
name|ColumnFamilyDescriptorBuilder
operator|.
name|ModifyableColumnFamilyDescriptor
name|columnFamilyDescriptor3
init|=
operator|new
name|ColumnFamilyDescriptorBuilder
operator|.
name|ModifyableColumnFamilyDescriptor
argument_list|(
name|CF3
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptorBuilder
operator|.
name|ModifyableColumnFamilyDescriptor
name|columnFamilyDescriptor4
init|=
operator|new
name|ColumnFamilyDescriptorBuilder
operator|.
name|ModifyableColumnFamilyDescriptor
argument_list|(
name|CF4
argument_list|)
decl_stmt|;
name|admin
operator|.
name|addColumnFamily
argument_list|(
name|snapshotTableName
argument_list|,
name|columnFamilyDescriptor3
argument_list|)
expr_stmt|;
name|admin
operator|.
name|addColumnFamily
argument_list|(
name|snapshotTableName
argument_list|,
name|columnFamilyDescriptor4
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteColumnFamily
argument_list|(
name|snapshotTableName
argument_list|,
name|CF2
argument_list|)
expr_stmt|;
comment|// enable table and insert data
name|admin
operator|.
name|enableTable
argument_list|(
name|snapshotTableName
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|loadData
argument_list|(
name|UTIL
argument_list|,
name|snapshotTableName
argument_list|,
name|rowCountCF3
argument_list|,
name|CF3
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|loadData
argument_list|(
name|UTIL
argument_list|,
name|snapshotTableName
argument_list|,
name|rowCountCF4
argument_list|,
name|CF4
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|loadData
argument_list|(
name|UTIL
argument_list|,
name|snapshotTableName
argument_list|,
name|rowCountCF1addition
argument_list|,
name|CF1
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|currentHTD
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|admin
operator|.
name|getDescriptor
argument_list|(
name|snapshotTableName
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|currentHTD
operator|.
name|hasFamily
argument_list|(
name|CF1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|currentHTD
operator|.
name|hasFamily
argument_list|(
name|CF2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentHTD
operator|.
name|hasFamily
argument_list|(
name|CF3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentHTD
operator|.
name|hasFamily
argument_list|(
name|CF4
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|currentHTD
operator|.
name|getFamiliesKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|snapshotHTD
operator|.
name|getColumnFamilies
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyRowCount
argument_list|(
name|UTIL
argument_list|,
name|snapshotTableName
argument_list|,
name|rowCountCF1
operator|+
name|rowCountCF3
operator|+
name|rowCountCF4
operator|+
name|rowCountCF1addition
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|snapshotTableName
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|TableDescriptor
name|createHTableDescriptor
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
modifier|...
name|family
parameter_list|)
block|{
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
name|tableDescriptor
init|=
operator|new
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|family
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|tableDescriptor
operator|.
name|setColumnFamily
argument_list|(
operator|new
name|ColumnFamilyDescriptorBuilder
operator|.
name|ModifyableColumnFamilyDescriptor
argument_list|(
name|family
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tableDescriptor
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRestoreSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|long
name|procId
init|=
name|ProcedureTestingUtility
operator|.
name|submitAndWait
argument_list|(
name|procExec
argument_list|,
operator|new
name|RestoreSnapshotProcedure
argument_list|(
name|procExec
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|snapshotHTD
argument_list|,
name|snapshot
argument_list|)
argument_list|)
decl_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
operator|.
name|getResult
argument_list|(
name|procId
argument_list|)
argument_list|)
expr_stmt|;
name|validateSnapshotRestore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRestoreSnapshotToDifferentTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|restoredTableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TableDescriptor
name|tableDescriptor
init|=
name|createHTableDescriptor
argument_list|(
name|restoredTableName
argument_list|,
name|CF1
argument_list|,
name|CF2
argument_list|)
decl_stmt|;
name|long
name|procId
init|=
name|ProcedureTestingUtility
operator|.
name|submitAndWait
argument_list|(
name|procExec
argument_list|,
operator|new
name|RestoreSnapshotProcedure
argument_list|(
name|procExec
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|tableDescriptor
argument_list|,
name|snapshot
argument_list|)
argument_list|)
decl_stmt|;
name|Procedure
argument_list|<
name|?
argument_list|>
name|result
init|=
name|procExec
operator|.
name|getResult
argument_list|(
name|procId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restore snapshot failed with exception: "
operator|+
name|result
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ProcedureTestingUtility
operator|.
name|getExceptionCause
argument_list|(
name|result
argument_list|)
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRestoreSnapshotToEnabledTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
try|try
block|{
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|snapshotTableName
argument_list|)
expr_stmt|;
name|long
name|procId
init|=
name|ProcedureTestingUtility
operator|.
name|submitAndWait
argument_list|(
name|procExec
argument_list|,
operator|new
name|RestoreSnapshotProcedure
argument_list|(
name|procExec
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|snapshotHTD
argument_list|,
name|snapshot
argument_list|)
argument_list|)
decl_stmt|;
name|Procedure
argument_list|<
name|?
argument_list|>
name|result
init|=
name|procExec
operator|.
name|getResult
argument_list|(
name|procId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restore snapshot failed with exception: "
operator|+
name|result
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ProcedureTestingUtility
operator|.
name|getExceptionCause
argument_list|(
name|result
argument_list|)
operator|instanceof
name|TableNotDisabledException
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|snapshotTableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecoveryAndDoubleExecution
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|ProcedureTestingUtility
operator|.
name|setKillAndToggleBeforeStoreUpdate
argument_list|(
name|procExec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Start the Restore snapshot procedure&& kill the executor
name|long
name|procId
init|=
name|procExec
operator|.
name|submitProcedure
argument_list|(
operator|new
name|RestoreSnapshotProcedure
argument_list|(
name|procExec
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|snapshotHTD
argument_list|,
name|snapshot
argument_list|)
argument_list|)
decl_stmt|;
comment|// Restart the executor and execute the step twice
name|MasterProcedureTestingUtility
operator|.
name|testRecoveryAndDoubleExecution
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|resetProcExecutorTestingKillFlag
argument_list|()
expr_stmt|;
name|validateSnapshotRestore
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|validateSnapshotRestore
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|enableTable
argument_list|(
name|snapshotTableName
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|currentHTD
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getDescriptor
argument_list|(
name|snapshotTableName
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|currentHTD
operator|.
name|hasFamily
argument_list|(
name|CF1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentHTD
operator|.
name|hasFamily
argument_list|(
name|CF2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|currentHTD
operator|.
name|hasFamily
argument_list|(
name|CF3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|currentHTD
operator|.
name|hasFamily
argument_list|(
name|CF4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentHTD
operator|.
name|getFamiliesKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|snapshotHTD
operator|.
name|getColumnFamilies
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyRowCount
argument_list|(
name|UTIL
argument_list|,
name|snapshotTableName
argument_list|,
name|rowCountCF1
operator|+
name|rowCountCF2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|snapshotTableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

