begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MapReduceTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|LauncherSecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MapReduceTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestCellCounter
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FAMILY_A_STRING
init|=
literal|"a"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FAMILY_B_STRING
init|=
literal|"b"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY_A
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|FAMILY_A_STRING
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY_B
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|FAMILY_B_STRING
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Path
name|FQ_OUTPUT_DIR
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OUTPUT_DIR
init|=
literal|"target"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test-data"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"output"
decl_stmt|;
specifier|private
specifier|static
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|FQ_OUTPUT_DIR
operator|=
operator|new
name|Path
argument_list|(
name|OUTPUT_DIR
argument_list|)
operator|.
name|makeQualified
argument_list|(
operator|new
name|LocalFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|OUTPUT_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test CellCounter all data should print to output    *    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testCellCounter
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|sourceTable
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"sourceTable"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|FAMILY_A
block|,
name|FAMILY_B
block|}
decl_stmt|;
name|Table
name|t
init|=
name|UTIL
operator|.
name|createTable
argument_list|(
name|sourceTable
argument_list|,
name|families
argument_list|)
decl_stmt|;
try|try
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_A
argument_list|,
name|QUALIFIER
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data11"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_B
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data12"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_A
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data13"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|ROW2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_B
argument_list|,
name|QUALIFIER
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Dat21"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_A
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data22"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_B
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data23"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
name|sourceTable
operator|.
name|getNameAsString
argument_list|()
block|,
name|FQ_OUTPUT_DIR
operator|.
name|toString
argument_list|()
block|,
literal|";"
block|,
literal|"^row1"
block|}
decl_stmt|;
name|runCount
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|FileInputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|OUTPUT_DIR
operator|+
name|File
operator|.
name|separator
operator|+
literal|"part-r-00000"
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"Total Families Across all Rows"
operator|+
literal|"\t"
operator|+
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"Total Qualifiers across all Rows"
operator|+
literal|"\t"
operator|+
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"Total ROWS"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"b;q"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"a;q"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"row1;a;q_Versions"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"row1;b;q_Versions"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|OUTPUT_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test CellCounter with time range all data should print to output    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testCellCounterStartTimeRange
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|sourceTable
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testCellCounterStartTimeRange"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|FAMILY_A
block|,
name|FAMILY_B
block|}
decl_stmt|;
name|Table
name|t
init|=
name|UTIL
operator|.
name|createTable
argument_list|(
name|sourceTable
argument_list|,
name|families
argument_list|)
decl_stmt|;
try|try
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_A
argument_list|,
name|QUALIFIER
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data11"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_B
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data12"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_A
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data13"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|ROW2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_B
argument_list|,
name|QUALIFIER
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Dat21"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_A
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data22"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_B
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data23"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
name|sourceTable
operator|.
name|getNameAsString
argument_list|()
block|,
name|FQ_OUTPUT_DIR
operator|.
name|toString
argument_list|()
block|,
literal|";"
block|,
literal|"^row1"
block|,
literal|"--starttime="
operator|+
name|now
block|,
literal|"--endtime="
operator|+
name|now
operator|+
literal|2
block|}
decl_stmt|;
name|runCount
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|FileInputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|OUTPUT_DIR
operator|+
name|File
operator|.
name|separator
operator|+
literal|"part-r-00000"
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"Total Families Across all Rows"
operator|+
literal|"\t"
operator|+
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"Total Qualifiers across all Rows"
operator|+
literal|"\t"
operator|+
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"Total ROWS"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"b;q"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"a;q"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"row1;a;q_Versions"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"row1;b;q_Versions"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|OUTPUT_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test CellCounter with time range all data should print to output    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testCellCounteEndTimeRange
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|sourceTable
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testCellCounterEndTimeRange"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|FAMILY_A
block|,
name|FAMILY_B
block|}
decl_stmt|;
name|Table
name|t
init|=
name|UTIL
operator|.
name|createTable
argument_list|(
name|sourceTable
argument_list|,
name|families
argument_list|)
decl_stmt|;
try|try
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_A
argument_list|,
name|QUALIFIER
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data11"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_B
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data12"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_A
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data13"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|ROW2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_B
argument_list|,
name|QUALIFIER
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Dat21"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_A
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data22"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_B
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data23"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
name|sourceTable
operator|.
name|getNameAsString
argument_list|()
block|,
name|FQ_OUTPUT_DIR
operator|.
name|toString
argument_list|()
block|,
literal|";"
block|,
literal|"^row1"
block|,
literal|"--endtime="
operator|+
name|now
operator|+
literal|1
block|}
decl_stmt|;
name|runCount
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|FileInputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|OUTPUT_DIR
operator|+
name|File
operator|.
name|separator
operator|+
literal|"part-r-00000"
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"Total Families Across all Rows"
operator|+
literal|"\t"
operator|+
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"Total Qualifiers across all Rows"
operator|+
literal|"\t"
operator|+
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"Total ROWS"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"b;q"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"a;q"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"row1;a;q_Versions"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"row1;b;q_Versions"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|OUTPUT_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test CellCounter with time range all data should print to output    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testCellCounteOutOfTimeRange
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|sourceTable
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testCellCounterOutTimeRange"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|FAMILY_A
block|,
name|FAMILY_B
block|}
decl_stmt|;
name|Table
name|t
init|=
name|UTIL
operator|.
name|createTable
argument_list|(
name|sourceTable
argument_list|,
name|families
argument_list|)
decl_stmt|;
try|try
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_A
argument_list|,
name|QUALIFIER
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data11"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_B
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data12"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_A
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data13"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|ROW2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_B
argument_list|,
name|QUALIFIER
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Dat21"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_A
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data22"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_B
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data23"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
name|sourceTable
operator|.
name|getNameAsString
argument_list|()
block|,
name|FQ_OUTPUT_DIR
operator|.
name|toString
argument_list|()
block|,
literal|";"
block|,
literal|"--starttime="
operator|+
name|now
operator|+
literal|1
block|,
literal|"--endtime="
operator|+
name|now
operator|+
literal|2
block|}
decl_stmt|;
name|runCount
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|FileInputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|OUTPUT_DIR
operator|+
name|File
operator|.
name|separator
operator|+
literal|"part-r-00000"
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// nothing should hace been emitted to the reducer
name|assertTrue
argument_list|(
name|data
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|OUTPUT_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|runCount
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
comment|// need to make a copy of the configuration because to make sure
comment|// different temp dirs are used.
name|int
name|status
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
operator|new
name|CellCounter
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
return|return
name|status
operator|==
literal|0
return|;
block|}
comment|/**    * Test main method of CellCounter    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testCellCounterMain
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintStream
name|oldPrintStream
init|=
name|System
operator|.
name|err
decl_stmt|;
name|SecurityManager
name|SECURITY_MANAGER
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|LauncherSecurityManager
name|newSecurityManager
init|=
operator|new
name|LauncherSecurityManager
argument_list|()
decl_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
name|newSecurityManager
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|data
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{}
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|CellCounter
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should be SecurityException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|newSecurityManager
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"ERROR: Wrong number of parameters:"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should be information about usage
name|assertTrue
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Usage:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|System
operator|.
name|setErr
argument_list|(
name|oldPrintStream
argument_list|)
expr_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
name|SECURITY_MANAGER
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test CellCounter for complete table all data should print to output    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testCellCounterForCompleteTable
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|sourceTable
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testCellCounterForCompleteTable"
argument_list|)
decl_stmt|;
name|String
name|outputPath
init|=
name|OUTPUT_DIR
operator|+
name|sourceTable
decl_stmt|;
name|LocalFileSystem
name|localFileSystem
init|=
operator|new
name|LocalFileSystem
argument_list|()
decl_stmt|;
name|Path
name|outputDir
init|=
operator|new
name|Path
argument_list|(
name|outputPath
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|localFileSystem
operator|.
name|getUri
argument_list|()
argument_list|,
name|localFileSystem
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|FAMILY_A
block|,
name|FAMILY_B
block|}
decl_stmt|;
name|Table
name|t
init|=
name|UTIL
operator|.
name|createTable
argument_list|(
name|sourceTable
argument_list|,
name|families
argument_list|)
decl_stmt|;
try|try
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_A
argument_list|,
name|QUALIFIER
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data11"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_B
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data12"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_A
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data13"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|ROW2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_B
argument_list|,
name|QUALIFIER
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Dat21"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_A
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data22"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAMILY_B
argument_list|,
name|QUALIFIER
argument_list|,
name|now
operator|+
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Data23"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
name|sourceTable
operator|.
name|getNameAsString
argument_list|()
block|,
name|outputDir
operator|.
name|toString
argument_list|()
block|,
literal|";"
block|}
decl_stmt|;
name|runCount
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|FileInputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|outputPath
operator|+
name|File
operator|.
name|separator
operator|+
literal|"part-r-00000"
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"Total Families Across all Rows"
operator|+
literal|"\t"
operator|+
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"Total Qualifiers across all Rows"
operator|+
literal|"\t"
operator|+
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"Total ROWS"
operator|+
literal|"\t"
operator|+
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"b;q"
operator|+
literal|"\t"
operator|+
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"a;q"
operator|+
literal|"\t"
operator|+
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"row1;a;q_Versions"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"row1;b;q_Versions"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"row2;a;q_Versions"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|"row2;b;q_Versions"
operator|+
literal|"\t"
operator|+
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|outputPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|TestCellCounterWithoutOutputDir
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"tableName"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|"CellCounter should exit with -1 as output directory is not specified."
argument_list|,
operator|-
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
operator|new
name|CellCounter
argument_list|()
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

