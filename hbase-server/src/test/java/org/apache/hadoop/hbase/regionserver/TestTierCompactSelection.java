begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestTierCompactSelection
extends|extends
name|TestDefaultCompactSelection
block|{
specifier|private
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestTierCompactSelection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|numTiers
init|=
literal|4
decl_stmt|;
specifier|private
name|String
name|strPrefix
decl_stmt|,
name|strSchema
decl_stmt|,
name|strTier
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// setup config values necessary for store
name|strPrefix
operator|=
literal|"hbase.hstore.compaction."
expr_stmt|;
name|strSchema
operator|=
literal|"tbl."
operator|+
name|store
operator|.
name|getHRegion
argument_list|()
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"cf."
operator|+
name|store
operator|.
name|getFamily
argument_list|()
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"."
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setStrings
argument_list|(
name|strPrefix
operator|+
literal|"CompactionPolicy"
argument_list|,
literal|"TierBasedCompactionPolicy"
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|MAJOR_COMPACTION_PERIOD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// The following parameters are for default compaction
comment|// Some of them are used as default values of tier based compaction
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|strPrefix
operator|+
literal|"min"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|strPrefix
operator|+
literal|"max"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setLong
argument_list|(
name|strPrefix
operator|+
literal|"max.size"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setFloat
argument_list|(
name|strPrefix
operator|+
literal|"ratio"
argument_list|,
literal|10.0F
argument_list|)
expr_stmt|;
comment|// Specifying the family parameters here
name|conf
operator|.
name|setInt
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"NumCompactionTiers"
argument_list|,
name|numTiers
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"MinCompactSize"
argument_list|,
name|minSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"MaxCompactSize"
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
comment|// Specifying parameters for the default tier
name|strTier
operator|=
literal|""
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
name|strTier
operator|+
literal|"CompactionRatio"
argument_list|,
literal|0.1F
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
name|strTier
operator|+
literal|"MinFilesToCompact"
argument_list|,
name|minFiles
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
name|strTier
operator|+
literal|"MaxFilesToCompact"
argument_list|,
name|maxFiles
argument_list|)
expr_stmt|;
comment|// Specifying parameters for individual tiers here
comment|// Don't compact in this tier (likely to be in block cache)
name|strTier
operator|=
literal|"Tier.0."
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
name|strTier
operator|+
literal|"CompactionRatio"
argument_list|,
literal|0.0F
argument_list|)
expr_stmt|;
comment|// Most aggressive tier
name|strTier
operator|=
literal|"Tier.1."
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
name|strTier
operator|+
literal|"CompactionRatio"
argument_list|,
literal|2.0F
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
name|strTier
operator|+
literal|"MinFilesToCompact"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
name|strTier
operator|+
literal|"MaxFilesToCompact"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Medium tier
name|strTier
operator|=
literal|"Tier.2."
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
name|strTier
operator|+
literal|"CompactionRatio"
argument_list|,
literal|1.0F
argument_list|)
expr_stmt|;
comment|// Also include files in tier 1 here
name|conf
operator|.
name|setInt
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
name|strTier
operator|+
literal|"EndingIndexForTier"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Last tier - least aggressive compaction
comment|// has default tier settings only
comment|// Max Time elapsed is Infinity by default
block|}
annotation|@
name|Override
name|void
name|compactEquals
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|candidates
parameter_list|,
name|boolean
name|forcemajor
parameter_list|,
name|long
modifier|...
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|store
operator|.
name|forceMajor
operator|=
name|forcemajor
expr_stmt|;
comment|//update the policy for now in case any change
name|store
operator|.
name|setCompactionPolicy
argument_list|(
name|TierCompactionManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StoreFile
argument_list|>
name|actual
init|=
name|store
operator|.
name|compactionManager
operator|.
name|selectCompaction
argument_list|(
name|candidates
argument_list|,
name|Store
operator|.
name|NO_PRIORITY
argument_list|,
name|forcemajor
argument_list|)
operator|.
name|getFilesToCompact
argument_list|()
decl_stmt|;
name|store
operator|.
name|forceMajor
operator|=
literal|false
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|expected
argument_list|)
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|getSizes
argument_list|(
name|actual
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAgeBasedAssignment
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"Tier.0.MaxAgeInDisk"
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"Tier.1.MaxAgeInDisk"
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"Tier.2.MaxAgeInDisk"
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"Tier.0.MaxSize"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"Tier.1.MaxSize"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"Tier.2.MaxSize"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|//everything in first tier, don't compact!
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|toArrayList
argument_list|(
literal|151
argument_list|,
literal|30
argument_list|,
literal|13
argument_list|,
literal|12
argument_list|,
literal|11
argument_list|)
argument_list|,
name|toArrayList
argument_list|(
comment|// Sizes
literal|8
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
comment|// ageInDisk ( = currentTime - minFlushTime)
comment|/* empty expected */
argument_list|)
expr_stmt|;
comment|// Selected sizes
comment|//below minSize should compact
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|toArrayList
argument_list|(
literal|12
argument_list|,
literal|11
argument_list|,
literal|8
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|,
name|toArrayList
argument_list|(
literal|8
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|8
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//everything in second tier
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|toArrayList
argument_list|(
literal|251
argument_list|,
literal|70
argument_list|,
literal|13
argument_list|,
literal|12
argument_list|,
literal|11
argument_list|)
argument_list|,
name|toArrayList
argument_list|(
literal|80
argument_list|,
literal|50
argument_list|,
literal|40
argument_list|,
literal|20
argument_list|,
literal|11
argument_list|)
argument_list|)
argument_list|,
literal|70
argument_list|,
literal|13
argument_list|,
literal|12
argument_list|,
literal|11
argument_list|)
expr_stmt|;
comment|//everything in third tier
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|toArrayList
argument_list|(
literal|251
argument_list|,
literal|70
argument_list|,
literal|13
argument_list|,
literal|12
argument_list|,
literal|11
argument_list|)
argument_list|,
name|toArrayList
argument_list|(
literal|800
argument_list|,
literal|500
argument_list|,
literal|400
argument_list|,
literal|200
argument_list|,
literal|110
argument_list|)
argument_list|)
argument_list|,
literal|13
argument_list|,
literal|12
argument_list|,
literal|11
argument_list|)
expr_stmt|;
comment|//everything in fourth tier
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|toArrayList
argument_list|(
literal|251
argument_list|,
literal|70
argument_list|,
literal|13
argument_list|,
literal|12
argument_list|,
literal|11
argument_list|)
argument_list|,
name|toArrayList
argument_list|(
literal|8000
argument_list|,
literal|5000
argument_list|,
literal|4000
argument_list|,
literal|2000
argument_list|,
literal|1100
argument_list|)
argument_list|)
comment|/* empty expected */
argument_list|)
expr_stmt|;
comment|//Valid compaction in 4th tier with ratio 0.10, hits maxFilesToCompact
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|toArrayList
argument_list|(
literal|500
argument_list|,
literal|93
argument_list|,
literal|92
argument_list|,
literal|91
argument_list|,
literal|90
argument_list|,
literal|89
argument_list|,
literal|88
argument_list|,
literal|87
argument_list|,
literal|86
argument_list|,
literal|85
argument_list|,
literal|84
argument_list|,
literal|83
argument_list|,
literal|82
argument_list|,
literal|81
argument_list|,
literal|80
argument_list|)
argument_list|,
name|toArrayList
argument_list|(
literal|5094
argument_list|,
literal|5093
argument_list|,
literal|5092
argument_list|,
literal|5091
argument_list|,
literal|5090
argument_list|,
literal|5089
argument_list|,
literal|5088
argument_list|,
literal|5087
argument_list|,
literal|5086
argument_list|,
literal|5085
argument_list|,
literal|5084
argument_list|,
literal|5083
argument_list|,
literal|5082
argument_list|,
literal|5081
argument_list|,
literal|5080
argument_list|)
argument_list|)
argument_list|,
literal|93
argument_list|,
literal|92
argument_list|,
literal|91
argument_list|,
literal|90
argument_list|,
literal|89
argument_list|)
expr_stmt|;
comment|//Now mixing tiers 1,0, expected selection in tier 1 only
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|toArrayList
argument_list|(
literal|999
argument_list|,
literal|110
argument_list|,
literal|100
argument_list|,
literal|12
argument_list|,
literal|11
argument_list|)
argument_list|,
name|toArrayList
argument_list|(
literal|90
argument_list|,
literal|80
argument_list|,
literal|50
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|110
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|//Mixing tier 2,1, expected selection in tier 2 including tier 1 but not zero
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|toArrayList
argument_list|(
literal|999
argument_list|,
literal|110
argument_list|,
literal|100
argument_list|,
literal|12
argument_list|,
literal|11
argument_list|)
argument_list|,
name|toArrayList
argument_list|(
literal|900
argument_list|,
literal|800
argument_list|,
literal|500
argument_list|,
literal|40
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|110
argument_list|,
literal|100
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|//Mixing tier 2,1, expected selection in tier 1 because of recentFirstOrder = true
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|toArrayList
argument_list|(
literal|999
argument_list|,
literal|110
argument_list|,
literal|100
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|11
argument_list|)
argument_list|,
name|toArrayList
argument_list|(
literal|900
argument_list|,
literal|800
argument_list|,
literal|500
argument_list|,
literal|40
argument_list|,
literal|30
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"IsRecentFirstOrder"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//Mixing tier 2,1, expected selection in tier 1 because of recentFirstOrder = false
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|toArrayList
argument_list|(
literal|999
argument_list|,
literal|110
argument_list|,
literal|100
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|11
argument_list|)
argument_list|,
name|toArrayList
argument_list|(
literal|900
argument_list|,
literal|800
argument_list|,
literal|500
argument_list|,
literal|40
argument_list|,
literal|30
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|110
argument_list|,
literal|100
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|)
expr_stmt|;
comment|//Mixing all tier 3,2,1,0 expected selection in tier 1 only
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|toArrayList
argument_list|(
literal|999
argument_list|,
literal|800
argument_list|,
literal|110
argument_list|,
literal|100
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|11
argument_list|)
argument_list|,
name|toArrayList
argument_list|(
literal|9000
argument_list|,
literal|800
argument_list|,
literal|50
argument_list|,
literal|40
argument_list|,
literal|8
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|110
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|//Checking backward compatibility, first 3 files don't have minFlushTime,
comment|//all should go to tier 1, not tier 0
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|toArrayList
argument_list|(
literal|999
argument_list|,
literal|800
argument_list|,
literal|110
argument_list|,
literal|100
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|11
argument_list|)
argument_list|,
name|toArrayList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|40
argument_list|,
literal|8
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|999
argument_list|,
literal|800
argument_list|,
literal|110
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|//make sure too big files don't get compacted
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|toArrayList
argument_list|(
literal|1002
argument_list|,
literal|1001
argument_list|,
literal|999
argument_list|,
literal|800
argument_list|,
literal|700
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|11
argument_list|)
argument_list|,
name|toArrayList
argument_list|(
literal|900
argument_list|,
literal|80
argument_list|,
literal|50
argument_list|,
literal|40
argument_list|,
literal|30
argument_list|,
literal|20
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|999
argument_list|,
literal|800
argument_list|,
literal|700
argument_list|,
literal|12
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSizeBasedAssignment
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"MinCompactSize"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"Tier.0.MaxSize"
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"Tier.1.MaxSize"
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"Tier.2.MaxSize"
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"Tier.0.MaxAgeInDisk"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"Tier.1.MaxAgeInDisk"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"Tier.2.MaxAgeInDisk"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|500
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|500
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
comment|/* empty */
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|500
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
comment|/* empty */
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|500
argument_list|,
literal|23
argument_list|,
literal|11
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
comment|/* empty */
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|500
argument_list|,
literal|11
argument_list|,
literal|23
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|11
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|500
argument_list|,
literal|9
argument_list|,
literal|23
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|9
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|500
argument_list|,
literal|70
argument_list|,
literal|23
argument_list|,
literal|11
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
comment|/* empty */
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|500
argument_list|,
literal|60
argument_list|,
literal|23
argument_list|,
literal|11
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|60
argument_list|,
literal|23
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|500
argument_list|,
literal|90
argument_list|,
literal|60
argument_list|,
literal|23
argument_list|,
literal|11
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|90
argument_list|,
literal|60
argument_list|,
literal|23
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"IsRecentFirstOrder"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|500
argument_list|,
literal|450
argument_list|,
literal|60
argument_list|,
literal|23
argument_list|,
literal|11
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|450
argument_list|,
literal|60
argument_list|,
literal|23
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|450
argument_list|,
literal|500
argument_list|,
literal|60
argument_list|,
literal|23
argument_list|,
literal|11
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|450
argument_list|,
literal|500
argument_list|,
literal|60
argument_list|,
literal|23
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|1013
argument_list|,
literal|1012
argument_list|,
literal|1011
argument_list|,
literal|1010
argument_list|,
literal|1009
argument_list|,
literal|1008
argument_list|,
literal|1007
argument_list|,
literal|1006
argument_list|,
literal|1005
argument_list|,
literal|1004
argument_list|,
literal|1003
argument_list|,
literal|1002
argument_list|,
literal|1001
argument_list|,
literal|999
argument_list|,
literal|450
argument_list|,
literal|550
argument_list|)
argument_list|,
literal|999
argument_list|,
literal|450
argument_list|,
literal|550
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"MaxCompactSize"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|1013
argument_list|,
literal|1012
argument_list|,
literal|1011
argument_list|,
literal|1010
argument_list|,
literal|1009
argument_list|,
literal|1008
argument_list|,
literal|1007
argument_list|,
literal|1006
argument_list|,
literal|1005
argument_list|,
literal|1004
argument_list|,
literal|1003
argument_list|,
literal|1002
argument_list|,
literal|1001
argument_list|,
literal|999
argument_list|,
literal|450
argument_list|,
literal|550
argument_list|)
argument_list|,
literal|1013
argument_list|,
literal|1012
argument_list|,
literal|1011
argument_list|,
literal|1010
argument_list|,
literal|1009
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|1013
argument_list|,
literal|992
argument_list|,
literal|1011
argument_list|,
literal|1010
argument_list|,
literal|1009
argument_list|,
literal|1008
argument_list|,
literal|1007
argument_list|,
literal|1006
argument_list|,
literal|1005
argument_list|,
literal|1004
argument_list|,
literal|1003
argument_list|,
literal|1002
argument_list|,
literal|1001
argument_list|,
literal|999
argument_list|,
literal|450
argument_list|,
literal|550
argument_list|)
argument_list|,
literal|1013
argument_list|,
literal|992
argument_list|,
literal|1011
argument_list|,
literal|1010
argument_list|,
literal|1009
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|992
argument_list|,
literal|993
argument_list|,
literal|1011
argument_list|,
literal|990
argument_list|,
literal|1009
argument_list|,
literal|998
argument_list|,
literal|1007
argument_list|,
literal|996
argument_list|,
literal|1005
argument_list|,
literal|994
argument_list|,
literal|1003
argument_list|,
literal|992
argument_list|,
literal|1001
argument_list|,
literal|999
argument_list|,
literal|450
argument_list|,
literal|550
argument_list|)
argument_list|,
literal|992
argument_list|,
literal|993
argument_list|,
literal|1011
argument_list|,
literal|990
argument_list|,
literal|1009
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"IsRecentFirstOrder"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|500
argument_list|,
literal|450
argument_list|,
literal|60
argument_list|,
literal|23
argument_list|,
literal|11
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|60
argument_list|,
literal|23
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|450
argument_list|,
literal|500
argument_list|,
literal|60
argument_list|,
literal|23
argument_list|,
literal|11
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|60
argument_list|,
literal|23
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|1013
argument_list|,
literal|1012
argument_list|,
literal|1011
argument_list|,
literal|1010
argument_list|,
literal|1009
argument_list|,
literal|1008
argument_list|,
literal|1007
argument_list|,
literal|1006
argument_list|,
literal|1005
argument_list|,
literal|1004
argument_list|,
literal|1003
argument_list|,
literal|1002
argument_list|,
literal|1001
argument_list|,
literal|999
argument_list|,
literal|450
argument_list|,
literal|550
argument_list|)
argument_list|,
literal|999
argument_list|,
literal|450
argument_list|,
literal|550
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|992
argument_list|,
literal|993
argument_list|,
literal|1011
argument_list|,
literal|990
argument_list|,
literal|1009
argument_list|,
literal|998
argument_list|,
literal|1007
argument_list|,
literal|996
argument_list|,
literal|1005
argument_list|,
literal|994
argument_list|,
literal|1003
argument_list|,
literal|992
argument_list|,
literal|1001
argument_list|,
literal|999
argument_list|,
literal|450
argument_list|,
literal|550
argument_list|)
argument_list|,
literal|999
argument_list|,
literal|450
argument_list|,
literal|550
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|992
argument_list|,
literal|993
argument_list|,
literal|1011
argument_list|,
literal|990
argument_list|,
literal|1009
argument_list|,
literal|998
argument_list|,
literal|1007
argument_list|,
literal|996
argument_list|,
literal|1005
argument_list|,
literal|994
argument_list|,
literal|1003
argument_list|,
literal|992
argument_list|,
literal|991
argument_list|,
literal|999
argument_list|,
literal|450
argument_list|,
literal|550
argument_list|)
argument_list|,
literal|992
argument_list|,
literal|991
argument_list|,
literal|999
argument_list|,
literal|450
argument_list|,
literal|550
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|false
argument_list|,
literal|992
argument_list|,
literal|993
argument_list|,
literal|1011
argument_list|,
literal|990
argument_list|,
literal|1009
argument_list|,
literal|998
argument_list|,
literal|1007
argument_list|,
literal|996
argument_list|,
literal|1005
argument_list|,
literal|994
argument_list|,
literal|1003
argument_list|,
literal|992
argument_list|,
literal|991
argument_list|,
literal|999
argument_list|,
literal|450
argument_list|,
literal|550
argument_list|,
literal|1001
argument_list|)
argument_list|,
literal|992
argument_list|,
literal|993
argument_list|,
literal|1011
argument_list|,
literal|990
argument_list|,
literal|1009
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testCompactionRatio
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"NumCompactionTiers"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|strPrefix
operator|+
name|strSchema
operator|+
literal|"Tier.0.CompactionRatio"
argument_list|,
literal|1.0F
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|strPrefix
operator|+
literal|"max"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|super
operator|.
name|testCompactionRatio
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testOffPeakCompactionRatio
parameter_list|()
throws|throws
name|IOException
block|{}
block|}
end_class

end_unit

