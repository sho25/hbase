begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
operator|.
name|META_TABLE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AsyncMetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSTableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/**  * Class to test asynchronous table admin operations.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAsyncTableAdminApi
extends|extends
name|TestAsyncAdminBase
block|{
annotation|@
name|Test
specifier|public
name|void
name|testTableExist
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|exist
decl_stmt|;
name|exist
operator|=
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|exist
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|exist
operator|=
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exist
argument_list|)
expr_stmt|;
name|exist
operator|=
name|admin
operator|.
name|tableExists
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exist
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListTables
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numTables
init|=
name|admin
operator|.
name|listTables
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableName1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"1"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"3"
argument_list|)
decl_stmt|;
name|TableName
index|[]
name|tables
init|=
operator|new
name|TableName
index|[]
block|{
name|tableName1
block|,
name|tableName2
block|,
name|tableName3
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|createTableWithDefaultConf
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|tableDescs
init|=
name|admin
operator|.
name|listTables
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|tableDescs
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|size
operator|>=
name|tables
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
operator|&&
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|tableDescs
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Not found: "
operator|+
name|tables
index|[
name|i
index|]
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNames
init|=
name|admin
operator|.
name|listTableNames
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|size
operator|=
name|tableNames
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|size
operator|==
operator|(
name|numTables
operator|+
name|tables
operator|.
name|length
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
operator|&&
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|tableNames
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|equals
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Not found: "
operator|+
name|tables
index|[
name|i
index|]
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|tableDescs
operator|=
name|admin
operator|.
name|listTables
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not found system tables"
argument_list|,
name|tableDescs
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|tableNames
operator|=
name|admin
operator|.
name|listTableNames
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not found system tables"
argument_list|,
name|tableNames
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTableDescriptor
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|FAMILY
block|,
name|FAMILY_0
block|,
name|FAMILY_1
block|}
decl_stmt|;
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|builder
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TableDescriptor
name|desc
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|ModifyableTableDescriptor
name|modifyableDesc
init|=
operator|(
operator|(
name|ModifyableTableDescriptor
operator|)
name|desc
operator|)
decl_stmt|;
name|TableDescriptor
name|confirmedHtd
init|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|modifyableDesc
operator|.
name|compareTo
argument_list|(
operator|(
name|ModifyableTableDescriptor
operator|)
name|confirmedHtd
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTable
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|tables
init|=
name|admin
operator|.
name|listTables
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|numTables
init|=
name|tables
operator|.
name|size
argument_list|()
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|tables
operator|=
name|admin
operator|.
name|listTables
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numTables
operator|+
literal|1
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table must be enabled."
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|tableName
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TableState
operator|.
name|State
name|getStateFromMeta
parameter_list|(
name|TableName
name|table
parameter_list|)
throws|throws
name|Exception
block|{
name|Optional
argument_list|<
name|TableState
argument_list|>
name|state
init|=
name|AsyncMetaTableAccessor
operator|.
name|getTableState
argument_list|(
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
argument_list|,
name|table
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|state
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableNumberOfRegions
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncTable
argument_list|<
name|AdvancedScanResultConsumer
argument_list|>
name|metaTable
init|=
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regionLocations
init|=
name|AsyncMetaTableAccessor
operator|.
name|getTableHRegionLocations
argument_list|(
name|metaTable
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Table should have only 1 region"
argument_list|,
literal|1
argument_list|,
name|regionLocations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_2"
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName2
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
block|{
literal|42
block|}
block|}
argument_list|)
expr_stmt|;
name|regionLocations
operator|=
name|AsyncMetaTableAccessor
operator|.
name|getTableHRegionLocations
argument_list|(
name|metaTable
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|tableName2
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table should have only 2 region"
argument_list|,
literal|2
argument_list|,
name|regionLocations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_3"
argument_list|)
decl_stmt|;
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName3
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
literal|"a"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"z"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|3
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|regionLocations
operator|=
name|AsyncMetaTableAccessor
operator|.
name|getTableHRegionLocations
argument_list|(
name|metaTable
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|tableName3
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table should have only 3 region"
argument_list|,
literal|3
argument_list|,
name|regionLocations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName4
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_4"
argument_list|)
decl_stmt|;
name|builder
operator|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName4
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
literal|"a"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"z"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to create a table with only 2 regions using this API."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompletionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
block|}
specifier|final
name|TableName
name|tableName5
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_5"
argument_list|)
decl_stmt|;
name|builder
operator|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName5
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|127
block|}
argument_list|,
literal|16
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|regionLocations
operator|=
name|AsyncMetaTableAccessor
operator|.
name|getTableHRegionLocations
argument_list|(
name|metaTable
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|tableName5
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table should have 16 region"
argument_list|,
literal|16
argument_list|,
name|regionLocations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableWithRegions
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|splitKeys
init|=
block|{
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|}
block|, }
decl_stmt|;
name|int
name|expectedRegions
init|=
name|splitKeys
operator|.
name|length
operator|+
literal|1
decl_stmt|;
name|boolean
name|tablesOnMaster
init|=
name|LoadBalancer
operator|.
name|isTablesOnMaster
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|boolean
name|tableAvailable
init|=
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|tableName
argument_list|,
name|splitKeys
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Table should be created with splitKyes + 1 rows in META"
argument_list|,
name|tableAvailable
argument_list|)
expr_stmt|;
name|AsyncTable
argument_list|<
name|AdvancedScanResultConsumer
argument_list|>
name|metaTable
init|=
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
name|AsyncMetaTableAccessor
operator|.
name|getTableHRegionLocations
argument_list|(
name|metaTable
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|HRegionLocation
argument_list|>
name|hris
init|=
name|regions
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions"
argument_list|)
expr_stmt|;
name|RegionInfo
name|hri
decl_stmt|;
name|hris
operator|=
name|regions
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
operator|==
literal|null
operator|||
name|hri
operator|.
name|getStartKey
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|6
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|6
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|7
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|7
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|8
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|8
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
operator|==
literal|null
operator|||
name|hri
operator|.
name|getEndKey
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|tablesOnMaster
condition|)
block|{
name|verifyRoundRobinDistribution
argument_list|(
name|regions
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
block|}
comment|// Now test using start/end with a number of regions
comment|// Use 80 bit numbers to make sure we aren't limited
name|byte
index|[]
name|startKey
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
decl_stmt|;
comment|// Splitting into 10 regions, we expect (null,1) ... (9, null)
comment|// with (1,2) (2,3) (3,4) (4,5) (5,6) (6,7) (7,8) (8,9) in the middle
name|expectedRegions
operator|=
literal|10
expr_stmt|;
specifier|final
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_2"
argument_list|)
decl_stmt|;
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName2
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|expectedRegions
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|regions
operator|=
name|AsyncMetaTableAccessor
operator|.
name|getTableHRegionLocations
argument_list|(
name|metaTable
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|tableName2
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions"
argument_list|)
expr_stmt|;
name|hris
operator|=
name|regions
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
operator|==
literal|null
operator|||
name|hri
operator|.
name|getStartKey
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
operator|==
literal|null
operator|||
name|hri
operator|.
name|getEndKey
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|tablesOnMaster
condition|)
block|{
comment|// This don't work if master is not carrying regions. FIX. TODO.
name|verifyRoundRobinDistribution
argument_list|(
name|regions
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
block|}
comment|// Try once more with something that divides into something infinite
name|startKey
operator|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|endKey
operator|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|expectedRegions
operator|=
literal|5
expr_stmt|;
specifier|final
name|TableName
name|tableName3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_3"
argument_list|)
decl_stmt|;
name|builder
operator|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName3
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|expectedRegions
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|regions
operator|=
name|AsyncMetaTableAccessor
operator|.
name|getTableHRegionLocations
argument_list|(
name|metaTable
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|tableName3
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions"
argument_list|)
expr_stmt|;
if|if
condition|(
name|tablesOnMaster
condition|)
block|{
comment|// This don't work if master is not carrying regions. FIX. TODO.
name|verifyRoundRobinDistribution
argument_list|(
name|regions
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
block|}
comment|// Try an invalid case where there are duplicate split keys
name|splitKeys
operator|=
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|}
expr_stmt|;
specifier|final
name|TableName
name|tableName4
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_4"
argument_list|)
decl_stmt|;
try|try
block|{
name|createTableWithDefaultConf
argument_list|(
name|tableName4
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to create this table because of "
operator|+
literal|"duplicate split keys"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompletionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyRoundRobinDistribution
parameter_list|(
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
parameter_list|,
name|int
name|expectedRegions
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numRS
init|=
operator|(
operator|(
name|ClusterConnection
operator|)
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|getCurrentNrHRS
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|server2Regions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|regions
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|loc
parameter_list|)
lambda|->
block|{
name|ServerName
name|server
init|=
name|loc
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|server2Regions
operator|.
name|computeIfAbsent
argument_list|(
name|server
argument_list|,
parameter_list|(
name|s
parameter_list|)
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|loc
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|numRS
operator|>=
literal|2
condition|)
block|{
comment|// Ignore the master region server,
comment|// which contains less regions by intention.
name|numRS
operator|--
expr_stmt|;
block|}
name|float
name|average
init|=
operator|(
name|float
operator|)
name|expectedRegions
operator|/
name|numRS
decl_stmt|;
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|average
argument_list|)
decl_stmt|;
name|int
name|max
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|average
argument_list|)
decl_stmt|;
name|server2Regions
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|regionList
parameter_list|)
lambda|->
block|{
name|assertTrue
argument_list|(
name|regionList
operator|.
name|size
argument_list|()
operator|==
name|min
operator|||
name|regionList
operator|.
name|size
argument_list|()
operator|==
name|max
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableWithOnlyEmptyStartRow
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
literal|1
index|]
index|[]
decl_stmt|;
name|splitKeys
index|[
literal|0
index|]
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
try|try
block|{
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Test case should fail as empty split key is passed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompletionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableWithEmptyRowInTheSplitKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
literal|3
index|]
index|[]
decl_stmt|;
name|splitKeys
index|[
literal|0
index|]
operator|=
literal|"region1"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|splitKeys
index|[
literal|1
index|]
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
name|splitKeys
index|[
literal|2
index|]
operator|=
literal|"region2"
operator|.
name|getBytes
argument_list|()
expr_stmt|;
try|try
block|{
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Test case should fail as empty split key is passed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompletionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteTable
parameter_list|()
throws|throws
name|Exception
block|{
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncateTable
parameter_list|()
throws|throws
name|Exception
block|{
name|testTruncateTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncateTablePreservingSplits
parameter_list|()
throws|throws
name|Exception
block|{
name|testTruncateTable
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testTruncateTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
name|boolean
name|preserveSplits
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|splitKeys
index|[
literal|0
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|splitKeys
index|[
literal|1
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|8
argument_list|)
expr_stmt|;
comment|// Create& Fill the table
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
init|=
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|expectedRows
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedRows
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|table
operator|.
name|scanAll
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Truncate& Verify
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|truncateTable
argument_list|(
name|tableName
argument_list|,
name|preserveSplits
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|table
operator|.
name|scanAll
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|preserveSplits
condition|)
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisableAndEnableTable
parameter_list|()
throws|throws
name|Exception
block|{
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
init|=
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table must be disabled."
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|tableName
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that table is disabled
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
try|try
block|{
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|ok
operator|=
literal|false
expr_stmt|;
comment|// verify that scan encounters correct exception
try|try
block|{
name|table
operator|.
name|scanAll
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|this
operator|.
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table must be enabled."
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|tableName
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that table is enabled
try|try
block|{
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisableAndEnableTables
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"1"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName1
argument_list|)
expr_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName2
argument_list|)
expr_stmt|;
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table1
init|=
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|tableName1
argument_list|)
decl_stmt|;
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table2
init|=
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|tableName1
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|table1
operator|.
name|put
argument_list|(
name|put
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|table2
operator|.
name|put
argument_list|(
name|put
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|table1
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|table2
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|admin
operator|.
name|listTableNames
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|".*"
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|forEach
argument_list|(
name|t
lambda|->
name|admin
operator|.
name|disableTable
argument_list|(
name|t
argument_list|)
operator|.
name|join
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test that tables are disabled
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
try|try
block|{
name|table1
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|table2
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|listTableNames
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|".*"
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|forEach
argument_list|(
name|t
lambda|->
name|admin
operator|.
name|enableTable
argument_list|(
name|t
argument_list|)
operator|.
name|join
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test that tables are enabled
try|try
block|{
name|table1
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
try|try
block|{
name|table2
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnableTableRetainAssignment
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|splitKeys
init|=
block|{
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|}
block|}
decl_stmt|;
name|int
name|expectedRegions
init|=
name|splitKeys
operator|.
name|length
operator|+
literal|1
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|AsyncTable
argument_list|<
name|AdvancedScanResultConsumer
argument_list|>
name|metaTable
init|=
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
name|AsyncMetaTableAccessor
operator|.
name|getTableHRegionLocations
argument_list|(
name|metaTable
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Disable table.
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Enable table, use retain assignment to assign regions.
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions2
init|=
name|AsyncMetaTableAccessor
operator|.
name|getTableHRegionLocations
argument_list|(
name|metaTable
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Check the assignment.
name|assertEquals
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|regions2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|regions2
operator|.
name|containsAll
argument_list|(
name|regions
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisableCatalogTable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|this
operator|.
name|admin
operator|.
name|disableTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected to throw ConstraintException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
comment|// Before the fix for HBASE-6146, the below table creation was failing as the hbase:meta table
comment|// actually getting disabled by the disableTable() call.
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddColumnFamily
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a table with two families
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_0
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Verify the table descriptor
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|)
expr_stmt|;
comment|// Modify the table removing one family and verify the descriptor
name|admin
operator|.
name|addColumnFamily
argument_list|(
name|tableName
argument_list|,
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_1
argument_list|)
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|,
name|FAMILY_1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddSameColumnFamilyTwice
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a table with one families
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_0
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Verify the table descriptor
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|)
expr_stmt|;
comment|// Modify the table removing one family and verify the descriptor
name|admin
operator|.
name|addColumnFamily
argument_list|(
name|tableName
argument_list|,
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_1
argument_list|)
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|,
name|FAMILY_1
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Add same column family again - expect failure
name|this
operator|.
name|admin
operator|.
name|addColumnFamily
argument_list|(
name|tableName
argument_list|,
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_1
argument_list|)
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Delete a non-exist column family should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifyColumnFamily
parameter_list|()
throws|throws
name|Exception
block|{
name|TableDescriptorBuilder
name|tdBuilder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|cfd
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_0
argument_list|)
decl_stmt|;
name|int
name|blockSize
init|=
name|cfd
operator|.
name|getBlocksize
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tdBuilder
operator|.
name|addColumnFamily
argument_list|(
name|cfd
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Verify the table descriptor
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|)
expr_stmt|;
name|int
name|newBlockSize
init|=
literal|2
operator|*
name|blockSize
decl_stmt|;
name|cfd
operator|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|FAMILY_0
argument_list|)
operator|.
name|setBlocksize
argument_list|(
name|newBlockSize
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Modify colymn family
name|admin
operator|.
name|modifyColumnFamily
argument_list|(
name|tableName
argument_list|,
name|cfd
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|TableDescriptor
name|htd
init|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ColumnFamilyDescriptor
name|hcfd
init|=
name|htd
operator|.
name|getColumnFamily
argument_list|(
name|FAMILY_0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hcfd
operator|.
name|getBlocksize
argument_list|()
operator|==
name|newBlockSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifyNonExistingColumnFamily
parameter_list|()
throws|throws
name|Exception
block|{
name|TableDescriptorBuilder
name|tdBuilder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|cfd
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_0
argument_list|)
decl_stmt|;
name|int
name|blockSize
init|=
name|cfd
operator|.
name|getBlocksize
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tdBuilder
operator|.
name|addColumnFamily
argument_list|(
name|cfd
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Verify the table descriptor
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|)
expr_stmt|;
name|int
name|newBlockSize
init|=
literal|2
operator|*
name|blockSize
decl_stmt|;
name|cfd
operator|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|FAMILY_1
argument_list|)
operator|.
name|setBlocksize
argument_list|(
name|newBlockSize
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Modify a column family that is not in the table.
try|try
block|{
name|admin
operator|.
name|modifyColumnFamily
argument_list|(
name|tableName
argument_list|,
name|cfd
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Modify a non-exist column family should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteColumnFamily
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a table with two families
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_0
argument_list|)
argument_list|)
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_1
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Verify the table descriptor
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|,
name|FAMILY_1
argument_list|)
expr_stmt|;
comment|// Modify the table removing one family and verify the descriptor
name|admin
operator|.
name|deleteColumnFamily
argument_list|(
name|tableName
argument_list|,
name|FAMILY_1
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteSameColumnFamilyTwice
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a table with two families
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_0
argument_list|)
argument_list|)
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_1
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Verify the table descriptor
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|,
name|FAMILY_1
argument_list|)
expr_stmt|;
comment|// Modify the table removing one family and verify the descriptor
name|admin
operator|.
name|deleteColumnFamily
argument_list|(
name|tableName
argument_list|,
name|FAMILY_1
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|verifyTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Delete again - expect failure
name|admin
operator|.
name|deleteColumnFamily
argument_list|(
name|tableName
argument_list|,
name|FAMILY_1
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Delete a non-exist column family should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
block|}
specifier|private
name|void
name|verifyTableDescriptor
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Verify descriptor from master
name|TableDescriptor
name|htd
init|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|verifyTableDescriptor
argument_list|(
name|htd
argument_list|,
name|tableName
argument_list|,
name|families
argument_list|)
expr_stmt|;
comment|// Verify descriptor from HDFS
name|MasterFileSystem
name|mfs
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
decl_stmt|;
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|mfs
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|TableDescriptor
name|td
init|=
name|FSTableDescriptors
operator|.
name|getTableDescriptorFromFs
argument_list|(
name|mfs
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|tableDir
argument_list|)
decl_stmt|;
name|verifyTableDescriptor
argument_list|(
name|td
argument_list|,
name|tableName
argument_list|,
name|families
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyTableDescriptor
parameter_list|(
specifier|final
name|TableDescriptor
name|htd
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
modifier|...
name|families
parameter_list|)
block|{
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|htdFamilies
init|=
name|htd
operator|.
name|getColumnFamilyNames
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|families
operator|.
name|length
argument_list|,
name|htdFamilies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|familyName
range|:
name|families
control|)
block|{
name|assertTrue
argument_list|(
literal|"Expected family "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|familyName
argument_list|)
argument_list|,
name|htdFamilies
operator|.
name|contains
argument_list|(
name|familyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsTableEnabledAndDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableAvailableWithRandomSplitKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
literal|1
index|]
index|[]
decl_stmt|;
name|splitKeys
operator|=
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|}
expr_stmt|;
name|boolean
name|tableAvailable
init|=
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|tableName
argument_list|,
name|splitKeys
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Table should be created with 1 row in META"
argument_list|,
name|tableAvailable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompactionTimestamps
parameter_list|()
throws|throws
name|Exception
block|{
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
init|=
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|Long
argument_list|>
name|ts
init|=
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|ts
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|ts
operator|=
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// no files written -> no data
name|assertFalse
argument_list|(
name|ts
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|ts
operator|=
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// still 0, we flushed a file, but no major compaction happened
name|assertFalse
argument_list|(
name|ts
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|regionName
init|=
name|ASYNC_CONN
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
operator|.
name|getRegionLocation
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|Long
argument_list|>
name|ts1
init|=
name|admin
operator|.
name|getLastMajorCompactionTimestampForRegion
argument_list|(
name|regionName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|ts1
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|ts1
operator|=
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// make sure the region API returns the same value, as the old file is still around
name|assertFalse
argument_list|(
name|ts1
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|long
name|curt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|waitTime
init|=
literal|10000
decl_stmt|;
name|long
name|endt
init|=
name|curt
operator|+
name|waitTime
decl_stmt|;
name|CompactionState
name|state
init|=
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Current compaction state 1 is "
operator|+
name|state
argument_list|)
expr_stmt|;
while|while
condition|(
name|state
operator|==
name|CompactionState
operator|.
name|NONE
operator|&&
name|curt
operator|<
name|endt
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|state
operator|=
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|curt
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Current compaction state 2 is "
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
comment|// Now, should have the right compaction state, let's wait until the compaction is done
if|if
condition|(
name|state
operator|==
name|CompactionState
operator|.
name|MAJOR
condition|)
block|{
name|state
operator|=
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Current compaction state 3 is "
operator|+
name|state
argument_list|)
expr_stmt|;
while|while
condition|(
name|state
operator|!=
name|CompactionState
operator|.
name|NONE
operator|&&
name|curt
operator|<
name|endt
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|state
operator|=
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Current compaction state 4 is "
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Sleep to wait region server report
name|Thread
operator|.
name|sleep
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.regionserver.msginterval"
argument_list|,
literal|3
operator|*
literal|1000
argument_list|)
operator|*
literal|2
argument_list|)
expr_stmt|;
name|ts
operator|=
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// after a compaction our earliest timestamp will have progressed forward
name|assertTrue
argument_list|(
name|ts
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ts
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// region api still the same
name|ts1
operator|=
name|admin
operator|.
name|getLastMajorCompactionTimestampForRegion
argument_list|(
name|regionName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ts1
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
operator|.
name|get
argument_list|()
argument_list|,
name|ts1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|ts
operator|=
name|admin
operator|.
name|getLastMajorCompactionTimestamp
argument_list|(
name|tableName
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ts
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
operator|.
name|get
argument_list|()
argument_list|,
name|ts1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ts1
operator|=
name|admin
operator|.
name|getLastMajorCompactionTimestampForRegion
argument_list|(
name|regionName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ts1
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ts
operator|.
name|get
argument_list|()
argument_list|,
name|ts1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

