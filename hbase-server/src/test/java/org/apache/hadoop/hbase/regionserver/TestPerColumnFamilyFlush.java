begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * This test verifies the correctness of the Per Column Family flushing strategy  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestPerColumnFamilyFlush
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestPerColumnFamilyFlush
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Path
name|DIR
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"TestHRegion"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|TableName
name|TABLENAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestPerColumnFamilyFlush"
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|FAMILIES
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f3"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f4"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f5"
argument_list|)
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY1
init|=
name|FAMILIES
index|[
literal|0
index|]
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY2
init|=
name|FAMILIES
index|[
literal|1
index|]
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY3
init|=
name|FAMILIES
index|[
literal|2
index|]
decl_stmt|;
specifier|private
name|HRegion
name|initHRegion
parameter_list|(
name|String
name|callingMethod
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|FAMILIES
control|)
block|{
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TABLENAME
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|DIR
argument_list|,
name|callingMethod
argument_list|)
decl_stmt|;
return|return
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|info
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|htd
argument_list|)
return|;
block|}
comment|// A helper function to create puts.
specifier|private
name|Put
name|createPut
parameter_list|(
name|int
name|familyNum
parameter_list|,
name|int
name|putNum
parameter_list|)
block|{
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
operator|+
name|familyNum
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|familyNum
operator|+
literal|"-"
operator|+
name|putNum
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
operator|+
name|familyNum
operator|+
literal|"-"
operator|+
name|putNum
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|familyNum
operator|-
literal|1
index|]
argument_list|,
name|qf
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
comment|// A helper function to create puts.
specifier|private
name|Get
name|createGet
parameter_list|(
name|int
name|familyNum
parameter_list|,
name|int
name|putNum
parameter_list|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|familyNum
operator|+
literal|"-"
operator|+
name|putNum
argument_list|)
decl_stmt|;
return|return
operator|new
name|Get
argument_list|(
name|row
argument_list|)
return|;
block|}
comment|// A helper function to verify edits.
name|void
name|verifyEdit
parameter_list|(
name|int
name|familyNum
parameter_list|,
name|int
name|putNum
parameter_list|,
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|createGet
argument_list|(
name|familyNum
argument_list|,
name|putNum
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|FAMILIES
index|[
name|familyNum
operator|-
literal|1
index|]
decl_stmt|;
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
operator|+
name|familyNum
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
operator|+
name|familyNum
operator|+
literal|"-"
operator|+
name|putNum
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
operator|(
literal|"Missing Put#"
operator|+
name|putNum
operator|+
literal|" for CF# "
operator|+
name|familyNum
operator|)
argument_list|,
name|r
operator|.
name|getFamilyMap
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
operator|(
literal|"Missing Put#"
operator|+
name|putNum
operator|+
literal|" for CF# "
operator|+
name|familyNum
operator|)
argument_list|,
name|r
operator|.
name|getFamilyMap
argument_list|(
name|family
argument_list|)
operator|.
name|get
argument_list|(
name|qf
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
literal|"Incorrect value for Put#"
operator|+
name|putNum
operator|+
literal|" for CF# "
operator|+
name|familyNum
operator|)
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getFamilyMap
argument_list|(
name|family
argument_list|)
operator|.
name|get
argument_list|(
name|qf
argument_list|)
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testSelectiveFlushWhenEnabled
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Set up the configuration
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
literal|200
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FlushPolicyFactory
operator|.
name|HBASE_FLUSH_POLICY_KEY
argument_list|,
name|FlushAllLargeStoresPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FlushLargeStoresPolicy
operator|.
name|HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN
argument_list|,
literal|100
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// Intialize the region
name|Region
name|region
init|=
name|initHRegion
argument_list|(
literal|"testSelectiveFlushWhenEnabled"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Add 1200 entries for CF1, 100 for CF2 and 50 for CF3
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1200
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
literal|100
condition|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
literal|50
condition|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|long
name|totalMemstoreSize
init|=
name|region
operator|.
name|getMemstoreSize
argument_list|()
decl_stmt|;
comment|// Find the smallest LSNs for edits wrt to each CF.
name|long
name|smallestSeqCF1
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY1
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF2
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY2
argument_list|)
decl_stmt|;
name|long
name|smallestSeqCF3
init|=
name|region
operator|.
name|getOldestSeqIdOfStore
argument_list|(
name|FAMILY3
argument_list|)
decl_stmt|;
comment|// Find the sizes of the memstores of each CF.
name|long
name|cf1MemstoreSize
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|long
name|cf2MemstoreSize
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|long
name|cf3MemstoreSize
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
comment|// Get the overall smallest LSN in the region's memstores.
name|long
name|smallestSeqInRegionCurrentMemstore
init|=
name|getWAL
argument_list|(
name|region
argument_list|)
operator|.
name|getEarliestMemstoreSeqNum
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|// The overall smallest LSN in the region's memstores should be the same as
comment|// the LSN of the smallest edit in CF1
name|assertEquals
argument_list|(
name|smallestSeqCF1
argument_list|,
name|smallestSeqInRegionCurrentMemstore
argument_list|)
expr_stmt|;
comment|// Some other sanity checks.
name|assertTrue
argument_list|(
name|smallestSeqCF1
operator|<
name|smallestSeqCF2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|smallestSeqCF2
operator|<
name|smallestSeqCF3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf1MemstoreSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf2MemstoreSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf3MemstoreSize
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// The total memstore size should be the same as the sum of the sizes of
comment|// memstores of CF1, CF2 and CF3.
name|assertEquals
argument_list|(
name|totalMemstoreSize
operator|+
literal|3
operator|*
name|DefaultMemStore
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf1MemstoreSize
operator|+
name|cf2MemstoreSize
operator|+
name|cf3MemstoreSize
argument_list|)
expr_stmt|;
comment|// Flush!
name|region
operator|.
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Will use these to check if anything changed.
name|long
name|oldCF2MemstoreSize
init|=
name|cf2MemstoreSize
decl_stmt|;
name|long
name|oldCF3MemstoreSize
init|=
name|cf3MemstoreSize
decl_stmt|;
comment|// Recalculate everything
name|cf1MemstoreSize
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
expr_stmt|;
name|cf2MemstoreSize
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
expr_stmt|;
name|cf3MemstoreSize
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
expr_stmt|;
name|totalMemstoreSize
operator|=
name|region
operator|.
name|getMemstoreSize
argument_list|()
expr_stmt|;
name|smallestSeqInRegionCurrentMemstore
operator|=
name|getWAL
argument_list|(
name|region
argument_list|)
operator|.
name|getEarliestMemstoreSeqNum
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// We should have cleared out only CF1, since we chose the flush thresholds
comment|// and number of puts accordingly.
name|assertEquals
argument_list|(
name|DefaultMemStore
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf1MemstoreSize
argument_list|)
expr_stmt|;
comment|// Nothing should have happened to CF2, ...
name|assertEquals
argument_list|(
name|cf2MemstoreSize
argument_list|,
name|oldCF2MemstoreSize
argument_list|)
expr_stmt|;
comment|// ... or CF3
name|assertEquals
argument_list|(
name|cf3MemstoreSize
argument_list|,
name|oldCF3MemstoreSize
argument_list|)
expr_stmt|;
comment|// Now the smallest LSN in the region should be the same as the smallest
comment|// LSN in the memstore of CF2.
name|assertEquals
argument_list|(
name|smallestSeqInRegionCurrentMemstore
argument_list|,
name|smallestSeqCF2
argument_list|)
expr_stmt|;
comment|// Of course, this should hold too.
name|assertEquals
argument_list|(
name|totalMemstoreSize
operator|+
literal|2
operator|*
name|DefaultMemStore
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf2MemstoreSize
operator|+
name|cf3MemstoreSize
argument_list|)
expr_stmt|;
comment|// Now add more puts (mostly for CF2), so that we only flush CF2 this time.
for|for
control|(
name|int
name|i
init|=
literal|1200
init|;
name|i
operator|<
literal|2400
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add only 100 puts for CF3
if|if
condition|(
name|i
operator|-
literal|1200
operator|<
literal|100
condition|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// How much does the CF3 memstore occupy? Will be used later.
name|oldCF3MemstoreSize
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
expr_stmt|;
comment|// Flush again
name|region
operator|.
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Recalculate everything
name|cf1MemstoreSize
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
expr_stmt|;
name|cf2MemstoreSize
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
expr_stmt|;
name|cf3MemstoreSize
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
expr_stmt|;
name|totalMemstoreSize
operator|=
name|region
operator|.
name|getMemstoreSize
argument_list|()
expr_stmt|;
name|smallestSeqInRegionCurrentMemstore
operator|=
name|getWAL
argument_list|(
name|region
argument_list|)
operator|.
name|getEarliestMemstoreSeqNum
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// CF1 and CF2, both should be absent.
name|assertEquals
argument_list|(
name|DefaultMemStore
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf1MemstoreSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DefaultMemStore
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf2MemstoreSize
argument_list|)
expr_stmt|;
comment|// CF3 shouldn't have been touched.
name|assertEquals
argument_list|(
name|cf3MemstoreSize
argument_list|,
name|oldCF3MemstoreSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalMemstoreSize
operator|+
name|DefaultMemStore
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf3MemstoreSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|smallestSeqInRegionCurrentMemstore
argument_list|,
name|smallestSeqCF3
argument_list|)
expr_stmt|;
comment|// What happens when we hit the memstore limit, but we are not able to find
comment|// any Column Family above the threshold?
comment|// In that case, we should flush all the CFs.
comment|// Clearing the existing memstores.
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// The memstore limit is 200*1024 and the column family flush threshold is
comment|// around 50*1024. We try to just hit the memstore limit with each CF's
comment|// memstore being below the CF flush threshold.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|300
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|4
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|5
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Since we won't find any CF above the threshold, and hence no specific
comment|// store to flush, we should flush all the memstores.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|region
operator|.
name|getMemstoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testSelectiveFlushWhenNotEnabled
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Set up the configuration
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
literal|200
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FlushPolicyFactory
operator|.
name|HBASE_FLUSH_POLICY_KEY
argument_list|,
name|FlushAllStoresPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Intialize the HRegion
name|HRegion
name|region
init|=
name|initHRegion
argument_list|(
literal|"testSelectiveFlushWhenNotEnabled"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Add 1200 entries for CF1, 100 for CF2 and 50 for CF3
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1200
condition|;
name|i
operator|++
control|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
literal|100
condition|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
literal|50
condition|)
block|{
name|region
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|long
name|totalMemstoreSize
init|=
name|region
operator|.
name|getMemstoreSize
argument_list|()
decl_stmt|;
comment|// Find the sizes of the memstores of each CF.
name|long
name|cf1MemstoreSize
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|long
name|cf2MemstoreSize
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|long
name|cf3MemstoreSize
init|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
comment|// Some other sanity checks.
name|assertTrue
argument_list|(
name|cf1MemstoreSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf2MemstoreSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf3MemstoreSize
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// The total memstore size should be the same as the sum of the sizes of
comment|// memstores of CF1, CF2 and CF3.
name|assertEquals
argument_list|(
name|totalMemstoreSize
operator|+
literal|3
operator|*
name|DefaultMemStore
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf1MemstoreSize
operator|+
name|cf2MemstoreSize
operator|+
name|cf3MemstoreSize
argument_list|)
expr_stmt|;
comment|// Flush!
name|region
operator|.
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cf1MemstoreSize
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
expr_stmt|;
name|cf2MemstoreSize
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
expr_stmt|;
name|cf3MemstoreSize
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
expr_stmt|;
name|totalMemstoreSize
operator|=
name|region
operator|.
name|getMemstoreSize
argument_list|()
expr_stmt|;
name|long
name|smallestSeqInRegionCurrentMemstore
init|=
name|region
operator|.
name|getWAL
argument_list|()
operator|.
name|getEarliestMemstoreSeqNum
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|// Everything should have been cleared
name|assertEquals
argument_list|(
name|DefaultMemStore
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf1MemstoreSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DefaultMemStore
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf2MemstoreSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DefaultMemStore
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf3MemstoreSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|totalMemstoreSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HConstants
operator|.
name|NO_SEQNUM
argument_list|,
name|smallestSeqInRegionCurrentMemstore
argument_list|)
expr_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
comment|// Find the (first) region which has the specified name.
specifier|private
specifier|static
name|Pair
argument_list|<
name|Region
argument_list|,
name|HRegionServer
argument_list|>
name|getRegionWithName
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|JVMClusterUtil
operator|.
name|RegionServerThread
argument_list|>
name|rsts
init|=
name|cluster
operator|.
name|getRegionServerThreads
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|getRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|HRegionServer
name|hrs
init|=
name|rsts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
for|for
control|(
name|Region
name|region
range|:
name|hrs
operator|.
name|getOnlineRegions
argument_list|(
name|tableName
argument_list|)
control|)
block|{
return|return
name|Pair
operator|.
name|newPair
argument_list|(
name|region
argument_list|,
name|hrs
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|doTestLogReplay
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
comment|// Carefully chosen limits so that the memstore just flushes when we're done
name|conf
operator|.
name|set
argument_list|(
name|FlushPolicyFactory
operator|.
name|HBASE_FLUSH_POLICY_KEY
argument_list|,
name|FlushAllLargeStoresPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FlushLargeStoresPolicy
operator|.
name|HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numRegionServers
init|=
literal|4
decl_stmt|;
try|try
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|numRegionServers
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|TABLENAME
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILIES
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|FAMILIES
control|)
block|{
if|if
condition|(
operator|!
name|htd
operator|.
name|hasFamily
argument_list|(
name|family
argument_list|)
condition|)
block|{
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add 100 edits for CF1, 20 for CF2, 20 for CF3.
comment|// These will all be interleaved in the log.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|80
condition|;
name|i
operator|++
control|)
block|{
name|table
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
literal|10
condition|)
block|{
name|table
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|3
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|Region
argument_list|,
name|HRegionServer
argument_list|>
name|desiredRegionAndServer
init|=
name|getRegionWithName
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|Region
name|desiredRegion
init|=
name|desiredRegionAndServer
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Could not find a region which hosts the new region."
argument_list|,
name|desiredRegion
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Flush the region selectively.
name|desiredRegion
operator|.
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|long
name|totalMemstoreSize
decl_stmt|;
name|long
name|cf1MemstoreSize
decl_stmt|,
name|cf2MemstoreSize
decl_stmt|,
name|cf3MemstoreSize
decl_stmt|;
name|totalMemstoreSize
operator|=
name|desiredRegion
operator|.
name|getMemstoreSize
argument_list|()
expr_stmt|;
comment|// Find the sizes of the memstores of each CF.
name|cf1MemstoreSize
operator|=
name|desiredRegion
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
expr_stmt|;
name|cf2MemstoreSize
operator|=
name|desiredRegion
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
expr_stmt|;
name|cf3MemstoreSize
operator|=
name|desiredRegion
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
expr_stmt|;
comment|// CF1 Should have been flushed
name|assertEquals
argument_list|(
name|DefaultMemStore
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf1MemstoreSize
argument_list|)
expr_stmt|;
comment|// CF2 and CF3 shouldn't have been flushed.
name|assertTrue
argument_list|(
name|cf2MemstoreSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf3MemstoreSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalMemstoreSize
operator|+
literal|2
operator|*
name|DefaultMemStore
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|cf2MemstoreSize
operator|+
name|cf3MemstoreSize
argument_list|)
expr_stmt|;
comment|// Wait for the RS report to go across to the master, so that the master
comment|// is aware of which sequence ids have been flushed, before we kill the RS.
comment|// If in production, the RS dies before the report goes across, we will
comment|// safely replay all the edits.
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Abort the region server where we have the region hosted.
name|HRegionServer
name|rs
init|=
name|desiredRegionAndServer
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|rs
operator|.
name|abort
argument_list|(
literal|"testing"
argument_list|)
expr_stmt|;
comment|// The aborted region server's regions will be eventually assigned to some
comment|// other region server, and the get RPC call (inside verifyEdit()) will
comment|// retry for some time till the regions come back up.
comment|// Verify that all the edits are safe.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|80
condition|;
name|i
operator|++
control|)
block|{
name|verifyEdit
argument_list|(
literal|1
argument_list|,
name|i
argument_list|,
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
literal|10
condition|)
block|{
name|verifyEdit
argument_list|(
literal|2
argument_list|,
name|i
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|verifyEdit
argument_list|(
literal|3
argument_list|,
name|i
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Test Log Replay with Distributed Replay on.
comment|// In distributed log replay, the log splitters ask the master for the
comment|// last flushed sequence id for a region. This test would ensure that we
comment|// are doing the book-keeping correctly.
annotation|@
name|Ignore
argument_list|(
literal|"DLR is broken by HBASE-12751"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testLogReplayWithDistributedReplay
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|DISTRIBUTED_LOG_REPLAY_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestLogReplay
argument_list|()
expr_stmt|;
block|}
comment|// Test Log Replay with Distributed log split on.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testLogReplayWithDistributedLogSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|DISTRIBUTED_LOG_REPLAY_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestLogReplay
argument_list|()
expr_stmt|;
block|}
specifier|private
name|WAL
name|getWAL
parameter_list|(
name|Region
name|region
parameter_list|)
block|{
return|return
operator|(
operator|(
name|HRegion
operator|)
name|region
operator|)
operator|.
name|getWAL
argument_list|()
return|;
block|}
specifier|private
name|int
name|getNumRolledLogFiles
parameter_list|(
name|Region
name|region
parameter_list|)
block|{
return|return
name|AbstractFSWALProvider
operator|.
name|getNumRolledLogFiles
argument_list|(
name|getWAL
argument_list|(
name|region
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * When a log roll is about to happen, we do a flush of the regions who will be affected by the    * log roll. These flushes cannot be a selective flushes, otherwise we cannot roll the logs. This    * test ensures that we do a full-flush in that scenario.    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testFlushingWhenLogRolling
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testFlushingWhenLogRolling"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
literal|128
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FlushPolicyFactory
operator|.
name|HBASE_FLUSH_POLICY_KEY
argument_list|,
name|FlushAllLargeStoresPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|cfFlushSizeLowerBound
init|=
literal|2048
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FlushLargeStoresPolicy
operator|.
name|HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN
argument_list|,
name|cfFlushSizeLowerBound
argument_list|)
expr_stmt|;
comment|// One hour, prevent periodic rolling
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.regionserver.logroll.period"
argument_list|,
literal|60L
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// prevent rolling by size
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.regionserver.hlog.blocksize"
argument_list|,
literal|128L
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// Make it 10 as max logs before a flush comes on.
specifier|final
name|int
name|maxLogs
init|=
literal|10
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.maxlogs"
argument_list|,
name|maxLogs
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numRegionServers
init|=
literal|1
decl_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|numRegionServers
argument_list|)
expr_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES
argument_list|)
decl_stmt|;
comment|// Force flush the namespace table so edits to it are not hanging around as oldest
comment|// edits. Otherwise, below, when we make maximum number of WAL files, then it will be
comment|// the namespace region that is flushed and not the below 'desiredRegion'.
try|try
init|(
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|flush
argument_list|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
name|Pair
argument_list|<
name|Region
argument_list|,
name|HRegionServer
argument_list|>
name|desiredRegionAndServer
init|=
name|getRegionWithName
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|Region
name|desiredRegion
init|=
name|desiredRegionAndServer
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Could not find a region which hosts the new region."
argument_list|,
name|desiredRegion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing to region="
operator|+
name|desiredRegion
argument_list|)
expr_stmt|;
comment|// Add one row for both CFs.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|table
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now only add row to CF1, make sure when we force a flush, CF1 is larger than the lower
comment|// bound and CF2 and CF3 are smaller than the lower bound.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLogs
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|table
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
name|i
operator|*
literal|100
operator|+
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Roll the WAL. The log file count is less than maxLogs so no flush is triggered.
name|int
name|currentNumRolledLogFiles
init|=
name|getNumRolledLogFiles
argument_list|(
name|desiredRegion
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|getWAL
argument_list|(
name|desiredRegion
argument_list|)
operator|.
name|rollWriter
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|getNumRolledLogFiles
argument_list|(
name|desiredRegion
argument_list|)
operator|<=
name|currentNumRolledLogFiles
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|maxLogs
argument_list|,
name|getNumRolledLogFiles
argument_list|(
name|desiredRegion
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|desiredRegion
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
operator|>
name|cfFlushSizeLowerBound
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|desiredRegion
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
operator|<
name|cfFlushSizeLowerBound
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|desiredRegion
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
operator|<
name|cfFlushSizeLowerBound
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|createPut
argument_list|(
literal|1
argument_list|,
literal|12345678
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make numRolledLogFiles greater than maxLogs
name|desiredRegionAndServer
operator|.
name|getSecond
argument_list|()
operator|.
name|walRoller
operator|.
name|requestRollAll
argument_list|()
expr_stmt|;
comment|// Wait for some time till the flush caused by log rolling happens.
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30000
argument_list|,
operator|new
name|Waiter
operator|.
name|ExplainingPredicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|desiredRegion
operator|.
name|getMemstoreSize
argument_list|()
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|explainFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|memstoreSize
init|=
name|desiredRegion
operator|.
name|getMemstoreSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|memstoreSize
operator|>
literal|0
condition|)
block|{
return|return
literal|"Still have unflushed entries in memstore, memstore size is "
operator|+
name|memstoreSize
return|;
block|}
return|return
literal|"Unknown"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished waiting on flush after too many WALs..."
argument_list|)
expr_stmt|;
comment|// Individual families should have been flushed.
name|assertEquals
argument_list|(
name|DefaultMemStore
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|desiredRegion
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DefaultMemStore
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|desiredRegion
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DefaultMemStore
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|desiredRegion
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// let WAL cleanOldLogs
name|assertNull
argument_list|(
name|getWAL
argument_list|(
name|desiredRegion
argument_list|)
operator|.
name|rollWriter
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getNumRolledLogFiles
argument_list|(
name|desiredRegion
argument_list|)
operator|<
name|maxLogs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doPut
parameter_list|(
name|Table
name|table
parameter_list|,
name|long
name|memstoreFlushSize
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Region
name|region
init|=
name|getRegionWithName
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getFirst
argument_list|()
decl_stmt|;
comment|// cf1 4B per row, cf2 40B per row and cf3 400B per row
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf"
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value1
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|byte
index|[]
name|value2
init|=
operator|new
name|byte
index|[
literal|200
index|]
decl_stmt|;
name|byte
index|[]
name|value3
init|=
operator|new
name|byte
index|[
literal|400
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row-"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|rand
operator|.
name|setSeed
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|value3
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY1
argument_list|,
name|qf
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY2
argument_list|,
name|qf
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY3
argument_list|,
name|qf
argument_list|,
name|value3
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// slow down to let regionserver flush region.
while|while
condition|(
name|region
operator|.
name|getMemstoreSize
argument_list|()
operator|>
name|memstoreFlushSize
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Under the same write load, small stores should have less store files when
comment|// percolumnfamilyflush enabled.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testCompareStoreFileCount
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|memstoreFlushSize
init|=
literal|1024L
operator|*
literal|1024
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
name|memstoreFlushSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FlushPolicyFactory
operator|.
name|HBASE_FLUSH_POLICY_KEY
argument_list|,
name|FlushAllStoresPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HStore
operator|.
name|BLOCKING_STOREFILES_KEY
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_REGION_SPLIT_POLICY_KEY
argument_list|,
name|ConstantSizeRegionSplitPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|htd
operator|.
name|setCompactionEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY2
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"==============Test with selective flush disabled==============="
argument_list|)
expr_stmt|;
name|int
name|cf1StoreFileCount
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|cf2StoreFileCount
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|cf3StoreFileCount
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|cf1StoreFileCount1
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|cf2StoreFileCount1
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|cf3StoreFileCount1
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|TABLENAME
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|TABLENAME
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|doPut
argument_list|(
name|table
argument_list|,
name|memstoreFlushSize
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|Region
name|region
init|=
name|getRegionWithName
argument_list|(
name|TABLENAME
argument_list|)
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|cf1StoreFileCount
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getStorefilesCount
argument_list|()
expr_stmt|;
name|cf2StoreFileCount
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getStorefilesCount
argument_list|()
expr_stmt|;
name|cf3StoreFileCount
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getStorefilesCount
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"==============Test with selective flush enabled==============="
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FlushPolicyFactory
operator|.
name|HBASE_FLUSH_POLICY_KEY
argument_list|,
name|FlushAllLargeStoresPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// default value of per-cf flush lower bound is too big, set to a small enough value
name|conf
operator|.
name|setLong
argument_list|(
name|FlushLargeStoresPolicy
operator|.
name|HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|TABLENAME
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|doPut
argument_list|(
name|table
argument_list|,
name|memstoreFlushSize
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|Region
name|region
init|=
name|getRegionWithName
argument_list|(
name|TABLENAME
argument_list|)
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|cf1StoreFileCount1
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY1
argument_list|)
operator|.
name|getStorefilesCount
argument_list|()
expr_stmt|;
name|cf2StoreFileCount1
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY2
argument_list|)
operator|.
name|getStorefilesCount
argument_list|()
expr_stmt|;
name|cf3StoreFileCount1
operator|=
name|region
operator|.
name|getStore
argument_list|(
name|FAMILY3
argument_list|)
operator|.
name|getStorefilesCount
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"disable selective flush: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|FAMILY1
argument_list|)
operator|+
literal|"=>"
operator|+
name|cf1StoreFileCount
operator|+
literal|", "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|FAMILY2
argument_list|)
operator|+
literal|"=>"
operator|+
name|cf2StoreFileCount
operator|+
literal|", "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|FAMILY3
argument_list|)
operator|+
literal|"=>"
operator|+
name|cf3StoreFileCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"enable selective flush: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|FAMILY1
argument_list|)
operator|+
literal|"=>"
operator|+
name|cf1StoreFileCount1
operator|+
literal|", "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|FAMILY2
argument_list|)
operator|+
literal|"=>"
operator|+
name|cf2StoreFileCount1
operator|+
literal|", "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|FAMILY3
argument_list|)
operator|+
literal|"=>"
operator|+
name|cf3StoreFileCount1
argument_list|)
expr_stmt|;
comment|// small CF will have less store files.
name|assertTrue
argument_list|(
name|cf1StoreFileCount1
operator|<
name|cf1StoreFileCount
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cf2StoreFileCount1
operator|<
name|cf2StoreFileCount
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numRegions
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|long
name|numRows
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|htd
operator|.
name|setMaxFileSize
argument_list|(
literal|10L
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setValue
argument_list|(
name|HTableDescriptor
operator|.
name|SPLIT_POLICY
argument_list|,
name|ConstantSizeRegionSplitPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY1
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY2
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY3
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|TABLENAME
argument_list|)
condition|)
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|TABLENAME
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|TABLENAME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numRegions
operator|>=
literal|3
condition|)
block|{
name|byte
index|[]
name|startKey
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|endKey
argument_list|,
operator|(
name|byte
operator|)
literal|0xFF
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
name|Table
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf"
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value1
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|byte
index|[]
name|value2
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
name|byte
index|[]
name|value3
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Hashing
operator|.
name|md5
argument_list|()
operator|.
name|hashLong
argument_list|(
name|i
argument_list|)
operator|.
name|asBytes
argument_list|()
argument_list|)
decl_stmt|;
name|rand
operator|.
name|setSeed
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|value3
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY1
argument_list|,
name|qf
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY2
argument_list|,
name|qf
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY3
argument_list|,
name|qf
argument_list|,
name|value3
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|i
operator|+
literal|" rows put"
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

