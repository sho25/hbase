begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ParseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|client
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|client
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|CellModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|CellSetModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|RowModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|provider
operator|.
name|JacksonProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestTableScan
block|{
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestScanResource"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CFA
init|=
literal|"a"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CFB
init|=
literal|"b"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLUMN_1
init|=
name|CFA
operator|+
literal|":1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLUMN_2
init|=
name|CFB
operator|+
literal|":2"
decl_stmt|;
specifier|private
specifier|static
name|Client
name|client
decl_stmt|;
specifier|private
specifier|static
name|int
name|expectedRows1
decl_stmt|;
specifier|private
specifier|static
name|int
name|expectedRows2
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseRESTTestingUtility
name|REST_TEST_UTIL
init|=
operator|new
name|HBaseRESTTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|CUSTOM_FILTERS
argument_list|,
literal|"CustomFilter:"
operator|+
name|CustomFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|REST_TEST_UTIL
operator|.
name|startServletContainer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|Client
argument_list|(
operator|new
name|Cluster
argument_list|()
operator|.
name|add
argument_list|(
literal|"localhost"
argument_list|,
name|REST_TEST_UTIL
operator|.
name|getServletPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|admin
operator|.
name|tableExists
argument_list|(
name|TABLE
argument_list|)
condition|)
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|CFA
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|CFB
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|expectedRows1
operator|=
name|TestScannerResource
operator|.
name|insertData
argument_list|(
name|conf
argument_list|,
name|TABLE
argument_list|,
name|COLUMN_1
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|expectedRows2
operator|=
name|TestScannerResource
operator|.
name|insertData
argument_list|(
name|conf
argument_list|,
name|TABLE
argument_list|,
name|COLUMN_2
argument_list|,
literal|0.5
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|deleteTable
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|REST_TEST_UTIL
operator|.
name|shutdownServletContainer
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleScannerXML
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
throws|,
name|XMLStreamException
block|{
comment|// Test scanning particular columns
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_COLUMN
operator|+
literal|"="
operator|+
name|COLUMN_1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_LIMIT
operator|+
literal|"=10"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|JAXBContext
name|ctx
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|CellSetModel
operator|.
name|class
argument_list|)
decl_stmt|;
name|Unmarshaller
name|ush
init|=
name|ctx
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|CellSetModel
name|model
init|=
operator|(
name|CellSetModel
operator|)
name|ush
operator|.
name|unmarshal
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|TestScannerResource
operator|.
name|countCellSet
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|checkRowsNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|//Test with no limit.
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_COLUMN
operator|+
literal|"="
operator|+
name|COLUMN_1
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|=
operator|(
name|CellSetModel
operator|)
name|ush
operator|.
name|unmarshal
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|=
name|TestScannerResource
operator|.
name|countCellSet
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRows1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|checkRowsNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|//Test with start and end row.
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_COLUMN
operator|+
literal|"="
operator|+
name|COLUMN_1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_START_ROW
operator|+
literal|"=aaa"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_END_ROW
operator|+
literal|"=aay"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|=
operator|(
name|CellSetModel
operator|)
name|ush
operator|.
name|unmarshal
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|=
name|TestScannerResource
operator|.
name|countCellSet
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|RowModel
name|startRow
init|=
name|model
operator|.
name|getRows
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|startRow
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RowModel
name|endRow
init|=
name|model
operator|.
name|getRows
argument_list|()
operator|.
name|get
argument_list|(
name|model
operator|.
name|getRows
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"aax"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|endRow
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|24
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|checkRowsNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|//Test with start row and limit.
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_COLUMN
operator|+
literal|"="
operator|+
name|COLUMN_1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_START_ROW
operator|+
literal|"=aaa"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_LIMIT
operator|+
literal|"=15"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|=
operator|(
name|CellSetModel
operator|)
name|ush
operator|.
name|unmarshal
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
name|startRow
operator|=
name|model
operator|.
name|getRows
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|startRow
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|=
name|TestScannerResource
operator|.
name|countCellSet
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|checkRowsNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleScannerJson
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
comment|// Test scanning particular columns with limit.
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_COLUMN
operator|+
literal|"="
operator|+
name|COLUMN_1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_LIMIT
operator|+
literal|"=20"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|JacksonProvider
argument_list|()
operator|.
name|locateMapper
argument_list|(
name|CellSetModel
operator|.
name|class
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
name|CellSetModel
name|model
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|,
name|CellSetModel
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|TestScannerResource
operator|.
name|countCellSet
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|checkRowsNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|//Test scanning with no limit.
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_COLUMN
operator|+
literal|"="
operator|+
name|COLUMN_2
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|,
name|CellSetModel
operator|.
name|class
argument_list|)
expr_stmt|;
name|count
operator|=
name|TestScannerResource
operator|.
name|countCellSet
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRows2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|checkRowsNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|//Test with start row and end row.
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_COLUMN
operator|+
literal|"="
operator|+
name|COLUMN_1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_START_ROW
operator|+
literal|"=aaa"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_END_ROW
operator|+
literal|"=aay"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|,
name|CellSetModel
operator|.
name|class
argument_list|)
expr_stmt|;
name|RowModel
name|startRow
init|=
name|model
operator|.
name|getRows
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|startRow
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RowModel
name|endRow
init|=
name|model
operator|.
name|getRows
argument_list|()
operator|.
name|get
argument_list|(
name|model
operator|.
name|getRows
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"aax"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|endRow
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|=
name|TestScannerResource
operator|.
name|countCellSet
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|24
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|checkRowsNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
comment|/**    * An example to scan using listener in unmarshaller for XML.    * @throws Exception the exception    */
annotation|@
name|Test
specifier|public
name|void
name|testScanUsingListenerUnmarshallerXML
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_COLUMN
operator|+
literal|"="
operator|+
name|COLUMN_1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_LIMIT
operator|+
literal|"=10"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|JAXBContext
name|context
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|ClientSideCellSetModel
operator|.
name|class
argument_list|,
name|RowModel
operator|.
name|class
argument_list|,
name|CellModel
operator|.
name|class
argument_list|)
decl_stmt|;
name|Unmarshaller
name|unmarshaller
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
specifier|final
name|ClientSideCellSetModel
operator|.
name|Listener
name|listener
init|=
operator|new
name|ClientSideCellSetModel
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handleRowModel
parameter_list|(
name|ClientSideCellSetModel
name|helper
parameter_list|,
name|RowModel
name|row
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|getCells
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// install the callback on all ClientSideCellSetModel instances
name|unmarshaller
operator|.
name|setListener
argument_list|(
operator|new
name|Unmarshaller
operator|.
name|Listener
argument_list|()
block|{
specifier|public
name|void
name|beforeUnmarshal
parameter_list|(
name|Object
name|target
parameter_list|,
name|Object
name|parent
parameter_list|)
block|{
if|if
condition|(
name|target
operator|instanceof
name|ClientSideCellSetModel
condition|)
block|{
operator|(
operator|(
name|ClientSideCellSetModel
operator|)
name|target
operator|)
operator|.
name|setCellSetModelListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|afterUnmarshal
parameter_list|(
name|Object
name|target
parameter_list|,
name|Object
name|parent
parameter_list|)
block|{
if|if
condition|(
name|target
operator|instanceof
name|ClientSideCellSetModel
condition|)
block|{
operator|(
operator|(
name|ClientSideCellSetModel
operator|)
name|target
operator|)
operator|.
name|setCellSetModelListener
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// create a new XML parser
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|XMLReader
name|reader
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|unmarshaller
operator|.
name|getUnmarshallerHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ClientSideCellSetModel
operator|.
name|listenerInvoked
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ClientSideCellSetModel
operator|.
name|listenerInvoked
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStreamingJSON
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test scanning particular columns with limit.
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_COLUMN
operator|+
literal|"="
operator|+
name|COLUMN_1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_LIMIT
operator|+
literal|"=20"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|JacksonProvider
argument_list|()
operator|.
name|locateMapper
argument_list|(
name|CellSetModel
operator|.
name|class
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
name|CellSetModel
name|model
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|,
name|CellSetModel
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|TestScannerResource
operator|.
name|countCellSet
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|checkRowsNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|//Test scanning with no limit.
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_COLUMN
operator|+
literal|"="
operator|+
name|COLUMN_2
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|,
name|CellSetModel
operator|.
name|class
argument_list|)
expr_stmt|;
name|count
operator|=
name|TestScannerResource
operator|.
name|countCellSet
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRows2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|checkRowsNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|//Test with start row and end row.
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_COLUMN
operator|+
literal|"="
operator|+
name|COLUMN_1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_START_ROW
operator|+
literal|"=aaa"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_END_ROW
operator|+
literal|"=aay"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|JsonFactory
name|jfactory
init|=
operator|new
name|JsonFactory
argument_list|(
name|mapper
argument_list|)
decl_stmt|;
name|JsonParser
name|jParser
init|=
name|jfactory
operator|.
name|createJsonParser
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|jParser
operator|.
name|nextToken
argument_list|()
operator|!=
name|JsonToken
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|jParser
operator|.
name|getCurrentToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|START_OBJECT
operator|&&
name|found
condition|)
block|{
name|RowModel
name|row
init|=
name|jParser
operator|.
name|readValueAs
argument_list|(
name|RowModel
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|row
operator|.
name|getCells
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|==
literal|23
condition|)
block|{
name|assertEquals
argument_list|(
literal|"aax"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
name|jParser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|found
operator|=
name|jParser
operator|.
name|getCurrentToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|START_ARRAY
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|24
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleScannerProtobuf
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_COLUMN
operator|+
literal|"="
operator|+
name|COLUMN_1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_LIMIT
operator|+
literal|"=15"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
name|readProtobufStream
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
comment|//Test with start row and end row.
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_COLUMN
operator|+
literal|"="
operator|+
name|COLUMN_1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_START_ROW
operator|+
literal|"=aaa"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_END_ROW
operator|+
literal|"=aay"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_PROTOBUF
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|rowCount
operator|=
name|readProtobufStream
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|24
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkRowsNotNull
parameter_list|(
name|CellSetModel
name|model
parameter_list|)
block|{
for|for
control|(
name|RowModel
name|row
range|:
name|model
operator|.
name|getRows
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|row
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|getCells
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Read protobuf stream.    * @param inputStream the input stream    * @return The number of rows in the cell set model.    * @throws IOException Signals that an I/O exception has occurred.    */
specifier|public
name|int
name|readProtobufStream
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInputStream
name|stream
init|=
operator|new
name|DataInputStream
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|CellSetModel
name|model
init|=
literal|null
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|byte
index|[]
name|lengthBytes
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|int
name|readBytes
init|=
name|stream
operator|.
name|read
argument_list|(
name|lengthBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|readBytes
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|readBytes
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|Bytes
operator|.
name|toShort
argument_list|(
name|lengthBytes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cellset
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|stream
operator|.
name|read
argument_list|(
name|cellset
argument_list|)
expr_stmt|;
name|model
operator|=
operator|new
name|CellSetModel
argument_list|()
expr_stmt|;
name|model
operator|.
name|getObjectFromMessage
argument_list|(
name|cellset
argument_list|)
expr_stmt|;
name|checkRowsNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|rowCount
operator|=
name|rowCount
operator|+
name|TestScannerResource
operator|.
name|countCellSet
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|exp
parameter_list|)
block|{
name|exp
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|rowCount
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanningUnknownColumnJson
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
comment|// Test scanning particular columns with limit.
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_COLUMN
operator|+
literal|"=a:test"
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_JSON
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|JacksonProvider
argument_list|()
operator|.
name|locateMapper
argument_list|(
name|CellSetModel
operator|.
name|class
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
decl_stmt|;
name|CellSetModel
name|model
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|,
name|CellSetModel
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|TestScannerResource
operator|.
name|countCellSet
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleFilter
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_COLUMN
operator|+
literal|"="
operator|+
name|COLUMN_1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_START_ROW
operator|+
literal|"=aaa"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_END_ROW
operator|+
literal|"=aay"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_FILTER
operator|+
literal|"="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
literal|"PrefixFilter('aab')"
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|JAXBContext
name|ctx
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|CellSetModel
operator|.
name|class
argument_list|)
decl_stmt|;
name|Unmarshaller
name|ush
init|=
name|ctx
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|CellSetModel
name|model
init|=
operator|(
name|CellSetModel
operator|)
name|ush
operator|.
name|unmarshal
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|TestScannerResource
operator|.
name|countCellSet
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aab"
argument_list|,
operator|new
name|String
argument_list|(
name|model
operator|.
name|getRows
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCells
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompoundFilter
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_FILTER
operator|+
literal|"="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
literal|"PrefixFilter('abc') AND QualifierFilter(=,'binary:1')"
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|JAXBContext
name|ctx
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|CellSetModel
operator|.
name|class
argument_list|)
decl_stmt|;
name|Unmarshaller
name|ush
init|=
name|ctx
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|CellSetModel
name|model
init|=
operator|(
name|CellSetModel
operator|)
name|ush
operator|.
name|unmarshal
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|TestScannerResource
operator|.
name|countCellSet
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
operator|new
name|String
argument_list|(
name|model
operator|.
name|getRows
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCells
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomFilter
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/a*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_COLUMN
operator|+
literal|"="
operator|+
name|COLUMN_1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_FILTER
operator|+
literal|"="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
literal|"CustomFilter('abc')"
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|JAXBContext
name|ctx
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|CellSetModel
operator|.
name|class
argument_list|)
decl_stmt|;
name|Unmarshaller
name|ush
init|=
name|ctx
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|CellSetModel
name|model
init|=
operator|(
name|CellSetModel
operator|)
name|ush
operator|.
name|unmarshal
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|TestScannerResource
operator|.
name|countCellSet
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
operator|new
name|String
argument_list|(
name|model
operator|.
name|getRows
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCells
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNegativeCustomFilter
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/b*"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_COLUMN
operator|+
literal|"="
operator|+
name|COLUMN_1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|SCAN_FILTER
operator|+
literal|"="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
literal|"CustomFilter('abc')"
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|JAXBContext
name|ctx
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|CellSetModel
operator|.
name|class
argument_list|)
decl_stmt|;
name|Unmarshaller
name|ush
init|=
name|ctx
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|CellSetModel
name|model
init|=
operator|(
name|CellSetModel
operator|)
name|ush
operator|.
name|unmarshal
argument_list|(
name|response
operator|.
name|getStream
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|TestScannerResource
operator|.
name|countCellSet
argument_list|(
name|model
argument_list|)
decl_stmt|;
comment|// Should return no rows as the filters conflict
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|CustomFilter
extends|extends
name|PrefixFilter
block|{
specifier|private
name|byte
index|[]
name|key
init|=
literal|null
decl_stmt|;
specifier|public
name|CustomFilter
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterRowKey
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|int
name|cmp
init|=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|this
operator|.
name|key
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|key
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
name|cmp
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|static
name|Filter
name|createFilterFromArguments
parameter_list|(
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|filterArguments
parameter_list|)
block|{
name|byte
index|[]
name|prefix
init|=
name|ParseFilter
operator|.
name|removeQuotesFromByteArray
argument_list|(
name|filterArguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|CustomFilter
argument_list|(
name|prefix
argument_list|)
return|;
block|}
block|}
comment|/**    * The Class ClientSideCellSetModel which mimics cell set model, and contains listener to perform    * user defined operations on the row model.    */
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"CellSet"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
specifier|public
specifier|static
class|class
name|ClientSideCellSetModel
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/**      * This list is not a real list; instead it will notify a listener whenever JAXB has      * unmarshalled the next row.      */
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"Row"
argument_list|)
specifier|private
name|List
argument_list|<
name|RowModel
argument_list|>
name|row
decl_stmt|;
specifier|static
name|boolean
name|listenerInvoked
init|=
literal|false
decl_stmt|;
comment|/**      * Install a listener for row model on this object. If l is null, the listener      * is removed again.      */
specifier|public
name|void
name|setCellSetModelListener
parameter_list|(
specifier|final
name|Listener
name|l
parameter_list|)
block|{
name|row
operator|=
operator|(
name|l
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<
name|RowModel
argument_list|>
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|boolean
name|add
parameter_list|(
name|RowModel
name|o
parameter_list|)
block|{
name|l
operator|.
name|handleRowModel
argument_list|(
name|ClientSideCellSetModel
operator|.
name|this
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|listenerInvoked
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
expr_stmt|;
block|}
comment|/**      * This listener is invoked every time a new row model is unmarshalled.      */
specifier|public
specifier|static
interface|interface
name|Listener
block|{
name|void
name|handleRowModel
parameter_list|(
name|ClientSideCellSetModel
name|helper
parameter_list|,
name|RowModel
name|rowModel
parameter_list|)
function_decl|;
block|}
block|}
block|}
end_class

end_unit

