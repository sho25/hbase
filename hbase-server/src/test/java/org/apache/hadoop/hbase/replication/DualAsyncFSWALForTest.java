begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|DualAsyncFSWAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|FailedLogCloseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALActionsListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALProvider
operator|.
name|AsyncWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closeables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoopGroup
import|;
end_import

begin_class
class|class
name|DualAsyncFSWALForTest
extends|extends
name|DualAsyncFSWAL
block|{
specifier|private
name|boolean
name|localBroken
decl_stmt|;
specifier|private
name|boolean
name|remoteBroken
decl_stmt|;
specifier|private
name|CountDownLatch
name|arrive
decl_stmt|;
specifier|private
name|CountDownLatch
name|resume
decl_stmt|;
specifier|private
specifier|final
class|class
name|MyCombinedAsyncWriter
implements|implements
name|AsyncWriter
block|{
specifier|private
specifier|final
name|AsyncWriter
name|localWriter
decl_stmt|;
specifier|private
specifier|final
name|AsyncWriter
name|remoteWriter
decl_stmt|;
specifier|public
name|MyCombinedAsyncWriter
parameter_list|(
name|AsyncWriter
name|localWriter
parameter_list|,
name|AsyncWriter
name|remoteWriter
parameter_list|)
block|{
name|this
operator|.
name|localWriter
operator|=
name|localWriter
expr_stmt|;
name|this
operator|.
name|remoteWriter
operator|=
name|remoteWriter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|localWriter
operator|.
name|getLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|Closeables
operator|.
name|close
argument_list|(
name|localWriter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Closeables
operator|.
name|close
argument_list|(
name|remoteWriter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CompletableFuture
argument_list|<
name|Long
argument_list|>
name|sync
parameter_list|()
block|{
name|CompletableFuture
argument_list|<
name|Long
argument_list|>
name|localFuture
decl_stmt|;
name|CompletableFuture
argument_list|<
name|Long
argument_list|>
name|remoteFuture
decl_stmt|;
if|if
condition|(
operator|!
name|localBroken
condition|)
block|{
name|localFuture
operator|=
name|localWriter
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|localFuture
operator|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
expr_stmt|;
name|localFuture
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Inject error"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|remoteBroken
condition|)
block|{
name|remoteFuture
operator|=
name|remoteWriter
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|remoteFuture
operator|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
expr_stmt|;
name|remoteFuture
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Inject error"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|localFuture
argument_list|,
name|remoteFuture
argument_list|)
operator|.
name|thenApply
argument_list|(
name|v
lambda|->
block|{
return|return
name|localFuture
operator|.
name|getNow
argument_list|(
literal|0L
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
if|if
condition|(
operator|!
name|localBroken
condition|)
block|{
name|localWriter
operator|.
name|append
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|remoteBroken
condition|)
block|{
name|remoteWriter
operator|.
name|append
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|DualAsyncFSWALForTest
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileSystem
name|remoteFs
parameter_list|,
name|Path
name|rootDir
parameter_list|,
name|Path
name|remoteWALDir
parameter_list|,
name|String
name|logDir
parameter_list|,
name|String
name|archiveDir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|WALActionsListener
argument_list|>
name|listeners
parameter_list|,
name|boolean
name|failIfWALExists
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|,
name|EventLoopGroup
name|eventLoopGroup
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Channel
argument_list|>
name|channelClass
parameter_list|)
throws|throws
name|FailedLogCloseException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|fs
argument_list|,
name|remoteFs
argument_list|,
name|rootDir
argument_list|,
name|remoteWALDir
argument_list|,
name|logDir
argument_list|,
name|archiveDir
argument_list|,
name|conf
argument_list|,
name|listeners
argument_list|,
name|failIfWALExists
argument_list|,
name|prefix
argument_list|,
name|suffix
argument_list|,
name|eventLoopGroup
argument_list|,
name|channelClass
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|AsyncWriter
name|createCombinedAsyncWriter
parameter_list|(
name|AsyncWriter
name|localWriter
parameter_list|,
name|AsyncWriter
name|remoteWriter
parameter_list|)
block|{
return|return
operator|new
name|MyCombinedAsyncWriter
argument_list|(
name|localWriter
argument_list|,
name|remoteWriter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|AsyncWriter
name|createWriterInstance
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|arrive
operator|!=
literal|null
condition|)
block|{
name|arrive
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|resume
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
if|if
condition|(
name|localBroken
operator|||
name|remoteBroken
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"WAL broken"
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|createWriterInstance
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|public
name|void
name|setLocalBroken
parameter_list|()
block|{
name|this
operator|.
name|localBroken
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|setRemoteBroken
parameter_list|()
block|{
name|this
operator|.
name|remoteBroken
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|suspendLogRoll
parameter_list|()
block|{
name|arrive
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resume
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|waitUntilArrive
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|arrive
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|resumeLogRoll
parameter_list|()
block|{
name|resume
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

