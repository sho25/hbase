begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * Testcase for newly added feature in HBASE-17143, such as startRow and stopRow  * inclusive/exclusive, limit for rows, etc.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestScannersFromClientSide2
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"scan"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|CQ1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cq1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|CQ2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cq2"
argument_list|)
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
literal|0
argument_list|)
specifier|public
name|boolean
name|batch
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
literal|1
argument_list|)
specifier|public
name|boolean
name|smallResultSize
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
literal|2
argument_list|)
specifier|public
name|boolean
name|allowPartial
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index}: batch={0}, smallResultSize={1}, allowPartial={2}"
argument_list|)
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|params
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
index|[]
name|values
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|2
condition|;
name|k
operator|++
control|)
block|{
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|values
index|[
name|i
index|]
block|,
name|values
index|[
name|j
index|]
block|,
name|values
index|[
name|k
index|]
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|params
return|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
literal|8
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|111
init|;
name|i
operator|<
literal|999
condition|;
name|i
operator|+=
literal|111
control|)
block|{
name|splitKeys
index|[
name|i
operator|/
literal|111
operator|-
literal|1
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|FAMILY
argument_list|,
name|splitKeys
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|puts
operator|.
name|add
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|CQ1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|CQ2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|*
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Scan
name|createScan
parameter_list|()
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
if|if
condition|(
name|batch
condition|)
block|{
name|scan
operator|.
name|setBatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|smallResultSize
condition|)
block|{
name|scan
operator|.
name|setMaxResultSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allowPartial
condition|)
block|{
name|scan
operator|.
name|setAllowPartialResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|scan
return|;
block|}
specifier|private
name|void
name|assertResultEquals
parameter_list|(
name|Result
name|result
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|CQ1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|*
name|i
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|CQ2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Result
argument_list|>
name|doScan
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TABLE_NAME
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
for|for
control|(
name|Result
name|r
init|;
operator|(
name|r
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|assertAndCreateCompleteResults
argument_list|(
name|results
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|Result
argument_list|>
name|assertAndCreateCompleteResults
parameter_list|(
name|List
argument_list|<
name|Result
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
operator|!
name|batch
operator|&&
operator|!
name|allowPartial
operator|)
operator|||
operator|(
name|allowPartial
operator|&&
operator|!
name|batch
operator|&&
operator|!
name|smallResultSize
operator|)
condition|)
block|{
for|for
control|(
name|Result
name|result
range|:
name|results
control|)
block|{
name|assertFalse
argument_list|(
literal|"Should not have partial result"
argument_list|,
name|result
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
name|List
argument_list|<
name|Result
argument_list|>
name|completeResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|partialResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|results
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Should have partial result"
argument_list|,
name|partialResults
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|partialResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|completeResults
operator|.
name|add
argument_list|(
name|Result
operator|.
name|createCompleteResult
argument_list|(
name|partialResults
argument_list|)
argument_list|)
expr_stmt|;
name|partialResults
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|partialResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Should not have orphan partial result"
argument_list|,
name|partialResults
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|completeResults
return|;
block|}
specifier|private
name|void
name|testScan
parameter_list|(
name|int
name|start
parameter_list|,
name|boolean
name|startInclusive
parameter_list|,
name|int
name|stop
parameter_list|,
name|boolean
name|stopInclusive
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
name|createScan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|start
argument_list|)
argument_list|)
argument_list|,
name|startInclusive
argument_list|)
operator|.
name|withStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|stop
argument_list|)
argument_list|)
argument_list|,
name|stopInclusive
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0
condition|)
block|{
name|scan
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
name|doScan
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|actualStart
init|=
name|startInclusive
condition|?
name|start
else|:
name|start
operator|+
literal|1
decl_stmt|;
name|int
name|actualStop
init|=
name|stopInclusive
condition|?
name|stop
operator|+
literal|1
else|:
name|stop
decl_stmt|;
name|int
name|count
init|=
name|actualStop
operator|-
name|actualStart
decl_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0
condition|)
block|{
name|count
operator|=
name|Math
operator|.
name|min
argument_list|(
name|count
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|assertResultEquals
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actualStart
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testReversedScan
parameter_list|(
name|int
name|start
parameter_list|,
name|boolean
name|startInclusive
parameter_list|,
name|int
name|stop
parameter_list|,
name|boolean
name|stopInclusive
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
name|createScan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|start
argument_list|)
argument_list|)
argument_list|,
name|startInclusive
argument_list|)
operator|.
name|withStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|stop
argument_list|)
argument_list|)
argument_list|,
name|stopInclusive
argument_list|)
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0
condition|)
block|{
name|scan
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
name|doScan
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|actualStart
init|=
name|startInclusive
condition|?
name|start
else|:
name|start
operator|-
literal|1
decl_stmt|;
name|int
name|actualStop
init|=
name|stopInclusive
condition|?
name|stop
operator|-
literal|1
else|:
name|stop
decl_stmt|;
name|int
name|count
init|=
name|actualStart
operator|-
name|actualStop
decl_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0
condition|)
block|{
name|count
operator|=
name|Math
operator|.
name|min
argument_list|(
name|count
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|assertResultEquals
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actualStart
operator|-
name|i
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanWithLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|testScan
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|,
literal|998
argument_list|,
literal|false
argument_list|,
literal|900
argument_list|)
expr_stmt|;
comment|// from first region to last region
name|testScan
argument_list|(
literal|123
argument_list|,
literal|true
argument_list|,
literal|345
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|testScan
argument_list|(
literal|234
argument_list|,
literal|true
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|testScan
argument_list|(
literal|345
argument_list|,
literal|false
argument_list|,
literal|567
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|testScan
argument_list|(
literal|456
argument_list|,
literal|false
argument_list|,
literal|678
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanWithLimitGreaterThanActualCount
parameter_list|()
throws|throws
name|Exception
block|{
name|testScan
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|,
literal|998
argument_list|,
literal|false
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// from first region to last region
name|testScan
argument_list|(
literal|123
argument_list|,
literal|true
argument_list|,
literal|345
argument_list|,
literal|true
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|testScan
argument_list|(
literal|234
argument_list|,
literal|true
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|testScan
argument_list|(
literal|345
argument_list|,
literal|false
argument_list|,
literal|567
argument_list|,
literal|true
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|testScan
argument_list|(
literal|456
argument_list|,
literal|false
argument_list|,
literal|678
argument_list|,
literal|false
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReversedScanWithLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|testReversedScan
argument_list|(
literal|998
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|900
argument_list|)
expr_stmt|;
comment|// from last region to first region
name|testReversedScan
argument_list|(
literal|543
argument_list|,
literal|true
argument_list|,
literal|321
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|testReversedScan
argument_list|(
literal|654
argument_list|,
literal|true
argument_list|,
literal|432
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|testReversedScan
argument_list|(
literal|765
argument_list|,
literal|false
argument_list|,
literal|543
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|testReversedScan
argument_list|(
literal|876
argument_list|,
literal|false
argument_list|,
literal|654
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReversedScanWithLimitGreaterThanActualCount
parameter_list|()
throws|throws
name|Exception
block|{
name|testReversedScan
argument_list|(
literal|998
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// from last region to first region
name|testReversedScan
argument_list|(
literal|543
argument_list|,
literal|true
argument_list|,
literal|321
argument_list|,
literal|true
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|testReversedScan
argument_list|(
literal|654
argument_list|,
literal|true
argument_list|,
literal|432
argument_list|,
literal|false
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|testReversedScan
argument_list|(
literal|765
argument_list|,
literal|false
argument_list|,
literal|543
argument_list|,
literal|true
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|testReversedScan
argument_list|(
literal|876
argument_list|,
literal|false
argument_list|,
literal|654
argument_list|,
literal|false
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartRowStopRowInclusive
parameter_list|()
throws|throws
name|Exception
block|{
name|testScan
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|,
literal|998
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// from first region to last region
name|testScan
argument_list|(
literal|123
argument_list|,
literal|true
argument_list|,
literal|345
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|testScan
argument_list|(
literal|234
argument_list|,
literal|true
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|testScan
argument_list|(
literal|345
argument_list|,
literal|false
argument_list|,
literal|567
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|testScan
argument_list|(
literal|456
argument_list|,
literal|false
argument_list|,
literal|678
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReversedStartRowStopRowInclusive
parameter_list|()
throws|throws
name|Exception
block|{
name|testReversedScan
argument_list|(
literal|998
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// from last region to first region
name|testReversedScan
argument_list|(
literal|543
argument_list|,
literal|true
argument_list|,
literal|321
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|testReversedScan
argument_list|(
literal|654
argument_list|,
literal|true
argument_list|,
literal|432
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|testReversedScan
argument_list|(
literal|765
argument_list|,
literal|false
argument_list|,
literal|543
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|testReversedScan
argument_list|(
literal|876
argument_list|,
literal|false
argument_list|,
literal|654
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

