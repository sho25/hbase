begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RetriesExhaustedWithDetailsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaSnapshot
operator|.
name|SpaceQuotaStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|policies
operator|.
name|MissingSnapshotViolationPolicyEnforcement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class for the quota status RPCs in the master and regionserver.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestQuotaStatusRPCs
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestQuotaStatusRPCs
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestQuotaStatusRPCs
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|COUNTER
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|SpaceQuotaHelperForTests
name|helper
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Increase the frequency of some of the chores for responsiveness of the test
name|SpaceQuotaHelperForTests
operator|.
name|updateConfigForQuotas
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setupForTest
parameter_list|()
throws|throws
name|Exception
block|{
name|helper
operator|=
operator|new
name|SpaceQuotaHelperForTests
argument_list|(
name|TEST_UTIL
argument_list|,
name|testName
argument_list|,
name|COUNTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionSizesFromMaster
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|tableSize
init|=
literal|1024L
operator|*
literal|10L
decl_stmt|;
comment|// 10KB
specifier|final
name|int
name|numRegions
init|=
literal|10
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
name|numRegions
argument_list|)
decl_stmt|;
comment|// Will write at least `tableSize` data
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
name|tableSize
argument_list|)
expr_stmt|;
specifier|final
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
specifier|final
name|MasterQuotaManager
name|quotaManager
init|=
name|master
operator|.
name|getMasterQuotaManager
argument_list|()
decl_stmt|;
comment|// Make sure the master has all of the reports
name|Waiter
operator|.
name|waitFor
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|30
operator|*
literal|1000
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|Long
argument_list|>
name|regionSizes
init|=
name|quotaManager
operator|.
name|snapshotRegionSizes
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Region sizes="
operator|+
name|regionSizes
argument_list|)
expr_stmt|;
return|return
name|numRegions
operator|==
name|countRegionsForTable
argument_list|(
name|tn
argument_list|,
name|regionSizes
argument_list|)
operator|&&
name|tableSize
operator|<=
name|getTableSize
argument_list|(
name|tn
argument_list|,
name|regionSizes
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|Long
argument_list|>
name|sizes
init|=
name|QuotaTableUtil
operator|.
name|getMasterReportedTableSizes
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|size
init|=
name|sizes
operator|.
name|get
argument_list|(
name|tn
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No reported size for "
operator|+
name|tn
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Reported table size was "
operator|+
name|size
argument_list|,
name|size
operator|.
name|longValue
argument_list|()
operator|>=
name|tableSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQuotaSnapshotsFromRS
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|sizeLimit
init|=
literal|1024L
operator|*
literal|1024L
decl_stmt|;
comment|// 1MB
specifier|final
name|long
name|tableSize
init|=
literal|1024L
operator|*
literal|10L
decl_stmt|;
comment|// 10KB
specifier|final
name|int
name|numRegions
init|=
literal|10
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
name|numRegions
argument_list|)
decl_stmt|;
comment|// Define the quota
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|sizeLimit
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// Write at least `tableSize` data
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
name|tableSize
argument_list|)
expr_stmt|;
specifier|final
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RegionServerSpaceQuotaManager
name|manager
init|=
name|rs
operator|.
name|getRegionServerSpaceQuotaManager
argument_list|()
decl_stmt|;
name|Waiter
operator|.
name|waitFor
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|30
operator|*
literal|1000
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|SpaceQuotaSnapshot
name|snapshot
init|=
name|manager
operator|.
name|copyQuotaSnapshots
argument_list|()
operator|.
name|get
argument_list|(
name|tn
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>=
name|tableSize
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|snapshots
init|=
name|QuotaTableUtil
operator|.
name|getRegionServerQuotaSnapshots
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|rs
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
name|SpaceQuotaSnapshot
name|snapshot
init|=
name|snapshots
operator|.
name|get
argument_list|(
name|tn
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Did not find snapshot for "
operator|+
name|tn
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Observed table usage was "
operator|+
name|snapshot
operator|.
name|getUsage
argument_list|()
argument_list|,
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>=
name|tableSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sizeLimit
argument_list|,
name|snapshot
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|SpaceQuotaStatus
name|pbStatus
init|=
name|snapshot
operator|.
name|getQuotaStatus
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|pbStatus
operator|.
name|isInViolation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQuotaEnforcementsFromRS
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|sizeLimit
init|=
literal|1024L
operator|*
literal|8L
decl_stmt|;
comment|// 8KB
specifier|final
name|long
name|tableSize
init|=
literal|1024L
operator|*
literal|10L
decl_stmt|;
comment|// 10KB
specifier|final
name|int
name|numRegions
init|=
literal|10
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
name|numRegions
argument_list|)
decl_stmt|;
comment|// Define the quota
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|sizeLimit
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// Write at least `tableSize` data
try|try
block|{
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
name|tableSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedWithDetailsException
decl||
name|SpaceLimitingException
name|e
parameter_list|)
block|{
comment|// Pass
block|}
specifier|final
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RegionServerSpaceQuotaManager
name|manager
init|=
name|rs
operator|.
name|getRegionServerSpaceQuotaManager
argument_list|()
decl_stmt|;
name|Waiter
operator|.
name|waitFor
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|30
operator|*
literal|1000
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|ActivePolicyEnforcement
name|enforcements
init|=
name|manager
operator|.
name|getActiveEnforcements
argument_list|()
decl_stmt|;
name|SpaceViolationPolicyEnforcement
name|enforcement
init|=
name|enforcements
operator|.
name|getPolicyEnforcement
argument_list|(
name|tn
argument_list|)
decl_stmt|;
comment|// Signifies that we're waiting on the quota snapshot to be fetched
if|if
condition|(
name|enforcement
operator|instanceof
name|MissingSnapshotViolationPolicyEnforcement
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|enforcement
operator|.
name|getQuotaSnapshot
argument_list|()
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|isInViolation
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// We obtain the violations for a RegionServer by observing the snapshots
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|snapshots
init|=
name|QuotaTableUtil
operator|.
name|getRegionServerQuotaSnapshots
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|rs
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
name|SpaceQuotaSnapshot
name|snapshot
init|=
name|snapshots
operator|.
name|get
argument_list|(
name|tn
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Did not find snapshot for "
operator|+
name|tn
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|snapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|isInViolation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|,
name|snapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQuotaStatusFromMaster
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|sizeLimit
init|=
literal|1024L
operator|*
literal|25L
decl_stmt|;
comment|// 25KB
comment|// As of 2.0.0-beta-2, this 1KB of "Cells" actually results in about 15KB on disk (HFiles)
comment|// This is skewed a bit since we're writing such little data, so the test needs to keep
comment|// this in mind; else, the quota will be in violation before the test expects it to be.
specifier|final
name|long
name|tableSize
init|=
literal|1024L
operator|*
literal|1
decl_stmt|;
comment|// 1KB
specifier|final
name|long
name|nsLimit
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|final
name|int
name|numRegions
init|=
literal|10
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
name|numRegions
argument_list|)
decl_stmt|;
comment|// Define the quota
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|sizeLimit
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|QuotaSettings
name|nsSettings
init|=
name|QuotaSettingsFactory
operator|.
name|limitNamespaceSpace
argument_list|(
name|tn
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|nsLimit
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setQuota
argument_list|(
name|nsSettings
argument_list|)
expr_stmt|;
comment|// Write at least `tableSize` data
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
name|tableSize
argument_list|)
expr_stmt|;
specifier|final
name|Connection
name|conn
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
comment|// Make sure the master has a snapshot for our table
name|Waiter
operator|.
name|waitFor
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|30
operator|*
literal|1000
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|SpaceQuotaSnapshot
name|snapshot
init|=
name|QuotaTableUtil
operator|.
name|getCurrentSnapshot
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Table snapshot after initial ingest: "
operator|+
name|snapshot
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|snapshot
operator|.
name|getLimit
argument_list|()
operator|==
name|sizeLimit
operator|&&
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>
literal|0L
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Long
argument_list|>
name|nsUsage
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
comment|// If we saw the table snapshot, we should also see the namespace snapshot
name|Waiter
operator|.
name|waitFor
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|30
operator|*
literal|1000
operator|*
literal|1000
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|SpaceQuotaSnapshot
name|snapshot
init|=
name|QuotaTableUtil
operator|.
name|getCurrentSnapshot
argument_list|(
name|conn
argument_list|,
name|tn
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Namespace snapshot after initial ingest: "
operator|+
name|snapshot
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|nsUsage
operator|.
name|set
argument_list|(
name|snapshot
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|snapshot
operator|.
name|getLimit
argument_list|()
operator|==
name|nsLimit
operator|&&
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Sanity check: the below assertions will fail if we somehow write too much data
comment|// and force the table to move into violation before we write the second bit of data.
name|SpaceQuotaSnapshot
name|snapshot
init|=
name|QuotaTableUtil
operator|.
name|getCurrentSnapshot
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"QuotaSnapshot for "
operator|+
name|tn
operator|+
literal|" should be non-null and not in violation"
argument_list|,
name|snapshot
operator|!=
literal|null
operator|&&
operator|!
name|snapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|isInViolation
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
name|tableSize
operator|*
literal|2L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedWithDetailsException
decl||
name|SpaceLimitingException
name|e
parameter_list|)
block|{
comment|// Pass
block|}
comment|// Wait for the status to move to violation
name|Waiter
operator|.
name|waitFor
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|30
operator|*
literal|1000
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|SpaceQuotaSnapshot
name|snapshot
init|=
name|QuotaTableUtil
operator|.
name|getCurrentSnapshot
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Table snapshot after second ingest: "
operator|+
name|snapshot
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|snapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|isInViolation
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The namespace should still not be in violation, but have a larger usage than previously
name|Waiter
operator|.
name|waitFor
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|30
operator|*
literal|1000
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|SpaceQuotaSnapshot
name|snapshot
init|=
name|QuotaTableUtil
operator|.
name|getCurrentSnapshot
argument_list|(
name|conn
argument_list|,
name|tn
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Namespace snapshot after second ingest: "
operator|+
name|snapshot
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>
name|nsUsage
operator|.
name|get
argument_list|()
operator|&&
operator|!
name|snapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|isInViolation
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|countRegionsForTable
parameter_list|(
name|TableName
name|tn
parameter_list|,
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|Long
argument_list|>
name|regionSizes
parameter_list|)
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|regionSizes
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|tn
operator|.
name|equals
argument_list|(
name|regionInfo
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
name|size
operator|++
expr_stmt|;
block|}
block|}
return|return
name|size
return|;
block|}
specifier|private
name|int
name|getTableSize
parameter_list|(
name|TableName
name|tn
parameter_list|,
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|Long
argument_list|>
name|regionSizes
parameter_list|)
block|{
name|int
name|tableSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|RegionInfo
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|regionSizes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RegionInfo
name|regionInfo
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|long
name|regionSize
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|tn
operator|.
name|equals
argument_list|(
name|regionInfo
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
name|tableSize
operator|+=
name|regionSize
expr_stmt|;
block|}
block|}
return|return
name|tableSize
return|;
block|}
block|}
end_class

end_unit

