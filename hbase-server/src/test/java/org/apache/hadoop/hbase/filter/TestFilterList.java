begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompareOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
operator|.
name|ReturnCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|FilterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|FilterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestFilterList
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestFilterList
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|int
name|MAX_PAGES
init|=
literal|2
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testAddFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|Filter
name|filter1
init|=
operator|new
name|FirstKeyOnlyFilter
argument_list|()
decl_stmt|;
name|Filter
name|filter2
init|=
operator|new
name|FirstKeyOnlyFilter
argument_list|()
decl_stmt|;
name|FilterList
name|filterList
init|=
operator|new
name|FilterList
argument_list|(
name|filter1
argument_list|,
name|filter2
argument_list|)
decl_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|filter1
argument_list|,
name|filter2
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filter1
argument_list|,
name|filter2
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|filter1
argument_list|,
name|filter2
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|setReversed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FirstKeyOnlyFilter
name|f
init|=
operator|new
name|FirstKeyOnlyFilter
argument_list|()
decl_stmt|;
name|f
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|filterList
operator|.
name|addFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The IllegalArgumentException should be thrown because the added filter is reversed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConstruction
parameter_list|()
block|{
name|FirstKeyOnlyFilter
name|f1
init|=
operator|new
name|FirstKeyOnlyFilter
argument_list|()
decl_stmt|;
name|FirstKeyOnlyFilter
name|f2
init|=
operator|new
name|FirstKeyOnlyFilter
argument_list|()
decl_stmt|;
name|f1
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f2
operator|.
name|setReversed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|FilterList
name|ff
init|=
operator|new
name|FilterList
argument_list|(
name|f1
argument_list|,
name|f2
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"The IllegalArgumentException should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|FilterList
name|ff
init|=
operator|new
name|FilterList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|f1
argument_list|,
name|f2
argument_list|)
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"The IllegalArgumentException should be thrown because the added filter is reversed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|FilterList
name|ff
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|f1
argument_list|,
name|f2
argument_list|)
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"The IllegalArgumentException should be thrown because the added filter is reversed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|FilterList
name|ff
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|f1
argument_list|,
name|f2
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"The IllegalArgumentException should be thrown because the added filter is reversed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
block|}
comment|/**    * Test "must pass one"    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMPONE
parameter_list|()
throws|throws
name|Exception
block|{
name|mpOneTest
argument_list|(
name|getFilterMPONE
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Filter
name|getFilterMPONE
parameter_list|()
block|{
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|MAX_PAGES
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyy"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filterMPONE
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filters
argument_list|)
decl_stmt|;
return|return
name|filterMPONE
return|;
block|}
specifier|private
name|void
name|mpOneTest
parameter_list|(
name|Filter
name|filterMPONE
parameter_list|)
throws|throws
name|Exception
block|{
comment|/* Filter must do all below steps:      *<ul>      *<li>{@link #reset()}</li>      *<li>{@link #filterAllRemaining()} -> true indicates scan is over, false, keep going on.</li>      *<li>{@link #filterRowKey(byte[],int,int)} -> true to drop this row,      * if false, we will also call</li>      *<li>{@link #filterCell(org.apache.hadoop.hbase.KeyValue)} -> true to drop this cell</li>      *<li>{@link #filterRow()} -> last chance to drop entire row based on the sequence of      * filterValue() calls. Eg: filter a row if it doesn't contain a specified column.      *</li>      *</ul>     */
name|filterMPONE
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Will pass both */
name|byte
index|[]
name|rowkey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyyyyyyyy"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_PAGES
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|rowkey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
operator|==
name|filterMPONE
operator|.
name|filterCell
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* Only pass PageFilter */
name|rowkey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|rowkey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
operator|==
name|filterMPONE
operator|.
name|filterCell
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRow
argument_list|()
argument_list|)
expr_stmt|;
comment|/* reach MAX_PAGES already, should filter any rows */
name|rowkey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyy"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filterMPONE
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|rowkey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
operator|==
name|filterMPONE
operator|.
name|filterCell
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRow
argument_list|()
argument_list|)
expr_stmt|;
comment|/* We should filter any row */
name|rowkey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filterMPONE
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|rowkey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filterMPONE
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test "must pass all"    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMPALL
parameter_list|()
throws|throws
name|Exception
block|{
name|mpAllTest
argument_list|(
name|getMPALLFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Filter
name|getMPALLFilter
parameter_list|()
block|{
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|MAX_PAGES
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyy"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filterMPALL
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filters
argument_list|)
decl_stmt|;
return|return
name|filterMPALL
return|;
block|}
specifier|private
name|void
name|mpAllTest
parameter_list|(
name|Filter
name|filterMPALL
parameter_list|)
throws|throws
name|Exception
block|{
comment|/* Filter must do all below steps:      *<ul>      *<li>{@link #reset()}</li>      *<li>{@link #filterAllRemaining()} -> true indicates scan is over, false, keep going on.</li>      *<li>{@link #filterRowKey(byte[],int,int)} -> true to drop this row,      * if false, we will also call</li>      *<li>{@link #filterCell(org.apache.hadoop.hbase.KeyValue)} -> true to drop this cell</li>      *<li>{@link #filterRow()} -> last chance to drop entire row based on the sequence of      * filterValue() calls. Eg: filter a row if it doesn't contain a specified column.      *</li>      *</ul>     */
name|filterMPALL
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPALL
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|rowkey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyyyyyyyy"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_PAGES
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|filterMPALL
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|rowkey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
operator|==
name|filterMPALL
operator|.
name|filterCell
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|filterMPALL
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rowkey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filterMPALL
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|rowkey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should fail here; row should be filtered out.
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|rowkey
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|NEXT_ROW
operator|==
name|filterMPALL
operator|.
name|filterCell
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test list ordering    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testOrdering
parameter_list|()
throws|throws
name|Exception
block|{
name|orderingTest
argument_list|(
name|getOrderingFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Filter
name|getOrderingFilter
parameter_list|()
block|{
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyy"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|MAX_PAGES
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filterMPONE
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filters
argument_list|)
decl_stmt|;
return|return
name|filterMPONE
return|;
block|}
specifier|public
name|void
name|orderingTest
parameter_list|(
name|Filter
name|filterMPONE
parameter_list|)
throws|throws
name|Exception
block|{
comment|/* Filter must do all below steps:      *<ul>      *<li>{@link #reset()}</li>      *<li>{@link #filterAllRemaining()} -> true indicates scan is over, false, keep going on.</li>      *<li>{@link #filterRowKey(byte[],int,int)} -> true to drop this row,      * if false, we will also call</li>      *<li>{@link #filterCell(org.apache.hadoop.hbase.KeyValue)} -> true to drop this key/value</li>      *<li>{@link #filterRow()} -> last chance to drop entire row based on the sequence of      * filterValue() calls. Eg: filter a row if it doesn't contain a specified column.      *</li>      *</ul>     */
name|filterMPONE
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
comment|/* We should be able to fill MAX_PAGES without incrementing page counter */
name|byte
index|[]
name|rowkey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyyyyyyy"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_PAGES
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|rowkey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
operator|==
name|filterMPONE
operator|.
name|filterCell
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* Now let's fill the page filter */
name|rowkey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"xxxxxxx"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_PAGES
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|rowkey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
operator|==
name|filterMPONE
operator|.
name|filterCell
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* We should still be able to include even though page filter is at max */
name|rowkey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyy"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_PAGES
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|rowkey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|rowkey
argument_list|,
name|rowkey
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
operator|==
name|filterMPONE
operator|.
name|filterCell
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filterMPONE
operator|.
name|filterRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * When we do a "MUST_PASS_ONE" (a logical 'OR') of the above two filters    * we expect to get the same result as the 'prefix' only result.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testFilterListTwoFiltersMustPassOne
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|r1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|r11
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Row11"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|r2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Row2"
argument_list|)
decl_stmt|;
name|FilterList
name|flist
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|)
decl_stmt|;
name|flist
operator|.
name|addFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|flist
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|flist
operator|.
name|filterCell
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|r1
argument_list|,
name|r1
argument_list|,
name|r1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|flist
operator|.
name|filterCell
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|r11
argument_list|,
name|r11
argument_list|,
name|r11
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|flist
operator|.
name|reset
argument_list|()
expr_stmt|;
name|flist
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|SKIP
argument_list|,
name|flist
operator|.
name|filterCell
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|r2
argument_list|,
name|r2
argument_list|,
name|r2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|flist
operator|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|)
expr_stmt|;
name|flist
operator|.
name|addFilter
argument_list|(
operator|new
name|AlwaysNextColFilter
argument_list|()
argument_list|)
expr_stmt|;
name|flist
operator|.
name|addFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|flist
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|flist
operator|.
name|filterCell
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|r1
argument_list|,
name|r1
argument_list|,
name|r1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|flist
operator|.
name|filterCell
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|r11
argument_list|,
name|r11
argument_list|,
name|r11
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|flist
operator|.
name|reset
argument_list|()
expr_stmt|;
name|flist
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|,
name|flist
operator|.
name|filterCell
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|r2
argument_list|,
name|r2
argument_list|,
name|r2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * When we do a "MUST_PASS_ONE" (a logical 'OR') of the two filters    * we expect to get the same result as the inclusive stop result.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testFilterListWithInclusiveStopFilterMustPassOne
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|r1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|r11
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Row11"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|r2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Row2"
argument_list|)
decl_stmt|;
name|FilterList
name|flist
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|)
decl_stmt|;
name|flist
operator|.
name|addFilter
argument_list|(
operator|new
name|AlwaysNextColFilter
argument_list|()
argument_list|)
expr_stmt|;
name|flist
operator|.
name|addFilter
argument_list|(
operator|new
name|InclusiveStopFilter
argument_list|(
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|flist
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|flist
operator|.
name|filterCell
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|r1
argument_list|,
name|r1
argument_list|,
name|r1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|flist
operator|.
name|filterCell
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|r11
argument_list|,
name|r11
argument_list|,
name|r11
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|flist
operator|.
name|reset
argument_list|()
expr_stmt|;
name|flist
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|,
name|flist
operator|.
name|filterCell
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|r2
argument_list|,
name|r2
argument_list|,
name|r2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|AlwaysNextColFilter
extends|extends
name|FilterBase
block|{
specifier|public
name|AlwaysNextColFilter
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterCell
parameter_list|(
specifier|final
name|Cell
name|v
parameter_list|)
block|{
return|return
name|ReturnCode
operator|.
name|NEXT_COL
return|;
block|}
specifier|public
specifier|static
name|AlwaysNextColFilter
name|parseFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|pbBytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
return|return
operator|new
name|AlwaysNextColFilter
argument_list|()
return|;
block|}
block|}
comment|/**    * Test serialization    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|MAX_PAGES
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"yyy"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filterMPALL
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filters
argument_list|)
decl_stmt|;
comment|// Decompose filterMPALL to bytes.
name|byte
index|[]
name|buffer
init|=
name|filterMPALL
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// Recompose filterMPALL.
name|FilterList
name|newFilter
init|=
name|FilterList
operator|.
name|parseFrom
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
comment|// Run tests
name|mpOneTest
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|getFilterMPONE
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mpAllTest
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|getMPALLFilter
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|orderingTest
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|ProtobufUtil
operator|.
name|toFilter
argument_list|(
name|getOrderingFilter
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test filterCell logic.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testFilterCell
parameter_list|()
throws|throws
name|Exception
block|{
name|Filter
name|includeFilter
init|=
operator|new
name|FilterBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Filter
operator|.
name|ReturnCode
name|filterCell
parameter_list|(
specifier|final
name|Cell
name|v
parameter_list|)
block|{
return|return
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
block|}
decl_stmt|;
name|Filter
name|alternateFilter
init|=
operator|new
name|FilterBase
argument_list|()
block|{
name|boolean
name|returnInclude
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Filter
operator|.
name|ReturnCode
name|filterCell
parameter_list|(
specifier|final
name|Cell
name|v
parameter_list|)
block|{
name|Filter
operator|.
name|ReturnCode
name|returnCode
init|=
name|returnInclude
condition|?
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
else|:
name|Filter
operator|.
name|ReturnCode
operator|.
name|SKIP
decl_stmt|;
name|returnInclude
operator|=
operator|!
name|returnInclude
expr_stmt|;
return|return
name|returnCode
return|;
block|}
block|}
decl_stmt|;
name|Filter
name|alternateIncludeFilter
init|=
operator|new
name|FilterBase
argument_list|()
block|{
name|boolean
name|returnIncludeOnly
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Filter
operator|.
name|ReturnCode
name|filterCell
parameter_list|(
specifier|final
name|Cell
name|v
parameter_list|)
block|{
name|Filter
operator|.
name|ReturnCode
name|returnCode
init|=
name|returnIncludeOnly
condition|?
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
else|:
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
decl_stmt|;
name|returnIncludeOnly
operator|=
operator|!
name|returnIncludeOnly
expr_stmt|;
return|return
name|returnCode
return|;
block|}
block|}
decl_stmt|;
comment|// Check must pass one filter.
name|FilterList
name|mpOnefilterList
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Filter
index|[]
block|{
name|includeFilter
block|,
name|alternateIncludeFilter
block|,
name|alternateFilter
block|}
argument_list|)
argument_list|)
decl_stmt|;
comment|// INCLUDE, INCLUDE, INCLUDE_AND_NEXT_COL.
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|mpOnefilterList
operator|.
name|filterCell
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// INCLUDE, SKIP, INCLUDE.
name|assertEquals
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|mpOnefilterList
operator|.
name|filterCell
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check must pass all filter.
name|FilterList
name|mpAllfilterList
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Filter
index|[]
block|{
name|includeFilter
block|,
name|alternateIncludeFilter
block|,
name|alternateFilter
block|}
argument_list|)
argument_list|)
decl_stmt|;
comment|// INCLUDE, INCLUDE, INCLUDE_AND_NEXT_COL.
name|assertEquals
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|,
name|mpAllfilterList
operator|.
name|filterCell
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// INCLUDE, SKIP, INCLUDE.
name|assertEquals
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|SKIP
argument_list|,
name|mpAllfilterList
operator|.
name|filterCell
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test pass-thru of hints.    */
annotation|@
name|Test
specifier|public
name|void
name|testHintPassThru
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|KeyValue
name|minKeyValue
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|KeyValue
name|maxKeyValue
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Filter
name|filterNoHint
init|=
operator|new
name|FilterBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterCell
parameter_list|(
specifier|final
name|Cell
name|ignored
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
block|}
decl_stmt|;
name|Filter
name|filterMinHint
init|=
operator|new
name|FilterBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterCell
parameter_list|(
specifier|final
name|Cell
name|ignored
parameter_list|)
block|{
return|return
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|getNextCellHint
parameter_list|(
name|Cell
name|currentKV
parameter_list|)
block|{
return|return
name|minKeyValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|Filter
name|filterMaxHint
init|=
operator|new
name|FilterBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterCell
parameter_list|(
specifier|final
name|Cell
name|ignored
parameter_list|)
block|{
return|return
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|getNextCellHint
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
return|return
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|CellComparator
name|comparator
init|=
name|CellComparator
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// MUST PASS ONE
comment|// Should take the min if given two hints
name|FilterList
name|filterList
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Filter
index|[]
block|{
name|filterMinHint
block|,
name|filterMaxHint
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|comparator
operator|.
name|compare
argument_list|(
name|filterList
operator|.
name|getNextCellHint
argument_list|(
literal|null
argument_list|)
argument_list|,
name|minKeyValue
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should have no hint if any filter has no hint
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Filter
index|[]
block|{
name|filterMinHint
block|,
name|filterMaxHint
block|,
name|filterNoHint
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|filterList
operator|.
name|getNextCellHint
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Filter
index|[]
block|{
name|filterNoHint
block|,
name|filterMaxHint
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|filterList
operator|.
name|getNextCellHint
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should give max hint if its the only one
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Filter
index|[]
block|{
name|filterMaxHint
block|,
name|filterMaxHint
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|comparator
operator|.
name|compare
argument_list|(
name|filterList
operator|.
name|getNextCellHint
argument_list|(
literal|null
argument_list|)
argument_list|,
name|maxKeyValue
argument_list|)
argument_list|)
expr_stmt|;
comment|// MUST PASS ALL
comment|// Should take the first hint
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Filter
index|[]
block|{
name|filterMinHint
block|,
name|filterMaxHint
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|filterCell
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|comparator
operator|.
name|compare
argument_list|(
name|filterList
operator|.
name|getNextCellHint
argument_list|(
literal|null
argument_list|)
argument_list|,
name|minKeyValue
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Filter
index|[]
block|{
name|filterMaxHint
block|,
name|filterMinHint
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|filterCell
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|comparator
operator|.
name|compare
argument_list|(
name|filterList
operator|.
name|getNextCellHint
argument_list|(
literal|null
argument_list|)
argument_list|,
name|maxKeyValue
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should have first hint even if a filter has no hint
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Filter
index|[]
block|{
name|filterNoHint
block|,
name|filterMinHint
block|,
name|filterMaxHint
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|filterCell
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|comparator
operator|.
name|compare
argument_list|(
name|filterList
operator|.
name|getNextCellHint
argument_list|(
literal|null
argument_list|)
argument_list|,
name|minKeyValue
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Filter
index|[]
block|{
name|filterNoHint
block|,
name|filterMaxHint
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|filterCell
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|comparator
operator|.
name|compare
argument_list|(
name|filterList
operator|.
name|getNextCellHint
argument_list|(
literal|null
argument_list|)
argument_list|,
name|maxKeyValue
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Filter
index|[]
block|{
name|filterNoHint
block|,
name|filterMinHint
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|filterCell
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|comparator
operator|.
name|compare
argument_list|(
name|filterList
operator|.
name|getNextCellHint
argument_list|(
literal|null
argument_list|)
argument_list|,
name|minKeyValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the behavior of transform() in a hierarchical filter.    *    * transform() only applies after a filterCell() whose return-code includes the KeyValue.    * Lazy evaluation of AND    */
annotation|@
name|Test
specifier|public
name|void
name|testTransformMPO
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Apply the following filter:
comment|//     (family=fam AND qualifier=qual1 AND KeyOnlyFilter)
comment|//  OR (family=fam AND qualifier=qual2)
specifier|final
name|FilterList
name|flist
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|Lists
operator|.
expr|<
name|Filter
operator|>
name|newArrayList
argument_list|(
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Lists
operator|.
expr|<
name|Filter
operator|>
name|newArrayList
argument_list|(
operator|new
name|FamilyFilter
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|QualifierFilter
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual1"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|KeyOnlyFilter
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Lists
operator|.
expr|<
name|Filter
operator|>
name|newArrayList
argument_list|(
operator|new
name|FamilyFilter
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|QualifierFilter
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|KeyValue
name|kvQual1
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|KeyValue
name|kvQual2
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|KeyValue
name|kvQual3
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual3"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Value for fam:qual1 should be stripped:
name|assertEquals
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|flist
operator|.
name|filterCell
argument_list|(
name|kvQual1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|KeyValue
name|transformedQual1
init|=
name|KeyValueUtil
operator|.
name|ensureKeyValue
argument_list|(
name|flist
operator|.
name|transformCell
argument_list|(
name|kvQual1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|transformedQual1
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// Value for fam:qual2 should not be stripped:
name|assertEquals
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|flist
operator|.
name|filterCell
argument_list|(
name|kvQual2
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|KeyValue
name|transformedQual2
init|=
name|KeyValueUtil
operator|.
name|ensureKeyValue
argument_list|(
name|flist
operator|.
name|transformCell
argument_list|(
name|kvQual2
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|transformedQual2
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|transformedQual2
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|transformedQual2
operator|.
name|getValueLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Other keys should be skipped:
name|assertEquals
argument_list|(
name|Filter
operator|.
name|ReturnCode
operator|.
name|SKIP
argument_list|,
name|flist
operator|.
name|filterCell
argument_list|(
name|kvQual3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithMultiVersionsInSameRow
parameter_list|()
throws|throws
name|Exception
block|{
name|FilterList
name|filterList01
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
operator|new
name|ColumnPaginationFilter
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv3
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
argument_list|,
literal|3
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|,
name|filterList01
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|,
name|filterList01
operator|.
name|filterCell
argument_list|(
name|kv2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|,
name|filterList01
operator|.
name|filterCell
argument_list|(
name|kv3
argument_list|)
argument_list|)
expr_stmt|;
name|FilterList
name|filterList11
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
operator|new
name|ColumnPaginationFilter
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|,
name|filterList11
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|,
name|filterList11
operator|.
name|filterCell
argument_list|(
name|kv2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|,
name|filterList11
operator|.
name|filterCell
argument_list|(
name|kv3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMPONEWithSeekNextUsingHint
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|col
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|FilterList
name|filterList
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
operator|new
name|ColumnPaginationFilter
argument_list|(
literal|1
argument_list|,
name|col
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv3
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|,
literal|3
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv4
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|,
literal|4
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv4
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|MockFilter
extends|extends
name|FilterBase
block|{
specifier|private
name|ReturnCode
name|targetRetCode
decl_stmt|;
specifier|public
name|boolean
name|didCellPassToTheFilter
init|=
literal|false
decl_stmt|;
specifier|public
name|MockFilter
parameter_list|(
name|ReturnCode
name|targetRetCode
parameter_list|)
block|{
name|this
operator|.
name|targetRetCode
operator|=
name|targetRetCode
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterCell
parameter_list|(
specifier|final
name|Cell
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|didCellPassToTheFilter
operator|=
literal|true
expr_stmt|;
return|return
name|targetRetCode
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|MockFilter
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
name|MockFilter
name|f
init|=
operator|(
name|MockFilter
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|targetRetCode
operator|.
name|equals
argument_list|(
name|f
operator|.
name|targetRetCode
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|this
operator|.
name|targetRetCode
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShouldPassCurrentCellToFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv3
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
literal|3
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv4
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|,
literal|4
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|MockFilter
name|mockFilter
init|=
operator|new
name|MockFilter
argument_list|(
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|)
decl_stmt|;
name|FilterList
name|filter
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|mockFilter
argument_list|)
decl_stmt|;
name|filter
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mockFilter
operator|.
name|didCellPassToTheFilter
argument_list|)
expr_stmt|;
name|mockFilter
operator|.
name|didCellPassToTheFilter
operator|=
literal|false
expr_stmt|;
name|filter
operator|.
name|filterCell
argument_list|(
name|kv2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mockFilter
operator|.
name|didCellPassToTheFilter
argument_list|)
expr_stmt|;
name|mockFilter
operator|.
name|didCellPassToTheFilter
operator|=
literal|false
expr_stmt|;
name|filter
operator|.
name|filterCell
argument_list|(
name|kv3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mockFilter
operator|.
name|didCellPassToTheFilter
argument_list|)
expr_stmt|;
name|mockFilter
operator|=
operator|new
name|MockFilter
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|mockFilter
argument_list|)
expr_stmt|;
name|filter
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mockFilter
operator|.
name|didCellPassToTheFilter
argument_list|)
expr_stmt|;
name|mockFilter
operator|.
name|didCellPassToTheFilter
operator|=
literal|false
expr_stmt|;
name|filter
operator|.
name|filterCell
argument_list|(
name|kv2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mockFilter
operator|.
name|didCellPassToTheFilter
argument_list|)
expr_stmt|;
name|mockFilter
operator|.
name|didCellPassToTheFilter
operator|=
literal|false
expr_stmt|;
name|filter
operator|.
name|filterCell
argument_list|(
name|kv3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mockFilter
operator|.
name|didCellPassToTheFilter
argument_list|)
expr_stmt|;
name|mockFilter
operator|=
operator|new
name|MockFilter
argument_list|(
name|ReturnCode
operator|.
name|NEXT_ROW
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|mockFilter
argument_list|)
expr_stmt|;
name|filter
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mockFilter
operator|.
name|didCellPassToTheFilter
argument_list|)
expr_stmt|;
name|mockFilter
operator|.
name|didCellPassToTheFilter
operator|=
literal|false
expr_stmt|;
name|filter
operator|.
name|filterCell
argument_list|(
name|kv2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mockFilter
operator|.
name|didCellPassToTheFilter
argument_list|)
expr_stmt|;
name|mockFilter
operator|.
name|didCellPassToTheFilter
operator|=
literal|false
expr_stmt|;
name|filter
operator|.
name|filterCell
argument_list|(
name|kv3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mockFilter
operator|.
name|didCellPassToTheFilter
argument_list|)
expr_stmt|;
name|filter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|mockFilter
operator|.
name|didCellPassToTheFilter
operator|=
literal|false
expr_stmt|;
name|filter
operator|.
name|filterCell
argument_list|(
name|kv4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mockFilter
operator|.
name|didCellPassToTheFilter
argument_list|)
expr_stmt|;
name|mockFilter
operator|=
operator|new
name|MockFilter
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|mockFilter
argument_list|)
expr_stmt|;
name|filter
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mockFilter
operator|.
name|didCellPassToTheFilter
argument_list|)
expr_stmt|;
name|mockFilter
operator|.
name|didCellPassToTheFilter
operator|=
literal|false
expr_stmt|;
name|filter
operator|.
name|filterCell
argument_list|(
name|kv2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mockFilter
operator|.
name|didCellPassToTheFilter
argument_list|)
expr_stmt|;
name|mockFilter
operator|.
name|didCellPassToTheFilter
operator|=
literal|false
expr_stmt|;
name|filter
operator|.
name|filterCell
argument_list|(
name|kv3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mockFilter
operator|.
name|didCellPassToTheFilter
argument_list|)
expr_stmt|;
name|filter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|mockFilter
operator|.
name|didCellPassToTheFilter
operator|=
literal|false
expr_stmt|;
name|filter
operator|.
name|filterCell
argument_list|(
name|kv4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mockFilter
operator|.
name|didCellPassToTheFilter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTheMaximalRule
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|MockFilter
name|filter1
init|=
operator|new
name|MockFilter
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|)
decl_stmt|;
name|MockFilter
name|filter2
init|=
operator|new
name|MockFilter
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|)
decl_stmt|;
name|MockFilter
name|filter3
init|=
operator|new
name|MockFilter
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
argument_list|)
decl_stmt|;
name|MockFilter
name|filter4
init|=
operator|new
name|MockFilter
argument_list|(
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|)
decl_stmt|;
name|MockFilter
name|filter5
init|=
operator|new
name|MockFilter
argument_list|(
name|ReturnCode
operator|.
name|SKIP
argument_list|)
decl_stmt|;
name|MockFilter
name|filter6
init|=
operator|new
name|MockFilter
argument_list|(
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|)
decl_stmt|;
name|MockFilter
name|filter7
init|=
operator|new
name|MockFilter
argument_list|(
name|ReturnCode
operator|.
name|NEXT_ROW
argument_list|)
decl_stmt|;
name|FilterList
name|filterList
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filter1
argument_list|,
name|filter2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filter2
argument_list|,
name|filter3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filter4
argument_list|,
name|filter5
argument_list|,
name|filter6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filter4
argument_list|,
name|filter6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filter3
argument_list|,
name|filter1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filter3
argument_list|,
name|filter2
argument_list|,
name|filter1
argument_list|,
name|filter5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|NEXT_ROW
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filter2
argument_list|,
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filter3
argument_list|,
name|filter4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|NEXT_ROW
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filter3
argument_list|,
name|filter7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|NEXT_ROW
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTheMinimalRule
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|MockFilter
name|filter1
init|=
operator|new
name|MockFilter
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|)
decl_stmt|;
name|MockFilter
name|filter2
init|=
operator|new
name|MockFilter
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|)
decl_stmt|;
name|MockFilter
name|filter3
init|=
operator|new
name|MockFilter
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
argument_list|)
decl_stmt|;
name|MockFilter
name|filter4
init|=
operator|new
name|MockFilter
argument_list|(
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|)
decl_stmt|;
name|MockFilter
name|filter5
init|=
operator|new
name|MockFilter
argument_list|(
name|ReturnCode
operator|.
name|SKIP
argument_list|)
decl_stmt|;
name|MockFilter
name|filter6
init|=
operator|new
name|MockFilter
argument_list|(
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|)
decl_stmt|;
name|FilterList
name|filterList
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filter1
argument_list|,
name|filter2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filter2
argument_list|,
name|filter3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filter4
argument_list|,
name|filter5
argument_list|,
name|filter6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|SKIP
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filter4
argument_list|,
name|filter6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|SKIP
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filter3
argument_list|,
name|filter1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filter3
argument_list|,
name|filter2
argument_list|,
name|filter1
argument_list|,
name|filter5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filter2
argument_list|,
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filter3
argument_list|,
name|filter4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filter2
argument_list|,
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filter3
argument_list|,
name|filter4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filter6
argument_list|,
name|filter6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|MockSeekHintFilter
extends|extends
name|FilterBase
block|{
specifier|private
name|Cell
name|returnCell
decl_stmt|;
specifier|public
name|MockSeekHintFilter
parameter_list|(
name|Cell
name|returnCell
parameter_list|)
block|{
name|this
operator|.
name|returnCell
operator|=
name|returnCell
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterCell
parameter_list|(
specifier|final
name|Cell
name|v
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|getNextCellHint
parameter_list|(
name|Cell
name|currentCell
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|returnCell
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|MockSeekHintFilter
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
name|MockSeekHintFilter
name|f
init|=
operator|(
name|MockSeekHintFilter
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|returnCell
operator|.
name|equals
argument_list|(
name|f
operator|.
name|returnCell
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|this
operator|.
name|returnCell
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReversedFilterListWithMockSeekHintFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv3
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row3"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|Filter
name|filter1
init|=
operator|new
name|MockSeekHintFilter
argument_list|(
name|kv1
argument_list|)
decl_stmt|;
name|filter1
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Filter
name|filter2
init|=
operator|new
name|MockSeekHintFilter
argument_list|(
name|kv2
argument_list|)
decl_stmt|;
name|filter2
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Filter
name|filter3
init|=
operator|new
name|MockSeekHintFilter
argument_list|(
name|kv3
argument_list|)
decl_stmt|;
name|filter3
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FilterList
name|filterList
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|)
decl_stmt|;
name|filterList
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|filter1
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|filter2
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|filter3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv3
argument_list|,
name|filterList
operator|.
name|getNextCellHint
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|filter1
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|filter2
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|filter3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv1
argument_list|,
name|filterList
operator|.
name|getNextCellHint
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReversedFilterListWithOR
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|r22
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Row22"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|r2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|r1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Row1"
argument_list|)
decl_stmt|;
name|FilterList
name|filterList
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|)
decl_stmt|;
name|filterList
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PrefixFilter
name|prefixFilter
init|=
operator|new
name|PrefixFilter
argument_list|(
name|r2
argument_list|)
decl_stmt|;
name|prefixFilter
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|prefixFilter
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|r22
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|r22
argument_list|,
name|r22
argument_list|,
name|r22
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|r2
argument_list|,
name|r2
argument_list|,
name|r2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|reset
argument_list|()
expr_stmt|;
name|filterList
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|SKIP
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|r1
argument_list|,
name|r1
argument_list|,
name|r1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AlwaysNextColFilter
name|alwaysNextColFilter
init|=
operator|new
name|AlwaysNextColFilter
argument_list|()
decl_stmt|;
name|alwaysNextColFilter
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prefixFilter
operator|=
operator|new
name|PrefixFilter
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|prefixFilter
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|alwaysNextColFilter
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|prefixFilter
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|r22
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|r22
argument_list|,
name|r22
argument_list|,
name|r22
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|r2
argument_list|,
name|r2
argument_list|,
name|r2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|reset
argument_list|()
expr_stmt|;
name|filterList
operator|.
name|filterRowKey
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|r1
argument_list|,
name|r1
argument_list|,
name|r1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKeyOnlyFilterTransformCell
parameter_list|()
throws|throws
name|IOException
block|{
name|Cell
name|c
decl_stmt|;
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column1"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column1"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
decl_stmt|;
name|Filter
name|filter1
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column1"
argument_list|)
argument_list|,
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
decl_stmt|;
name|Filter
name|filter2
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column1"
argument_list|)
argument_list|,
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterList
name|internalFilterList
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filter1
argument_list|,
name|filter2
argument_list|)
decl_stmt|;
name|FilterList
name|keyOnlyFilterFirst
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
operator|new
name|KeyOnlyFilter
argument_list|()
argument_list|,
name|internalFilterList
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|keyOnlyFilterFirst
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|keyOnlyFilterFirst
operator|.
name|transformCell
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|keyOnlyFilterFirst
operator|.
name|filterCell
argument_list|(
name|kv2
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|keyOnlyFilterFirst
operator|.
name|transformCell
argument_list|(
name|kv2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
name|internalFilterList
operator|.
name|reset
argument_list|()
expr_stmt|;
name|FilterList
name|keyOnlyFilterLast
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
operator|new
name|KeyOnlyFilter
argument_list|()
argument_list|,
name|internalFilterList
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|keyOnlyFilterLast
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|keyOnlyFilterLast
operator|.
name|transformCell
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|keyOnlyFilterLast
operator|.
name|filterCell
argument_list|(
name|kv2
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|keyOnlyFilterLast
operator|.
name|transformCell
argument_list|(
name|kv2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyFilterListTransformCell
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column1"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|FilterList
name|filterList
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kv
argument_list|,
name|filterList
operator|.
name|transformCell
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kv
argument_list|,
name|filterList
operator|.
name|transformCell
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|MockNextRowFilter
extends|extends
name|FilterBase
block|{
specifier|private
name|int
name|hitCount
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterCell
parameter_list|(
specifier|final
name|Cell
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|hitCount
operator|++
expr_stmt|;
return|return
name|ReturnCode
operator|.
name|NEXT_ROW
return|;
block|}
specifier|public
name|int
name|getHitCount
parameter_list|()
block|{
return|return
name|hitCount
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowCountFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|MockNextRowFilter
name|mockNextRowFilter
init|=
operator|new
name|MockNextRowFilter
argument_list|()
decl_stmt|;
name|FilterList
name|filter
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|mockNextRowFilter
argument_list|)
decl_stmt|;
name|filter
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|filter
operator|.
name|filterCell
argument_list|(
name|kv2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mockNextRowFilter
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|TransformFilter
extends|extends
name|FilterBase
block|{
specifier|private
name|ReturnCode
name|targetRetCode
decl_stmt|;
specifier|private
name|boolean
name|transformed
init|=
literal|false
decl_stmt|;
specifier|public
name|TransformFilter
parameter_list|(
name|ReturnCode
name|targetRetCode
parameter_list|)
block|{
name|this
operator|.
name|targetRetCode
operator|=
name|targetRetCode
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterCell
parameter_list|(
specifier|final
name|Cell
name|v
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|targetRetCode
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|transformCell
parameter_list|(
name|Cell
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|transformed
operator|=
literal|true
expr_stmt|;
return|return
name|super
operator|.
name|transformCell
argument_list|(
name|c
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|getTransformed
parameter_list|()
block|{
return|return
name|this
operator|.
name|transformed
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|TransformFilter
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
name|TransformFilter
name|f
init|=
operator|(
name|TransformFilter
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|targetRetCode
operator|.
name|equals
argument_list|(
name|f
operator|.
name|targetRetCode
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|this
operator|.
name|targetRetCode
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformCell
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column1"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
comment|// case MUST_PASS_ONE
name|TransformFilter
name|filter1
init|=
operator|new
name|TransformFilter
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|)
decl_stmt|;
name|TransformFilter
name|filter2
init|=
operator|new
name|TransformFilter
argument_list|(
name|ReturnCode
operator|.
name|NEXT_ROW
argument_list|)
decl_stmt|;
name|TransformFilter
name|filter3
init|=
operator|new
name|TransformFilter
argument_list|(
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|)
decl_stmt|;
name|FilterList
name|filterList
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filter1
argument_list|,
name|filter2
argument_list|,
name|filter3
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv
argument_list|,
name|filterList
operator|.
name|transformCell
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|filter1
operator|.
name|getTransformed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|filter2
operator|.
name|getTransformed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|filter3
operator|.
name|getTransformed
argument_list|()
argument_list|)
expr_stmt|;
comment|// case MUST_PASS_ALL
name|filter1
operator|=
operator|new
name|TransformFilter
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|)
expr_stmt|;
name|filter2
operator|=
operator|new
name|TransformFilter
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
argument_list|)
expr_stmt|;
name|filter3
operator|=
operator|new
name|TransformFilter
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filter1
argument_list|,
name|filter2
argument_list|,
name|filter3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv
argument_list|,
name|filterList
operator|.
name|transformCell
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|filter1
operator|.
name|getTransformed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|filter2
operator|.
name|getTransformed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|filter3
operator|.
name|getTransformed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterListWithORWhenPassingCellMismatchPreviousRC
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Mainly test FilterListWithOR#calculateReturnCodeByPrevCellAndRC method with two sub-filters.
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|100
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|99
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv3
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|KeyValue
name|kv4
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fan"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|Filter
name|subFilter1
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterBase
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|subFilter1
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|subFilter1
operator|.
name|filterCell
argument_list|(
name|kv2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|subFilter1
operator|.
name|filterCell
argument_list|(
name|kv3
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|subFilter1
operator|.
name|filterCell
argument_list|(
name|kv4
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|)
expr_stmt|;
name|Filter
name|subFilter2
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterBase
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|subFilter2
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ReturnCode
operator|.
name|SKIP
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|subFilter2
operator|.
name|filterCell
argument_list|(
name|kv2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ReturnCode
operator|.
name|NEXT_ROW
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|subFilter2
operator|.
name|filterCell
argument_list|(
name|kv3
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ReturnCode
operator|.
name|NEXT_ROW
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|subFilter2
operator|.
name|filterCell
argument_list|(
name|kv4
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_SEEK_NEXT_ROW
argument_list|)
expr_stmt|;
name|Filter
name|filterList
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|subFilter1
argument_list|,
name|subFilter2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|NEXT_COL
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|INCLUDE_AND_NEXT_COL
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv4
argument_list|)
argument_list|)
expr_stmt|;
comment|// One sub-filter will filterAllRemaining but other sub-filter will return SEEK_HINT
name|subFilter1
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterBase
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|subFilter1
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|subFilter1
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ReturnCode
operator|.
name|NEXT_ROW
argument_list|)
expr_stmt|;
name|subFilter2
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterBase
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|subFilter2
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|subFilter1
argument_list|,
name|subFilter2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Two sub-filter returns SEEK_NEXT_USING_HINT, then we should return SEEK_NEXT_USING_HINT.
name|subFilter1
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterBase
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|subFilter1
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|)
expr_stmt|;
name|subFilter2
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterBase
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|subFilter2
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|)
expr_stmt|;
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|subFilter1
argument_list|,
name|subFilter2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
argument_list|,
name|filterList
operator|.
name|filterCell
argument_list|(
name|kv1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

