begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RetriesExhaustedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RowMutations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSyncReplicationStandBy
extends|extends
name|SyncReplicationTestBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSyncReplicationStandBy
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|TableAction
block|{
name|void
name|call
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
name|void
name|assertDisallow
parameter_list|(
name|Table
name|table
parameter_list|,
name|TableAction
name|action
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|action
operator|.
name|call
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
decl||
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
comment|// expected
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"STANDBY"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStandby
parameter_list|()
throws|throws
name|Exception
block|{
name|MasterFileSystem
name|mfs
init|=
name|UTIL2
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
decl_stmt|;
name|Path
name|remoteWALDir
init|=
name|getRemoteWALDir
argument_list|(
name|mfs
argument_list|,
name|PEER_ID
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|mfs
operator|.
name|getWALFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|remoteWALDir
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mfs
operator|.
name|getWALFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|remoteWALDir
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|UTIL2
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TABLE_NAME
argument_list|)
init|)
block|{
name|assertDisallow
argument_list|(
name|table
argument_list|,
name|t
lambda|->
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDisallow
argument_list|(
name|table
argument_list|,
name|t
lambda|->
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDisallow
argument_list|(
name|table
argument_list|,
name|t
lambda|->
name|t
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDisallow
argument_list|(
name|table
argument_list|,
name|t
lambda|->
name|t
operator|.
name|incrementColumnValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|CF
argument_list|,
name|CQ
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertDisallow
argument_list|(
name|table
argument_list|,
name|t
lambda|->
name|t
operator|.
name|append
argument_list|(
operator|new
name|Append
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDisallow
argument_list|(
name|table
argument_list|,
name|t
lambda|->
name|t
operator|.
name|get
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDisallow
argument_list|(
name|table
argument_list|,
name|t
lambda|->
name|t
operator|.
name|put
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDisallow
argument_list|(
name|table
argument_list|,
name|t
lambda|->
name|t
operator|.
name|mutateRow
argument_list|(
operator|new
name|RowMutations
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|(
name|Mutation
operator|)
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// We should still allow replication writes
name|writeAndVerifyReplication
argument_list|(
name|UTIL1
argument_list|,
name|UTIL2
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// Remove the peers in ACTIVE& STANDBY cluster.
name|FileSystem
name|fs2
init|=
name|remoteWALDir2
operator|.
name|getFileSystem
argument_list|(
name|UTIL2
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs2
operator|.
name|exists
argument_list|(
name|getRemoteWALDir
argument_list|(
name|remoteWALDir2
argument_list|,
name|PEER_ID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|DOWNGRADE_ACTIVE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs2
operator|.
name|exists
argument_list|(
name|getRemoteWALDir
argument_list|(
name|remoteWALDir2
argument_list|,
name|PEER_ID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs2
operator|.
name|exists
argument_list|(
name|getReplayRemoteWALs
argument_list|(
name|remoteWALDir2
argument_list|,
name|PEER_ID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|removeReplicationPeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
name|verifyRemovedPeer
argument_list|(
name|PEER_ID
argument_list|,
name|remoteWALDir1
argument_list|,
name|UTIL1
argument_list|)
expr_stmt|;
comment|// Peer remoteWAL dir will be renamed to replay WAL dir when transit from S to DA, and the
comment|// replay WAL dir will be removed after replaying all WALs, so create a emtpy dir here to test
comment|// whether the removeReplicationPeer would remove the remoteWAL dir.
name|fs2
operator|.
name|create
argument_list|(
name|getRemoteWALDir
argument_list|(
name|remoteWALDir2
argument_list|,
name|PEER_ID
argument_list|)
argument_list|)
expr_stmt|;
name|fs2
operator|.
name|create
argument_list|(
name|getReplayRemoteWALs
argument_list|(
name|remoteWALDir2
argument_list|,
name|PEER_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs2
operator|.
name|exists
argument_list|(
name|getRemoteWALDir
argument_list|(
name|remoteWALDir2
argument_list|,
name|PEER_ID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs2
operator|.
name|exists
argument_list|(
name|getReplayRemoteWALs
argument_list|(
name|remoteWALDir2
argument_list|,
name|PEER_ID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|removeReplicationPeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
name|verifyRemovedPeer
argument_list|(
name|PEER_ID
argument_list|,
name|remoteWALDir2
argument_list|,
name|UTIL2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

