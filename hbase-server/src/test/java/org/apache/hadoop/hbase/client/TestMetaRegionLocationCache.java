begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MultithreadedTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MetaRegionLocationCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MetaTableLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZNodePaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SmallTests
operator|.
name|class
block|,
name|MasterTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMetaRegionLocationCache
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestMetaRegionLocationCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ConnectionRegistry
name|REGISTRY
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|META_REPLICAS_NUM
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|REGISTRY
operator|=
name|ConnectionRegistryFactory
operator|.
name|getRegistry
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|RegionReplicaTestHelper
operator|.
name|waitUntilAllMetaReplicasAreReady
argument_list|(
name|TEST_UTIL
argument_list|,
name|REGISTRY
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|balancerSwitch
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|REGISTRY
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|getCurrentMetaLocations
parameter_list|(
name|ZKWatcher
name|zk
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|znode
range|:
name|zk
operator|.
name|getMetaReplicaNodes
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|zk
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|baseZNode
argument_list|,
name|znode
argument_list|)
decl_stmt|;
name|int
name|replicaId
init|=
name|zk
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|getMetaReplicaIdFromPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|RegionState
name|state
init|=
name|MetaTableLocator
operator|.
name|getMetaRegionState
argument_list|(
name|zk
argument_list|,
name|replicaId
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|HRegionLocation
argument_list|(
name|state
operator|.
name|getRegion
argument_list|()
argument_list|,
name|state
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// Verifies that the cached meta locations in the given master are in sync with what is in ZK.
specifier|private
name|void
name|verifyCachedMetaLocations
parameter_list|(
name|HMaster
name|master
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Wait until initial meta locations are loaded.
name|int
name|retries
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|master
operator|.
name|getMetaRegionLocationCache
argument_list|()
operator|.
name|getMetaRegionLocations
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|retries
operator|==
literal|10
condition|)
block|{
break|break;
block|}
block|}
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|metaHRLs
init|=
name|master
operator|.
name|getMetaRegionLocationCache
argument_list|()
operator|.
name|getMetaRegionLocations
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|metaHRLs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ZKWatcher
name|zk
init|=
name|master
operator|.
name|getZooKeeper
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|metaZnodes
init|=
name|zk
operator|.
name|getMetaReplicaNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|metaZnodes
operator|.
name|size
argument_list|()
argument_list|,
name|metaHRLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|actualHRLs
init|=
name|getCurrentMetaLocations
argument_list|(
name|zk
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|metaHRLs
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actualHRLs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|actualHRLs
argument_list|,
name|metaHRLs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitialMetaLocations
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyCachedMetaLocations
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStandByMetaLocations
parameter_list|()
throws|throws
name|Exception
block|{
name|HMaster
name|standBy
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|startMaster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|verifyCachedMetaLocations
argument_list|(
name|standBy
argument_list|)
expr_stmt|;
block|}
comment|/*    * Shuffles the meta region replicas around the cluster and makes sure the cache is not stale.    */
annotation|@
name|Test
specifier|public
name|void
name|testMetaLocationsChange
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|currentMetaLocs
init|=
name|getCurrentMetaLocations
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
argument_list|)
decl_stmt|;
comment|// Move these replicas to random servers.
for|for
control|(
name|HRegionLocation
name|location
range|:
name|currentMetaLocs
control|)
block|{
name|RegionReplicaTestHelper
operator|.
name|moveRegion
argument_list|(
name|TEST_UTIL
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
name|RegionReplicaTestHelper
operator|.
name|waitUntilAllMetaReplicasAreReady
argument_list|(
name|TEST_UTIL
argument_list|,
name|REGISTRY
argument_list|)
expr_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|MasterThread
name|masterThread
range|:
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMasterThreads
argument_list|()
control|)
block|{
name|verifyCachedMetaLocations
argument_list|(
name|masterThread
operator|.
name|getMaster
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests MetaRegionLocationCache's init procedure to make sure that it correctly watches the base    * znode for notifications.    */
annotation|@
name|Test
specifier|public
name|void
name|testMetaRegionLocationCache
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|parentZnodeName
init|=
literal|"/randomznodename"
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
name|parentZnodeName
argument_list|)
expr_stmt|;
name|ServerName
name|sn
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|,
literal|5678
argument_list|)
decl_stmt|;
try|try
init|(
name|ZKWatcher
name|zkWatcher
init|=
operator|new
name|ZKWatcher
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
init|)
block|{
comment|// A thread that repeatedly creates and drops an unrelated child znode. This is to simulate
comment|// some ZK activity in the background.
name|MultithreadedTestUtil
operator|.
name|TestContext
name|ctx
init|=
operator|new
name|MultithreadedTestUtil
operator|.
name|TestContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|addThread
argument_list|(
operator|new
name|MultithreadedTestUtil
operator|.
name|RepeatingTestThread
argument_list|(
name|ctx
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|doAnAction
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|testZnode
init|=
name|parentZnodeName
operator|+
literal|"/child"
decl_stmt|;
name|ZKUtil
operator|.
name|createNodeIfNotExistsAndWatch
argument_list|(
name|zkWatcher
argument_list|,
name|testZnode
argument_list|,
name|testZnode
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|zkWatcher
argument_list|,
name|testZnode
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|startThreads
argument_list|()
expr_stmt|;
try|try
block|{
name|MetaRegionLocationCache
name|metaCache
init|=
operator|new
name|MetaRegionLocationCache
argument_list|(
name|zkWatcher
argument_list|)
decl_stmt|;
comment|// meta znodes do not exist at this point, cache should be empty.
name|assertFalse
argument_list|(
name|metaCache
operator|.
name|getMetaRegionLocations
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set the meta locations for a random meta replicas, simulating an active hmaster meta
comment|// assignment.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
comment|// Updates the meta znodes.
name|MetaTableLocator
operator|.
name|setMetaLocation
argument_list|(
name|zkWatcher
argument_list|,
name|sn
argument_list|,
name|i
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|)
expr_stmt|;
block|}
comment|// Wait until the meta cache is populated.
name|int
name|iters
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iters
operator|++
operator|<
literal|10
condition|)
block|{
if|if
condition|(
name|metaCache
operator|.
name|getMetaRegionLocations
argument_list|()
operator|.
name|isPresent
argument_list|()
operator|&&
name|metaCache
operator|.
name|getMetaRegionLocations
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|metaLocations
init|=
name|metaCache
operator|.
name|getMetaRegionLocations
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|metaLocations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegionLocation
name|location
range|:
name|metaLocations
control|)
block|{
name|assertEquals
argument_list|(
name|sn
argument_list|,
name|location
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// clean up.
name|ctx
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ZKUtil
operator|.
name|deleteChildrenRecursively
argument_list|(
name|zkWatcher
argument_list|,
name|parentZnodeName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

