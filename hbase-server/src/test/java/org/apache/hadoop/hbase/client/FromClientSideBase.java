begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|countRows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompareOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCommonTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|StartMiniClusterOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SingleColumnValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WhileMatchFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|NonRepeatedEnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|TableDescriptorChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Base for TestFromClientSide* classes.  * Has common defines and utility used by all.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
class|class
name|FromClientSideBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FromClientSideBase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|byte
index|[]
name|INVALID_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"invalidTestFamily"
argument_list|)
decl_stmt|;
specifier|static
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
argument_list|)
decl_stmt|;
specifier|static
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValue"
argument_list|)
decl_stmt|;
specifier|static
name|int
name|SLAVES
init|=
literal|1
decl_stmt|;
comment|// To keep the child classes happy.
name|FromClientSideBase
parameter_list|()
block|{}
comment|/**    * JUnit does not provide an easy way to run a hook after each parameterized run. Without that    * there is no easy way to restart the test cluster after each parameterized run. Annotation    * BeforeParam does not work either because it runs before parameterization and hence does not    * have access to the test parameters (which is weird).    *    * This *hack* checks if the current instance of test cluster configuration has the passed    * parameterized configs. In such a case, we can just reuse the cluster for test and do not need    * to initialize from scratch. While this is a hack, it saves a ton of time for the full    * test and de-flakes it.    */
specifier|protected
specifier|static
name|boolean
name|isSameParameterizedCluster
parameter_list|(
name|Class
name|registryImpl
parameter_list|,
name|int
name|numHedgedReqs
parameter_list|)
block|{
if|if
condition|(
name|TEST_UTIL
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Class
name|confClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|HConstants
operator|.
name|CLIENT_CONNECTION_REGISTRY_IMPL_CONF_KEY
argument_list|,
name|ZKConnectionRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|hedgedReqConfig
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPCS_HEDGED_REQS_FANOUT_KEY
argument_list|,
name|HConstants
operator|.
name|HBASE_RPCS_HEDGED_REQS_FANOUT_DEFAULT
argument_list|)
decl_stmt|;
return|return
name|confClass
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|registryImpl
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|numHedgedReqs
operator|==
name|hedgedReqConfig
return|;
block|}
specifier|protected
specifier|static
specifier|final
name|void
name|initialize
parameter_list|(
name|Class
name|registryImpl
parameter_list|,
name|int
name|numHedgedReqs
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|cps
parameter_list|)
throws|throws
name|Exception
block|{
comment|// initialize() is called for every unit test, however we only want to reset the cluster state
comment|// at the end of every parameterized run.
if|if
condition|(
name|isSameParameterizedCluster
argument_list|(
name|registryImpl
argument_list|,
name|numHedgedReqs
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Uncomment the following lines if more verbosity is needed for
comment|// debugging (see HBASE-12285 for details).
comment|// ((Log4JLogger)RpcServer.LOG).getLogger().setLevel(Level.ALL);
comment|// ((Log4JLogger)RpcClient.LOG).getLogger().setLevel(Level.ALL);
comment|// ((Log4JLogger)ScannerCallable.LOG).getLogger().setLevel(Level.ALL);
comment|// make sure that we do not get the same ts twice, see HBASE-19731 for more details.
name|EnvironmentEdgeManager
operator|.
name|injectEdge
argument_list|(
operator|new
name|NonRepeatedEnvironmentEdge
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|TEST_UTIL
operator|!=
literal|null
condition|)
block|{
comment|// We reached end of a parameterized run, clean up.
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|Arrays
operator|.
name|stream
argument_list|(
name|cps
argument_list|)
operator|.
name|map
argument_list|(
name|Class
operator|::
name|getName
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|TableDescriptorChecker
operator|.
name|TABLE_SANITY_CHECKS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// enable for below tests
name|conf
operator|.
name|setClass
argument_list|(
name|HConstants
operator|.
name|CLIENT_CONNECTION_REGISTRY_IMPL_CONF_KEY
argument_list|,
name|registryImpl
argument_list|,
name|ConnectionRegistry
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|numHedgedReqs
operator|==
literal|1
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|MASTER_REGISTRY_ENABLE_HEDGED_READS_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|numHedgedReqs
operator|>
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|MASTER_REGISTRY_ENABLE_HEDGED_READS_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPCS_HEDGED_REQS_FANOUT_KEY
argument_list|,
name|numHedgedReqs
argument_list|)
expr_stmt|;
name|StartMiniClusterOption
operator|.
name|Builder
name|builder
init|=
name|StartMiniClusterOption
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// Multiple masters needed only when hedged reads for master registry are enabled.
name|builder
operator|.
name|numMasters
argument_list|(
name|numHedgedReqs
operator|>
literal|1
condition|?
literal|3
else|:
literal|1
argument_list|)
operator|.
name|numRegionServers
argument_list|(
name|SLAVES
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|TEST_UTIL
operator|!=
literal|null
condition|)
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|deleteColumns
parameter_list|(
name|Table
name|ht
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|ResultScanner
name|scanner
init|=
name|buildScanner
argument_list|(
name|keyPrefix
argument_list|,
name|value
argument_list|,
name|ht
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Result
argument_list|>
name|it
init|=
name|scanner
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Result
name|result
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Did not perform correct number of deletes"
argument_list|,
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|int
name|getNumberOfRows
parameter_list|(
name|String
name|keyPrefix
parameter_list|,
name|String
name|value
parameter_list|,
name|Table
name|ht
parameter_list|)
throws|throws
name|Exception
block|{
name|ResultScanner
name|resultScanner
init|=
name|buildScanner
argument_list|(
name|keyPrefix
argument_list|,
name|value
argument_list|,
name|ht
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Result
argument_list|>
name|scanner
init|=
name|resultScanner
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|numberOfResults
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Got back key: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|result
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"kv="
operator|+
name|kv
operator|.
name|toString
argument_list|()
operator|+
literal|", "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|numberOfResults
operator|++
expr_stmt|;
block|}
return|return
name|numberOfResults
return|;
block|}
specifier|protected
name|ResultScanner
name|buildScanner
parameter_list|(
name|String
name|keyPrefix
parameter_list|,
name|String
name|value
parameter_list|,
name|Table
name|ht
parameter_list|)
throws|throws
name|IOException
block|{
comment|// OurFilterList allFilters = new OurFilterList();
name|FilterList
name|allFilters
init|=
operator|new
name|FilterList
argument_list|(
comment|/* FilterList.Operator.MUST_PASS_ALL */
argument_list|)
decl_stmt|;
name|allFilters
operator|.
name|addFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keyPrefix
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SingleColumnValueFilter
name|filter
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
argument_list|,
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setFilterIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|allFilters
operator|.
name|addFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
comment|// allFilters.addFilter(new
comment|// RowExcludingSingleColumnValueFilter(Bytes.toBytes("trans-tags"),
comment|// Bytes.toBytes("qual2"), CompareOp.EQUAL, Bytes.toBytes(value)));
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-blob"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-type"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-date"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-group"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|allFilters
argument_list|)
expr_stmt|;
return|return
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
return|;
block|}
specifier|protected
name|void
name|putRows
parameter_list|(
name|Table
name|ht
parameter_list|,
name|int
name|numRows
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|String
name|row
init|=
name|key
operator|+
literal|"_"
operator|+
name|HBaseCommonTestingUtility
operator|.
name|getRandomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Saving row: %s, with value %s"
argument_list|,
name|row
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-blob"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value for blob"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-type"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"statement"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-date"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"20090921010101999"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-group"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"adhocTransactionGroupId"
argument_list|)
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertRowCount
parameter_list|(
specifier|final
name|Table
name|t
parameter_list|,
specifier|final
name|int
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|countRows
argument_list|(
name|t
argument_list|,
operator|new
name|Scan
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * @param key    * @return Scan with RowFilter that does LESS than passed key.    */
specifier|protected
name|Scan
name|createScanWithRowFilter
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|createScanWithRowFilter
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|CompareOperator
operator|.
name|LESS
argument_list|)
return|;
block|}
comment|/*    * @param key    * @param op    * @param startRow    * @return Scan with RowFilter that does CompareOp op on passed key.    */
specifier|protected
name|Scan
name|createScanWithRowFilter
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|,
specifier|final
name|byte
index|[]
name|startRow
parameter_list|,
name|CompareOperator
name|op
parameter_list|)
block|{
comment|// Make sure key is of some substance... non-null and> than first key.
name|assertTrue
argument_list|(
name|key
operator|!=
literal|null
operator|&&
name|key
operator|.
name|length
operator|>
literal|0
operator|&&
name|Bytes
operator|.
name|BYTES_COMPARATOR
operator|.
name|compare
argument_list|(
name|key
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'a'
block|,
literal|'a'
block|}
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Key="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
name|startRow
operator|==
literal|null
condition|?
operator|new
name|Scan
argument_list|()
else|:
operator|new
name|Scan
argument_list|(
name|startRow
argument_list|)
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|RowFilter
argument_list|(
name|op
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|=
operator|new
name|WhileMatchFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
comment|/**    * Split table into multiple regions.    * @param t Table to split.    * @return Map of regions to servers.    */
specifier|protected
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|splitTable
parameter_list|(
specifier|final
name|Table
name|t
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Split this table in two.
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|split
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Is it right closing this admin?
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
name|waitOnSplit
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|regions
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
return|return
name|regions
return|;
block|}
comment|/*    * Wait on table split.  May return because we waited long enough on the split    * and it didn't happen.  Caller should check.    * @param t    * @return Map of table regions; caller needs to check table actually split.    */
specifier|private
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|waitOnSplit
parameter_list|(
specifier|final
name|Table
name|t
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
init|)
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
name|int
name|originalCount
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.test.retries"
argument_list|,
literal|30
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|regions
operator|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
if|if
condition|(
name|regions
operator|.
name|size
argument_list|()
operator|>
name|originalCount
condition|)
block|{
break|break;
block|}
block|}
return|return
name|regions
return|;
block|}
block|}
specifier|protected
name|Result
name|getSingleScanResult
parameter_list|(
name|Table
name|ht
parameter_list|,
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
name|byte
index|[]
index|[]
name|makeNAscii
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|>
literal|256
condition|)
block|{
return|return
name|makeNBig
argument_list|(
name|base
argument_list|,
name|n
argument_list|)
return|;
block|}
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|tail
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|base
argument_list|,
name|tail
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|byte
index|[]
index|[]
name|makeN
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|>
literal|256
condition|)
block|{
return|return
name|makeNBig
argument_list|(
name|base
argument_list|,
name|n
argument_list|)
return|;
block|}
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|base
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|i
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|byte
index|[]
index|[]
name|makeNBig
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|int
name|byteA
init|=
operator|(
name|i
operator|%
literal|256
operator|)
decl_stmt|;
name|int
name|byteB
init|=
operator|(
name|i
operator|>>
literal|8
operator|)
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|base
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|byteB
block|,
operator|(
name|byte
operator|)
name|byteA
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|long
index|[]
name|makeStamps
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|long
index|[]
name|stamps
init|=
operator|new
name|long
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|stamps
index|[
name|i
index|]
operator|=
name|i
operator|+
literal|1L
expr_stmt|;
block|}
return|return
name|stamps
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|equals
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|byte
index|[]
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|null
operator|&&
name|right
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|left
operator|==
literal|null
operator|&&
name|right
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|right
operator|==
literal|null
operator|&&
name|left
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
specifier|protected
name|void
name|assertKey
parameter_list|(
name|Cell
name|key
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|assertIncrementKey
parameter_list|(
name|Cell
name|key
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected value ["
operator|+
name|value
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertNumKeys
parameter_list|(
name|Result
name|result
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|n
operator|+
literal|" keys but got "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertNResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|byte
index|[]
index|[]
name|qualifiers
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
index|[]
index|[]
name|idxs
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|idxs
operator|.
name|length
operator|+
literal|" keys but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|idxs
operator|.
name|length
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|keys
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|family
init|=
name|families
index|[
name|idxs
index|[
name|i
index|]
index|[
literal|0
index|]
index|]
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|qualifiers
index|[
name|idxs
index|[
name|i
index|]
index|[
literal|1
index|]
index|]
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|values
index|[
name|idxs
index|[
name|i
index|]
index|[
literal|2
index|]
index|]
decl_stmt|;
name|Cell
name|key
init|=
name|keys
index|[
name|i
index|]
decl_stmt|;
name|byte
index|[]
name|famb
init|=
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualb
init|=
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|byte
index|[]
name|valb
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|famb
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|famb
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualb
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|qualb
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|valb
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|valb
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertNResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expectedResults
init|=
name|end
operator|-
name|start
operator|+
literal|1
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedResults
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|keys
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|value
init|=
name|values
index|[
name|end
operator|-
name|i
index|]
decl_stmt|;
name|long
name|ts
init|=
name|stamps
index|[
name|end
operator|-
name|i
index|]
decl_stmt|;
name|Cell
name|key
init|=
name|keys
index|[
name|i
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|key
argument_list|,
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|key
argument_list|,
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected ts ["
operator|+
name|ts
operator|+
literal|"] "
operator|+
literal|"Got ts ["
operator|+
name|key
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|"]"
argument_list|,
name|ts
argument_list|,
name|key
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validate that result contains two specified keys, exactly.    * It is assumed key A sorts before key B.    */
specifier|protected
name|void
name|assertDoubleResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|familyA
parameter_list|,
name|byte
index|[]
name|qualifierA
parameter_list|,
name|byte
index|[]
name|valueA
parameter_list|,
name|byte
index|[]
name|familyB
parameter_list|,
name|byte
index|[]
name|qualifierB
parameter_list|,
name|byte
index|[]
name|valueB
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected two keys but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|kv
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|Cell
name|kvA
init|=
name|kv
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"(A) Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|familyA
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kvA
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|familyA
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kvA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"(A) Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifierA
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kvA
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifierA
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kvA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"(A) Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|valueA
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvA
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|valueA
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Cell
name|kvB
init|=
name|kv
index|[
literal|1
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"(B) Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|familyB
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kvB
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|familyB
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kvB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"(B) Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifierB
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kvB
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifierB
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kvB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"(B) Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|valueB
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvB
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|valueB
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertSingleResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected a single key but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|kv
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertSingleResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected a single key but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|kv
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected value ["
operator|+
name|value
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|value
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertSingleResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|ts
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected a single key but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|kv
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected ts ["
operator|+
name|ts
operator|+
literal|"] "
operator|+
literal|"Got ts ["
operator|+
name|kv
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|"]"
argument_list|,
name|ts
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertEmptyResult
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"expected an empty result but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
operator|+
literal|" keys"
argument_list|,
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertNullResult
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
literal|"expected null result but received a non-null result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|getVersionRangeAndVerifyGreaterThan
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|stamps
index|[
name|start
operator|+
literal|1
index|]
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
operator|+
literal|1
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|getVersionRangeAndVerify
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|stamps
index|[
name|start
index|]
argument_list|,
name|stamps
index|[
name|end
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|getAllVersionsAndVerify
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|scanVersionRangeAndVerifyGreaterThan
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|stamps
index|[
name|start
operator|+
literal|1
index|]
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
operator|+
literal|1
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|scanVersionRangeAndVerify
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|stamps
index|[
name|start
index|]
argument_list|,
name|stamps
index|[
name|end
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|scanAllVersionsAndVerify
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|getVersionAndVerify
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|stamp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimestamp
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamp
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|getVersionAndVerifyMissing
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|stamp
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimestamp
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|scanVersionAndVerify
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|stamp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimestamp
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamp
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|scanVersionAndVerifyMissing
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|stamp
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimestamp
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|getTestNull
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|getTestNull
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|scanTestNull
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|scanTestNull
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|boolean
name|isReversedScan
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
name|isReversedScan
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
name|isReversedScan
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
name|isReversedScan
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
name|isReversedScan
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|singleRowGetTest
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|byte
index|[]
index|[]
name|VALUES
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Single column from memstore
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Single column from storefile
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// Single column from storefile, family match
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
comment|// Two columns, one from memstore one from storefile, same family,
comment|// wildcard match
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertDoubleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Two columns, one from memstore one from storefile, same family,
comment|// explicit match
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertDoubleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Three column, one from memstore two from storefile, different families,
comment|// wildcard match
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Multiple columns from everywhere storefile, many family, wildcard
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Multiple columns from everywhere storefile, many family, wildcard
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Everything
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|9
block|,
literal|0
block|,
literal|0
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Get around inserted columns
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|singleRowScanTest
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|byte
index|[]
index|[]
name|VALUES
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Single column from memstore
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Single column from storefile
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// Single column from storefile, family match
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
comment|// Two columns, one from memstore one from storefile, same family,
comment|// wildcard match
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertDoubleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Two columns, one from memstore one from storefile, same family,
comment|// explicit match
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertDoubleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Three column, one from memstore two from storefile, different families,
comment|// wildcard match
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Multiple columns from everywhere storefile, many family, wildcard
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Multiple columns from everywhere storefile, many family, wildcard
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Everything
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|9
block|,
literal|0
block|,
literal|0
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Scan around inserted columns
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify a single column using gets.    * Expects family and qualifier arrays to be valid for at least    * the range:  idx-2< idx< idx+2    */
specifier|protected
name|void
name|getVerifySingleColumn
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|int
name|ROWIDX
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|int
name|FAMILYIDX
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|int
name|QUALIFIERIDX
parameter_list|,
name|byte
index|[]
index|[]
name|VALUES
parameter_list|,
name|int
name|VALUEIDX
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|+
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify a single column using scanners.    * Expects family and qualifier arrays to be valid for at least    * the range:  idx-2 to idx+2    * Expects row array to be valid for at least idx to idx+2    */
specifier|protected
name|void
name|scanVerifySingleColumn
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|int
name|ROWIDX
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|int
name|FAMILYIDX
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|int
name|QUALIFIERIDX
parameter_list|,
name|byte
index|[]
index|[]
name|VALUES
parameter_list|,
name|int
name|VALUEIDX
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify we do not read any values by accident around a single column    * Same requirements as getVerifySingleColumn    */
specifier|protected
name|void
name|getVerifySingleEmpty
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|int
name|ROWIDX
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|int
name|FAMILYIDX
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|int
name|QUALIFIERIDX
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|scanVerifySingleEmpty
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|int
name|ROWIDX
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|int
name|FAMILYIDX
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|int
name|QUALIFIERIDX
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|,
name|ROWS
index|[
name|ROWIDX
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

