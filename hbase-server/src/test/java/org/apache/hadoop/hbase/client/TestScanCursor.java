begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestScanCursor
extends|extends
name|AbstractTestScanCursor
block|{
annotation|@
name|Test
specifier|public
name|void
name|testHeartbeatWithSparseFilter
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|getScanner
argument_list|(
name|createScanWithSparseFilter
argument_list|()
argument_list|)
init|)
block|{
name|int
name|num
init|=
literal|0
decl_stmt|;
name|Result
name|r
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|num
operator|<
operator|(
name|NUM_ROWS
operator|-
literal|1
operator|)
operator|*
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isCursor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|ROWS
index|[
name|num
operator|/
name|NUM_FAMILIES
operator|/
name|NUM_QUALIFIERS
index|]
argument_list|,
name|r
operator|.
name|getCursor
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isCursor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|ROWS
index|[
name|num
operator|/
name|NUM_FAMILIES
operator|/
name|NUM_QUALIFIERS
index|]
argument_list|,
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|num
operator|++
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeartbeatWithSparseFilterReversed
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|getScanner
argument_list|(
name|createReversedScanWithSparseFilter
argument_list|()
argument_list|)
init|)
block|{
name|int
name|num
init|=
literal|0
decl_stmt|;
name|Result
name|r
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|num
operator|<
operator|(
name|NUM_ROWS
operator|-
literal|1
operator|)
operator|*
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isCursor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|ROWS
index|[
name|NUM_ROWS
operator|-
literal|1
operator|-
name|num
operator|/
name|NUM_FAMILIES
operator|/
name|NUM_QUALIFIERS
index|]
argument_list|,
name|r
operator|.
name|getCursor
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isCursor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|num
operator|++
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSizeLimit
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|getScanner
argument_list|(
name|createScanWithSizeLimit
argument_list|()
argument_list|)
init|)
block|{
name|int
name|num
init|=
literal|0
decl_stmt|;
name|Result
name|r
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|num
operator|%
operator|(
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
operator|)
operator|!=
operator|(
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
operator|)
operator|-
literal|1
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isCursor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|ROWS
index|[
name|num
operator|/
name|NUM_FAMILIES
operator|/
name|NUM_QUALIFIERS
index|]
argument_list|,
name|r
operator|.
name|getCursor
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isCursor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|ROWS
index|[
name|num
operator|/
name|NUM_FAMILIES
operator|/
name|NUM_QUALIFIERS
index|]
argument_list|,
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|num
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

